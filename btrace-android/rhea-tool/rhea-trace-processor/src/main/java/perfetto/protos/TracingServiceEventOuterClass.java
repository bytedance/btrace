// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: protos/perfetto/trace/perfetto/tracing_service_event.proto
// Protobuf Java Version: 4.29.3

package perfetto.protos;

public final class TracingServiceEventOuterClass {
  private TracingServiceEventOuterClass() {}
  static {
    com.google.protobuf.RuntimeVersion.validateProtobufGencodeVersion(
      com.google.protobuf.RuntimeVersion.RuntimeDomain.PUBLIC,
      /* major= */ 4,
      /* minor= */ 29,
      /* patch= */ 3,
      /* suffix= */ "",
      TracingServiceEventOuterClass.class.getName());
  }
  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistryLite registry) {
  }

  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistry registry) {
    registerAllExtensions(
        (com.google.protobuf.ExtensionRegistryLite) registry);
  }
  public interface TracingServiceEventOrBuilder extends
      // @@protoc_insertion_point(interface_extends:perfetto.protos.TracingServiceEvent)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <pre>
     * Emitted when we start tracing and specifically, this will be before any
     * producer is notified about the existence of this trace. This is always
     * emitted before the all_data_sources_started event. This event is also
     * guaranteed to be seen (byte-offset wise) before any data packets from
     * producers.
     * </pre>
     *
     * <code>bool tracing_started = 2;</code>
     * @return Whether the tracingStarted field is set.
     */
    boolean hasTracingStarted();
    /**
     * <pre>
     * Emitted when we start tracing and specifically, this will be before any
     * producer is notified about the existence of this trace. This is always
     * emitted before the all_data_sources_started event. This event is also
     * guaranteed to be seen (byte-offset wise) before any data packets from
     * producers.
     * </pre>
     *
     * <code>bool tracing_started = 2;</code>
     * @return The tracingStarted.
     */
    boolean getTracingStarted();

    /**
     * <pre>
     * Emitted after all data sources saw the start event and ACKed it.
     * This identifies the point in time when it's safe to assume that all data
     * sources have been recording events.
     * </pre>
     *
     * <code>bool all_data_sources_started = 1;</code>
     * @return Whether the allDataSourcesStarted field is set.
     */
    boolean hasAllDataSourcesStarted();
    /**
     * <pre>
     * Emitted after all data sources saw the start event and ACKed it.
     * This identifies the point in time when it's safe to assume that all data
     * sources have been recording events.
     * </pre>
     *
     * <code>bool all_data_sources_started = 1;</code>
     * @return The allDataSourcesStarted.
     */
    boolean getAllDataSourcesStarted();

    /**
     * <pre>
     * Emitted when a flush is started.
     * </pre>
     *
     * <code>bool flush_started = 9;</code>
     * @return Whether the flushStarted field is set.
     */
    boolean hasFlushStarted();
    /**
     * <pre>
     * Emitted when a flush is started.
     * </pre>
     *
     * <code>bool flush_started = 9;</code>
     * @return The flushStarted.
     */
    boolean getFlushStarted();

    /**
     * <pre>
     * Emitted when all data sources have been flushed successfully or with an
     * error (including timeouts). This can generally happen many times over the
     * course of the trace.
     * </pre>
     *
     * <code>bool all_data_sources_flushed = 3;</code>
     * @return Whether the allDataSourcesFlushed field is set.
     */
    boolean hasAllDataSourcesFlushed();
    /**
     * <pre>
     * Emitted when all data sources have been flushed successfully or with an
     * error (including timeouts). This can generally happen many times over the
     * course of the trace.
     * </pre>
     *
     * <code>bool all_data_sources_flushed = 3;</code>
     * @return The allDataSourcesFlushed.
     */
    boolean getAllDataSourcesFlushed();

    /**
     * <pre>
     * Emitted when reading back the central tracing buffers has been completed.
     * If |write_into_file| is specified, this can happen many times over the
     * course of the trace.
     * </pre>
     *
     * <code>bool read_tracing_buffers_completed = 4;</code>
     * @return Whether the readTracingBuffersCompleted field is set.
     */
    boolean hasReadTracingBuffersCompleted();
    /**
     * <pre>
     * Emitted when reading back the central tracing buffers has been completed.
     * If |write_into_file| is specified, this can happen many times over the
     * course of the trace.
     * </pre>
     *
     * <code>bool read_tracing_buffers_completed = 4;</code>
     * @return The readTracingBuffersCompleted.
     */
    boolean getReadTracingBuffersCompleted();

    /**
     * <pre>
     * Emitted after tracing has been disabled and specifically, this will be
     * after all packets from producers have been included in the central
     * tracing buffer.
     * </pre>
     *
     * <code>bool tracing_disabled = 5;</code>
     * @return Whether the tracingDisabled field is set.
     */
    boolean hasTracingDisabled();
    /**
     * <pre>
     * Emitted after tracing has been disabled and specifically, this will be
     * after all packets from producers have been included in the central
     * tracing buffer.
     * </pre>
     *
     * <code>bool tracing_disabled = 5;</code>
     * @return The tracingDisabled.
     */
    boolean getTracingDisabled();

    /**
     * <pre>
     * Emitted if perfetto --save-for-bugreport was invoked while the current
     * tracing session was running and it had the highest bugreport_score. In
     * this case the original consumer will see a nearly empty trace, because
     * the contents are routed onto the bugreport file. This event flags the
     * situation explicitly. Traces that contain this marker should be discarded
     * by test infrastructures / pipelines.
     * Deprecated since Android U, where --save-for-bugreport uses
     * non-destructive cloning.
     * </pre>
     *
     * <code>bool seized_for_bugreport = 6;</code>
     * @return Whether the seizedForBugreport field is set.
     */
    boolean hasSeizedForBugreport();
    /**
     * <pre>
     * Emitted if perfetto --save-for-bugreport was invoked while the current
     * tracing session was running and it had the highest bugreport_score. In
     * this case the original consumer will see a nearly empty trace, because
     * the contents are routed onto the bugreport file. This event flags the
     * situation explicitly. Traces that contain this marker should be discarded
     * by test infrastructures / pipelines.
     * Deprecated since Android U, where --save-for-bugreport uses
     * non-destructive cloning.
     * </pre>
     *
     * <code>bool seized_for_bugreport = 6;</code>
     * @return The seizedForBugreport.
     */
    boolean getSeizedForBugreport();

    /**
     * <pre>
     * Emitted when not all data sources in all producers reply to a start
     * request after some time.
     * </pre>
     *
     * <code>.perfetto.protos.TracingServiceEvent.DataSources slow_starting_data_sources = 7;</code>
     * @return Whether the slowStartingDataSources field is set.
     */
    boolean hasSlowStartingDataSources();
    /**
     * <pre>
     * Emitted when not all data sources in all producers reply to a start
     * request after some time.
     * </pre>
     *
     * <code>.perfetto.protos.TracingServiceEvent.DataSources slow_starting_data_sources = 7;</code>
     * @return The slowStartingDataSources.
     */
    perfetto.protos.TracingServiceEventOuterClass.TracingServiceEvent.DataSources getSlowStartingDataSources();
    /**
     * <pre>
     * Emitted when not all data sources in all producers reply to a start
     * request after some time.
     * </pre>
     *
     * <code>.perfetto.protos.TracingServiceEvent.DataSources slow_starting_data_sources = 7;</code>
     */
    perfetto.protos.TracingServiceEventOuterClass.TracingServiceEvent.DataSourcesOrBuilder getSlowStartingDataSourcesOrBuilder();

    /**
     * <pre>
     * Emitted when the last flush request has failed. Lists data sources that
     * did not reply on time.
     * </pre>
     *
     * <code>.perfetto.protos.TracingServiceEvent.DataSources last_flush_slow_data_sources = 8;</code>
     * @return Whether the lastFlushSlowDataSources field is set.
     */
    boolean hasLastFlushSlowDataSources();
    /**
     * <pre>
     * Emitted when the last flush request has failed. Lists data sources that
     * did not reply on time.
     * </pre>
     *
     * <code>.perfetto.protos.TracingServiceEvent.DataSources last_flush_slow_data_sources = 8;</code>
     * @return The lastFlushSlowDataSources.
     */
    perfetto.protos.TracingServiceEventOuterClass.TracingServiceEvent.DataSources getLastFlushSlowDataSources();
    /**
     * <pre>
     * Emitted when the last flush request has failed. Lists data sources that
     * did not reply on time.
     * </pre>
     *
     * <code>.perfetto.protos.TracingServiceEvent.DataSources last_flush_slow_data_sources = 8;</code>
     */
    perfetto.protos.TracingServiceEventOuterClass.TracingServiceEvent.DataSourcesOrBuilder getLastFlushSlowDataSourcesOrBuilder();

    perfetto.protos.TracingServiceEventOuterClass.TracingServiceEvent.EventTypeCase getEventTypeCase();
  }
  /**
   * <pre>
   * Events emitted by the tracing service.
   * </pre>
   *
   * Protobuf type {@code perfetto.protos.TracingServiceEvent}
   */
  public static final class TracingServiceEvent extends
      com.google.protobuf.GeneratedMessage implements
      // @@protoc_insertion_point(message_implements:perfetto.protos.TracingServiceEvent)
      TracingServiceEventOrBuilder {
  private static final long serialVersionUID = 0L;
    static {
      com.google.protobuf.RuntimeVersion.validateProtobufGencodeVersion(
        com.google.protobuf.RuntimeVersion.RuntimeDomain.PUBLIC,
        /* major= */ 4,
        /* minor= */ 29,
        /* patch= */ 3,
        /* suffix= */ "",
        TracingServiceEvent.class.getName());
    }
    // Use TracingServiceEvent.newBuilder() to construct.
    private TracingServiceEvent(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
    }
    private TracingServiceEvent() {
    }

    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return perfetto.protos.TracingServiceEventOuterClass.internal_static_perfetto_protos_TracingServiceEvent_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return perfetto.protos.TracingServiceEventOuterClass.internal_static_perfetto_protos_TracingServiceEvent_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              perfetto.protos.TracingServiceEventOuterClass.TracingServiceEvent.class, perfetto.protos.TracingServiceEventOuterClass.TracingServiceEvent.Builder.class);
    }

    public interface DataSourcesOrBuilder extends
        // @@protoc_insertion_point(interface_extends:perfetto.protos.TracingServiceEvent.DataSources)
        com.google.protobuf.MessageOrBuilder {

      /**
       * <code>repeated .perfetto.protos.TracingServiceEvent.DataSources.DataSource data_source = 1;</code>
       */
      java.util.List<perfetto.protos.TracingServiceEventOuterClass.TracingServiceEvent.DataSources.DataSource> 
          getDataSourceList();
      /**
       * <code>repeated .perfetto.protos.TracingServiceEvent.DataSources.DataSource data_source = 1;</code>
       */
      perfetto.protos.TracingServiceEventOuterClass.TracingServiceEvent.DataSources.DataSource getDataSource(int index);
      /**
       * <code>repeated .perfetto.protos.TracingServiceEvent.DataSources.DataSource data_source = 1;</code>
       */
      int getDataSourceCount();
      /**
       * <code>repeated .perfetto.protos.TracingServiceEvent.DataSources.DataSource data_source = 1;</code>
       */
      java.util.List<? extends perfetto.protos.TracingServiceEventOuterClass.TracingServiceEvent.DataSources.DataSourceOrBuilder> 
          getDataSourceOrBuilderList();
      /**
       * <code>repeated .perfetto.protos.TracingServiceEvent.DataSources.DataSource data_source = 1;</code>
       */
      perfetto.protos.TracingServiceEventOuterClass.TracingServiceEvent.DataSources.DataSourceOrBuilder getDataSourceOrBuilder(
          int index);
    }
    /**
     * Protobuf type {@code perfetto.protos.TracingServiceEvent.DataSources}
     */
    public static final class DataSources extends
        com.google.protobuf.GeneratedMessage implements
        // @@protoc_insertion_point(message_implements:perfetto.protos.TracingServiceEvent.DataSources)
        DataSourcesOrBuilder {
    private static final long serialVersionUID = 0L;
      static {
        com.google.protobuf.RuntimeVersion.validateProtobufGencodeVersion(
          com.google.protobuf.RuntimeVersion.RuntimeDomain.PUBLIC,
          /* major= */ 4,
          /* minor= */ 29,
          /* patch= */ 3,
          /* suffix= */ "",
          DataSources.class.getName());
      }
      // Use DataSources.newBuilder() to construct.
      private DataSources(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
        super(builder);
      }
      private DataSources() {
        dataSource_ = java.util.Collections.emptyList();
      }

      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return perfetto.protos.TracingServiceEventOuterClass.internal_static_perfetto_protos_TracingServiceEvent_DataSources_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return perfetto.protos.TracingServiceEventOuterClass.internal_static_perfetto_protos_TracingServiceEvent_DataSources_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                perfetto.protos.TracingServiceEventOuterClass.TracingServiceEvent.DataSources.class, perfetto.protos.TracingServiceEventOuterClass.TracingServiceEvent.DataSources.Builder.class);
      }

      public interface DataSourceOrBuilder extends
          // @@protoc_insertion_point(interface_extends:perfetto.protos.TracingServiceEvent.DataSources.DataSource)
          com.google.protobuf.MessageOrBuilder {

        /**
         * <code>optional string producer_name = 1;</code>
         * @return Whether the producerName field is set.
         */
        boolean hasProducerName();
        /**
         * <code>optional string producer_name = 1;</code>
         * @return The producerName.
         */
        java.lang.String getProducerName();
        /**
         * <code>optional string producer_name = 1;</code>
         * @return The bytes for producerName.
         */
        com.google.protobuf.ByteString
            getProducerNameBytes();

        /**
         * <code>optional string data_source_name = 2;</code>
         * @return Whether the dataSourceName field is set.
         */
        boolean hasDataSourceName();
        /**
         * <code>optional string data_source_name = 2;</code>
         * @return The dataSourceName.
         */
        java.lang.String getDataSourceName();
        /**
         * <code>optional string data_source_name = 2;</code>
         * @return The bytes for dataSourceName.
         */
        com.google.protobuf.ByteString
            getDataSourceNameBytes();
      }
      /**
       * Protobuf type {@code perfetto.protos.TracingServiceEvent.DataSources.DataSource}
       */
      public static final class DataSource extends
          com.google.protobuf.GeneratedMessage implements
          // @@protoc_insertion_point(message_implements:perfetto.protos.TracingServiceEvent.DataSources.DataSource)
          DataSourceOrBuilder {
      private static final long serialVersionUID = 0L;
        static {
          com.google.protobuf.RuntimeVersion.validateProtobufGencodeVersion(
            com.google.protobuf.RuntimeVersion.RuntimeDomain.PUBLIC,
            /* major= */ 4,
            /* minor= */ 29,
            /* patch= */ 3,
            /* suffix= */ "",
            DataSource.class.getName());
        }
        // Use DataSource.newBuilder() to construct.
        private DataSource(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
          super(builder);
        }
        private DataSource() {
          producerName_ = "";
          dataSourceName_ = "";
        }

        public static final com.google.protobuf.Descriptors.Descriptor
            getDescriptor() {
          return perfetto.protos.TracingServiceEventOuterClass.internal_static_perfetto_protos_TracingServiceEvent_DataSources_DataSource_descriptor;
        }

        @java.lang.Override
        protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
            internalGetFieldAccessorTable() {
          return perfetto.protos.TracingServiceEventOuterClass.internal_static_perfetto_protos_TracingServiceEvent_DataSources_DataSource_fieldAccessorTable
              .ensureFieldAccessorsInitialized(
                  perfetto.protos.TracingServiceEventOuterClass.TracingServiceEvent.DataSources.DataSource.class, perfetto.protos.TracingServiceEventOuterClass.TracingServiceEvent.DataSources.DataSource.Builder.class);
        }

        private int bitField0_;
        public static final int PRODUCER_NAME_FIELD_NUMBER = 1;
        @SuppressWarnings("serial")
        private volatile java.lang.Object producerName_ = "";
        /**
         * <code>optional string producer_name = 1;</code>
         * @return Whether the producerName field is set.
         */
        @java.lang.Override
        public boolean hasProducerName() {
          return ((bitField0_ & 0x00000001) != 0);
        }
        /**
         * <code>optional string producer_name = 1;</code>
         * @return The producerName.
         */
        @java.lang.Override
        public java.lang.String getProducerName() {
          java.lang.Object ref = producerName_;
          if (ref instanceof java.lang.String) {
            return (java.lang.String) ref;
          } else {
            com.google.protobuf.ByteString bs = 
                (com.google.protobuf.ByteString) ref;
            java.lang.String s = bs.toStringUtf8();
            if (bs.isValidUtf8()) {
              producerName_ = s;
            }
            return s;
          }
        }
        /**
         * <code>optional string producer_name = 1;</code>
         * @return The bytes for producerName.
         */
        @java.lang.Override
        public com.google.protobuf.ByteString
            getProducerNameBytes() {
          java.lang.Object ref = producerName_;
          if (ref instanceof java.lang.String) {
            com.google.protobuf.ByteString b = 
                com.google.protobuf.ByteString.copyFromUtf8(
                    (java.lang.String) ref);
            producerName_ = b;
            return b;
          } else {
            return (com.google.protobuf.ByteString) ref;
          }
        }

        public static final int DATA_SOURCE_NAME_FIELD_NUMBER = 2;
        @SuppressWarnings("serial")
        private volatile java.lang.Object dataSourceName_ = "";
        /**
         * <code>optional string data_source_name = 2;</code>
         * @return Whether the dataSourceName field is set.
         */
        @java.lang.Override
        public boolean hasDataSourceName() {
          return ((bitField0_ & 0x00000002) != 0);
        }
        /**
         * <code>optional string data_source_name = 2;</code>
         * @return The dataSourceName.
         */
        @java.lang.Override
        public java.lang.String getDataSourceName() {
          java.lang.Object ref = dataSourceName_;
          if (ref instanceof java.lang.String) {
            return (java.lang.String) ref;
          } else {
            com.google.protobuf.ByteString bs = 
                (com.google.protobuf.ByteString) ref;
            java.lang.String s = bs.toStringUtf8();
            if (bs.isValidUtf8()) {
              dataSourceName_ = s;
            }
            return s;
          }
        }
        /**
         * <code>optional string data_source_name = 2;</code>
         * @return The bytes for dataSourceName.
         */
        @java.lang.Override
        public com.google.protobuf.ByteString
            getDataSourceNameBytes() {
          java.lang.Object ref = dataSourceName_;
          if (ref instanceof java.lang.String) {
            com.google.protobuf.ByteString b = 
                com.google.protobuf.ByteString.copyFromUtf8(
                    (java.lang.String) ref);
            dataSourceName_ = b;
            return b;
          } else {
            return (com.google.protobuf.ByteString) ref;
          }
        }

        private byte memoizedIsInitialized = -1;
        @java.lang.Override
        public final boolean isInitialized() {
          byte isInitialized = memoizedIsInitialized;
          if (isInitialized == 1) return true;
          if (isInitialized == 0) return false;

          memoizedIsInitialized = 1;
          return true;
        }

        @java.lang.Override
        public void writeTo(com.google.protobuf.CodedOutputStream output)
                            throws java.io.IOException {
          if (((bitField0_ & 0x00000001) != 0)) {
            com.google.protobuf.GeneratedMessage.writeString(output, 1, producerName_);
          }
          if (((bitField0_ & 0x00000002) != 0)) {
            com.google.protobuf.GeneratedMessage.writeString(output, 2, dataSourceName_);
          }
          getUnknownFields().writeTo(output);
        }

        @java.lang.Override
        public int getSerializedSize() {
          int size = memoizedSize;
          if (size != -1) return size;

          size = 0;
          if (((bitField0_ & 0x00000001) != 0)) {
            size += com.google.protobuf.GeneratedMessage.computeStringSize(1, producerName_);
          }
          if (((bitField0_ & 0x00000002) != 0)) {
            size += com.google.protobuf.GeneratedMessage.computeStringSize(2, dataSourceName_);
          }
          size += getUnknownFields().getSerializedSize();
          memoizedSize = size;
          return size;
        }

        @java.lang.Override
        public boolean equals(final java.lang.Object obj) {
          if (obj == this) {
           return true;
          }
          if (!(obj instanceof perfetto.protos.TracingServiceEventOuterClass.TracingServiceEvent.DataSources.DataSource)) {
            return super.equals(obj);
          }
          perfetto.protos.TracingServiceEventOuterClass.TracingServiceEvent.DataSources.DataSource other = (perfetto.protos.TracingServiceEventOuterClass.TracingServiceEvent.DataSources.DataSource) obj;

          if (hasProducerName() != other.hasProducerName()) return false;
          if (hasProducerName()) {
            if (!getProducerName()
                .equals(other.getProducerName())) return false;
          }
          if (hasDataSourceName() != other.hasDataSourceName()) return false;
          if (hasDataSourceName()) {
            if (!getDataSourceName()
                .equals(other.getDataSourceName())) return false;
          }
          if (!getUnknownFields().equals(other.getUnknownFields())) return false;
          return true;
        }

        @java.lang.Override
        public int hashCode() {
          if (memoizedHashCode != 0) {
            return memoizedHashCode;
          }
          int hash = 41;
          hash = (19 * hash) + getDescriptor().hashCode();
          if (hasProducerName()) {
            hash = (37 * hash) + PRODUCER_NAME_FIELD_NUMBER;
            hash = (53 * hash) + getProducerName().hashCode();
          }
          if (hasDataSourceName()) {
            hash = (37 * hash) + DATA_SOURCE_NAME_FIELD_NUMBER;
            hash = (53 * hash) + getDataSourceName().hashCode();
          }
          hash = (29 * hash) + getUnknownFields().hashCode();
          memoizedHashCode = hash;
          return hash;
        }

        public static perfetto.protos.TracingServiceEventOuterClass.TracingServiceEvent.DataSources.DataSource parseFrom(
            java.nio.ByteBuffer data)
            throws com.google.protobuf.InvalidProtocolBufferException {
          return PARSER.parseFrom(data);
        }
        public static perfetto.protos.TracingServiceEventOuterClass.TracingServiceEvent.DataSources.DataSource parseFrom(
            java.nio.ByteBuffer data,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws com.google.protobuf.InvalidProtocolBufferException {
          return PARSER.parseFrom(data, extensionRegistry);
        }
        public static perfetto.protos.TracingServiceEventOuterClass.TracingServiceEvent.DataSources.DataSource parseFrom(
            com.google.protobuf.ByteString data)
            throws com.google.protobuf.InvalidProtocolBufferException {
          return PARSER.parseFrom(data);
        }
        public static perfetto.protos.TracingServiceEventOuterClass.TracingServiceEvent.DataSources.DataSource parseFrom(
            com.google.protobuf.ByteString data,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws com.google.protobuf.InvalidProtocolBufferException {
          return PARSER.parseFrom(data, extensionRegistry);
        }
        public static perfetto.protos.TracingServiceEventOuterClass.TracingServiceEvent.DataSources.DataSource parseFrom(byte[] data)
            throws com.google.protobuf.InvalidProtocolBufferException {
          return PARSER.parseFrom(data);
        }
        public static perfetto.protos.TracingServiceEventOuterClass.TracingServiceEvent.DataSources.DataSource parseFrom(
            byte[] data,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws com.google.protobuf.InvalidProtocolBufferException {
          return PARSER.parseFrom(data, extensionRegistry);
        }
        public static perfetto.protos.TracingServiceEventOuterClass.TracingServiceEvent.DataSources.DataSource parseFrom(java.io.InputStream input)
            throws java.io.IOException {
          return com.google.protobuf.GeneratedMessage
              .parseWithIOException(PARSER, input);
        }
        public static perfetto.protos.TracingServiceEventOuterClass.TracingServiceEvent.DataSources.DataSource parseFrom(
            java.io.InputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws java.io.IOException {
          return com.google.protobuf.GeneratedMessage
              .parseWithIOException(PARSER, input, extensionRegistry);
        }

        public static perfetto.protos.TracingServiceEventOuterClass.TracingServiceEvent.DataSources.DataSource parseDelimitedFrom(java.io.InputStream input)
            throws java.io.IOException {
          return com.google.protobuf.GeneratedMessage
              .parseDelimitedWithIOException(PARSER, input);
        }

        public static perfetto.protos.TracingServiceEventOuterClass.TracingServiceEvent.DataSources.DataSource parseDelimitedFrom(
            java.io.InputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws java.io.IOException {
          return com.google.protobuf.GeneratedMessage
              .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
        }
        public static perfetto.protos.TracingServiceEventOuterClass.TracingServiceEvent.DataSources.DataSource parseFrom(
            com.google.protobuf.CodedInputStream input)
            throws java.io.IOException {
          return com.google.protobuf.GeneratedMessage
              .parseWithIOException(PARSER, input);
        }
        public static perfetto.protos.TracingServiceEventOuterClass.TracingServiceEvent.DataSources.DataSource parseFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws java.io.IOException {
          return com.google.protobuf.GeneratedMessage
              .parseWithIOException(PARSER, input, extensionRegistry);
        }

        @java.lang.Override
        public Builder newBuilderForType() { return newBuilder(); }
        public static Builder newBuilder() {
          return DEFAULT_INSTANCE.toBuilder();
        }
        public static Builder newBuilder(perfetto.protos.TracingServiceEventOuterClass.TracingServiceEvent.DataSources.DataSource prototype) {
          return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
        }
        @java.lang.Override
        public Builder toBuilder() {
          return this == DEFAULT_INSTANCE
              ? new Builder() : new Builder().mergeFrom(this);
        }

        @java.lang.Override
        protected Builder newBuilderForType(
            com.google.protobuf.GeneratedMessage.BuilderParent parent) {
          Builder builder = new Builder(parent);
          return builder;
        }
        /**
         * Protobuf type {@code perfetto.protos.TracingServiceEvent.DataSources.DataSource}
         */
        public static final class Builder extends
            com.google.protobuf.GeneratedMessage.Builder<Builder> implements
            // @@protoc_insertion_point(builder_implements:perfetto.protos.TracingServiceEvent.DataSources.DataSource)
            perfetto.protos.TracingServiceEventOuterClass.TracingServiceEvent.DataSources.DataSourceOrBuilder {
          public static final com.google.protobuf.Descriptors.Descriptor
              getDescriptor() {
            return perfetto.protos.TracingServiceEventOuterClass.internal_static_perfetto_protos_TracingServiceEvent_DataSources_DataSource_descriptor;
          }

          @java.lang.Override
          protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
              internalGetFieldAccessorTable() {
            return perfetto.protos.TracingServiceEventOuterClass.internal_static_perfetto_protos_TracingServiceEvent_DataSources_DataSource_fieldAccessorTable
                .ensureFieldAccessorsInitialized(
                    perfetto.protos.TracingServiceEventOuterClass.TracingServiceEvent.DataSources.DataSource.class, perfetto.protos.TracingServiceEventOuterClass.TracingServiceEvent.DataSources.DataSource.Builder.class);
          }

          // Construct using perfetto.protos.TracingServiceEventOuterClass.TracingServiceEvent.DataSources.DataSource.newBuilder()
          private Builder() {

          }

          private Builder(
              com.google.protobuf.GeneratedMessage.BuilderParent parent) {
            super(parent);

          }
          @java.lang.Override
          public Builder clear() {
            super.clear();
            bitField0_ = 0;
            producerName_ = "";
            dataSourceName_ = "";
            return this;
          }

          @java.lang.Override
          public com.google.protobuf.Descriptors.Descriptor
              getDescriptorForType() {
            return perfetto.protos.TracingServiceEventOuterClass.internal_static_perfetto_protos_TracingServiceEvent_DataSources_DataSource_descriptor;
          }

          @java.lang.Override
          public perfetto.protos.TracingServiceEventOuterClass.TracingServiceEvent.DataSources.DataSource getDefaultInstanceForType() {
            return perfetto.protos.TracingServiceEventOuterClass.TracingServiceEvent.DataSources.DataSource.getDefaultInstance();
          }

          @java.lang.Override
          public perfetto.protos.TracingServiceEventOuterClass.TracingServiceEvent.DataSources.DataSource build() {
            perfetto.protos.TracingServiceEventOuterClass.TracingServiceEvent.DataSources.DataSource result = buildPartial();
            if (!result.isInitialized()) {
              throw newUninitializedMessageException(result);
            }
            return result;
          }

          @java.lang.Override
          public perfetto.protos.TracingServiceEventOuterClass.TracingServiceEvent.DataSources.DataSource buildPartial() {
            perfetto.protos.TracingServiceEventOuterClass.TracingServiceEvent.DataSources.DataSource result = new perfetto.protos.TracingServiceEventOuterClass.TracingServiceEvent.DataSources.DataSource(this);
            if (bitField0_ != 0) { buildPartial0(result); }
            onBuilt();
            return result;
          }

          private void buildPartial0(perfetto.protos.TracingServiceEventOuterClass.TracingServiceEvent.DataSources.DataSource result) {
            int from_bitField0_ = bitField0_;
            int to_bitField0_ = 0;
            if (((from_bitField0_ & 0x00000001) != 0)) {
              result.producerName_ = producerName_;
              to_bitField0_ |= 0x00000001;
            }
            if (((from_bitField0_ & 0x00000002) != 0)) {
              result.dataSourceName_ = dataSourceName_;
              to_bitField0_ |= 0x00000002;
            }
            result.bitField0_ |= to_bitField0_;
          }

          @java.lang.Override
          public Builder mergeFrom(com.google.protobuf.Message other) {
            if (other instanceof perfetto.protos.TracingServiceEventOuterClass.TracingServiceEvent.DataSources.DataSource) {
              return mergeFrom((perfetto.protos.TracingServiceEventOuterClass.TracingServiceEvent.DataSources.DataSource)other);
            } else {
              super.mergeFrom(other);
              return this;
            }
          }

          public Builder mergeFrom(perfetto.protos.TracingServiceEventOuterClass.TracingServiceEvent.DataSources.DataSource other) {
            if (other == perfetto.protos.TracingServiceEventOuterClass.TracingServiceEvent.DataSources.DataSource.getDefaultInstance()) return this;
            if (other.hasProducerName()) {
              producerName_ = other.producerName_;
              bitField0_ |= 0x00000001;
              onChanged();
            }
            if (other.hasDataSourceName()) {
              dataSourceName_ = other.dataSourceName_;
              bitField0_ |= 0x00000002;
              onChanged();
            }
            this.mergeUnknownFields(other.getUnknownFields());
            onChanged();
            return this;
          }

          @java.lang.Override
          public final boolean isInitialized() {
            return true;
          }

          @java.lang.Override
          public Builder mergeFrom(
              com.google.protobuf.CodedInputStream input,
              com.google.protobuf.ExtensionRegistryLite extensionRegistry)
              throws java.io.IOException {
            if (extensionRegistry == null) {
              throw new java.lang.NullPointerException();
            }
            try {
              boolean done = false;
              while (!done) {
                int tag = input.readTag();
                switch (tag) {
                  case 0:
                    done = true;
                    break;
                  case 10: {
                    producerName_ = input.readBytes();
                    bitField0_ |= 0x00000001;
                    break;
                  } // case 10
                  case 18: {
                    dataSourceName_ = input.readBytes();
                    bitField0_ |= 0x00000002;
                    break;
                  } // case 18
                  default: {
                    if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                      done = true; // was an endgroup tag
                    }
                    break;
                  } // default:
                } // switch (tag)
              } // while (!done)
            } catch (com.google.protobuf.InvalidProtocolBufferException e) {
              throw e.unwrapIOException();
            } finally {
              onChanged();
            } // finally
            return this;
          }
          private int bitField0_;

          private java.lang.Object producerName_ = "";
          /**
           * <code>optional string producer_name = 1;</code>
           * @return Whether the producerName field is set.
           */
          public boolean hasProducerName() {
            return ((bitField0_ & 0x00000001) != 0);
          }
          /**
           * <code>optional string producer_name = 1;</code>
           * @return The producerName.
           */
          public java.lang.String getProducerName() {
            java.lang.Object ref = producerName_;
            if (!(ref instanceof java.lang.String)) {
              com.google.protobuf.ByteString bs =
                  (com.google.protobuf.ByteString) ref;
              java.lang.String s = bs.toStringUtf8();
              if (bs.isValidUtf8()) {
                producerName_ = s;
              }
              return s;
            } else {
              return (java.lang.String) ref;
            }
          }
          /**
           * <code>optional string producer_name = 1;</code>
           * @return The bytes for producerName.
           */
          public com.google.protobuf.ByteString
              getProducerNameBytes() {
            java.lang.Object ref = producerName_;
            if (ref instanceof String) {
              com.google.protobuf.ByteString b = 
                  com.google.protobuf.ByteString.copyFromUtf8(
                      (java.lang.String) ref);
              producerName_ = b;
              return b;
            } else {
              return (com.google.protobuf.ByteString) ref;
            }
          }
          /**
           * <code>optional string producer_name = 1;</code>
           * @param value The producerName to set.
           * @return This builder for chaining.
           */
          public Builder setProducerName(
              java.lang.String value) {
            if (value == null) { throw new NullPointerException(); }
            producerName_ = value;
            bitField0_ |= 0x00000001;
            onChanged();
            return this;
          }
          /**
           * <code>optional string producer_name = 1;</code>
           * @return This builder for chaining.
           */
          public Builder clearProducerName() {
            producerName_ = getDefaultInstance().getProducerName();
            bitField0_ = (bitField0_ & ~0x00000001);
            onChanged();
            return this;
          }
          /**
           * <code>optional string producer_name = 1;</code>
           * @param value The bytes for producerName to set.
           * @return This builder for chaining.
           */
          public Builder setProducerNameBytes(
              com.google.protobuf.ByteString value) {
            if (value == null) { throw new NullPointerException(); }
            producerName_ = value;
            bitField0_ |= 0x00000001;
            onChanged();
            return this;
          }

          private java.lang.Object dataSourceName_ = "";
          /**
           * <code>optional string data_source_name = 2;</code>
           * @return Whether the dataSourceName field is set.
           */
          public boolean hasDataSourceName() {
            return ((bitField0_ & 0x00000002) != 0);
          }
          /**
           * <code>optional string data_source_name = 2;</code>
           * @return The dataSourceName.
           */
          public java.lang.String getDataSourceName() {
            java.lang.Object ref = dataSourceName_;
            if (!(ref instanceof java.lang.String)) {
              com.google.protobuf.ByteString bs =
                  (com.google.protobuf.ByteString) ref;
              java.lang.String s = bs.toStringUtf8();
              if (bs.isValidUtf8()) {
                dataSourceName_ = s;
              }
              return s;
            } else {
              return (java.lang.String) ref;
            }
          }
          /**
           * <code>optional string data_source_name = 2;</code>
           * @return The bytes for dataSourceName.
           */
          public com.google.protobuf.ByteString
              getDataSourceNameBytes() {
            java.lang.Object ref = dataSourceName_;
            if (ref instanceof String) {
              com.google.protobuf.ByteString b = 
                  com.google.protobuf.ByteString.copyFromUtf8(
                      (java.lang.String) ref);
              dataSourceName_ = b;
              return b;
            } else {
              return (com.google.protobuf.ByteString) ref;
            }
          }
          /**
           * <code>optional string data_source_name = 2;</code>
           * @param value The dataSourceName to set.
           * @return This builder for chaining.
           */
          public Builder setDataSourceName(
              java.lang.String value) {
            if (value == null) { throw new NullPointerException(); }
            dataSourceName_ = value;
            bitField0_ |= 0x00000002;
            onChanged();
            return this;
          }
          /**
           * <code>optional string data_source_name = 2;</code>
           * @return This builder for chaining.
           */
          public Builder clearDataSourceName() {
            dataSourceName_ = getDefaultInstance().getDataSourceName();
            bitField0_ = (bitField0_ & ~0x00000002);
            onChanged();
            return this;
          }
          /**
           * <code>optional string data_source_name = 2;</code>
           * @param value The bytes for dataSourceName to set.
           * @return This builder for chaining.
           */
          public Builder setDataSourceNameBytes(
              com.google.protobuf.ByteString value) {
            if (value == null) { throw new NullPointerException(); }
            dataSourceName_ = value;
            bitField0_ |= 0x00000002;
            onChanged();
            return this;
          }

          // @@protoc_insertion_point(builder_scope:perfetto.protos.TracingServiceEvent.DataSources.DataSource)
        }

        // @@protoc_insertion_point(class_scope:perfetto.protos.TracingServiceEvent.DataSources.DataSource)
        private static final perfetto.protos.TracingServiceEventOuterClass.TracingServiceEvent.DataSources.DataSource DEFAULT_INSTANCE;
        static {
          DEFAULT_INSTANCE = new perfetto.protos.TracingServiceEventOuterClass.TracingServiceEvent.DataSources.DataSource();
        }

        public static perfetto.protos.TracingServiceEventOuterClass.TracingServiceEvent.DataSources.DataSource getDefaultInstance() {
          return DEFAULT_INSTANCE;
        }

        private static final com.google.protobuf.Parser<DataSource>
            PARSER = new com.google.protobuf.AbstractParser<DataSource>() {
          @java.lang.Override
          public DataSource parsePartialFrom(
              com.google.protobuf.CodedInputStream input,
              com.google.protobuf.ExtensionRegistryLite extensionRegistry)
              throws com.google.protobuf.InvalidProtocolBufferException {
            Builder builder = newBuilder();
            try {
              builder.mergeFrom(input, extensionRegistry);
            } catch (com.google.protobuf.InvalidProtocolBufferException e) {
              throw e.setUnfinishedMessage(builder.buildPartial());
            } catch (com.google.protobuf.UninitializedMessageException e) {
              throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
            } catch (java.io.IOException e) {
              throw new com.google.protobuf.InvalidProtocolBufferException(e)
                  .setUnfinishedMessage(builder.buildPartial());
            }
            return builder.buildPartial();
          }
        };

        public static com.google.protobuf.Parser<DataSource> parser() {
          return PARSER;
        }

        @java.lang.Override
        public com.google.protobuf.Parser<DataSource> getParserForType() {
          return PARSER;
        }

        @java.lang.Override
        public perfetto.protos.TracingServiceEventOuterClass.TracingServiceEvent.DataSources.DataSource getDefaultInstanceForType() {
          return DEFAULT_INSTANCE;
        }

      }

      public static final int DATA_SOURCE_FIELD_NUMBER = 1;
      @SuppressWarnings("serial")
      private java.util.List<perfetto.protos.TracingServiceEventOuterClass.TracingServiceEvent.DataSources.DataSource> dataSource_;
      /**
       * <code>repeated .perfetto.protos.TracingServiceEvent.DataSources.DataSource data_source = 1;</code>
       */
      @java.lang.Override
      public java.util.List<perfetto.protos.TracingServiceEventOuterClass.TracingServiceEvent.DataSources.DataSource> getDataSourceList() {
        return dataSource_;
      }
      /**
       * <code>repeated .perfetto.protos.TracingServiceEvent.DataSources.DataSource data_source = 1;</code>
       */
      @java.lang.Override
      public java.util.List<? extends perfetto.protos.TracingServiceEventOuterClass.TracingServiceEvent.DataSources.DataSourceOrBuilder> 
          getDataSourceOrBuilderList() {
        return dataSource_;
      }
      /**
       * <code>repeated .perfetto.protos.TracingServiceEvent.DataSources.DataSource data_source = 1;</code>
       */
      @java.lang.Override
      public int getDataSourceCount() {
        return dataSource_.size();
      }
      /**
       * <code>repeated .perfetto.protos.TracingServiceEvent.DataSources.DataSource data_source = 1;</code>
       */
      @java.lang.Override
      public perfetto.protos.TracingServiceEventOuterClass.TracingServiceEvent.DataSources.DataSource getDataSource(int index) {
        return dataSource_.get(index);
      }
      /**
       * <code>repeated .perfetto.protos.TracingServiceEvent.DataSources.DataSource data_source = 1;</code>
       */
      @java.lang.Override
      public perfetto.protos.TracingServiceEventOuterClass.TracingServiceEvent.DataSources.DataSourceOrBuilder getDataSourceOrBuilder(
          int index) {
        return dataSource_.get(index);
      }

      private byte memoizedIsInitialized = -1;
      @java.lang.Override
      public final boolean isInitialized() {
        byte isInitialized = memoizedIsInitialized;
        if (isInitialized == 1) return true;
        if (isInitialized == 0) return false;

        memoizedIsInitialized = 1;
        return true;
      }

      @java.lang.Override
      public void writeTo(com.google.protobuf.CodedOutputStream output)
                          throws java.io.IOException {
        for (int i = 0; i < dataSource_.size(); i++) {
          output.writeMessage(1, dataSource_.get(i));
        }
        getUnknownFields().writeTo(output);
      }

      @java.lang.Override
      public int getSerializedSize() {
        int size = memoizedSize;
        if (size != -1) return size;

        size = 0;
        for (int i = 0; i < dataSource_.size(); i++) {
          size += com.google.protobuf.CodedOutputStream
            .computeMessageSize(1, dataSource_.get(i));
        }
        size += getUnknownFields().getSerializedSize();
        memoizedSize = size;
        return size;
      }

      @java.lang.Override
      public boolean equals(final java.lang.Object obj) {
        if (obj == this) {
         return true;
        }
        if (!(obj instanceof perfetto.protos.TracingServiceEventOuterClass.TracingServiceEvent.DataSources)) {
          return super.equals(obj);
        }
        perfetto.protos.TracingServiceEventOuterClass.TracingServiceEvent.DataSources other = (perfetto.protos.TracingServiceEventOuterClass.TracingServiceEvent.DataSources) obj;

        if (!getDataSourceList()
            .equals(other.getDataSourceList())) return false;
        if (!getUnknownFields().equals(other.getUnknownFields())) return false;
        return true;
      }

      @java.lang.Override
      public int hashCode() {
        if (memoizedHashCode != 0) {
          return memoizedHashCode;
        }
        int hash = 41;
        hash = (19 * hash) + getDescriptor().hashCode();
        if (getDataSourceCount() > 0) {
          hash = (37 * hash) + DATA_SOURCE_FIELD_NUMBER;
          hash = (53 * hash) + getDataSourceList().hashCode();
        }
        hash = (29 * hash) + getUnknownFields().hashCode();
        memoizedHashCode = hash;
        return hash;
      }

      public static perfetto.protos.TracingServiceEventOuterClass.TracingServiceEvent.DataSources parseFrom(
          java.nio.ByteBuffer data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static perfetto.protos.TracingServiceEventOuterClass.TracingServiceEvent.DataSources parseFrom(
          java.nio.ByteBuffer data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static perfetto.protos.TracingServiceEventOuterClass.TracingServiceEvent.DataSources parseFrom(
          com.google.protobuf.ByteString data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static perfetto.protos.TracingServiceEventOuterClass.TracingServiceEvent.DataSources parseFrom(
          com.google.protobuf.ByteString data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static perfetto.protos.TracingServiceEventOuterClass.TracingServiceEvent.DataSources parseFrom(byte[] data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static perfetto.protos.TracingServiceEventOuterClass.TracingServiceEvent.DataSources parseFrom(
          byte[] data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static perfetto.protos.TracingServiceEventOuterClass.TracingServiceEvent.DataSources parseFrom(java.io.InputStream input)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessage
            .parseWithIOException(PARSER, input);
      }
      public static perfetto.protos.TracingServiceEventOuterClass.TracingServiceEvent.DataSources parseFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessage
            .parseWithIOException(PARSER, input, extensionRegistry);
      }

      public static perfetto.protos.TracingServiceEventOuterClass.TracingServiceEvent.DataSources parseDelimitedFrom(java.io.InputStream input)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessage
            .parseDelimitedWithIOException(PARSER, input);
      }

      public static perfetto.protos.TracingServiceEventOuterClass.TracingServiceEvent.DataSources parseDelimitedFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessage
            .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
      }
      public static perfetto.protos.TracingServiceEventOuterClass.TracingServiceEvent.DataSources parseFrom(
          com.google.protobuf.CodedInputStream input)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessage
            .parseWithIOException(PARSER, input);
      }
      public static perfetto.protos.TracingServiceEventOuterClass.TracingServiceEvent.DataSources parseFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessage
            .parseWithIOException(PARSER, input, extensionRegistry);
      }

      @java.lang.Override
      public Builder newBuilderForType() { return newBuilder(); }
      public static Builder newBuilder() {
        return DEFAULT_INSTANCE.toBuilder();
      }
      public static Builder newBuilder(perfetto.protos.TracingServiceEventOuterClass.TracingServiceEvent.DataSources prototype) {
        return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
      }
      @java.lang.Override
      public Builder toBuilder() {
        return this == DEFAULT_INSTANCE
            ? new Builder() : new Builder().mergeFrom(this);
      }

      @java.lang.Override
      protected Builder newBuilderForType(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        Builder builder = new Builder(parent);
        return builder;
      }
      /**
       * Protobuf type {@code perfetto.protos.TracingServiceEvent.DataSources}
       */
      public static final class Builder extends
          com.google.protobuf.GeneratedMessage.Builder<Builder> implements
          // @@protoc_insertion_point(builder_implements:perfetto.protos.TracingServiceEvent.DataSources)
          perfetto.protos.TracingServiceEventOuterClass.TracingServiceEvent.DataSourcesOrBuilder {
        public static final com.google.protobuf.Descriptors.Descriptor
            getDescriptor() {
          return perfetto.protos.TracingServiceEventOuterClass.internal_static_perfetto_protos_TracingServiceEvent_DataSources_descriptor;
        }

        @java.lang.Override
        protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
            internalGetFieldAccessorTable() {
          return perfetto.protos.TracingServiceEventOuterClass.internal_static_perfetto_protos_TracingServiceEvent_DataSources_fieldAccessorTable
              .ensureFieldAccessorsInitialized(
                  perfetto.protos.TracingServiceEventOuterClass.TracingServiceEvent.DataSources.class, perfetto.protos.TracingServiceEventOuterClass.TracingServiceEvent.DataSources.Builder.class);
        }

        // Construct using perfetto.protos.TracingServiceEventOuterClass.TracingServiceEvent.DataSources.newBuilder()
        private Builder() {

        }

        private Builder(
            com.google.protobuf.GeneratedMessage.BuilderParent parent) {
          super(parent);

        }
        @java.lang.Override
        public Builder clear() {
          super.clear();
          bitField0_ = 0;
          if (dataSourceBuilder_ == null) {
            dataSource_ = java.util.Collections.emptyList();
          } else {
            dataSource_ = null;
            dataSourceBuilder_.clear();
          }
          bitField0_ = (bitField0_ & ~0x00000001);
          return this;
        }

        @java.lang.Override
        public com.google.protobuf.Descriptors.Descriptor
            getDescriptorForType() {
          return perfetto.protos.TracingServiceEventOuterClass.internal_static_perfetto_protos_TracingServiceEvent_DataSources_descriptor;
        }

        @java.lang.Override
        public perfetto.protos.TracingServiceEventOuterClass.TracingServiceEvent.DataSources getDefaultInstanceForType() {
          return perfetto.protos.TracingServiceEventOuterClass.TracingServiceEvent.DataSources.getDefaultInstance();
        }

        @java.lang.Override
        public perfetto.protos.TracingServiceEventOuterClass.TracingServiceEvent.DataSources build() {
          perfetto.protos.TracingServiceEventOuterClass.TracingServiceEvent.DataSources result = buildPartial();
          if (!result.isInitialized()) {
            throw newUninitializedMessageException(result);
          }
          return result;
        }

        @java.lang.Override
        public perfetto.protos.TracingServiceEventOuterClass.TracingServiceEvent.DataSources buildPartial() {
          perfetto.protos.TracingServiceEventOuterClass.TracingServiceEvent.DataSources result = new perfetto.protos.TracingServiceEventOuterClass.TracingServiceEvent.DataSources(this);
          buildPartialRepeatedFields(result);
          if (bitField0_ != 0) { buildPartial0(result); }
          onBuilt();
          return result;
        }

        private void buildPartialRepeatedFields(perfetto.protos.TracingServiceEventOuterClass.TracingServiceEvent.DataSources result) {
          if (dataSourceBuilder_ == null) {
            if (((bitField0_ & 0x00000001) != 0)) {
              dataSource_ = java.util.Collections.unmodifiableList(dataSource_);
              bitField0_ = (bitField0_ & ~0x00000001);
            }
            result.dataSource_ = dataSource_;
          } else {
            result.dataSource_ = dataSourceBuilder_.build();
          }
        }

        private void buildPartial0(perfetto.protos.TracingServiceEventOuterClass.TracingServiceEvent.DataSources result) {
          int from_bitField0_ = bitField0_;
        }

        @java.lang.Override
        public Builder mergeFrom(com.google.protobuf.Message other) {
          if (other instanceof perfetto.protos.TracingServiceEventOuterClass.TracingServiceEvent.DataSources) {
            return mergeFrom((perfetto.protos.TracingServiceEventOuterClass.TracingServiceEvent.DataSources)other);
          } else {
            super.mergeFrom(other);
            return this;
          }
        }

        public Builder mergeFrom(perfetto.protos.TracingServiceEventOuterClass.TracingServiceEvent.DataSources other) {
          if (other == perfetto.protos.TracingServiceEventOuterClass.TracingServiceEvent.DataSources.getDefaultInstance()) return this;
          if (dataSourceBuilder_ == null) {
            if (!other.dataSource_.isEmpty()) {
              if (dataSource_.isEmpty()) {
                dataSource_ = other.dataSource_;
                bitField0_ = (bitField0_ & ~0x00000001);
              } else {
                ensureDataSourceIsMutable();
                dataSource_.addAll(other.dataSource_);
              }
              onChanged();
            }
          } else {
            if (!other.dataSource_.isEmpty()) {
              if (dataSourceBuilder_.isEmpty()) {
                dataSourceBuilder_.dispose();
                dataSourceBuilder_ = null;
                dataSource_ = other.dataSource_;
                bitField0_ = (bitField0_ & ~0x00000001);
                dataSourceBuilder_ = 
                  com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders ?
                     getDataSourceFieldBuilder() : null;
              } else {
                dataSourceBuilder_.addAllMessages(other.dataSource_);
              }
            }
          }
          this.mergeUnknownFields(other.getUnknownFields());
          onChanged();
          return this;
        }

        @java.lang.Override
        public final boolean isInitialized() {
          return true;
        }

        @java.lang.Override
        public Builder mergeFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws java.io.IOException {
          if (extensionRegistry == null) {
            throw new java.lang.NullPointerException();
          }
          try {
            boolean done = false;
            while (!done) {
              int tag = input.readTag();
              switch (tag) {
                case 0:
                  done = true;
                  break;
                case 10: {
                  perfetto.protos.TracingServiceEventOuterClass.TracingServiceEvent.DataSources.DataSource m =
                      input.readMessage(
                          perfetto.protos.TracingServiceEventOuterClass.TracingServiceEvent.DataSources.DataSource.parser(),
                          extensionRegistry);
                  if (dataSourceBuilder_ == null) {
                    ensureDataSourceIsMutable();
                    dataSource_.add(m);
                  } else {
                    dataSourceBuilder_.addMessage(m);
                  }
                  break;
                } // case 10
                default: {
                  if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                    done = true; // was an endgroup tag
                  }
                  break;
                } // default:
              } // switch (tag)
            } // while (!done)
          } catch (com.google.protobuf.InvalidProtocolBufferException e) {
            throw e.unwrapIOException();
          } finally {
            onChanged();
          } // finally
          return this;
        }
        private int bitField0_;

        private java.util.List<perfetto.protos.TracingServiceEventOuterClass.TracingServiceEvent.DataSources.DataSource> dataSource_ =
          java.util.Collections.emptyList();
        private void ensureDataSourceIsMutable() {
          if (!((bitField0_ & 0x00000001) != 0)) {
            dataSource_ = new java.util.ArrayList<perfetto.protos.TracingServiceEventOuterClass.TracingServiceEvent.DataSources.DataSource>(dataSource_);
            bitField0_ |= 0x00000001;
           }
        }

        private com.google.protobuf.RepeatedFieldBuilder<
            perfetto.protos.TracingServiceEventOuterClass.TracingServiceEvent.DataSources.DataSource, perfetto.protos.TracingServiceEventOuterClass.TracingServiceEvent.DataSources.DataSource.Builder, perfetto.protos.TracingServiceEventOuterClass.TracingServiceEvent.DataSources.DataSourceOrBuilder> dataSourceBuilder_;

        /**
         * <code>repeated .perfetto.protos.TracingServiceEvent.DataSources.DataSource data_source = 1;</code>
         */
        public java.util.List<perfetto.protos.TracingServiceEventOuterClass.TracingServiceEvent.DataSources.DataSource> getDataSourceList() {
          if (dataSourceBuilder_ == null) {
            return java.util.Collections.unmodifiableList(dataSource_);
          } else {
            return dataSourceBuilder_.getMessageList();
          }
        }
        /**
         * <code>repeated .perfetto.protos.TracingServiceEvent.DataSources.DataSource data_source = 1;</code>
         */
        public int getDataSourceCount() {
          if (dataSourceBuilder_ == null) {
            return dataSource_.size();
          } else {
            return dataSourceBuilder_.getCount();
          }
        }
        /**
         * <code>repeated .perfetto.protos.TracingServiceEvent.DataSources.DataSource data_source = 1;</code>
         */
        public perfetto.protos.TracingServiceEventOuterClass.TracingServiceEvent.DataSources.DataSource getDataSource(int index) {
          if (dataSourceBuilder_ == null) {
            return dataSource_.get(index);
          } else {
            return dataSourceBuilder_.getMessage(index);
          }
        }
        /**
         * <code>repeated .perfetto.protos.TracingServiceEvent.DataSources.DataSource data_source = 1;</code>
         */
        public Builder setDataSource(
            int index, perfetto.protos.TracingServiceEventOuterClass.TracingServiceEvent.DataSources.DataSource value) {
          if (dataSourceBuilder_ == null) {
            if (value == null) {
              throw new NullPointerException();
            }
            ensureDataSourceIsMutable();
            dataSource_.set(index, value);
            onChanged();
          } else {
            dataSourceBuilder_.setMessage(index, value);
          }
          return this;
        }
        /**
         * <code>repeated .perfetto.protos.TracingServiceEvent.DataSources.DataSource data_source = 1;</code>
         */
        public Builder setDataSource(
            int index, perfetto.protos.TracingServiceEventOuterClass.TracingServiceEvent.DataSources.DataSource.Builder builderForValue) {
          if (dataSourceBuilder_ == null) {
            ensureDataSourceIsMutable();
            dataSource_.set(index, builderForValue.build());
            onChanged();
          } else {
            dataSourceBuilder_.setMessage(index, builderForValue.build());
          }
          return this;
        }
        /**
         * <code>repeated .perfetto.protos.TracingServiceEvent.DataSources.DataSource data_source = 1;</code>
         */
        public Builder addDataSource(perfetto.protos.TracingServiceEventOuterClass.TracingServiceEvent.DataSources.DataSource value) {
          if (dataSourceBuilder_ == null) {
            if (value == null) {
              throw new NullPointerException();
            }
            ensureDataSourceIsMutable();
            dataSource_.add(value);
            onChanged();
          } else {
            dataSourceBuilder_.addMessage(value);
          }
          return this;
        }
        /**
         * <code>repeated .perfetto.protos.TracingServiceEvent.DataSources.DataSource data_source = 1;</code>
         */
        public Builder addDataSource(
            int index, perfetto.protos.TracingServiceEventOuterClass.TracingServiceEvent.DataSources.DataSource value) {
          if (dataSourceBuilder_ == null) {
            if (value == null) {
              throw new NullPointerException();
            }
            ensureDataSourceIsMutable();
            dataSource_.add(index, value);
            onChanged();
          } else {
            dataSourceBuilder_.addMessage(index, value);
          }
          return this;
        }
        /**
         * <code>repeated .perfetto.protos.TracingServiceEvent.DataSources.DataSource data_source = 1;</code>
         */
        public Builder addDataSource(
            perfetto.protos.TracingServiceEventOuterClass.TracingServiceEvent.DataSources.DataSource.Builder builderForValue) {
          if (dataSourceBuilder_ == null) {
            ensureDataSourceIsMutable();
            dataSource_.add(builderForValue.build());
            onChanged();
          } else {
            dataSourceBuilder_.addMessage(builderForValue.build());
          }
          return this;
        }
        /**
         * <code>repeated .perfetto.protos.TracingServiceEvent.DataSources.DataSource data_source = 1;</code>
         */
        public Builder addDataSource(
            int index, perfetto.protos.TracingServiceEventOuterClass.TracingServiceEvent.DataSources.DataSource.Builder builderForValue) {
          if (dataSourceBuilder_ == null) {
            ensureDataSourceIsMutable();
            dataSource_.add(index, builderForValue.build());
            onChanged();
          } else {
            dataSourceBuilder_.addMessage(index, builderForValue.build());
          }
          return this;
        }
        /**
         * <code>repeated .perfetto.protos.TracingServiceEvent.DataSources.DataSource data_source = 1;</code>
         */
        public Builder addAllDataSource(
            java.lang.Iterable<? extends perfetto.protos.TracingServiceEventOuterClass.TracingServiceEvent.DataSources.DataSource> values) {
          if (dataSourceBuilder_ == null) {
            ensureDataSourceIsMutable();
            com.google.protobuf.AbstractMessageLite.Builder.addAll(
                values, dataSource_);
            onChanged();
          } else {
            dataSourceBuilder_.addAllMessages(values);
          }
          return this;
        }
        /**
         * <code>repeated .perfetto.protos.TracingServiceEvent.DataSources.DataSource data_source = 1;</code>
         */
        public Builder clearDataSource() {
          if (dataSourceBuilder_ == null) {
            dataSource_ = java.util.Collections.emptyList();
            bitField0_ = (bitField0_ & ~0x00000001);
            onChanged();
          } else {
            dataSourceBuilder_.clear();
          }
          return this;
        }
        /**
         * <code>repeated .perfetto.protos.TracingServiceEvent.DataSources.DataSource data_source = 1;</code>
         */
        public Builder removeDataSource(int index) {
          if (dataSourceBuilder_ == null) {
            ensureDataSourceIsMutable();
            dataSource_.remove(index);
            onChanged();
          } else {
            dataSourceBuilder_.remove(index);
          }
          return this;
        }
        /**
         * <code>repeated .perfetto.protos.TracingServiceEvent.DataSources.DataSource data_source = 1;</code>
         */
        public perfetto.protos.TracingServiceEventOuterClass.TracingServiceEvent.DataSources.DataSource.Builder getDataSourceBuilder(
            int index) {
          return getDataSourceFieldBuilder().getBuilder(index);
        }
        /**
         * <code>repeated .perfetto.protos.TracingServiceEvent.DataSources.DataSource data_source = 1;</code>
         */
        public perfetto.protos.TracingServiceEventOuterClass.TracingServiceEvent.DataSources.DataSourceOrBuilder getDataSourceOrBuilder(
            int index) {
          if (dataSourceBuilder_ == null) {
            return dataSource_.get(index);  } else {
            return dataSourceBuilder_.getMessageOrBuilder(index);
          }
        }
        /**
         * <code>repeated .perfetto.protos.TracingServiceEvent.DataSources.DataSource data_source = 1;</code>
         */
        public java.util.List<? extends perfetto.protos.TracingServiceEventOuterClass.TracingServiceEvent.DataSources.DataSourceOrBuilder> 
             getDataSourceOrBuilderList() {
          if (dataSourceBuilder_ != null) {
            return dataSourceBuilder_.getMessageOrBuilderList();
          } else {
            return java.util.Collections.unmodifiableList(dataSource_);
          }
        }
        /**
         * <code>repeated .perfetto.protos.TracingServiceEvent.DataSources.DataSource data_source = 1;</code>
         */
        public perfetto.protos.TracingServiceEventOuterClass.TracingServiceEvent.DataSources.DataSource.Builder addDataSourceBuilder() {
          return getDataSourceFieldBuilder().addBuilder(
              perfetto.protos.TracingServiceEventOuterClass.TracingServiceEvent.DataSources.DataSource.getDefaultInstance());
        }
        /**
         * <code>repeated .perfetto.protos.TracingServiceEvent.DataSources.DataSource data_source = 1;</code>
         */
        public perfetto.protos.TracingServiceEventOuterClass.TracingServiceEvent.DataSources.DataSource.Builder addDataSourceBuilder(
            int index) {
          return getDataSourceFieldBuilder().addBuilder(
              index, perfetto.protos.TracingServiceEventOuterClass.TracingServiceEvent.DataSources.DataSource.getDefaultInstance());
        }
        /**
         * <code>repeated .perfetto.protos.TracingServiceEvent.DataSources.DataSource data_source = 1;</code>
         */
        public java.util.List<perfetto.protos.TracingServiceEventOuterClass.TracingServiceEvent.DataSources.DataSource.Builder> 
             getDataSourceBuilderList() {
          return getDataSourceFieldBuilder().getBuilderList();
        }
        private com.google.protobuf.RepeatedFieldBuilder<
            perfetto.protos.TracingServiceEventOuterClass.TracingServiceEvent.DataSources.DataSource, perfetto.protos.TracingServiceEventOuterClass.TracingServiceEvent.DataSources.DataSource.Builder, perfetto.protos.TracingServiceEventOuterClass.TracingServiceEvent.DataSources.DataSourceOrBuilder> 
            getDataSourceFieldBuilder() {
          if (dataSourceBuilder_ == null) {
            dataSourceBuilder_ = new com.google.protobuf.RepeatedFieldBuilder<
                perfetto.protos.TracingServiceEventOuterClass.TracingServiceEvent.DataSources.DataSource, perfetto.protos.TracingServiceEventOuterClass.TracingServiceEvent.DataSources.DataSource.Builder, perfetto.protos.TracingServiceEventOuterClass.TracingServiceEvent.DataSources.DataSourceOrBuilder>(
                    dataSource_,
                    ((bitField0_ & 0x00000001) != 0),
                    getParentForChildren(),
                    isClean());
            dataSource_ = null;
          }
          return dataSourceBuilder_;
        }

        // @@protoc_insertion_point(builder_scope:perfetto.protos.TracingServiceEvent.DataSources)
      }

      // @@protoc_insertion_point(class_scope:perfetto.protos.TracingServiceEvent.DataSources)
      private static final perfetto.protos.TracingServiceEventOuterClass.TracingServiceEvent.DataSources DEFAULT_INSTANCE;
      static {
        DEFAULT_INSTANCE = new perfetto.protos.TracingServiceEventOuterClass.TracingServiceEvent.DataSources();
      }

      public static perfetto.protos.TracingServiceEventOuterClass.TracingServiceEvent.DataSources getDefaultInstance() {
        return DEFAULT_INSTANCE;
      }

      private static final com.google.protobuf.Parser<DataSources>
          PARSER = new com.google.protobuf.AbstractParser<DataSources>() {
        @java.lang.Override
        public DataSources parsePartialFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws com.google.protobuf.InvalidProtocolBufferException {
          Builder builder = newBuilder();
          try {
            builder.mergeFrom(input, extensionRegistry);
          } catch (com.google.protobuf.InvalidProtocolBufferException e) {
            throw e.setUnfinishedMessage(builder.buildPartial());
          } catch (com.google.protobuf.UninitializedMessageException e) {
            throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
          } catch (java.io.IOException e) {
            throw new com.google.protobuf.InvalidProtocolBufferException(e)
                .setUnfinishedMessage(builder.buildPartial());
          }
          return builder.buildPartial();
        }
      };

      public static com.google.protobuf.Parser<DataSources> parser() {
        return PARSER;
      }

      @java.lang.Override
      public com.google.protobuf.Parser<DataSources> getParserForType() {
        return PARSER;
      }

      @java.lang.Override
      public perfetto.protos.TracingServiceEventOuterClass.TracingServiceEvent.DataSources getDefaultInstanceForType() {
        return DEFAULT_INSTANCE;
      }

    }

    private int eventTypeCase_ = 0;
    @SuppressWarnings("serial")
    private java.lang.Object eventType_;
    public enum EventTypeCase
        implements com.google.protobuf.Internal.EnumLite,
            com.google.protobuf.AbstractMessage.InternalOneOfEnum {
      TRACING_STARTED(2),
      ALL_DATA_SOURCES_STARTED(1),
      FLUSH_STARTED(9),
      ALL_DATA_SOURCES_FLUSHED(3),
      READ_TRACING_BUFFERS_COMPLETED(4),
      TRACING_DISABLED(5),
      SEIZED_FOR_BUGREPORT(6),
      SLOW_STARTING_DATA_SOURCES(7),
      LAST_FLUSH_SLOW_DATA_SOURCES(8),
      EVENTTYPE_NOT_SET(0);
      private final int value;
      private EventTypeCase(int value) {
        this.value = value;
      }
      /**
       * @param value The number of the enum to look for.
       * @return The enum associated with the given number.
       * @deprecated Use {@link #forNumber(int)} instead.
       */
      @java.lang.Deprecated
      public static EventTypeCase valueOf(int value) {
        return forNumber(value);
      }

      public static EventTypeCase forNumber(int value) {
        switch (value) {
          case 2: return TRACING_STARTED;
          case 1: return ALL_DATA_SOURCES_STARTED;
          case 9: return FLUSH_STARTED;
          case 3: return ALL_DATA_SOURCES_FLUSHED;
          case 4: return READ_TRACING_BUFFERS_COMPLETED;
          case 5: return TRACING_DISABLED;
          case 6: return SEIZED_FOR_BUGREPORT;
          case 7: return SLOW_STARTING_DATA_SOURCES;
          case 8: return LAST_FLUSH_SLOW_DATA_SOURCES;
          case 0: return EVENTTYPE_NOT_SET;
          default: return null;
        }
      }
      public int getNumber() {
        return this.value;
      }
    };

    public EventTypeCase
    getEventTypeCase() {
      return EventTypeCase.forNumber(
          eventTypeCase_);
    }

    public static final int TRACING_STARTED_FIELD_NUMBER = 2;
    /**
     * <pre>
     * Emitted when we start tracing and specifically, this will be before any
     * producer is notified about the existence of this trace. This is always
     * emitted before the all_data_sources_started event. This event is also
     * guaranteed to be seen (byte-offset wise) before any data packets from
     * producers.
     * </pre>
     *
     * <code>bool tracing_started = 2;</code>
     * @return Whether the tracingStarted field is set.
     */
    @java.lang.Override
    public boolean hasTracingStarted() {
      return eventTypeCase_ == 2;
    }
    /**
     * <pre>
     * Emitted when we start tracing and specifically, this will be before any
     * producer is notified about the existence of this trace. This is always
     * emitted before the all_data_sources_started event. This event is also
     * guaranteed to be seen (byte-offset wise) before any data packets from
     * producers.
     * </pre>
     *
     * <code>bool tracing_started = 2;</code>
     * @return The tracingStarted.
     */
    @java.lang.Override
    public boolean getTracingStarted() {
      if (eventTypeCase_ == 2) {
        return (java.lang.Boolean) eventType_;
      }
      return false;
    }

    public static final int ALL_DATA_SOURCES_STARTED_FIELD_NUMBER = 1;
    /**
     * <pre>
     * Emitted after all data sources saw the start event and ACKed it.
     * This identifies the point in time when it's safe to assume that all data
     * sources have been recording events.
     * </pre>
     *
     * <code>bool all_data_sources_started = 1;</code>
     * @return Whether the allDataSourcesStarted field is set.
     */
    @java.lang.Override
    public boolean hasAllDataSourcesStarted() {
      return eventTypeCase_ == 1;
    }
    /**
     * <pre>
     * Emitted after all data sources saw the start event and ACKed it.
     * This identifies the point in time when it's safe to assume that all data
     * sources have been recording events.
     * </pre>
     *
     * <code>bool all_data_sources_started = 1;</code>
     * @return The allDataSourcesStarted.
     */
    @java.lang.Override
    public boolean getAllDataSourcesStarted() {
      if (eventTypeCase_ == 1) {
        return (java.lang.Boolean) eventType_;
      }
      return false;
    }

    public static final int FLUSH_STARTED_FIELD_NUMBER = 9;
    /**
     * <pre>
     * Emitted when a flush is started.
     * </pre>
     *
     * <code>bool flush_started = 9;</code>
     * @return Whether the flushStarted field is set.
     */
    @java.lang.Override
    public boolean hasFlushStarted() {
      return eventTypeCase_ == 9;
    }
    /**
     * <pre>
     * Emitted when a flush is started.
     * </pre>
     *
     * <code>bool flush_started = 9;</code>
     * @return The flushStarted.
     */
    @java.lang.Override
    public boolean getFlushStarted() {
      if (eventTypeCase_ == 9) {
        return (java.lang.Boolean) eventType_;
      }
      return false;
    }

    public static final int ALL_DATA_SOURCES_FLUSHED_FIELD_NUMBER = 3;
    /**
     * <pre>
     * Emitted when all data sources have been flushed successfully or with an
     * error (including timeouts). This can generally happen many times over the
     * course of the trace.
     * </pre>
     *
     * <code>bool all_data_sources_flushed = 3;</code>
     * @return Whether the allDataSourcesFlushed field is set.
     */
    @java.lang.Override
    public boolean hasAllDataSourcesFlushed() {
      return eventTypeCase_ == 3;
    }
    /**
     * <pre>
     * Emitted when all data sources have been flushed successfully or with an
     * error (including timeouts). This can generally happen many times over the
     * course of the trace.
     * </pre>
     *
     * <code>bool all_data_sources_flushed = 3;</code>
     * @return The allDataSourcesFlushed.
     */
    @java.lang.Override
    public boolean getAllDataSourcesFlushed() {
      if (eventTypeCase_ == 3) {
        return (java.lang.Boolean) eventType_;
      }
      return false;
    }

    public static final int READ_TRACING_BUFFERS_COMPLETED_FIELD_NUMBER = 4;
    /**
     * <pre>
     * Emitted when reading back the central tracing buffers has been completed.
     * If |write_into_file| is specified, this can happen many times over the
     * course of the trace.
     * </pre>
     *
     * <code>bool read_tracing_buffers_completed = 4;</code>
     * @return Whether the readTracingBuffersCompleted field is set.
     */
    @java.lang.Override
    public boolean hasReadTracingBuffersCompleted() {
      return eventTypeCase_ == 4;
    }
    /**
     * <pre>
     * Emitted when reading back the central tracing buffers has been completed.
     * If |write_into_file| is specified, this can happen many times over the
     * course of the trace.
     * </pre>
     *
     * <code>bool read_tracing_buffers_completed = 4;</code>
     * @return The readTracingBuffersCompleted.
     */
    @java.lang.Override
    public boolean getReadTracingBuffersCompleted() {
      if (eventTypeCase_ == 4) {
        return (java.lang.Boolean) eventType_;
      }
      return false;
    }

    public static final int TRACING_DISABLED_FIELD_NUMBER = 5;
    /**
     * <pre>
     * Emitted after tracing has been disabled and specifically, this will be
     * after all packets from producers have been included in the central
     * tracing buffer.
     * </pre>
     *
     * <code>bool tracing_disabled = 5;</code>
     * @return Whether the tracingDisabled field is set.
     */
    @java.lang.Override
    public boolean hasTracingDisabled() {
      return eventTypeCase_ == 5;
    }
    /**
     * <pre>
     * Emitted after tracing has been disabled and specifically, this will be
     * after all packets from producers have been included in the central
     * tracing buffer.
     * </pre>
     *
     * <code>bool tracing_disabled = 5;</code>
     * @return The tracingDisabled.
     */
    @java.lang.Override
    public boolean getTracingDisabled() {
      if (eventTypeCase_ == 5) {
        return (java.lang.Boolean) eventType_;
      }
      return false;
    }

    public static final int SEIZED_FOR_BUGREPORT_FIELD_NUMBER = 6;
    /**
     * <pre>
     * Emitted if perfetto --save-for-bugreport was invoked while the current
     * tracing session was running and it had the highest bugreport_score. In
     * this case the original consumer will see a nearly empty trace, because
     * the contents are routed onto the bugreport file. This event flags the
     * situation explicitly. Traces that contain this marker should be discarded
     * by test infrastructures / pipelines.
     * Deprecated since Android U, where --save-for-bugreport uses
     * non-destructive cloning.
     * </pre>
     *
     * <code>bool seized_for_bugreport = 6;</code>
     * @return Whether the seizedForBugreport field is set.
     */
    @java.lang.Override
    public boolean hasSeizedForBugreport() {
      return eventTypeCase_ == 6;
    }
    /**
     * <pre>
     * Emitted if perfetto --save-for-bugreport was invoked while the current
     * tracing session was running and it had the highest bugreport_score. In
     * this case the original consumer will see a nearly empty trace, because
     * the contents are routed onto the bugreport file. This event flags the
     * situation explicitly. Traces that contain this marker should be discarded
     * by test infrastructures / pipelines.
     * Deprecated since Android U, where --save-for-bugreport uses
     * non-destructive cloning.
     * </pre>
     *
     * <code>bool seized_for_bugreport = 6;</code>
     * @return The seizedForBugreport.
     */
    @java.lang.Override
    public boolean getSeizedForBugreport() {
      if (eventTypeCase_ == 6) {
        return (java.lang.Boolean) eventType_;
      }
      return false;
    }

    public static final int SLOW_STARTING_DATA_SOURCES_FIELD_NUMBER = 7;
    /**
     * <pre>
     * Emitted when not all data sources in all producers reply to a start
     * request after some time.
     * </pre>
     *
     * <code>.perfetto.protos.TracingServiceEvent.DataSources slow_starting_data_sources = 7;</code>
     * @return Whether the slowStartingDataSources field is set.
     */
    @java.lang.Override
    public boolean hasSlowStartingDataSources() {
      return eventTypeCase_ == 7;
    }
    /**
     * <pre>
     * Emitted when not all data sources in all producers reply to a start
     * request after some time.
     * </pre>
     *
     * <code>.perfetto.protos.TracingServiceEvent.DataSources slow_starting_data_sources = 7;</code>
     * @return The slowStartingDataSources.
     */
    @java.lang.Override
    public perfetto.protos.TracingServiceEventOuterClass.TracingServiceEvent.DataSources getSlowStartingDataSources() {
      if (eventTypeCase_ == 7) {
         return (perfetto.protos.TracingServiceEventOuterClass.TracingServiceEvent.DataSources) eventType_;
      }
      return perfetto.protos.TracingServiceEventOuterClass.TracingServiceEvent.DataSources.getDefaultInstance();
    }
    /**
     * <pre>
     * Emitted when not all data sources in all producers reply to a start
     * request after some time.
     * </pre>
     *
     * <code>.perfetto.protos.TracingServiceEvent.DataSources slow_starting_data_sources = 7;</code>
     */
    @java.lang.Override
    public perfetto.protos.TracingServiceEventOuterClass.TracingServiceEvent.DataSourcesOrBuilder getSlowStartingDataSourcesOrBuilder() {
      if (eventTypeCase_ == 7) {
         return (perfetto.protos.TracingServiceEventOuterClass.TracingServiceEvent.DataSources) eventType_;
      }
      return perfetto.protos.TracingServiceEventOuterClass.TracingServiceEvent.DataSources.getDefaultInstance();
    }

    public static final int LAST_FLUSH_SLOW_DATA_SOURCES_FIELD_NUMBER = 8;
    /**
     * <pre>
     * Emitted when the last flush request has failed. Lists data sources that
     * did not reply on time.
     * </pre>
     *
     * <code>.perfetto.protos.TracingServiceEvent.DataSources last_flush_slow_data_sources = 8;</code>
     * @return Whether the lastFlushSlowDataSources field is set.
     */
    @java.lang.Override
    public boolean hasLastFlushSlowDataSources() {
      return eventTypeCase_ == 8;
    }
    /**
     * <pre>
     * Emitted when the last flush request has failed. Lists data sources that
     * did not reply on time.
     * </pre>
     *
     * <code>.perfetto.protos.TracingServiceEvent.DataSources last_flush_slow_data_sources = 8;</code>
     * @return The lastFlushSlowDataSources.
     */
    @java.lang.Override
    public perfetto.protos.TracingServiceEventOuterClass.TracingServiceEvent.DataSources getLastFlushSlowDataSources() {
      if (eventTypeCase_ == 8) {
         return (perfetto.protos.TracingServiceEventOuterClass.TracingServiceEvent.DataSources) eventType_;
      }
      return perfetto.protos.TracingServiceEventOuterClass.TracingServiceEvent.DataSources.getDefaultInstance();
    }
    /**
     * <pre>
     * Emitted when the last flush request has failed. Lists data sources that
     * did not reply on time.
     * </pre>
     *
     * <code>.perfetto.protos.TracingServiceEvent.DataSources last_flush_slow_data_sources = 8;</code>
     */
    @java.lang.Override
    public perfetto.protos.TracingServiceEventOuterClass.TracingServiceEvent.DataSourcesOrBuilder getLastFlushSlowDataSourcesOrBuilder() {
      if (eventTypeCase_ == 8) {
         return (perfetto.protos.TracingServiceEventOuterClass.TracingServiceEvent.DataSources) eventType_;
      }
      return perfetto.protos.TracingServiceEventOuterClass.TracingServiceEvent.DataSources.getDefaultInstance();
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (eventTypeCase_ == 1) {
        output.writeBool(
            1, (boolean)((java.lang.Boolean) eventType_));
      }
      if (eventTypeCase_ == 2) {
        output.writeBool(
            2, (boolean)((java.lang.Boolean) eventType_));
      }
      if (eventTypeCase_ == 3) {
        output.writeBool(
            3, (boolean)((java.lang.Boolean) eventType_));
      }
      if (eventTypeCase_ == 4) {
        output.writeBool(
            4, (boolean)((java.lang.Boolean) eventType_));
      }
      if (eventTypeCase_ == 5) {
        output.writeBool(
            5, (boolean)((java.lang.Boolean) eventType_));
      }
      if (eventTypeCase_ == 6) {
        output.writeBool(
            6, (boolean)((java.lang.Boolean) eventType_));
      }
      if (eventTypeCase_ == 7) {
        output.writeMessage(7, (perfetto.protos.TracingServiceEventOuterClass.TracingServiceEvent.DataSources) eventType_);
      }
      if (eventTypeCase_ == 8) {
        output.writeMessage(8, (perfetto.protos.TracingServiceEventOuterClass.TracingServiceEvent.DataSources) eventType_);
      }
      if (eventTypeCase_ == 9) {
        output.writeBool(
            9, (boolean)((java.lang.Boolean) eventType_));
      }
      getUnknownFields().writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (eventTypeCase_ == 1) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(
              1, (boolean)((java.lang.Boolean) eventType_));
      }
      if (eventTypeCase_ == 2) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(
              2, (boolean)((java.lang.Boolean) eventType_));
      }
      if (eventTypeCase_ == 3) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(
              3, (boolean)((java.lang.Boolean) eventType_));
      }
      if (eventTypeCase_ == 4) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(
              4, (boolean)((java.lang.Boolean) eventType_));
      }
      if (eventTypeCase_ == 5) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(
              5, (boolean)((java.lang.Boolean) eventType_));
      }
      if (eventTypeCase_ == 6) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(
              6, (boolean)((java.lang.Boolean) eventType_));
      }
      if (eventTypeCase_ == 7) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(7, (perfetto.protos.TracingServiceEventOuterClass.TracingServiceEvent.DataSources) eventType_);
      }
      if (eventTypeCase_ == 8) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(8, (perfetto.protos.TracingServiceEventOuterClass.TracingServiceEvent.DataSources) eventType_);
      }
      if (eventTypeCase_ == 9) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(
              9, (boolean)((java.lang.Boolean) eventType_));
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof perfetto.protos.TracingServiceEventOuterClass.TracingServiceEvent)) {
        return super.equals(obj);
      }
      perfetto.protos.TracingServiceEventOuterClass.TracingServiceEvent other = (perfetto.protos.TracingServiceEventOuterClass.TracingServiceEvent) obj;

      if (!getEventTypeCase().equals(other.getEventTypeCase())) return false;
      switch (eventTypeCase_) {
        case 2:
          if (getTracingStarted()
              != other.getTracingStarted()) return false;
          break;
        case 1:
          if (getAllDataSourcesStarted()
              != other.getAllDataSourcesStarted()) return false;
          break;
        case 9:
          if (getFlushStarted()
              != other.getFlushStarted()) return false;
          break;
        case 3:
          if (getAllDataSourcesFlushed()
              != other.getAllDataSourcesFlushed()) return false;
          break;
        case 4:
          if (getReadTracingBuffersCompleted()
              != other.getReadTracingBuffersCompleted()) return false;
          break;
        case 5:
          if (getTracingDisabled()
              != other.getTracingDisabled()) return false;
          break;
        case 6:
          if (getSeizedForBugreport()
              != other.getSeizedForBugreport()) return false;
          break;
        case 7:
          if (!getSlowStartingDataSources()
              .equals(other.getSlowStartingDataSources())) return false;
          break;
        case 8:
          if (!getLastFlushSlowDataSources()
              .equals(other.getLastFlushSlowDataSources())) return false;
          break;
        case 0:
        default:
      }
      if (!getUnknownFields().equals(other.getUnknownFields())) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      switch (eventTypeCase_) {
        case 2:
          hash = (37 * hash) + TRACING_STARTED_FIELD_NUMBER;
          hash = (53 * hash) + com.google.protobuf.Internal.hashBoolean(
              getTracingStarted());
          break;
        case 1:
          hash = (37 * hash) + ALL_DATA_SOURCES_STARTED_FIELD_NUMBER;
          hash = (53 * hash) + com.google.protobuf.Internal.hashBoolean(
              getAllDataSourcesStarted());
          break;
        case 9:
          hash = (37 * hash) + FLUSH_STARTED_FIELD_NUMBER;
          hash = (53 * hash) + com.google.protobuf.Internal.hashBoolean(
              getFlushStarted());
          break;
        case 3:
          hash = (37 * hash) + ALL_DATA_SOURCES_FLUSHED_FIELD_NUMBER;
          hash = (53 * hash) + com.google.protobuf.Internal.hashBoolean(
              getAllDataSourcesFlushed());
          break;
        case 4:
          hash = (37 * hash) + READ_TRACING_BUFFERS_COMPLETED_FIELD_NUMBER;
          hash = (53 * hash) + com.google.protobuf.Internal.hashBoolean(
              getReadTracingBuffersCompleted());
          break;
        case 5:
          hash = (37 * hash) + TRACING_DISABLED_FIELD_NUMBER;
          hash = (53 * hash) + com.google.protobuf.Internal.hashBoolean(
              getTracingDisabled());
          break;
        case 6:
          hash = (37 * hash) + SEIZED_FOR_BUGREPORT_FIELD_NUMBER;
          hash = (53 * hash) + com.google.protobuf.Internal.hashBoolean(
              getSeizedForBugreport());
          break;
        case 7:
          hash = (37 * hash) + SLOW_STARTING_DATA_SOURCES_FIELD_NUMBER;
          hash = (53 * hash) + getSlowStartingDataSources().hashCode();
          break;
        case 8:
          hash = (37 * hash) + LAST_FLUSH_SLOW_DATA_SOURCES_FIELD_NUMBER;
          hash = (53 * hash) + getLastFlushSlowDataSources().hashCode();
          break;
        case 0:
        default:
      }
      hash = (29 * hash) + getUnknownFields().hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static perfetto.protos.TracingServiceEventOuterClass.TracingServiceEvent parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static perfetto.protos.TracingServiceEventOuterClass.TracingServiceEvent parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static perfetto.protos.TracingServiceEventOuterClass.TracingServiceEvent parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static perfetto.protos.TracingServiceEventOuterClass.TracingServiceEvent parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static perfetto.protos.TracingServiceEventOuterClass.TracingServiceEvent parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static perfetto.protos.TracingServiceEventOuterClass.TracingServiceEvent parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static perfetto.protos.TracingServiceEventOuterClass.TracingServiceEvent parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input);
    }
    public static perfetto.protos.TracingServiceEventOuterClass.TracingServiceEvent parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    public static perfetto.protos.TracingServiceEventOuterClass.TracingServiceEvent parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessage
          .parseDelimitedWithIOException(PARSER, input);
    }

    public static perfetto.protos.TracingServiceEventOuterClass.TracingServiceEvent parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessage
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static perfetto.protos.TracingServiceEventOuterClass.TracingServiceEvent parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input);
    }
    public static perfetto.protos.TracingServiceEventOuterClass.TracingServiceEvent parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(perfetto.protos.TracingServiceEventOuterClass.TracingServiceEvent prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * <pre>
     * Events emitted by the tracing service.
     * </pre>
     *
     * Protobuf type {@code perfetto.protos.TracingServiceEvent}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:perfetto.protos.TracingServiceEvent)
        perfetto.protos.TracingServiceEventOuterClass.TracingServiceEventOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return perfetto.protos.TracingServiceEventOuterClass.internal_static_perfetto_protos_TracingServiceEvent_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return perfetto.protos.TracingServiceEventOuterClass.internal_static_perfetto_protos_TracingServiceEvent_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                perfetto.protos.TracingServiceEventOuterClass.TracingServiceEvent.class, perfetto.protos.TracingServiceEventOuterClass.TracingServiceEvent.Builder.class);
      }

      // Construct using perfetto.protos.TracingServiceEventOuterClass.TracingServiceEvent.newBuilder()
      private Builder() {

      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);

      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        bitField0_ = 0;
        if (slowStartingDataSourcesBuilder_ != null) {
          slowStartingDataSourcesBuilder_.clear();
        }
        if (lastFlushSlowDataSourcesBuilder_ != null) {
          lastFlushSlowDataSourcesBuilder_.clear();
        }
        eventTypeCase_ = 0;
        eventType_ = null;
        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return perfetto.protos.TracingServiceEventOuterClass.internal_static_perfetto_protos_TracingServiceEvent_descriptor;
      }

      @java.lang.Override
      public perfetto.protos.TracingServiceEventOuterClass.TracingServiceEvent getDefaultInstanceForType() {
        return perfetto.protos.TracingServiceEventOuterClass.TracingServiceEvent.getDefaultInstance();
      }

      @java.lang.Override
      public perfetto.protos.TracingServiceEventOuterClass.TracingServiceEvent build() {
        perfetto.protos.TracingServiceEventOuterClass.TracingServiceEvent result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public perfetto.protos.TracingServiceEventOuterClass.TracingServiceEvent buildPartial() {
        perfetto.protos.TracingServiceEventOuterClass.TracingServiceEvent result = new perfetto.protos.TracingServiceEventOuterClass.TracingServiceEvent(this);
        if (bitField0_ != 0) { buildPartial0(result); }
        buildPartialOneofs(result);
        onBuilt();
        return result;
      }

      private void buildPartial0(perfetto.protos.TracingServiceEventOuterClass.TracingServiceEvent result) {
        int from_bitField0_ = bitField0_;
      }

      private void buildPartialOneofs(perfetto.protos.TracingServiceEventOuterClass.TracingServiceEvent result) {
        result.eventTypeCase_ = eventTypeCase_;
        result.eventType_ = this.eventType_;
        if (eventTypeCase_ == 7 &&
            slowStartingDataSourcesBuilder_ != null) {
          result.eventType_ = slowStartingDataSourcesBuilder_.build();
        }
        if (eventTypeCase_ == 8 &&
            lastFlushSlowDataSourcesBuilder_ != null) {
          result.eventType_ = lastFlushSlowDataSourcesBuilder_.build();
        }
      }

      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof perfetto.protos.TracingServiceEventOuterClass.TracingServiceEvent) {
          return mergeFrom((perfetto.protos.TracingServiceEventOuterClass.TracingServiceEvent)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(perfetto.protos.TracingServiceEventOuterClass.TracingServiceEvent other) {
        if (other == perfetto.protos.TracingServiceEventOuterClass.TracingServiceEvent.getDefaultInstance()) return this;
        switch (other.getEventTypeCase()) {
          case TRACING_STARTED: {
            setTracingStarted(other.getTracingStarted());
            break;
          }
          case ALL_DATA_SOURCES_STARTED: {
            setAllDataSourcesStarted(other.getAllDataSourcesStarted());
            break;
          }
          case FLUSH_STARTED: {
            setFlushStarted(other.getFlushStarted());
            break;
          }
          case ALL_DATA_SOURCES_FLUSHED: {
            setAllDataSourcesFlushed(other.getAllDataSourcesFlushed());
            break;
          }
          case READ_TRACING_BUFFERS_COMPLETED: {
            setReadTracingBuffersCompleted(other.getReadTracingBuffersCompleted());
            break;
          }
          case TRACING_DISABLED: {
            setTracingDisabled(other.getTracingDisabled());
            break;
          }
          case SEIZED_FOR_BUGREPORT: {
            setSeizedForBugreport(other.getSeizedForBugreport());
            break;
          }
          case SLOW_STARTING_DATA_SOURCES: {
            mergeSlowStartingDataSources(other.getSlowStartingDataSources());
            break;
          }
          case LAST_FLUSH_SLOW_DATA_SOURCES: {
            mergeLastFlushSlowDataSources(other.getLastFlushSlowDataSources());
            break;
          }
          case EVENTTYPE_NOT_SET: {
            break;
          }
        }
        this.mergeUnknownFields(other.getUnknownFields());
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        if (extensionRegistry == null) {
          throw new java.lang.NullPointerException();
        }
        try {
          boolean done = false;
          while (!done) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                done = true;
                break;
              case 8: {
                eventType_ = input.readBool();
                eventTypeCase_ = 1;
                break;
              } // case 8
              case 16: {
                eventType_ = input.readBool();
                eventTypeCase_ = 2;
                break;
              } // case 16
              case 24: {
                eventType_ = input.readBool();
                eventTypeCase_ = 3;
                break;
              } // case 24
              case 32: {
                eventType_ = input.readBool();
                eventTypeCase_ = 4;
                break;
              } // case 32
              case 40: {
                eventType_ = input.readBool();
                eventTypeCase_ = 5;
                break;
              } // case 40
              case 48: {
                eventType_ = input.readBool();
                eventTypeCase_ = 6;
                break;
              } // case 48
              case 58: {
                input.readMessage(
                    getSlowStartingDataSourcesFieldBuilder().getBuilder(),
                    extensionRegistry);
                eventTypeCase_ = 7;
                break;
              } // case 58
              case 66: {
                input.readMessage(
                    getLastFlushSlowDataSourcesFieldBuilder().getBuilder(),
                    extensionRegistry);
                eventTypeCase_ = 8;
                break;
              } // case 66
              case 72: {
                eventType_ = input.readBool();
                eventTypeCase_ = 9;
                break;
              } // case 72
              default: {
                if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                  done = true; // was an endgroup tag
                }
                break;
              } // default:
            } // switch (tag)
          } // while (!done)
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.unwrapIOException();
        } finally {
          onChanged();
        } // finally
        return this;
      }
      private int eventTypeCase_ = 0;
      private java.lang.Object eventType_;
      public EventTypeCase
          getEventTypeCase() {
        return EventTypeCase.forNumber(
            eventTypeCase_);
      }

      public Builder clearEventType() {
        eventTypeCase_ = 0;
        eventType_ = null;
        onChanged();
        return this;
      }

      private int bitField0_;

      /**
       * <pre>
       * Emitted when we start tracing and specifically, this will be before any
       * producer is notified about the existence of this trace. This is always
       * emitted before the all_data_sources_started event. This event is also
       * guaranteed to be seen (byte-offset wise) before any data packets from
       * producers.
       * </pre>
       *
       * <code>bool tracing_started = 2;</code>
       * @return Whether the tracingStarted field is set.
       */
      public boolean hasTracingStarted() {
        return eventTypeCase_ == 2;
      }
      /**
       * <pre>
       * Emitted when we start tracing and specifically, this will be before any
       * producer is notified about the existence of this trace. This is always
       * emitted before the all_data_sources_started event. This event is also
       * guaranteed to be seen (byte-offset wise) before any data packets from
       * producers.
       * </pre>
       *
       * <code>bool tracing_started = 2;</code>
       * @return The tracingStarted.
       */
      public boolean getTracingStarted() {
        if (eventTypeCase_ == 2) {
          return (java.lang.Boolean) eventType_;
        }
        return false;
      }
      /**
       * <pre>
       * Emitted when we start tracing and specifically, this will be before any
       * producer is notified about the existence of this trace. This is always
       * emitted before the all_data_sources_started event. This event is also
       * guaranteed to be seen (byte-offset wise) before any data packets from
       * producers.
       * </pre>
       *
       * <code>bool tracing_started = 2;</code>
       * @param value The tracingStarted to set.
       * @return This builder for chaining.
       */
      public Builder setTracingStarted(boolean value) {

        eventTypeCase_ = 2;
        eventType_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Emitted when we start tracing and specifically, this will be before any
       * producer is notified about the existence of this trace. This is always
       * emitted before the all_data_sources_started event. This event is also
       * guaranteed to be seen (byte-offset wise) before any data packets from
       * producers.
       * </pre>
       *
       * <code>bool tracing_started = 2;</code>
       * @return This builder for chaining.
       */
      public Builder clearTracingStarted() {
        if (eventTypeCase_ == 2) {
          eventTypeCase_ = 0;
          eventType_ = null;
          onChanged();
        }
        return this;
      }

      /**
       * <pre>
       * Emitted after all data sources saw the start event and ACKed it.
       * This identifies the point in time when it's safe to assume that all data
       * sources have been recording events.
       * </pre>
       *
       * <code>bool all_data_sources_started = 1;</code>
       * @return Whether the allDataSourcesStarted field is set.
       */
      public boolean hasAllDataSourcesStarted() {
        return eventTypeCase_ == 1;
      }
      /**
       * <pre>
       * Emitted after all data sources saw the start event and ACKed it.
       * This identifies the point in time when it's safe to assume that all data
       * sources have been recording events.
       * </pre>
       *
       * <code>bool all_data_sources_started = 1;</code>
       * @return The allDataSourcesStarted.
       */
      public boolean getAllDataSourcesStarted() {
        if (eventTypeCase_ == 1) {
          return (java.lang.Boolean) eventType_;
        }
        return false;
      }
      /**
       * <pre>
       * Emitted after all data sources saw the start event and ACKed it.
       * This identifies the point in time when it's safe to assume that all data
       * sources have been recording events.
       * </pre>
       *
       * <code>bool all_data_sources_started = 1;</code>
       * @param value The allDataSourcesStarted to set.
       * @return This builder for chaining.
       */
      public Builder setAllDataSourcesStarted(boolean value) {

        eventTypeCase_ = 1;
        eventType_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Emitted after all data sources saw the start event and ACKed it.
       * This identifies the point in time when it's safe to assume that all data
       * sources have been recording events.
       * </pre>
       *
       * <code>bool all_data_sources_started = 1;</code>
       * @return This builder for chaining.
       */
      public Builder clearAllDataSourcesStarted() {
        if (eventTypeCase_ == 1) {
          eventTypeCase_ = 0;
          eventType_ = null;
          onChanged();
        }
        return this;
      }

      /**
       * <pre>
       * Emitted when a flush is started.
       * </pre>
       *
       * <code>bool flush_started = 9;</code>
       * @return Whether the flushStarted field is set.
       */
      public boolean hasFlushStarted() {
        return eventTypeCase_ == 9;
      }
      /**
       * <pre>
       * Emitted when a flush is started.
       * </pre>
       *
       * <code>bool flush_started = 9;</code>
       * @return The flushStarted.
       */
      public boolean getFlushStarted() {
        if (eventTypeCase_ == 9) {
          return (java.lang.Boolean) eventType_;
        }
        return false;
      }
      /**
       * <pre>
       * Emitted when a flush is started.
       * </pre>
       *
       * <code>bool flush_started = 9;</code>
       * @param value The flushStarted to set.
       * @return This builder for chaining.
       */
      public Builder setFlushStarted(boolean value) {

        eventTypeCase_ = 9;
        eventType_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Emitted when a flush is started.
       * </pre>
       *
       * <code>bool flush_started = 9;</code>
       * @return This builder for chaining.
       */
      public Builder clearFlushStarted() {
        if (eventTypeCase_ == 9) {
          eventTypeCase_ = 0;
          eventType_ = null;
          onChanged();
        }
        return this;
      }

      /**
       * <pre>
       * Emitted when all data sources have been flushed successfully or with an
       * error (including timeouts). This can generally happen many times over the
       * course of the trace.
       * </pre>
       *
       * <code>bool all_data_sources_flushed = 3;</code>
       * @return Whether the allDataSourcesFlushed field is set.
       */
      public boolean hasAllDataSourcesFlushed() {
        return eventTypeCase_ == 3;
      }
      /**
       * <pre>
       * Emitted when all data sources have been flushed successfully or with an
       * error (including timeouts). This can generally happen many times over the
       * course of the trace.
       * </pre>
       *
       * <code>bool all_data_sources_flushed = 3;</code>
       * @return The allDataSourcesFlushed.
       */
      public boolean getAllDataSourcesFlushed() {
        if (eventTypeCase_ == 3) {
          return (java.lang.Boolean) eventType_;
        }
        return false;
      }
      /**
       * <pre>
       * Emitted when all data sources have been flushed successfully or with an
       * error (including timeouts). This can generally happen many times over the
       * course of the trace.
       * </pre>
       *
       * <code>bool all_data_sources_flushed = 3;</code>
       * @param value The allDataSourcesFlushed to set.
       * @return This builder for chaining.
       */
      public Builder setAllDataSourcesFlushed(boolean value) {

        eventTypeCase_ = 3;
        eventType_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Emitted when all data sources have been flushed successfully or with an
       * error (including timeouts). This can generally happen many times over the
       * course of the trace.
       * </pre>
       *
       * <code>bool all_data_sources_flushed = 3;</code>
       * @return This builder for chaining.
       */
      public Builder clearAllDataSourcesFlushed() {
        if (eventTypeCase_ == 3) {
          eventTypeCase_ = 0;
          eventType_ = null;
          onChanged();
        }
        return this;
      }

      /**
       * <pre>
       * Emitted when reading back the central tracing buffers has been completed.
       * If |write_into_file| is specified, this can happen many times over the
       * course of the trace.
       * </pre>
       *
       * <code>bool read_tracing_buffers_completed = 4;</code>
       * @return Whether the readTracingBuffersCompleted field is set.
       */
      public boolean hasReadTracingBuffersCompleted() {
        return eventTypeCase_ == 4;
      }
      /**
       * <pre>
       * Emitted when reading back the central tracing buffers has been completed.
       * If |write_into_file| is specified, this can happen many times over the
       * course of the trace.
       * </pre>
       *
       * <code>bool read_tracing_buffers_completed = 4;</code>
       * @return The readTracingBuffersCompleted.
       */
      public boolean getReadTracingBuffersCompleted() {
        if (eventTypeCase_ == 4) {
          return (java.lang.Boolean) eventType_;
        }
        return false;
      }
      /**
       * <pre>
       * Emitted when reading back the central tracing buffers has been completed.
       * If |write_into_file| is specified, this can happen many times over the
       * course of the trace.
       * </pre>
       *
       * <code>bool read_tracing_buffers_completed = 4;</code>
       * @param value The readTracingBuffersCompleted to set.
       * @return This builder for chaining.
       */
      public Builder setReadTracingBuffersCompleted(boolean value) {

        eventTypeCase_ = 4;
        eventType_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Emitted when reading back the central tracing buffers has been completed.
       * If |write_into_file| is specified, this can happen many times over the
       * course of the trace.
       * </pre>
       *
       * <code>bool read_tracing_buffers_completed = 4;</code>
       * @return This builder for chaining.
       */
      public Builder clearReadTracingBuffersCompleted() {
        if (eventTypeCase_ == 4) {
          eventTypeCase_ = 0;
          eventType_ = null;
          onChanged();
        }
        return this;
      }

      /**
       * <pre>
       * Emitted after tracing has been disabled and specifically, this will be
       * after all packets from producers have been included in the central
       * tracing buffer.
       * </pre>
       *
       * <code>bool tracing_disabled = 5;</code>
       * @return Whether the tracingDisabled field is set.
       */
      public boolean hasTracingDisabled() {
        return eventTypeCase_ == 5;
      }
      /**
       * <pre>
       * Emitted after tracing has been disabled and specifically, this will be
       * after all packets from producers have been included in the central
       * tracing buffer.
       * </pre>
       *
       * <code>bool tracing_disabled = 5;</code>
       * @return The tracingDisabled.
       */
      public boolean getTracingDisabled() {
        if (eventTypeCase_ == 5) {
          return (java.lang.Boolean) eventType_;
        }
        return false;
      }
      /**
       * <pre>
       * Emitted after tracing has been disabled and specifically, this will be
       * after all packets from producers have been included in the central
       * tracing buffer.
       * </pre>
       *
       * <code>bool tracing_disabled = 5;</code>
       * @param value The tracingDisabled to set.
       * @return This builder for chaining.
       */
      public Builder setTracingDisabled(boolean value) {

        eventTypeCase_ = 5;
        eventType_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Emitted after tracing has been disabled and specifically, this will be
       * after all packets from producers have been included in the central
       * tracing buffer.
       * </pre>
       *
       * <code>bool tracing_disabled = 5;</code>
       * @return This builder for chaining.
       */
      public Builder clearTracingDisabled() {
        if (eventTypeCase_ == 5) {
          eventTypeCase_ = 0;
          eventType_ = null;
          onChanged();
        }
        return this;
      }

      /**
       * <pre>
       * Emitted if perfetto --save-for-bugreport was invoked while the current
       * tracing session was running and it had the highest bugreport_score. In
       * this case the original consumer will see a nearly empty trace, because
       * the contents are routed onto the bugreport file. This event flags the
       * situation explicitly. Traces that contain this marker should be discarded
       * by test infrastructures / pipelines.
       * Deprecated since Android U, where --save-for-bugreport uses
       * non-destructive cloning.
       * </pre>
       *
       * <code>bool seized_for_bugreport = 6;</code>
       * @return Whether the seizedForBugreport field is set.
       */
      public boolean hasSeizedForBugreport() {
        return eventTypeCase_ == 6;
      }
      /**
       * <pre>
       * Emitted if perfetto --save-for-bugreport was invoked while the current
       * tracing session was running and it had the highest bugreport_score. In
       * this case the original consumer will see a nearly empty trace, because
       * the contents are routed onto the bugreport file. This event flags the
       * situation explicitly. Traces that contain this marker should be discarded
       * by test infrastructures / pipelines.
       * Deprecated since Android U, where --save-for-bugreport uses
       * non-destructive cloning.
       * </pre>
       *
       * <code>bool seized_for_bugreport = 6;</code>
       * @return The seizedForBugreport.
       */
      public boolean getSeizedForBugreport() {
        if (eventTypeCase_ == 6) {
          return (java.lang.Boolean) eventType_;
        }
        return false;
      }
      /**
       * <pre>
       * Emitted if perfetto --save-for-bugreport was invoked while the current
       * tracing session was running and it had the highest bugreport_score. In
       * this case the original consumer will see a nearly empty trace, because
       * the contents are routed onto the bugreport file. This event flags the
       * situation explicitly. Traces that contain this marker should be discarded
       * by test infrastructures / pipelines.
       * Deprecated since Android U, where --save-for-bugreport uses
       * non-destructive cloning.
       * </pre>
       *
       * <code>bool seized_for_bugreport = 6;</code>
       * @param value The seizedForBugreport to set.
       * @return This builder for chaining.
       */
      public Builder setSeizedForBugreport(boolean value) {

        eventTypeCase_ = 6;
        eventType_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Emitted if perfetto --save-for-bugreport was invoked while the current
       * tracing session was running and it had the highest bugreport_score. In
       * this case the original consumer will see a nearly empty trace, because
       * the contents are routed onto the bugreport file. This event flags the
       * situation explicitly. Traces that contain this marker should be discarded
       * by test infrastructures / pipelines.
       * Deprecated since Android U, where --save-for-bugreport uses
       * non-destructive cloning.
       * </pre>
       *
       * <code>bool seized_for_bugreport = 6;</code>
       * @return This builder for chaining.
       */
      public Builder clearSeizedForBugreport() {
        if (eventTypeCase_ == 6) {
          eventTypeCase_ = 0;
          eventType_ = null;
          onChanged();
        }
        return this;
      }

      private com.google.protobuf.SingleFieldBuilder<
          perfetto.protos.TracingServiceEventOuterClass.TracingServiceEvent.DataSources, perfetto.protos.TracingServiceEventOuterClass.TracingServiceEvent.DataSources.Builder, perfetto.protos.TracingServiceEventOuterClass.TracingServiceEvent.DataSourcesOrBuilder> slowStartingDataSourcesBuilder_;
      /**
       * <pre>
       * Emitted when not all data sources in all producers reply to a start
       * request after some time.
       * </pre>
       *
       * <code>.perfetto.protos.TracingServiceEvent.DataSources slow_starting_data_sources = 7;</code>
       * @return Whether the slowStartingDataSources field is set.
       */
      @java.lang.Override
      public boolean hasSlowStartingDataSources() {
        return eventTypeCase_ == 7;
      }
      /**
       * <pre>
       * Emitted when not all data sources in all producers reply to a start
       * request after some time.
       * </pre>
       *
       * <code>.perfetto.protos.TracingServiceEvent.DataSources slow_starting_data_sources = 7;</code>
       * @return The slowStartingDataSources.
       */
      @java.lang.Override
      public perfetto.protos.TracingServiceEventOuterClass.TracingServiceEvent.DataSources getSlowStartingDataSources() {
        if (slowStartingDataSourcesBuilder_ == null) {
          if (eventTypeCase_ == 7) {
            return (perfetto.protos.TracingServiceEventOuterClass.TracingServiceEvent.DataSources) eventType_;
          }
          return perfetto.protos.TracingServiceEventOuterClass.TracingServiceEvent.DataSources.getDefaultInstance();
        } else {
          if (eventTypeCase_ == 7) {
            return slowStartingDataSourcesBuilder_.getMessage();
          }
          return perfetto.protos.TracingServiceEventOuterClass.TracingServiceEvent.DataSources.getDefaultInstance();
        }
      }
      /**
       * <pre>
       * Emitted when not all data sources in all producers reply to a start
       * request after some time.
       * </pre>
       *
       * <code>.perfetto.protos.TracingServiceEvent.DataSources slow_starting_data_sources = 7;</code>
       */
      public Builder setSlowStartingDataSources(perfetto.protos.TracingServiceEventOuterClass.TracingServiceEvent.DataSources value) {
        if (slowStartingDataSourcesBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          eventType_ = value;
          onChanged();
        } else {
          slowStartingDataSourcesBuilder_.setMessage(value);
        }
        eventTypeCase_ = 7;
        return this;
      }
      /**
       * <pre>
       * Emitted when not all data sources in all producers reply to a start
       * request after some time.
       * </pre>
       *
       * <code>.perfetto.protos.TracingServiceEvent.DataSources slow_starting_data_sources = 7;</code>
       */
      public Builder setSlowStartingDataSources(
          perfetto.protos.TracingServiceEventOuterClass.TracingServiceEvent.DataSources.Builder builderForValue) {
        if (slowStartingDataSourcesBuilder_ == null) {
          eventType_ = builderForValue.build();
          onChanged();
        } else {
          slowStartingDataSourcesBuilder_.setMessage(builderForValue.build());
        }
        eventTypeCase_ = 7;
        return this;
      }
      /**
       * <pre>
       * Emitted when not all data sources in all producers reply to a start
       * request after some time.
       * </pre>
       *
       * <code>.perfetto.protos.TracingServiceEvent.DataSources slow_starting_data_sources = 7;</code>
       */
      public Builder mergeSlowStartingDataSources(perfetto.protos.TracingServiceEventOuterClass.TracingServiceEvent.DataSources value) {
        if (slowStartingDataSourcesBuilder_ == null) {
          if (eventTypeCase_ == 7 &&
              eventType_ != perfetto.protos.TracingServiceEventOuterClass.TracingServiceEvent.DataSources.getDefaultInstance()) {
            eventType_ = perfetto.protos.TracingServiceEventOuterClass.TracingServiceEvent.DataSources.newBuilder((perfetto.protos.TracingServiceEventOuterClass.TracingServiceEvent.DataSources) eventType_)
                .mergeFrom(value).buildPartial();
          } else {
            eventType_ = value;
          }
          onChanged();
        } else {
          if (eventTypeCase_ == 7) {
            slowStartingDataSourcesBuilder_.mergeFrom(value);
          } else {
            slowStartingDataSourcesBuilder_.setMessage(value);
          }
        }
        eventTypeCase_ = 7;
        return this;
      }
      /**
       * <pre>
       * Emitted when not all data sources in all producers reply to a start
       * request after some time.
       * </pre>
       *
       * <code>.perfetto.protos.TracingServiceEvent.DataSources slow_starting_data_sources = 7;</code>
       */
      public Builder clearSlowStartingDataSources() {
        if (slowStartingDataSourcesBuilder_ == null) {
          if (eventTypeCase_ == 7) {
            eventTypeCase_ = 0;
            eventType_ = null;
            onChanged();
          }
        } else {
          if (eventTypeCase_ == 7) {
            eventTypeCase_ = 0;
            eventType_ = null;
          }
          slowStartingDataSourcesBuilder_.clear();
        }
        return this;
      }
      /**
       * <pre>
       * Emitted when not all data sources in all producers reply to a start
       * request after some time.
       * </pre>
       *
       * <code>.perfetto.protos.TracingServiceEvent.DataSources slow_starting_data_sources = 7;</code>
       */
      public perfetto.protos.TracingServiceEventOuterClass.TracingServiceEvent.DataSources.Builder getSlowStartingDataSourcesBuilder() {
        return getSlowStartingDataSourcesFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       * Emitted when not all data sources in all producers reply to a start
       * request after some time.
       * </pre>
       *
       * <code>.perfetto.protos.TracingServiceEvent.DataSources slow_starting_data_sources = 7;</code>
       */
      @java.lang.Override
      public perfetto.protos.TracingServiceEventOuterClass.TracingServiceEvent.DataSourcesOrBuilder getSlowStartingDataSourcesOrBuilder() {
        if ((eventTypeCase_ == 7) && (slowStartingDataSourcesBuilder_ != null)) {
          return slowStartingDataSourcesBuilder_.getMessageOrBuilder();
        } else {
          if (eventTypeCase_ == 7) {
            return (perfetto.protos.TracingServiceEventOuterClass.TracingServiceEvent.DataSources) eventType_;
          }
          return perfetto.protos.TracingServiceEventOuterClass.TracingServiceEvent.DataSources.getDefaultInstance();
        }
      }
      /**
       * <pre>
       * Emitted when not all data sources in all producers reply to a start
       * request after some time.
       * </pre>
       *
       * <code>.perfetto.protos.TracingServiceEvent.DataSources slow_starting_data_sources = 7;</code>
       */
      private com.google.protobuf.SingleFieldBuilder<
          perfetto.protos.TracingServiceEventOuterClass.TracingServiceEvent.DataSources, perfetto.protos.TracingServiceEventOuterClass.TracingServiceEvent.DataSources.Builder, perfetto.protos.TracingServiceEventOuterClass.TracingServiceEvent.DataSourcesOrBuilder> 
          getSlowStartingDataSourcesFieldBuilder() {
        if (slowStartingDataSourcesBuilder_ == null) {
          if (!(eventTypeCase_ == 7)) {
            eventType_ = perfetto.protos.TracingServiceEventOuterClass.TracingServiceEvent.DataSources.getDefaultInstance();
          }
          slowStartingDataSourcesBuilder_ = new com.google.protobuf.SingleFieldBuilder<
              perfetto.protos.TracingServiceEventOuterClass.TracingServiceEvent.DataSources, perfetto.protos.TracingServiceEventOuterClass.TracingServiceEvent.DataSources.Builder, perfetto.protos.TracingServiceEventOuterClass.TracingServiceEvent.DataSourcesOrBuilder>(
                  (perfetto.protos.TracingServiceEventOuterClass.TracingServiceEvent.DataSources) eventType_,
                  getParentForChildren(),
                  isClean());
          eventType_ = null;
        }
        eventTypeCase_ = 7;
        onChanged();
        return slowStartingDataSourcesBuilder_;
      }

      private com.google.protobuf.SingleFieldBuilder<
          perfetto.protos.TracingServiceEventOuterClass.TracingServiceEvent.DataSources, perfetto.protos.TracingServiceEventOuterClass.TracingServiceEvent.DataSources.Builder, perfetto.protos.TracingServiceEventOuterClass.TracingServiceEvent.DataSourcesOrBuilder> lastFlushSlowDataSourcesBuilder_;
      /**
       * <pre>
       * Emitted when the last flush request has failed. Lists data sources that
       * did not reply on time.
       * </pre>
       *
       * <code>.perfetto.protos.TracingServiceEvent.DataSources last_flush_slow_data_sources = 8;</code>
       * @return Whether the lastFlushSlowDataSources field is set.
       */
      @java.lang.Override
      public boolean hasLastFlushSlowDataSources() {
        return eventTypeCase_ == 8;
      }
      /**
       * <pre>
       * Emitted when the last flush request has failed. Lists data sources that
       * did not reply on time.
       * </pre>
       *
       * <code>.perfetto.protos.TracingServiceEvent.DataSources last_flush_slow_data_sources = 8;</code>
       * @return The lastFlushSlowDataSources.
       */
      @java.lang.Override
      public perfetto.protos.TracingServiceEventOuterClass.TracingServiceEvent.DataSources getLastFlushSlowDataSources() {
        if (lastFlushSlowDataSourcesBuilder_ == null) {
          if (eventTypeCase_ == 8) {
            return (perfetto.protos.TracingServiceEventOuterClass.TracingServiceEvent.DataSources) eventType_;
          }
          return perfetto.protos.TracingServiceEventOuterClass.TracingServiceEvent.DataSources.getDefaultInstance();
        } else {
          if (eventTypeCase_ == 8) {
            return lastFlushSlowDataSourcesBuilder_.getMessage();
          }
          return perfetto.protos.TracingServiceEventOuterClass.TracingServiceEvent.DataSources.getDefaultInstance();
        }
      }
      /**
       * <pre>
       * Emitted when the last flush request has failed. Lists data sources that
       * did not reply on time.
       * </pre>
       *
       * <code>.perfetto.protos.TracingServiceEvent.DataSources last_flush_slow_data_sources = 8;</code>
       */
      public Builder setLastFlushSlowDataSources(perfetto.protos.TracingServiceEventOuterClass.TracingServiceEvent.DataSources value) {
        if (lastFlushSlowDataSourcesBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          eventType_ = value;
          onChanged();
        } else {
          lastFlushSlowDataSourcesBuilder_.setMessage(value);
        }
        eventTypeCase_ = 8;
        return this;
      }
      /**
       * <pre>
       * Emitted when the last flush request has failed. Lists data sources that
       * did not reply on time.
       * </pre>
       *
       * <code>.perfetto.protos.TracingServiceEvent.DataSources last_flush_slow_data_sources = 8;</code>
       */
      public Builder setLastFlushSlowDataSources(
          perfetto.protos.TracingServiceEventOuterClass.TracingServiceEvent.DataSources.Builder builderForValue) {
        if (lastFlushSlowDataSourcesBuilder_ == null) {
          eventType_ = builderForValue.build();
          onChanged();
        } else {
          lastFlushSlowDataSourcesBuilder_.setMessage(builderForValue.build());
        }
        eventTypeCase_ = 8;
        return this;
      }
      /**
       * <pre>
       * Emitted when the last flush request has failed. Lists data sources that
       * did not reply on time.
       * </pre>
       *
       * <code>.perfetto.protos.TracingServiceEvent.DataSources last_flush_slow_data_sources = 8;</code>
       */
      public Builder mergeLastFlushSlowDataSources(perfetto.protos.TracingServiceEventOuterClass.TracingServiceEvent.DataSources value) {
        if (lastFlushSlowDataSourcesBuilder_ == null) {
          if (eventTypeCase_ == 8 &&
              eventType_ != perfetto.protos.TracingServiceEventOuterClass.TracingServiceEvent.DataSources.getDefaultInstance()) {
            eventType_ = perfetto.protos.TracingServiceEventOuterClass.TracingServiceEvent.DataSources.newBuilder((perfetto.protos.TracingServiceEventOuterClass.TracingServiceEvent.DataSources) eventType_)
                .mergeFrom(value).buildPartial();
          } else {
            eventType_ = value;
          }
          onChanged();
        } else {
          if (eventTypeCase_ == 8) {
            lastFlushSlowDataSourcesBuilder_.mergeFrom(value);
          } else {
            lastFlushSlowDataSourcesBuilder_.setMessage(value);
          }
        }
        eventTypeCase_ = 8;
        return this;
      }
      /**
       * <pre>
       * Emitted when the last flush request has failed. Lists data sources that
       * did not reply on time.
       * </pre>
       *
       * <code>.perfetto.protos.TracingServiceEvent.DataSources last_flush_slow_data_sources = 8;</code>
       */
      public Builder clearLastFlushSlowDataSources() {
        if (lastFlushSlowDataSourcesBuilder_ == null) {
          if (eventTypeCase_ == 8) {
            eventTypeCase_ = 0;
            eventType_ = null;
            onChanged();
          }
        } else {
          if (eventTypeCase_ == 8) {
            eventTypeCase_ = 0;
            eventType_ = null;
          }
          lastFlushSlowDataSourcesBuilder_.clear();
        }
        return this;
      }
      /**
       * <pre>
       * Emitted when the last flush request has failed. Lists data sources that
       * did not reply on time.
       * </pre>
       *
       * <code>.perfetto.protos.TracingServiceEvent.DataSources last_flush_slow_data_sources = 8;</code>
       */
      public perfetto.protos.TracingServiceEventOuterClass.TracingServiceEvent.DataSources.Builder getLastFlushSlowDataSourcesBuilder() {
        return getLastFlushSlowDataSourcesFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       * Emitted when the last flush request has failed. Lists data sources that
       * did not reply on time.
       * </pre>
       *
       * <code>.perfetto.protos.TracingServiceEvent.DataSources last_flush_slow_data_sources = 8;</code>
       */
      @java.lang.Override
      public perfetto.protos.TracingServiceEventOuterClass.TracingServiceEvent.DataSourcesOrBuilder getLastFlushSlowDataSourcesOrBuilder() {
        if ((eventTypeCase_ == 8) && (lastFlushSlowDataSourcesBuilder_ != null)) {
          return lastFlushSlowDataSourcesBuilder_.getMessageOrBuilder();
        } else {
          if (eventTypeCase_ == 8) {
            return (perfetto.protos.TracingServiceEventOuterClass.TracingServiceEvent.DataSources) eventType_;
          }
          return perfetto.protos.TracingServiceEventOuterClass.TracingServiceEvent.DataSources.getDefaultInstance();
        }
      }
      /**
       * <pre>
       * Emitted when the last flush request has failed. Lists data sources that
       * did not reply on time.
       * </pre>
       *
       * <code>.perfetto.protos.TracingServiceEvent.DataSources last_flush_slow_data_sources = 8;</code>
       */
      private com.google.protobuf.SingleFieldBuilder<
          perfetto.protos.TracingServiceEventOuterClass.TracingServiceEvent.DataSources, perfetto.protos.TracingServiceEventOuterClass.TracingServiceEvent.DataSources.Builder, perfetto.protos.TracingServiceEventOuterClass.TracingServiceEvent.DataSourcesOrBuilder> 
          getLastFlushSlowDataSourcesFieldBuilder() {
        if (lastFlushSlowDataSourcesBuilder_ == null) {
          if (!(eventTypeCase_ == 8)) {
            eventType_ = perfetto.protos.TracingServiceEventOuterClass.TracingServiceEvent.DataSources.getDefaultInstance();
          }
          lastFlushSlowDataSourcesBuilder_ = new com.google.protobuf.SingleFieldBuilder<
              perfetto.protos.TracingServiceEventOuterClass.TracingServiceEvent.DataSources, perfetto.protos.TracingServiceEventOuterClass.TracingServiceEvent.DataSources.Builder, perfetto.protos.TracingServiceEventOuterClass.TracingServiceEvent.DataSourcesOrBuilder>(
                  (perfetto.protos.TracingServiceEventOuterClass.TracingServiceEvent.DataSources) eventType_,
                  getParentForChildren(),
                  isClean());
          eventType_ = null;
        }
        eventTypeCase_ = 8;
        onChanged();
        return lastFlushSlowDataSourcesBuilder_;
      }

      // @@protoc_insertion_point(builder_scope:perfetto.protos.TracingServiceEvent)
    }

    // @@protoc_insertion_point(class_scope:perfetto.protos.TracingServiceEvent)
    private static final perfetto.protos.TracingServiceEventOuterClass.TracingServiceEvent DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new perfetto.protos.TracingServiceEventOuterClass.TracingServiceEvent();
    }

    public static perfetto.protos.TracingServiceEventOuterClass.TracingServiceEvent getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<TracingServiceEvent>
        PARSER = new com.google.protobuf.AbstractParser<TracingServiceEvent>() {
      @java.lang.Override
      public TracingServiceEvent parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        Builder builder = newBuilder();
        try {
          builder.mergeFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.setUnfinishedMessage(builder.buildPartial());
        } catch (com.google.protobuf.UninitializedMessageException e) {
          throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
        } catch (java.io.IOException e) {
          throw new com.google.protobuf.InvalidProtocolBufferException(e)
              .setUnfinishedMessage(builder.buildPartial());
        }
        return builder.buildPartial();
      }
    };

    public static com.google.protobuf.Parser<TracingServiceEvent> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<TracingServiceEvent> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public perfetto.protos.TracingServiceEventOuterClass.TracingServiceEvent getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_perfetto_protos_TracingServiceEvent_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_perfetto_protos_TracingServiceEvent_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_perfetto_protos_TracingServiceEvent_DataSources_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_perfetto_protos_TracingServiceEvent_DataSources_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_perfetto_protos_TracingServiceEvent_DataSources_DataSource_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_perfetto_protos_TracingServiceEvent_DataSources_DataSource_fieldAccessorTable;

  public static com.google.protobuf.Descriptors.FileDescriptor
      getDescriptor() {
    return descriptor;
  }
  private static  com.google.protobuf.Descriptors.FileDescriptor
      descriptor;
  static {
    java.lang.String[] descriptorData = {
      "\n:protos/perfetto/trace/perfetto/tracing" +
      "_service_event.proto\022\017perfetto.protos\"\330\004" +
      "\n\023TracingServiceEvent\022\031\n\017tracing_started" +
      "\030\002 \001(\010H\000\022\"\n\030all_data_sources_started\030\001 \001" +
      "(\010H\000\022\027\n\rflush_started\030\t \001(\010H\000\022\"\n\030all_dat" +
      "a_sources_flushed\030\003 \001(\010H\000\022(\n\036read_tracin" +
      "g_buffers_completed\030\004 \001(\010H\000\022\032\n\020tracing_d" +
      "isabled\030\005 \001(\010H\000\022\036\n\024seized_for_bugreport\030" +
      "\006 \001(\010H\000\022V\n\032slow_starting_data_sources\030\007 " +
      "\001(\01320.perfetto.protos.TracingServiceEven" +
      "t.DataSourcesH\000\022X\n\034last_flush_slow_data_" +
      "sources\030\010 \001(\01320.perfetto.protos.TracingS" +
      "erviceEvent.DataSourcesH\000\032\236\001\n\013DataSource" +
      "s\022P\n\013data_source\030\001 \003(\0132;.perfetto.protos" +
      ".TracingServiceEvent.DataSources.DataSou" +
      "rce\032=\n\nDataSource\022\025\n\rproducer_name\030\001 \001(\t" +
      "\022\030\n\020data_source_name\030\002 \001(\tB\014\n\nevent_type"
    };
    descriptor = com.google.protobuf.Descriptors.FileDescriptor
      .internalBuildGeneratedFileFrom(descriptorData,
        new com.google.protobuf.Descriptors.FileDescriptor[] {
        });
    internal_static_perfetto_protos_TracingServiceEvent_descriptor =
      getDescriptor().getMessageTypes().get(0);
    internal_static_perfetto_protos_TracingServiceEvent_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessage.FieldAccessorTable(
        internal_static_perfetto_protos_TracingServiceEvent_descriptor,
        new java.lang.String[] { "TracingStarted", "AllDataSourcesStarted", "FlushStarted", "AllDataSourcesFlushed", "ReadTracingBuffersCompleted", "TracingDisabled", "SeizedForBugreport", "SlowStartingDataSources", "LastFlushSlowDataSources", "EventType", });
    internal_static_perfetto_protos_TracingServiceEvent_DataSources_descriptor =
      internal_static_perfetto_protos_TracingServiceEvent_descriptor.getNestedTypes().get(0);
    internal_static_perfetto_protos_TracingServiceEvent_DataSources_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessage.FieldAccessorTable(
        internal_static_perfetto_protos_TracingServiceEvent_DataSources_descriptor,
        new java.lang.String[] { "DataSource", });
    internal_static_perfetto_protos_TracingServiceEvent_DataSources_DataSource_descriptor =
      internal_static_perfetto_protos_TracingServiceEvent_DataSources_descriptor.getNestedTypes().get(0);
    internal_static_perfetto_protos_TracingServiceEvent_DataSources_DataSource_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessage.FieldAccessorTable(
        internal_static_perfetto_protos_TracingServiceEvent_DataSources_DataSource_descriptor,
        new java.lang.String[] { "ProducerName", "DataSourceName", });
    descriptor.resolveAllFeaturesImmutable();
  }

  // @@protoc_insertion_point(outer_class_scope)
}
