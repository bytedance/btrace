// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: protos/perfetto/trace/etw/etw.proto
// Protobuf Java Version: 4.29.3

package perfetto.protos;

public final class Etw {
  private Etw() {}
  static {
    com.google.protobuf.RuntimeVersion.validateProtobufGencodeVersion(
      com.google.protobuf.RuntimeVersion.RuntimeDomain.PUBLIC,
      /* major= */ 4,
      /* minor= */ 29,
      /* patch= */ 3,
      /* suffix= */ "",
      Etw.class.getName());
  }
  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistryLite registry) {
  }

  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistry registry) {
    registerAllExtensions(
        (com.google.protobuf.ExtensionRegistryLite) registry);
  }
  public interface CSwitchEtwEventOrBuilder extends
      // @@protoc_insertion_point(interface_extends:perfetto.protos.CSwitchEtwEvent)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <pre>
     * New thread ID after the switch.
     * </pre>
     *
     * <code>optional uint32 new_thread_id = 1;</code>
     * @return Whether the newThreadId field is set.
     */
    boolean hasNewThreadId();
    /**
     * <pre>
     * New thread ID after the switch.
     * </pre>
     *
     * <code>optional uint32 new_thread_id = 1;</code>
     * @return The newThreadId.
     */
    int getNewThreadId();

    /**
     * <pre>
     * Previous thread ID.
     * </pre>
     *
     * <code>optional uint32 old_thread_id = 2;</code>
     * @return Whether the oldThreadId field is set.
     */
    boolean hasOldThreadId();
    /**
     * <pre>
     * Previous thread ID.
     * </pre>
     *
     * <code>optional uint32 old_thread_id = 2;</code>
     * @return The oldThreadId.
     */
    int getOldThreadId();

    /**
     * <pre>
     * Thread priority of the new thread.
     * </pre>
     *
     * <code>optional sint32 new_thread_priority = 3;</code>
     * @return Whether the newThreadPriority field is set.
     */
    boolean hasNewThreadPriority();
    /**
     * <pre>
     * Thread priority of the new thread.
     * </pre>
     *
     * <code>optional sint32 new_thread_priority = 3;</code>
     * @return The newThreadPriority.
     */
    int getNewThreadPriority();

    /**
     * <pre>
     * Thread priority of the previous thread.
     * </pre>
     *
     * <code>optional sint32 old_thread_priority = 4;</code>
     * @return Whether the oldThreadPriority field is set.
     */
    boolean hasOldThreadPriority();
    /**
     * <pre>
     * Thread priority of the previous thread.
     * </pre>
     *
     * <code>optional sint32 old_thread_priority = 4;</code>
     * @return The oldThreadPriority.
     */
    int getOldThreadPriority();

    /**
     * <pre>
     * The index of the C-state that was last used by the processor. A value of 0
     * represents the lightest idle state with higher values representing deeper
     * C-states.
     * </pre>
     *
     * <code>optional uint32 previous_c_state = 5;</code>
     * @return Whether the previousCState field is set.
     */
    boolean hasPreviousCState();
    /**
     * <pre>
     * The index of the C-state that was last used by the processor. A value of 0
     * represents the lightest idle state with higher values representing deeper
     * C-states.
     * </pre>
     *
     * <code>optional uint32 previous_c_state = 5;</code>
     * @return The previousCState.
     */
    int getPreviousCState();

    /**
     * <code>optional .perfetto.protos.CSwitchEtwEvent.OldThreadWaitReason old_thread_wait_reason = 6;</code>
     * @return Whether the oldThreadWaitReason field is set.
     */
    boolean hasOldThreadWaitReason();
    /**
     * <code>optional .perfetto.protos.CSwitchEtwEvent.OldThreadWaitReason old_thread_wait_reason = 6;</code>
     * @return The oldThreadWaitReason.
     */
    perfetto.protos.Etw.CSwitchEtwEvent.OldThreadWaitReason getOldThreadWaitReason();

    /**
     * <code>optional .perfetto.protos.CSwitchEtwEvent.OldThreadWaitMode old_thread_wait_mode = 7;</code>
     * @return Whether the oldThreadWaitMode field is set.
     */
    boolean hasOldThreadWaitMode();
    /**
     * <code>optional .perfetto.protos.CSwitchEtwEvent.OldThreadWaitMode old_thread_wait_mode = 7;</code>
     * @return The oldThreadWaitMode.
     */
    perfetto.protos.Etw.CSwitchEtwEvent.OldThreadWaitMode getOldThreadWaitMode();

    /**
     * <code>optional .perfetto.protos.CSwitchEtwEvent.OldThreadState old_thread_state = 8;</code>
     * @return Whether the oldThreadState field is set.
     */
    boolean hasOldThreadState();
    /**
     * <code>optional .perfetto.protos.CSwitchEtwEvent.OldThreadState old_thread_state = 8;</code>
     * @return The oldThreadState.
     */
    perfetto.protos.Etw.CSwitchEtwEvent.OldThreadState getOldThreadState();

    /**
     * <pre>
     * Ideal wait time of the previous thread.
     * </pre>
     *
     * <code>optional sint32 old_thread_wait_ideal_processor = 9;</code>
     * @return Whether the oldThreadWaitIdealProcessor field is set.
     */
    boolean hasOldThreadWaitIdealProcessor();
    /**
     * <pre>
     * Ideal wait time of the previous thread.
     * </pre>
     *
     * <code>optional sint32 old_thread_wait_ideal_processor = 9;</code>
     * @return The oldThreadWaitIdealProcessor.
     */
    int getOldThreadWaitIdealProcessor();

    /**
     * <pre>
     * Wait time for the new thread.
     * </pre>
     *
     * <code>optional uint32 new_thread_wait_time = 10;</code>
     * @return Whether the newThreadWaitTime field is set.
     */
    boolean hasNewThreadWaitTime();
    /**
     * <pre>
     * Wait time for the new thread.
     * </pre>
     *
     * <code>optional uint32 new_thread_wait_time = 10;</code>
     * @return The newThreadWaitTime.
     */
    int getNewThreadWaitTime();
  }
  /**
   * <pre>
   * Proto definition based on the Thread_v2 CSwitch class definition
   * See: https://learn.microsoft.com/en-us/windows/win32/etw/cswitch
   * </pre>
   *
   * Protobuf type {@code perfetto.protos.CSwitchEtwEvent}
   */
  public static final class CSwitchEtwEvent extends
      com.google.protobuf.GeneratedMessage implements
      // @@protoc_insertion_point(message_implements:perfetto.protos.CSwitchEtwEvent)
      CSwitchEtwEventOrBuilder {
  private static final long serialVersionUID = 0L;
    static {
      com.google.protobuf.RuntimeVersion.validateProtobufGencodeVersion(
        com.google.protobuf.RuntimeVersion.RuntimeDomain.PUBLIC,
        /* major= */ 4,
        /* minor= */ 29,
        /* patch= */ 3,
        /* suffix= */ "",
        CSwitchEtwEvent.class.getName());
    }
    // Use CSwitchEtwEvent.newBuilder() to construct.
    private CSwitchEtwEvent(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
    }
    private CSwitchEtwEvent() {
      oldThreadWaitReason_ = 0;
      oldThreadWaitMode_ = 0;
      oldThreadState_ = 0;
    }

    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return perfetto.protos.Etw.internal_static_perfetto_protos_CSwitchEtwEvent_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return perfetto.protos.Etw.internal_static_perfetto_protos_CSwitchEtwEvent_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              perfetto.protos.Etw.CSwitchEtwEvent.class, perfetto.protos.Etw.CSwitchEtwEvent.Builder.class);
    }

    /**
     * <pre>
     * Wait reason for the previous thread. The ordering is important as based on
     * the OldThreadWaitReason definition from the link above. The following are
     * the possible values:
     * </pre>
     *
     * Protobuf enum {@code perfetto.protos.CSwitchEtwEvent.OldThreadWaitReason}
     */
    public enum OldThreadWaitReason
        implements com.google.protobuf.ProtocolMessageEnum {
      /**
       * <code>EXECUTIVE = 0;</code>
       */
      EXECUTIVE(0),
      /**
       * <code>FREE_PAGE = 1;</code>
       */
      FREE_PAGE(1),
      /**
       * <code>PAGE_IN = 2;</code>
       */
      PAGE_IN(2),
      /**
       * <code>POOL_ALLOCATION = 3;</code>
       */
      POOL_ALLOCATION(3),
      /**
       * <code>DELAY_EXECUTION = 4;</code>
       */
      DELAY_EXECUTION(4),
      /**
       * <code>SUSPEND = 5;</code>
       */
      SUSPEND(5),
      /**
       * <code>USER_REQUEST = 6;</code>
       */
      USER_REQUEST(6),
      /**
       * <code>WR_EXECUTIVE = 7;</code>
       */
      WR_EXECUTIVE(7),
      /**
       * <code>WR_FREE_PAGE = 8;</code>
       */
      WR_FREE_PAGE(8),
      /**
       * <code>WR_PAGE_IN = 9;</code>
       */
      WR_PAGE_IN(9),
      /**
       * <code>WR_POOL_ALLOCATION = 10;</code>
       */
      WR_POOL_ALLOCATION(10),
      /**
       * <code>WR_DELAY_EXECUTION = 11;</code>
       */
      WR_DELAY_EXECUTION(11),
      /**
       * <code>WR_SUSPENDED = 12;</code>
       */
      WR_SUSPENDED(12),
      /**
       * <code>WR_USER_REQUEST = 13;</code>
       */
      WR_USER_REQUEST(13),
      /**
       * <code>WR_EVENT_PAIR = 14;</code>
       */
      WR_EVENT_PAIR(14),
      /**
       * <code>WR_QUEUE = 15;</code>
       */
      WR_QUEUE(15),
      /**
       * <code>WR_LPC_RECEIVER = 16;</code>
       */
      WR_LPC_RECEIVER(16),
      /**
       * <code>WR_LPC_REPLY = 17;</code>
       */
      WR_LPC_REPLY(17),
      /**
       * <code>WR_VIRTUAL_MEMORY = 18;</code>
       */
      WR_VIRTUAL_MEMORY(18),
      /**
       * <code>WR_PAGE_OUT = 19;</code>
       */
      WR_PAGE_OUT(19),
      /**
       * <code>WR_RENDEZ_VOUS = 20;</code>
       */
      WR_RENDEZ_VOUS(20),
      /**
       * <code>WR_KEYED_EVENT = 21;</code>
       */
      WR_KEYED_EVENT(21),
      /**
       * <code>WR_TERMINATED = 22;</code>
       */
      WR_TERMINATED(22),
      /**
       * <code>WR_PROCESS_IN_SWAP = 23;</code>
       */
      WR_PROCESS_IN_SWAP(23),
      /**
       * <code>WR_CPU_RATE_CONTROL = 24;</code>
       */
      WR_CPU_RATE_CONTROL(24),
      /**
       * <code>WR_CALLOUT_STACK = 25;</code>
       */
      WR_CALLOUT_STACK(25),
      /**
       * <code>WR_KERNEL = 26;</code>
       */
      WR_KERNEL(26),
      /**
       * <code>WR_RESOURCE = 27;</code>
       */
      WR_RESOURCE(27),
      /**
       * <code>WR_PUSH_LOCK = 28;</code>
       */
      WR_PUSH_LOCK(28),
      /**
       * <code>WR_MUTEX = 29;</code>
       */
      WR_MUTEX(29),
      /**
       * <code>WR_QUANTUM_END = 30;</code>
       */
      WR_QUANTUM_END(30),
      /**
       * <code>WR_DISPATCH_INT = 31;</code>
       */
      WR_DISPATCH_INT(31),
      /**
       * <code>WR_PREEMPTED = 32;</code>
       */
      WR_PREEMPTED(32),
      /**
       * <code>WR_YIELD_EXECUTION = 33;</code>
       */
      WR_YIELD_EXECUTION(33),
      /**
       * <code>WR_FAST_MUTEX = 34;</code>
       */
      WR_FAST_MUTEX(34),
      /**
       * <code>WR_GUARD_MUTEX = 35;</code>
       */
      WR_GUARD_MUTEX(35),
      /**
       * <code>WR_RUNDOWN = 36;</code>
       */
      WR_RUNDOWN(36),
      /**
       * <code>MAXIMUM_WAIT_REASON = 37;</code>
       */
      MAXIMUM_WAIT_REASON(37),
      ;

      static {
        com.google.protobuf.RuntimeVersion.validateProtobufGencodeVersion(
          com.google.protobuf.RuntimeVersion.RuntimeDomain.PUBLIC,
          /* major= */ 4,
          /* minor= */ 29,
          /* patch= */ 3,
          /* suffix= */ "",
          OldThreadWaitReason.class.getName());
      }
      /**
       * <code>EXECUTIVE = 0;</code>
       */
      public static final int EXECUTIVE_VALUE = 0;
      /**
       * <code>FREE_PAGE = 1;</code>
       */
      public static final int FREE_PAGE_VALUE = 1;
      /**
       * <code>PAGE_IN = 2;</code>
       */
      public static final int PAGE_IN_VALUE = 2;
      /**
       * <code>POOL_ALLOCATION = 3;</code>
       */
      public static final int POOL_ALLOCATION_VALUE = 3;
      /**
       * <code>DELAY_EXECUTION = 4;</code>
       */
      public static final int DELAY_EXECUTION_VALUE = 4;
      /**
       * <code>SUSPEND = 5;</code>
       */
      public static final int SUSPEND_VALUE = 5;
      /**
       * <code>USER_REQUEST = 6;</code>
       */
      public static final int USER_REQUEST_VALUE = 6;
      /**
       * <code>WR_EXECUTIVE = 7;</code>
       */
      public static final int WR_EXECUTIVE_VALUE = 7;
      /**
       * <code>WR_FREE_PAGE = 8;</code>
       */
      public static final int WR_FREE_PAGE_VALUE = 8;
      /**
       * <code>WR_PAGE_IN = 9;</code>
       */
      public static final int WR_PAGE_IN_VALUE = 9;
      /**
       * <code>WR_POOL_ALLOCATION = 10;</code>
       */
      public static final int WR_POOL_ALLOCATION_VALUE = 10;
      /**
       * <code>WR_DELAY_EXECUTION = 11;</code>
       */
      public static final int WR_DELAY_EXECUTION_VALUE = 11;
      /**
       * <code>WR_SUSPENDED = 12;</code>
       */
      public static final int WR_SUSPENDED_VALUE = 12;
      /**
       * <code>WR_USER_REQUEST = 13;</code>
       */
      public static final int WR_USER_REQUEST_VALUE = 13;
      /**
       * <code>WR_EVENT_PAIR = 14;</code>
       */
      public static final int WR_EVENT_PAIR_VALUE = 14;
      /**
       * <code>WR_QUEUE = 15;</code>
       */
      public static final int WR_QUEUE_VALUE = 15;
      /**
       * <code>WR_LPC_RECEIVER = 16;</code>
       */
      public static final int WR_LPC_RECEIVER_VALUE = 16;
      /**
       * <code>WR_LPC_REPLY = 17;</code>
       */
      public static final int WR_LPC_REPLY_VALUE = 17;
      /**
       * <code>WR_VIRTUAL_MEMORY = 18;</code>
       */
      public static final int WR_VIRTUAL_MEMORY_VALUE = 18;
      /**
       * <code>WR_PAGE_OUT = 19;</code>
       */
      public static final int WR_PAGE_OUT_VALUE = 19;
      /**
       * <code>WR_RENDEZ_VOUS = 20;</code>
       */
      public static final int WR_RENDEZ_VOUS_VALUE = 20;
      /**
       * <code>WR_KEYED_EVENT = 21;</code>
       */
      public static final int WR_KEYED_EVENT_VALUE = 21;
      /**
       * <code>WR_TERMINATED = 22;</code>
       */
      public static final int WR_TERMINATED_VALUE = 22;
      /**
       * <code>WR_PROCESS_IN_SWAP = 23;</code>
       */
      public static final int WR_PROCESS_IN_SWAP_VALUE = 23;
      /**
       * <code>WR_CPU_RATE_CONTROL = 24;</code>
       */
      public static final int WR_CPU_RATE_CONTROL_VALUE = 24;
      /**
       * <code>WR_CALLOUT_STACK = 25;</code>
       */
      public static final int WR_CALLOUT_STACK_VALUE = 25;
      /**
       * <code>WR_KERNEL = 26;</code>
       */
      public static final int WR_KERNEL_VALUE = 26;
      /**
       * <code>WR_RESOURCE = 27;</code>
       */
      public static final int WR_RESOURCE_VALUE = 27;
      /**
       * <code>WR_PUSH_LOCK = 28;</code>
       */
      public static final int WR_PUSH_LOCK_VALUE = 28;
      /**
       * <code>WR_MUTEX = 29;</code>
       */
      public static final int WR_MUTEX_VALUE = 29;
      /**
       * <code>WR_QUANTUM_END = 30;</code>
       */
      public static final int WR_QUANTUM_END_VALUE = 30;
      /**
       * <code>WR_DISPATCH_INT = 31;</code>
       */
      public static final int WR_DISPATCH_INT_VALUE = 31;
      /**
       * <code>WR_PREEMPTED = 32;</code>
       */
      public static final int WR_PREEMPTED_VALUE = 32;
      /**
       * <code>WR_YIELD_EXECUTION = 33;</code>
       */
      public static final int WR_YIELD_EXECUTION_VALUE = 33;
      /**
       * <code>WR_FAST_MUTEX = 34;</code>
       */
      public static final int WR_FAST_MUTEX_VALUE = 34;
      /**
       * <code>WR_GUARD_MUTEX = 35;</code>
       */
      public static final int WR_GUARD_MUTEX_VALUE = 35;
      /**
       * <code>WR_RUNDOWN = 36;</code>
       */
      public static final int WR_RUNDOWN_VALUE = 36;
      /**
       * <code>MAXIMUM_WAIT_REASON = 37;</code>
       */
      public static final int MAXIMUM_WAIT_REASON_VALUE = 37;


      public final int getNumber() {
        return value;
      }

      /**
       * @param value The numeric wire value of the corresponding enum entry.
       * @return The enum associated with the given numeric wire value.
       * @deprecated Use {@link #forNumber(int)} instead.
       */
      @java.lang.Deprecated
      public static OldThreadWaitReason valueOf(int value) {
        return forNumber(value);
      }

      /**
       * @param value The numeric wire value of the corresponding enum entry.
       * @return The enum associated with the given numeric wire value.
       */
      public static OldThreadWaitReason forNumber(int value) {
        switch (value) {
          case 0: return EXECUTIVE;
          case 1: return FREE_PAGE;
          case 2: return PAGE_IN;
          case 3: return POOL_ALLOCATION;
          case 4: return DELAY_EXECUTION;
          case 5: return SUSPEND;
          case 6: return USER_REQUEST;
          case 7: return WR_EXECUTIVE;
          case 8: return WR_FREE_PAGE;
          case 9: return WR_PAGE_IN;
          case 10: return WR_POOL_ALLOCATION;
          case 11: return WR_DELAY_EXECUTION;
          case 12: return WR_SUSPENDED;
          case 13: return WR_USER_REQUEST;
          case 14: return WR_EVENT_PAIR;
          case 15: return WR_QUEUE;
          case 16: return WR_LPC_RECEIVER;
          case 17: return WR_LPC_REPLY;
          case 18: return WR_VIRTUAL_MEMORY;
          case 19: return WR_PAGE_OUT;
          case 20: return WR_RENDEZ_VOUS;
          case 21: return WR_KEYED_EVENT;
          case 22: return WR_TERMINATED;
          case 23: return WR_PROCESS_IN_SWAP;
          case 24: return WR_CPU_RATE_CONTROL;
          case 25: return WR_CALLOUT_STACK;
          case 26: return WR_KERNEL;
          case 27: return WR_RESOURCE;
          case 28: return WR_PUSH_LOCK;
          case 29: return WR_MUTEX;
          case 30: return WR_QUANTUM_END;
          case 31: return WR_DISPATCH_INT;
          case 32: return WR_PREEMPTED;
          case 33: return WR_YIELD_EXECUTION;
          case 34: return WR_FAST_MUTEX;
          case 35: return WR_GUARD_MUTEX;
          case 36: return WR_RUNDOWN;
          case 37: return MAXIMUM_WAIT_REASON;
          default: return null;
        }
      }

      public static com.google.protobuf.Internal.EnumLiteMap<OldThreadWaitReason>
          internalGetValueMap() {
        return internalValueMap;
      }
      private static final com.google.protobuf.Internal.EnumLiteMap<
          OldThreadWaitReason> internalValueMap =
            new com.google.protobuf.Internal.EnumLiteMap<OldThreadWaitReason>() {
              public OldThreadWaitReason findValueByNumber(int number) {
                return OldThreadWaitReason.forNumber(number);
              }
            };

      public final com.google.protobuf.Descriptors.EnumValueDescriptor
          getValueDescriptor() {
        return getDescriptor().getValues().get(ordinal());
      }
      public final com.google.protobuf.Descriptors.EnumDescriptor
          getDescriptorForType() {
        return getDescriptor();
      }
      public static final com.google.protobuf.Descriptors.EnumDescriptor
          getDescriptor() {
        return perfetto.protos.Etw.CSwitchEtwEvent.getDescriptor().getEnumTypes().get(0);
      }

      private static final OldThreadWaitReason[] VALUES = values();

      public static OldThreadWaitReason valueOf(
          com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
        if (desc.getType() != getDescriptor()) {
          throw new java.lang.IllegalArgumentException(
            "EnumValueDescriptor is not for this type.");
        }
        return VALUES[desc.getIndex()];
      }

      private final int value;

      private OldThreadWaitReason(int value) {
        this.value = value;
      }

      // @@protoc_insertion_point(enum_scope:perfetto.protos.CSwitchEtwEvent.OldThreadWaitReason)
    }

    /**
     * <pre>
     * Wait mode for the previous thread. The ordering is important as based on
     * the OldThreadWaitMode definition from the link above. The following are the
     * possible values:
     * </pre>
     *
     * Protobuf enum {@code perfetto.protos.CSwitchEtwEvent.OldThreadWaitMode}
     */
    public enum OldThreadWaitMode
        implements com.google.protobuf.ProtocolMessageEnum {
      /**
       * <code>KERNEL_MODE = 0;</code>
       */
      KERNEL_MODE(0),
      /**
       * <code>USER_MODE = 1;</code>
       */
      USER_MODE(1),
      ;

      static {
        com.google.protobuf.RuntimeVersion.validateProtobufGencodeVersion(
          com.google.protobuf.RuntimeVersion.RuntimeDomain.PUBLIC,
          /* major= */ 4,
          /* minor= */ 29,
          /* patch= */ 3,
          /* suffix= */ "",
          OldThreadWaitMode.class.getName());
      }
      /**
       * <code>KERNEL_MODE = 0;</code>
       */
      public static final int KERNEL_MODE_VALUE = 0;
      /**
       * <code>USER_MODE = 1;</code>
       */
      public static final int USER_MODE_VALUE = 1;


      public final int getNumber() {
        return value;
      }

      /**
       * @param value The numeric wire value of the corresponding enum entry.
       * @return The enum associated with the given numeric wire value.
       * @deprecated Use {@link #forNumber(int)} instead.
       */
      @java.lang.Deprecated
      public static OldThreadWaitMode valueOf(int value) {
        return forNumber(value);
      }

      /**
       * @param value The numeric wire value of the corresponding enum entry.
       * @return The enum associated with the given numeric wire value.
       */
      public static OldThreadWaitMode forNumber(int value) {
        switch (value) {
          case 0: return KERNEL_MODE;
          case 1: return USER_MODE;
          default: return null;
        }
      }

      public static com.google.protobuf.Internal.EnumLiteMap<OldThreadWaitMode>
          internalGetValueMap() {
        return internalValueMap;
      }
      private static final com.google.protobuf.Internal.EnumLiteMap<
          OldThreadWaitMode> internalValueMap =
            new com.google.protobuf.Internal.EnumLiteMap<OldThreadWaitMode>() {
              public OldThreadWaitMode findValueByNumber(int number) {
                return OldThreadWaitMode.forNumber(number);
              }
            };

      public final com.google.protobuf.Descriptors.EnumValueDescriptor
          getValueDescriptor() {
        return getDescriptor().getValues().get(ordinal());
      }
      public final com.google.protobuf.Descriptors.EnumDescriptor
          getDescriptorForType() {
        return getDescriptor();
      }
      public static final com.google.protobuf.Descriptors.EnumDescriptor
          getDescriptor() {
        return perfetto.protos.Etw.CSwitchEtwEvent.getDescriptor().getEnumTypes().get(1);
      }

      private static final OldThreadWaitMode[] VALUES = values();

      public static OldThreadWaitMode valueOf(
          com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
        if (desc.getType() != getDescriptor()) {
          throw new java.lang.IllegalArgumentException(
            "EnumValueDescriptor is not for this type.");
        }
        return VALUES[desc.getIndex()];
      }

      private final int value;

      private OldThreadWaitMode(int value) {
        this.value = value;
      }

      // @@protoc_insertion_point(enum_scope:perfetto.protos.CSwitchEtwEvent.OldThreadWaitMode)
    }

    /**
     * <pre>
     * State of the previous thread. The ordering is important as based on the
     * OldThreadState definition from the link above. The following are the
     * possible state values:
     * </pre>
     *
     * Protobuf enum {@code perfetto.protos.CSwitchEtwEvent.OldThreadState}
     */
    public enum OldThreadState
        implements com.google.protobuf.ProtocolMessageEnum {
      /**
       * <code>INITIALIZED = 0;</code>
       */
      INITIALIZED(0),
      /**
       * <code>READY = 1;</code>
       */
      READY(1),
      /**
       * <code>RUNNING = 2;</code>
       */
      RUNNING(2),
      /**
       * <code>STANDBY = 3;</code>
       */
      STANDBY(3),
      /**
       * <code>TERMINATED = 4;</code>
       */
      TERMINATED(4),
      /**
       * <code>WAITING = 5;</code>
       */
      WAITING(5),
      /**
       * <code>TRANSITION = 6;</code>
       */
      TRANSITION(6),
      /**
       * <code>DEFERRED_READY = 7;</code>
       */
      DEFERRED_READY(7),
      ;

      static {
        com.google.protobuf.RuntimeVersion.validateProtobufGencodeVersion(
          com.google.protobuf.RuntimeVersion.RuntimeDomain.PUBLIC,
          /* major= */ 4,
          /* minor= */ 29,
          /* patch= */ 3,
          /* suffix= */ "",
          OldThreadState.class.getName());
      }
      /**
       * <code>INITIALIZED = 0;</code>
       */
      public static final int INITIALIZED_VALUE = 0;
      /**
       * <code>READY = 1;</code>
       */
      public static final int READY_VALUE = 1;
      /**
       * <code>RUNNING = 2;</code>
       */
      public static final int RUNNING_VALUE = 2;
      /**
       * <code>STANDBY = 3;</code>
       */
      public static final int STANDBY_VALUE = 3;
      /**
       * <code>TERMINATED = 4;</code>
       */
      public static final int TERMINATED_VALUE = 4;
      /**
       * <code>WAITING = 5;</code>
       */
      public static final int WAITING_VALUE = 5;
      /**
       * <code>TRANSITION = 6;</code>
       */
      public static final int TRANSITION_VALUE = 6;
      /**
       * <code>DEFERRED_READY = 7;</code>
       */
      public static final int DEFERRED_READY_VALUE = 7;


      public final int getNumber() {
        return value;
      }

      /**
       * @param value The numeric wire value of the corresponding enum entry.
       * @return The enum associated with the given numeric wire value.
       * @deprecated Use {@link #forNumber(int)} instead.
       */
      @java.lang.Deprecated
      public static OldThreadState valueOf(int value) {
        return forNumber(value);
      }

      /**
       * @param value The numeric wire value of the corresponding enum entry.
       * @return The enum associated with the given numeric wire value.
       */
      public static OldThreadState forNumber(int value) {
        switch (value) {
          case 0: return INITIALIZED;
          case 1: return READY;
          case 2: return RUNNING;
          case 3: return STANDBY;
          case 4: return TERMINATED;
          case 5: return WAITING;
          case 6: return TRANSITION;
          case 7: return DEFERRED_READY;
          default: return null;
        }
      }

      public static com.google.protobuf.Internal.EnumLiteMap<OldThreadState>
          internalGetValueMap() {
        return internalValueMap;
      }
      private static final com.google.protobuf.Internal.EnumLiteMap<
          OldThreadState> internalValueMap =
            new com.google.protobuf.Internal.EnumLiteMap<OldThreadState>() {
              public OldThreadState findValueByNumber(int number) {
                return OldThreadState.forNumber(number);
              }
            };

      public final com.google.protobuf.Descriptors.EnumValueDescriptor
          getValueDescriptor() {
        return getDescriptor().getValues().get(ordinal());
      }
      public final com.google.protobuf.Descriptors.EnumDescriptor
          getDescriptorForType() {
        return getDescriptor();
      }
      public static final com.google.protobuf.Descriptors.EnumDescriptor
          getDescriptor() {
        return perfetto.protos.Etw.CSwitchEtwEvent.getDescriptor().getEnumTypes().get(2);
      }

      private static final OldThreadState[] VALUES = values();

      public static OldThreadState valueOf(
          com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
        if (desc.getType() != getDescriptor()) {
          throw new java.lang.IllegalArgumentException(
            "EnumValueDescriptor is not for this type.");
        }
        return VALUES[desc.getIndex()];
      }

      private final int value;

      private OldThreadState(int value) {
        this.value = value;
      }

      // @@protoc_insertion_point(enum_scope:perfetto.protos.CSwitchEtwEvent.OldThreadState)
    }

    private int bitField0_;
    public static final int NEW_THREAD_ID_FIELD_NUMBER = 1;
    private int newThreadId_ = 0;
    /**
     * <pre>
     * New thread ID after the switch.
     * </pre>
     *
     * <code>optional uint32 new_thread_id = 1;</code>
     * @return Whether the newThreadId field is set.
     */
    @java.lang.Override
    public boolean hasNewThreadId() {
      return ((bitField0_ & 0x00000001) != 0);
    }
    /**
     * <pre>
     * New thread ID after the switch.
     * </pre>
     *
     * <code>optional uint32 new_thread_id = 1;</code>
     * @return The newThreadId.
     */
    @java.lang.Override
    public int getNewThreadId() {
      return newThreadId_;
    }

    public static final int OLD_THREAD_ID_FIELD_NUMBER = 2;
    private int oldThreadId_ = 0;
    /**
     * <pre>
     * Previous thread ID.
     * </pre>
     *
     * <code>optional uint32 old_thread_id = 2;</code>
     * @return Whether the oldThreadId field is set.
     */
    @java.lang.Override
    public boolean hasOldThreadId() {
      return ((bitField0_ & 0x00000002) != 0);
    }
    /**
     * <pre>
     * Previous thread ID.
     * </pre>
     *
     * <code>optional uint32 old_thread_id = 2;</code>
     * @return The oldThreadId.
     */
    @java.lang.Override
    public int getOldThreadId() {
      return oldThreadId_;
    }

    public static final int NEW_THREAD_PRIORITY_FIELD_NUMBER = 3;
    private int newThreadPriority_ = 0;
    /**
     * <pre>
     * Thread priority of the new thread.
     * </pre>
     *
     * <code>optional sint32 new_thread_priority = 3;</code>
     * @return Whether the newThreadPriority field is set.
     */
    @java.lang.Override
    public boolean hasNewThreadPriority() {
      return ((bitField0_ & 0x00000004) != 0);
    }
    /**
     * <pre>
     * Thread priority of the new thread.
     * </pre>
     *
     * <code>optional sint32 new_thread_priority = 3;</code>
     * @return The newThreadPriority.
     */
    @java.lang.Override
    public int getNewThreadPriority() {
      return newThreadPriority_;
    }

    public static final int OLD_THREAD_PRIORITY_FIELD_NUMBER = 4;
    private int oldThreadPriority_ = 0;
    /**
     * <pre>
     * Thread priority of the previous thread.
     * </pre>
     *
     * <code>optional sint32 old_thread_priority = 4;</code>
     * @return Whether the oldThreadPriority field is set.
     */
    @java.lang.Override
    public boolean hasOldThreadPriority() {
      return ((bitField0_ & 0x00000008) != 0);
    }
    /**
     * <pre>
     * Thread priority of the previous thread.
     * </pre>
     *
     * <code>optional sint32 old_thread_priority = 4;</code>
     * @return The oldThreadPriority.
     */
    @java.lang.Override
    public int getOldThreadPriority() {
      return oldThreadPriority_;
    }

    public static final int PREVIOUS_C_STATE_FIELD_NUMBER = 5;
    private int previousCState_ = 0;
    /**
     * <pre>
     * The index of the C-state that was last used by the processor. A value of 0
     * represents the lightest idle state with higher values representing deeper
     * C-states.
     * </pre>
     *
     * <code>optional uint32 previous_c_state = 5;</code>
     * @return Whether the previousCState field is set.
     */
    @java.lang.Override
    public boolean hasPreviousCState() {
      return ((bitField0_ & 0x00000010) != 0);
    }
    /**
     * <pre>
     * The index of the C-state that was last used by the processor. A value of 0
     * represents the lightest idle state with higher values representing deeper
     * C-states.
     * </pre>
     *
     * <code>optional uint32 previous_c_state = 5;</code>
     * @return The previousCState.
     */
    @java.lang.Override
    public int getPreviousCState() {
      return previousCState_;
    }

    public static final int OLD_THREAD_WAIT_REASON_FIELD_NUMBER = 6;
    private int oldThreadWaitReason_ = 0;
    /**
     * <code>optional .perfetto.protos.CSwitchEtwEvent.OldThreadWaitReason old_thread_wait_reason = 6;</code>
     * @return Whether the oldThreadWaitReason field is set.
     */
    @java.lang.Override public boolean hasOldThreadWaitReason() {
      return ((bitField0_ & 0x00000020) != 0);
    }
    /**
     * <code>optional .perfetto.protos.CSwitchEtwEvent.OldThreadWaitReason old_thread_wait_reason = 6;</code>
     * @return The oldThreadWaitReason.
     */
    @java.lang.Override public perfetto.protos.Etw.CSwitchEtwEvent.OldThreadWaitReason getOldThreadWaitReason() {
      perfetto.protos.Etw.CSwitchEtwEvent.OldThreadWaitReason result = perfetto.protos.Etw.CSwitchEtwEvent.OldThreadWaitReason.forNumber(oldThreadWaitReason_);
      return result == null ? perfetto.protos.Etw.CSwitchEtwEvent.OldThreadWaitReason.EXECUTIVE : result;
    }

    public static final int OLD_THREAD_WAIT_MODE_FIELD_NUMBER = 7;
    private int oldThreadWaitMode_ = 0;
    /**
     * <code>optional .perfetto.protos.CSwitchEtwEvent.OldThreadWaitMode old_thread_wait_mode = 7;</code>
     * @return Whether the oldThreadWaitMode field is set.
     */
    @java.lang.Override public boolean hasOldThreadWaitMode() {
      return ((bitField0_ & 0x00000040) != 0);
    }
    /**
     * <code>optional .perfetto.protos.CSwitchEtwEvent.OldThreadWaitMode old_thread_wait_mode = 7;</code>
     * @return The oldThreadWaitMode.
     */
    @java.lang.Override public perfetto.protos.Etw.CSwitchEtwEvent.OldThreadWaitMode getOldThreadWaitMode() {
      perfetto.protos.Etw.CSwitchEtwEvent.OldThreadWaitMode result = perfetto.protos.Etw.CSwitchEtwEvent.OldThreadWaitMode.forNumber(oldThreadWaitMode_);
      return result == null ? perfetto.protos.Etw.CSwitchEtwEvent.OldThreadWaitMode.KERNEL_MODE : result;
    }

    public static final int OLD_THREAD_STATE_FIELD_NUMBER = 8;
    private int oldThreadState_ = 0;
    /**
     * <code>optional .perfetto.protos.CSwitchEtwEvent.OldThreadState old_thread_state = 8;</code>
     * @return Whether the oldThreadState field is set.
     */
    @java.lang.Override public boolean hasOldThreadState() {
      return ((bitField0_ & 0x00000080) != 0);
    }
    /**
     * <code>optional .perfetto.protos.CSwitchEtwEvent.OldThreadState old_thread_state = 8;</code>
     * @return The oldThreadState.
     */
    @java.lang.Override public perfetto.protos.Etw.CSwitchEtwEvent.OldThreadState getOldThreadState() {
      perfetto.protos.Etw.CSwitchEtwEvent.OldThreadState result = perfetto.protos.Etw.CSwitchEtwEvent.OldThreadState.forNumber(oldThreadState_);
      return result == null ? perfetto.protos.Etw.CSwitchEtwEvent.OldThreadState.INITIALIZED : result;
    }

    public static final int OLD_THREAD_WAIT_IDEAL_PROCESSOR_FIELD_NUMBER = 9;
    private int oldThreadWaitIdealProcessor_ = 0;
    /**
     * <pre>
     * Ideal wait time of the previous thread.
     * </pre>
     *
     * <code>optional sint32 old_thread_wait_ideal_processor = 9;</code>
     * @return Whether the oldThreadWaitIdealProcessor field is set.
     */
    @java.lang.Override
    public boolean hasOldThreadWaitIdealProcessor() {
      return ((bitField0_ & 0x00000100) != 0);
    }
    /**
     * <pre>
     * Ideal wait time of the previous thread.
     * </pre>
     *
     * <code>optional sint32 old_thread_wait_ideal_processor = 9;</code>
     * @return The oldThreadWaitIdealProcessor.
     */
    @java.lang.Override
    public int getOldThreadWaitIdealProcessor() {
      return oldThreadWaitIdealProcessor_;
    }

    public static final int NEW_THREAD_WAIT_TIME_FIELD_NUMBER = 10;
    private int newThreadWaitTime_ = 0;
    /**
     * <pre>
     * Wait time for the new thread.
     * </pre>
     *
     * <code>optional uint32 new_thread_wait_time = 10;</code>
     * @return Whether the newThreadWaitTime field is set.
     */
    @java.lang.Override
    public boolean hasNewThreadWaitTime() {
      return ((bitField0_ & 0x00000200) != 0);
    }
    /**
     * <pre>
     * Wait time for the new thread.
     * </pre>
     *
     * <code>optional uint32 new_thread_wait_time = 10;</code>
     * @return The newThreadWaitTime.
     */
    @java.lang.Override
    public int getNewThreadWaitTime() {
      return newThreadWaitTime_;
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (((bitField0_ & 0x00000001) != 0)) {
        output.writeUInt32(1, newThreadId_);
      }
      if (((bitField0_ & 0x00000002) != 0)) {
        output.writeUInt32(2, oldThreadId_);
      }
      if (((bitField0_ & 0x00000004) != 0)) {
        output.writeSInt32(3, newThreadPriority_);
      }
      if (((bitField0_ & 0x00000008) != 0)) {
        output.writeSInt32(4, oldThreadPriority_);
      }
      if (((bitField0_ & 0x00000010) != 0)) {
        output.writeUInt32(5, previousCState_);
      }
      if (((bitField0_ & 0x00000020) != 0)) {
        output.writeEnum(6, oldThreadWaitReason_);
      }
      if (((bitField0_ & 0x00000040) != 0)) {
        output.writeEnum(7, oldThreadWaitMode_);
      }
      if (((bitField0_ & 0x00000080) != 0)) {
        output.writeEnum(8, oldThreadState_);
      }
      if (((bitField0_ & 0x00000100) != 0)) {
        output.writeSInt32(9, oldThreadWaitIdealProcessor_);
      }
      if (((bitField0_ & 0x00000200) != 0)) {
        output.writeUInt32(10, newThreadWaitTime_);
      }
      getUnknownFields().writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) != 0)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(1, newThreadId_);
      }
      if (((bitField0_ & 0x00000002) != 0)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(2, oldThreadId_);
      }
      if (((bitField0_ & 0x00000004) != 0)) {
        size += com.google.protobuf.CodedOutputStream
          .computeSInt32Size(3, newThreadPriority_);
      }
      if (((bitField0_ & 0x00000008) != 0)) {
        size += com.google.protobuf.CodedOutputStream
          .computeSInt32Size(4, oldThreadPriority_);
      }
      if (((bitField0_ & 0x00000010) != 0)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(5, previousCState_);
      }
      if (((bitField0_ & 0x00000020) != 0)) {
        size += com.google.protobuf.CodedOutputStream
          .computeEnumSize(6, oldThreadWaitReason_);
      }
      if (((bitField0_ & 0x00000040) != 0)) {
        size += com.google.protobuf.CodedOutputStream
          .computeEnumSize(7, oldThreadWaitMode_);
      }
      if (((bitField0_ & 0x00000080) != 0)) {
        size += com.google.protobuf.CodedOutputStream
          .computeEnumSize(8, oldThreadState_);
      }
      if (((bitField0_ & 0x00000100) != 0)) {
        size += com.google.protobuf.CodedOutputStream
          .computeSInt32Size(9, oldThreadWaitIdealProcessor_);
      }
      if (((bitField0_ & 0x00000200) != 0)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(10, newThreadWaitTime_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof perfetto.protos.Etw.CSwitchEtwEvent)) {
        return super.equals(obj);
      }
      perfetto.protos.Etw.CSwitchEtwEvent other = (perfetto.protos.Etw.CSwitchEtwEvent) obj;

      if (hasNewThreadId() != other.hasNewThreadId()) return false;
      if (hasNewThreadId()) {
        if (getNewThreadId()
            != other.getNewThreadId()) return false;
      }
      if (hasOldThreadId() != other.hasOldThreadId()) return false;
      if (hasOldThreadId()) {
        if (getOldThreadId()
            != other.getOldThreadId()) return false;
      }
      if (hasNewThreadPriority() != other.hasNewThreadPriority()) return false;
      if (hasNewThreadPriority()) {
        if (getNewThreadPriority()
            != other.getNewThreadPriority()) return false;
      }
      if (hasOldThreadPriority() != other.hasOldThreadPriority()) return false;
      if (hasOldThreadPriority()) {
        if (getOldThreadPriority()
            != other.getOldThreadPriority()) return false;
      }
      if (hasPreviousCState() != other.hasPreviousCState()) return false;
      if (hasPreviousCState()) {
        if (getPreviousCState()
            != other.getPreviousCState()) return false;
      }
      if (hasOldThreadWaitReason() != other.hasOldThreadWaitReason()) return false;
      if (hasOldThreadWaitReason()) {
        if (oldThreadWaitReason_ != other.oldThreadWaitReason_) return false;
      }
      if (hasOldThreadWaitMode() != other.hasOldThreadWaitMode()) return false;
      if (hasOldThreadWaitMode()) {
        if (oldThreadWaitMode_ != other.oldThreadWaitMode_) return false;
      }
      if (hasOldThreadState() != other.hasOldThreadState()) return false;
      if (hasOldThreadState()) {
        if (oldThreadState_ != other.oldThreadState_) return false;
      }
      if (hasOldThreadWaitIdealProcessor() != other.hasOldThreadWaitIdealProcessor()) return false;
      if (hasOldThreadWaitIdealProcessor()) {
        if (getOldThreadWaitIdealProcessor()
            != other.getOldThreadWaitIdealProcessor()) return false;
      }
      if (hasNewThreadWaitTime() != other.hasNewThreadWaitTime()) return false;
      if (hasNewThreadWaitTime()) {
        if (getNewThreadWaitTime()
            != other.getNewThreadWaitTime()) return false;
      }
      if (!getUnknownFields().equals(other.getUnknownFields())) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      if (hasNewThreadId()) {
        hash = (37 * hash) + NEW_THREAD_ID_FIELD_NUMBER;
        hash = (53 * hash) + getNewThreadId();
      }
      if (hasOldThreadId()) {
        hash = (37 * hash) + OLD_THREAD_ID_FIELD_NUMBER;
        hash = (53 * hash) + getOldThreadId();
      }
      if (hasNewThreadPriority()) {
        hash = (37 * hash) + NEW_THREAD_PRIORITY_FIELD_NUMBER;
        hash = (53 * hash) + getNewThreadPriority();
      }
      if (hasOldThreadPriority()) {
        hash = (37 * hash) + OLD_THREAD_PRIORITY_FIELD_NUMBER;
        hash = (53 * hash) + getOldThreadPriority();
      }
      if (hasPreviousCState()) {
        hash = (37 * hash) + PREVIOUS_C_STATE_FIELD_NUMBER;
        hash = (53 * hash) + getPreviousCState();
      }
      if (hasOldThreadWaitReason()) {
        hash = (37 * hash) + OLD_THREAD_WAIT_REASON_FIELD_NUMBER;
        hash = (53 * hash) + oldThreadWaitReason_;
      }
      if (hasOldThreadWaitMode()) {
        hash = (37 * hash) + OLD_THREAD_WAIT_MODE_FIELD_NUMBER;
        hash = (53 * hash) + oldThreadWaitMode_;
      }
      if (hasOldThreadState()) {
        hash = (37 * hash) + OLD_THREAD_STATE_FIELD_NUMBER;
        hash = (53 * hash) + oldThreadState_;
      }
      if (hasOldThreadWaitIdealProcessor()) {
        hash = (37 * hash) + OLD_THREAD_WAIT_IDEAL_PROCESSOR_FIELD_NUMBER;
        hash = (53 * hash) + getOldThreadWaitIdealProcessor();
      }
      if (hasNewThreadWaitTime()) {
        hash = (37 * hash) + NEW_THREAD_WAIT_TIME_FIELD_NUMBER;
        hash = (53 * hash) + getNewThreadWaitTime();
      }
      hash = (29 * hash) + getUnknownFields().hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static perfetto.protos.Etw.CSwitchEtwEvent parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static perfetto.protos.Etw.CSwitchEtwEvent parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static perfetto.protos.Etw.CSwitchEtwEvent parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static perfetto.protos.Etw.CSwitchEtwEvent parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static perfetto.protos.Etw.CSwitchEtwEvent parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static perfetto.protos.Etw.CSwitchEtwEvent parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static perfetto.protos.Etw.CSwitchEtwEvent parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input);
    }
    public static perfetto.protos.Etw.CSwitchEtwEvent parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    public static perfetto.protos.Etw.CSwitchEtwEvent parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessage
          .parseDelimitedWithIOException(PARSER, input);
    }

    public static perfetto.protos.Etw.CSwitchEtwEvent parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessage
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static perfetto.protos.Etw.CSwitchEtwEvent parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input);
    }
    public static perfetto.protos.Etw.CSwitchEtwEvent parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(perfetto.protos.Etw.CSwitchEtwEvent prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * <pre>
     * Proto definition based on the Thread_v2 CSwitch class definition
     * See: https://learn.microsoft.com/en-us/windows/win32/etw/cswitch
     * </pre>
     *
     * Protobuf type {@code perfetto.protos.CSwitchEtwEvent}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:perfetto.protos.CSwitchEtwEvent)
        perfetto.protos.Etw.CSwitchEtwEventOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return perfetto.protos.Etw.internal_static_perfetto_protos_CSwitchEtwEvent_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return perfetto.protos.Etw.internal_static_perfetto_protos_CSwitchEtwEvent_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                perfetto.protos.Etw.CSwitchEtwEvent.class, perfetto.protos.Etw.CSwitchEtwEvent.Builder.class);
      }

      // Construct using perfetto.protos.Etw.CSwitchEtwEvent.newBuilder()
      private Builder() {

      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);

      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        bitField0_ = 0;
        newThreadId_ = 0;
        oldThreadId_ = 0;
        newThreadPriority_ = 0;
        oldThreadPriority_ = 0;
        previousCState_ = 0;
        oldThreadWaitReason_ = 0;
        oldThreadWaitMode_ = 0;
        oldThreadState_ = 0;
        oldThreadWaitIdealProcessor_ = 0;
        newThreadWaitTime_ = 0;
        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return perfetto.protos.Etw.internal_static_perfetto_protos_CSwitchEtwEvent_descriptor;
      }

      @java.lang.Override
      public perfetto.protos.Etw.CSwitchEtwEvent getDefaultInstanceForType() {
        return perfetto.protos.Etw.CSwitchEtwEvent.getDefaultInstance();
      }

      @java.lang.Override
      public perfetto.protos.Etw.CSwitchEtwEvent build() {
        perfetto.protos.Etw.CSwitchEtwEvent result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public perfetto.protos.Etw.CSwitchEtwEvent buildPartial() {
        perfetto.protos.Etw.CSwitchEtwEvent result = new perfetto.protos.Etw.CSwitchEtwEvent(this);
        if (bitField0_ != 0) { buildPartial0(result); }
        onBuilt();
        return result;
      }

      private void buildPartial0(perfetto.protos.Etw.CSwitchEtwEvent result) {
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) != 0)) {
          result.newThreadId_ = newThreadId_;
          to_bitField0_ |= 0x00000001;
        }
        if (((from_bitField0_ & 0x00000002) != 0)) {
          result.oldThreadId_ = oldThreadId_;
          to_bitField0_ |= 0x00000002;
        }
        if (((from_bitField0_ & 0x00000004) != 0)) {
          result.newThreadPriority_ = newThreadPriority_;
          to_bitField0_ |= 0x00000004;
        }
        if (((from_bitField0_ & 0x00000008) != 0)) {
          result.oldThreadPriority_ = oldThreadPriority_;
          to_bitField0_ |= 0x00000008;
        }
        if (((from_bitField0_ & 0x00000010) != 0)) {
          result.previousCState_ = previousCState_;
          to_bitField0_ |= 0x00000010;
        }
        if (((from_bitField0_ & 0x00000020) != 0)) {
          result.oldThreadWaitReason_ = oldThreadWaitReason_;
          to_bitField0_ |= 0x00000020;
        }
        if (((from_bitField0_ & 0x00000040) != 0)) {
          result.oldThreadWaitMode_ = oldThreadWaitMode_;
          to_bitField0_ |= 0x00000040;
        }
        if (((from_bitField0_ & 0x00000080) != 0)) {
          result.oldThreadState_ = oldThreadState_;
          to_bitField0_ |= 0x00000080;
        }
        if (((from_bitField0_ & 0x00000100) != 0)) {
          result.oldThreadWaitIdealProcessor_ = oldThreadWaitIdealProcessor_;
          to_bitField0_ |= 0x00000100;
        }
        if (((from_bitField0_ & 0x00000200) != 0)) {
          result.newThreadWaitTime_ = newThreadWaitTime_;
          to_bitField0_ |= 0x00000200;
        }
        result.bitField0_ |= to_bitField0_;
      }

      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof perfetto.protos.Etw.CSwitchEtwEvent) {
          return mergeFrom((perfetto.protos.Etw.CSwitchEtwEvent)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(perfetto.protos.Etw.CSwitchEtwEvent other) {
        if (other == perfetto.protos.Etw.CSwitchEtwEvent.getDefaultInstance()) return this;
        if (other.hasNewThreadId()) {
          setNewThreadId(other.getNewThreadId());
        }
        if (other.hasOldThreadId()) {
          setOldThreadId(other.getOldThreadId());
        }
        if (other.hasNewThreadPriority()) {
          setNewThreadPriority(other.getNewThreadPriority());
        }
        if (other.hasOldThreadPriority()) {
          setOldThreadPriority(other.getOldThreadPriority());
        }
        if (other.hasPreviousCState()) {
          setPreviousCState(other.getPreviousCState());
        }
        if (other.hasOldThreadWaitReason()) {
          setOldThreadWaitReason(other.getOldThreadWaitReason());
        }
        if (other.hasOldThreadWaitMode()) {
          setOldThreadWaitMode(other.getOldThreadWaitMode());
        }
        if (other.hasOldThreadState()) {
          setOldThreadState(other.getOldThreadState());
        }
        if (other.hasOldThreadWaitIdealProcessor()) {
          setOldThreadWaitIdealProcessor(other.getOldThreadWaitIdealProcessor());
        }
        if (other.hasNewThreadWaitTime()) {
          setNewThreadWaitTime(other.getNewThreadWaitTime());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        if (extensionRegistry == null) {
          throw new java.lang.NullPointerException();
        }
        try {
          boolean done = false;
          while (!done) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                done = true;
                break;
              case 8: {
                newThreadId_ = input.readUInt32();
                bitField0_ |= 0x00000001;
                break;
              } // case 8
              case 16: {
                oldThreadId_ = input.readUInt32();
                bitField0_ |= 0x00000002;
                break;
              } // case 16
              case 24: {
                newThreadPriority_ = input.readSInt32();
                bitField0_ |= 0x00000004;
                break;
              } // case 24
              case 32: {
                oldThreadPriority_ = input.readSInt32();
                bitField0_ |= 0x00000008;
                break;
              } // case 32
              case 40: {
                previousCState_ = input.readUInt32();
                bitField0_ |= 0x00000010;
                break;
              } // case 40
              case 48: {
                int tmpRaw = input.readEnum();
                perfetto.protos.Etw.CSwitchEtwEvent.OldThreadWaitReason tmpValue =
                    perfetto.protos.Etw.CSwitchEtwEvent.OldThreadWaitReason.forNumber(tmpRaw);
                if (tmpValue == null) {
                  mergeUnknownVarintField(6, tmpRaw);
                } else {
                  oldThreadWaitReason_ = tmpRaw;
                  bitField0_ |= 0x00000020;
                }
                break;
              } // case 48
              case 56: {
                int tmpRaw = input.readEnum();
                perfetto.protos.Etw.CSwitchEtwEvent.OldThreadWaitMode tmpValue =
                    perfetto.protos.Etw.CSwitchEtwEvent.OldThreadWaitMode.forNumber(tmpRaw);
                if (tmpValue == null) {
                  mergeUnknownVarintField(7, tmpRaw);
                } else {
                  oldThreadWaitMode_ = tmpRaw;
                  bitField0_ |= 0x00000040;
                }
                break;
              } // case 56
              case 64: {
                int tmpRaw = input.readEnum();
                perfetto.protos.Etw.CSwitchEtwEvent.OldThreadState tmpValue =
                    perfetto.protos.Etw.CSwitchEtwEvent.OldThreadState.forNumber(tmpRaw);
                if (tmpValue == null) {
                  mergeUnknownVarintField(8, tmpRaw);
                } else {
                  oldThreadState_ = tmpRaw;
                  bitField0_ |= 0x00000080;
                }
                break;
              } // case 64
              case 72: {
                oldThreadWaitIdealProcessor_ = input.readSInt32();
                bitField0_ |= 0x00000100;
                break;
              } // case 72
              case 80: {
                newThreadWaitTime_ = input.readUInt32();
                bitField0_ |= 0x00000200;
                break;
              } // case 80
              default: {
                if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                  done = true; // was an endgroup tag
                }
                break;
              } // default:
            } // switch (tag)
          } // while (!done)
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.unwrapIOException();
        } finally {
          onChanged();
        } // finally
        return this;
      }
      private int bitField0_;

      private int newThreadId_ ;
      /**
       * <pre>
       * New thread ID after the switch.
       * </pre>
       *
       * <code>optional uint32 new_thread_id = 1;</code>
       * @return Whether the newThreadId field is set.
       */
      @java.lang.Override
      public boolean hasNewThreadId() {
        return ((bitField0_ & 0x00000001) != 0);
      }
      /**
       * <pre>
       * New thread ID after the switch.
       * </pre>
       *
       * <code>optional uint32 new_thread_id = 1;</code>
       * @return The newThreadId.
       */
      @java.lang.Override
      public int getNewThreadId() {
        return newThreadId_;
      }
      /**
       * <pre>
       * New thread ID after the switch.
       * </pre>
       *
       * <code>optional uint32 new_thread_id = 1;</code>
       * @param value The newThreadId to set.
       * @return This builder for chaining.
       */
      public Builder setNewThreadId(int value) {

        newThreadId_ = value;
        bitField0_ |= 0x00000001;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * New thread ID after the switch.
       * </pre>
       *
       * <code>optional uint32 new_thread_id = 1;</code>
       * @return This builder for chaining.
       */
      public Builder clearNewThreadId() {
        bitField0_ = (bitField0_ & ~0x00000001);
        newThreadId_ = 0;
        onChanged();
        return this;
      }

      private int oldThreadId_ ;
      /**
       * <pre>
       * Previous thread ID.
       * </pre>
       *
       * <code>optional uint32 old_thread_id = 2;</code>
       * @return Whether the oldThreadId field is set.
       */
      @java.lang.Override
      public boolean hasOldThreadId() {
        return ((bitField0_ & 0x00000002) != 0);
      }
      /**
       * <pre>
       * Previous thread ID.
       * </pre>
       *
       * <code>optional uint32 old_thread_id = 2;</code>
       * @return The oldThreadId.
       */
      @java.lang.Override
      public int getOldThreadId() {
        return oldThreadId_;
      }
      /**
       * <pre>
       * Previous thread ID.
       * </pre>
       *
       * <code>optional uint32 old_thread_id = 2;</code>
       * @param value The oldThreadId to set.
       * @return This builder for chaining.
       */
      public Builder setOldThreadId(int value) {

        oldThreadId_ = value;
        bitField0_ |= 0x00000002;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Previous thread ID.
       * </pre>
       *
       * <code>optional uint32 old_thread_id = 2;</code>
       * @return This builder for chaining.
       */
      public Builder clearOldThreadId() {
        bitField0_ = (bitField0_ & ~0x00000002);
        oldThreadId_ = 0;
        onChanged();
        return this;
      }

      private int newThreadPriority_ ;
      /**
       * <pre>
       * Thread priority of the new thread.
       * </pre>
       *
       * <code>optional sint32 new_thread_priority = 3;</code>
       * @return Whether the newThreadPriority field is set.
       */
      @java.lang.Override
      public boolean hasNewThreadPriority() {
        return ((bitField0_ & 0x00000004) != 0);
      }
      /**
       * <pre>
       * Thread priority of the new thread.
       * </pre>
       *
       * <code>optional sint32 new_thread_priority = 3;</code>
       * @return The newThreadPriority.
       */
      @java.lang.Override
      public int getNewThreadPriority() {
        return newThreadPriority_;
      }
      /**
       * <pre>
       * Thread priority of the new thread.
       * </pre>
       *
       * <code>optional sint32 new_thread_priority = 3;</code>
       * @param value The newThreadPriority to set.
       * @return This builder for chaining.
       */
      public Builder setNewThreadPriority(int value) {

        newThreadPriority_ = value;
        bitField0_ |= 0x00000004;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Thread priority of the new thread.
       * </pre>
       *
       * <code>optional sint32 new_thread_priority = 3;</code>
       * @return This builder for chaining.
       */
      public Builder clearNewThreadPriority() {
        bitField0_ = (bitField0_ & ~0x00000004);
        newThreadPriority_ = 0;
        onChanged();
        return this;
      }

      private int oldThreadPriority_ ;
      /**
       * <pre>
       * Thread priority of the previous thread.
       * </pre>
       *
       * <code>optional sint32 old_thread_priority = 4;</code>
       * @return Whether the oldThreadPriority field is set.
       */
      @java.lang.Override
      public boolean hasOldThreadPriority() {
        return ((bitField0_ & 0x00000008) != 0);
      }
      /**
       * <pre>
       * Thread priority of the previous thread.
       * </pre>
       *
       * <code>optional sint32 old_thread_priority = 4;</code>
       * @return The oldThreadPriority.
       */
      @java.lang.Override
      public int getOldThreadPriority() {
        return oldThreadPriority_;
      }
      /**
       * <pre>
       * Thread priority of the previous thread.
       * </pre>
       *
       * <code>optional sint32 old_thread_priority = 4;</code>
       * @param value The oldThreadPriority to set.
       * @return This builder for chaining.
       */
      public Builder setOldThreadPriority(int value) {

        oldThreadPriority_ = value;
        bitField0_ |= 0x00000008;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Thread priority of the previous thread.
       * </pre>
       *
       * <code>optional sint32 old_thread_priority = 4;</code>
       * @return This builder for chaining.
       */
      public Builder clearOldThreadPriority() {
        bitField0_ = (bitField0_ & ~0x00000008);
        oldThreadPriority_ = 0;
        onChanged();
        return this;
      }

      private int previousCState_ ;
      /**
       * <pre>
       * The index of the C-state that was last used by the processor. A value of 0
       * represents the lightest idle state with higher values representing deeper
       * C-states.
       * </pre>
       *
       * <code>optional uint32 previous_c_state = 5;</code>
       * @return Whether the previousCState field is set.
       */
      @java.lang.Override
      public boolean hasPreviousCState() {
        return ((bitField0_ & 0x00000010) != 0);
      }
      /**
       * <pre>
       * The index of the C-state that was last used by the processor. A value of 0
       * represents the lightest idle state with higher values representing deeper
       * C-states.
       * </pre>
       *
       * <code>optional uint32 previous_c_state = 5;</code>
       * @return The previousCState.
       */
      @java.lang.Override
      public int getPreviousCState() {
        return previousCState_;
      }
      /**
       * <pre>
       * The index of the C-state that was last used by the processor. A value of 0
       * represents the lightest idle state with higher values representing deeper
       * C-states.
       * </pre>
       *
       * <code>optional uint32 previous_c_state = 5;</code>
       * @param value The previousCState to set.
       * @return This builder for chaining.
       */
      public Builder setPreviousCState(int value) {

        previousCState_ = value;
        bitField0_ |= 0x00000010;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * The index of the C-state that was last used by the processor. A value of 0
       * represents the lightest idle state with higher values representing deeper
       * C-states.
       * </pre>
       *
       * <code>optional uint32 previous_c_state = 5;</code>
       * @return This builder for chaining.
       */
      public Builder clearPreviousCState() {
        bitField0_ = (bitField0_ & ~0x00000010);
        previousCState_ = 0;
        onChanged();
        return this;
      }

      private int oldThreadWaitReason_ = 0;
      /**
       * <code>optional .perfetto.protos.CSwitchEtwEvent.OldThreadWaitReason old_thread_wait_reason = 6;</code>
       * @return Whether the oldThreadWaitReason field is set.
       */
      @java.lang.Override public boolean hasOldThreadWaitReason() {
        return ((bitField0_ & 0x00000020) != 0);
      }
      /**
       * <code>optional .perfetto.protos.CSwitchEtwEvent.OldThreadWaitReason old_thread_wait_reason = 6;</code>
       * @return The oldThreadWaitReason.
       */
      @java.lang.Override
      public perfetto.protos.Etw.CSwitchEtwEvent.OldThreadWaitReason getOldThreadWaitReason() {
        perfetto.protos.Etw.CSwitchEtwEvent.OldThreadWaitReason result = perfetto.protos.Etw.CSwitchEtwEvent.OldThreadWaitReason.forNumber(oldThreadWaitReason_);
        return result == null ? perfetto.protos.Etw.CSwitchEtwEvent.OldThreadWaitReason.EXECUTIVE : result;
      }
      /**
       * <code>optional .perfetto.protos.CSwitchEtwEvent.OldThreadWaitReason old_thread_wait_reason = 6;</code>
       * @param value The oldThreadWaitReason to set.
       * @return This builder for chaining.
       */
      public Builder setOldThreadWaitReason(perfetto.protos.Etw.CSwitchEtwEvent.OldThreadWaitReason value) {
        if (value == null) {
          throw new NullPointerException();
        }
        bitField0_ |= 0x00000020;
        oldThreadWaitReason_ = value.getNumber();
        onChanged();
        return this;
      }
      /**
       * <code>optional .perfetto.protos.CSwitchEtwEvent.OldThreadWaitReason old_thread_wait_reason = 6;</code>
       * @return This builder for chaining.
       */
      public Builder clearOldThreadWaitReason() {
        bitField0_ = (bitField0_ & ~0x00000020);
        oldThreadWaitReason_ = 0;
        onChanged();
        return this;
      }

      private int oldThreadWaitMode_ = 0;
      /**
       * <code>optional .perfetto.protos.CSwitchEtwEvent.OldThreadWaitMode old_thread_wait_mode = 7;</code>
       * @return Whether the oldThreadWaitMode field is set.
       */
      @java.lang.Override public boolean hasOldThreadWaitMode() {
        return ((bitField0_ & 0x00000040) != 0);
      }
      /**
       * <code>optional .perfetto.protos.CSwitchEtwEvent.OldThreadWaitMode old_thread_wait_mode = 7;</code>
       * @return The oldThreadWaitMode.
       */
      @java.lang.Override
      public perfetto.protos.Etw.CSwitchEtwEvent.OldThreadWaitMode getOldThreadWaitMode() {
        perfetto.protos.Etw.CSwitchEtwEvent.OldThreadWaitMode result = perfetto.protos.Etw.CSwitchEtwEvent.OldThreadWaitMode.forNumber(oldThreadWaitMode_);
        return result == null ? perfetto.protos.Etw.CSwitchEtwEvent.OldThreadWaitMode.KERNEL_MODE : result;
      }
      /**
       * <code>optional .perfetto.protos.CSwitchEtwEvent.OldThreadWaitMode old_thread_wait_mode = 7;</code>
       * @param value The oldThreadWaitMode to set.
       * @return This builder for chaining.
       */
      public Builder setOldThreadWaitMode(perfetto.protos.Etw.CSwitchEtwEvent.OldThreadWaitMode value) {
        if (value == null) {
          throw new NullPointerException();
        }
        bitField0_ |= 0x00000040;
        oldThreadWaitMode_ = value.getNumber();
        onChanged();
        return this;
      }
      /**
       * <code>optional .perfetto.protos.CSwitchEtwEvent.OldThreadWaitMode old_thread_wait_mode = 7;</code>
       * @return This builder for chaining.
       */
      public Builder clearOldThreadWaitMode() {
        bitField0_ = (bitField0_ & ~0x00000040);
        oldThreadWaitMode_ = 0;
        onChanged();
        return this;
      }

      private int oldThreadState_ = 0;
      /**
       * <code>optional .perfetto.protos.CSwitchEtwEvent.OldThreadState old_thread_state = 8;</code>
       * @return Whether the oldThreadState field is set.
       */
      @java.lang.Override public boolean hasOldThreadState() {
        return ((bitField0_ & 0x00000080) != 0);
      }
      /**
       * <code>optional .perfetto.protos.CSwitchEtwEvent.OldThreadState old_thread_state = 8;</code>
       * @return The oldThreadState.
       */
      @java.lang.Override
      public perfetto.protos.Etw.CSwitchEtwEvent.OldThreadState getOldThreadState() {
        perfetto.protos.Etw.CSwitchEtwEvent.OldThreadState result = perfetto.protos.Etw.CSwitchEtwEvent.OldThreadState.forNumber(oldThreadState_);
        return result == null ? perfetto.protos.Etw.CSwitchEtwEvent.OldThreadState.INITIALIZED : result;
      }
      /**
       * <code>optional .perfetto.protos.CSwitchEtwEvent.OldThreadState old_thread_state = 8;</code>
       * @param value The oldThreadState to set.
       * @return This builder for chaining.
       */
      public Builder setOldThreadState(perfetto.protos.Etw.CSwitchEtwEvent.OldThreadState value) {
        if (value == null) {
          throw new NullPointerException();
        }
        bitField0_ |= 0x00000080;
        oldThreadState_ = value.getNumber();
        onChanged();
        return this;
      }
      /**
       * <code>optional .perfetto.protos.CSwitchEtwEvent.OldThreadState old_thread_state = 8;</code>
       * @return This builder for chaining.
       */
      public Builder clearOldThreadState() {
        bitField0_ = (bitField0_ & ~0x00000080);
        oldThreadState_ = 0;
        onChanged();
        return this;
      }

      private int oldThreadWaitIdealProcessor_ ;
      /**
       * <pre>
       * Ideal wait time of the previous thread.
       * </pre>
       *
       * <code>optional sint32 old_thread_wait_ideal_processor = 9;</code>
       * @return Whether the oldThreadWaitIdealProcessor field is set.
       */
      @java.lang.Override
      public boolean hasOldThreadWaitIdealProcessor() {
        return ((bitField0_ & 0x00000100) != 0);
      }
      /**
       * <pre>
       * Ideal wait time of the previous thread.
       * </pre>
       *
       * <code>optional sint32 old_thread_wait_ideal_processor = 9;</code>
       * @return The oldThreadWaitIdealProcessor.
       */
      @java.lang.Override
      public int getOldThreadWaitIdealProcessor() {
        return oldThreadWaitIdealProcessor_;
      }
      /**
       * <pre>
       * Ideal wait time of the previous thread.
       * </pre>
       *
       * <code>optional sint32 old_thread_wait_ideal_processor = 9;</code>
       * @param value The oldThreadWaitIdealProcessor to set.
       * @return This builder for chaining.
       */
      public Builder setOldThreadWaitIdealProcessor(int value) {

        oldThreadWaitIdealProcessor_ = value;
        bitField0_ |= 0x00000100;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Ideal wait time of the previous thread.
       * </pre>
       *
       * <code>optional sint32 old_thread_wait_ideal_processor = 9;</code>
       * @return This builder for chaining.
       */
      public Builder clearOldThreadWaitIdealProcessor() {
        bitField0_ = (bitField0_ & ~0x00000100);
        oldThreadWaitIdealProcessor_ = 0;
        onChanged();
        return this;
      }

      private int newThreadWaitTime_ ;
      /**
       * <pre>
       * Wait time for the new thread.
       * </pre>
       *
       * <code>optional uint32 new_thread_wait_time = 10;</code>
       * @return Whether the newThreadWaitTime field is set.
       */
      @java.lang.Override
      public boolean hasNewThreadWaitTime() {
        return ((bitField0_ & 0x00000200) != 0);
      }
      /**
       * <pre>
       * Wait time for the new thread.
       * </pre>
       *
       * <code>optional uint32 new_thread_wait_time = 10;</code>
       * @return The newThreadWaitTime.
       */
      @java.lang.Override
      public int getNewThreadWaitTime() {
        return newThreadWaitTime_;
      }
      /**
       * <pre>
       * Wait time for the new thread.
       * </pre>
       *
       * <code>optional uint32 new_thread_wait_time = 10;</code>
       * @param value The newThreadWaitTime to set.
       * @return This builder for chaining.
       */
      public Builder setNewThreadWaitTime(int value) {

        newThreadWaitTime_ = value;
        bitField0_ |= 0x00000200;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Wait time for the new thread.
       * </pre>
       *
       * <code>optional uint32 new_thread_wait_time = 10;</code>
       * @return This builder for chaining.
       */
      public Builder clearNewThreadWaitTime() {
        bitField0_ = (bitField0_ & ~0x00000200);
        newThreadWaitTime_ = 0;
        onChanged();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:perfetto.protos.CSwitchEtwEvent)
    }

    // @@protoc_insertion_point(class_scope:perfetto.protos.CSwitchEtwEvent)
    private static final perfetto.protos.Etw.CSwitchEtwEvent DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new perfetto.protos.Etw.CSwitchEtwEvent();
    }

    public static perfetto.protos.Etw.CSwitchEtwEvent getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<CSwitchEtwEvent>
        PARSER = new com.google.protobuf.AbstractParser<CSwitchEtwEvent>() {
      @java.lang.Override
      public CSwitchEtwEvent parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        Builder builder = newBuilder();
        try {
          builder.mergeFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.setUnfinishedMessage(builder.buildPartial());
        } catch (com.google.protobuf.UninitializedMessageException e) {
          throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
        } catch (java.io.IOException e) {
          throw new com.google.protobuf.InvalidProtocolBufferException(e)
              .setUnfinishedMessage(builder.buildPartial());
        }
        return builder.buildPartial();
      }
    };

    public static com.google.protobuf.Parser<CSwitchEtwEvent> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<CSwitchEtwEvent> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public perfetto.protos.Etw.CSwitchEtwEvent getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface ReadyThreadEtwEventOrBuilder extends
      // @@protoc_insertion_point(interface_extends:perfetto.protos.ReadyThreadEtwEvent)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <pre>
     * The thread identifier of the thread being readied for execution.
     * </pre>
     *
     * <code>optional uint32 t_thread_id = 1;</code>
     * @return Whether the tThreadId field is set.
     */
    boolean hasTThreadId();
    /**
     * <pre>
     * The thread identifier of the thread being readied for execution.
     * </pre>
     *
     * <code>optional uint32 t_thread_id = 1;</code>
     * @return The tThreadId.
     */
    int getTThreadId();

    /**
     * <code>optional .perfetto.protos.ReadyThreadEtwEvent.AdjustReason adjust_reason = 2;</code>
     * @return Whether the adjustReason field is set.
     */
    boolean hasAdjustReason();
    /**
     * <code>optional .perfetto.protos.ReadyThreadEtwEvent.AdjustReason adjust_reason = 2;</code>
     * @return The adjustReason.
     */
    perfetto.protos.Etw.ReadyThreadEtwEvent.AdjustReason getAdjustReason();

    /**
     * <pre>
     * The value by which the priority is being adjusted.
     * </pre>
     *
     * <code>optional sint32 adjust_increment = 3;</code>
     * @return Whether the adjustIncrement field is set.
     */
    boolean hasAdjustIncrement();
    /**
     * <pre>
     * The value by which the priority is being adjusted.
     * </pre>
     *
     * <code>optional sint32 adjust_increment = 3;</code>
     * @return The adjustIncrement.
     */
    int getAdjustIncrement();

    /**
     * <code>optional .perfetto.protos.ReadyThreadEtwEvent.TraceFlag flag = 4;</code>
     * @return Whether the flag field is set.
     */
    boolean hasFlag();
    /**
     * <code>optional .perfetto.protos.ReadyThreadEtwEvent.TraceFlag flag = 4;</code>
     * @return The flag.
     */
    perfetto.protos.Etw.ReadyThreadEtwEvent.TraceFlag getFlag();
  }
  /**
   * <pre>
   * Proto definition based on the Thread_v2 CSwitch class definition
   * See: https://learn.microsoft.com/en-us/windows/win32/etw/readythread
   * </pre>
   *
   * Protobuf type {@code perfetto.protos.ReadyThreadEtwEvent}
   */
  public static final class ReadyThreadEtwEvent extends
      com.google.protobuf.GeneratedMessage implements
      // @@protoc_insertion_point(message_implements:perfetto.protos.ReadyThreadEtwEvent)
      ReadyThreadEtwEventOrBuilder {
  private static final long serialVersionUID = 0L;
    static {
      com.google.protobuf.RuntimeVersion.validateProtobufGencodeVersion(
        com.google.protobuf.RuntimeVersion.RuntimeDomain.PUBLIC,
        /* major= */ 4,
        /* minor= */ 29,
        /* patch= */ 3,
        /* suffix= */ "",
        ReadyThreadEtwEvent.class.getName());
    }
    // Use ReadyThreadEtwEvent.newBuilder() to construct.
    private ReadyThreadEtwEvent(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
    }
    private ReadyThreadEtwEvent() {
      adjustReason_ = 0;
      flag_ = 0;
    }

    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return perfetto.protos.Etw.internal_static_perfetto_protos_ReadyThreadEtwEvent_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return perfetto.protos.Etw.internal_static_perfetto_protos_ReadyThreadEtwEvent_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              perfetto.protos.Etw.ReadyThreadEtwEvent.class, perfetto.protos.Etw.ReadyThreadEtwEvent.Builder.class);
    }

    /**
     * <pre>
     * The reason for the priority boost. The ordering is important as based on
     * the AdjustReason definition from the link above.
     * </pre>
     *
     * Protobuf enum {@code perfetto.protos.ReadyThreadEtwEvent.AdjustReason}
     */
    public enum AdjustReason
        implements com.google.protobuf.ProtocolMessageEnum {
      /**
       * <code>IGNORE_THE_INCREMENT = 0;</code>
       */
      IGNORE_THE_INCREMENT(0),
      /**
       * <pre>
       * Apply the increment, which will decay incrementally at the end of each
       * quantum.
       * </pre>
       *
       * <code>APPLY_INCREMENT = 1;</code>
       */
      APPLY_INCREMENT(1),
      /**
       * <pre>
       * Apply the increment as a boost that will decay in its entirety at quantum
       * (typically for priority donation).
       * </pre>
       *
       * <code>APPLY_INCREMENT_BOOST = 2;</code>
       */
      APPLY_INCREMENT_BOOST(2),
      ;

      static {
        com.google.protobuf.RuntimeVersion.validateProtobufGencodeVersion(
          com.google.protobuf.RuntimeVersion.RuntimeDomain.PUBLIC,
          /* major= */ 4,
          /* minor= */ 29,
          /* patch= */ 3,
          /* suffix= */ "",
          AdjustReason.class.getName());
      }
      /**
       * <code>IGNORE_THE_INCREMENT = 0;</code>
       */
      public static final int IGNORE_THE_INCREMENT_VALUE = 0;
      /**
       * <pre>
       * Apply the increment, which will decay incrementally at the end of each
       * quantum.
       * </pre>
       *
       * <code>APPLY_INCREMENT = 1;</code>
       */
      public static final int APPLY_INCREMENT_VALUE = 1;
      /**
       * <pre>
       * Apply the increment as a boost that will decay in its entirety at quantum
       * (typically for priority donation).
       * </pre>
       *
       * <code>APPLY_INCREMENT_BOOST = 2;</code>
       */
      public static final int APPLY_INCREMENT_BOOST_VALUE = 2;


      public final int getNumber() {
        return value;
      }

      /**
       * @param value The numeric wire value of the corresponding enum entry.
       * @return The enum associated with the given numeric wire value.
       * @deprecated Use {@link #forNumber(int)} instead.
       */
      @java.lang.Deprecated
      public static AdjustReason valueOf(int value) {
        return forNumber(value);
      }

      /**
       * @param value The numeric wire value of the corresponding enum entry.
       * @return The enum associated with the given numeric wire value.
       */
      public static AdjustReason forNumber(int value) {
        switch (value) {
          case 0: return IGNORE_THE_INCREMENT;
          case 1: return APPLY_INCREMENT;
          case 2: return APPLY_INCREMENT_BOOST;
          default: return null;
        }
      }

      public static com.google.protobuf.Internal.EnumLiteMap<AdjustReason>
          internalGetValueMap() {
        return internalValueMap;
      }
      private static final com.google.protobuf.Internal.EnumLiteMap<
          AdjustReason> internalValueMap =
            new com.google.protobuf.Internal.EnumLiteMap<AdjustReason>() {
              public AdjustReason findValueByNumber(int number) {
                return AdjustReason.forNumber(number);
              }
            };

      public final com.google.protobuf.Descriptors.EnumValueDescriptor
          getValueDescriptor() {
        return getDescriptor().getValues().get(ordinal());
      }
      public final com.google.protobuf.Descriptors.EnumDescriptor
          getDescriptorForType() {
        return getDescriptor();
      }
      public static final com.google.protobuf.Descriptors.EnumDescriptor
          getDescriptor() {
        return perfetto.protos.Etw.ReadyThreadEtwEvent.getDescriptor().getEnumTypes().get(0);
      }

      private static final AdjustReason[] VALUES = values();

      public static AdjustReason valueOf(
          com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
        if (desc.getType() != getDescriptor()) {
          throw new java.lang.IllegalArgumentException(
            "EnumValueDescriptor is not for this type.");
        }
        return VALUES[desc.getIndex()];
      }

      private final int value;

      private AdjustReason(int value) {
        this.value = value;
      }

      // @@protoc_insertion_point(enum_scope:perfetto.protos.ReadyThreadEtwEvent.AdjustReason)
    }

    /**
     * Protobuf enum {@code perfetto.protos.ReadyThreadEtwEvent.TraceFlag}
     */
    public enum TraceFlag
        implements com.google.protobuf.ProtocolMessageEnum {
      /**
       * <code>TRACE_FLAG_UNSPECIFIED = 0;</code>
       */
      TRACE_FLAG_UNSPECIFIED(0),
      /**
       * <pre>
       * The thread has been readied from DPC (deferred procedure call).
       * </pre>
       *
       * <code>THREAD_READIED = 1;</code>
       */
      THREAD_READIED(1),
      /**
       * <pre>
       * The kernel stack is currently swapped out.
       * </pre>
       *
       * <code>KERNEL_STACK_SWAPPED_OUT = 2;</code>
       */
      KERNEL_STACK_SWAPPED_OUT(2),
      /**
       * <pre>
       * The process address space is swapped out.
       * </pre>
       *
       * <code>PROCESS_ADDRESS_SWAPPED_OUT = 4;</code>
       */
      PROCESS_ADDRESS_SWAPPED_OUT(4),
      ;

      static {
        com.google.protobuf.RuntimeVersion.validateProtobufGencodeVersion(
          com.google.protobuf.RuntimeVersion.RuntimeDomain.PUBLIC,
          /* major= */ 4,
          /* minor= */ 29,
          /* patch= */ 3,
          /* suffix= */ "",
          TraceFlag.class.getName());
      }
      /**
       * <code>TRACE_FLAG_UNSPECIFIED = 0;</code>
       */
      public static final int TRACE_FLAG_UNSPECIFIED_VALUE = 0;
      /**
       * <pre>
       * The thread has been readied from DPC (deferred procedure call).
       * </pre>
       *
       * <code>THREAD_READIED = 1;</code>
       */
      public static final int THREAD_READIED_VALUE = 1;
      /**
       * <pre>
       * The kernel stack is currently swapped out.
       * </pre>
       *
       * <code>KERNEL_STACK_SWAPPED_OUT = 2;</code>
       */
      public static final int KERNEL_STACK_SWAPPED_OUT_VALUE = 2;
      /**
       * <pre>
       * The process address space is swapped out.
       * </pre>
       *
       * <code>PROCESS_ADDRESS_SWAPPED_OUT = 4;</code>
       */
      public static final int PROCESS_ADDRESS_SWAPPED_OUT_VALUE = 4;


      public final int getNumber() {
        return value;
      }

      /**
       * @param value The numeric wire value of the corresponding enum entry.
       * @return The enum associated with the given numeric wire value.
       * @deprecated Use {@link #forNumber(int)} instead.
       */
      @java.lang.Deprecated
      public static TraceFlag valueOf(int value) {
        return forNumber(value);
      }

      /**
       * @param value The numeric wire value of the corresponding enum entry.
       * @return The enum associated with the given numeric wire value.
       */
      public static TraceFlag forNumber(int value) {
        switch (value) {
          case 0: return TRACE_FLAG_UNSPECIFIED;
          case 1: return THREAD_READIED;
          case 2: return KERNEL_STACK_SWAPPED_OUT;
          case 4: return PROCESS_ADDRESS_SWAPPED_OUT;
          default: return null;
        }
      }

      public static com.google.protobuf.Internal.EnumLiteMap<TraceFlag>
          internalGetValueMap() {
        return internalValueMap;
      }
      private static final com.google.protobuf.Internal.EnumLiteMap<
          TraceFlag> internalValueMap =
            new com.google.protobuf.Internal.EnumLiteMap<TraceFlag>() {
              public TraceFlag findValueByNumber(int number) {
                return TraceFlag.forNumber(number);
              }
            };

      public final com.google.protobuf.Descriptors.EnumValueDescriptor
          getValueDescriptor() {
        return getDescriptor().getValues().get(ordinal());
      }
      public final com.google.protobuf.Descriptors.EnumDescriptor
          getDescriptorForType() {
        return getDescriptor();
      }
      public static final com.google.protobuf.Descriptors.EnumDescriptor
          getDescriptor() {
        return perfetto.protos.Etw.ReadyThreadEtwEvent.getDescriptor().getEnumTypes().get(1);
      }

      private static final TraceFlag[] VALUES = values();

      public static TraceFlag valueOf(
          com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
        if (desc.getType() != getDescriptor()) {
          throw new java.lang.IllegalArgumentException(
            "EnumValueDescriptor is not for this type.");
        }
        return VALUES[desc.getIndex()];
      }

      private final int value;

      private TraceFlag(int value) {
        this.value = value;
      }

      // @@protoc_insertion_point(enum_scope:perfetto.protos.ReadyThreadEtwEvent.TraceFlag)
    }

    private int bitField0_;
    public static final int T_THREAD_ID_FIELD_NUMBER = 1;
    private int tThreadId_ = 0;
    /**
     * <pre>
     * The thread identifier of the thread being readied for execution.
     * </pre>
     *
     * <code>optional uint32 t_thread_id = 1;</code>
     * @return Whether the tThreadId field is set.
     */
    @java.lang.Override
    public boolean hasTThreadId() {
      return ((bitField0_ & 0x00000001) != 0);
    }
    /**
     * <pre>
     * The thread identifier of the thread being readied for execution.
     * </pre>
     *
     * <code>optional uint32 t_thread_id = 1;</code>
     * @return The tThreadId.
     */
    @java.lang.Override
    public int getTThreadId() {
      return tThreadId_;
    }

    public static final int ADJUST_REASON_FIELD_NUMBER = 2;
    private int adjustReason_ = 0;
    /**
     * <code>optional .perfetto.protos.ReadyThreadEtwEvent.AdjustReason adjust_reason = 2;</code>
     * @return Whether the adjustReason field is set.
     */
    @java.lang.Override public boolean hasAdjustReason() {
      return ((bitField0_ & 0x00000002) != 0);
    }
    /**
     * <code>optional .perfetto.protos.ReadyThreadEtwEvent.AdjustReason adjust_reason = 2;</code>
     * @return The adjustReason.
     */
    @java.lang.Override public perfetto.protos.Etw.ReadyThreadEtwEvent.AdjustReason getAdjustReason() {
      perfetto.protos.Etw.ReadyThreadEtwEvent.AdjustReason result = perfetto.protos.Etw.ReadyThreadEtwEvent.AdjustReason.forNumber(adjustReason_);
      return result == null ? perfetto.protos.Etw.ReadyThreadEtwEvent.AdjustReason.IGNORE_THE_INCREMENT : result;
    }

    public static final int ADJUST_INCREMENT_FIELD_NUMBER = 3;
    private int adjustIncrement_ = 0;
    /**
     * <pre>
     * The value by which the priority is being adjusted.
     * </pre>
     *
     * <code>optional sint32 adjust_increment = 3;</code>
     * @return Whether the adjustIncrement field is set.
     */
    @java.lang.Override
    public boolean hasAdjustIncrement() {
      return ((bitField0_ & 0x00000004) != 0);
    }
    /**
     * <pre>
     * The value by which the priority is being adjusted.
     * </pre>
     *
     * <code>optional sint32 adjust_increment = 3;</code>
     * @return The adjustIncrement.
     */
    @java.lang.Override
    public int getAdjustIncrement() {
      return adjustIncrement_;
    }

    public static final int FLAG_FIELD_NUMBER = 4;
    private int flag_ = 0;
    /**
     * <code>optional .perfetto.protos.ReadyThreadEtwEvent.TraceFlag flag = 4;</code>
     * @return Whether the flag field is set.
     */
    @java.lang.Override public boolean hasFlag() {
      return ((bitField0_ & 0x00000008) != 0);
    }
    /**
     * <code>optional .perfetto.protos.ReadyThreadEtwEvent.TraceFlag flag = 4;</code>
     * @return The flag.
     */
    @java.lang.Override public perfetto.protos.Etw.ReadyThreadEtwEvent.TraceFlag getFlag() {
      perfetto.protos.Etw.ReadyThreadEtwEvent.TraceFlag result = perfetto.protos.Etw.ReadyThreadEtwEvent.TraceFlag.forNumber(flag_);
      return result == null ? perfetto.protos.Etw.ReadyThreadEtwEvent.TraceFlag.TRACE_FLAG_UNSPECIFIED : result;
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (((bitField0_ & 0x00000001) != 0)) {
        output.writeUInt32(1, tThreadId_);
      }
      if (((bitField0_ & 0x00000002) != 0)) {
        output.writeEnum(2, adjustReason_);
      }
      if (((bitField0_ & 0x00000004) != 0)) {
        output.writeSInt32(3, adjustIncrement_);
      }
      if (((bitField0_ & 0x00000008) != 0)) {
        output.writeEnum(4, flag_);
      }
      getUnknownFields().writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) != 0)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(1, tThreadId_);
      }
      if (((bitField0_ & 0x00000002) != 0)) {
        size += com.google.protobuf.CodedOutputStream
          .computeEnumSize(2, adjustReason_);
      }
      if (((bitField0_ & 0x00000004) != 0)) {
        size += com.google.protobuf.CodedOutputStream
          .computeSInt32Size(3, adjustIncrement_);
      }
      if (((bitField0_ & 0x00000008) != 0)) {
        size += com.google.protobuf.CodedOutputStream
          .computeEnumSize(4, flag_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof perfetto.protos.Etw.ReadyThreadEtwEvent)) {
        return super.equals(obj);
      }
      perfetto.protos.Etw.ReadyThreadEtwEvent other = (perfetto.protos.Etw.ReadyThreadEtwEvent) obj;

      if (hasTThreadId() != other.hasTThreadId()) return false;
      if (hasTThreadId()) {
        if (getTThreadId()
            != other.getTThreadId()) return false;
      }
      if (hasAdjustReason() != other.hasAdjustReason()) return false;
      if (hasAdjustReason()) {
        if (adjustReason_ != other.adjustReason_) return false;
      }
      if (hasAdjustIncrement() != other.hasAdjustIncrement()) return false;
      if (hasAdjustIncrement()) {
        if (getAdjustIncrement()
            != other.getAdjustIncrement()) return false;
      }
      if (hasFlag() != other.hasFlag()) return false;
      if (hasFlag()) {
        if (flag_ != other.flag_) return false;
      }
      if (!getUnknownFields().equals(other.getUnknownFields())) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      if (hasTThreadId()) {
        hash = (37 * hash) + T_THREAD_ID_FIELD_NUMBER;
        hash = (53 * hash) + getTThreadId();
      }
      if (hasAdjustReason()) {
        hash = (37 * hash) + ADJUST_REASON_FIELD_NUMBER;
        hash = (53 * hash) + adjustReason_;
      }
      if (hasAdjustIncrement()) {
        hash = (37 * hash) + ADJUST_INCREMENT_FIELD_NUMBER;
        hash = (53 * hash) + getAdjustIncrement();
      }
      if (hasFlag()) {
        hash = (37 * hash) + FLAG_FIELD_NUMBER;
        hash = (53 * hash) + flag_;
      }
      hash = (29 * hash) + getUnknownFields().hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static perfetto.protos.Etw.ReadyThreadEtwEvent parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static perfetto.protos.Etw.ReadyThreadEtwEvent parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static perfetto.protos.Etw.ReadyThreadEtwEvent parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static perfetto.protos.Etw.ReadyThreadEtwEvent parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static perfetto.protos.Etw.ReadyThreadEtwEvent parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static perfetto.protos.Etw.ReadyThreadEtwEvent parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static perfetto.protos.Etw.ReadyThreadEtwEvent parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input);
    }
    public static perfetto.protos.Etw.ReadyThreadEtwEvent parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    public static perfetto.protos.Etw.ReadyThreadEtwEvent parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessage
          .parseDelimitedWithIOException(PARSER, input);
    }

    public static perfetto.protos.Etw.ReadyThreadEtwEvent parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessage
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static perfetto.protos.Etw.ReadyThreadEtwEvent parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input);
    }
    public static perfetto.protos.Etw.ReadyThreadEtwEvent parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(perfetto.protos.Etw.ReadyThreadEtwEvent prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * <pre>
     * Proto definition based on the Thread_v2 CSwitch class definition
     * See: https://learn.microsoft.com/en-us/windows/win32/etw/readythread
     * </pre>
     *
     * Protobuf type {@code perfetto.protos.ReadyThreadEtwEvent}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:perfetto.protos.ReadyThreadEtwEvent)
        perfetto.protos.Etw.ReadyThreadEtwEventOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return perfetto.protos.Etw.internal_static_perfetto_protos_ReadyThreadEtwEvent_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return perfetto.protos.Etw.internal_static_perfetto_protos_ReadyThreadEtwEvent_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                perfetto.protos.Etw.ReadyThreadEtwEvent.class, perfetto.protos.Etw.ReadyThreadEtwEvent.Builder.class);
      }

      // Construct using perfetto.protos.Etw.ReadyThreadEtwEvent.newBuilder()
      private Builder() {

      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);

      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        bitField0_ = 0;
        tThreadId_ = 0;
        adjustReason_ = 0;
        adjustIncrement_ = 0;
        flag_ = 0;
        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return perfetto.protos.Etw.internal_static_perfetto_protos_ReadyThreadEtwEvent_descriptor;
      }

      @java.lang.Override
      public perfetto.protos.Etw.ReadyThreadEtwEvent getDefaultInstanceForType() {
        return perfetto.protos.Etw.ReadyThreadEtwEvent.getDefaultInstance();
      }

      @java.lang.Override
      public perfetto.protos.Etw.ReadyThreadEtwEvent build() {
        perfetto.protos.Etw.ReadyThreadEtwEvent result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public perfetto.protos.Etw.ReadyThreadEtwEvent buildPartial() {
        perfetto.protos.Etw.ReadyThreadEtwEvent result = new perfetto.protos.Etw.ReadyThreadEtwEvent(this);
        if (bitField0_ != 0) { buildPartial0(result); }
        onBuilt();
        return result;
      }

      private void buildPartial0(perfetto.protos.Etw.ReadyThreadEtwEvent result) {
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) != 0)) {
          result.tThreadId_ = tThreadId_;
          to_bitField0_ |= 0x00000001;
        }
        if (((from_bitField0_ & 0x00000002) != 0)) {
          result.adjustReason_ = adjustReason_;
          to_bitField0_ |= 0x00000002;
        }
        if (((from_bitField0_ & 0x00000004) != 0)) {
          result.adjustIncrement_ = adjustIncrement_;
          to_bitField0_ |= 0x00000004;
        }
        if (((from_bitField0_ & 0x00000008) != 0)) {
          result.flag_ = flag_;
          to_bitField0_ |= 0x00000008;
        }
        result.bitField0_ |= to_bitField0_;
      }

      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof perfetto.protos.Etw.ReadyThreadEtwEvent) {
          return mergeFrom((perfetto.protos.Etw.ReadyThreadEtwEvent)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(perfetto.protos.Etw.ReadyThreadEtwEvent other) {
        if (other == perfetto.protos.Etw.ReadyThreadEtwEvent.getDefaultInstance()) return this;
        if (other.hasTThreadId()) {
          setTThreadId(other.getTThreadId());
        }
        if (other.hasAdjustReason()) {
          setAdjustReason(other.getAdjustReason());
        }
        if (other.hasAdjustIncrement()) {
          setAdjustIncrement(other.getAdjustIncrement());
        }
        if (other.hasFlag()) {
          setFlag(other.getFlag());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        if (extensionRegistry == null) {
          throw new java.lang.NullPointerException();
        }
        try {
          boolean done = false;
          while (!done) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                done = true;
                break;
              case 8: {
                tThreadId_ = input.readUInt32();
                bitField0_ |= 0x00000001;
                break;
              } // case 8
              case 16: {
                int tmpRaw = input.readEnum();
                perfetto.protos.Etw.ReadyThreadEtwEvent.AdjustReason tmpValue =
                    perfetto.protos.Etw.ReadyThreadEtwEvent.AdjustReason.forNumber(tmpRaw);
                if (tmpValue == null) {
                  mergeUnknownVarintField(2, tmpRaw);
                } else {
                  adjustReason_ = tmpRaw;
                  bitField0_ |= 0x00000002;
                }
                break;
              } // case 16
              case 24: {
                adjustIncrement_ = input.readSInt32();
                bitField0_ |= 0x00000004;
                break;
              } // case 24
              case 32: {
                int tmpRaw = input.readEnum();
                perfetto.protos.Etw.ReadyThreadEtwEvent.TraceFlag tmpValue =
                    perfetto.protos.Etw.ReadyThreadEtwEvent.TraceFlag.forNumber(tmpRaw);
                if (tmpValue == null) {
                  mergeUnknownVarintField(4, tmpRaw);
                } else {
                  flag_ = tmpRaw;
                  bitField0_ |= 0x00000008;
                }
                break;
              } // case 32
              default: {
                if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                  done = true; // was an endgroup tag
                }
                break;
              } // default:
            } // switch (tag)
          } // while (!done)
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.unwrapIOException();
        } finally {
          onChanged();
        } // finally
        return this;
      }
      private int bitField0_;

      private int tThreadId_ ;
      /**
       * <pre>
       * The thread identifier of the thread being readied for execution.
       * </pre>
       *
       * <code>optional uint32 t_thread_id = 1;</code>
       * @return Whether the tThreadId field is set.
       */
      @java.lang.Override
      public boolean hasTThreadId() {
        return ((bitField0_ & 0x00000001) != 0);
      }
      /**
       * <pre>
       * The thread identifier of the thread being readied for execution.
       * </pre>
       *
       * <code>optional uint32 t_thread_id = 1;</code>
       * @return The tThreadId.
       */
      @java.lang.Override
      public int getTThreadId() {
        return tThreadId_;
      }
      /**
       * <pre>
       * The thread identifier of the thread being readied for execution.
       * </pre>
       *
       * <code>optional uint32 t_thread_id = 1;</code>
       * @param value The tThreadId to set.
       * @return This builder for chaining.
       */
      public Builder setTThreadId(int value) {

        tThreadId_ = value;
        bitField0_ |= 0x00000001;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * The thread identifier of the thread being readied for execution.
       * </pre>
       *
       * <code>optional uint32 t_thread_id = 1;</code>
       * @return This builder for chaining.
       */
      public Builder clearTThreadId() {
        bitField0_ = (bitField0_ & ~0x00000001);
        tThreadId_ = 0;
        onChanged();
        return this;
      }

      private int adjustReason_ = 0;
      /**
       * <code>optional .perfetto.protos.ReadyThreadEtwEvent.AdjustReason adjust_reason = 2;</code>
       * @return Whether the adjustReason field is set.
       */
      @java.lang.Override public boolean hasAdjustReason() {
        return ((bitField0_ & 0x00000002) != 0);
      }
      /**
       * <code>optional .perfetto.protos.ReadyThreadEtwEvent.AdjustReason adjust_reason = 2;</code>
       * @return The adjustReason.
       */
      @java.lang.Override
      public perfetto.protos.Etw.ReadyThreadEtwEvent.AdjustReason getAdjustReason() {
        perfetto.protos.Etw.ReadyThreadEtwEvent.AdjustReason result = perfetto.protos.Etw.ReadyThreadEtwEvent.AdjustReason.forNumber(adjustReason_);
        return result == null ? perfetto.protos.Etw.ReadyThreadEtwEvent.AdjustReason.IGNORE_THE_INCREMENT : result;
      }
      /**
       * <code>optional .perfetto.protos.ReadyThreadEtwEvent.AdjustReason adjust_reason = 2;</code>
       * @param value The adjustReason to set.
       * @return This builder for chaining.
       */
      public Builder setAdjustReason(perfetto.protos.Etw.ReadyThreadEtwEvent.AdjustReason value) {
        if (value == null) {
          throw new NullPointerException();
        }
        bitField0_ |= 0x00000002;
        adjustReason_ = value.getNumber();
        onChanged();
        return this;
      }
      /**
       * <code>optional .perfetto.protos.ReadyThreadEtwEvent.AdjustReason adjust_reason = 2;</code>
       * @return This builder for chaining.
       */
      public Builder clearAdjustReason() {
        bitField0_ = (bitField0_ & ~0x00000002);
        adjustReason_ = 0;
        onChanged();
        return this;
      }

      private int adjustIncrement_ ;
      /**
       * <pre>
       * The value by which the priority is being adjusted.
       * </pre>
       *
       * <code>optional sint32 adjust_increment = 3;</code>
       * @return Whether the adjustIncrement field is set.
       */
      @java.lang.Override
      public boolean hasAdjustIncrement() {
        return ((bitField0_ & 0x00000004) != 0);
      }
      /**
       * <pre>
       * The value by which the priority is being adjusted.
       * </pre>
       *
       * <code>optional sint32 adjust_increment = 3;</code>
       * @return The adjustIncrement.
       */
      @java.lang.Override
      public int getAdjustIncrement() {
        return adjustIncrement_;
      }
      /**
       * <pre>
       * The value by which the priority is being adjusted.
       * </pre>
       *
       * <code>optional sint32 adjust_increment = 3;</code>
       * @param value The adjustIncrement to set.
       * @return This builder for chaining.
       */
      public Builder setAdjustIncrement(int value) {

        adjustIncrement_ = value;
        bitField0_ |= 0x00000004;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * The value by which the priority is being adjusted.
       * </pre>
       *
       * <code>optional sint32 adjust_increment = 3;</code>
       * @return This builder for chaining.
       */
      public Builder clearAdjustIncrement() {
        bitField0_ = (bitField0_ & ~0x00000004);
        adjustIncrement_ = 0;
        onChanged();
        return this;
      }

      private int flag_ = 0;
      /**
       * <code>optional .perfetto.protos.ReadyThreadEtwEvent.TraceFlag flag = 4;</code>
       * @return Whether the flag field is set.
       */
      @java.lang.Override public boolean hasFlag() {
        return ((bitField0_ & 0x00000008) != 0);
      }
      /**
       * <code>optional .perfetto.protos.ReadyThreadEtwEvent.TraceFlag flag = 4;</code>
       * @return The flag.
       */
      @java.lang.Override
      public perfetto.protos.Etw.ReadyThreadEtwEvent.TraceFlag getFlag() {
        perfetto.protos.Etw.ReadyThreadEtwEvent.TraceFlag result = perfetto.protos.Etw.ReadyThreadEtwEvent.TraceFlag.forNumber(flag_);
        return result == null ? perfetto.protos.Etw.ReadyThreadEtwEvent.TraceFlag.TRACE_FLAG_UNSPECIFIED : result;
      }
      /**
       * <code>optional .perfetto.protos.ReadyThreadEtwEvent.TraceFlag flag = 4;</code>
       * @param value The flag to set.
       * @return This builder for chaining.
       */
      public Builder setFlag(perfetto.protos.Etw.ReadyThreadEtwEvent.TraceFlag value) {
        if (value == null) {
          throw new NullPointerException();
        }
        bitField0_ |= 0x00000008;
        flag_ = value.getNumber();
        onChanged();
        return this;
      }
      /**
       * <code>optional .perfetto.protos.ReadyThreadEtwEvent.TraceFlag flag = 4;</code>
       * @return This builder for chaining.
       */
      public Builder clearFlag() {
        bitField0_ = (bitField0_ & ~0x00000008);
        flag_ = 0;
        onChanged();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:perfetto.protos.ReadyThreadEtwEvent)
    }

    // @@protoc_insertion_point(class_scope:perfetto.protos.ReadyThreadEtwEvent)
    private static final perfetto.protos.Etw.ReadyThreadEtwEvent DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new perfetto.protos.Etw.ReadyThreadEtwEvent();
    }

    public static perfetto.protos.Etw.ReadyThreadEtwEvent getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<ReadyThreadEtwEvent>
        PARSER = new com.google.protobuf.AbstractParser<ReadyThreadEtwEvent>() {
      @java.lang.Override
      public ReadyThreadEtwEvent parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        Builder builder = newBuilder();
        try {
          builder.mergeFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.setUnfinishedMessage(builder.buildPartial());
        } catch (com.google.protobuf.UninitializedMessageException e) {
          throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
        } catch (java.io.IOException e) {
          throw new com.google.protobuf.InvalidProtocolBufferException(e)
              .setUnfinishedMessage(builder.buildPartial());
        }
        return builder.buildPartial();
      }
    };

    public static com.google.protobuf.Parser<ReadyThreadEtwEvent> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<ReadyThreadEtwEvent> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public perfetto.protos.Etw.ReadyThreadEtwEvent getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_perfetto_protos_CSwitchEtwEvent_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_perfetto_protos_CSwitchEtwEvent_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_perfetto_protos_ReadyThreadEtwEvent_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_perfetto_protos_ReadyThreadEtwEvent_fieldAccessorTable;

  public static com.google.protobuf.Descriptors.FileDescriptor
      getDescriptor() {
    return descriptor;
  }
  private static  com.google.protobuf.Descriptors.FileDescriptor
      descriptor;
  static {
    java.lang.String[] descriptorData = {
      "\n#protos/perfetto/trace/etw/etw.proto\022\017p" +
      "erfetto.protos\"\370\n\n\017CSwitchEtwEvent\022\025\n\rne" +
      "w_thread_id\030\001 \001(\r\022\025\n\rold_thread_id\030\002 \001(\r" +
      "\022\033\n\023new_thread_priority\030\003 \001(\021\022\033\n\023old_thr" +
      "ead_priority\030\004 \001(\021\022\030\n\020previous_c_state\030\005" +
      " \001(\r\022T\n\026old_thread_wait_reason\030\006 \001(\01624.p" +
      "erfetto.protos.CSwitchEtwEvent.OldThread" +
      "WaitReason\022P\n\024old_thread_wait_mode\030\007 \001(\016" +
      "22.perfetto.protos.CSwitchEtwEvent.OldTh" +
      "readWaitMode\022I\n\020old_thread_state\030\010 \001(\0162/" +
      ".perfetto.protos.CSwitchEtwEvent.OldThre" +
      "adState\022\'\n\037old_thread_wait_ideal_process" +
      "or\030\t \001(\021\022\034\n\024new_thread_wait_time\030\n \001(\r\"\351" +
      "\005\n\023OldThreadWaitReason\022\r\n\tEXECUTIVE\020\000\022\r\n" +
      "\tFREE_PAGE\020\001\022\013\n\007PAGE_IN\020\002\022\023\n\017POOL_ALLOCA" +
      "TION\020\003\022\023\n\017DELAY_EXECUTION\020\004\022\013\n\007SUSPEND\020\005" +
      "\022\020\n\014USER_REQUEST\020\006\022\020\n\014WR_EXECUTIVE\020\007\022\020\n\014" +
      "WR_FREE_PAGE\020\010\022\016\n\nWR_PAGE_IN\020\t\022\026\n\022WR_POO" +
      "L_ALLOCATION\020\n\022\026\n\022WR_DELAY_EXECUTION\020\013\022\020" +
      "\n\014WR_SUSPENDED\020\014\022\023\n\017WR_USER_REQUEST\020\r\022\021\n" +
      "\rWR_EVENT_PAIR\020\016\022\014\n\010WR_QUEUE\020\017\022\023\n\017WR_LPC" +
      "_RECEIVER\020\020\022\020\n\014WR_LPC_REPLY\020\021\022\025\n\021WR_VIRT" +
      "UAL_MEMORY\020\022\022\017\n\013WR_PAGE_OUT\020\023\022\022\n\016WR_REND" +
      "EZ_VOUS\020\024\022\022\n\016WR_KEYED_EVENT\020\025\022\021\n\rWR_TERM" +
      "INATED\020\026\022\026\n\022WR_PROCESS_IN_SWAP\020\027\022\027\n\023WR_C" +
      "PU_RATE_CONTROL\020\030\022\024\n\020WR_CALLOUT_STACK\020\031\022" +
      "\r\n\tWR_KERNEL\020\032\022\017\n\013WR_RESOURCE\020\033\022\020\n\014WR_PU" +
      "SH_LOCK\020\034\022\014\n\010WR_MUTEX\020\035\022\022\n\016WR_QUANTUM_EN" +
      "D\020\036\022\023\n\017WR_DISPATCH_INT\020\037\022\020\n\014WR_PREEMPTED" +
      "\020 \022\026\n\022WR_YIELD_EXECUTION\020!\022\021\n\rWR_FAST_MU" +
      "TEX\020\"\022\022\n\016WR_GUARD_MUTEX\020#\022\016\n\nWR_RUNDOWN\020" +
      "$\022\027\n\023MAXIMUM_WAIT_REASON\020%\"3\n\021OldThreadW" +
      "aitMode\022\017\n\013KERNEL_MODE\020\000\022\r\n\tUSER_MODE\020\001\"" +
      "\207\001\n\016OldThreadState\022\017\n\013INITIALIZED\020\000\022\t\n\005R" +
      "EADY\020\001\022\013\n\007RUNNING\020\002\022\013\n\007STANDBY\020\003\022\016\n\nTERM" +
      "INATED\020\004\022\013\n\007WAITING\020\005\022\016\n\nTRANSITION\020\006\022\022\n" +
      "\016DEFERRED_READY\020\007\"\242\003\n\023ReadyThreadEtwEven" +
      "t\022\023\n\013t_thread_id\030\001 \001(\r\022H\n\radjust_reason\030" +
      "\002 \001(\01621.perfetto.protos.ReadyThreadEtwEv" +
      "ent.AdjustReason\022\030\n\020adjust_increment\030\003 \001" +
      "(\021\022<\n\004flag\030\004 \001(\0162..perfetto.protos.Ready" +
      "ThreadEtwEvent.TraceFlag\"X\n\014AdjustReason" +
      "\022\030\n\024IGNORE_THE_INCREMENT\020\000\022\023\n\017APPLY_INCR" +
      "EMENT\020\001\022\031\n\025APPLY_INCREMENT_BOOST\020\002\"z\n\tTr" +
      "aceFlag\022\032\n\026TRACE_FLAG_UNSPECIFIED\020\000\022\022\n\016T" +
      "HREAD_READIED\020\001\022\034\n\030KERNEL_STACK_SWAPPED_" +
      "OUT\020\002\022\037\n\033PROCESS_ADDRESS_SWAPPED_OUT\020\004"
    };
    descriptor = com.google.protobuf.Descriptors.FileDescriptor
      .internalBuildGeneratedFileFrom(descriptorData,
        new com.google.protobuf.Descriptors.FileDescriptor[] {
        });
    internal_static_perfetto_protos_CSwitchEtwEvent_descriptor =
      getDescriptor().getMessageTypes().get(0);
    internal_static_perfetto_protos_CSwitchEtwEvent_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessage.FieldAccessorTable(
        internal_static_perfetto_protos_CSwitchEtwEvent_descriptor,
        new java.lang.String[] { "NewThreadId", "OldThreadId", "NewThreadPriority", "OldThreadPriority", "PreviousCState", "OldThreadWaitReason", "OldThreadWaitMode", "OldThreadState", "OldThreadWaitIdealProcessor", "NewThreadWaitTime", });
    internal_static_perfetto_protos_ReadyThreadEtwEvent_descriptor =
      getDescriptor().getMessageTypes().get(1);
    internal_static_perfetto_protos_ReadyThreadEtwEvent_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessage.FieldAccessorTable(
        internal_static_perfetto_protos_ReadyThreadEtwEvent_descriptor,
        new java.lang.String[] { "TThreadId", "AdjustReason", "AdjustIncrement", "Flag", });
    descriptor.resolveAllFeaturesImmutable();
  }

  // @@protoc_insertion_point(outer_class_scope)
}
