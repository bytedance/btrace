// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: protos/perfetto/config/android/network_trace_config.proto
// Protobuf Java Version: 4.29.3

package perfetto.protos;

public final class NetworkTraceConfig {
  private NetworkTraceConfig() {}
  static {
    com.google.protobuf.RuntimeVersion.validateProtobufGencodeVersion(
      com.google.protobuf.RuntimeVersion.RuntimeDomain.PUBLIC,
      /* major= */ 4,
      /* minor= */ 29,
      /* patch= */ 3,
      /* suffix= */ "",
      NetworkTraceConfig.class.getName());
  }
  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistryLite registry) {
  }

  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistry registry) {
    registerAllExtensions(
        (com.google.protobuf.ExtensionRegistryLite) registry);
  }
  public interface NetworkPacketTraceConfigOrBuilder extends
      // @@protoc_insertion_point(interface_extends:perfetto.protos.NetworkPacketTraceConfig)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <pre>
     * Polling frequency in milliseconds. Network tracing writes to a fixed size
     * ring buffer. The polling interval should be such that the ring buffer is
     * unlikely to fill in that interval (or that filling is an acceptable risk).
     * The minimum polling rate is 100ms (values below this are ignored).
     * Introduced in Android 14 (U).
     * </pre>
     *
     * <code>optional uint32 poll_ms = 1;</code>
     * @return Whether the pollMs field is set.
     */
    boolean hasPollMs();
    /**
     * <pre>
     * Polling frequency in milliseconds. Network tracing writes to a fixed size
     * ring buffer. The polling interval should be such that the ring buffer is
     * unlikely to fill in that interval (or that filling is an acceptable risk).
     * The minimum polling rate is 100ms (values below this are ignored).
     * Introduced in Android 14 (U).
     * </pre>
     *
     * <code>optional uint32 poll_ms = 1;</code>
     * @return The pollMs.
     */
    int getPollMs();

    /**
     * <pre>
     * The aggregation_threshold is the number of packets at which an event will
     * switch from per-packet details to aggregate details. For example, a value
     * of 50 means that if a particular event (grouped by the unique combinations
     * of metadata fields: {interface, direction, uid, etc}) has fewer than 50
     * packets, the exact timestamp and length are recorded for each packet. If
     * there were 50 or more packets in an event, it would only record the total
     * duration, packets, and length. A value of zero or unspecified will always
     * / record per-packet details. A value of 1 always records aggregate details.
     * </pre>
     *
     * <code>optional uint32 aggregation_threshold = 2;</code>
     * @return Whether the aggregationThreshold field is set.
     */
    boolean hasAggregationThreshold();
    /**
     * <pre>
     * The aggregation_threshold is the number of packets at which an event will
     * switch from per-packet details to aggregate details. For example, a value
     * of 50 means that if a particular event (grouped by the unique combinations
     * of metadata fields: {interface, direction, uid, etc}) has fewer than 50
     * packets, the exact timestamp and length are recorded for each packet. If
     * there were 50 or more packets in an event, it would only record the total
     * duration, packets, and length. A value of zero or unspecified will always
     * / record per-packet details. A value of 1 always records aggregate details.
     * </pre>
     *
     * <code>optional uint32 aggregation_threshold = 2;</code>
     * @return The aggregationThreshold.
     */
    int getAggregationThreshold();

    /**
     * <pre>
     * Specifies the maximum number of packet contexts to intern at a time. This
     * prevents the interning table from growing too large and controls whether
     * interning is enabled or disabled (a value of zero disables interning and
     * is the default). When a data sources interning table reaches this amount,
     * packet contexts will be inlined into NetworkPacketEvents.
     * </pre>
     *
     * <code>optional uint32 intern_limit = 3;</code>
     * @return Whether the internLimit field is set.
     */
    boolean hasInternLimit();
    /**
     * <pre>
     * Specifies the maximum number of packet contexts to intern at a time. This
     * prevents the interning table from growing too large and controls whether
     * interning is enabled or disabled (a value of zero disables interning and
     * is the default). When a data sources interning table reaches this amount,
     * packet contexts will be inlined into NetworkPacketEvents.
     * </pre>
     *
     * <code>optional uint32 intern_limit = 3;</code>
     * @return The internLimit.
     */
    int getInternLimit();

    /**
     * <pre>
     * The following fields specify whether certain fields should be dropped from
     * the output. Dropping fields improves normalization results, reduces the
     * size of the interning table, and slightly reduces event size.
     * </pre>
     *
     * <code>optional bool drop_local_port = 4;</code>
     * @return Whether the dropLocalPort field is set.
     */
    boolean hasDropLocalPort();
    /**
     * <pre>
     * The following fields specify whether certain fields should be dropped from
     * the output. Dropping fields improves normalization results, reduces the
     * size of the interning table, and slightly reduces event size.
     * </pre>
     *
     * <code>optional bool drop_local_port = 4;</code>
     * @return The dropLocalPort.
     */
    boolean getDropLocalPort();

    /**
     * <code>optional bool drop_remote_port = 5;</code>
     * @return Whether the dropRemotePort field is set.
     */
    boolean hasDropRemotePort();
    /**
     * <code>optional bool drop_remote_port = 5;</code>
     * @return The dropRemotePort.
     */
    boolean getDropRemotePort();

    /**
     * <code>optional bool drop_tcp_flags = 6;</code>
     * @return Whether the dropTcpFlags field is set.
     */
    boolean hasDropTcpFlags();
    /**
     * <code>optional bool drop_tcp_flags = 6;</code>
     * @return The dropTcpFlags.
     */
    boolean getDropTcpFlags();
  }
  /**
   * <pre>
   * Network tracing data source that records details on all packets sent or
   * received by the network.
   * </pre>
   *
   * Protobuf type {@code perfetto.protos.NetworkPacketTraceConfig}
   */
  public static final class NetworkPacketTraceConfig extends
      com.google.protobuf.GeneratedMessage implements
      // @@protoc_insertion_point(message_implements:perfetto.protos.NetworkPacketTraceConfig)
      NetworkPacketTraceConfigOrBuilder {
  private static final long serialVersionUID = 0L;
    static {
      com.google.protobuf.RuntimeVersion.validateProtobufGencodeVersion(
        com.google.protobuf.RuntimeVersion.RuntimeDomain.PUBLIC,
        /* major= */ 4,
        /* minor= */ 29,
        /* patch= */ 3,
        /* suffix= */ "",
        NetworkPacketTraceConfig.class.getName());
    }
    // Use NetworkPacketTraceConfig.newBuilder() to construct.
    private NetworkPacketTraceConfig(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
    }
    private NetworkPacketTraceConfig() {
    }

    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return perfetto.protos.NetworkTraceConfig.internal_static_perfetto_protos_NetworkPacketTraceConfig_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return perfetto.protos.NetworkTraceConfig.internal_static_perfetto_protos_NetworkPacketTraceConfig_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              perfetto.protos.NetworkTraceConfig.NetworkPacketTraceConfig.class, perfetto.protos.NetworkTraceConfig.NetworkPacketTraceConfig.Builder.class);
    }

    private int bitField0_;
    public static final int POLL_MS_FIELD_NUMBER = 1;
    private int pollMs_ = 0;
    /**
     * <pre>
     * Polling frequency in milliseconds. Network tracing writes to a fixed size
     * ring buffer. The polling interval should be such that the ring buffer is
     * unlikely to fill in that interval (or that filling is an acceptable risk).
     * The minimum polling rate is 100ms (values below this are ignored).
     * Introduced in Android 14 (U).
     * </pre>
     *
     * <code>optional uint32 poll_ms = 1;</code>
     * @return Whether the pollMs field is set.
     */
    @java.lang.Override
    public boolean hasPollMs() {
      return ((bitField0_ & 0x00000001) != 0);
    }
    /**
     * <pre>
     * Polling frequency in milliseconds. Network tracing writes to a fixed size
     * ring buffer. The polling interval should be such that the ring buffer is
     * unlikely to fill in that interval (or that filling is an acceptable risk).
     * The minimum polling rate is 100ms (values below this are ignored).
     * Introduced in Android 14 (U).
     * </pre>
     *
     * <code>optional uint32 poll_ms = 1;</code>
     * @return The pollMs.
     */
    @java.lang.Override
    public int getPollMs() {
      return pollMs_;
    }

    public static final int AGGREGATION_THRESHOLD_FIELD_NUMBER = 2;
    private int aggregationThreshold_ = 0;
    /**
     * <pre>
     * The aggregation_threshold is the number of packets at which an event will
     * switch from per-packet details to aggregate details. For example, a value
     * of 50 means that if a particular event (grouped by the unique combinations
     * of metadata fields: {interface, direction, uid, etc}) has fewer than 50
     * packets, the exact timestamp and length are recorded for each packet. If
     * there were 50 or more packets in an event, it would only record the total
     * duration, packets, and length. A value of zero or unspecified will always
     * / record per-packet details. A value of 1 always records aggregate details.
     * </pre>
     *
     * <code>optional uint32 aggregation_threshold = 2;</code>
     * @return Whether the aggregationThreshold field is set.
     */
    @java.lang.Override
    public boolean hasAggregationThreshold() {
      return ((bitField0_ & 0x00000002) != 0);
    }
    /**
     * <pre>
     * The aggregation_threshold is the number of packets at which an event will
     * switch from per-packet details to aggregate details. For example, a value
     * of 50 means that if a particular event (grouped by the unique combinations
     * of metadata fields: {interface, direction, uid, etc}) has fewer than 50
     * packets, the exact timestamp and length are recorded for each packet. If
     * there were 50 or more packets in an event, it would only record the total
     * duration, packets, and length. A value of zero or unspecified will always
     * / record per-packet details. A value of 1 always records aggregate details.
     * </pre>
     *
     * <code>optional uint32 aggregation_threshold = 2;</code>
     * @return The aggregationThreshold.
     */
    @java.lang.Override
    public int getAggregationThreshold() {
      return aggregationThreshold_;
    }

    public static final int INTERN_LIMIT_FIELD_NUMBER = 3;
    private int internLimit_ = 0;
    /**
     * <pre>
     * Specifies the maximum number of packet contexts to intern at a time. This
     * prevents the interning table from growing too large and controls whether
     * interning is enabled or disabled (a value of zero disables interning and
     * is the default). When a data sources interning table reaches this amount,
     * packet contexts will be inlined into NetworkPacketEvents.
     * </pre>
     *
     * <code>optional uint32 intern_limit = 3;</code>
     * @return Whether the internLimit field is set.
     */
    @java.lang.Override
    public boolean hasInternLimit() {
      return ((bitField0_ & 0x00000004) != 0);
    }
    /**
     * <pre>
     * Specifies the maximum number of packet contexts to intern at a time. This
     * prevents the interning table from growing too large and controls whether
     * interning is enabled or disabled (a value of zero disables interning and
     * is the default). When a data sources interning table reaches this amount,
     * packet contexts will be inlined into NetworkPacketEvents.
     * </pre>
     *
     * <code>optional uint32 intern_limit = 3;</code>
     * @return The internLimit.
     */
    @java.lang.Override
    public int getInternLimit() {
      return internLimit_;
    }

    public static final int DROP_LOCAL_PORT_FIELD_NUMBER = 4;
    private boolean dropLocalPort_ = false;
    /**
     * <pre>
     * The following fields specify whether certain fields should be dropped from
     * the output. Dropping fields improves normalization results, reduces the
     * size of the interning table, and slightly reduces event size.
     * </pre>
     *
     * <code>optional bool drop_local_port = 4;</code>
     * @return Whether the dropLocalPort field is set.
     */
    @java.lang.Override
    public boolean hasDropLocalPort() {
      return ((bitField0_ & 0x00000008) != 0);
    }
    /**
     * <pre>
     * The following fields specify whether certain fields should be dropped from
     * the output. Dropping fields improves normalization results, reduces the
     * size of the interning table, and slightly reduces event size.
     * </pre>
     *
     * <code>optional bool drop_local_port = 4;</code>
     * @return The dropLocalPort.
     */
    @java.lang.Override
    public boolean getDropLocalPort() {
      return dropLocalPort_;
    }

    public static final int DROP_REMOTE_PORT_FIELD_NUMBER = 5;
    private boolean dropRemotePort_ = false;
    /**
     * <code>optional bool drop_remote_port = 5;</code>
     * @return Whether the dropRemotePort field is set.
     */
    @java.lang.Override
    public boolean hasDropRemotePort() {
      return ((bitField0_ & 0x00000010) != 0);
    }
    /**
     * <code>optional bool drop_remote_port = 5;</code>
     * @return The dropRemotePort.
     */
    @java.lang.Override
    public boolean getDropRemotePort() {
      return dropRemotePort_;
    }

    public static final int DROP_TCP_FLAGS_FIELD_NUMBER = 6;
    private boolean dropTcpFlags_ = false;
    /**
     * <code>optional bool drop_tcp_flags = 6;</code>
     * @return Whether the dropTcpFlags field is set.
     */
    @java.lang.Override
    public boolean hasDropTcpFlags() {
      return ((bitField0_ & 0x00000020) != 0);
    }
    /**
     * <code>optional bool drop_tcp_flags = 6;</code>
     * @return The dropTcpFlags.
     */
    @java.lang.Override
    public boolean getDropTcpFlags() {
      return dropTcpFlags_;
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (((bitField0_ & 0x00000001) != 0)) {
        output.writeUInt32(1, pollMs_);
      }
      if (((bitField0_ & 0x00000002) != 0)) {
        output.writeUInt32(2, aggregationThreshold_);
      }
      if (((bitField0_ & 0x00000004) != 0)) {
        output.writeUInt32(3, internLimit_);
      }
      if (((bitField0_ & 0x00000008) != 0)) {
        output.writeBool(4, dropLocalPort_);
      }
      if (((bitField0_ & 0x00000010) != 0)) {
        output.writeBool(5, dropRemotePort_);
      }
      if (((bitField0_ & 0x00000020) != 0)) {
        output.writeBool(6, dropTcpFlags_);
      }
      getUnknownFields().writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) != 0)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(1, pollMs_);
      }
      if (((bitField0_ & 0x00000002) != 0)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(2, aggregationThreshold_);
      }
      if (((bitField0_ & 0x00000004) != 0)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(3, internLimit_);
      }
      if (((bitField0_ & 0x00000008) != 0)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(4, dropLocalPort_);
      }
      if (((bitField0_ & 0x00000010) != 0)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(5, dropRemotePort_);
      }
      if (((bitField0_ & 0x00000020) != 0)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(6, dropTcpFlags_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof perfetto.protos.NetworkTraceConfig.NetworkPacketTraceConfig)) {
        return super.equals(obj);
      }
      perfetto.protos.NetworkTraceConfig.NetworkPacketTraceConfig other = (perfetto.protos.NetworkTraceConfig.NetworkPacketTraceConfig) obj;

      if (hasPollMs() != other.hasPollMs()) return false;
      if (hasPollMs()) {
        if (getPollMs()
            != other.getPollMs()) return false;
      }
      if (hasAggregationThreshold() != other.hasAggregationThreshold()) return false;
      if (hasAggregationThreshold()) {
        if (getAggregationThreshold()
            != other.getAggregationThreshold()) return false;
      }
      if (hasInternLimit() != other.hasInternLimit()) return false;
      if (hasInternLimit()) {
        if (getInternLimit()
            != other.getInternLimit()) return false;
      }
      if (hasDropLocalPort() != other.hasDropLocalPort()) return false;
      if (hasDropLocalPort()) {
        if (getDropLocalPort()
            != other.getDropLocalPort()) return false;
      }
      if (hasDropRemotePort() != other.hasDropRemotePort()) return false;
      if (hasDropRemotePort()) {
        if (getDropRemotePort()
            != other.getDropRemotePort()) return false;
      }
      if (hasDropTcpFlags() != other.hasDropTcpFlags()) return false;
      if (hasDropTcpFlags()) {
        if (getDropTcpFlags()
            != other.getDropTcpFlags()) return false;
      }
      if (!getUnknownFields().equals(other.getUnknownFields())) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      if (hasPollMs()) {
        hash = (37 * hash) + POLL_MS_FIELD_NUMBER;
        hash = (53 * hash) + getPollMs();
      }
      if (hasAggregationThreshold()) {
        hash = (37 * hash) + AGGREGATION_THRESHOLD_FIELD_NUMBER;
        hash = (53 * hash) + getAggregationThreshold();
      }
      if (hasInternLimit()) {
        hash = (37 * hash) + INTERN_LIMIT_FIELD_NUMBER;
        hash = (53 * hash) + getInternLimit();
      }
      if (hasDropLocalPort()) {
        hash = (37 * hash) + DROP_LOCAL_PORT_FIELD_NUMBER;
        hash = (53 * hash) + com.google.protobuf.Internal.hashBoolean(
            getDropLocalPort());
      }
      if (hasDropRemotePort()) {
        hash = (37 * hash) + DROP_REMOTE_PORT_FIELD_NUMBER;
        hash = (53 * hash) + com.google.protobuf.Internal.hashBoolean(
            getDropRemotePort());
      }
      if (hasDropTcpFlags()) {
        hash = (37 * hash) + DROP_TCP_FLAGS_FIELD_NUMBER;
        hash = (53 * hash) + com.google.protobuf.Internal.hashBoolean(
            getDropTcpFlags());
      }
      hash = (29 * hash) + getUnknownFields().hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static perfetto.protos.NetworkTraceConfig.NetworkPacketTraceConfig parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static perfetto.protos.NetworkTraceConfig.NetworkPacketTraceConfig parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static perfetto.protos.NetworkTraceConfig.NetworkPacketTraceConfig parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static perfetto.protos.NetworkTraceConfig.NetworkPacketTraceConfig parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static perfetto.protos.NetworkTraceConfig.NetworkPacketTraceConfig parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static perfetto.protos.NetworkTraceConfig.NetworkPacketTraceConfig parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static perfetto.protos.NetworkTraceConfig.NetworkPacketTraceConfig parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input);
    }
    public static perfetto.protos.NetworkTraceConfig.NetworkPacketTraceConfig parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    public static perfetto.protos.NetworkTraceConfig.NetworkPacketTraceConfig parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessage
          .parseDelimitedWithIOException(PARSER, input);
    }

    public static perfetto.protos.NetworkTraceConfig.NetworkPacketTraceConfig parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessage
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static perfetto.protos.NetworkTraceConfig.NetworkPacketTraceConfig parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input);
    }
    public static perfetto.protos.NetworkTraceConfig.NetworkPacketTraceConfig parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(perfetto.protos.NetworkTraceConfig.NetworkPacketTraceConfig prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * <pre>
     * Network tracing data source that records details on all packets sent or
     * received by the network.
     * </pre>
     *
     * Protobuf type {@code perfetto.protos.NetworkPacketTraceConfig}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:perfetto.protos.NetworkPacketTraceConfig)
        perfetto.protos.NetworkTraceConfig.NetworkPacketTraceConfigOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return perfetto.protos.NetworkTraceConfig.internal_static_perfetto_protos_NetworkPacketTraceConfig_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return perfetto.protos.NetworkTraceConfig.internal_static_perfetto_protos_NetworkPacketTraceConfig_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                perfetto.protos.NetworkTraceConfig.NetworkPacketTraceConfig.class, perfetto.protos.NetworkTraceConfig.NetworkPacketTraceConfig.Builder.class);
      }

      // Construct using perfetto.protos.NetworkTraceConfig.NetworkPacketTraceConfig.newBuilder()
      private Builder() {

      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);

      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        bitField0_ = 0;
        pollMs_ = 0;
        aggregationThreshold_ = 0;
        internLimit_ = 0;
        dropLocalPort_ = false;
        dropRemotePort_ = false;
        dropTcpFlags_ = false;
        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return perfetto.protos.NetworkTraceConfig.internal_static_perfetto_protos_NetworkPacketTraceConfig_descriptor;
      }

      @java.lang.Override
      public perfetto.protos.NetworkTraceConfig.NetworkPacketTraceConfig getDefaultInstanceForType() {
        return perfetto.protos.NetworkTraceConfig.NetworkPacketTraceConfig.getDefaultInstance();
      }

      @java.lang.Override
      public perfetto.protos.NetworkTraceConfig.NetworkPacketTraceConfig build() {
        perfetto.protos.NetworkTraceConfig.NetworkPacketTraceConfig result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public perfetto.protos.NetworkTraceConfig.NetworkPacketTraceConfig buildPartial() {
        perfetto.protos.NetworkTraceConfig.NetworkPacketTraceConfig result = new perfetto.protos.NetworkTraceConfig.NetworkPacketTraceConfig(this);
        if (bitField0_ != 0) { buildPartial0(result); }
        onBuilt();
        return result;
      }

      private void buildPartial0(perfetto.protos.NetworkTraceConfig.NetworkPacketTraceConfig result) {
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) != 0)) {
          result.pollMs_ = pollMs_;
          to_bitField0_ |= 0x00000001;
        }
        if (((from_bitField0_ & 0x00000002) != 0)) {
          result.aggregationThreshold_ = aggregationThreshold_;
          to_bitField0_ |= 0x00000002;
        }
        if (((from_bitField0_ & 0x00000004) != 0)) {
          result.internLimit_ = internLimit_;
          to_bitField0_ |= 0x00000004;
        }
        if (((from_bitField0_ & 0x00000008) != 0)) {
          result.dropLocalPort_ = dropLocalPort_;
          to_bitField0_ |= 0x00000008;
        }
        if (((from_bitField0_ & 0x00000010) != 0)) {
          result.dropRemotePort_ = dropRemotePort_;
          to_bitField0_ |= 0x00000010;
        }
        if (((from_bitField0_ & 0x00000020) != 0)) {
          result.dropTcpFlags_ = dropTcpFlags_;
          to_bitField0_ |= 0x00000020;
        }
        result.bitField0_ |= to_bitField0_;
      }

      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof perfetto.protos.NetworkTraceConfig.NetworkPacketTraceConfig) {
          return mergeFrom((perfetto.protos.NetworkTraceConfig.NetworkPacketTraceConfig)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(perfetto.protos.NetworkTraceConfig.NetworkPacketTraceConfig other) {
        if (other == perfetto.protos.NetworkTraceConfig.NetworkPacketTraceConfig.getDefaultInstance()) return this;
        if (other.hasPollMs()) {
          setPollMs(other.getPollMs());
        }
        if (other.hasAggregationThreshold()) {
          setAggregationThreshold(other.getAggregationThreshold());
        }
        if (other.hasInternLimit()) {
          setInternLimit(other.getInternLimit());
        }
        if (other.hasDropLocalPort()) {
          setDropLocalPort(other.getDropLocalPort());
        }
        if (other.hasDropRemotePort()) {
          setDropRemotePort(other.getDropRemotePort());
        }
        if (other.hasDropTcpFlags()) {
          setDropTcpFlags(other.getDropTcpFlags());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        if (extensionRegistry == null) {
          throw new java.lang.NullPointerException();
        }
        try {
          boolean done = false;
          while (!done) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                done = true;
                break;
              case 8: {
                pollMs_ = input.readUInt32();
                bitField0_ |= 0x00000001;
                break;
              } // case 8
              case 16: {
                aggregationThreshold_ = input.readUInt32();
                bitField0_ |= 0x00000002;
                break;
              } // case 16
              case 24: {
                internLimit_ = input.readUInt32();
                bitField0_ |= 0x00000004;
                break;
              } // case 24
              case 32: {
                dropLocalPort_ = input.readBool();
                bitField0_ |= 0x00000008;
                break;
              } // case 32
              case 40: {
                dropRemotePort_ = input.readBool();
                bitField0_ |= 0x00000010;
                break;
              } // case 40
              case 48: {
                dropTcpFlags_ = input.readBool();
                bitField0_ |= 0x00000020;
                break;
              } // case 48
              default: {
                if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                  done = true; // was an endgroup tag
                }
                break;
              } // default:
            } // switch (tag)
          } // while (!done)
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.unwrapIOException();
        } finally {
          onChanged();
        } // finally
        return this;
      }
      private int bitField0_;

      private int pollMs_ ;
      /**
       * <pre>
       * Polling frequency in milliseconds. Network tracing writes to a fixed size
       * ring buffer. The polling interval should be such that the ring buffer is
       * unlikely to fill in that interval (or that filling is an acceptable risk).
       * The minimum polling rate is 100ms (values below this are ignored).
       * Introduced in Android 14 (U).
       * </pre>
       *
       * <code>optional uint32 poll_ms = 1;</code>
       * @return Whether the pollMs field is set.
       */
      @java.lang.Override
      public boolean hasPollMs() {
        return ((bitField0_ & 0x00000001) != 0);
      }
      /**
       * <pre>
       * Polling frequency in milliseconds. Network tracing writes to a fixed size
       * ring buffer. The polling interval should be such that the ring buffer is
       * unlikely to fill in that interval (or that filling is an acceptable risk).
       * The minimum polling rate is 100ms (values below this are ignored).
       * Introduced in Android 14 (U).
       * </pre>
       *
       * <code>optional uint32 poll_ms = 1;</code>
       * @return The pollMs.
       */
      @java.lang.Override
      public int getPollMs() {
        return pollMs_;
      }
      /**
       * <pre>
       * Polling frequency in milliseconds. Network tracing writes to a fixed size
       * ring buffer. The polling interval should be such that the ring buffer is
       * unlikely to fill in that interval (or that filling is an acceptable risk).
       * The minimum polling rate is 100ms (values below this are ignored).
       * Introduced in Android 14 (U).
       * </pre>
       *
       * <code>optional uint32 poll_ms = 1;</code>
       * @param value The pollMs to set.
       * @return This builder for chaining.
       */
      public Builder setPollMs(int value) {

        pollMs_ = value;
        bitField0_ |= 0x00000001;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Polling frequency in milliseconds. Network tracing writes to a fixed size
       * ring buffer. The polling interval should be such that the ring buffer is
       * unlikely to fill in that interval (or that filling is an acceptable risk).
       * The minimum polling rate is 100ms (values below this are ignored).
       * Introduced in Android 14 (U).
       * </pre>
       *
       * <code>optional uint32 poll_ms = 1;</code>
       * @return This builder for chaining.
       */
      public Builder clearPollMs() {
        bitField0_ = (bitField0_ & ~0x00000001);
        pollMs_ = 0;
        onChanged();
        return this;
      }

      private int aggregationThreshold_ ;
      /**
       * <pre>
       * The aggregation_threshold is the number of packets at which an event will
       * switch from per-packet details to aggregate details. For example, a value
       * of 50 means that if a particular event (grouped by the unique combinations
       * of metadata fields: {interface, direction, uid, etc}) has fewer than 50
       * packets, the exact timestamp and length are recorded for each packet. If
       * there were 50 or more packets in an event, it would only record the total
       * duration, packets, and length. A value of zero or unspecified will always
       * / record per-packet details. A value of 1 always records aggregate details.
       * </pre>
       *
       * <code>optional uint32 aggregation_threshold = 2;</code>
       * @return Whether the aggregationThreshold field is set.
       */
      @java.lang.Override
      public boolean hasAggregationThreshold() {
        return ((bitField0_ & 0x00000002) != 0);
      }
      /**
       * <pre>
       * The aggregation_threshold is the number of packets at which an event will
       * switch from per-packet details to aggregate details. For example, a value
       * of 50 means that if a particular event (grouped by the unique combinations
       * of metadata fields: {interface, direction, uid, etc}) has fewer than 50
       * packets, the exact timestamp and length are recorded for each packet. If
       * there were 50 or more packets in an event, it would only record the total
       * duration, packets, and length. A value of zero or unspecified will always
       * / record per-packet details. A value of 1 always records aggregate details.
       * </pre>
       *
       * <code>optional uint32 aggregation_threshold = 2;</code>
       * @return The aggregationThreshold.
       */
      @java.lang.Override
      public int getAggregationThreshold() {
        return aggregationThreshold_;
      }
      /**
       * <pre>
       * The aggregation_threshold is the number of packets at which an event will
       * switch from per-packet details to aggregate details. For example, a value
       * of 50 means that if a particular event (grouped by the unique combinations
       * of metadata fields: {interface, direction, uid, etc}) has fewer than 50
       * packets, the exact timestamp and length are recorded for each packet. If
       * there were 50 or more packets in an event, it would only record the total
       * duration, packets, and length. A value of zero or unspecified will always
       * / record per-packet details. A value of 1 always records aggregate details.
       * </pre>
       *
       * <code>optional uint32 aggregation_threshold = 2;</code>
       * @param value The aggregationThreshold to set.
       * @return This builder for chaining.
       */
      public Builder setAggregationThreshold(int value) {

        aggregationThreshold_ = value;
        bitField0_ |= 0x00000002;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * The aggregation_threshold is the number of packets at which an event will
       * switch from per-packet details to aggregate details. For example, a value
       * of 50 means that if a particular event (grouped by the unique combinations
       * of metadata fields: {interface, direction, uid, etc}) has fewer than 50
       * packets, the exact timestamp and length are recorded for each packet. If
       * there were 50 or more packets in an event, it would only record the total
       * duration, packets, and length. A value of zero or unspecified will always
       * / record per-packet details. A value of 1 always records aggregate details.
       * </pre>
       *
       * <code>optional uint32 aggregation_threshold = 2;</code>
       * @return This builder for chaining.
       */
      public Builder clearAggregationThreshold() {
        bitField0_ = (bitField0_ & ~0x00000002);
        aggregationThreshold_ = 0;
        onChanged();
        return this;
      }

      private int internLimit_ ;
      /**
       * <pre>
       * Specifies the maximum number of packet contexts to intern at a time. This
       * prevents the interning table from growing too large and controls whether
       * interning is enabled or disabled (a value of zero disables interning and
       * is the default). When a data sources interning table reaches this amount,
       * packet contexts will be inlined into NetworkPacketEvents.
       * </pre>
       *
       * <code>optional uint32 intern_limit = 3;</code>
       * @return Whether the internLimit field is set.
       */
      @java.lang.Override
      public boolean hasInternLimit() {
        return ((bitField0_ & 0x00000004) != 0);
      }
      /**
       * <pre>
       * Specifies the maximum number of packet contexts to intern at a time. This
       * prevents the interning table from growing too large and controls whether
       * interning is enabled or disabled (a value of zero disables interning and
       * is the default). When a data sources interning table reaches this amount,
       * packet contexts will be inlined into NetworkPacketEvents.
       * </pre>
       *
       * <code>optional uint32 intern_limit = 3;</code>
       * @return The internLimit.
       */
      @java.lang.Override
      public int getInternLimit() {
        return internLimit_;
      }
      /**
       * <pre>
       * Specifies the maximum number of packet contexts to intern at a time. This
       * prevents the interning table from growing too large and controls whether
       * interning is enabled or disabled (a value of zero disables interning and
       * is the default). When a data sources interning table reaches this amount,
       * packet contexts will be inlined into NetworkPacketEvents.
       * </pre>
       *
       * <code>optional uint32 intern_limit = 3;</code>
       * @param value The internLimit to set.
       * @return This builder for chaining.
       */
      public Builder setInternLimit(int value) {

        internLimit_ = value;
        bitField0_ |= 0x00000004;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Specifies the maximum number of packet contexts to intern at a time. This
       * prevents the interning table from growing too large and controls whether
       * interning is enabled or disabled (a value of zero disables interning and
       * is the default). When a data sources interning table reaches this amount,
       * packet contexts will be inlined into NetworkPacketEvents.
       * </pre>
       *
       * <code>optional uint32 intern_limit = 3;</code>
       * @return This builder for chaining.
       */
      public Builder clearInternLimit() {
        bitField0_ = (bitField0_ & ~0x00000004);
        internLimit_ = 0;
        onChanged();
        return this;
      }

      private boolean dropLocalPort_ ;
      /**
       * <pre>
       * The following fields specify whether certain fields should be dropped from
       * the output. Dropping fields improves normalization results, reduces the
       * size of the interning table, and slightly reduces event size.
       * </pre>
       *
       * <code>optional bool drop_local_port = 4;</code>
       * @return Whether the dropLocalPort field is set.
       */
      @java.lang.Override
      public boolean hasDropLocalPort() {
        return ((bitField0_ & 0x00000008) != 0);
      }
      /**
       * <pre>
       * The following fields specify whether certain fields should be dropped from
       * the output. Dropping fields improves normalization results, reduces the
       * size of the interning table, and slightly reduces event size.
       * </pre>
       *
       * <code>optional bool drop_local_port = 4;</code>
       * @return The dropLocalPort.
       */
      @java.lang.Override
      public boolean getDropLocalPort() {
        return dropLocalPort_;
      }
      /**
       * <pre>
       * The following fields specify whether certain fields should be dropped from
       * the output. Dropping fields improves normalization results, reduces the
       * size of the interning table, and slightly reduces event size.
       * </pre>
       *
       * <code>optional bool drop_local_port = 4;</code>
       * @param value The dropLocalPort to set.
       * @return This builder for chaining.
       */
      public Builder setDropLocalPort(boolean value) {

        dropLocalPort_ = value;
        bitField0_ |= 0x00000008;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * The following fields specify whether certain fields should be dropped from
       * the output. Dropping fields improves normalization results, reduces the
       * size of the interning table, and slightly reduces event size.
       * </pre>
       *
       * <code>optional bool drop_local_port = 4;</code>
       * @return This builder for chaining.
       */
      public Builder clearDropLocalPort() {
        bitField0_ = (bitField0_ & ~0x00000008);
        dropLocalPort_ = false;
        onChanged();
        return this;
      }

      private boolean dropRemotePort_ ;
      /**
       * <code>optional bool drop_remote_port = 5;</code>
       * @return Whether the dropRemotePort field is set.
       */
      @java.lang.Override
      public boolean hasDropRemotePort() {
        return ((bitField0_ & 0x00000010) != 0);
      }
      /**
       * <code>optional bool drop_remote_port = 5;</code>
       * @return The dropRemotePort.
       */
      @java.lang.Override
      public boolean getDropRemotePort() {
        return dropRemotePort_;
      }
      /**
       * <code>optional bool drop_remote_port = 5;</code>
       * @param value The dropRemotePort to set.
       * @return This builder for chaining.
       */
      public Builder setDropRemotePort(boolean value) {

        dropRemotePort_ = value;
        bitField0_ |= 0x00000010;
        onChanged();
        return this;
      }
      /**
       * <code>optional bool drop_remote_port = 5;</code>
       * @return This builder for chaining.
       */
      public Builder clearDropRemotePort() {
        bitField0_ = (bitField0_ & ~0x00000010);
        dropRemotePort_ = false;
        onChanged();
        return this;
      }

      private boolean dropTcpFlags_ ;
      /**
       * <code>optional bool drop_tcp_flags = 6;</code>
       * @return Whether the dropTcpFlags field is set.
       */
      @java.lang.Override
      public boolean hasDropTcpFlags() {
        return ((bitField0_ & 0x00000020) != 0);
      }
      /**
       * <code>optional bool drop_tcp_flags = 6;</code>
       * @return The dropTcpFlags.
       */
      @java.lang.Override
      public boolean getDropTcpFlags() {
        return dropTcpFlags_;
      }
      /**
       * <code>optional bool drop_tcp_flags = 6;</code>
       * @param value The dropTcpFlags to set.
       * @return This builder for chaining.
       */
      public Builder setDropTcpFlags(boolean value) {

        dropTcpFlags_ = value;
        bitField0_ |= 0x00000020;
        onChanged();
        return this;
      }
      /**
       * <code>optional bool drop_tcp_flags = 6;</code>
       * @return This builder for chaining.
       */
      public Builder clearDropTcpFlags() {
        bitField0_ = (bitField0_ & ~0x00000020);
        dropTcpFlags_ = false;
        onChanged();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:perfetto.protos.NetworkPacketTraceConfig)
    }

    // @@protoc_insertion_point(class_scope:perfetto.protos.NetworkPacketTraceConfig)
    private static final perfetto.protos.NetworkTraceConfig.NetworkPacketTraceConfig DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new perfetto.protos.NetworkTraceConfig.NetworkPacketTraceConfig();
    }

    public static perfetto.protos.NetworkTraceConfig.NetworkPacketTraceConfig getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<NetworkPacketTraceConfig>
        PARSER = new com.google.protobuf.AbstractParser<NetworkPacketTraceConfig>() {
      @java.lang.Override
      public NetworkPacketTraceConfig parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        Builder builder = newBuilder();
        try {
          builder.mergeFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.setUnfinishedMessage(builder.buildPartial());
        } catch (com.google.protobuf.UninitializedMessageException e) {
          throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
        } catch (java.io.IOException e) {
          throw new com.google.protobuf.InvalidProtocolBufferException(e)
              .setUnfinishedMessage(builder.buildPartial());
        }
        return builder.buildPartial();
      }
    };

    public static com.google.protobuf.Parser<NetworkPacketTraceConfig> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<NetworkPacketTraceConfig> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public perfetto.protos.NetworkTraceConfig.NetworkPacketTraceConfig getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_perfetto_protos_NetworkPacketTraceConfig_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_perfetto_protos_NetworkPacketTraceConfig_fieldAccessorTable;

  public static com.google.protobuf.Descriptors.FileDescriptor
      getDescriptor() {
    return descriptor;
  }
  private static  com.google.protobuf.Descriptors.FileDescriptor
      descriptor;
  static {
    java.lang.String[] descriptorData = {
      "\n9protos/perfetto/config/android/network" +
      "_trace_config.proto\022\017perfetto.protos\"\253\001\n" +
      "\030NetworkPacketTraceConfig\022\017\n\007poll_ms\030\001 \001" +
      "(\r\022\035\n\025aggregation_threshold\030\002 \001(\r\022\024\n\014int" +
      "ern_limit\030\003 \001(\r\022\027\n\017drop_local_port\030\004 \001(\010" +
      "\022\030\n\020drop_remote_port\030\005 \001(\010\022\026\n\016drop_tcp_f" +
      "lags\030\006 \001(\010"
    };
    descriptor = com.google.protobuf.Descriptors.FileDescriptor
      .internalBuildGeneratedFileFrom(descriptorData,
        new com.google.protobuf.Descriptors.FileDescriptor[] {
        });
    internal_static_perfetto_protos_NetworkPacketTraceConfig_descriptor =
      getDescriptor().getMessageTypes().get(0);
    internal_static_perfetto_protos_NetworkPacketTraceConfig_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessage.FieldAccessorTable(
        internal_static_perfetto_protos_NetworkPacketTraceConfig_descriptor,
        new java.lang.String[] { "PollMs", "AggregationThreshold", "InternLimit", "DropLocalPort", "DropRemotePort", "DropTcpFlags", });
    descriptor.resolveAllFeaturesImmutable();
  }

  // @@protoc_insertion_point(outer_class_scope)
}
