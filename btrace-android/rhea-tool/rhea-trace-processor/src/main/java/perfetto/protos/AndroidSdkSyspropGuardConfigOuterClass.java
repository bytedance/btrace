// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: protos/perfetto/config/android/android_sdk_sysprop_guard_config.proto
// Protobuf Java Version: 4.29.3

package perfetto.protos;

public final class AndroidSdkSyspropGuardConfigOuterClass {
  private AndroidSdkSyspropGuardConfigOuterClass() {}
  static {
    com.google.protobuf.RuntimeVersion.validateProtobufGencodeVersion(
      com.google.protobuf.RuntimeVersion.RuntimeDomain.PUBLIC,
      /* major= */ 4,
      /* minor= */ 29,
      /* patch= */ 3,
      /* suffix= */ "",
      AndroidSdkSyspropGuardConfigOuterClass.class.getName());
  }
  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistryLite registry) {
  }

  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistry registry) {
    registerAllExtensions(
        (com.google.protobuf.ExtensionRegistryLite) registry);
  }
  public interface AndroidSdkSyspropGuardConfigOrBuilder extends
      // @@protoc_insertion_point(interface_extends:perfetto.protos.AndroidSdkSyspropGuardConfig)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <pre>
     * If true, configures SurfaceFlinger to initialize Skia's Perfetto
     * integration with the track_event data source in RenderEngine.
     * If false or omitted, the simpler ATrace fallback is used.
     *
     * NOTE: once enabled, Skia will only revert to ATrace if SurfaceFlinger is
     * restarted.
     *
     * Specifically this sets the following system properties:
     * - debug.tracing.ctl.renderengine.skia_tracing_enabled
     * - debug.tracing.ctl.renderengine.skia_use_perfetto_track_events
     *
     * Does not affect actual track_event data *collection*, which must be
     * configured seperately.
     * </pre>
     *
     * <code>optional bool surfaceflinger_skia_track_events = 1;</code>
     * @return Whether the surfaceflingerSkiaTrackEvents field is set.
     */
    boolean hasSurfaceflingerSkiaTrackEvents();
    /**
     * <pre>
     * If true, configures SurfaceFlinger to initialize Skia's Perfetto
     * integration with the track_event data source in RenderEngine.
     * If false or omitted, the simpler ATrace fallback is used.
     *
     * NOTE: once enabled, Skia will only revert to ATrace if SurfaceFlinger is
     * restarted.
     *
     * Specifically this sets the following system properties:
     * - debug.tracing.ctl.renderengine.skia_tracing_enabled
     * - debug.tracing.ctl.renderengine.skia_use_perfetto_track_events
     *
     * Does not affect actual track_event data *collection*, which must be
     * configured seperately.
     * </pre>
     *
     * <code>optional bool surfaceflinger_skia_track_events = 1;</code>
     * @return The surfaceflingerSkiaTrackEvents.
     */
    boolean getSurfaceflingerSkiaTrackEvents();

    /**
     * <pre>
     * If true, configures HWUI apps to initialize Skia's Perfetto integration
     * with the track_event data source. hwui_package_name_filter
     * can be used to control which apps are affected.
     * If false or omitted, the simpler ATrace fallback is used.
     *
     * NOTE: once enabled, Skia will only revert to ATrace if the app is
     * restarted.
     *
     * ATTENTION: affects ALL HWUI APPS if hwui_package_name_filter is not set!
     * If filtering is NOT set, this controls these GLOBAL system properties:
     * - debug.tracing.ctl.hwui.skia_tracing_enabled
     * - debug.tracing.ctl.hwui.skia_use_perfetto_track_events
     * If filtering IS set, this controls these APP-SPECIFIC system properties,
     * for each package listed in the filter:
     * - debug.tracing.ctl.hwui.skia_tracing_enabled.&lt;package.name&gt;
     * - debug.tracing.ctl.hwui.skia_use_perfetto_track_events.&lt;package.name&gt;
     *
     * Does not affect actual track_event data *collection*, which must be
     * configured seperately.
     * </pre>
     *
     * <code>optional bool hwui_skia_track_events = 2;</code>
     * @return Whether the hwuiSkiaTrackEvents field is set.
     */
    boolean hasHwuiSkiaTrackEvents();
    /**
     * <pre>
     * If true, configures HWUI apps to initialize Skia's Perfetto integration
     * with the track_event data source. hwui_package_name_filter
     * can be used to control which apps are affected.
     * If false or omitted, the simpler ATrace fallback is used.
     *
     * NOTE: once enabled, Skia will only revert to ATrace if the app is
     * restarted.
     *
     * ATTENTION: affects ALL HWUI APPS if hwui_package_name_filter is not set!
     * If filtering is NOT set, this controls these GLOBAL system properties:
     * - debug.tracing.ctl.hwui.skia_tracing_enabled
     * - debug.tracing.ctl.hwui.skia_use_perfetto_track_events
     * If filtering IS set, this controls these APP-SPECIFIC system properties,
     * for each package listed in the filter:
     * - debug.tracing.ctl.hwui.skia_tracing_enabled.&lt;package.name&gt;
     * - debug.tracing.ctl.hwui.skia_use_perfetto_track_events.&lt;package.name&gt;
     *
     * Does not affect actual track_event data *collection*, which must be
     * configured seperately.
     * </pre>
     *
     * <code>optional bool hwui_skia_track_events = 2;</code>
     * @return The hwuiSkiaTrackEvents.
     */
    boolean getHwuiSkiaTrackEvents();

    /**
     * <pre>
     * If non-empty, hwui_skia_track_events applies to only the packages listed.
     * Otherwise, hwui_skia_track_events applies globally to all HWUI apps.
     * </pre>
     *
     * <code>repeated string hwui_package_name_filter = 3;</code>
     * @return A list containing the hwuiPackageNameFilter.
     */
    java.util.List<java.lang.String>
        getHwuiPackageNameFilterList();
    /**
     * <pre>
     * If non-empty, hwui_skia_track_events applies to only the packages listed.
     * Otherwise, hwui_skia_track_events applies globally to all HWUI apps.
     * </pre>
     *
     * <code>repeated string hwui_package_name_filter = 3;</code>
     * @return The count of hwuiPackageNameFilter.
     */
    int getHwuiPackageNameFilterCount();
    /**
     * <pre>
     * If non-empty, hwui_skia_track_events applies to only the packages listed.
     * Otherwise, hwui_skia_track_events applies globally to all HWUI apps.
     * </pre>
     *
     * <code>repeated string hwui_package_name_filter = 3;</code>
     * @param index The index of the element to return.
     * @return The hwuiPackageNameFilter at the given index.
     */
    java.lang.String getHwuiPackageNameFilter(int index);
    /**
     * <pre>
     * If non-empty, hwui_skia_track_events applies to only the packages listed.
     * Otherwise, hwui_skia_track_events applies globally to all HWUI apps.
     * </pre>
     *
     * <code>repeated string hwui_package_name_filter = 3;</code>
     * @param index The index of the value to return.
     * @return The bytes of the hwuiPackageNameFilter at the given index.
     */
    com.google.protobuf.ByteString
        getHwuiPackageNameFilterBytes(int index);
  }
  /**
   * <pre>
   * Data source that controls the system properties used to guard initialization
   * of track_event producers (i.e. Skia) in apps using HWUI, and certain
   * processes like SurfaceFlinger.
   *
   * This data source only tells Skia to initialized the Perfetto SDK and start
   * routing data to the Track Event system instead of ATrace. For those events
   * to actually show up in a trace, the track_event data source must be used as
   * well. The Perfetto SDK cannot be de-initialized, so some long-lived apps and
   * processes may need to be restarted for Skia to revert to using ATrace if
   * Track Events are no longer desired.
   *
   * In addition to switching Skia to use Perfetto's track_event data source,
   * this "guard" also controls Skia's "broad tracing", which removes Skia's
   * internal tracing constraints and allows the track_event config to specify
   * which categories should be traced. Filtering to the "skia.always" category
   * *tag* in a track_event config can be used to re-enable the standard
   * constraints typically used with ATrace.
   *
   * Data source name: android.sdk_sysprop_guard
   * Introduced in Android 14 (U) QPR1.
   * Next id: 4
   * </pre>
   *
   * Protobuf type {@code perfetto.protos.AndroidSdkSyspropGuardConfig}
   */
  public static final class AndroidSdkSyspropGuardConfig extends
      com.google.protobuf.GeneratedMessage implements
      // @@protoc_insertion_point(message_implements:perfetto.protos.AndroidSdkSyspropGuardConfig)
      AndroidSdkSyspropGuardConfigOrBuilder {
  private static final long serialVersionUID = 0L;
    static {
      com.google.protobuf.RuntimeVersion.validateProtobufGencodeVersion(
        com.google.protobuf.RuntimeVersion.RuntimeDomain.PUBLIC,
        /* major= */ 4,
        /* minor= */ 29,
        /* patch= */ 3,
        /* suffix= */ "",
        AndroidSdkSyspropGuardConfig.class.getName());
    }
    // Use AndroidSdkSyspropGuardConfig.newBuilder() to construct.
    private AndroidSdkSyspropGuardConfig(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
    }
    private AndroidSdkSyspropGuardConfig() {
      hwuiPackageNameFilter_ =
          com.google.protobuf.LazyStringArrayList.emptyList();
    }

    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return perfetto.protos.AndroidSdkSyspropGuardConfigOuterClass.internal_static_perfetto_protos_AndroidSdkSyspropGuardConfig_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return perfetto.protos.AndroidSdkSyspropGuardConfigOuterClass.internal_static_perfetto_protos_AndroidSdkSyspropGuardConfig_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              perfetto.protos.AndroidSdkSyspropGuardConfigOuterClass.AndroidSdkSyspropGuardConfig.class, perfetto.protos.AndroidSdkSyspropGuardConfigOuterClass.AndroidSdkSyspropGuardConfig.Builder.class);
    }

    private int bitField0_;
    public static final int SURFACEFLINGER_SKIA_TRACK_EVENTS_FIELD_NUMBER = 1;
    private boolean surfaceflingerSkiaTrackEvents_ = false;
    /**
     * <pre>
     * If true, configures SurfaceFlinger to initialize Skia's Perfetto
     * integration with the track_event data source in RenderEngine.
     * If false or omitted, the simpler ATrace fallback is used.
     *
     * NOTE: once enabled, Skia will only revert to ATrace if SurfaceFlinger is
     * restarted.
     *
     * Specifically this sets the following system properties:
     * - debug.tracing.ctl.renderengine.skia_tracing_enabled
     * - debug.tracing.ctl.renderengine.skia_use_perfetto_track_events
     *
     * Does not affect actual track_event data *collection*, which must be
     * configured seperately.
     * </pre>
     *
     * <code>optional bool surfaceflinger_skia_track_events = 1;</code>
     * @return Whether the surfaceflingerSkiaTrackEvents field is set.
     */
    @java.lang.Override
    public boolean hasSurfaceflingerSkiaTrackEvents() {
      return ((bitField0_ & 0x00000001) != 0);
    }
    /**
     * <pre>
     * If true, configures SurfaceFlinger to initialize Skia's Perfetto
     * integration with the track_event data source in RenderEngine.
     * If false or omitted, the simpler ATrace fallback is used.
     *
     * NOTE: once enabled, Skia will only revert to ATrace if SurfaceFlinger is
     * restarted.
     *
     * Specifically this sets the following system properties:
     * - debug.tracing.ctl.renderengine.skia_tracing_enabled
     * - debug.tracing.ctl.renderengine.skia_use_perfetto_track_events
     *
     * Does not affect actual track_event data *collection*, which must be
     * configured seperately.
     * </pre>
     *
     * <code>optional bool surfaceflinger_skia_track_events = 1;</code>
     * @return The surfaceflingerSkiaTrackEvents.
     */
    @java.lang.Override
    public boolean getSurfaceflingerSkiaTrackEvents() {
      return surfaceflingerSkiaTrackEvents_;
    }

    public static final int HWUI_SKIA_TRACK_EVENTS_FIELD_NUMBER = 2;
    private boolean hwuiSkiaTrackEvents_ = false;
    /**
     * <pre>
     * If true, configures HWUI apps to initialize Skia's Perfetto integration
     * with the track_event data source. hwui_package_name_filter
     * can be used to control which apps are affected.
     * If false or omitted, the simpler ATrace fallback is used.
     *
     * NOTE: once enabled, Skia will only revert to ATrace if the app is
     * restarted.
     *
     * ATTENTION: affects ALL HWUI APPS if hwui_package_name_filter is not set!
     * If filtering is NOT set, this controls these GLOBAL system properties:
     * - debug.tracing.ctl.hwui.skia_tracing_enabled
     * - debug.tracing.ctl.hwui.skia_use_perfetto_track_events
     * If filtering IS set, this controls these APP-SPECIFIC system properties,
     * for each package listed in the filter:
     * - debug.tracing.ctl.hwui.skia_tracing_enabled.&lt;package.name&gt;
     * - debug.tracing.ctl.hwui.skia_use_perfetto_track_events.&lt;package.name&gt;
     *
     * Does not affect actual track_event data *collection*, which must be
     * configured seperately.
     * </pre>
     *
     * <code>optional bool hwui_skia_track_events = 2;</code>
     * @return Whether the hwuiSkiaTrackEvents field is set.
     */
    @java.lang.Override
    public boolean hasHwuiSkiaTrackEvents() {
      return ((bitField0_ & 0x00000002) != 0);
    }
    /**
     * <pre>
     * If true, configures HWUI apps to initialize Skia's Perfetto integration
     * with the track_event data source. hwui_package_name_filter
     * can be used to control which apps are affected.
     * If false or omitted, the simpler ATrace fallback is used.
     *
     * NOTE: once enabled, Skia will only revert to ATrace if the app is
     * restarted.
     *
     * ATTENTION: affects ALL HWUI APPS if hwui_package_name_filter is not set!
     * If filtering is NOT set, this controls these GLOBAL system properties:
     * - debug.tracing.ctl.hwui.skia_tracing_enabled
     * - debug.tracing.ctl.hwui.skia_use_perfetto_track_events
     * If filtering IS set, this controls these APP-SPECIFIC system properties,
     * for each package listed in the filter:
     * - debug.tracing.ctl.hwui.skia_tracing_enabled.&lt;package.name&gt;
     * - debug.tracing.ctl.hwui.skia_use_perfetto_track_events.&lt;package.name&gt;
     *
     * Does not affect actual track_event data *collection*, which must be
     * configured seperately.
     * </pre>
     *
     * <code>optional bool hwui_skia_track_events = 2;</code>
     * @return The hwuiSkiaTrackEvents.
     */
    @java.lang.Override
    public boolean getHwuiSkiaTrackEvents() {
      return hwuiSkiaTrackEvents_;
    }

    public static final int HWUI_PACKAGE_NAME_FILTER_FIELD_NUMBER = 3;
    @SuppressWarnings("serial")
    private com.google.protobuf.LazyStringArrayList hwuiPackageNameFilter_ =
        com.google.protobuf.LazyStringArrayList.emptyList();
    /**
     * <pre>
     * If non-empty, hwui_skia_track_events applies to only the packages listed.
     * Otherwise, hwui_skia_track_events applies globally to all HWUI apps.
     * </pre>
     *
     * <code>repeated string hwui_package_name_filter = 3;</code>
     * @return A list containing the hwuiPackageNameFilter.
     */
    public com.google.protobuf.ProtocolStringList
        getHwuiPackageNameFilterList() {
      return hwuiPackageNameFilter_;
    }
    /**
     * <pre>
     * If non-empty, hwui_skia_track_events applies to only the packages listed.
     * Otherwise, hwui_skia_track_events applies globally to all HWUI apps.
     * </pre>
     *
     * <code>repeated string hwui_package_name_filter = 3;</code>
     * @return The count of hwuiPackageNameFilter.
     */
    public int getHwuiPackageNameFilterCount() {
      return hwuiPackageNameFilter_.size();
    }
    /**
     * <pre>
     * If non-empty, hwui_skia_track_events applies to only the packages listed.
     * Otherwise, hwui_skia_track_events applies globally to all HWUI apps.
     * </pre>
     *
     * <code>repeated string hwui_package_name_filter = 3;</code>
     * @param index The index of the element to return.
     * @return The hwuiPackageNameFilter at the given index.
     */
    public java.lang.String getHwuiPackageNameFilter(int index) {
      return hwuiPackageNameFilter_.get(index);
    }
    /**
     * <pre>
     * If non-empty, hwui_skia_track_events applies to only the packages listed.
     * Otherwise, hwui_skia_track_events applies globally to all HWUI apps.
     * </pre>
     *
     * <code>repeated string hwui_package_name_filter = 3;</code>
     * @param index The index of the value to return.
     * @return The bytes of the hwuiPackageNameFilter at the given index.
     */
    public com.google.protobuf.ByteString
        getHwuiPackageNameFilterBytes(int index) {
      return hwuiPackageNameFilter_.getByteString(index);
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (((bitField0_ & 0x00000001) != 0)) {
        output.writeBool(1, surfaceflingerSkiaTrackEvents_);
      }
      if (((bitField0_ & 0x00000002) != 0)) {
        output.writeBool(2, hwuiSkiaTrackEvents_);
      }
      for (int i = 0; i < hwuiPackageNameFilter_.size(); i++) {
        com.google.protobuf.GeneratedMessage.writeString(output, 3, hwuiPackageNameFilter_.getRaw(i));
      }
      getUnknownFields().writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) != 0)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(1, surfaceflingerSkiaTrackEvents_);
      }
      if (((bitField0_ & 0x00000002) != 0)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(2, hwuiSkiaTrackEvents_);
      }
      {
        int dataSize = 0;
        for (int i = 0; i < hwuiPackageNameFilter_.size(); i++) {
          dataSize += computeStringSizeNoTag(hwuiPackageNameFilter_.getRaw(i));
        }
        size += dataSize;
        size += 1 * getHwuiPackageNameFilterList().size();
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof perfetto.protos.AndroidSdkSyspropGuardConfigOuterClass.AndroidSdkSyspropGuardConfig)) {
        return super.equals(obj);
      }
      perfetto.protos.AndroidSdkSyspropGuardConfigOuterClass.AndroidSdkSyspropGuardConfig other = (perfetto.protos.AndroidSdkSyspropGuardConfigOuterClass.AndroidSdkSyspropGuardConfig) obj;

      if (hasSurfaceflingerSkiaTrackEvents() != other.hasSurfaceflingerSkiaTrackEvents()) return false;
      if (hasSurfaceflingerSkiaTrackEvents()) {
        if (getSurfaceflingerSkiaTrackEvents()
            != other.getSurfaceflingerSkiaTrackEvents()) return false;
      }
      if (hasHwuiSkiaTrackEvents() != other.hasHwuiSkiaTrackEvents()) return false;
      if (hasHwuiSkiaTrackEvents()) {
        if (getHwuiSkiaTrackEvents()
            != other.getHwuiSkiaTrackEvents()) return false;
      }
      if (!getHwuiPackageNameFilterList()
          .equals(other.getHwuiPackageNameFilterList())) return false;
      if (!getUnknownFields().equals(other.getUnknownFields())) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      if (hasSurfaceflingerSkiaTrackEvents()) {
        hash = (37 * hash) + SURFACEFLINGER_SKIA_TRACK_EVENTS_FIELD_NUMBER;
        hash = (53 * hash) + com.google.protobuf.Internal.hashBoolean(
            getSurfaceflingerSkiaTrackEvents());
      }
      if (hasHwuiSkiaTrackEvents()) {
        hash = (37 * hash) + HWUI_SKIA_TRACK_EVENTS_FIELD_NUMBER;
        hash = (53 * hash) + com.google.protobuf.Internal.hashBoolean(
            getHwuiSkiaTrackEvents());
      }
      if (getHwuiPackageNameFilterCount() > 0) {
        hash = (37 * hash) + HWUI_PACKAGE_NAME_FILTER_FIELD_NUMBER;
        hash = (53 * hash) + getHwuiPackageNameFilterList().hashCode();
      }
      hash = (29 * hash) + getUnknownFields().hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static perfetto.protos.AndroidSdkSyspropGuardConfigOuterClass.AndroidSdkSyspropGuardConfig parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static perfetto.protos.AndroidSdkSyspropGuardConfigOuterClass.AndroidSdkSyspropGuardConfig parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static perfetto.protos.AndroidSdkSyspropGuardConfigOuterClass.AndroidSdkSyspropGuardConfig parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static perfetto.protos.AndroidSdkSyspropGuardConfigOuterClass.AndroidSdkSyspropGuardConfig parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static perfetto.protos.AndroidSdkSyspropGuardConfigOuterClass.AndroidSdkSyspropGuardConfig parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static perfetto.protos.AndroidSdkSyspropGuardConfigOuterClass.AndroidSdkSyspropGuardConfig parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static perfetto.protos.AndroidSdkSyspropGuardConfigOuterClass.AndroidSdkSyspropGuardConfig parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input);
    }
    public static perfetto.protos.AndroidSdkSyspropGuardConfigOuterClass.AndroidSdkSyspropGuardConfig parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    public static perfetto.protos.AndroidSdkSyspropGuardConfigOuterClass.AndroidSdkSyspropGuardConfig parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessage
          .parseDelimitedWithIOException(PARSER, input);
    }

    public static perfetto.protos.AndroidSdkSyspropGuardConfigOuterClass.AndroidSdkSyspropGuardConfig parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessage
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static perfetto.protos.AndroidSdkSyspropGuardConfigOuterClass.AndroidSdkSyspropGuardConfig parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input);
    }
    public static perfetto.protos.AndroidSdkSyspropGuardConfigOuterClass.AndroidSdkSyspropGuardConfig parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(perfetto.protos.AndroidSdkSyspropGuardConfigOuterClass.AndroidSdkSyspropGuardConfig prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * <pre>
     * Data source that controls the system properties used to guard initialization
     * of track_event producers (i.e. Skia) in apps using HWUI, and certain
     * processes like SurfaceFlinger.
     *
     * This data source only tells Skia to initialized the Perfetto SDK and start
     * routing data to the Track Event system instead of ATrace. For those events
     * to actually show up in a trace, the track_event data source must be used as
     * well. The Perfetto SDK cannot be de-initialized, so some long-lived apps and
     * processes may need to be restarted for Skia to revert to using ATrace if
     * Track Events are no longer desired.
     *
     * In addition to switching Skia to use Perfetto's track_event data source,
     * this "guard" also controls Skia's "broad tracing", which removes Skia's
     * internal tracing constraints and allows the track_event config to specify
     * which categories should be traced. Filtering to the "skia.always" category
     * *tag* in a track_event config can be used to re-enable the standard
     * constraints typically used with ATrace.
     *
     * Data source name: android.sdk_sysprop_guard
     * Introduced in Android 14 (U) QPR1.
     * Next id: 4
     * </pre>
     *
     * Protobuf type {@code perfetto.protos.AndroidSdkSyspropGuardConfig}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:perfetto.protos.AndroidSdkSyspropGuardConfig)
        perfetto.protos.AndroidSdkSyspropGuardConfigOuterClass.AndroidSdkSyspropGuardConfigOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return perfetto.protos.AndroidSdkSyspropGuardConfigOuterClass.internal_static_perfetto_protos_AndroidSdkSyspropGuardConfig_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return perfetto.protos.AndroidSdkSyspropGuardConfigOuterClass.internal_static_perfetto_protos_AndroidSdkSyspropGuardConfig_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                perfetto.protos.AndroidSdkSyspropGuardConfigOuterClass.AndroidSdkSyspropGuardConfig.class, perfetto.protos.AndroidSdkSyspropGuardConfigOuterClass.AndroidSdkSyspropGuardConfig.Builder.class);
      }

      // Construct using perfetto.protos.AndroidSdkSyspropGuardConfigOuterClass.AndroidSdkSyspropGuardConfig.newBuilder()
      private Builder() {

      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);

      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        bitField0_ = 0;
        surfaceflingerSkiaTrackEvents_ = false;
        hwuiSkiaTrackEvents_ = false;
        hwuiPackageNameFilter_ =
            com.google.protobuf.LazyStringArrayList.emptyList();
        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return perfetto.protos.AndroidSdkSyspropGuardConfigOuterClass.internal_static_perfetto_protos_AndroidSdkSyspropGuardConfig_descriptor;
      }

      @java.lang.Override
      public perfetto.protos.AndroidSdkSyspropGuardConfigOuterClass.AndroidSdkSyspropGuardConfig getDefaultInstanceForType() {
        return perfetto.protos.AndroidSdkSyspropGuardConfigOuterClass.AndroidSdkSyspropGuardConfig.getDefaultInstance();
      }

      @java.lang.Override
      public perfetto.protos.AndroidSdkSyspropGuardConfigOuterClass.AndroidSdkSyspropGuardConfig build() {
        perfetto.protos.AndroidSdkSyspropGuardConfigOuterClass.AndroidSdkSyspropGuardConfig result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public perfetto.protos.AndroidSdkSyspropGuardConfigOuterClass.AndroidSdkSyspropGuardConfig buildPartial() {
        perfetto.protos.AndroidSdkSyspropGuardConfigOuterClass.AndroidSdkSyspropGuardConfig result = new perfetto.protos.AndroidSdkSyspropGuardConfigOuterClass.AndroidSdkSyspropGuardConfig(this);
        if (bitField0_ != 0) { buildPartial0(result); }
        onBuilt();
        return result;
      }

      private void buildPartial0(perfetto.protos.AndroidSdkSyspropGuardConfigOuterClass.AndroidSdkSyspropGuardConfig result) {
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) != 0)) {
          result.surfaceflingerSkiaTrackEvents_ = surfaceflingerSkiaTrackEvents_;
          to_bitField0_ |= 0x00000001;
        }
        if (((from_bitField0_ & 0x00000002) != 0)) {
          result.hwuiSkiaTrackEvents_ = hwuiSkiaTrackEvents_;
          to_bitField0_ |= 0x00000002;
        }
        if (((from_bitField0_ & 0x00000004) != 0)) {
          hwuiPackageNameFilter_.makeImmutable();
          result.hwuiPackageNameFilter_ = hwuiPackageNameFilter_;
        }
        result.bitField0_ |= to_bitField0_;
      }

      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof perfetto.protos.AndroidSdkSyspropGuardConfigOuterClass.AndroidSdkSyspropGuardConfig) {
          return mergeFrom((perfetto.protos.AndroidSdkSyspropGuardConfigOuterClass.AndroidSdkSyspropGuardConfig)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(perfetto.protos.AndroidSdkSyspropGuardConfigOuterClass.AndroidSdkSyspropGuardConfig other) {
        if (other == perfetto.protos.AndroidSdkSyspropGuardConfigOuterClass.AndroidSdkSyspropGuardConfig.getDefaultInstance()) return this;
        if (other.hasSurfaceflingerSkiaTrackEvents()) {
          setSurfaceflingerSkiaTrackEvents(other.getSurfaceflingerSkiaTrackEvents());
        }
        if (other.hasHwuiSkiaTrackEvents()) {
          setHwuiSkiaTrackEvents(other.getHwuiSkiaTrackEvents());
        }
        if (!other.hwuiPackageNameFilter_.isEmpty()) {
          if (hwuiPackageNameFilter_.isEmpty()) {
            hwuiPackageNameFilter_ = other.hwuiPackageNameFilter_;
            bitField0_ |= 0x00000004;
          } else {
            ensureHwuiPackageNameFilterIsMutable();
            hwuiPackageNameFilter_.addAll(other.hwuiPackageNameFilter_);
          }
          onChanged();
        }
        this.mergeUnknownFields(other.getUnknownFields());
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        if (extensionRegistry == null) {
          throw new java.lang.NullPointerException();
        }
        try {
          boolean done = false;
          while (!done) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                done = true;
                break;
              case 8: {
                surfaceflingerSkiaTrackEvents_ = input.readBool();
                bitField0_ |= 0x00000001;
                break;
              } // case 8
              case 16: {
                hwuiSkiaTrackEvents_ = input.readBool();
                bitField0_ |= 0x00000002;
                break;
              } // case 16
              case 26: {
                com.google.protobuf.ByteString bs = input.readBytes();
                ensureHwuiPackageNameFilterIsMutable();
                hwuiPackageNameFilter_.add(bs);
                break;
              } // case 26
              default: {
                if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                  done = true; // was an endgroup tag
                }
                break;
              } // default:
            } // switch (tag)
          } // while (!done)
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.unwrapIOException();
        } finally {
          onChanged();
        } // finally
        return this;
      }
      private int bitField0_;

      private boolean surfaceflingerSkiaTrackEvents_ ;
      /**
       * <pre>
       * If true, configures SurfaceFlinger to initialize Skia's Perfetto
       * integration with the track_event data source in RenderEngine.
       * If false or omitted, the simpler ATrace fallback is used.
       *
       * NOTE: once enabled, Skia will only revert to ATrace if SurfaceFlinger is
       * restarted.
       *
       * Specifically this sets the following system properties:
       * - debug.tracing.ctl.renderengine.skia_tracing_enabled
       * - debug.tracing.ctl.renderengine.skia_use_perfetto_track_events
       *
       * Does not affect actual track_event data *collection*, which must be
       * configured seperately.
       * </pre>
       *
       * <code>optional bool surfaceflinger_skia_track_events = 1;</code>
       * @return Whether the surfaceflingerSkiaTrackEvents field is set.
       */
      @java.lang.Override
      public boolean hasSurfaceflingerSkiaTrackEvents() {
        return ((bitField0_ & 0x00000001) != 0);
      }
      /**
       * <pre>
       * If true, configures SurfaceFlinger to initialize Skia's Perfetto
       * integration with the track_event data source in RenderEngine.
       * If false or omitted, the simpler ATrace fallback is used.
       *
       * NOTE: once enabled, Skia will only revert to ATrace if SurfaceFlinger is
       * restarted.
       *
       * Specifically this sets the following system properties:
       * - debug.tracing.ctl.renderengine.skia_tracing_enabled
       * - debug.tracing.ctl.renderengine.skia_use_perfetto_track_events
       *
       * Does not affect actual track_event data *collection*, which must be
       * configured seperately.
       * </pre>
       *
       * <code>optional bool surfaceflinger_skia_track_events = 1;</code>
       * @return The surfaceflingerSkiaTrackEvents.
       */
      @java.lang.Override
      public boolean getSurfaceflingerSkiaTrackEvents() {
        return surfaceflingerSkiaTrackEvents_;
      }
      /**
       * <pre>
       * If true, configures SurfaceFlinger to initialize Skia's Perfetto
       * integration with the track_event data source in RenderEngine.
       * If false or omitted, the simpler ATrace fallback is used.
       *
       * NOTE: once enabled, Skia will only revert to ATrace if SurfaceFlinger is
       * restarted.
       *
       * Specifically this sets the following system properties:
       * - debug.tracing.ctl.renderengine.skia_tracing_enabled
       * - debug.tracing.ctl.renderengine.skia_use_perfetto_track_events
       *
       * Does not affect actual track_event data *collection*, which must be
       * configured seperately.
       * </pre>
       *
       * <code>optional bool surfaceflinger_skia_track_events = 1;</code>
       * @param value The surfaceflingerSkiaTrackEvents to set.
       * @return This builder for chaining.
       */
      public Builder setSurfaceflingerSkiaTrackEvents(boolean value) {

        surfaceflingerSkiaTrackEvents_ = value;
        bitField0_ |= 0x00000001;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * If true, configures SurfaceFlinger to initialize Skia's Perfetto
       * integration with the track_event data source in RenderEngine.
       * If false or omitted, the simpler ATrace fallback is used.
       *
       * NOTE: once enabled, Skia will only revert to ATrace if SurfaceFlinger is
       * restarted.
       *
       * Specifically this sets the following system properties:
       * - debug.tracing.ctl.renderengine.skia_tracing_enabled
       * - debug.tracing.ctl.renderengine.skia_use_perfetto_track_events
       *
       * Does not affect actual track_event data *collection*, which must be
       * configured seperately.
       * </pre>
       *
       * <code>optional bool surfaceflinger_skia_track_events = 1;</code>
       * @return This builder for chaining.
       */
      public Builder clearSurfaceflingerSkiaTrackEvents() {
        bitField0_ = (bitField0_ & ~0x00000001);
        surfaceflingerSkiaTrackEvents_ = false;
        onChanged();
        return this;
      }

      private boolean hwuiSkiaTrackEvents_ ;
      /**
       * <pre>
       * If true, configures HWUI apps to initialize Skia's Perfetto integration
       * with the track_event data source. hwui_package_name_filter
       * can be used to control which apps are affected.
       * If false or omitted, the simpler ATrace fallback is used.
       *
       * NOTE: once enabled, Skia will only revert to ATrace if the app is
       * restarted.
       *
       * ATTENTION: affects ALL HWUI APPS if hwui_package_name_filter is not set!
       * If filtering is NOT set, this controls these GLOBAL system properties:
       * - debug.tracing.ctl.hwui.skia_tracing_enabled
       * - debug.tracing.ctl.hwui.skia_use_perfetto_track_events
       * If filtering IS set, this controls these APP-SPECIFIC system properties,
       * for each package listed in the filter:
       * - debug.tracing.ctl.hwui.skia_tracing_enabled.&lt;package.name&gt;
       * - debug.tracing.ctl.hwui.skia_use_perfetto_track_events.&lt;package.name&gt;
       *
       * Does not affect actual track_event data *collection*, which must be
       * configured seperately.
       * </pre>
       *
       * <code>optional bool hwui_skia_track_events = 2;</code>
       * @return Whether the hwuiSkiaTrackEvents field is set.
       */
      @java.lang.Override
      public boolean hasHwuiSkiaTrackEvents() {
        return ((bitField0_ & 0x00000002) != 0);
      }
      /**
       * <pre>
       * If true, configures HWUI apps to initialize Skia's Perfetto integration
       * with the track_event data source. hwui_package_name_filter
       * can be used to control which apps are affected.
       * If false or omitted, the simpler ATrace fallback is used.
       *
       * NOTE: once enabled, Skia will only revert to ATrace if the app is
       * restarted.
       *
       * ATTENTION: affects ALL HWUI APPS if hwui_package_name_filter is not set!
       * If filtering is NOT set, this controls these GLOBAL system properties:
       * - debug.tracing.ctl.hwui.skia_tracing_enabled
       * - debug.tracing.ctl.hwui.skia_use_perfetto_track_events
       * If filtering IS set, this controls these APP-SPECIFIC system properties,
       * for each package listed in the filter:
       * - debug.tracing.ctl.hwui.skia_tracing_enabled.&lt;package.name&gt;
       * - debug.tracing.ctl.hwui.skia_use_perfetto_track_events.&lt;package.name&gt;
       *
       * Does not affect actual track_event data *collection*, which must be
       * configured seperately.
       * </pre>
       *
       * <code>optional bool hwui_skia_track_events = 2;</code>
       * @return The hwuiSkiaTrackEvents.
       */
      @java.lang.Override
      public boolean getHwuiSkiaTrackEvents() {
        return hwuiSkiaTrackEvents_;
      }
      /**
       * <pre>
       * If true, configures HWUI apps to initialize Skia's Perfetto integration
       * with the track_event data source. hwui_package_name_filter
       * can be used to control which apps are affected.
       * If false or omitted, the simpler ATrace fallback is used.
       *
       * NOTE: once enabled, Skia will only revert to ATrace if the app is
       * restarted.
       *
       * ATTENTION: affects ALL HWUI APPS if hwui_package_name_filter is not set!
       * If filtering is NOT set, this controls these GLOBAL system properties:
       * - debug.tracing.ctl.hwui.skia_tracing_enabled
       * - debug.tracing.ctl.hwui.skia_use_perfetto_track_events
       * If filtering IS set, this controls these APP-SPECIFIC system properties,
       * for each package listed in the filter:
       * - debug.tracing.ctl.hwui.skia_tracing_enabled.&lt;package.name&gt;
       * - debug.tracing.ctl.hwui.skia_use_perfetto_track_events.&lt;package.name&gt;
       *
       * Does not affect actual track_event data *collection*, which must be
       * configured seperately.
       * </pre>
       *
       * <code>optional bool hwui_skia_track_events = 2;</code>
       * @param value The hwuiSkiaTrackEvents to set.
       * @return This builder for chaining.
       */
      public Builder setHwuiSkiaTrackEvents(boolean value) {

        hwuiSkiaTrackEvents_ = value;
        bitField0_ |= 0x00000002;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * If true, configures HWUI apps to initialize Skia's Perfetto integration
       * with the track_event data source. hwui_package_name_filter
       * can be used to control which apps are affected.
       * If false or omitted, the simpler ATrace fallback is used.
       *
       * NOTE: once enabled, Skia will only revert to ATrace if the app is
       * restarted.
       *
       * ATTENTION: affects ALL HWUI APPS if hwui_package_name_filter is not set!
       * If filtering is NOT set, this controls these GLOBAL system properties:
       * - debug.tracing.ctl.hwui.skia_tracing_enabled
       * - debug.tracing.ctl.hwui.skia_use_perfetto_track_events
       * If filtering IS set, this controls these APP-SPECIFIC system properties,
       * for each package listed in the filter:
       * - debug.tracing.ctl.hwui.skia_tracing_enabled.&lt;package.name&gt;
       * - debug.tracing.ctl.hwui.skia_use_perfetto_track_events.&lt;package.name&gt;
       *
       * Does not affect actual track_event data *collection*, which must be
       * configured seperately.
       * </pre>
       *
       * <code>optional bool hwui_skia_track_events = 2;</code>
       * @return This builder for chaining.
       */
      public Builder clearHwuiSkiaTrackEvents() {
        bitField0_ = (bitField0_ & ~0x00000002);
        hwuiSkiaTrackEvents_ = false;
        onChanged();
        return this;
      }

      private com.google.protobuf.LazyStringArrayList hwuiPackageNameFilter_ =
          com.google.protobuf.LazyStringArrayList.emptyList();
      private void ensureHwuiPackageNameFilterIsMutable() {
        if (!hwuiPackageNameFilter_.isModifiable()) {
          hwuiPackageNameFilter_ = new com.google.protobuf.LazyStringArrayList(hwuiPackageNameFilter_);
        }
        bitField0_ |= 0x00000004;
      }
      /**
       * <pre>
       * If non-empty, hwui_skia_track_events applies to only the packages listed.
       * Otherwise, hwui_skia_track_events applies globally to all HWUI apps.
       * </pre>
       *
       * <code>repeated string hwui_package_name_filter = 3;</code>
       * @return A list containing the hwuiPackageNameFilter.
       */
      public com.google.protobuf.ProtocolStringList
          getHwuiPackageNameFilterList() {
        hwuiPackageNameFilter_.makeImmutable();
        return hwuiPackageNameFilter_;
      }
      /**
       * <pre>
       * If non-empty, hwui_skia_track_events applies to only the packages listed.
       * Otherwise, hwui_skia_track_events applies globally to all HWUI apps.
       * </pre>
       *
       * <code>repeated string hwui_package_name_filter = 3;</code>
       * @return The count of hwuiPackageNameFilter.
       */
      public int getHwuiPackageNameFilterCount() {
        return hwuiPackageNameFilter_.size();
      }
      /**
       * <pre>
       * If non-empty, hwui_skia_track_events applies to only the packages listed.
       * Otherwise, hwui_skia_track_events applies globally to all HWUI apps.
       * </pre>
       *
       * <code>repeated string hwui_package_name_filter = 3;</code>
       * @param index The index of the element to return.
       * @return The hwuiPackageNameFilter at the given index.
       */
      public java.lang.String getHwuiPackageNameFilter(int index) {
        return hwuiPackageNameFilter_.get(index);
      }
      /**
       * <pre>
       * If non-empty, hwui_skia_track_events applies to only the packages listed.
       * Otherwise, hwui_skia_track_events applies globally to all HWUI apps.
       * </pre>
       *
       * <code>repeated string hwui_package_name_filter = 3;</code>
       * @param index The index of the value to return.
       * @return The bytes of the hwuiPackageNameFilter at the given index.
       */
      public com.google.protobuf.ByteString
          getHwuiPackageNameFilterBytes(int index) {
        return hwuiPackageNameFilter_.getByteString(index);
      }
      /**
       * <pre>
       * If non-empty, hwui_skia_track_events applies to only the packages listed.
       * Otherwise, hwui_skia_track_events applies globally to all HWUI apps.
       * </pre>
       *
       * <code>repeated string hwui_package_name_filter = 3;</code>
       * @param index The index to set the value at.
       * @param value The hwuiPackageNameFilter to set.
       * @return This builder for chaining.
       */
      public Builder setHwuiPackageNameFilter(
          int index, java.lang.String value) {
        if (value == null) { throw new NullPointerException(); }
        ensureHwuiPackageNameFilterIsMutable();
        hwuiPackageNameFilter_.set(index, value);
        bitField0_ |= 0x00000004;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * If non-empty, hwui_skia_track_events applies to only the packages listed.
       * Otherwise, hwui_skia_track_events applies globally to all HWUI apps.
       * </pre>
       *
       * <code>repeated string hwui_package_name_filter = 3;</code>
       * @param value The hwuiPackageNameFilter to add.
       * @return This builder for chaining.
       */
      public Builder addHwuiPackageNameFilter(
          java.lang.String value) {
        if (value == null) { throw new NullPointerException(); }
        ensureHwuiPackageNameFilterIsMutable();
        hwuiPackageNameFilter_.add(value);
        bitField0_ |= 0x00000004;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * If non-empty, hwui_skia_track_events applies to only the packages listed.
       * Otherwise, hwui_skia_track_events applies globally to all HWUI apps.
       * </pre>
       *
       * <code>repeated string hwui_package_name_filter = 3;</code>
       * @param values The hwuiPackageNameFilter to add.
       * @return This builder for chaining.
       */
      public Builder addAllHwuiPackageNameFilter(
          java.lang.Iterable<java.lang.String> values) {
        ensureHwuiPackageNameFilterIsMutable();
        com.google.protobuf.AbstractMessageLite.Builder.addAll(
            values, hwuiPackageNameFilter_);
        bitField0_ |= 0x00000004;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * If non-empty, hwui_skia_track_events applies to only the packages listed.
       * Otherwise, hwui_skia_track_events applies globally to all HWUI apps.
       * </pre>
       *
       * <code>repeated string hwui_package_name_filter = 3;</code>
       * @return This builder for chaining.
       */
      public Builder clearHwuiPackageNameFilter() {
        hwuiPackageNameFilter_ =
          com.google.protobuf.LazyStringArrayList.emptyList();
        bitField0_ = (bitField0_ & ~0x00000004);;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * If non-empty, hwui_skia_track_events applies to only the packages listed.
       * Otherwise, hwui_skia_track_events applies globally to all HWUI apps.
       * </pre>
       *
       * <code>repeated string hwui_package_name_filter = 3;</code>
       * @param value The bytes of the hwuiPackageNameFilter to add.
       * @return This builder for chaining.
       */
      public Builder addHwuiPackageNameFilterBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) { throw new NullPointerException(); }
        ensureHwuiPackageNameFilterIsMutable();
        hwuiPackageNameFilter_.add(value);
        bitField0_ |= 0x00000004;
        onChanged();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:perfetto.protos.AndroidSdkSyspropGuardConfig)
    }

    // @@protoc_insertion_point(class_scope:perfetto.protos.AndroidSdkSyspropGuardConfig)
    private static final perfetto.protos.AndroidSdkSyspropGuardConfigOuterClass.AndroidSdkSyspropGuardConfig DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new perfetto.protos.AndroidSdkSyspropGuardConfigOuterClass.AndroidSdkSyspropGuardConfig();
    }

    public static perfetto.protos.AndroidSdkSyspropGuardConfigOuterClass.AndroidSdkSyspropGuardConfig getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<AndroidSdkSyspropGuardConfig>
        PARSER = new com.google.protobuf.AbstractParser<AndroidSdkSyspropGuardConfig>() {
      @java.lang.Override
      public AndroidSdkSyspropGuardConfig parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        Builder builder = newBuilder();
        try {
          builder.mergeFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.setUnfinishedMessage(builder.buildPartial());
        } catch (com.google.protobuf.UninitializedMessageException e) {
          throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
        } catch (java.io.IOException e) {
          throw new com.google.protobuf.InvalidProtocolBufferException(e)
              .setUnfinishedMessage(builder.buildPartial());
        }
        return builder.buildPartial();
      }
    };

    public static com.google.protobuf.Parser<AndroidSdkSyspropGuardConfig> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<AndroidSdkSyspropGuardConfig> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public perfetto.protos.AndroidSdkSyspropGuardConfigOuterClass.AndroidSdkSyspropGuardConfig getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_perfetto_protos_AndroidSdkSyspropGuardConfig_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_perfetto_protos_AndroidSdkSyspropGuardConfig_fieldAccessorTable;

  public static com.google.protobuf.Descriptors.FileDescriptor
      getDescriptor() {
    return descriptor;
  }
  private static  com.google.protobuf.Descriptors.FileDescriptor
      descriptor;
  static {
    java.lang.String[] descriptorData = {
      "\nEprotos/perfetto/config/android/android" +
      "_sdk_sysprop_guard_config.proto\022\017perfett" +
      "o.protos\"\212\001\n\034AndroidSdkSyspropGuardConfi" +
      "g\022(\n surfaceflinger_skia_track_events\030\001 " +
      "\001(\010\022\036\n\026hwui_skia_track_events\030\002 \001(\010\022 \n\030h" +
      "wui_package_name_filter\030\003 \003(\t"
    };
    descriptor = com.google.protobuf.Descriptors.FileDescriptor
      .internalBuildGeneratedFileFrom(descriptorData,
        new com.google.protobuf.Descriptors.FileDescriptor[] {
        });
    internal_static_perfetto_protos_AndroidSdkSyspropGuardConfig_descriptor =
      getDescriptor().getMessageTypes().get(0);
    internal_static_perfetto_protos_AndroidSdkSyspropGuardConfig_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessage.FieldAccessorTable(
        internal_static_perfetto_protos_AndroidSdkSyspropGuardConfig_descriptor,
        new java.lang.String[] { "SurfaceflingerSkiaTrackEvents", "HwuiSkiaTrackEvents", "HwuiPackageNameFilter", });
    descriptor.resolveAllFeaturesImmutable();
  }

  // @@protoc_insertion_point(outer_class_scope)
}
