// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: protos/perfetto/trace/statsd/statsd_atom.proto
// Protobuf Java Version: 4.29.3

package perfetto.protos;

public final class StatsdAtomOuterClass {
  private StatsdAtomOuterClass() {}
  static {
    com.google.protobuf.RuntimeVersion.validateProtobufGencodeVersion(
      com.google.protobuf.RuntimeVersion.RuntimeDomain.PUBLIC,
      /* major= */ 4,
      /* minor= */ 29,
      /* patch= */ 3,
      /* suffix= */ "",
      StatsdAtomOuterClass.class.getName());
  }
  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistryLite registry) {
  }

  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistry registry) {
    registerAllExtensions(
        (com.google.protobuf.ExtensionRegistryLite) registry);
  }
  public interface AtomOrBuilder extends
      // @@protoc_insertion_point(interface_extends:perfetto.protos.Atom)
      com.google.protobuf.MessageOrBuilder {
  }
  /**
   * <pre>
   * Deliberate empty message. See comment on StatsdAtom#atom below.
   * </pre>
   *
   * Protobuf type {@code perfetto.protos.Atom}
   */
  public static final class Atom extends
      com.google.protobuf.GeneratedMessage implements
      // @@protoc_insertion_point(message_implements:perfetto.protos.Atom)
      AtomOrBuilder {
  private static final long serialVersionUID = 0L;
    static {
      com.google.protobuf.RuntimeVersion.validateProtobufGencodeVersion(
        com.google.protobuf.RuntimeVersion.RuntimeDomain.PUBLIC,
        /* major= */ 4,
        /* minor= */ 29,
        /* patch= */ 3,
        /* suffix= */ "",
        Atom.class.getName());
    }
    // Use Atom.newBuilder() to construct.
    private Atom(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
    }
    private Atom() {
    }

    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return perfetto.protos.StatsdAtomOuterClass.internal_static_perfetto_protos_Atom_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return perfetto.protos.StatsdAtomOuterClass.internal_static_perfetto_protos_Atom_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              perfetto.protos.StatsdAtomOuterClass.Atom.class, perfetto.protos.StatsdAtomOuterClass.Atom.Builder.class);
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getUnknownFields().writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      size += getUnknownFields().getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof perfetto.protos.StatsdAtomOuterClass.Atom)) {
        return super.equals(obj);
      }
      perfetto.protos.StatsdAtomOuterClass.Atom other = (perfetto.protos.StatsdAtomOuterClass.Atom) obj;

      if (!getUnknownFields().equals(other.getUnknownFields())) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      hash = (29 * hash) + getUnknownFields().hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static perfetto.protos.StatsdAtomOuterClass.Atom parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static perfetto.protos.StatsdAtomOuterClass.Atom parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static perfetto.protos.StatsdAtomOuterClass.Atom parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static perfetto.protos.StatsdAtomOuterClass.Atom parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static perfetto.protos.StatsdAtomOuterClass.Atom parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static perfetto.protos.StatsdAtomOuterClass.Atom parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static perfetto.protos.StatsdAtomOuterClass.Atom parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input);
    }
    public static perfetto.protos.StatsdAtomOuterClass.Atom parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    public static perfetto.protos.StatsdAtomOuterClass.Atom parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessage
          .parseDelimitedWithIOException(PARSER, input);
    }

    public static perfetto.protos.StatsdAtomOuterClass.Atom parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessage
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static perfetto.protos.StatsdAtomOuterClass.Atom parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input);
    }
    public static perfetto.protos.StatsdAtomOuterClass.Atom parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(perfetto.protos.StatsdAtomOuterClass.Atom prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * <pre>
     * Deliberate empty message. See comment on StatsdAtom#atom below.
     * </pre>
     *
     * Protobuf type {@code perfetto.protos.Atom}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:perfetto.protos.Atom)
        perfetto.protos.StatsdAtomOuterClass.AtomOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return perfetto.protos.StatsdAtomOuterClass.internal_static_perfetto_protos_Atom_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return perfetto.protos.StatsdAtomOuterClass.internal_static_perfetto_protos_Atom_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                perfetto.protos.StatsdAtomOuterClass.Atom.class, perfetto.protos.StatsdAtomOuterClass.Atom.Builder.class);
      }

      // Construct using perfetto.protos.StatsdAtomOuterClass.Atom.newBuilder()
      private Builder() {

      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);

      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return perfetto.protos.StatsdAtomOuterClass.internal_static_perfetto_protos_Atom_descriptor;
      }

      @java.lang.Override
      public perfetto.protos.StatsdAtomOuterClass.Atom getDefaultInstanceForType() {
        return perfetto.protos.StatsdAtomOuterClass.Atom.getDefaultInstance();
      }

      @java.lang.Override
      public perfetto.protos.StatsdAtomOuterClass.Atom build() {
        perfetto.protos.StatsdAtomOuterClass.Atom result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public perfetto.protos.StatsdAtomOuterClass.Atom buildPartial() {
        perfetto.protos.StatsdAtomOuterClass.Atom result = new perfetto.protos.StatsdAtomOuterClass.Atom(this);
        onBuilt();
        return result;
      }

      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof perfetto.protos.StatsdAtomOuterClass.Atom) {
          return mergeFrom((perfetto.protos.StatsdAtomOuterClass.Atom)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(perfetto.protos.StatsdAtomOuterClass.Atom other) {
        if (other == perfetto.protos.StatsdAtomOuterClass.Atom.getDefaultInstance()) return this;
        this.mergeUnknownFields(other.getUnknownFields());
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        if (extensionRegistry == null) {
          throw new java.lang.NullPointerException();
        }
        try {
          boolean done = false;
          while (!done) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                done = true;
                break;
              default: {
                if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                  done = true; // was an endgroup tag
                }
                break;
              } // default:
            } // switch (tag)
          } // while (!done)
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.unwrapIOException();
        } finally {
          onChanged();
        } // finally
        return this;
      }

      // @@protoc_insertion_point(builder_scope:perfetto.protos.Atom)
    }

    // @@protoc_insertion_point(class_scope:perfetto.protos.Atom)
    private static final perfetto.protos.StatsdAtomOuterClass.Atom DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new perfetto.protos.StatsdAtomOuterClass.Atom();
    }

    public static perfetto.protos.StatsdAtomOuterClass.Atom getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<Atom>
        PARSER = new com.google.protobuf.AbstractParser<Atom>() {
      @java.lang.Override
      public Atom parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        Builder builder = newBuilder();
        try {
          builder.mergeFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.setUnfinishedMessage(builder.buildPartial());
        } catch (com.google.protobuf.UninitializedMessageException e) {
          throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
        } catch (java.io.IOException e) {
          throw new com.google.protobuf.InvalidProtocolBufferException(e)
              .setUnfinishedMessage(builder.buildPartial());
        }
        return builder.buildPartial();
      }
    };

    public static com.google.protobuf.Parser<Atom> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<Atom> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public perfetto.protos.StatsdAtomOuterClass.Atom getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface StatsdAtomOrBuilder extends
      // @@protoc_insertion_point(interface_extends:perfetto.protos.StatsdAtom)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <pre>
     * Atom should be filled with an Atom proto from:
     * https://cs.android.com/android/platform/superproject/main/+/main:frameworks/proto_logging/stats/atoms.proto?q=f:stats%2Fatoms.proto$%20message%5C%20Atom
     * We don't reference Atom directly here since we don't want to import
     * Atom.proto and all its transitive dependencies into Perfetto.
     * atom and timestamp_nanos have the same cardinality
     * </pre>
     *
     * <code>repeated .perfetto.protos.Atom atom = 1;</code>
     */
    java.util.List<perfetto.protos.StatsdAtomOuterClass.Atom> 
        getAtomList();
    /**
     * <pre>
     * Atom should be filled with an Atom proto from:
     * https://cs.android.com/android/platform/superproject/main/+/main:frameworks/proto_logging/stats/atoms.proto?q=f:stats%2Fatoms.proto$%20message%5C%20Atom
     * We don't reference Atom directly here since we don't want to import
     * Atom.proto and all its transitive dependencies into Perfetto.
     * atom and timestamp_nanos have the same cardinality
     * </pre>
     *
     * <code>repeated .perfetto.protos.Atom atom = 1;</code>
     */
    perfetto.protos.StatsdAtomOuterClass.Atom getAtom(int index);
    /**
     * <pre>
     * Atom should be filled with an Atom proto from:
     * https://cs.android.com/android/platform/superproject/main/+/main:frameworks/proto_logging/stats/atoms.proto?q=f:stats%2Fatoms.proto$%20message%5C%20Atom
     * We don't reference Atom directly here since we don't want to import
     * Atom.proto and all its transitive dependencies into Perfetto.
     * atom and timestamp_nanos have the same cardinality
     * </pre>
     *
     * <code>repeated .perfetto.protos.Atom atom = 1;</code>
     */
    int getAtomCount();
    /**
     * <pre>
     * Atom should be filled with an Atom proto from:
     * https://cs.android.com/android/platform/superproject/main/+/main:frameworks/proto_logging/stats/atoms.proto?q=f:stats%2Fatoms.proto$%20message%5C%20Atom
     * We don't reference Atom directly here since we don't want to import
     * Atom.proto and all its transitive dependencies into Perfetto.
     * atom and timestamp_nanos have the same cardinality
     * </pre>
     *
     * <code>repeated .perfetto.protos.Atom atom = 1;</code>
     */
    java.util.List<? extends perfetto.protos.StatsdAtomOuterClass.AtomOrBuilder> 
        getAtomOrBuilderList();
    /**
     * <pre>
     * Atom should be filled with an Atom proto from:
     * https://cs.android.com/android/platform/superproject/main/+/main:frameworks/proto_logging/stats/atoms.proto?q=f:stats%2Fatoms.proto$%20message%5C%20Atom
     * We don't reference Atom directly here since we don't want to import
     * Atom.proto and all its transitive dependencies into Perfetto.
     * atom and timestamp_nanos have the same cardinality
     * </pre>
     *
     * <code>repeated .perfetto.protos.Atom atom = 1;</code>
     */
    perfetto.protos.StatsdAtomOuterClass.AtomOrBuilder getAtomOrBuilder(
        int index);

    /**
     * <code>repeated int64 timestamp_nanos = 2;</code>
     * @return A list containing the timestampNanos.
     */
    java.util.List<java.lang.Long> getTimestampNanosList();
    /**
     * <code>repeated int64 timestamp_nanos = 2;</code>
     * @return The count of timestampNanos.
     */
    int getTimestampNanosCount();
    /**
     * <code>repeated int64 timestamp_nanos = 2;</code>
     * @param index The index of the element to return.
     * @return The timestampNanos at the given index.
     */
    long getTimestampNanos(int index);
  }
  /**
   * <pre>
   * One or more statsd atoms. This must continue to match:
   * perfetto/protos/third_party/statsd/shell_data.proto
   * So that we can efficiently add data from statsd directly to the
   * trace.
   * </pre>
   *
   * Protobuf type {@code perfetto.protos.StatsdAtom}
   */
  public static final class StatsdAtom extends
      com.google.protobuf.GeneratedMessage implements
      // @@protoc_insertion_point(message_implements:perfetto.protos.StatsdAtom)
      StatsdAtomOrBuilder {
  private static final long serialVersionUID = 0L;
    static {
      com.google.protobuf.RuntimeVersion.validateProtobufGencodeVersion(
        com.google.protobuf.RuntimeVersion.RuntimeDomain.PUBLIC,
        /* major= */ 4,
        /* minor= */ 29,
        /* patch= */ 3,
        /* suffix= */ "",
        StatsdAtom.class.getName());
    }
    // Use StatsdAtom.newBuilder() to construct.
    private StatsdAtom(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
    }
    private StatsdAtom() {
      atom_ = java.util.Collections.emptyList();
      timestampNanos_ = emptyLongList();
    }

    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return perfetto.protos.StatsdAtomOuterClass.internal_static_perfetto_protos_StatsdAtom_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return perfetto.protos.StatsdAtomOuterClass.internal_static_perfetto_protos_StatsdAtom_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              perfetto.protos.StatsdAtomOuterClass.StatsdAtom.class, perfetto.protos.StatsdAtomOuterClass.StatsdAtom.Builder.class);
    }

    public static final int ATOM_FIELD_NUMBER = 1;
    @SuppressWarnings("serial")
    private java.util.List<perfetto.protos.StatsdAtomOuterClass.Atom> atom_;
    /**
     * <pre>
     * Atom should be filled with an Atom proto from:
     * https://cs.android.com/android/platform/superproject/main/+/main:frameworks/proto_logging/stats/atoms.proto?q=f:stats%2Fatoms.proto$%20message%5C%20Atom
     * We don't reference Atom directly here since we don't want to import
     * Atom.proto and all its transitive dependencies into Perfetto.
     * atom and timestamp_nanos have the same cardinality
     * </pre>
     *
     * <code>repeated .perfetto.protos.Atom atom = 1;</code>
     */
    @java.lang.Override
    public java.util.List<perfetto.protos.StatsdAtomOuterClass.Atom> getAtomList() {
      return atom_;
    }
    /**
     * <pre>
     * Atom should be filled with an Atom proto from:
     * https://cs.android.com/android/platform/superproject/main/+/main:frameworks/proto_logging/stats/atoms.proto?q=f:stats%2Fatoms.proto$%20message%5C%20Atom
     * We don't reference Atom directly here since we don't want to import
     * Atom.proto and all its transitive dependencies into Perfetto.
     * atom and timestamp_nanos have the same cardinality
     * </pre>
     *
     * <code>repeated .perfetto.protos.Atom atom = 1;</code>
     */
    @java.lang.Override
    public java.util.List<? extends perfetto.protos.StatsdAtomOuterClass.AtomOrBuilder> 
        getAtomOrBuilderList() {
      return atom_;
    }
    /**
     * <pre>
     * Atom should be filled with an Atom proto from:
     * https://cs.android.com/android/platform/superproject/main/+/main:frameworks/proto_logging/stats/atoms.proto?q=f:stats%2Fatoms.proto$%20message%5C%20Atom
     * We don't reference Atom directly here since we don't want to import
     * Atom.proto and all its transitive dependencies into Perfetto.
     * atom and timestamp_nanos have the same cardinality
     * </pre>
     *
     * <code>repeated .perfetto.protos.Atom atom = 1;</code>
     */
    @java.lang.Override
    public int getAtomCount() {
      return atom_.size();
    }
    /**
     * <pre>
     * Atom should be filled with an Atom proto from:
     * https://cs.android.com/android/platform/superproject/main/+/main:frameworks/proto_logging/stats/atoms.proto?q=f:stats%2Fatoms.proto$%20message%5C%20Atom
     * We don't reference Atom directly here since we don't want to import
     * Atom.proto and all its transitive dependencies into Perfetto.
     * atom and timestamp_nanos have the same cardinality
     * </pre>
     *
     * <code>repeated .perfetto.protos.Atom atom = 1;</code>
     */
    @java.lang.Override
    public perfetto.protos.StatsdAtomOuterClass.Atom getAtom(int index) {
      return atom_.get(index);
    }
    /**
     * <pre>
     * Atom should be filled with an Atom proto from:
     * https://cs.android.com/android/platform/superproject/main/+/main:frameworks/proto_logging/stats/atoms.proto?q=f:stats%2Fatoms.proto$%20message%5C%20Atom
     * We don't reference Atom directly here since we don't want to import
     * Atom.proto and all its transitive dependencies into Perfetto.
     * atom and timestamp_nanos have the same cardinality
     * </pre>
     *
     * <code>repeated .perfetto.protos.Atom atom = 1;</code>
     */
    @java.lang.Override
    public perfetto.protos.StatsdAtomOuterClass.AtomOrBuilder getAtomOrBuilder(
        int index) {
      return atom_.get(index);
    }

    public static final int TIMESTAMP_NANOS_FIELD_NUMBER = 2;
    @SuppressWarnings("serial")
    private com.google.protobuf.Internal.LongList timestampNanos_ =
        emptyLongList();
    /**
     * <code>repeated int64 timestamp_nanos = 2;</code>
     * @return A list containing the timestampNanos.
     */
    @java.lang.Override
    public java.util.List<java.lang.Long>
        getTimestampNanosList() {
      return timestampNanos_;
    }
    /**
     * <code>repeated int64 timestamp_nanos = 2;</code>
     * @return The count of timestampNanos.
     */
    public int getTimestampNanosCount() {
      return timestampNanos_.size();
    }
    /**
     * <code>repeated int64 timestamp_nanos = 2;</code>
     * @param index The index of the element to return.
     * @return The timestampNanos at the given index.
     */
    public long getTimestampNanos(int index) {
      return timestampNanos_.getLong(index);
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      for (int i = 0; i < atom_.size(); i++) {
        output.writeMessage(1, atom_.get(i));
      }
      for (int i = 0; i < timestampNanos_.size(); i++) {
        output.writeInt64(2, timestampNanos_.getLong(i));
      }
      getUnknownFields().writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      for (int i = 0; i < atom_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(1, atom_.get(i));
      }
      {
        int dataSize = 0;
        for (int i = 0; i < timestampNanos_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeInt64SizeNoTag(timestampNanos_.getLong(i));
        }
        size += dataSize;
        size += 1 * getTimestampNanosList().size();
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof perfetto.protos.StatsdAtomOuterClass.StatsdAtom)) {
        return super.equals(obj);
      }
      perfetto.protos.StatsdAtomOuterClass.StatsdAtom other = (perfetto.protos.StatsdAtomOuterClass.StatsdAtom) obj;

      if (!getAtomList()
          .equals(other.getAtomList())) return false;
      if (!getTimestampNanosList()
          .equals(other.getTimestampNanosList())) return false;
      if (!getUnknownFields().equals(other.getUnknownFields())) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      if (getAtomCount() > 0) {
        hash = (37 * hash) + ATOM_FIELD_NUMBER;
        hash = (53 * hash) + getAtomList().hashCode();
      }
      if (getTimestampNanosCount() > 0) {
        hash = (37 * hash) + TIMESTAMP_NANOS_FIELD_NUMBER;
        hash = (53 * hash) + getTimestampNanosList().hashCode();
      }
      hash = (29 * hash) + getUnknownFields().hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static perfetto.protos.StatsdAtomOuterClass.StatsdAtom parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static perfetto.protos.StatsdAtomOuterClass.StatsdAtom parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static perfetto.protos.StatsdAtomOuterClass.StatsdAtom parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static perfetto.protos.StatsdAtomOuterClass.StatsdAtom parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static perfetto.protos.StatsdAtomOuterClass.StatsdAtom parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static perfetto.protos.StatsdAtomOuterClass.StatsdAtom parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static perfetto.protos.StatsdAtomOuterClass.StatsdAtom parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input);
    }
    public static perfetto.protos.StatsdAtomOuterClass.StatsdAtom parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    public static perfetto.protos.StatsdAtomOuterClass.StatsdAtom parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessage
          .parseDelimitedWithIOException(PARSER, input);
    }

    public static perfetto.protos.StatsdAtomOuterClass.StatsdAtom parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessage
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static perfetto.protos.StatsdAtomOuterClass.StatsdAtom parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input);
    }
    public static perfetto.protos.StatsdAtomOuterClass.StatsdAtom parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(perfetto.protos.StatsdAtomOuterClass.StatsdAtom prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * <pre>
     * One or more statsd atoms. This must continue to match:
     * perfetto/protos/third_party/statsd/shell_data.proto
     * So that we can efficiently add data from statsd directly to the
     * trace.
     * </pre>
     *
     * Protobuf type {@code perfetto.protos.StatsdAtom}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:perfetto.protos.StatsdAtom)
        perfetto.protos.StatsdAtomOuterClass.StatsdAtomOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return perfetto.protos.StatsdAtomOuterClass.internal_static_perfetto_protos_StatsdAtom_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return perfetto.protos.StatsdAtomOuterClass.internal_static_perfetto_protos_StatsdAtom_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                perfetto.protos.StatsdAtomOuterClass.StatsdAtom.class, perfetto.protos.StatsdAtomOuterClass.StatsdAtom.Builder.class);
      }

      // Construct using perfetto.protos.StatsdAtomOuterClass.StatsdAtom.newBuilder()
      private Builder() {

      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);

      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        bitField0_ = 0;
        if (atomBuilder_ == null) {
          atom_ = java.util.Collections.emptyList();
        } else {
          atom_ = null;
          atomBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000001);
        timestampNanos_ = emptyLongList();
        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return perfetto.protos.StatsdAtomOuterClass.internal_static_perfetto_protos_StatsdAtom_descriptor;
      }

      @java.lang.Override
      public perfetto.protos.StatsdAtomOuterClass.StatsdAtom getDefaultInstanceForType() {
        return perfetto.protos.StatsdAtomOuterClass.StatsdAtom.getDefaultInstance();
      }

      @java.lang.Override
      public perfetto.protos.StatsdAtomOuterClass.StatsdAtom build() {
        perfetto.protos.StatsdAtomOuterClass.StatsdAtom result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public perfetto.protos.StatsdAtomOuterClass.StatsdAtom buildPartial() {
        perfetto.protos.StatsdAtomOuterClass.StatsdAtom result = new perfetto.protos.StatsdAtomOuterClass.StatsdAtom(this);
        buildPartialRepeatedFields(result);
        if (bitField0_ != 0) { buildPartial0(result); }
        onBuilt();
        return result;
      }

      private void buildPartialRepeatedFields(perfetto.protos.StatsdAtomOuterClass.StatsdAtom result) {
        if (atomBuilder_ == null) {
          if (((bitField0_ & 0x00000001) != 0)) {
            atom_ = java.util.Collections.unmodifiableList(atom_);
            bitField0_ = (bitField0_ & ~0x00000001);
          }
          result.atom_ = atom_;
        } else {
          result.atom_ = atomBuilder_.build();
        }
      }

      private void buildPartial0(perfetto.protos.StatsdAtomOuterClass.StatsdAtom result) {
        int from_bitField0_ = bitField0_;
        if (((from_bitField0_ & 0x00000002) != 0)) {
          timestampNanos_.makeImmutable();
          result.timestampNanos_ = timestampNanos_;
        }
      }

      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof perfetto.protos.StatsdAtomOuterClass.StatsdAtom) {
          return mergeFrom((perfetto.protos.StatsdAtomOuterClass.StatsdAtom)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(perfetto.protos.StatsdAtomOuterClass.StatsdAtom other) {
        if (other == perfetto.protos.StatsdAtomOuterClass.StatsdAtom.getDefaultInstance()) return this;
        if (atomBuilder_ == null) {
          if (!other.atom_.isEmpty()) {
            if (atom_.isEmpty()) {
              atom_ = other.atom_;
              bitField0_ = (bitField0_ & ~0x00000001);
            } else {
              ensureAtomIsMutable();
              atom_.addAll(other.atom_);
            }
            onChanged();
          }
        } else {
          if (!other.atom_.isEmpty()) {
            if (atomBuilder_.isEmpty()) {
              atomBuilder_.dispose();
              atomBuilder_ = null;
              atom_ = other.atom_;
              bitField0_ = (bitField0_ & ~0x00000001);
              atomBuilder_ = 
                com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders ?
                   getAtomFieldBuilder() : null;
            } else {
              atomBuilder_.addAllMessages(other.atom_);
            }
          }
        }
        if (!other.timestampNanos_.isEmpty()) {
          if (timestampNanos_.isEmpty()) {
            timestampNanos_ = other.timestampNanos_;
            timestampNanos_.makeImmutable();
            bitField0_ |= 0x00000002;
          } else {
            ensureTimestampNanosIsMutable();
            timestampNanos_.addAll(other.timestampNanos_);
          }
          onChanged();
        }
        this.mergeUnknownFields(other.getUnknownFields());
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        if (extensionRegistry == null) {
          throw new java.lang.NullPointerException();
        }
        try {
          boolean done = false;
          while (!done) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                done = true;
                break;
              case 10: {
                perfetto.protos.StatsdAtomOuterClass.Atom m =
                    input.readMessage(
                        perfetto.protos.StatsdAtomOuterClass.Atom.parser(),
                        extensionRegistry);
                if (atomBuilder_ == null) {
                  ensureAtomIsMutable();
                  atom_.add(m);
                } else {
                  atomBuilder_.addMessage(m);
                }
                break;
              } // case 10
              case 16: {
                long v = input.readInt64();
                ensureTimestampNanosIsMutable();
                timestampNanos_.addLong(v);
                break;
              } // case 16
              case 18: {
                int length = input.readRawVarint32();
                int limit = input.pushLimit(length);
                ensureTimestampNanosIsMutable();
                while (input.getBytesUntilLimit() > 0) {
                  timestampNanos_.addLong(input.readInt64());
                }
                input.popLimit(limit);
                break;
              } // case 18
              default: {
                if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                  done = true; // was an endgroup tag
                }
                break;
              } // default:
            } // switch (tag)
          } // while (!done)
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.unwrapIOException();
        } finally {
          onChanged();
        } // finally
        return this;
      }
      private int bitField0_;

      private java.util.List<perfetto.protos.StatsdAtomOuterClass.Atom> atom_ =
        java.util.Collections.emptyList();
      private void ensureAtomIsMutable() {
        if (!((bitField0_ & 0x00000001) != 0)) {
          atom_ = new java.util.ArrayList<perfetto.protos.StatsdAtomOuterClass.Atom>(atom_);
          bitField0_ |= 0x00000001;
         }
      }

      private com.google.protobuf.RepeatedFieldBuilder<
          perfetto.protos.StatsdAtomOuterClass.Atom, perfetto.protos.StatsdAtomOuterClass.Atom.Builder, perfetto.protos.StatsdAtomOuterClass.AtomOrBuilder> atomBuilder_;

      /**
       * <pre>
       * Atom should be filled with an Atom proto from:
       * https://cs.android.com/android/platform/superproject/main/+/main:frameworks/proto_logging/stats/atoms.proto?q=f:stats%2Fatoms.proto$%20message%5C%20Atom
       * We don't reference Atom directly here since we don't want to import
       * Atom.proto and all its transitive dependencies into Perfetto.
       * atom and timestamp_nanos have the same cardinality
       * </pre>
       *
       * <code>repeated .perfetto.protos.Atom atom = 1;</code>
       */
      public java.util.List<perfetto.protos.StatsdAtomOuterClass.Atom> getAtomList() {
        if (atomBuilder_ == null) {
          return java.util.Collections.unmodifiableList(atom_);
        } else {
          return atomBuilder_.getMessageList();
        }
      }
      /**
       * <pre>
       * Atom should be filled with an Atom proto from:
       * https://cs.android.com/android/platform/superproject/main/+/main:frameworks/proto_logging/stats/atoms.proto?q=f:stats%2Fatoms.proto$%20message%5C%20Atom
       * We don't reference Atom directly here since we don't want to import
       * Atom.proto and all its transitive dependencies into Perfetto.
       * atom and timestamp_nanos have the same cardinality
       * </pre>
       *
       * <code>repeated .perfetto.protos.Atom atom = 1;</code>
       */
      public int getAtomCount() {
        if (atomBuilder_ == null) {
          return atom_.size();
        } else {
          return atomBuilder_.getCount();
        }
      }
      /**
       * <pre>
       * Atom should be filled with an Atom proto from:
       * https://cs.android.com/android/platform/superproject/main/+/main:frameworks/proto_logging/stats/atoms.proto?q=f:stats%2Fatoms.proto$%20message%5C%20Atom
       * We don't reference Atom directly here since we don't want to import
       * Atom.proto and all its transitive dependencies into Perfetto.
       * atom and timestamp_nanos have the same cardinality
       * </pre>
       *
       * <code>repeated .perfetto.protos.Atom atom = 1;</code>
       */
      public perfetto.protos.StatsdAtomOuterClass.Atom getAtom(int index) {
        if (atomBuilder_ == null) {
          return atom_.get(index);
        } else {
          return atomBuilder_.getMessage(index);
        }
      }
      /**
       * <pre>
       * Atom should be filled with an Atom proto from:
       * https://cs.android.com/android/platform/superproject/main/+/main:frameworks/proto_logging/stats/atoms.proto?q=f:stats%2Fatoms.proto$%20message%5C%20Atom
       * We don't reference Atom directly here since we don't want to import
       * Atom.proto and all its transitive dependencies into Perfetto.
       * atom and timestamp_nanos have the same cardinality
       * </pre>
       *
       * <code>repeated .perfetto.protos.Atom atom = 1;</code>
       */
      public Builder setAtom(
          int index, perfetto.protos.StatsdAtomOuterClass.Atom value) {
        if (atomBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureAtomIsMutable();
          atom_.set(index, value);
          onChanged();
        } else {
          atomBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <pre>
       * Atom should be filled with an Atom proto from:
       * https://cs.android.com/android/platform/superproject/main/+/main:frameworks/proto_logging/stats/atoms.proto?q=f:stats%2Fatoms.proto$%20message%5C%20Atom
       * We don't reference Atom directly here since we don't want to import
       * Atom.proto and all its transitive dependencies into Perfetto.
       * atom and timestamp_nanos have the same cardinality
       * </pre>
       *
       * <code>repeated .perfetto.protos.Atom atom = 1;</code>
       */
      public Builder setAtom(
          int index, perfetto.protos.StatsdAtomOuterClass.Atom.Builder builderForValue) {
        if (atomBuilder_ == null) {
          ensureAtomIsMutable();
          atom_.set(index, builderForValue.build());
          onChanged();
        } else {
          atomBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * Atom should be filled with an Atom proto from:
       * https://cs.android.com/android/platform/superproject/main/+/main:frameworks/proto_logging/stats/atoms.proto?q=f:stats%2Fatoms.proto$%20message%5C%20Atom
       * We don't reference Atom directly here since we don't want to import
       * Atom.proto and all its transitive dependencies into Perfetto.
       * atom and timestamp_nanos have the same cardinality
       * </pre>
       *
       * <code>repeated .perfetto.protos.Atom atom = 1;</code>
       */
      public Builder addAtom(perfetto.protos.StatsdAtomOuterClass.Atom value) {
        if (atomBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureAtomIsMutable();
          atom_.add(value);
          onChanged();
        } else {
          atomBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <pre>
       * Atom should be filled with an Atom proto from:
       * https://cs.android.com/android/platform/superproject/main/+/main:frameworks/proto_logging/stats/atoms.proto?q=f:stats%2Fatoms.proto$%20message%5C%20Atom
       * We don't reference Atom directly here since we don't want to import
       * Atom.proto and all its transitive dependencies into Perfetto.
       * atom and timestamp_nanos have the same cardinality
       * </pre>
       *
       * <code>repeated .perfetto.protos.Atom atom = 1;</code>
       */
      public Builder addAtom(
          int index, perfetto.protos.StatsdAtomOuterClass.Atom value) {
        if (atomBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureAtomIsMutable();
          atom_.add(index, value);
          onChanged();
        } else {
          atomBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <pre>
       * Atom should be filled with an Atom proto from:
       * https://cs.android.com/android/platform/superproject/main/+/main:frameworks/proto_logging/stats/atoms.proto?q=f:stats%2Fatoms.proto$%20message%5C%20Atom
       * We don't reference Atom directly here since we don't want to import
       * Atom.proto and all its transitive dependencies into Perfetto.
       * atom and timestamp_nanos have the same cardinality
       * </pre>
       *
       * <code>repeated .perfetto.protos.Atom atom = 1;</code>
       */
      public Builder addAtom(
          perfetto.protos.StatsdAtomOuterClass.Atom.Builder builderForValue) {
        if (atomBuilder_ == null) {
          ensureAtomIsMutable();
          atom_.add(builderForValue.build());
          onChanged();
        } else {
          atomBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * Atom should be filled with an Atom proto from:
       * https://cs.android.com/android/platform/superproject/main/+/main:frameworks/proto_logging/stats/atoms.proto?q=f:stats%2Fatoms.proto$%20message%5C%20Atom
       * We don't reference Atom directly here since we don't want to import
       * Atom.proto and all its transitive dependencies into Perfetto.
       * atom and timestamp_nanos have the same cardinality
       * </pre>
       *
       * <code>repeated .perfetto.protos.Atom atom = 1;</code>
       */
      public Builder addAtom(
          int index, perfetto.protos.StatsdAtomOuterClass.Atom.Builder builderForValue) {
        if (atomBuilder_ == null) {
          ensureAtomIsMutable();
          atom_.add(index, builderForValue.build());
          onChanged();
        } else {
          atomBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * Atom should be filled with an Atom proto from:
       * https://cs.android.com/android/platform/superproject/main/+/main:frameworks/proto_logging/stats/atoms.proto?q=f:stats%2Fatoms.proto$%20message%5C%20Atom
       * We don't reference Atom directly here since we don't want to import
       * Atom.proto and all its transitive dependencies into Perfetto.
       * atom and timestamp_nanos have the same cardinality
       * </pre>
       *
       * <code>repeated .perfetto.protos.Atom atom = 1;</code>
       */
      public Builder addAllAtom(
          java.lang.Iterable<? extends perfetto.protos.StatsdAtomOuterClass.Atom> values) {
        if (atomBuilder_ == null) {
          ensureAtomIsMutable();
          com.google.protobuf.AbstractMessageLite.Builder.addAll(
              values, atom_);
          onChanged();
        } else {
          atomBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <pre>
       * Atom should be filled with an Atom proto from:
       * https://cs.android.com/android/platform/superproject/main/+/main:frameworks/proto_logging/stats/atoms.proto?q=f:stats%2Fatoms.proto$%20message%5C%20Atom
       * We don't reference Atom directly here since we don't want to import
       * Atom.proto and all its transitive dependencies into Perfetto.
       * atom and timestamp_nanos have the same cardinality
       * </pre>
       *
       * <code>repeated .perfetto.protos.Atom atom = 1;</code>
       */
      public Builder clearAtom() {
        if (atomBuilder_ == null) {
          atom_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000001);
          onChanged();
        } else {
          atomBuilder_.clear();
        }
        return this;
      }
      /**
       * <pre>
       * Atom should be filled with an Atom proto from:
       * https://cs.android.com/android/platform/superproject/main/+/main:frameworks/proto_logging/stats/atoms.proto?q=f:stats%2Fatoms.proto$%20message%5C%20Atom
       * We don't reference Atom directly here since we don't want to import
       * Atom.proto and all its transitive dependencies into Perfetto.
       * atom and timestamp_nanos have the same cardinality
       * </pre>
       *
       * <code>repeated .perfetto.protos.Atom atom = 1;</code>
       */
      public Builder removeAtom(int index) {
        if (atomBuilder_ == null) {
          ensureAtomIsMutable();
          atom_.remove(index);
          onChanged();
        } else {
          atomBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <pre>
       * Atom should be filled with an Atom proto from:
       * https://cs.android.com/android/platform/superproject/main/+/main:frameworks/proto_logging/stats/atoms.proto?q=f:stats%2Fatoms.proto$%20message%5C%20Atom
       * We don't reference Atom directly here since we don't want to import
       * Atom.proto and all its transitive dependencies into Perfetto.
       * atom and timestamp_nanos have the same cardinality
       * </pre>
       *
       * <code>repeated .perfetto.protos.Atom atom = 1;</code>
       */
      public perfetto.protos.StatsdAtomOuterClass.Atom.Builder getAtomBuilder(
          int index) {
        return getAtomFieldBuilder().getBuilder(index);
      }
      /**
       * <pre>
       * Atom should be filled with an Atom proto from:
       * https://cs.android.com/android/platform/superproject/main/+/main:frameworks/proto_logging/stats/atoms.proto?q=f:stats%2Fatoms.proto$%20message%5C%20Atom
       * We don't reference Atom directly here since we don't want to import
       * Atom.proto and all its transitive dependencies into Perfetto.
       * atom and timestamp_nanos have the same cardinality
       * </pre>
       *
       * <code>repeated .perfetto.protos.Atom atom = 1;</code>
       */
      public perfetto.protos.StatsdAtomOuterClass.AtomOrBuilder getAtomOrBuilder(
          int index) {
        if (atomBuilder_ == null) {
          return atom_.get(index);  } else {
          return atomBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <pre>
       * Atom should be filled with an Atom proto from:
       * https://cs.android.com/android/platform/superproject/main/+/main:frameworks/proto_logging/stats/atoms.proto?q=f:stats%2Fatoms.proto$%20message%5C%20Atom
       * We don't reference Atom directly here since we don't want to import
       * Atom.proto and all its transitive dependencies into Perfetto.
       * atom and timestamp_nanos have the same cardinality
       * </pre>
       *
       * <code>repeated .perfetto.protos.Atom atom = 1;</code>
       */
      public java.util.List<? extends perfetto.protos.StatsdAtomOuterClass.AtomOrBuilder> 
           getAtomOrBuilderList() {
        if (atomBuilder_ != null) {
          return atomBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(atom_);
        }
      }
      /**
       * <pre>
       * Atom should be filled with an Atom proto from:
       * https://cs.android.com/android/platform/superproject/main/+/main:frameworks/proto_logging/stats/atoms.proto?q=f:stats%2Fatoms.proto$%20message%5C%20Atom
       * We don't reference Atom directly here since we don't want to import
       * Atom.proto and all its transitive dependencies into Perfetto.
       * atom and timestamp_nanos have the same cardinality
       * </pre>
       *
       * <code>repeated .perfetto.protos.Atom atom = 1;</code>
       */
      public perfetto.protos.StatsdAtomOuterClass.Atom.Builder addAtomBuilder() {
        return getAtomFieldBuilder().addBuilder(
            perfetto.protos.StatsdAtomOuterClass.Atom.getDefaultInstance());
      }
      /**
       * <pre>
       * Atom should be filled with an Atom proto from:
       * https://cs.android.com/android/platform/superproject/main/+/main:frameworks/proto_logging/stats/atoms.proto?q=f:stats%2Fatoms.proto$%20message%5C%20Atom
       * We don't reference Atom directly here since we don't want to import
       * Atom.proto and all its transitive dependencies into Perfetto.
       * atom and timestamp_nanos have the same cardinality
       * </pre>
       *
       * <code>repeated .perfetto.protos.Atom atom = 1;</code>
       */
      public perfetto.protos.StatsdAtomOuterClass.Atom.Builder addAtomBuilder(
          int index) {
        return getAtomFieldBuilder().addBuilder(
            index, perfetto.protos.StatsdAtomOuterClass.Atom.getDefaultInstance());
      }
      /**
       * <pre>
       * Atom should be filled with an Atom proto from:
       * https://cs.android.com/android/platform/superproject/main/+/main:frameworks/proto_logging/stats/atoms.proto?q=f:stats%2Fatoms.proto$%20message%5C%20Atom
       * We don't reference Atom directly here since we don't want to import
       * Atom.proto and all its transitive dependencies into Perfetto.
       * atom and timestamp_nanos have the same cardinality
       * </pre>
       *
       * <code>repeated .perfetto.protos.Atom atom = 1;</code>
       */
      public java.util.List<perfetto.protos.StatsdAtomOuterClass.Atom.Builder> 
           getAtomBuilderList() {
        return getAtomFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilder<
          perfetto.protos.StatsdAtomOuterClass.Atom, perfetto.protos.StatsdAtomOuterClass.Atom.Builder, perfetto.protos.StatsdAtomOuterClass.AtomOrBuilder> 
          getAtomFieldBuilder() {
        if (atomBuilder_ == null) {
          atomBuilder_ = new com.google.protobuf.RepeatedFieldBuilder<
              perfetto.protos.StatsdAtomOuterClass.Atom, perfetto.protos.StatsdAtomOuterClass.Atom.Builder, perfetto.protos.StatsdAtomOuterClass.AtomOrBuilder>(
                  atom_,
                  ((bitField0_ & 0x00000001) != 0),
                  getParentForChildren(),
                  isClean());
          atom_ = null;
        }
        return atomBuilder_;
      }

      private com.google.protobuf.Internal.LongList timestampNanos_ = emptyLongList();
      private void ensureTimestampNanosIsMutable() {
        if (!timestampNanos_.isModifiable()) {
          timestampNanos_ = makeMutableCopy(timestampNanos_);
        }
        bitField0_ |= 0x00000002;
      }
      /**
       * <code>repeated int64 timestamp_nanos = 2;</code>
       * @return A list containing the timestampNanos.
       */
      public java.util.List<java.lang.Long>
          getTimestampNanosList() {
        timestampNanos_.makeImmutable();
        return timestampNanos_;
      }
      /**
       * <code>repeated int64 timestamp_nanos = 2;</code>
       * @return The count of timestampNanos.
       */
      public int getTimestampNanosCount() {
        return timestampNanos_.size();
      }
      /**
       * <code>repeated int64 timestamp_nanos = 2;</code>
       * @param index The index of the element to return.
       * @return The timestampNanos at the given index.
       */
      public long getTimestampNanos(int index) {
        return timestampNanos_.getLong(index);
      }
      /**
       * <code>repeated int64 timestamp_nanos = 2;</code>
       * @param index The index to set the value at.
       * @param value The timestampNanos to set.
       * @return This builder for chaining.
       */
      public Builder setTimestampNanos(
          int index, long value) {

        ensureTimestampNanosIsMutable();
        timestampNanos_.setLong(index, value);
        bitField0_ |= 0x00000002;
        onChanged();
        return this;
      }
      /**
       * <code>repeated int64 timestamp_nanos = 2;</code>
       * @param value The timestampNanos to add.
       * @return This builder for chaining.
       */
      public Builder addTimestampNanos(long value) {

        ensureTimestampNanosIsMutable();
        timestampNanos_.addLong(value);
        bitField0_ |= 0x00000002;
        onChanged();
        return this;
      }
      /**
       * <code>repeated int64 timestamp_nanos = 2;</code>
       * @param values The timestampNanos to add.
       * @return This builder for chaining.
       */
      public Builder addAllTimestampNanos(
          java.lang.Iterable<? extends java.lang.Long> values) {
        ensureTimestampNanosIsMutable();
        com.google.protobuf.AbstractMessageLite.Builder.addAll(
            values, timestampNanos_);
        bitField0_ |= 0x00000002;
        onChanged();
        return this;
      }
      /**
       * <code>repeated int64 timestamp_nanos = 2;</code>
       * @return This builder for chaining.
       */
      public Builder clearTimestampNanos() {
        timestampNanos_ = emptyLongList();
        bitField0_ = (bitField0_ & ~0x00000002);
        onChanged();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:perfetto.protos.StatsdAtom)
    }

    // @@protoc_insertion_point(class_scope:perfetto.protos.StatsdAtom)
    private static final perfetto.protos.StatsdAtomOuterClass.StatsdAtom DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new perfetto.protos.StatsdAtomOuterClass.StatsdAtom();
    }

    public static perfetto.protos.StatsdAtomOuterClass.StatsdAtom getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<StatsdAtom>
        PARSER = new com.google.protobuf.AbstractParser<StatsdAtom>() {
      @java.lang.Override
      public StatsdAtom parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        Builder builder = newBuilder();
        try {
          builder.mergeFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.setUnfinishedMessage(builder.buildPartial());
        } catch (com.google.protobuf.UninitializedMessageException e) {
          throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
        } catch (java.io.IOException e) {
          throw new com.google.protobuf.InvalidProtocolBufferException(e)
              .setUnfinishedMessage(builder.buildPartial());
        }
        return builder.buildPartial();
      }
    };

    public static com.google.protobuf.Parser<StatsdAtom> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<StatsdAtom> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public perfetto.protos.StatsdAtomOuterClass.StatsdAtom getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_perfetto_protos_Atom_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_perfetto_protos_Atom_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_perfetto_protos_StatsdAtom_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_perfetto_protos_StatsdAtom_fieldAccessorTable;

  public static com.google.protobuf.Descriptors.FileDescriptor
      getDescriptor() {
    return descriptor;
  }
  private static  com.google.protobuf.Descriptors.FileDescriptor
      descriptor;
  static {
    java.lang.String[] descriptorData = {
      "\n.protos/perfetto/trace/statsd/statsd_at" +
      "om.proto\022\017perfetto.protos\"\006\n\004Atom\"J\n\nSta" +
      "tsdAtom\022#\n\004atom\030\001 \003(\0132\025.perfetto.protos." +
      "Atom\022\027\n\017timestamp_nanos\030\002 \003(\003"
    };
    descriptor = com.google.protobuf.Descriptors.FileDescriptor
      .internalBuildGeneratedFileFrom(descriptorData,
        new com.google.protobuf.Descriptors.FileDescriptor[] {
        });
    internal_static_perfetto_protos_Atom_descriptor =
      getDescriptor().getMessageTypes().get(0);
    internal_static_perfetto_protos_Atom_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessage.FieldAccessorTable(
        internal_static_perfetto_protos_Atom_descriptor,
        new java.lang.String[] { });
    internal_static_perfetto_protos_StatsdAtom_descriptor =
      getDescriptor().getMessageTypes().get(1);
    internal_static_perfetto_protos_StatsdAtom_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessage.FieldAccessorTable(
        internal_static_perfetto_protos_StatsdAtom_descriptor,
        new java.lang.String[] { "Atom", "TimestampNanos", });
    descriptor.resolveAllFeaturesImmutable();
  }

  // @@protoc_insertion_point(outer_class_scope)
}
