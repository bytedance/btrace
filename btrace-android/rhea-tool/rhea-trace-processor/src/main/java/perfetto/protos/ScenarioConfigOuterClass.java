// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: protos/perfetto/config/chrome/scenario_config.proto
// Protobuf Java Version: 4.29.3

package perfetto.protos;

public final class ScenarioConfigOuterClass {
  private ScenarioConfigOuterClass() {}
  static {
    com.google.protobuf.RuntimeVersion.validateProtobufGencodeVersion(
      com.google.protobuf.RuntimeVersion.RuntimeDomain.PUBLIC,
      /* major= */ 4,
      /* minor= */ 29,
      /* patch= */ 3,
      /* suffix= */ "",
      ScenarioConfigOuterClass.class.getName());
  }
  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistryLite registry) {
  }

  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistry registry) {
    registerAllExtensions(
        (com.google.protobuf.ExtensionRegistryLite) registry);
  }
  public interface TriggerRuleOrBuilder extends
      // @@protoc_insertion_point(interface_extends:perfetto.protos.TriggerRule)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <pre>
     * Rule unique name.
     * </pre>
     *
     * <code>optional string name = 1;</code>
     * @return Whether the name field is set.
     */
    boolean hasName();
    /**
     * <pre>
     * Rule unique name.
     * </pre>
     *
     * <code>optional string name = 1;</code>
     * @return The name.
     */
    java.lang.String getName();
    /**
     * <pre>
     * Rule unique name.
     * </pre>
     *
     * <code>optional string name = 1;</code>
     * @return The bytes for name.
     */
    com.google.protobuf.ByteString
        getNameBytes();

    /**
     * <pre>
     * A value between 0 and 1 which encodes the probability this rule is
     * triggered.
     * </pre>
     *
     * <code>optional float trigger_chance = 2;</code>
     * @return Whether the triggerChance field is set.
     */
    boolean hasTriggerChance();
    /**
     * <pre>
     * A value between 0 and 1 which encodes the probability this rule is
     * triggered.
     * </pre>
     *
     * <code>optional float trigger_chance = 2;</code>
     * @return The triggerChance.
     */
    float getTriggerChance();

    /**
     * <pre>
     * Additional delay *after* the trigger below. This is mostly useful
     * to trace beyond a triggered event in upload rules. Other triggers
     * can still be serviced during this period.
     * </pre>
     *
     * <code>optional uint64 delay_ms = 3;</code>
     * @return Whether the delayMs field is set.
     */
    boolean hasDelayMs();
    /**
     * <pre>
     * Additional delay *after* the trigger below. This is mostly useful
     * to trace beyond a triggered event in upload rules. Other triggers
     * can still be serviced during this period.
     * </pre>
     *
     * <code>optional uint64 delay_ms = 3;</code>
     * @return The delayMs.
     */
    long getDelayMs();

    /**
     * <pre>
     * Delay *before* which the rule is activated. Trigger events during this
     * period are ignored by this rule. This is mostly useful to trace for a
     * minimum duration before watching trigger events.
     * </pre>
     *
     * <code>optional uint64 activation_delay_ms = 8;</code>
     * @return Whether the activationDelayMs field is set.
     */
    boolean hasActivationDelayMs();
    /**
     * <pre>
     * Delay *before* which the rule is activated. Trigger events during this
     * period are ignored by this rule. This is mostly useful to trace for a
     * minimum duration before watching trigger events.
     * </pre>
     *
     * <code>optional uint64 activation_delay_ms = 8;</code>
     * @return The activationDelayMs.
     */
    long getActivationDelayMs();

    /**
     * <pre>
     * Triggers when the associated named trigger is manually emitted in Chrome
     * client code.
     * </pre>
     *
     * <code>string manual_trigger_name = 4;</code>
     * @return Whether the manualTriggerName field is set.
     */
    boolean hasManualTriggerName();
    /**
     * <pre>
     * Triggers when the associated named trigger is manually emitted in Chrome
     * client code.
     * </pre>
     *
     * <code>string manual_trigger_name = 4;</code>
     * @return The manualTriggerName.
     */
    java.lang.String getManualTriggerName();
    /**
     * <pre>
     * Triggers when the associated named trigger is manually emitted in Chrome
     * client code.
     * </pre>
     *
     * <code>string manual_trigger_name = 4;</code>
     * @return The bytes for manualTriggerName.
     */
    com.google.protobuf.ByteString
        getManualTriggerNameBytes();

    /**
     * <code>.perfetto.protos.TriggerRule.HistogramTrigger histogram = 5;</code>
     * @return Whether the histogram field is set.
     */
    boolean hasHistogram();
    /**
     * <code>.perfetto.protos.TriggerRule.HistogramTrigger histogram = 5;</code>
     * @return The histogram.
     */
    perfetto.protos.ScenarioConfigOuterClass.TriggerRule.HistogramTrigger getHistogram();
    /**
     * <code>.perfetto.protos.TriggerRule.HistogramTrigger histogram = 5;</code>
     */
    perfetto.protos.ScenarioConfigOuterClass.TriggerRule.HistogramTriggerOrBuilder getHistogramOrBuilder();

    /**
     * <code>.perfetto.protos.TriggerRule.RepeatingInterval repeating_interval = 6;</code>
     * @return Whether the repeatingInterval field is set.
     */
    boolean hasRepeatingInterval();
    /**
     * <code>.perfetto.protos.TriggerRule.RepeatingInterval repeating_interval = 6;</code>
     * @return The repeatingInterval.
     */
    perfetto.protos.ScenarioConfigOuterClass.TriggerRule.RepeatingInterval getRepeatingInterval();
    /**
     * <code>.perfetto.protos.TriggerRule.RepeatingInterval repeating_interval = 6;</code>
     */
    perfetto.protos.ScenarioConfigOuterClass.TriggerRule.RepeatingIntervalOrBuilder getRepeatingIntervalOrBuilder();

    perfetto.protos.ScenarioConfigOuterClass.TriggerRule.TriggerCase getTriggerCase();
  }
  /**
   * <pre>
   * Rule that triggers scenario events (e.g. start, stop).
   * </pre>
   *
   * Protobuf type {@code perfetto.protos.TriggerRule}
   */
  public static final class TriggerRule extends
      com.google.protobuf.GeneratedMessage implements
      // @@protoc_insertion_point(message_implements:perfetto.protos.TriggerRule)
      TriggerRuleOrBuilder {
  private static final long serialVersionUID = 0L;
    static {
      com.google.protobuf.RuntimeVersion.validateProtobufGencodeVersion(
        com.google.protobuf.RuntimeVersion.RuntimeDomain.PUBLIC,
        /* major= */ 4,
        /* minor= */ 29,
        /* patch= */ 3,
        /* suffix= */ "",
        TriggerRule.class.getName());
    }
    // Use TriggerRule.newBuilder() to construct.
    private TriggerRule(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
    }
    private TriggerRule() {
      name_ = "";
    }

    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return perfetto.protos.ScenarioConfigOuterClass.internal_static_perfetto_protos_TriggerRule_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return perfetto.protos.ScenarioConfigOuterClass.internal_static_perfetto_protos_TriggerRule_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              perfetto.protos.ScenarioConfigOuterClass.TriggerRule.class, perfetto.protos.ScenarioConfigOuterClass.TriggerRule.Builder.class);
    }

    public interface HistogramTriggerOrBuilder extends
        // @@protoc_insertion_point(interface_extends:perfetto.protos.TriggerRule.HistogramTrigger)
        com.google.protobuf.MessageOrBuilder {

      /**
       * <code>optional string histogram_name = 1;</code>
       * @return Whether the histogramName field is set.
       */
      boolean hasHistogramName();
      /**
       * <code>optional string histogram_name = 1;</code>
       * @return The histogramName.
       */
      java.lang.String getHistogramName();
      /**
       * <code>optional string histogram_name = 1;</code>
       * @return The bytes for histogramName.
       */
      com.google.protobuf.ByteString
          getHistogramNameBytes();

      /**
       * <code>optional int64 min_value = 2;</code>
       * @return Whether the minValue field is set.
       */
      boolean hasMinValue();
      /**
       * <code>optional int64 min_value = 2;</code>
       * @return The minValue.
       */
      long getMinValue();

      /**
       * <code>optional int64 max_value = 3;</code>
       * @return Whether the maxValue field is set.
       */
      boolean hasMaxValue();
      /**
       * <code>optional int64 max_value = 3;</code>
       * @return The maxValue.
       */
      long getMaxValue();
    }
    /**
     * <pre>
     * Triggers when a value within the specified bounds [min_value,
     * max_value] is emitted into a Chrome histogram.
     * </pre>
     *
     * Protobuf type {@code perfetto.protos.TriggerRule.HistogramTrigger}
     */
    public static final class HistogramTrigger extends
        com.google.protobuf.GeneratedMessage implements
        // @@protoc_insertion_point(message_implements:perfetto.protos.TriggerRule.HistogramTrigger)
        HistogramTriggerOrBuilder {
    private static final long serialVersionUID = 0L;
      static {
        com.google.protobuf.RuntimeVersion.validateProtobufGencodeVersion(
          com.google.protobuf.RuntimeVersion.RuntimeDomain.PUBLIC,
          /* major= */ 4,
          /* minor= */ 29,
          /* patch= */ 3,
          /* suffix= */ "",
          HistogramTrigger.class.getName());
      }
      // Use HistogramTrigger.newBuilder() to construct.
      private HistogramTrigger(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
        super(builder);
      }
      private HistogramTrigger() {
        histogramName_ = "";
      }

      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return perfetto.protos.ScenarioConfigOuterClass.internal_static_perfetto_protos_TriggerRule_HistogramTrigger_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return perfetto.protos.ScenarioConfigOuterClass.internal_static_perfetto_protos_TriggerRule_HistogramTrigger_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                perfetto.protos.ScenarioConfigOuterClass.TriggerRule.HistogramTrigger.class, perfetto.protos.ScenarioConfigOuterClass.TriggerRule.HistogramTrigger.Builder.class);
      }

      private int bitField0_;
      public static final int HISTOGRAM_NAME_FIELD_NUMBER = 1;
      @SuppressWarnings("serial")
      private volatile java.lang.Object histogramName_ = "";
      /**
       * <code>optional string histogram_name = 1;</code>
       * @return Whether the histogramName field is set.
       */
      @java.lang.Override
      public boolean hasHistogramName() {
        return ((bitField0_ & 0x00000001) != 0);
      }
      /**
       * <code>optional string histogram_name = 1;</code>
       * @return The histogramName.
       */
      @java.lang.Override
      public java.lang.String getHistogramName() {
        java.lang.Object ref = histogramName_;
        if (ref instanceof java.lang.String) {
          return (java.lang.String) ref;
        } else {
          com.google.protobuf.ByteString bs = 
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          if (bs.isValidUtf8()) {
            histogramName_ = s;
          }
          return s;
        }
      }
      /**
       * <code>optional string histogram_name = 1;</code>
       * @return The bytes for histogramName.
       */
      @java.lang.Override
      public com.google.protobuf.ByteString
          getHistogramNameBytes() {
        java.lang.Object ref = histogramName_;
        if (ref instanceof java.lang.String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          histogramName_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }

      public static final int MIN_VALUE_FIELD_NUMBER = 2;
      private long minValue_ = 0L;
      /**
       * <code>optional int64 min_value = 2;</code>
       * @return Whether the minValue field is set.
       */
      @java.lang.Override
      public boolean hasMinValue() {
        return ((bitField0_ & 0x00000002) != 0);
      }
      /**
       * <code>optional int64 min_value = 2;</code>
       * @return The minValue.
       */
      @java.lang.Override
      public long getMinValue() {
        return minValue_;
      }

      public static final int MAX_VALUE_FIELD_NUMBER = 3;
      private long maxValue_ = 0L;
      /**
       * <code>optional int64 max_value = 3;</code>
       * @return Whether the maxValue field is set.
       */
      @java.lang.Override
      public boolean hasMaxValue() {
        return ((bitField0_ & 0x00000004) != 0);
      }
      /**
       * <code>optional int64 max_value = 3;</code>
       * @return The maxValue.
       */
      @java.lang.Override
      public long getMaxValue() {
        return maxValue_;
      }

      private byte memoizedIsInitialized = -1;
      @java.lang.Override
      public final boolean isInitialized() {
        byte isInitialized = memoizedIsInitialized;
        if (isInitialized == 1) return true;
        if (isInitialized == 0) return false;

        memoizedIsInitialized = 1;
        return true;
      }

      @java.lang.Override
      public void writeTo(com.google.protobuf.CodedOutputStream output)
                          throws java.io.IOException {
        if (((bitField0_ & 0x00000001) != 0)) {
          com.google.protobuf.GeneratedMessage.writeString(output, 1, histogramName_);
        }
        if (((bitField0_ & 0x00000002) != 0)) {
          output.writeInt64(2, minValue_);
        }
        if (((bitField0_ & 0x00000004) != 0)) {
          output.writeInt64(3, maxValue_);
        }
        getUnknownFields().writeTo(output);
      }

      @java.lang.Override
      public int getSerializedSize() {
        int size = memoizedSize;
        if (size != -1) return size;

        size = 0;
        if (((bitField0_ & 0x00000001) != 0)) {
          size += com.google.protobuf.GeneratedMessage.computeStringSize(1, histogramName_);
        }
        if (((bitField0_ & 0x00000002) != 0)) {
          size += com.google.protobuf.CodedOutputStream
            .computeInt64Size(2, minValue_);
        }
        if (((bitField0_ & 0x00000004) != 0)) {
          size += com.google.protobuf.CodedOutputStream
            .computeInt64Size(3, maxValue_);
        }
        size += getUnknownFields().getSerializedSize();
        memoizedSize = size;
        return size;
      }

      @java.lang.Override
      public boolean equals(final java.lang.Object obj) {
        if (obj == this) {
         return true;
        }
        if (!(obj instanceof perfetto.protos.ScenarioConfigOuterClass.TriggerRule.HistogramTrigger)) {
          return super.equals(obj);
        }
        perfetto.protos.ScenarioConfigOuterClass.TriggerRule.HistogramTrigger other = (perfetto.protos.ScenarioConfigOuterClass.TriggerRule.HistogramTrigger) obj;

        if (hasHistogramName() != other.hasHistogramName()) return false;
        if (hasHistogramName()) {
          if (!getHistogramName()
              .equals(other.getHistogramName())) return false;
        }
        if (hasMinValue() != other.hasMinValue()) return false;
        if (hasMinValue()) {
          if (getMinValue()
              != other.getMinValue()) return false;
        }
        if (hasMaxValue() != other.hasMaxValue()) return false;
        if (hasMaxValue()) {
          if (getMaxValue()
              != other.getMaxValue()) return false;
        }
        if (!getUnknownFields().equals(other.getUnknownFields())) return false;
        return true;
      }

      @java.lang.Override
      public int hashCode() {
        if (memoizedHashCode != 0) {
          return memoizedHashCode;
        }
        int hash = 41;
        hash = (19 * hash) + getDescriptor().hashCode();
        if (hasHistogramName()) {
          hash = (37 * hash) + HISTOGRAM_NAME_FIELD_NUMBER;
          hash = (53 * hash) + getHistogramName().hashCode();
        }
        if (hasMinValue()) {
          hash = (37 * hash) + MIN_VALUE_FIELD_NUMBER;
          hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
              getMinValue());
        }
        if (hasMaxValue()) {
          hash = (37 * hash) + MAX_VALUE_FIELD_NUMBER;
          hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
              getMaxValue());
        }
        hash = (29 * hash) + getUnknownFields().hashCode();
        memoizedHashCode = hash;
        return hash;
      }

      public static perfetto.protos.ScenarioConfigOuterClass.TriggerRule.HistogramTrigger parseFrom(
          java.nio.ByteBuffer data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static perfetto.protos.ScenarioConfigOuterClass.TriggerRule.HistogramTrigger parseFrom(
          java.nio.ByteBuffer data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static perfetto.protos.ScenarioConfigOuterClass.TriggerRule.HistogramTrigger parseFrom(
          com.google.protobuf.ByteString data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static perfetto.protos.ScenarioConfigOuterClass.TriggerRule.HistogramTrigger parseFrom(
          com.google.protobuf.ByteString data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static perfetto.protos.ScenarioConfigOuterClass.TriggerRule.HistogramTrigger parseFrom(byte[] data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static perfetto.protos.ScenarioConfigOuterClass.TriggerRule.HistogramTrigger parseFrom(
          byte[] data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static perfetto.protos.ScenarioConfigOuterClass.TriggerRule.HistogramTrigger parseFrom(java.io.InputStream input)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessage
            .parseWithIOException(PARSER, input);
      }
      public static perfetto.protos.ScenarioConfigOuterClass.TriggerRule.HistogramTrigger parseFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessage
            .parseWithIOException(PARSER, input, extensionRegistry);
      }

      public static perfetto.protos.ScenarioConfigOuterClass.TriggerRule.HistogramTrigger parseDelimitedFrom(java.io.InputStream input)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessage
            .parseDelimitedWithIOException(PARSER, input);
      }

      public static perfetto.protos.ScenarioConfigOuterClass.TriggerRule.HistogramTrigger parseDelimitedFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessage
            .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
      }
      public static perfetto.protos.ScenarioConfigOuterClass.TriggerRule.HistogramTrigger parseFrom(
          com.google.protobuf.CodedInputStream input)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessage
            .parseWithIOException(PARSER, input);
      }
      public static perfetto.protos.ScenarioConfigOuterClass.TriggerRule.HistogramTrigger parseFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessage
            .parseWithIOException(PARSER, input, extensionRegistry);
      }

      @java.lang.Override
      public Builder newBuilderForType() { return newBuilder(); }
      public static Builder newBuilder() {
        return DEFAULT_INSTANCE.toBuilder();
      }
      public static Builder newBuilder(perfetto.protos.ScenarioConfigOuterClass.TriggerRule.HistogramTrigger prototype) {
        return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
      }
      @java.lang.Override
      public Builder toBuilder() {
        return this == DEFAULT_INSTANCE
            ? new Builder() : new Builder().mergeFrom(this);
      }

      @java.lang.Override
      protected Builder newBuilderForType(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        Builder builder = new Builder(parent);
        return builder;
      }
      /**
       * <pre>
       * Triggers when a value within the specified bounds [min_value,
       * max_value] is emitted into a Chrome histogram.
       * </pre>
       *
       * Protobuf type {@code perfetto.protos.TriggerRule.HistogramTrigger}
       */
      public static final class Builder extends
          com.google.protobuf.GeneratedMessage.Builder<Builder> implements
          // @@protoc_insertion_point(builder_implements:perfetto.protos.TriggerRule.HistogramTrigger)
          perfetto.protos.ScenarioConfigOuterClass.TriggerRule.HistogramTriggerOrBuilder {
        public static final com.google.protobuf.Descriptors.Descriptor
            getDescriptor() {
          return perfetto.protos.ScenarioConfigOuterClass.internal_static_perfetto_protos_TriggerRule_HistogramTrigger_descriptor;
        }

        @java.lang.Override
        protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
            internalGetFieldAccessorTable() {
          return perfetto.protos.ScenarioConfigOuterClass.internal_static_perfetto_protos_TriggerRule_HistogramTrigger_fieldAccessorTable
              .ensureFieldAccessorsInitialized(
                  perfetto.protos.ScenarioConfigOuterClass.TriggerRule.HistogramTrigger.class, perfetto.protos.ScenarioConfigOuterClass.TriggerRule.HistogramTrigger.Builder.class);
        }

        // Construct using perfetto.protos.ScenarioConfigOuterClass.TriggerRule.HistogramTrigger.newBuilder()
        private Builder() {

        }

        private Builder(
            com.google.protobuf.GeneratedMessage.BuilderParent parent) {
          super(parent);

        }
        @java.lang.Override
        public Builder clear() {
          super.clear();
          bitField0_ = 0;
          histogramName_ = "";
          minValue_ = 0L;
          maxValue_ = 0L;
          return this;
        }

        @java.lang.Override
        public com.google.protobuf.Descriptors.Descriptor
            getDescriptorForType() {
          return perfetto.protos.ScenarioConfigOuterClass.internal_static_perfetto_protos_TriggerRule_HistogramTrigger_descriptor;
        }

        @java.lang.Override
        public perfetto.protos.ScenarioConfigOuterClass.TriggerRule.HistogramTrigger getDefaultInstanceForType() {
          return perfetto.protos.ScenarioConfigOuterClass.TriggerRule.HistogramTrigger.getDefaultInstance();
        }

        @java.lang.Override
        public perfetto.protos.ScenarioConfigOuterClass.TriggerRule.HistogramTrigger build() {
          perfetto.protos.ScenarioConfigOuterClass.TriggerRule.HistogramTrigger result = buildPartial();
          if (!result.isInitialized()) {
            throw newUninitializedMessageException(result);
          }
          return result;
        }

        @java.lang.Override
        public perfetto.protos.ScenarioConfigOuterClass.TriggerRule.HistogramTrigger buildPartial() {
          perfetto.protos.ScenarioConfigOuterClass.TriggerRule.HistogramTrigger result = new perfetto.protos.ScenarioConfigOuterClass.TriggerRule.HistogramTrigger(this);
          if (bitField0_ != 0) { buildPartial0(result); }
          onBuilt();
          return result;
        }

        private void buildPartial0(perfetto.protos.ScenarioConfigOuterClass.TriggerRule.HistogramTrigger result) {
          int from_bitField0_ = bitField0_;
          int to_bitField0_ = 0;
          if (((from_bitField0_ & 0x00000001) != 0)) {
            result.histogramName_ = histogramName_;
            to_bitField0_ |= 0x00000001;
          }
          if (((from_bitField0_ & 0x00000002) != 0)) {
            result.minValue_ = minValue_;
            to_bitField0_ |= 0x00000002;
          }
          if (((from_bitField0_ & 0x00000004) != 0)) {
            result.maxValue_ = maxValue_;
            to_bitField0_ |= 0x00000004;
          }
          result.bitField0_ |= to_bitField0_;
        }

        @java.lang.Override
        public Builder mergeFrom(com.google.protobuf.Message other) {
          if (other instanceof perfetto.protos.ScenarioConfigOuterClass.TriggerRule.HistogramTrigger) {
            return mergeFrom((perfetto.protos.ScenarioConfigOuterClass.TriggerRule.HistogramTrigger)other);
          } else {
            super.mergeFrom(other);
            return this;
          }
        }

        public Builder mergeFrom(perfetto.protos.ScenarioConfigOuterClass.TriggerRule.HistogramTrigger other) {
          if (other == perfetto.protos.ScenarioConfigOuterClass.TriggerRule.HistogramTrigger.getDefaultInstance()) return this;
          if (other.hasHistogramName()) {
            histogramName_ = other.histogramName_;
            bitField0_ |= 0x00000001;
            onChanged();
          }
          if (other.hasMinValue()) {
            setMinValue(other.getMinValue());
          }
          if (other.hasMaxValue()) {
            setMaxValue(other.getMaxValue());
          }
          this.mergeUnknownFields(other.getUnknownFields());
          onChanged();
          return this;
        }

        @java.lang.Override
        public final boolean isInitialized() {
          return true;
        }

        @java.lang.Override
        public Builder mergeFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws java.io.IOException {
          if (extensionRegistry == null) {
            throw new java.lang.NullPointerException();
          }
          try {
            boolean done = false;
            while (!done) {
              int tag = input.readTag();
              switch (tag) {
                case 0:
                  done = true;
                  break;
                case 10: {
                  histogramName_ = input.readBytes();
                  bitField0_ |= 0x00000001;
                  break;
                } // case 10
                case 16: {
                  minValue_ = input.readInt64();
                  bitField0_ |= 0x00000002;
                  break;
                } // case 16
                case 24: {
                  maxValue_ = input.readInt64();
                  bitField0_ |= 0x00000004;
                  break;
                } // case 24
                default: {
                  if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                    done = true; // was an endgroup tag
                  }
                  break;
                } // default:
              } // switch (tag)
            } // while (!done)
          } catch (com.google.protobuf.InvalidProtocolBufferException e) {
            throw e.unwrapIOException();
          } finally {
            onChanged();
          } // finally
          return this;
        }
        private int bitField0_;

        private java.lang.Object histogramName_ = "";
        /**
         * <code>optional string histogram_name = 1;</code>
         * @return Whether the histogramName field is set.
         */
        public boolean hasHistogramName() {
          return ((bitField0_ & 0x00000001) != 0);
        }
        /**
         * <code>optional string histogram_name = 1;</code>
         * @return The histogramName.
         */
        public java.lang.String getHistogramName() {
          java.lang.Object ref = histogramName_;
          if (!(ref instanceof java.lang.String)) {
            com.google.protobuf.ByteString bs =
                (com.google.protobuf.ByteString) ref;
            java.lang.String s = bs.toStringUtf8();
            if (bs.isValidUtf8()) {
              histogramName_ = s;
            }
            return s;
          } else {
            return (java.lang.String) ref;
          }
        }
        /**
         * <code>optional string histogram_name = 1;</code>
         * @return The bytes for histogramName.
         */
        public com.google.protobuf.ByteString
            getHistogramNameBytes() {
          java.lang.Object ref = histogramName_;
          if (ref instanceof String) {
            com.google.protobuf.ByteString b = 
                com.google.protobuf.ByteString.copyFromUtf8(
                    (java.lang.String) ref);
            histogramName_ = b;
            return b;
          } else {
            return (com.google.protobuf.ByteString) ref;
          }
        }
        /**
         * <code>optional string histogram_name = 1;</code>
         * @param value The histogramName to set.
         * @return This builder for chaining.
         */
        public Builder setHistogramName(
            java.lang.String value) {
          if (value == null) { throw new NullPointerException(); }
          histogramName_ = value;
          bitField0_ |= 0x00000001;
          onChanged();
          return this;
        }
        /**
         * <code>optional string histogram_name = 1;</code>
         * @return This builder for chaining.
         */
        public Builder clearHistogramName() {
          histogramName_ = getDefaultInstance().getHistogramName();
          bitField0_ = (bitField0_ & ~0x00000001);
          onChanged();
          return this;
        }
        /**
         * <code>optional string histogram_name = 1;</code>
         * @param value The bytes for histogramName to set.
         * @return This builder for chaining.
         */
        public Builder setHistogramNameBytes(
            com.google.protobuf.ByteString value) {
          if (value == null) { throw new NullPointerException(); }
          histogramName_ = value;
          bitField0_ |= 0x00000001;
          onChanged();
          return this;
        }

        private long minValue_ ;
        /**
         * <code>optional int64 min_value = 2;</code>
         * @return Whether the minValue field is set.
         */
        @java.lang.Override
        public boolean hasMinValue() {
          return ((bitField0_ & 0x00000002) != 0);
        }
        /**
         * <code>optional int64 min_value = 2;</code>
         * @return The minValue.
         */
        @java.lang.Override
        public long getMinValue() {
          return minValue_;
        }
        /**
         * <code>optional int64 min_value = 2;</code>
         * @param value The minValue to set.
         * @return This builder for chaining.
         */
        public Builder setMinValue(long value) {

          minValue_ = value;
          bitField0_ |= 0x00000002;
          onChanged();
          return this;
        }
        /**
         * <code>optional int64 min_value = 2;</code>
         * @return This builder for chaining.
         */
        public Builder clearMinValue() {
          bitField0_ = (bitField0_ & ~0x00000002);
          minValue_ = 0L;
          onChanged();
          return this;
        }

        private long maxValue_ ;
        /**
         * <code>optional int64 max_value = 3;</code>
         * @return Whether the maxValue field is set.
         */
        @java.lang.Override
        public boolean hasMaxValue() {
          return ((bitField0_ & 0x00000004) != 0);
        }
        /**
         * <code>optional int64 max_value = 3;</code>
         * @return The maxValue.
         */
        @java.lang.Override
        public long getMaxValue() {
          return maxValue_;
        }
        /**
         * <code>optional int64 max_value = 3;</code>
         * @param value The maxValue to set.
         * @return This builder for chaining.
         */
        public Builder setMaxValue(long value) {

          maxValue_ = value;
          bitField0_ |= 0x00000004;
          onChanged();
          return this;
        }
        /**
         * <code>optional int64 max_value = 3;</code>
         * @return This builder for chaining.
         */
        public Builder clearMaxValue() {
          bitField0_ = (bitField0_ & ~0x00000004);
          maxValue_ = 0L;
          onChanged();
          return this;
        }

        // @@protoc_insertion_point(builder_scope:perfetto.protos.TriggerRule.HistogramTrigger)
      }

      // @@protoc_insertion_point(class_scope:perfetto.protos.TriggerRule.HistogramTrigger)
      private static final perfetto.protos.ScenarioConfigOuterClass.TriggerRule.HistogramTrigger DEFAULT_INSTANCE;
      static {
        DEFAULT_INSTANCE = new perfetto.protos.ScenarioConfigOuterClass.TriggerRule.HistogramTrigger();
      }

      public static perfetto.protos.ScenarioConfigOuterClass.TriggerRule.HistogramTrigger getDefaultInstance() {
        return DEFAULT_INSTANCE;
      }

      private static final com.google.protobuf.Parser<HistogramTrigger>
          PARSER = new com.google.protobuf.AbstractParser<HistogramTrigger>() {
        @java.lang.Override
        public HistogramTrigger parsePartialFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws com.google.protobuf.InvalidProtocolBufferException {
          Builder builder = newBuilder();
          try {
            builder.mergeFrom(input, extensionRegistry);
          } catch (com.google.protobuf.InvalidProtocolBufferException e) {
            throw e.setUnfinishedMessage(builder.buildPartial());
          } catch (com.google.protobuf.UninitializedMessageException e) {
            throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
          } catch (java.io.IOException e) {
            throw new com.google.protobuf.InvalidProtocolBufferException(e)
                .setUnfinishedMessage(builder.buildPartial());
          }
          return builder.buildPartial();
        }
      };

      public static com.google.protobuf.Parser<HistogramTrigger> parser() {
        return PARSER;
      }

      @java.lang.Override
      public com.google.protobuf.Parser<HistogramTrigger> getParserForType() {
        return PARSER;
      }

      @java.lang.Override
      public perfetto.protos.ScenarioConfigOuterClass.TriggerRule.HistogramTrigger getDefaultInstanceForType() {
        return DEFAULT_INSTANCE;
      }

    }

    public interface RepeatingIntervalOrBuilder extends
        // @@protoc_insertion_point(interface_extends:perfetto.protos.TriggerRule.RepeatingInterval)
        com.google.protobuf.MessageOrBuilder {

      /**
       * <code>optional uint64 period_ms = 1;</code>
       * @return Whether the periodMs field is set.
       */
      boolean hasPeriodMs();
      /**
       * <code>optional uint64 period_ms = 1;</code>
       * @return The periodMs.
       */
      long getPeriodMs();

      /**
       * <code>optional bool randomized = 2;</code>
       * @return Whether the randomized field is set.
       */
      boolean hasRandomized();
      /**
       * <code>optional bool randomized = 2;</code>
       * @return The randomized.
       */
      boolean getRandomized();
    }
    /**
     * <pre>
     * Triggers on a repeating interval, every `period_ms` milliseconds if
     * `randomized` is false, and at random time within a `period_ms` window
     * otherwise, thus ticking with an average period of `period_ms` milliseconds.
     * </pre>
     *
     * Protobuf type {@code perfetto.protos.TriggerRule.RepeatingInterval}
     */
    public static final class RepeatingInterval extends
        com.google.protobuf.GeneratedMessage implements
        // @@protoc_insertion_point(message_implements:perfetto.protos.TriggerRule.RepeatingInterval)
        RepeatingIntervalOrBuilder {
    private static final long serialVersionUID = 0L;
      static {
        com.google.protobuf.RuntimeVersion.validateProtobufGencodeVersion(
          com.google.protobuf.RuntimeVersion.RuntimeDomain.PUBLIC,
          /* major= */ 4,
          /* minor= */ 29,
          /* patch= */ 3,
          /* suffix= */ "",
          RepeatingInterval.class.getName());
      }
      // Use RepeatingInterval.newBuilder() to construct.
      private RepeatingInterval(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
        super(builder);
      }
      private RepeatingInterval() {
      }

      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return perfetto.protos.ScenarioConfigOuterClass.internal_static_perfetto_protos_TriggerRule_RepeatingInterval_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return perfetto.protos.ScenarioConfigOuterClass.internal_static_perfetto_protos_TriggerRule_RepeatingInterval_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                perfetto.protos.ScenarioConfigOuterClass.TriggerRule.RepeatingInterval.class, perfetto.protos.ScenarioConfigOuterClass.TriggerRule.RepeatingInterval.Builder.class);
      }

      private int bitField0_;
      public static final int PERIOD_MS_FIELD_NUMBER = 1;
      private long periodMs_ = 0L;
      /**
       * <code>optional uint64 period_ms = 1;</code>
       * @return Whether the periodMs field is set.
       */
      @java.lang.Override
      public boolean hasPeriodMs() {
        return ((bitField0_ & 0x00000001) != 0);
      }
      /**
       * <code>optional uint64 period_ms = 1;</code>
       * @return The periodMs.
       */
      @java.lang.Override
      public long getPeriodMs() {
        return periodMs_;
      }

      public static final int RANDOMIZED_FIELD_NUMBER = 2;
      private boolean randomized_ = false;
      /**
       * <code>optional bool randomized = 2;</code>
       * @return Whether the randomized field is set.
       */
      @java.lang.Override
      public boolean hasRandomized() {
        return ((bitField0_ & 0x00000002) != 0);
      }
      /**
       * <code>optional bool randomized = 2;</code>
       * @return The randomized.
       */
      @java.lang.Override
      public boolean getRandomized() {
        return randomized_;
      }

      private byte memoizedIsInitialized = -1;
      @java.lang.Override
      public final boolean isInitialized() {
        byte isInitialized = memoizedIsInitialized;
        if (isInitialized == 1) return true;
        if (isInitialized == 0) return false;

        memoizedIsInitialized = 1;
        return true;
      }

      @java.lang.Override
      public void writeTo(com.google.protobuf.CodedOutputStream output)
                          throws java.io.IOException {
        if (((bitField0_ & 0x00000001) != 0)) {
          output.writeUInt64(1, periodMs_);
        }
        if (((bitField0_ & 0x00000002) != 0)) {
          output.writeBool(2, randomized_);
        }
        getUnknownFields().writeTo(output);
      }

      @java.lang.Override
      public int getSerializedSize() {
        int size = memoizedSize;
        if (size != -1) return size;

        size = 0;
        if (((bitField0_ & 0x00000001) != 0)) {
          size += com.google.protobuf.CodedOutputStream
            .computeUInt64Size(1, periodMs_);
        }
        if (((bitField0_ & 0x00000002) != 0)) {
          size += com.google.protobuf.CodedOutputStream
            .computeBoolSize(2, randomized_);
        }
        size += getUnknownFields().getSerializedSize();
        memoizedSize = size;
        return size;
      }

      @java.lang.Override
      public boolean equals(final java.lang.Object obj) {
        if (obj == this) {
         return true;
        }
        if (!(obj instanceof perfetto.protos.ScenarioConfigOuterClass.TriggerRule.RepeatingInterval)) {
          return super.equals(obj);
        }
        perfetto.protos.ScenarioConfigOuterClass.TriggerRule.RepeatingInterval other = (perfetto.protos.ScenarioConfigOuterClass.TriggerRule.RepeatingInterval) obj;

        if (hasPeriodMs() != other.hasPeriodMs()) return false;
        if (hasPeriodMs()) {
          if (getPeriodMs()
              != other.getPeriodMs()) return false;
        }
        if (hasRandomized() != other.hasRandomized()) return false;
        if (hasRandomized()) {
          if (getRandomized()
              != other.getRandomized()) return false;
        }
        if (!getUnknownFields().equals(other.getUnknownFields())) return false;
        return true;
      }

      @java.lang.Override
      public int hashCode() {
        if (memoizedHashCode != 0) {
          return memoizedHashCode;
        }
        int hash = 41;
        hash = (19 * hash) + getDescriptor().hashCode();
        if (hasPeriodMs()) {
          hash = (37 * hash) + PERIOD_MS_FIELD_NUMBER;
          hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
              getPeriodMs());
        }
        if (hasRandomized()) {
          hash = (37 * hash) + RANDOMIZED_FIELD_NUMBER;
          hash = (53 * hash) + com.google.protobuf.Internal.hashBoolean(
              getRandomized());
        }
        hash = (29 * hash) + getUnknownFields().hashCode();
        memoizedHashCode = hash;
        return hash;
      }

      public static perfetto.protos.ScenarioConfigOuterClass.TriggerRule.RepeatingInterval parseFrom(
          java.nio.ByteBuffer data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static perfetto.protos.ScenarioConfigOuterClass.TriggerRule.RepeatingInterval parseFrom(
          java.nio.ByteBuffer data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static perfetto.protos.ScenarioConfigOuterClass.TriggerRule.RepeatingInterval parseFrom(
          com.google.protobuf.ByteString data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static perfetto.protos.ScenarioConfigOuterClass.TriggerRule.RepeatingInterval parseFrom(
          com.google.protobuf.ByteString data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static perfetto.protos.ScenarioConfigOuterClass.TriggerRule.RepeatingInterval parseFrom(byte[] data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static perfetto.protos.ScenarioConfigOuterClass.TriggerRule.RepeatingInterval parseFrom(
          byte[] data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static perfetto.protos.ScenarioConfigOuterClass.TriggerRule.RepeatingInterval parseFrom(java.io.InputStream input)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessage
            .parseWithIOException(PARSER, input);
      }
      public static perfetto.protos.ScenarioConfigOuterClass.TriggerRule.RepeatingInterval parseFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessage
            .parseWithIOException(PARSER, input, extensionRegistry);
      }

      public static perfetto.protos.ScenarioConfigOuterClass.TriggerRule.RepeatingInterval parseDelimitedFrom(java.io.InputStream input)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessage
            .parseDelimitedWithIOException(PARSER, input);
      }

      public static perfetto.protos.ScenarioConfigOuterClass.TriggerRule.RepeatingInterval parseDelimitedFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessage
            .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
      }
      public static perfetto.protos.ScenarioConfigOuterClass.TriggerRule.RepeatingInterval parseFrom(
          com.google.protobuf.CodedInputStream input)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessage
            .parseWithIOException(PARSER, input);
      }
      public static perfetto.protos.ScenarioConfigOuterClass.TriggerRule.RepeatingInterval parseFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessage
            .parseWithIOException(PARSER, input, extensionRegistry);
      }

      @java.lang.Override
      public Builder newBuilderForType() { return newBuilder(); }
      public static Builder newBuilder() {
        return DEFAULT_INSTANCE.toBuilder();
      }
      public static Builder newBuilder(perfetto.protos.ScenarioConfigOuterClass.TriggerRule.RepeatingInterval prototype) {
        return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
      }
      @java.lang.Override
      public Builder toBuilder() {
        return this == DEFAULT_INSTANCE
            ? new Builder() : new Builder().mergeFrom(this);
      }

      @java.lang.Override
      protected Builder newBuilderForType(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        Builder builder = new Builder(parent);
        return builder;
      }
      /**
       * <pre>
       * Triggers on a repeating interval, every `period_ms` milliseconds if
       * `randomized` is false, and at random time within a `period_ms` window
       * otherwise, thus ticking with an average period of `period_ms` milliseconds.
       * </pre>
       *
       * Protobuf type {@code perfetto.protos.TriggerRule.RepeatingInterval}
       */
      public static final class Builder extends
          com.google.protobuf.GeneratedMessage.Builder<Builder> implements
          // @@protoc_insertion_point(builder_implements:perfetto.protos.TriggerRule.RepeatingInterval)
          perfetto.protos.ScenarioConfigOuterClass.TriggerRule.RepeatingIntervalOrBuilder {
        public static final com.google.protobuf.Descriptors.Descriptor
            getDescriptor() {
          return perfetto.protos.ScenarioConfigOuterClass.internal_static_perfetto_protos_TriggerRule_RepeatingInterval_descriptor;
        }

        @java.lang.Override
        protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
            internalGetFieldAccessorTable() {
          return perfetto.protos.ScenarioConfigOuterClass.internal_static_perfetto_protos_TriggerRule_RepeatingInterval_fieldAccessorTable
              .ensureFieldAccessorsInitialized(
                  perfetto.protos.ScenarioConfigOuterClass.TriggerRule.RepeatingInterval.class, perfetto.protos.ScenarioConfigOuterClass.TriggerRule.RepeatingInterval.Builder.class);
        }

        // Construct using perfetto.protos.ScenarioConfigOuterClass.TriggerRule.RepeatingInterval.newBuilder()
        private Builder() {

        }

        private Builder(
            com.google.protobuf.GeneratedMessage.BuilderParent parent) {
          super(parent);

        }
        @java.lang.Override
        public Builder clear() {
          super.clear();
          bitField0_ = 0;
          periodMs_ = 0L;
          randomized_ = false;
          return this;
        }

        @java.lang.Override
        public com.google.protobuf.Descriptors.Descriptor
            getDescriptorForType() {
          return perfetto.protos.ScenarioConfigOuterClass.internal_static_perfetto_protos_TriggerRule_RepeatingInterval_descriptor;
        }

        @java.lang.Override
        public perfetto.protos.ScenarioConfigOuterClass.TriggerRule.RepeatingInterval getDefaultInstanceForType() {
          return perfetto.protos.ScenarioConfigOuterClass.TriggerRule.RepeatingInterval.getDefaultInstance();
        }

        @java.lang.Override
        public perfetto.protos.ScenarioConfigOuterClass.TriggerRule.RepeatingInterval build() {
          perfetto.protos.ScenarioConfigOuterClass.TriggerRule.RepeatingInterval result = buildPartial();
          if (!result.isInitialized()) {
            throw newUninitializedMessageException(result);
          }
          return result;
        }

        @java.lang.Override
        public perfetto.protos.ScenarioConfigOuterClass.TriggerRule.RepeatingInterval buildPartial() {
          perfetto.protos.ScenarioConfigOuterClass.TriggerRule.RepeatingInterval result = new perfetto.protos.ScenarioConfigOuterClass.TriggerRule.RepeatingInterval(this);
          if (bitField0_ != 0) { buildPartial0(result); }
          onBuilt();
          return result;
        }

        private void buildPartial0(perfetto.protos.ScenarioConfigOuterClass.TriggerRule.RepeatingInterval result) {
          int from_bitField0_ = bitField0_;
          int to_bitField0_ = 0;
          if (((from_bitField0_ & 0x00000001) != 0)) {
            result.periodMs_ = periodMs_;
            to_bitField0_ |= 0x00000001;
          }
          if (((from_bitField0_ & 0x00000002) != 0)) {
            result.randomized_ = randomized_;
            to_bitField0_ |= 0x00000002;
          }
          result.bitField0_ |= to_bitField0_;
        }

        @java.lang.Override
        public Builder mergeFrom(com.google.protobuf.Message other) {
          if (other instanceof perfetto.protos.ScenarioConfigOuterClass.TriggerRule.RepeatingInterval) {
            return mergeFrom((perfetto.protos.ScenarioConfigOuterClass.TriggerRule.RepeatingInterval)other);
          } else {
            super.mergeFrom(other);
            return this;
          }
        }

        public Builder mergeFrom(perfetto.protos.ScenarioConfigOuterClass.TriggerRule.RepeatingInterval other) {
          if (other == perfetto.protos.ScenarioConfigOuterClass.TriggerRule.RepeatingInterval.getDefaultInstance()) return this;
          if (other.hasPeriodMs()) {
            setPeriodMs(other.getPeriodMs());
          }
          if (other.hasRandomized()) {
            setRandomized(other.getRandomized());
          }
          this.mergeUnknownFields(other.getUnknownFields());
          onChanged();
          return this;
        }

        @java.lang.Override
        public final boolean isInitialized() {
          return true;
        }

        @java.lang.Override
        public Builder mergeFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws java.io.IOException {
          if (extensionRegistry == null) {
            throw new java.lang.NullPointerException();
          }
          try {
            boolean done = false;
            while (!done) {
              int tag = input.readTag();
              switch (tag) {
                case 0:
                  done = true;
                  break;
                case 8: {
                  periodMs_ = input.readUInt64();
                  bitField0_ |= 0x00000001;
                  break;
                } // case 8
                case 16: {
                  randomized_ = input.readBool();
                  bitField0_ |= 0x00000002;
                  break;
                } // case 16
                default: {
                  if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                    done = true; // was an endgroup tag
                  }
                  break;
                } // default:
              } // switch (tag)
            } // while (!done)
          } catch (com.google.protobuf.InvalidProtocolBufferException e) {
            throw e.unwrapIOException();
          } finally {
            onChanged();
          } // finally
          return this;
        }
        private int bitField0_;

        private long periodMs_ ;
        /**
         * <code>optional uint64 period_ms = 1;</code>
         * @return Whether the periodMs field is set.
         */
        @java.lang.Override
        public boolean hasPeriodMs() {
          return ((bitField0_ & 0x00000001) != 0);
        }
        /**
         * <code>optional uint64 period_ms = 1;</code>
         * @return The periodMs.
         */
        @java.lang.Override
        public long getPeriodMs() {
          return periodMs_;
        }
        /**
         * <code>optional uint64 period_ms = 1;</code>
         * @param value The periodMs to set.
         * @return This builder for chaining.
         */
        public Builder setPeriodMs(long value) {

          periodMs_ = value;
          bitField0_ |= 0x00000001;
          onChanged();
          return this;
        }
        /**
         * <code>optional uint64 period_ms = 1;</code>
         * @return This builder for chaining.
         */
        public Builder clearPeriodMs() {
          bitField0_ = (bitField0_ & ~0x00000001);
          periodMs_ = 0L;
          onChanged();
          return this;
        }

        private boolean randomized_ ;
        /**
         * <code>optional bool randomized = 2;</code>
         * @return Whether the randomized field is set.
         */
        @java.lang.Override
        public boolean hasRandomized() {
          return ((bitField0_ & 0x00000002) != 0);
        }
        /**
         * <code>optional bool randomized = 2;</code>
         * @return The randomized.
         */
        @java.lang.Override
        public boolean getRandomized() {
          return randomized_;
        }
        /**
         * <code>optional bool randomized = 2;</code>
         * @param value The randomized to set.
         * @return This builder for chaining.
         */
        public Builder setRandomized(boolean value) {

          randomized_ = value;
          bitField0_ |= 0x00000002;
          onChanged();
          return this;
        }
        /**
         * <code>optional bool randomized = 2;</code>
         * @return This builder for chaining.
         */
        public Builder clearRandomized() {
          bitField0_ = (bitField0_ & ~0x00000002);
          randomized_ = false;
          onChanged();
          return this;
        }

        // @@protoc_insertion_point(builder_scope:perfetto.protos.TriggerRule.RepeatingInterval)
      }

      // @@protoc_insertion_point(class_scope:perfetto.protos.TriggerRule.RepeatingInterval)
      private static final perfetto.protos.ScenarioConfigOuterClass.TriggerRule.RepeatingInterval DEFAULT_INSTANCE;
      static {
        DEFAULT_INSTANCE = new perfetto.protos.ScenarioConfigOuterClass.TriggerRule.RepeatingInterval();
      }

      public static perfetto.protos.ScenarioConfigOuterClass.TriggerRule.RepeatingInterval getDefaultInstance() {
        return DEFAULT_INSTANCE;
      }

      private static final com.google.protobuf.Parser<RepeatingInterval>
          PARSER = new com.google.protobuf.AbstractParser<RepeatingInterval>() {
        @java.lang.Override
        public RepeatingInterval parsePartialFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws com.google.protobuf.InvalidProtocolBufferException {
          Builder builder = newBuilder();
          try {
            builder.mergeFrom(input, extensionRegistry);
          } catch (com.google.protobuf.InvalidProtocolBufferException e) {
            throw e.setUnfinishedMessage(builder.buildPartial());
          } catch (com.google.protobuf.UninitializedMessageException e) {
            throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
          } catch (java.io.IOException e) {
            throw new com.google.protobuf.InvalidProtocolBufferException(e)
                .setUnfinishedMessage(builder.buildPartial());
          }
          return builder.buildPartial();
        }
      };

      public static com.google.protobuf.Parser<RepeatingInterval> parser() {
        return PARSER;
      }

      @java.lang.Override
      public com.google.protobuf.Parser<RepeatingInterval> getParserForType() {
        return PARSER;
      }

      @java.lang.Override
      public perfetto.protos.ScenarioConfigOuterClass.TriggerRule.RepeatingInterval getDefaultInstanceForType() {
        return DEFAULT_INSTANCE;
      }

    }

    private int bitField0_;
    private int triggerCase_ = 0;
    @SuppressWarnings("serial")
    private java.lang.Object trigger_;
    public enum TriggerCase
        implements com.google.protobuf.Internal.EnumLite,
            com.google.protobuf.AbstractMessage.InternalOneOfEnum {
      MANUAL_TRIGGER_NAME(4),
      HISTOGRAM(5),
      REPEATING_INTERVAL(6),
      TRIGGER_NOT_SET(0);
      private final int value;
      private TriggerCase(int value) {
        this.value = value;
      }
      /**
       * @param value The number of the enum to look for.
       * @return The enum associated with the given number.
       * @deprecated Use {@link #forNumber(int)} instead.
       */
      @java.lang.Deprecated
      public static TriggerCase valueOf(int value) {
        return forNumber(value);
      }

      public static TriggerCase forNumber(int value) {
        switch (value) {
          case 4: return MANUAL_TRIGGER_NAME;
          case 5: return HISTOGRAM;
          case 6: return REPEATING_INTERVAL;
          case 0: return TRIGGER_NOT_SET;
          default: return null;
        }
      }
      public int getNumber() {
        return this.value;
      }
    };

    public TriggerCase
    getTriggerCase() {
      return TriggerCase.forNumber(
          triggerCase_);
    }

    public static final int NAME_FIELD_NUMBER = 1;
    @SuppressWarnings("serial")
    private volatile java.lang.Object name_ = "";
    /**
     * <pre>
     * Rule unique name.
     * </pre>
     *
     * <code>optional string name = 1;</code>
     * @return Whether the name field is set.
     */
    @java.lang.Override
    public boolean hasName() {
      return ((bitField0_ & 0x00000001) != 0);
    }
    /**
     * <pre>
     * Rule unique name.
     * </pre>
     *
     * <code>optional string name = 1;</code>
     * @return The name.
     */
    @java.lang.Override
    public java.lang.String getName() {
      java.lang.Object ref = name_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        if (bs.isValidUtf8()) {
          name_ = s;
        }
        return s;
      }
    }
    /**
     * <pre>
     * Rule unique name.
     * </pre>
     *
     * <code>optional string name = 1;</code>
     * @return The bytes for name.
     */
    @java.lang.Override
    public com.google.protobuf.ByteString
        getNameBytes() {
      java.lang.Object ref = name_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        name_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    public static final int TRIGGER_CHANCE_FIELD_NUMBER = 2;
    private float triggerChance_ = 0F;
    /**
     * <pre>
     * A value between 0 and 1 which encodes the probability this rule is
     * triggered.
     * </pre>
     *
     * <code>optional float trigger_chance = 2;</code>
     * @return Whether the triggerChance field is set.
     */
    @java.lang.Override
    public boolean hasTriggerChance() {
      return ((bitField0_ & 0x00000002) != 0);
    }
    /**
     * <pre>
     * A value between 0 and 1 which encodes the probability this rule is
     * triggered.
     * </pre>
     *
     * <code>optional float trigger_chance = 2;</code>
     * @return The triggerChance.
     */
    @java.lang.Override
    public float getTriggerChance() {
      return triggerChance_;
    }

    public static final int DELAY_MS_FIELD_NUMBER = 3;
    private long delayMs_ = 0L;
    /**
     * <pre>
     * Additional delay *after* the trigger below. This is mostly useful
     * to trace beyond a triggered event in upload rules. Other triggers
     * can still be serviced during this period.
     * </pre>
     *
     * <code>optional uint64 delay_ms = 3;</code>
     * @return Whether the delayMs field is set.
     */
    @java.lang.Override
    public boolean hasDelayMs() {
      return ((bitField0_ & 0x00000004) != 0);
    }
    /**
     * <pre>
     * Additional delay *after* the trigger below. This is mostly useful
     * to trace beyond a triggered event in upload rules. Other triggers
     * can still be serviced during this period.
     * </pre>
     *
     * <code>optional uint64 delay_ms = 3;</code>
     * @return The delayMs.
     */
    @java.lang.Override
    public long getDelayMs() {
      return delayMs_;
    }

    public static final int ACTIVATION_DELAY_MS_FIELD_NUMBER = 8;
    private long activationDelayMs_ = 0L;
    /**
     * <pre>
     * Delay *before* which the rule is activated. Trigger events during this
     * period are ignored by this rule. This is mostly useful to trace for a
     * minimum duration before watching trigger events.
     * </pre>
     *
     * <code>optional uint64 activation_delay_ms = 8;</code>
     * @return Whether the activationDelayMs field is set.
     */
    @java.lang.Override
    public boolean hasActivationDelayMs() {
      return ((bitField0_ & 0x00000008) != 0);
    }
    /**
     * <pre>
     * Delay *before* which the rule is activated. Trigger events during this
     * period are ignored by this rule. This is mostly useful to trace for a
     * minimum duration before watching trigger events.
     * </pre>
     *
     * <code>optional uint64 activation_delay_ms = 8;</code>
     * @return The activationDelayMs.
     */
    @java.lang.Override
    public long getActivationDelayMs() {
      return activationDelayMs_;
    }

    public static final int MANUAL_TRIGGER_NAME_FIELD_NUMBER = 4;
    /**
     * <pre>
     * Triggers when the associated named trigger is manually emitted in Chrome
     * client code.
     * </pre>
     *
     * <code>string manual_trigger_name = 4;</code>
     * @return Whether the manualTriggerName field is set.
     */
    public boolean hasManualTriggerName() {
      return triggerCase_ == 4;
    }
    /**
     * <pre>
     * Triggers when the associated named trigger is manually emitted in Chrome
     * client code.
     * </pre>
     *
     * <code>string manual_trigger_name = 4;</code>
     * @return The manualTriggerName.
     */
    public java.lang.String getManualTriggerName() {
      java.lang.Object ref = "";
      if (triggerCase_ == 4) {
        ref = trigger_;
      }
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        if (bs.isValidUtf8() && (triggerCase_ == 4)) {
          trigger_ = s;
        }
        return s;
      }
    }
    /**
     * <pre>
     * Triggers when the associated named trigger is manually emitted in Chrome
     * client code.
     * </pre>
     *
     * <code>string manual_trigger_name = 4;</code>
     * @return The bytes for manualTriggerName.
     */
    public com.google.protobuf.ByteString
        getManualTriggerNameBytes() {
      java.lang.Object ref = "";
      if (triggerCase_ == 4) {
        ref = trigger_;
      }
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        if (triggerCase_ == 4) {
          trigger_ = b;
        }
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    public static final int HISTOGRAM_FIELD_NUMBER = 5;
    /**
     * <code>.perfetto.protos.TriggerRule.HistogramTrigger histogram = 5;</code>
     * @return Whether the histogram field is set.
     */
    @java.lang.Override
    public boolean hasHistogram() {
      return triggerCase_ == 5;
    }
    /**
     * <code>.perfetto.protos.TriggerRule.HistogramTrigger histogram = 5;</code>
     * @return The histogram.
     */
    @java.lang.Override
    public perfetto.protos.ScenarioConfigOuterClass.TriggerRule.HistogramTrigger getHistogram() {
      if (triggerCase_ == 5) {
         return (perfetto.protos.ScenarioConfigOuterClass.TriggerRule.HistogramTrigger) trigger_;
      }
      return perfetto.protos.ScenarioConfigOuterClass.TriggerRule.HistogramTrigger.getDefaultInstance();
    }
    /**
     * <code>.perfetto.protos.TriggerRule.HistogramTrigger histogram = 5;</code>
     */
    @java.lang.Override
    public perfetto.protos.ScenarioConfigOuterClass.TriggerRule.HistogramTriggerOrBuilder getHistogramOrBuilder() {
      if (triggerCase_ == 5) {
         return (perfetto.protos.ScenarioConfigOuterClass.TriggerRule.HistogramTrigger) trigger_;
      }
      return perfetto.protos.ScenarioConfigOuterClass.TriggerRule.HistogramTrigger.getDefaultInstance();
    }

    public static final int REPEATING_INTERVAL_FIELD_NUMBER = 6;
    /**
     * <code>.perfetto.protos.TriggerRule.RepeatingInterval repeating_interval = 6;</code>
     * @return Whether the repeatingInterval field is set.
     */
    @java.lang.Override
    public boolean hasRepeatingInterval() {
      return triggerCase_ == 6;
    }
    /**
     * <code>.perfetto.protos.TriggerRule.RepeatingInterval repeating_interval = 6;</code>
     * @return The repeatingInterval.
     */
    @java.lang.Override
    public perfetto.protos.ScenarioConfigOuterClass.TriggerRule.RepeatingInterval getRepeatingInterval() {
      if (triggerCase_ == 6) {
         return (perfetto.protos.ScenarioConfigOuterClass.TriggerRule.RepeatingInterval) trigger_;
      }
      return perfetto.protos.ScenarioConfigOuterClass.TriggerRule.RepeatingInterval.getDefaultInstance();
    }
    /**
     * <code>.perfetto.protos.TriggerRule.RepeatingInterval repeating_interval = 6;</code>
     */
    @java.lang.Override
    public perfetto.protos.ScenarioConfigOuterClass.TriggerRule.RepeatingIntervalOrBuilder getRepeatingIntervalOrBuilder() {
      if (triggerCase_ == 6) {
         return (perfetto.protos.ScenarioConfigOuterClass.TriggerRule.RepeatingInterval) trigger_;
      }
      return perfetto.protos.ScenarioConfigOuterClass.TriggerRule.RepeatingInterval.getDefaultInstance();
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (((bitField0_ & 0x00000001) != 0)) {
        com.google.protobuf.GeneratedMessage.writeString(output, 1, name_);
      }
      if (((bitField0_ & 0x00000002) != 0)) {
        output.writeFloat(2, triggerChance_);
      }
      if (((bitField0_ & 0x00000004) != 0)) {
        output.writeUInt64(3, delayMs_);
      }
      if (triggerCase_ == 4) {
        com.google.protobuf.GeneratedMessage.writeString(output, 4, trigger_);
      }
      if (triggerCase_ == 5) {
        output.writeMessage(5, (perfetto.protos.ScenarioConfigOuterClass.TriggerRule.HistogramTrigger) trigger_);
      }
      if (triggerCase_ == 6) {
        output.writeMessage(6, (perfetto.protos.ScenarioConfigOuterClass.TriggerRule.RepeatingInterval) trigger_);
      }
      if (((bitField0_ & 0x00000008) != 0)) {
        output.writeUInt64(8, activationDelayMs_);
      }
      getUnknownFields().writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) != 0)) {
        size += com.google.protobuf.GeneratedMessage.computeStringSize(1, name_);
      }
      if (((bitField0_ & 0x00000002) != 0)) {
        size += com.google.protobuf.CodedOutputStream
          .computeFloatSize(2, triggerChance_);
      }
      if (((bitField0_ & 0x00000004) != 0)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt64Size(3, delayMs_);
      }
      if (triggerCase_ == 4) {
        size += com.google.protobuf.GeneratedMessage.computeStringSize(4, trigger_);
      }
      if (triggerCase_ == 5) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(5, (perfetto.protos.ScenarioConfigOuterClass.TriggerRule.HistogramTrigger) trigger_);
      }
      if (triggerCase_ == 6) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(6, (perfetto.protos.ScenarioConfigOuterClass.TriggerRule.RepeatingInterval) trigger_);
      }
      if (((bitField0_ & 0x00000008) != 0)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt64Size(8, activationDelayMs_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof perfetto.protos.ScenarioConfigOuterClass.TriggerRule)) {
        return super.equals(obj);
      }
      perfetto.protos.ScenarioConfigOuterClass.TriggerRule other = (perfetto.protos.ScenarioConfigOuterClass.TriggerRule) obj;

      if (hasName() != other.hasName()) return false;
      if (hasName()) {
        if (!getName()
            .equals(other.getName())) return false;
      }
      if (hasTriggerChance() != other.hasTriggerChance()) return false;
      if (hasTriggerChance()) {
        if (java.lang.Float.floatToIntBits(getTriggerChance())
            != java.lang.Float.floatToIntBits(
                other.getTriggerChance())) return false;
      }
      if (hasDelayMs() != other.hasDelayMs()) return false;
      if (hasDelayMs()) {
        if (getDelayMs()
            != other.getDelayMs()) return false;
      }
      if (hasActivationDelayMs() != other.hasActivationDelayMs()) return false;
      if (hasActivationDelayMs()) {
        if (getActivationDelayMs()
            != other.getActivationDelayMs()) return false;
      }
      if (!getTriggerCase().equals(other.getTriggerCase())) return false;
      switch (triggerCase_) {
        case 4:
          if (!getManualTriggerName()
              .equals(other.getManualTriggerName())) return false;
          break;
        case 5:
          if (!getHistogram()
              .equals(other.getHistogram())) return false;
          break;
        case 6:
          if (!getRepeatingInterval()
              .equals(other.getRepeatingInterval())) return false;
          break;
        case 0:
        default:
      }
      if (!getUnknownFields().equals(other.getUnknownFields())) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      if (hasName()) {
        hash = (37 * hash) + NAME_FIELD_NUMBER;
        hash = (53 * hash) + getName().hashCode();
      }
      if (hasTriggerChance()) {
        hash = (37 * hash) + TRIGGER_CHANCE_FIELD_NUMBER;
        hash = (53 * hash) + java.lang.Float.floatToIntBits(
            getTriggerChance());
      }
      if (hasDelayMs()) {
        hash = (37 * hash) + DELAY_MS_FIELD_NUMBER;
        hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
            getDelayMs());
      }
      if (hasActivationDelayMs()) {
        hash = (37 * hash) + ACTIVATION_DELAY_MS_FIELD_NUMBER;
        hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
            getActivationDelayMs());
      }
      switch (triggerCase_) {
        case 4:
          hash = (37 * hash) + MANUAL_TRIGGER_NAME_FIELD_NUMBER;
          hash = (53 * hash) + getManualTriggerName().hashCode();
          break;
        case 5:
          hash = (37 * hash) + HISTOGRAM_FIELD_NUMBER;
          hash = (53 * hash) + getHistogram().hashCode();
          break;
        case 6:
          hash = (37 * hash) + REPEATING_INTERVAL_FIELD_NUMBER;
          hash = (53 * hash) + getRepeatingInterval().hashCode();
          break;
        case 0:
        default:
      }
      hash = (29 * hash) + getUnknownFields().hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static perfetto.protos.ScenarioConfigOuterClass.TriggerRule parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static perfetto.protos.ScenarioConfigOuterClass.TriggerRule parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static perfetto.protos.ScenarioConfigOuterClass.TriggerRule parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static perfetto.protos.ScenarioConfigOuterClass.TriggerRule parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static perfetto.protos.ScenarioConfigOuterClass.TriggerRule parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static perfetto.protos.ScenarioConfigOuterClass.TriggerRule parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static perfetto.protos.ScenarioConfigOuterClass.TriggerRule parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input);
    }
    public static perfetto.protos.ScenarioConfigOuterClass.TriggerRule parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    public static perfetto.protos.ScenarioConfigOuterClass.TriggerRule parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessage
          .parseDelimitedWithIOException(PARSER, input);
    }

    public static perfetto.protos.ScenarioConfigOuterClass.TriggerRule parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessage
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static perfetto.protos.ScenarioConfigOuterClass.TriggerRule parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input);
    }
    public static perfetto.protos.ScenarioConfigOuterClass.TriggerRule parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(perfetto.protos.ScenarioConfigOuterClass.TriggerRule prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * <pre>
     * Rule that triggers scenario events (e.g. start, stop).
     * </pre>
     *
     * Protobuf type {@code perfetto.protos.TriggerRule}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:perfetto.protos.TriggerRule)
        perfetto.protos.ScenarioConfigOuterClass.TriggerRuleOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return perfetto.protos.ScenarioConfigOuterClass.internal_static_perfetto_protos_TriggerRule_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return perfetto.protos.ScenarioConfigOuterClass.internal_static_perfetto_protos_TriggerRule_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                perfetto.protos.ScenarioConfigOuterClass.TriggerRule.class, perfetto.protos.ScenarioConfigOuterClass.TriggerRule.Builder.class);
      }

      // Construct using perfetto.protos.ScenarioConfigOuterClass.TriggerRule.newBuilder()
      private Builder() {

      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);

      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        bitField0_ = 0;
        name_ = "";
        triggerChance_ = 0F;
        delayMs_ = 0L;
        activationDelayMs_ = 0L;
        if (histogramBuilder_ != null) {
          histogramBuilder_.clear();
        }
        if (repeatingIntervalBuilder_ != null) {
          repeatingIntervalBuilder_.clear();
        }
        triggerCase_ = 0;
        trigger_ = null;
        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return perfetto.protos.ScenarioConfigOuterClass.internal_static_perfetto_protos_TriggerRule_descriptor;
      }

      @java.lang.Override
      public perfetto.protos.ScenarioConfigOuterClass.TriggerRule getDefaultInstanceForType() {
        return perfetto.protos.ScenarioConfigOuterClass.TriggerRule.getDefaultInstance();
      }

      @java.lang.Override
      public perfetto.protos.ScenarioConfigOuterClass.TriggerRule build() {
        perfetto.protos.ScenarioConfigOuterClass.TriggerRule result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public perfetto.protos.ScenarioConfigOuterClass.TriggerRule buildPartial() {
        perfetto.protos.ScenarioConfigOuterClass.TriggerRule result = new perfetto.protos.ScenarioConfigOuterClass.TriggerRule(this);
        if (bitField0_ != 0) { buildPartial0(result); }
        buildPartialOneofs(result);
        onBuilt();
        return result;
      }

      private void buildPartial0(perfetto.protos.ScenarioConfigOuterClass.TriggerRule result) {
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) != 0)) {
          result.name_ = name_;
          to_bitField0_ |= 0x00000001;
        }
        if (((from_bitField0_ & 0x00000002) != 0)) {
          result.triggerChance_ = triggerChance_;
          to_bitField0_ |= 0x00000002;
        }
        if (((from_bitField0_ & 0x00000004) != 0)) {
          result.delayMs_ = delayMs_;
          to_bitField0_ |= 0x00000004;
        }
        if (((from_bitField0_ & 0x00000008) != 0)) {
          result.activationDelayMs_ = activationDelayMs_;
          to_bitField0_ |= 0x00000008;
        }
        result.bitField0_ |= to_bitField0_;
      }

      private void buildPartialOneofs(perfetto.protos.ScenarioConfigOuterClass.TriggerRule result) {
        result.triggerCase_ = triggerCase_;
        result.trigger_ = this.trigger_;
        if (triggerCase_ == 5 &&
            histogramBuilder_ != null) {
          result.trigger_ = histogramBuilder_.build();
        }
        if (triggerCase_ == 6 &&
            repeatingIntervalBuilder_ != null) {
          result.trigger_ = repeatingIntervalBuilder_.build();
        }
      }

      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof perfetto.protos.ScenarioConfigOuterClass.TriggerRule) {
          return mergeFrom((perfetto.protos.ScenarioConfigOuterClass.TriggerRule)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(perfetto.protos.ScenarioConfigOuterClass.TriggerRule other) {
        if (other == perfetto.protos.ScenarioConfigOuterClass.TriggerRule.getDefaultInstance()) return this;
        if (other.hasName()) {
          name_ = other.name_;
          bitField0_ |= 0x00000001;
          onChanged();
        }
        if (other.hasTriggerChance()) {
          setTriggerChance(other.getTriggerChance());
        }
        if (other.hasDelayMs()) {
          setDelayMs(other.getDelayMs());
        }
        if (other.hasActivationDelayMs()) {
          setActivationDelayMs(other.getActivationDelayMs());
        }
        switch (other.getTriggerCase()) {
          case MANUAL_TRIGGER_NAME: {
            triggerCase_ = 4;
            trigger_ = other.trigger_;
            onChanged();
            break;
          }
          case HISTOGRAM: {
            mergeHistogram(other.getHistogram());
            break;
          }
          case REPEATING_INTERVAL: {
            mergeRepeatingInterval(other.getRepeatingInterval());
            break;
          }
          case TRIGGER_NOT_SET: {
            break;
          }
        }
        this.mergeUnknownFields(other.getUnknownFields());
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        if (extensionRegistry == null) {
          throw new java.lang.NullPointerException();
        }
        try {
          boolean done = false;
          while (!done) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                done = true;
                break;
              case 10: {
                name_ = input.readBytes();
                bitField0_ |= 0x00000001;
                break;
              } // case 10
              case 21: {
                triggerChance_ = input.readFloat();
                bitField0_ |= 0x00000002;
                break;
              } // case 21
              case 24: {
                delayMs_ = input.readUInt64();
                bitField0_ |= 0x00000004;
                break;
              } // case 24
              case 34: {
                com.google.protobuf.ByteString bs = input.readBytes();
                triggerCase_ = 4;
                trigger_ = bs;
                break;
              } // case 34
              case 42: {
                input.readMessage(
                    getHistogramFieldBuilder().getBuilder(),
                    extensionRegistry);
                triggerCase_ = 5;
                break;
              } // case 42
              case 50: {
                input.readMessage(
                    getRepeatingIntervalFieldBuilder().getBuilder(),
                    extensionRegistry);
                triggerCase_ = 6;
                break;
              } // case 50
              case 64: {
                activationDelayMs_ = input.readUInt64();
                bitField0_ |= 0x00000008;
                break;
              } // case 64
              default: {
                if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                  done = true; // was an endgroup tag
                }
                break;
              } // default:
            } // switch (tag)
          } // while (!done)
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.unwrapIOException();
        } finally {
          onChanged();
        } // finally
        return this;
      }
      private int triggerCase_ = 0;
      private java.lang.Object trigger_;
      public TriggerCase
          getTriggerCase() {
        return TriggerCase.forNumber(
            triggerCase_);
      }

      public Builder clearTrigger() {
        triggerCase_ = 0;
        trigger_ = null;
        onChanged();
        return this;
      }

      private int bitField0_;

      private java.lang.Object name_ = "";
      /**
       * <pre>
       * Rule unique name.
       * </pre>
       *
       * <code>optional string name = 1;</code>
       * @return Whether the name field is set.
       */
      public boolean hasName() {
        return ((bitField0_ & 0x00000001) != 0);
      }
      /**
       * <pre>
       * Rule unique name.
       * </pre>
       *
       * <code>optional string name = 1;</code>
       * @return The name.
       */
      public java.lang.String getName() {
        java.lang.Object ref = name_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          if (bs.isValidUtf8()) {
            name_ = s;
          }
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <pre>
       * Rule unique name.
       * </pre>
       *
       * <code>optional string name = 1;</code>
       * @return The bytes for name.
       */
      public com.google.protobuf.ByteString
          getNameBytes() {
        java.lang.Object ref = name_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          name_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <pre>
       * Rule unique name.
       * </pre>
       *
       * <code>optional string name = 1;</code>
       * @param value The name to set.
       * @return This builder for chaining.
       */
      public Builder setName(
          java.lang.String value) {
        if (value == null) { throw new NullPointerException(); }
        name_ = value;
        bitField0_ |= 0x00000001;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Rule unique name.
       * </pre>
       *
       * <code>optional string name = 1;</code>
       * @return This builder for chaining.
       */
      public Builder clearName() {
        name_ = getDefaultInstance().getName();
        bitField0_ = (bitField0_ & ~0x00000001);
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Rule unique name.
       * </pre>
       *
       * <code>optional string name = 1;</code>
       * @param value The bytes for name to set.
       * @return This builder for chaining.
       */
      public Builder setNameBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) { throw new NullPointerException(); }
        name_ = value;
        bitField0_ |= 0x00000001;
        onChanged();
        return this;
      }

      private float triggerChance_ ;
      /**
       * <pre>
       * A value between 0 and 1 which encodes the probability this rule is
       * triggered.
       * </pre>
       *
       * <code>optional float trigger_chance = 2;</code>
       * @return Whether the triggerChance field is set.
       */
      @java.lang.Override
      public boolean hasTriggerChance() {
        return ((bitField0_ & 0x00000002) != 0);
      }
      /**
       * <pre>
       * A value between 0 and 1 which encodes the probability this rule is
       * triggered.
       * </pre>
       *
       * <code>optional float trigger_chance = 2;</code>
       * @return The triggerChance.
       */
      @java.lang.Override
      public float getTriggerChance() {
        return triggerChance_;
      }
      /**
       * <pre>
       * A value between 0 and 1 which encodes the probability this rule is
       * triggered.
       * </pre>
       *
       * <code>optional float trigger_chance = 2;</code>
       * @param value The triggerChance to set.
       * @return This builder for chaining.
       */
      public Builder setTriggerChance(float value) {

        triggerChance_ = value;
        bitField0_ |= 0x00000002;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * A value between 0 and 1 which encodes the probability this rule is
       * triggered.
       * </pre>
       *
       * <code>optional float trigger_chance = 2;</code>
       * @return This builder for chaining.
       */
      public Builder clearTriggerChance() {
        bitField0_ = (bitField0_ & ~0x00000002);
        triggerChance_ = 0F;
        onChanged();
        return this;
      }

      private long delayMs_ ;
      /**
       * <pre>
       * Additional delay *after* the trigger below. This is mostly useful
       * to trace beyond a triggered event in upload rules. Other triggers
       * can still be serviced during this period.
       * </pre>
       *
       * <code>optional uint64 delay_ms = 3;</code>
       * @return Whether the delayMs field is set.
       */
      @java.lang.Override
      public boolean hasDelayMs() {
        return ((bitField0_ & 0x00000004) != 0);
      }
      /**
       * <pre>
       * Additional delay *after* the trigger below. This is mostly useful
       * to trace beyond a triggered event in upload rules. Other triggers
       * can still be serviced during this period.
       * </pre>
       *
       * <code>optional uint64 delay_ms = 3;</code>
       * @return The delayMs.
       */
      @java.lang.Override
      public long getDelayMs() {
        return delayMs_;
      }
      /**
       * <pre>
       * Additional delay *after* the trigger below. This is mostly useful
       * to trace beyond a triggered event in upload rules. Other triggers
       * can still be serviced during this period.
       * </pre>
       *
       * <code>optional uint64 delay_ms = 3;</code>
       * @param value The delayMs to set.
       * @return This builder for chaining.
       */
      public Builder setDelayMs(long value) {

        delayMs_ = value;
        bitField0_ |= 0x00000004;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Additional delay *after* the trigger below. This is mostly useful
       * to trace beyond a triggered event in upload rules. Other triggers
       * can still be serviced during this period.
       * </pre>
       *
       * <code>optional uint64 delay_ms = 3;</code>
       * @return This builder for chaining.
       */
      public Builder clearDelayMs() {
        bitField0_ = (bitField0_ & ~0x00000004);
        delayMs_ = 0L;
        onChanged();
        return this;
      }

      private long activationDelayMs_ ;
      /**
       * <pre>
       * Delay *before* which the rule is activated. Trigger events during this
       * period are ignored by this rule. This is mostly useful to trace for a
       * minimum duration before watching trigger events.
       * </pre>
       *
       * <code>optional uint64 activation_delay_ms = 8;</code>
       * @return Whether the activationDelayMs field is set.
       */
      @java.lang.Override
      public boolean hasActivationDelayMs() {
        return ((bitField0_ & 0x00000008) != 0);
      }
      /**
       * <pre>
       * Delay *before* which the rule is activated. Trigger events during this
       * period are ignored by this rule. This is mostly useful to trace for a
       * minimum duration before watching trigger events.
       * </pre>
       *
       * <code>optional uint64 activation_delay_ms = 8;</code>
       * @return The activationDelayMs.
       */
      @java.lang.Override
      public long getActivationDelayMs() {
        return activationDelayMs_;
      }
      /**
       * <pre>
       * Delay *before* which the rule is activated. Trigger events during this
       * period are ignored by this rule. This is mostly useful to trace for a
       * minimum duration before watching trigger events.
       * </pre>
       *
       * <code>optional uint64 activation_delay_ms = 8;</code>
       * @param value The activationDelayMs to set.
       * @return This builder for chaining.
       */
      public Builder setActivationDelayMs(long value) {

        activationDelayMs_ = value;
        bitField0_ |= 0x00000008;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Delay *before* which the rule is activated. Trigger events during this
       * period are ignored by this rule. This is mostly useful to trace for a
       * minimum duration before watching trigger events.
       * </pre>
       *
       * <code>optional uint64 activation_delay_ms = 8;</code>
       * @return This builder for chaining.
       */
      public Builder clearActivationDelayMs() {
        bitField0_ = (bitField0_ & ~0x00000008);
        activationDelayMs_ = 0L;
        onChanged();
        return this;
      }

      /**
       * <pre>
       * Triggers when the associated named trigger is manually emitted in Chrome
       * client code.
       * </pre>
       *
       * <code>string manual_trigger_name = 4;</code>
       * @return Whether the manualTriggerName field is set.
       */
      @java.lang.Override
      public boolean hasManualTriggerName() {
        return triggerCase_ == 4;
      }
      /**
       * <pre>
       * Triggers when the associated named trigger is manually emitted in Chrome
       * client code.
       * </pre>
       *
       * <code>string manual_trigger_name = 4;</code>
       * @return The manualTriggerName.
       */
      @java.lang.Override
      public java.lang.String getManualTriggerName() {
        java.lang.Object ref = "";
        if (triggerCase_ == 4) {
          ref = trigger_;
        }
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          if (triggerCase_ == 4) {
            if (bs.isValidUtf8()) {
              trigger_ = s;
            }
          }
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <pre>
       * Triggers when the associated named trigger is manually emitted in Chrome
       * client code.
       * </pre>
       *
       * <code>string manual_trigger_name = 4;</code>
       * @return The bytes for manualTriggerName.
       */
      @java.lang.Override
      public com.google.protobuf.ByteString
          getManualTriggerNameBytes() {
        java.lang.Object ref = "";
        if (triggerCase_ == 4) {
          ref = trigger_;
        }
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          if (triggerCase_ == 4) {
            trigger_ = b;
          }
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <pre>
       * Triggers when the associated named trigger is manually emitted in Chrome
       * client code.
       * </pre>
       *
       * <code>string manual_trigger_name = 4;</code>
       * @param value The manualTriggerName to set.
       * @return This builder for chaining.
       */
      public Builder setManualTriggerName(
          java.lang.String value) {
        if (value == null) { throw new NullPointerException(); }
        triggerCase_ = 4;
        trigger_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Triggers when the associated named trigger is manually emitted in Chrome
       * client code.
       * </pre>
       *
       * <code>string manual_trigger_name = 4;</code>
       * @return This builder for chaining.
       */
      public Builder clearManualTriggerName() {
        if (triggerCase_ == 4) {
          triggerCase_ = 0;
          trigger_ = null;
          onChanged();
        }
        return this;
      }
      /**
       * <pre>
       * Triggers when the associated named trigger is manually emitted in Chrome
       * client code.
       * </pre>
       *
       * <code>string manual_trigger_name = 4;</code>
       * @param value The bytes for manualTriggerName to set.
       * @return This builder for chaining.
       */
      public Builder setManualTriggerNameBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) { throw new NullPointerException(); }
        triggerCase_ = 4;
        trigger_ = value;
        onChanged();
        return this;
      }

      private com.google.protobuf.SingleFieldBuilder<
          perfetto.protos.ScenarioConfigOuterClass.TriggerRule.HistogramTrigger, perfetto.protos.ScenarioConfigOuterClass.TriggerRule.HistogramTrigger.Builder, perfetto.protos.ScenarioConfigOuterClass.TriggerRule.HistogramTriggerOrBuilder> histogramBuilder_;
      /**
       * <code>.perfetto.protos.TriggerRule.HistogramTrigger histogram = 5;</code>
       * @return Whether the histogram field is set.
       */
      @java.lang.Override
      public boolean hasHistogram() {
        return triggerCase_ == 5;
      }
      /**
       * <code>.perfetto.protos.TriggerRule.HistogramTrigger histogram = 5;</code>
       * @return The histogram.
       */
      @java.lang.Override
      public perfetto.protos.ScenarioConfigOuterClass.TriggerRule.HistogramTrigger getHistogram() {
        if (histogramBuilder_ == null) {
          if (triggerCase_ == 5) {
            return (perfetto.protos.ScenarioConfigOuterClass.TriggerRule.HistogramTrigger) trigger_;
          }
          return perfetto.protos.ScenarioConfigOuterClass.TriggerRule.HistogramTrigger.getDefaultInstance();
        } else {
          if (triggerCase_ == 5) {
            return histogramBuilder_.getMessage();
          }
          return perfetto.protos.ScenarioConfigOuterClass.TriggerRule.HistogramTrigger.getDefaultInstance();
        }
      }
      /**
       * <code>.perfetto.protos.TriggerRule.HistogramTrigger histogram = 5;</code>
       */
      public Builder setHistogram(perfetto.protos.ScenarioConfigOuterClass.TriggerRule.HistogramTrigger value) {
        if (histogramBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          trigger_ = value;
          onChanged();
        } else {
          histogramBuilder_.setMessage(value);
        }
        triggerCase_ = 5;
        return this;
      }
      /**
       * <code>.perfetto.protos.TriggerRule.HistogramTrigger histogram = 5;</code>
       */
      public Builder setHistogram(
          perfetto.protos.ScenarioConfigOuterClass.TriggerRule.HistogramTrigger.Builder builderForValue) {
        if (histogramBuilder_ == null) {
          trigger_ = builderForValue.build();
          onChanged();
        } else {
          histogramBuilder_.setMessage(builderForValue.build());
        }
        triggerCase_ = 5;
        return this;
      }
      /**
       * <code>.perfetto.protos.TriggerRule.HistogramTrigger histogram = 5;</code>
       */
      public Builder mergeHistogram(perfetto.protos.ScenarioConfigOuterClass.TriggerRule.HistogramTrigger value) {
        if (histogramBuilder_ == null) {
          if (triggerCase_ == 5 &&
              trigger_ != perfetto.protos.ScenarioConfigOuterClass.TriggerRule.HistogramTrigger.getDefaultInstance()) {
            trigger_ = perfetto.protos.ScenarioConfigOuterClass.TriggerRule.HistogramTrigger.newBuilder((perfetto.protos.ScenarioConfigOuterClass.TriggerRule.HistogramTrigger) trigger_)
                .mergeFrom(value).buildPartial();
          } else {
            trigger_ = value;
          }
          onChanged();
        } else {
          if (triggerCase_ == 5) {
            histogramBuilder_.mergeFrom(value);
          } else {
            histogramBuilder_.setMessage(value);
          }
        }
        triggerCase_ = 5;
        return this;
      }
      /**
       * <code>.perfetto.protos.TriggerRule.HistogramTrigger histogram = 5;</code>
       */
      public Builder clearHistogram() {
        if (histogramBuilder_ == null) {
          if (triggerCase_ == 5) {
            triggerCase_ = 0;
            trigger_ = null;
            onChanged();
          }
        } else {
          if (triggerCase_ == 5) {
            triggerCase_ = 0;
            trigger_ = null;
          }
          histogramBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>.perfetto.protos.TriggerRule.HistogramTrigger histogram = 5;</code>
       */
      public perfetto.protos.ScenarioConfigOuterClass.TriggerRule.HistogramTrigger.Builder getHistogramBuilder() {
        return getHistogramFieldBuilder().getBuilder();
      }
      /**
       * <code>.perfetto.protos.TriggerRule.HistogramTrigger histogram = 5;</code>
       */
      @java.lang.Override
      public perfetto.protos.ScenarioConfigOuterClass.TriggerRule.HistogramTriggerOrBuilder getHistogramOrBuilder() {
        if ((triggerCase_ == 5) && (histogramBuilder_ != null)) {
          return histogramBuilder_.getMessageOrBuilder();
        } else {
          if (triggerCase_ == 5) {
            return (perfetto.protos.ScenarioConfigOuterClass.TriggerRule.HistogramTrigger) trigger_;
          }
          return perfetto.protos.ScenarioConfigOuterClass.TriggerRule.HistogramTrigger.getDefaultInstance();
        }
      }
      /**
       * <code>.perfetto.protos.TriggerRule.HistogramTrigger histogram = 5;</code>
       */
      private com.google.protobuf.SingleFieldBuilder<
          perfetto.protos.ScenarioConfigOuterClass.TriggerRule.HistogramTrigger, perfetto.protos.ScenarioConfigOuterClass.TriggerRule.HistogramTrigger.Builder, perfetto.protos.ScenarioConfigOuterClass.TriggerRule.HistogramTriggerOrBuilder> 
          getHistogramFieldBuilder() {
        if (histogramBuilder_ == null) {
          if (!(triggerCase_ == 5)) {
            trigger_ = perfetto.protos.ScenarioConfigOuterClass.TriggerRule.HistogramTrigger.getDefaultInstance();
          }
          histogramBuilder_ = new com.google.protobuf.SingleFieldBuilder<
              perfetto.protos.ScenarioConfigOuterClass.TriggerRule.HistogramTrigger, perfetto.protos.ScenarioConfigOuterClass.TriggerRule.HistogramTrigger.Builder, perfetto.protos.ScenarioConfigOuterClass.TriggerRule.HistogramTriggerOrBuilder>(
                  (perfetto.protos.ScenarioConfigOuterClass.TriggerRule.HistogramTrigger) trigger_,
                  getParentForChildren(),
                  isClean());
          trigger_ = null;
        }
        triggerCase_ = 5;
        onChanged();
        return histogramBuilder_;
      }

      private com.google.protobuf.SingleFieldBuilder<
          perfetto.protos.ScenarioConfigOuterClass.TriggerRule.RepeatingInterval, perfetto.protos.ScenarioConfigOuterClass.TriggerRule.RepeatingInterval.Builder, perfetto.protos.ScenarioConfigOuterClass.TriggerRule.RepeatingIntervalOrBuilder> repeatingIntervalBuilder_;
      /**
       * <code>.perfetto.protos.TriggerRule.RepeatingInterval repeating_interval = 6;</code>
       * @return Whether the repeatingInterval field is set.
       */
      @java.lang.Override
      public boolean hasRepeatingInterval() {
        return triggerCase_ == 6;
      }
      /**
       * <code>.perfetto.protos.TriggerRule.RepeatingInterval repeating_interval = 6;</code>
       * @return The repeatingInterval.
       */
      @java.lang.Override
      public perfetto.protos.ScenarioConfigOuterClass.TriggerRule.RepeatingInterval getRepeatingInterval() {
        if (repeatingIntervalBuilder_ == null) {
          if (triggerCase_ == 6) {
            return (perfetto.protos.ScenarioConfigOuterClass.TriggerRule.RepeatingInterval) trigger_;
          }
          return perfetto.protos.ScenarioConfigOuterClass.TriggerRule.RepeatingInterval.getDefaultInstance();
        } else {
          if (triggerCase_ == 6) {
            return repeatingIntervalBuilder_.getMessage();
          }
          return perfetto.protos.ScenarioConfigOuterClass.TriggerRule.RepeatingInterval.getDefaultInstance();
        }
      }
      /**
       * <code>.perfetto.protos.TriggerRule.RepeatingInterval repeating_interval = 6;</code>
       */
      public Builder setRepeatingInterval(perfetto.protos.ScenarioConfigOuterClass.TriggerRule.RepeatingInterval value) {
        if (repeatingIntervalBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          trigger_ = value;
          onChanged();
        } else {
          repeatingIntervalBuilder_.setMessage(value);
        }
        triggerCase_ = 6;
        return this;
      }
      /**
       * <code>.perfetto.protos.TriggerRule.RepeatingInterval repeating_interval = 6;</code>
       */
      public Builder setRepeatingInterval(
          perfetto.protos.ScenarioConfigOuterClass.TriggerRule.RepeatingInterval.Builder builderForValue) {
        if (repeatingIntervalBuilder_ == null) {
          trigger_ = builderForValue.build();
          onChanged();
        } else {
          repeatingIntervalBuilder_.setMessage(builderForValue.build());
        }
        triggerCase_ = 6;
        return this;
      }
      /**
       * <code>.perfetto.protos.TriggerRule.RepeatingInterval repeating_interval = 6;</code>
       */
      public Builder mergeRepeatingInterval(perfetto.protos.ScenarioConfigOuterClass.TriggerRule.RepeatingInterval value) {
        if (repeatingIntervalBuilder_ == null) {
          if (triggerCase_ == 6 &&
              trigger_ != perfetto.protos.ScenarioConfigOuterClass.TriggerRule.RepeatingInterval.getDefaultInstance()) {
            trigger_ = perfetto.protos.ScenarioConfigOuterClass.TriggerRule.RepeatingInterval.newBuilder((perfetto.protos.ScenarioConfigOuterClass.TriggerRule.RepeatingInterval) trigger_)
                .mergeFrom(value).buildPartial();
          } else {
            trigger_ = value;
          }
          onChanged();
        } else {
          if (triggerCase_ == 6) {
            repeatingIntervalBuilder_.mergeFrom(value);
          } else {
            repeatingIntervalBuilder_.setMessage(value);
          }
        }
        triggerCase_ = 6;
        return this;
      }
      /**
       * <code>.perfetto.protos.TriggerRule.RepeatingInterval repeating_interval = 6;</code>
       */
      public Builder clearRepeatingInterval() {
        if (repeatingIntervalBuilder_ == null) {
          if (triggerCase_ == 6) {
            triggerCase_ = 0;
            trigger_ = null;
            onChanged();
          }
        } else {
          if (triggerCase_ == 6) {
            triggerCase_ = 0;
            trigger_ = null;
          }
          repeatingIntervalBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>.perfetto.protos.TriggerRule.RepeatingInterval repeating_interval = 6;</code>
       */
      public perfetto.protos.ScenarioConfigOuterClass.TriggerRule.RepeatingInterval.Builder getRepeatingIntervalBuilder() {
        return getRepeatingIntervalFieldBuilder().getBuilder();
      }
      /**
       * <code>.perfetto.protos.TriggerRule.RepeatingInterval repeating_interval = 6;</code>
       */
      @java.lang.Override
      public perfetto.protos.ScenarioConfigOuterClass.TriggerRule.RepeatingIntervalOrBuilder getRepeatingIntervalOrBuilder() {
        if ((triggerCase_ == 6) && (repeatingIntervalBuilder_ != null)) {
          return repeatingIntervalBuilder_.getMessageOrBuilder();
        } else {
          if (triggerCase_ == 6) {
            return (perfetto.protos.ScenarioConfigOuterClass.TriggerRule.RepeatingInterval) trigger_;
          }
          return perfetto.protos.ScenarioConfigOuterClass.TriggerRule.RepeatingInterval.getDefaultInstance();
        }
      }
      /**
       * <code>.perfetto.protos.TriggerRule.RepeatingInterval repeating_interval = 6;</code>
       */
      private com.google.protobuf.SingleFieldBuilder<
          perfetto.protos.ScenarioConfigOuterClass.TriggerRule.RepeatingInterval, perfetto.protos.ScenarioConfigOuterClass.TriggerRule.RepeatingInterval.Builder, perfetto.protos.ScenarioConfigOuterClass.TriggerRule.RepeatingIntervalOrBuilder> 
          getRepeatingIntervalFieldBuilder() {
        if (repeatingIntervalBuilder_ == null) {
          if (!(triggerCase_ == 6)) {
            trigger_ = perfetto.protos.ScenarioConfigOuterClass.TriggerRule.RepeatingInterval.getDefaultInstance();
          }
          repeatingIntervalBuilder_ = new com.google.protobuf.SingleFieldBuilder<
              perfetto.protos.ScenarioConfigOuterClass.TriggerRule.RepeatingInterval, perfetto.protos.ScenarioConfigOuterClass.TriggerRule.RepeatingInterval.Builder, perfetto.protos.ScenarioConfigOuterClass.TriggerRule.RepeatingIntervalOrBuilder>(
                  (perfetto.protos.ScenarioConfigOuterClass.TriggerRule.RepeatingInterval) trigger_,
                  getParentForChildren(),
                  isClean());
          trigger_ = null;
        }
        triggerCase_ = 6;
        onChanged();
        return repeatingIntervalBuilder_;
      }

      // @@protoc_insertion_point(builder_scope:perfetto.protos.TriggerRule)
    }

    // @@protoc_insertion_point(class_scope:perfetto.protos.TriggerRule)
    private static final perfetto.protos.ScenarioConfigOuterClass.TriggerRule DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new perfetto.protos.ScenarioConfigOuterClass.TriggerRule();
    }

    public static perfetto.protos.ScenarioConfigOuterClass.TriggerRule getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<TriggerRule>
        PARSER = new com.google.protobuf.AbstractParser<TriggerRule>() {
      @java.lang.Override
      public TriggerRule parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        Builder builder = newBuilder();
        try {
          builder.mergeFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.setUnfinishedMessage(builder.buildPartial());
        } catch (com.google.protobuf.UninitializedMessageException e) {
          throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
        } catch (java.io.IOException e) {
          throw new com.google.protobuf.InvalidProtocolBufferException(e)
              .setUnfinishedMessage(builder.buildPartial());
        }
        return builder.buildPartial();
      }
    };

    public static com.google.protobuf.Parser<TriggerRule> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<TriggerRule> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public perfetto.protos.ScenarioConfigOuterClass.TriggerRule getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface NestedScenarioConfigOrBuilder extends
      // @@protoc_insertion_point(interface_extends:perfetto.protos.NestedScenarioConfig)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <pre>
     * Nested scenario name, unique within the parent scenario.
     * </pre>
     *
     * <code>optional string scenario_name = 1;</code>
     * @return Whether the scenarioName field is set.
     */
    boolean hasScenarioName();
    /**
     * <pre>
     * Nested scenario name, unique within the parent scenario.
     * </pre>
     *
     * <code>optional string scenario_name = 1;</code>
     * @return The scenarioName.
     */
    java.lang.String getScenarioName();
    /**
     * <pre>
     * Nested scenario name, unique within the parent scenario.
     * </pre>
     *
     * <code>optional string scenario_name = 1;</code>
     * @return The bytes for scenarioName.
     */
    com.google.protobuf.ByteString
        getScenarioNameBytes();

    /**
     * <pre>
     * When triggered, this scenario becomes active. This activates `upload_rules`
     * and `stop_rules`.
     * </pre>
     *
     * <code>repeated .perfetto.protos.TriggerRule start_rules = 2;</code>
     */
    java.util.List<perfetto.protos.ScenarioConfigOuterClass.TriggerRule> 
        getStartRulesList();
    /**
     * <pre>
     * When triggered, this scenario becomes active. This activates `upload_rules`
     * and `stop_rules`.
     * </pre>
     *
     * <code>repeated .perfetto.protos.TriggerRule start_rules = 2;</code>
     */
    perfetto.protos.ScenarioConfigOuterClass.TriggerRule getStartRules(int index);
    /**
     * <pre>
     * When triggered, this scenario becomes active. This activates `upload_rules`
     * and `stop_rules`.
     * </pre>
     *
     * <code>repeated .perfetto.protos.TriggerRule start_rules = 2;</code>
     */
    int getStartRulesCount();
    /**
     * <pre>
     * When triggered, this scenario becomes active. This activates `upload_rules`
     * and `stop_rules`.
     * </pre>
     *
     * <code>repeated .perfetto.protos.TriggerRule start_rules = 2;</code>
     */
    java.util.List<? extends perfetto.protos.ScenarioConfigOuterClass.TriggerRuleOrBuilder> 
        getStartRulesOrBuilderList();
    /**
     * <pre>
     * When triggered, this scenario becomes active. This activates `upload_rules`
     * and `stop_rules`.
     * </pre>
     *
     * <code>repeated .perfetto.protos.TriggerRule start_rules = 2;</code>
     */
    perfetto.protos.ScenarioConfigOuterClass.TriggerRuleOrBuilder getStartRulesOrBuilder(
        int index);

    /**
     * <pre>
     * When triggered, exits the scenario. This reverts back to the parent
     * scenario. All nested scenarios within the parent scenario will be observed
     * again.
     * </pre>
     *
     * <code>repeated .perfetto.protos.TriggerRule stop_rules = 3;</code>
     */
    java.util.List<perfetto.protos.ScenarioConfigOuterClass.TriggerRule> 
        getStopRulesList();
    /**
     * <pre>
     * When triggered, exits the scenario. This reverts back to the parent
     * scenario. All nested scenarios within the parent scenario will be observed
     * again.
     * </pre>
     *
     * <code>repeated .perfetto.protos.TriggerRule stop_rules = 3;</code>
     */
    perfetto.protos.ScenarioConfigOuterClass.TriggerRule getStopRules(int index);
    /**
     * <pre>
     * When triggered, exits the scenario. This reverts back to the parent
     * scenario. All nested scenarios within the parent scenario will be observed
     * again.
     * </pre>
     *
     * <code>repeated .perfetto.protos.TriggerRule stop_rules = 3;</code>
     */
    int getStopRulesCount();
    /**
     * <pre>
     * When triggered, exits the scenario. This reverts back to the parent
     * scenario. All nested scenarios within the parent scenario will be observed
     * again.
     * </pre>
     *
     * <code>repeated .perfetto.protos.TriggerRule stop_rules = 3;</code>
     */
    java.util.List<? extends perfetto.protos.ScenarioConfigOuterClass.TriggerRuleOrBuilder> 
        getStopRulesOrBuilderList();
    /**
     * <pre>
     * When triggered, exits the scenario. This reverts back to the parent
     * scenario. All nested scenarios within the parent scenario will be observed
     * again.
     * </pre>
     *
     * <code>repeated .perfetto.protos.TriggerRule stop_rules = 3;</code>
     */
    perfetto.protos.ScenarioConfigOuterClass.TriggerRuleOrBuilder getStopRulesOrBuilder(
        int index);

    /**
     * <pre>
     * When triggered, exits both this scenario and the parent scenario, stops the
     * tracing session, and attempts to upload the trace. All scenarios are
     * observed again.
     * </pre>
     *
     * <code>repeated .perfetto.protos.TriggerRule upload_rules = 4;</code>
     */
    java.util.List<perfetto.protos.ScenarioConfigOuterClass.TriggerRule> 
        getUploadRulesList();
    /**
     * <pre>
     * When triggered, exits both this scenario and the parent scenario, stops the
     * tracing session, and attempts to upload the trace. All scenarios are
     * observed again.
     * </pre>
     *
     * <code>repeated .perfetto.protos.TriggerRule upload_rules = 4;</code>
     */
    perfetto.protos.ScenarioConfigOuterClass.TriggerRule getUploadRules(int index);
    /**
     * <pre>
     * When triggered, exits both this scenario and the parent scenario, stops the
     * tracing session, and attempts to upload the trace. All scenarios are
     * observed again.
     * </pre>
     *
     * <code>repeated .perfetto.protos.TriggerRule upload_rules = 4;</code>
     */
    int getUploadRulesCount();
    /**
     * <pre>
     * When triggered, exits both this scenario and the parent scenario, stops the
     * tracing session, and attempts to upload the trace. All scenarios are
     * observed again.
     * </pre>
     *
     * <code>repeated .perfetto.protos.TriggerRule upload_rules = 4;</code>
     */
    java.util.List<? extends perfetto.protos.ScenarioConfigOuterClass.TriggerRuleOrBuilder> 
        getUploadRulesOrBuilderList();
    /**
     * <pre>
     * When triggered, exits both this scenario and the parent scenario, stops the
     * tracing session, and attempts to upload the trace. All scenarios are
     * observed again.
     * </pre>
     *
     * <code>repeated .perfetto.protos.TriggerRule upload_rules = 4;</code>
     */
    perfetto.protos.ScenarioConfigOuterClass.TriggerRuleOrBuilder getUploadRulesOrBuilder(
        int index);
  }
  /**
   * Protobuf type {@code perfetto.protos.NestedScenarioConfig}
   */
  public static final class NestedScenarioConfig extends
      com.google.protobuf.GeneratedMessage implements
      // @@protoc_insertion_point(message_implements:perfetto.protos.NestedScenarioConfig)
      NestedScenarioConfigOrBuilder {
  private static final long serialVersionUID = 0L;
    static {
      com.google.protobuf.RuntimeVersion.validateProtobufGencodeVersion(
        com.google.protobuf.RuntimeVersion.RuntimeDomain.PUBLIC,
        /* major= */ 4,
        /* minor= */ 29,
        /* patch= */ 3,
        /* suffix= */ "",
        NestedScenarioConfig.class.getName());
    }
    // Use NestedScenarioConfig.newBuilder() to construct.
    private NestedScenarioConfig(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
    }
    private NestedScenarioConfig() {
      scenarioName_ = "";
      startRules_ = java.util.Collections.emptyList();
      stopRules_ = java.util.Collections.emptyList();
      uploadRules_ = java.util.Collections.emptyList();
    }

    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return perfetto.protos.ScenarioConfigOuterClass.internal_static_perfetto_protos_NestedScenarioConfig_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return perfetto.protos.ScenarioConfigOuterClass.internal_static_perfetto_protos_NestedScenarioConfig_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              perfetto.protos.ScenarioConfigOuterClass.NestedScenarioConfig.class, perfetto.protos.ScenarioConfigOuterClass.NestedScenarioConfig.Builder.class);
    }

    private int bitField0_;
    public static final int SCENARIO_NAME_FIELD_NUMBER = 1;
    @SuppressWarnings("serial")
    private volatile java.lang.Object scenarioName_ = "";
    /**
     * <pre>
     * Nested scenario name, unique within the parent scenario.
     * </pre>
     *
     * <code>optional string scenario_name = 1;</code>
     * @return Whether the scenarioName field is set.
     */
    @java.lang.Override
    public boolean hasScenarioName() {
      return ((bitField0_ & 0x00000001) != 0);
    }
    /**
     * <pre>
     * Nested scenario name, unique within the parent scenario.
     * </pre>
     *
     * <code>optional string scenario_name = 1;</code>
     * @return The scenarioName.
     */
    @java.lang.Override
    public java.lang.String getScenarioName() {
      java.lang.Object ref = scenarioName_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        if (bs.isValidUtf8()) {
          scenarioName_ = s;
        }
        return s;
      }
    }
    /**
     * <pre>
     * Nested scenario name, unique within the parent scenario.
     * </pre>
     *
     * <code>optional string scenario_name = 1;</code>
     * @return The bytes for scenarioName.
     */
    @java.lang.Override
    public com.google.protobuf.ByteString
        getScenarioNameBytes() {
      java.lang.Object ref = scenarioName_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        scenarioName_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    public static final int START_RULES_FIELD_NUMBER = 2;
    @SuppressWarnings("serial")
    private java.util.List<perfetto.protos.ScenarioConfigOuterClass.TriggerRule> startRules_;
    /**
     * <pre>
     * When triggered, this scenario becomes active. This activates `upload_rules`
     * and `stop_rules`.
     * </pre>
     *
     * <code>repeated .perfetto.protos.TriggerRule start_rules = 2;</code>
     */
    @java.lang.Override
    public java.util.List<perfetto.protos.ScenarioConfigOuterClass.TriggerRule> getStartRulesList() {
      return startRules_;
    }
    /**
     * <pre>
     * When triggered, this scenario becomes active. This activates `upload_rules`
     * and `stop_rules`.
     * </pre>
     *
     * <code>repeated .perfetto.protos.TriggerRule start_rules = 2;</code>
     */
    @java.lang.Override
    public java.util.List<? extends perfetto.protos.ScenarioConfigOuterClass.TriggerRuleOrBuilder> 
        getStartRulesOrBuilderList() {
      return startRules_;
    }
    /**
     * <pre>
     * When triggered, this scenario becomes active. This activates `upload_rules`
     * and `stop_rules`.
     * </pre>
     *
     * <code>repeated .perfetto.protos.TriggerRule start_rules = 2;</code>
     */
    @java.lang.Override
    public int getStartRulesCount() {
      return startRules_.size();
    }
    /**
     * <pre>
     * When triggered, this scenario becomes active. This activates `upload_rules`
     * and `stop_rules`.
     * </pre>
     *
     * <code>repeated .perfetto.protos.TriggerRule start_rules = 2;</code>
     */
    @java.lang.Override
    public perfetto.protos.ScenarioConfigOuterClass.TriggerRule getStartRules(int index) {
      return startRules_.get(index);
    }
    /**
     * <pre>
     * When triggered, this scenario becomes active. This activates `upload_rules`
     * and `stop_rules`.
     * </pre>
     *
     * <code>repeated .perfetto.protos.TriggerRule start_rules = 2;</code>
     */
    @java.lang.Override
    public perfetto.protos.ScenarioConfigOuterClass.TriggerRuleOrBuilder getStartRulesOrBuilder(
        int index) {
      return startRules_.get(index);
    }

    public static final int STOP_RULES_FIELD_NUMBER = 3;
    @SuppressWarnings("serial")
    private java.util.List<perfetto.protos.ScenarioConfigOuterClass.TriggerRule> stopRules_;
    /**
     * <pre>
     * When triggered, exits the scenario. This reverts back to the parent
     * scenario. All nested scenarios within the parent scenario will be observed
     * again.
     * </pre>
     *
     * <code>repeated .perfetto.protos.TriggerRule stop_rules = 3;</code>
     */
    @java.lang.Override
    public java.util.List<perfetto.protos.ScenarioConfigOuterClass.TriggerRule> getStopRulesList() {
      return stopRules_;
    }
    /**
     * <pre>
     * When triggered, exits the scenario. This reverts back to the parent
     * scenario. All nested scenarios within the parent scenario will be observed
     * again.
     * </pre>
     *
     * <code>repeated .perfetto.protos.TriggerRule stop_rules = 3;</code>
     */
    @java.lang.Override
    public java.util.List<? extends perfetto.protos.ScenarioConfigOuterClass.TriggerRuleOrBuilder> 
        getStopRulesOrBuilderList() {
      return stopRules_;
    }
    /**
     * <pre>
     * When triggered, exits the scenario. This reverts back to the parent
     * scenario. All nested scenarios within the parent scenario will be observed
     * again.
     * </pre>
     *
     * <code>repeated .perfetto.protos.TriggerRule stop_rules = 3;</code>
     */
    @java.lang.Override
    public int getStopRulesCount() {
      return stopRules_.size();
    }
    /**
     * <pre>
     * When triggered, exits the scenario. This reverts back to the parent
     * scenario. All nested scenarios within the parent scenario will be observed
     * again.
     * </pre>
     *
     * <code>repeated .perfetto.protos.TriggerRule stop_rules = 3;</code>
     */
    @java.lang.Override
    public perfetto.protos.ScenarioConfigOuterClass.TriggerRule getStopRules(int index) {
      return stopRules_.get(index);
    }
    /**
     * <pre>
     * When triggered, exits the scenario. This reverts back to the parent
     * scenario. All nested scenarios within the parent scenario will be observed
     * again.
     * </pre>
     *
     * <code>repeated .perfetto.protos.TriggerRule stop_rules = 3;</code>
     */
    @java.lang.Override
    public perfetto.protos.ScenarioConfigOuterClass.TriggerRuleOrBuilder getStopRulesOrBuilder(
        int index) {
      return stopRules_.get(index);
    }

    public static final int UPLOAD_RULES_FIELD_NUMBER = 4;
    @SuppressWarnings("serial")
    private java.util.List<perfetto.protos.ScenarioConfigOuterClass.TriggerRule> uploadRules_;
    /**
     * <pre>
     * When triggered, exits both this scenario and the parent scenario, stops the
     * tracing session, and attempts to upload the trace. All scenarios are
     * observed again.
     * </pre>
     *
     * <code>repeated .perfetto.protos.TriggerRule upload_rules = 4;</code>
     */
    @java.lang.Override
    public java.util.List<perfetto.protos.ScenarioConfigOuterClass.TriggerRule> getUploadRulesList() {
      return uploadRules_;
    }
    /**
     * <pre>
     * When triggered, exits both this scenario and the parent scenario, stops the
     * tracing session, and attempts to upload the trace. All scenarios are
     * observed again.
     * </pre>
     *
     * <code>repeated .perfetto.protos.TriggerRule upload_rules = 4;</code>
     */
    @java.lang.Override
    public java.util.List<? extends perfetto.protos.ScenarioConfigOuterClass.TriggerRuleOrBuilder> 
        getUploadRulesOrBuilderList() {
      return uploadRules_;
    }
    /**
     * <pre>
     * When triggered, exits both this scenario and the parent scenario, stops the
     * tracing session, and attempts to upload the trace. All scenarios are
     * observed again.
     * </pre>
     *
     * <code>repeated .perfetto.protos.TriggerRule upload_rules = 4;</code>
     */
    @java.lang.Override
    public int getUploadRulesCount() {
      return uploadRules_.size();
    }
    /**
     * <pre>
     * When triggered, exits both this scenario and the parent scenario, stops the
     * tracing session, and attempts to upload the trace. All scenarios are
     * observed again.
     * </pre>
     *
     * <code>repeated .perfetto.protos.TriggerRule upload_rules = 4;</code>
     */
    @java.lang.Override
    public perfetto.protos.ScenarioConfigOuterClass.TriggerRule getUploadRules(int index) {
      return uploadRules_.get(index);
    }
    /**
     * <pre>
     * When triggered, exits both this scenario and the parent scenario, stops the
     * tracing session, and attempts to upload the trace. All scenarios are
     * observed again.
     * </pre>
     *
     * <code>repeated .perfetto.protos.TriggerRule upload_rules = 4;</code>
     */
    @java.lang.Override
    public perfetto.protos.ScenarioConfigOuterClass.TriggerRuleOrBuilder getUploadRulesOrBuilder(
        int index) {
      return uploadRules_.get(index);
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (((bitField0_ & 0x00000001) != 0)) {
        com.google.protobuf.GeneratedMessage.writeString(output, 1, scenarioName_);
      }
      for (int i = 0; i < startRules_.size(); i++) {
        output.writeMessage(2, startRules_.get(i));
      }
      for (int i = 0; i < stopRules_.size(); i++) {
        output.writeMessage(3, stopRules_.get(i));
      }
      for (int i = 0; i < uploadRules_.size(); i++) {
        output.writeMessage(4, uploadRules_.get(i));
      }
      getUnknownFields().writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) != 0)) {
        size += com.google.protobuf.GeneratedMessage.computeStringSize(1, scenarioName_);
      }
      for (int i = 0; i < startRules_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(2, startRules_.get(i));
      }
      for (int i = 0; i < stopRules_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(3, stopRules_.get(i));
      }
      for (int i = 0; i < uploadRules_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(4, uploadRules_.get(i));
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof perfetto.protos.ScenarioConfigOuterClass.NestedScenarioConfig)) {
        return super.equals(obj);
      }
      perfetto.protos.ScenarioConfigOuterClass.NestedScenarioConfig other = (perfetto.protos.ScenarioConfigOuterClass.NestedScenarioConfig) obj;

      if (hasScenarioName() != other.hasScenarioName()) return false;
      if (hasScenarioName()) {
        if (!getScenarioName()
            .equals(other.getScenarioName())) return false;
      }
      if (!getStartRulesList()
          .equals(other.getStartRulesList())) return false;
      if (!getStopRulesList()
          .equals(other.getStopRulesList())) return false;
      if (!getUploadRulesList()
          .equals(other.getUploadRulesList())) return false;
      if (!getUnknownFields().equals(other.getUnknownFields())) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      if (hasScenarioName()) {
        hash = (37 * hash) + SCENARIO_NAME_FIELD_NUMBER;
        hash = (53 * hash) + getScenarioName().hashCode();
      }
      if (getStartRulesCount() > 0) {
        hash = (37 * hash) + START_RULES_FIELD_NUMBER;
        hash = (53 * hash) + getStartRulesList().hashCode();
      }
      if (getStopRulesCount() > 0) {
        hash = (37 * hash) + STOP_RULES_FIELD_NUMBER;
        hash = (53 * hash) + getStopRulesList().hashCode();
      }
      if (getUploadRulesCount() > 0) {
        hash = (37 * hash) + UPLOAD_RULES_FIELD_NUMBER;
        hash = (53 * hash) + getUploadRulesList().hashCode();
      }
      hash = (29 * hash) + getUnknownFields().hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static perfetto.protos.ScenarioConfigOuterClass.NestedScenarioConfig parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static perfetto.protos.ScenarioConfigOuterClass.NestedScenarioConfig parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static perfetto.protos.ScenarioConfigOuterClass.NestedScenarioConfig parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static perfetto.protos.ScenarioConfigOuterClass.NestedScenarioConfig parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static perfetto.protos.ScenarioConfigOuterClass.NestedScenarioConfig parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static perfetto.protos.ScenarioConfigOuterClass.NestedScenarioConfig parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static perfetto.protos.ScenarioConfigOuterClass.NestedScenarioConfig parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input);
    }
    public static perfetto.protos.ScenarioConfigOuterClass.NestedScenarioConfig parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    public static perfetto.protos.ScenarioConfigOuterClass.NestedScenarioConfig parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessage
          .parseDelimitedWithIOException(PARSER, input);
    }

    public static perfetto.protos.ScenarioConfigOuterClass.NestedScenarioConfig parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessage
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static perfetto.protos.ScenarioConfigOuterClass.NestedScenarioConfig parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input);
    }
    public static perfetto.protos.ScenarioConfigOuterClass.NestedScenarioConfig parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(perfetto.protos.ScenarioConfigOuterClass.NestedScenarioConfig prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code perfetto.protos.NestedScenarioConfig}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:perfetto.protos.NestedScenarioConfig)
        perfetto.protos.ScenarioConfigOuterClass.NestedScenarioConfigOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return perfetto.protos.ScenarioConfigOuterClass.internal_static_perfetto_protos_NestedScenarioConfig_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return perfetto.protos.ScenarioConfigOuterClass.internal_static_perfetto_protos_NestedScenarioConfig_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                perfetto.protos.ScenarioConfigOuterClass.NestedScenarioConfig.class, perfetto.protos.ScenarioConfigOuterClass.NestedScenarioConfig.Builder.class);
      }

      // Construct using perfetto.protos.ScenarioConfigOuterClass.NestedScenarioConfig.newBuilder()
      private Builder() {

      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);

      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        bitField0_ = 0;
        scenarioName_ = "";
        if (startRulesBuilder_ == null) {
          startRules_ = java.util.Collections.emptyList();
        } else {
          startRules_ = null;
          startRulesBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000002);
        if (stopRulesBuilder_ == null) {
          stopRules_ = java.util.Collections.emptyList();
        } else {
          stopRules_ = null;
          stopRulesBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000004);
        if (uploadRulesBuilder_ == null) {
          uploadRules_ = java.util.Collections.emptyList();
        } else {
          uploadRules_ = null;
          uploadRulesBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000008);
        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return perfetto.protos.ScenarioConfigOuterClass.internal_static_perfetto_protos_NestedScenarioConfig_descriptor;
      }

      @java.lang.Override
      public perfetto.protos.ScenarioConfigOuterClass.NestedScenarioConfig getDefaultInstanceForType() {
        return perfetto.protos.ScenarioConfigOuterClass.NestedScenarioConfig.getDefaultInstance();
      }

      @java.lang.Override
      public perfetto.protos.ScenarioConfigOuterClass.NestedScenarioConfig build() {
        perfetto.protos.ScenarioConfigOuterClass.NestedScenarioConfig result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public perfetto.protos.ScenarioConfigOuterClass.NestedScenarioConfig buildPartial() {
        perfetto.protos.ScenarioConfigOuterClass.NestedScenarioConfig result = new perfetto.protos.ScenarioConfigOuterClass.NestedScenarioConfig(this);
        buildPartialRepeatedFields(result);
        if (bitField0_ != 0) { buildPartial0(result); }
        onBuilt();
        return result;
      }

      private void buildPartialRepeatedFields(perfetto.protos.ScenarioConfigOuterClass.NestedScenarioConfig result) {
        if (startRulesBuilder_ == null) {
          if (((bitField0_ & 0x00000002) != 0)) {
            startRules_ = java.util.Collections.unmodifiableList(startRules_);
            bitField0_ = (bitField0_ & ~0x00000002);
          }
          result.startRules_ = startRules_;
        } else {
          result.startRules_ = startRulesBuilder_.build();
        }
        if (stopRulesBuilder_ == null) {
          if (((bitField0_ & 0x00000004) != 0)) {
            stopRules_ = java.util.Collections.unmodifiableList(stopRules_);
            bitField0_ = (bitField0_ & ~0x00000004);
          }
          result.stopRules_ = stopRules_;
        } else {
          result.stopRules_ = stopRulesBuilder_.build();
        }
        if (uploadRulesBuilder_ == null) {
          if (((bitField0_ & 0x00000008) != 0)) {
            uploadRules_ = java.util.Collections.unmodifiableList(uploadRules_);
            bitField0_ = (bitField0_ & ~0x00000008);
          }
          result.uploadRules_ = uploadRules_;
        } else {
          result.uploadRules_ = uploadRulesBuilder_.build();
        }
      }

      private void buildPartial0(perfetto.protos.ScenarioConfigOuterClass.NestedScenarioConfig result) {
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) != 0)) {
          result.scenarioName_ = scenarioName_;
          to_bitField0_ |= 0x00000001;
        }
        result.bitField0_ |= to_bitField0_;
      }

      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof perfetto.protos.ScenarioConfigOuterClass.NestedScenarioConfig) {
          return mergeFrom((perfetto.protos.ScenarioConfigOuterClass.NestedScenarioConfig)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(perfetto.protos.ScenarioConfigOuterClass.NestedScenarioConfig other) {
        if (other == perfetto.protos.ScenarioConfigOuterClass.NestedScenarioConfig.getDefaultInstance()) return this;
        if (other.hasScenarioName()) {
          scenarioName_ = other.scenarioName_;
          bitField0_ |= 0x00000001;
          onChanged();
        }
        if (startRulesBuilder_ == null) {
          if (!other.startRules_.isEmpty()) {
            if (startRules_.isEmpty()) {
              startRules_ = other.startRules_;
              bitField0_ = (bitField0_ & ~0x00000002);
            } else {
              ensureStartRulesIsMutable();
              startRules_.addAll(other.startRules_);
            }
            onChanged();
          }
        } else {
          if (!other.startRules_.isEmpty()) {
            if (startRulesBuilder_.isEmpty()) {
              startRulesBuilder_.dispose();
              startRulesBuilder_ = null;
              startRules_ = other.startRules_;
              bitField0_ = (bitField0_ & ~0x00000002);
              startRulesBuilder_ = 
                com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders ?
                   getStartRulesFieldBuilder() : null;
            } else {
              startRulesBuilder_.addAllMessages(other.startRules_);
            }
          }
        }
        if (stopRulesBuilder_ == null) {
          if (!other.stopRules_.isEmpty()) {
            if (stopRules_.isEmpty()) {
              stopRules_ = other.stopRules_;
              bitField0_ = (bitField0_ & ~0x00000004);
            } else {
              ensureStopRulesIsMutable();
              stopRules_.addAll(other.stopRules_);
            }
            onChanged();
          }
        } else {
          if (!other.stopRules_.isEmpty()) {
            if (stopRulesBuilder_.isEmpty()) {
              stopRulesBuilder_.dispose();
              stopRulesBuilder_ = null;
              stopRules_ = other.stopRules_;
              bitField0_ = (bitField0_ & ~0x00000004);
              stopRulesBuilder_ = 
                com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders ?
                   getStopRulesFieldBuilder() : null;
            } else {
              stopRulesBuilder_.addAllMessages(other.stopRules_);
            }
          }
        }
        if (uploadRulesBuilder_ == null) {
          if (!other.uploadRules_.isEmpty()) {
            if (uploadRules_.isEmpty()) {
              uploadRules_ = other.uploadRules_;
              bitField0_ = (bitField0_ & ~0x00000008);
            } else {
              ensureUploadRulesIsMutable();
              uploadRules_.addAll(other.uploadRules_);
            }
            onChanged();
          }
        } else {
          if (!other.uploadRules_.isEmpty()) {
            if (uploadRulesBuilder_.isEmpty()) {
              uploadRulesBuilder_.dispose();
              uploadRulesBuilder_ = null;
              uploadRules_ = other.uploadRules_;
              bitField0_ = (bitField0_ & ~0x00000008);
              uploadRulesBuilder_ = 
                com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders ?
                   getUploadRulesFieldBuilder() : null;
            } else {
              uploadRulesBuilder_.addAllMessages(other.uploadRules_);
            }
          }
        }
        this.mergeUnknownFields(other.getUnknownFields());
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        if (extensionRegistry == null) {
          throw new java.lang.NullPointerException();
        }
        try {
          boolean done = false;
          while (!done) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                done = true;
                break;
              case 10: {
                scenarioName_ = input.readBytes();
                bitField0_ |= 0x00000001;
                break;
              } // case 10
              case 18: {
                perfetto.protos.ScenarioConfigOuterClass.TriggerRule m =
                    input.readMessage(
                        perfetto.protos.ScenarioConfigOuterClass.TriggerRule.parser(),
                        extensionRegistry);
                if (startRulesBuilder_ == null) {
                  ensureStartRulesIsMutable();
                  startRules_.add(m);
                } else {
                  startRulesBuilder_.addMessage(m);
                }
                break;
              } // case 18
              case 26: {
                perfetto.protos.ScenarioConfigOuterClass.TriggerRule m =
                    input.readMessage(
                        perfetto.protos.ScenarioConfigOuterClass.TriggerRule.parser(),
                        extensionRegistry);
                if (stopRulesBuilder_ == null) {
                  ensureStopRulesIsMutable();
                  stopRules_.add(m);
                } else {
                  stopRulesBuilder_.addMessage(m);
                }
                break;
              } // case 26
              case 34: {
                perfetto.protos.ScenarioConfigOuterClass.TriggerRule m =
                    input.readMessage(
                        perfetto.protos.ScenarioConfigOuterClass.TriggerRule.parser(),
                        extensionRegistry);
                if (uploadRulesBuilder_ == null) {
                  ensureUploadRulesIsMutable();
                  uploadRules_.add(m);
                } else {
                  uploadRulesBuilder_.addMessage(m);
                }
                break;
              } // case 34
              default: {
                if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                  done = true; // was an endgroup tag
                }
                break;
              } // default:
            } // switch (tag)
          } // while (!done)
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.unwrapIOException();
        } finally {
          onChanged();
        } // finally
        return this;
      }
      private int bitField0_;

      private java.lang.Object scenarioName_ = "";
      /**
       * <pre>
       * Nested scenario name, unique within the parent scenario.
       * </pre>
       *
       * <code>optional string scenario_name = 1;</code>
       * @return Whether the scenarioName field is set.
       */
      public boolean hasScenarioName() {
        return ((bitField0_ & 0x00000001) != 0);
      }
      /**
       * <pre>
       * Nested scenario name, unique within the parent scenario.
       * </pre>
       *
       * <code>optional string scenario_name = 1;</code>
       * @return The scenarioName.
       */
      public java.lang.String getScenarioName() {
        java.lang.Object ref = scenarioName_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          if (bs.isValidUtf8()) {
            scenarioName_ = s;
          }
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <pre>
       * Nested scenario name, unique within the parent scenario.
       * </pre>
       *
       * <code>optional string scenario_name = 1;</code>
       * @return The bytes for scenarioName.
       */
      public com.google.protobuf.ByteString
          getScenarioNameBytes() {
        java.lang.Object ref = scenarioName_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          scenarioName_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <pre>
       * Nested scenario name, unique within the parent scenario.
       * </pre>
       *
       * <code>optional string scenario_name = 1;</code>
       * @param value The scenarioName to set.
       * @return This builder for chaining.
       */
      public Builder setScenarioName(
          java.lang.String value) {
        if (value == null) { throw new NullPointerException(); }
        scenarioName_ = value;
        bitField0_ |= 0x00000001;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Nested scenario name, unique within the parent scenario.
       * </pre>
       *
       * <code>optional string scenario_name = 1;</code>
       * @return This builder for chaining.
       */
      public Builder clearScenarioName() {
        scenarioName_ = getDefaultInstance().getScenarioName();
        bitField0_ = (bitField0_ & ~0x00000001);
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Nested scenario name, unique within the parent scenario.
       * </pre>
       *
       * <code>optional string scenario_name = 1;</code>
       * @param value The bytes for scenarioName to set.
       * @return This builder for chaining.
       */
      public Builder setScenarioNameBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) { throw new NullPointerException(); }
        scenarioName_ = value;
        bitField0_ |= 0x00000001;
        onChanged();
        return this;
      }

      private java.util.List<perfetto.protos.ScenarioConfigOuterClass.TriggerRule> startRules_ =
        java.util.Collections.emptyList();
      private void ensureStartRulesIsMutable() {
        if (!((bitField0_ & 0x00000002) != 0)) {
          startRules_ = new java.util.ArrayList<perfetto.protos.ScenarioConfigOuterClass.TriggerRule>(startRules_);
          bitField0_ |= 0x00000002;
         }
      }

      private com.google.protobuf.RepeatedFieldBuilder<
          perfetto.protos.ScenarioConfigOuterClass.TriggerRule, perfetto.protos.ScenarioConfigOuterClass.TriggerRule.Builder, perfetto.protos.ScenarioConfigOuterClass.TriggerRuleOrBuilder> startRulesBuilder_;

      /**
       * <pre>
       * When triggered, this scenario becomes active. This activates `upload_rules`
       * and `stop_rules`.
       * </pre>
       *
       * <code>repeated .perfetto.protos.TriggerRule start_rules = 2;</code>
       */
      public java.util.List<perfetto.protos.ScenarioConfigOuterClass.TriggerRule> getStartRulesList() {
        if (startRulesBuilder_ == null) {
          return java.util.Collections.unmodifiableList(startRules_);
        } else {
          return startRulesBuilder_.getMessageList();
        }
      }
      /**
       * <pre>
       * When triggered, this scenario becomes active. This activates `upload_rules`
       * and `stop_rules`.
       * </pre>
       *
       * <code>repeated .perfetto.protos.TriggerRule start_rules = 2;</code>
       */
      public int getStartRulesCount() {
        if (startRulesBuilder_ == null) {
          return startRules_.size();
        } else {
          return startRulesBuilder_.getCount();
        }
      }
      /**
       * <pre>
       * When triggered, this scenario becomes active. This activates `upload_rules`
       * and `stop_rules`.
       * </pre>
       *
       * <code>repeated .perfetto.protos.TriggerRule start_rules = 2;</code>
       */
      public perfetto.protos.ScenarioConfigOuterClass.TriggerRule getStartRules(int index) {
        if (startRulesBuilder_ == null) {
          return startRules_.get(index);
        } else {
          return startRulesBuilder_.getMessage(index);
        }
      }
      /**
       * <pre>
       * When triggered, this scenario becomes active. This activates `upload_rules`
       * and `stop_rules`.
       * </pre>
       *
       * <code>repeated .perfetto.protos.TriggerRule start_rules = 2;</code>
       */
      public Builder setStartRules(
          int index, perfetto.protos.ScenarioConfigOuterClass.TriggerRule value) {
        if (startRulesBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureStartRulesIsMutable();
          startRules_.set(index, value);
          onChanged();
        } else {
          startRulesBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <pre>
       * When triggered, this scenario becomes active. This activates `upload_rules`
       * and `stop_rules`.
       * </pre>
       *
       * <code>repeated .perfetto.protos.TriggerRule start_rules = 2;</code>
       */
      public Builder setStartRules(
          int index, perfetto.protos.ScenarioConfigOuterClass.TriggerRule.Builder builderForValue) {
        if (startRulesBuilder_ == null) {
          ensureStartRulesIsMutable();
          startRules_.set(index, builderForValue.build());
          onChanged();
        } else {
          startRulesBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * When triggered, this scenario becomes active. This activates `upload_rules`
       * and `stop_rules`.
       * </pre>
       *
       * <code>repeated .perfetto.protos.TriggerRule start_rules = 2;</code>
       */
      public Builder addStartRules(perfetto.protos.ScenarioConfigOuterClass.TriggerRule value) {
        if (startRulesBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureStartRulesIsMutable();
          startRules_.add(value);
          onChanged();
        } else {
          startRulesBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <pre>
       * When triggered, this scenario becomes active. This activates `upload_rules`
       * and `stop_rules`.
       * </pre>
       *
       * <code>repeated .perfetto.protos.TriggerRule start_rules = 2;</code>
       */
      public Builder addStartRules(
          int index, perfetto.protos.ScenarioConfigOuterClass.TriggerRule value) {
        if (startRulesBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureStartRulesIsMutable();
          startRules_.add(index, value);
          onChanged();
        } else {
          startRulesBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <pre>
       * When triggered, this scenario becomes active. This activates `upload_rules`
       * and `stop_rules`.
       * </pre>
       *
       * <code>repeated .perfetto.protos.TriggerRule start_rules = 2;</code>
       */
      public Builder addStartRules(
          perfetto.protos.ScenarioConfigOuterClass.TriggerRule.Builder builderForValue) {
        if (startRulesBuilder_ == null) {
          ensureStartRulesIsMutable();
          startRules_.add(builderForValue.build());
          onChanged();
        } else {
          startRulesBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * When triggered, this scenario becomes active. This activates `upload_rules`
       * and `stop_rules`.
       * </pre>
       *
       * <code>repeated .perfetto.protos.TriggerRule start_rules = 2;</code>
       */
      public Builder addStartRules(
          int index, perfetto.protos.ScenarioConfigOuterClass.TriggerRule.Builder builderForValue) {
        if (startRulesBuilder_ == null) {
          ensureStartRulesIsMutable();
          startRules_.add(index, builderForValue.build());
          onChanged();
        } else {
          startRulesBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * When triggered, this scenario becomes active. This activates `upload_rules`
       * and `stop_rules`.
       * </pre>
       *
       * <code>repeated .perfetto.protos.TriggerRule start_rules = 2;</code>
       */
      public Builder addAllStartRules(
          java.lang.Iterable<? extends perfetto.protos.ScenarioConfigOuterClass.TriggerRule> values) {
        if (startRulesBuilder_ == null) {
          ensureStartRulesIsMutable();
          com.google.protobuf.AbstractMessageLite.Builder.addAll(
              values, startRules_);
          onChanged();
        } else {
          startRulesBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <pre>
       * When triggered, this scenario becomes active. This activates `upload_rules`
       * and `stop_rules`.
       * </pre>
       *
       * <code>repeated .perfetto.protos.TriggerRule start_rules = 2;</code>
       */
      public Builder clearStartRules() {
        if (startRulesBuilder_ == null) {
          startRules_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000002);
          onChanged();
        } else {
          startRulesBuilder_.clear();
        }
        return this;
      }
      /**
       * <pre>
       * When triggered, this scenario becomes active. This activates `upload_rules`
       * and `stop_rules`.
       * </pre>
       *
       * <code>repeated .perfetto.protos.TriggerRule start_rules = 2;</code>
       */
      public Builder removeStartRules(int index) {
        if (startRulesBuilder_ == null) {
          ensureStartRulesIsMutable();
          startRules_.remove(index);
          onChanged();
        } else {
          startRulesBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <pre>
       * When triggered, this scenario becomes active. This activates `upload_rules`
       * and `stop_rules`.
       * </pre>
       *
       * <code>repeated .perfetto.protos.TriggerRule start_rules = 2;</code>
       */
      public perfetto.protos.ScenarioConfigOuterClass.TriggerRule.Builder getStartRulesBuilder(
          int index) {
        return getStartRulesFieldBuilder().getBuilder(index);
      }
      /**
       * <pre>
       * When triggered, this scenario becomes active. This activates `upload_rules`
       * and `stop_rules`.
       * </pre>
       *
       * <code>repeated .perfetto.protos.TriggerRule start_rules = 2;</code>
       */
      public perfetto.protos.ScenarioConfigOuterClass.TriggerRuleOrBuilder getStartRulesOrBuilder(
          int index) {
        if (startRulesBuilder_ == null) {
          return startRules_.get(index);  } else {
          return startRulesBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <pre>
       * When triggered, this scenario becomes active. This activates `upload_rules`
       * and `stop_rules`.
       * </pre>
       *
       * <code>repeated .perfetto.protos.TriggerRule start_rules = 2;</code>
       */
      public java.util.List<? extends perfetto.protos.ScenarioConfigOuterClass.TriggerRuleOrBuilder> 
           getStartRulesOrBuilderList() {
        if (startRulesBuilder_ != null) {
          return startRulesBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(startRules_);
        }
      }
      /**
       * <pre>
       * When triggered, this scenario becomes active. This activates `upload_rules`
       * and `stop_rules`.
       * </pre>
       *
       * <code>repeated .perfetto.protos.TriggerRule start_rules = 2;</code>
       */
      public perfetto.protos.ScenarioConfigOuterClass.TriggerRule.Builder addStartRulesBuilder() {
        return getStartRulesFieldBuilder().addBuilder(
            perfetto.protos.ScenarioConfigOuterClass.TriggerRule.getDefaultInstance());
      }
      /**
       * <pre>
       * When triggered, this scenario becomes active. This activates `upload_rules`
       * and `stop_rules`.
       * </pre>
       *
       * <code>repeated .perfetto.protos.TriggerRule start_rules = 2;</code>
       */
      public perfetto.protos.ScenarioConfigOuterClass.TriggerRule.Builder addStartRulesBuilder(
          int index) {
        return getStartRulesFieldBuilder().addBuilder(
            index, perfetto.protos.ScenarioConfigOuterClass.TriggerRule.getDefaultInstance());
      }
      /**
       * <pre>
       * When triggered, this scenario becomes active. This activates `upload_rules`
       * and `stop_rules`.
       * </pre>
       *
       * <code>repeated .perfetto.protos.TriggerRule start_rules = 2;</code>
       */
      public java.util.List<perfetto.protos.ScenarioConfigOuterClass.TriggerRule.Builder> 
           getStartRulesBuilderList() {
        return getStartRulesFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilder<
          perfetto.protos.ScenarioConfigOuterClass.TriggerRule, perfetto.protos.ScenarioConfigOuterClass.TriggerRule.Builder, perfetto.protos.ScenarioConfigOuterClass.TriggerRuleOrBuilder> 
          getStartRulesFieldBuilder() {
        if (startRulesBuilder_ == null) {
          startRulesBuilder_ = new com.google.protobuf.RepeatedFieldBuilder<
              perfetto.protos.ScenarioConfigOuterClass.TriggerRule, perfetto.protos.ScenarioConfigOuterClass.TriggerRule.Builder, perfetto.protos.ScenarioConfigOuterClass.TriggerRuleOrBuilder>(
                  startRules_,
                  ((bitField0_ & 0x00000002) != 0),
                  getParentForChildren(),
                  isClean());
          startRules_ = null;
        }
        return startRulesBuilder_;
      }

      private java.util.List<perfetto.protos.ScenarioConfigOuterClass.TriggerRule> stopRules_ =
        java.util.Collections.emptyList();
      private void ensureStopRulesIsMutable() {
        if (!((bitField0_ & 0x00000004) != 0)) {
          stopRules_ = new java.util.ArrayList<perfetto.protos.ScenarioConfigOuterClass.TriggerRule>(stopRules_);
          bitField0_ |= 0x00000004;
         }
      }

      private com.google.protobuf.RepeatedFieldBuilder<
          perfetto.protos.ScenarioConfigOuterClass.TriggerRule, perfetto.protos.ScenarioConfigOuterClass.TriggerRule.Builder, perfetto.protos.ScenarioConfigOuterClass.TriggerRuleOrBuilder> stopRulesBuilder_;

      /**
       * <pre>
       * When triggered, exits the scenario. This reverts back to the parent
       * scenario. All nested scenarios within the parent scenario will be observed
       * again.
       * </pre>
       *
       * <code>repeated .perfetto.protos.TriggerRule stop_rules = 3;</code>
       */
      public java.util.List<perfetto.protos.ScenarioConfigOuterClass.TriggerRule> getStopRulesList() {
        if (stopRulesBuilder_ == null) {
          return java.util.Collections.unmodifiableList(stopRules_);
        } else {
          return stopRulesBuilder_.getMessageList();
        }
      }
      /**
       * <pre>
       * When triggered, exits the scenario. This reverts back to the parent
       * scenario. All nested scenarios within the parent scenario will be observed
       * again.
       * </pre>
       *
       * <code>repeated .perfetto.protos.TriggerRule stop_rules = 3;</code>
       */
      public int getStopRulesCount() {
        if (stopRulesBuilder_ == null) {
          return stopRules_.size();
        } else {
          return stopRulesBuilder_.getCount();
        }
      }
      /**
       * <pre>
       * When triggered, exits the scenario. This reverts back to the parent
       * scenario. All nested scenarios within the parent scenario will be observed
       * again.
       * </pre>
       *
       * <code>repeated .perfetto.protos.TriggerRule stop_rules = 3;</code>
       */
      public perfetto.protos.ScenarioConfigOuterClass.TriggerRule getStopRules(int index) {
        if (stopRulesBuilder_ == null) {
          return stopRules_.get(index);
        } else {
          return stopRulesBuilder_.getMessage(index);
        }
      }
      /**
       * <pre>
       * When triggered, exits the scenario. This reverts back to the parent
       * scenario. All nested scenarios within the parent scenario will be observed
       * again.
       * </pre>
       *
       * <code>repeated .perfetto.protos.TriggerRule stop_rules = 3;</code>
       */
      public Builder setStopRules(
          int index, perfetto.protos.ScenarioConfigOuterClass.TriggerRule value) {
        if (stopRulesBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureStopRulesIsMutable();
          stopRules_.set(index, value);
          onChanged();
        } else {
          stopRulesBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <pre>
       * When triggered, exits the scenario. This reverts back to the parent
       * scenario. All nested scenarios within the parent scenario will be observed
       * again.
       * </pre>
       *
       * <code>repeated .perfetto.protos.TriggerRule stop_rules = 3;</code>
       */
      public Builder setStopRules(
          int index, perfetto.protos.ScenarioConfigOuterClass.TriggerRule.Builder builderForValue) {
        if (stopRulesBuilder_ == null) {
          ensureStopRulesIsMutable();
          stopRules_.set(index, builderForValue.build());
          onChanged();
        } else {
          stopRulesBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * When triggered, exits the scenario. This reverts back to the parent
       * scenario. All nested scenarios within the parent scenario will be observed
       * again.
       * </pre>
       *
       * <code>repeated .perfetto.protos.TriggerRule stop_rules = 3;</code>
       */
      public Builder addStopRules(perfetto.protos.ScenarioConfigOuterClass.TriggerRule value) {
        if (stopRulesBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureStopRulesIsMutable();
          stopRules_.add(value);
          onChanged();
        } else {
          stopRulesBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <pre>
       * When triggered, exits the scenario. This reverts back to the parent
       * scenario. All nested scenarios within the parent scenario will be observed
       * again.
       * </pre>
       *
       * <code>repeated .perfetto.protos.TriggerRule stop_rules = 3;</code>
       */
      public Builder addStopRules(
          int index, perfetto.protos.ScenarioConfigOuterClass.TriggerRule value) {
        if (stopRulesBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureStopRulesIsMutable();
          stopRules_.add(index, value);
          onChanged();
        } else {
          stopRulesBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <pre>
       * When triggered, exits the scenario. This reverts back to the parent
       * scenario. All nested scenarios within the parent scenario will be observed
       * again.
       * </pre>
       *
       * <code>repeated .perfetto.protos.TriggerRule stop_rules = 3;</code>
       */
      public Builder addStopRules(
          perfetto.protos.ScenarioConfigOuterClass.TriggerRule.Builder builderForValue) {
        if (stopRulesBuilder_ == null) {
          ensureStopRulesIsMutable();
          stopRules_.add(builderForValue.build());
          onChanged();
        } else {
          stopRulesBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * When triggered, exits the scenario. This reverts back to the parent
       * scenario. All nested scenarios within the parent scenario will be observed
       * again.
       * </pre>
       *
       * <code>repeated .perfetto.protos.TriggerRule stop_rules = 3;</code>
       */
      public Builder addStopRules(
          int index, perfetto.protos.ScenarioConfigOuterClass.TriggerRule.Builder builderForValue) {
        if (stopRulesBuilder_ == null) {
          ensureStopRulesIsMutable();
          stopRules_.add(index, builderForValue.build());
          onChanged();
        } else {
          stopRulesBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * When triggered, exits the scenario. This reverts back to the parent
       * scenario. All nested scenarios within the parent scenario will be observed
       * again.
       * </pre>
       *
       * <code>repeated .perfetto.protos.TriggerRule stop_rules = 3;</code>
       */
      public Builder addAllStopRules(
          java.lang.Iterable<? extends perfetto.protos.ScenarioConfigOuterClass.TriggerRule> values) {
        if (stopRulesBuilder_ == null) {
          ensureStopRulesIsMutable();
          com.google.protobuf.AbstractMessageLite.Builder.addAll(
              values, stopRules_);
          onChanged();
        } else {
          stopRulesBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <pre>
       * When triggered, exits the scenario. This reverts back to the parent
       * scenario. All nested scenarios within the parent scenario will be observed
       * again.
       * </pre>
       *
       * <code>repeated .perfetto.protos.TriggerRule stop_rules = 3;</code>
       */
      public Builder clearStopRules() {
        if (stopRulesBuilder_ == null) {
          stopRules_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000004);
          onChanged();
        } else {
          stopRulesBuilder_.clear();
        }
        return this;
      }
      /**
       * <pre>
       * When triggered, exits the scenario. This reverts back to the parent
       * scenario. All nested scenarios within the parent scenario will be observed
       * again.
       * </pre>
       *
       * <code>repeated .perfetto.protos.TriggerRule stop_rules = 3;</code>
       */
      public Builder removeStopRules(int index) {
        if (stopRulesBuilder_ == null) {
          ensureStopRulesIsMutable();
          stopRules_.remove(index);
          onChanged();
        } else {
          stopRulesBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <pre>
       * When triggered, exits the scenario. This reverts back to the parent
       * scenario. All nested scenarios within the parent scenario will be observed
       * again.
       * </pre>
       *
       * <code>repeated .perfetto.protos.TriggerRule stop_rules = 3;</code>
       */
      public perfetto.protos.ScenarioConfigOuterClass.TriggerRule.Builder getStopRulesBuilder(
          int index) {
        return getStopRulesFieldBuilder().getBuilder(index);
      }
      /**
       * <pre>
       * When triggered, exits the scenario. This reverts back to the parent
       * scenario. All nested scenarios within the parent scenario will be observed
       * again.
       * </pre>
       *
       * <code>repeated .perfetto.protos.TriggerRule stop_rules = 3;</code>
       */
      public perfetto.protos.ScenarioConfigOuterClass.TriggerRuleOrBuilder getStopRulesOrBuilder(
          int index) {
        if (stopRulesBuilder_ == null) {
          return stopRules_.get(index);  } else {
          return stopRulesBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <pre>
       * When triggered, exits the scenario. This reverts back to the parent
       * scenario. All nested scenarios within the parent scenario will be observed
       * again.
       * </pre>
       *
       * <code>repeated .perfetto.protos.TriggerRule stop_rules = 3;</code>
       */
      public java.util.List<? extends perfetto.protos.ScenarioConfigOuterClass.TriggerRuleOrBuilder> 
           getStopRulesOrBuilderList() {
        if (stopRulesBuilder_ != null) {
          return stopRulesBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(stopRules_);
        }
      }
      /**
       * <pre>
       * When triggered, exits the scenario. This reverts back to the parent
       * scenario. All nested scenarios within the parent scenario will be observed
       * again.
       * </pre>
       *
       * <code>repeated .perfetto.protos.TriggerRule stop_rules = 3;</code>
       */
      public perfetto.protos.ScenarioConfigOuterClass.TriggerRule.Builder addStopRulesBuilder() {
        return getStopRulesFieldBuilder().addBuilder(
            perfetto.protos.ScenarioConfigOuterClass.TriggerRule.getDefaultInstance());
      }
      /**
       * <pre>
       * When triggered, exits the scenario. This reverts back to the parent
       * scenario. All nested scenarios within the parent scenario will be observed
       * again.
       * </pre>
       *
       * <code>repeated .perfetto.protos.TriggerRule stop_rules = 3;</code>
       */
      public perfetto.protos.ScenarioConfigOuterClass.TriggerRule.Builder addStopRulesBuilder(
          int index) {
        return getStopRulesFieldBuilder().addBuilder(
            index, perfetto.protos.ScenarioConfigOuterClass.TriggerRule.getDefaultInstance());
      }
      /**
       * <pre>
       * When triggered, exits the scenario. This reverts back to the parent
       * scenario. All nested scenarios within the parent scenario will be observed
       * again.
       * </pre>
       *
       * <code>repeated .perfetto.protos.TriggerRule stop_rules = 3;</code>
       */
      public java.util.List<perfetto.protos.ScenarioConfigOuterClass.TriggerRule.Builder> 
           getStopRulesBuilderList() {
        return getStopRulesFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilder<
          perfetto.protos.ScenarioConfigOuterClass.TriggerRule, perfetto.protos.ScenarioConfigOuterClass.TriggerRule.Builder, perfetto.protos.ScenarioConfigOuterClass.TriggerRuleOrBuilder> 
          getStopRulesFieldBuilder() {
        if (stopRulesBuilder_ == null) {
          stopRulesBuilder_ = new com.google.protobuf.RepeatedFieldBuilder<
              perfetto.protos.ScenarioConfigOuterClass.TriggerRule, perfetto.protos.ScenarioConfigOuterClass.TriggerRule.Builder, perfetto.protos.ScenarioConfigOuterClass.TriggerRuleOrBuilder>(
                  stopRules_,
                  ((bitField0_ & 0x00000004) != 0),
                  getParentForChildren(),
                  isClean());
          stopRules_ = null;
        }
        return stopRulesBuilder_;
      }

      private java.util.List<perfetto.protos.ScenarioConfigOuterClass.TriggerRule> uploadRules_ =
        java.util.Collections.emptyList();
      private void ensureUploadRulesIsMutable() {
        if (!((bitField0_ & 0x00000008) != 0)) {
          uploadRules_ = new java.util.ArrayList<perfetto.protos.ScenarioConfigOuterClass.TriggerRule>(uploadRules_);
          bitField0_ |= 0x00000008;
         }
      }

      private com.google.protobuf.RepeatedFieldBuilder<
          perfetto.protos.ScenarioConfigOuterClass.TriggerRule, perfetto.protos.ScenarioConfigOuterClass.TriggerRule.Builder, perfetto.protos.ScenarioConfigOuterClass.TriggerRuleOrBuilder> uploadRulesBuilder_;

      /**
       * <pre>
       * When triggered, exits both this scenario and the parent scenario, stops the
       * tracing session, and attempts to upload the trace. All scenarios are
       * observed again.
       * </pre>
       *
       * <code>repeated .perfetto.protos.TriggerRule upload_rules = 4;</code>
       */
      public java.util.List<perfetto.protos.ScenarioConfigOuterClass.TriggerRule> getUploadRulesList() {
        if (uploadRulesBuilder_ == null) {
          return java.util.Collections.unmodifiableList(uploadRules_);
        } else {
          return uploadRulesBuilder_.getMessageList();
        }
      }
      /**
       * <pre>
       * When triggered, exits both this scenario and the parent scenario, stops the
       * tracing session, and attempts to upload the trace. All scenarios are
       * observed again.
       * </pre>
       *
       * <code>repeated .perfetto.protos.TriggerRule upload_rules = 4;</code>
       */
      public int getUploadRulesCount() {
        if (uploadRulesBuilder_ == null) {
          return uploadRules_.size();
        } else {
          return uploadRulesBuilder_.getCount();
        }
      }
      /**
       * <pre>
       * When triggered, exits both this scenario and the parent scenario, stops the
       * tracing session, and attempts to upload the trace. All scenarios are
       * observed again.
       * </pre>
       *
       * <code>repeated .perfetto.protos.TriggerRule upload_rules = 4;</code>
       */
      public perfetto.protos.ScenarioConfigOuterClass.TriggerRule getUploadRules(int index) {
        if (uploadRulesBuilder_ == null) {
          return uploadRules_.get(index);
        } else {
          return uploadRulesBuilder_.getMessage(index);
        }
      }
      /**
       * <pre>
       * When triggered, exits both this scenario and the parent scenario, stops the
       * tracing session, and attempts to upload the trace. All scenarios are
       * observed again.
       * </pre>
       *
       * <code>repeated .perfetto.protos.TriggerRule upload_rules = 4;</code>
       */
      public Builder setUploadRules(
          int index, perfetto.protos.ScenarioConfigOuterClass.TriggerRule value) {
        if (uploadRulesBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureUploadRulesIsMutable();
          uploadRules_.set(index, value);
          onChanged();
        } else {
          uploadRulesBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <pre>
       * When triggered, exits both this scenario and the parent scenario, stops the
       * tracing session, and attempts to upload the trace. All scenarios are
       * observed again.
       * </pre>
       *
       * <code>repeated .perfetto.protos.TriggerRule upload_rules = 4;</code>
       */
      public Builder setUploadRules(
          int index, perfetto.protos.ScenarioConfigOuterClass.TriggerRule.Builder builderForValue) {
        if (uploadRulesBuilder_ == null) {
          ensureUploadRulesIsMutable();
          uploadRules_.set(index, builderForValue.build());
          onChanged();
        } else {
          uploadRulesBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * When triggered, exits both this scenario and the parent scenario, stops the
       * tracing session, and attempts to upload the trace. All scenarios are
       * observed again.
       * </pre>
       *
       * <code>repeated .perfetto.protos.TriggerRule upload_rules = 4;</code>
       */
      public Builder addUploadRules(perfetto.protos.ScenarioConfigOuterClass.TriggerRule value) {
        if (uploadRulesBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureUploadRulesIsMutable();
          uploadRules_.add(value);
          onChanged();
        } else {
          uploadRulesBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <pre>
       * When triggered, exits both this scenario and the parent scenario, stops the
       * tracing session, and attempts to upload the trace. All scenarios are
       * observed again.
       * </pre>
       *
       * <code>repeated .perfetto.protos.TriggerRule upload_rules = 4;</code>
       */
      public Builder addUploadRules(
          int index, perfetto.protos.ScenarioConfigOuterClass.TriggerRule value) {
        if (uploadRulesBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureUploadRulesIsMutable();
          uploadRules_.add(index, value);
          onChanged();
        } else {
          uploadRulesBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <pre>
       * When triggered, exits both this scenario and the parent scenario, stops the
       * tracing session, and attempts to upload the trace. All scenarios are
       * observed again.
       * </pre>
       *
       * <code>repeated .perfetto.protos.TriggerRule upload_rules = 4;</code>
       */
      public Builder addUploadRules(
          perfetto.protos.ScenarioConfigOuterClass.TriggerRule.Builder builderForValue) {
        if (uploadRulesBuilder_ == null) {
          ensureUploadRulesIsMutable();
          uploadRules_.add(builderForValue.build());
          onChanged();
        } else {
          uploadRulesBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * When triggered, exits both this scenario and the parent scenario, stops the
       * tracing session, and attempts to upload the trace. All scenarios are
       * observed again.
       * </pre>
       *
       * <code>repeated .perfetto.protos.TriggerRule upload_rules = 4;</code>
       */
      public Builder addUploadRules(
          int index, perfetto.protos.ScenarioConfigOuterClass.TriggerRule.Builder builderForValue) {
        if (uploadRulesBuilder_ == null) {
          ensureUploadRulesIsMutable();
          uploadRules_.add(index, builderForValue.build());
          onChanged();
        } else {
          uploadRulesBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * When triggered, exits both this scenario and the parent scenario, stops the
       * tracing session, and attempts to upload the trace. All scenarios are
       * observed again.
       * </pre>
       *
       * <code>repeated .perfetto.protos.TriggerRule upload_rules = 4;</code>
       */
      public Builder addAllUploadRules(
          java.lang.Iterable<? extends perfetto.protos.ScenarioConfigOuterClass.TriggerRule> values) {
        if (uploadRulesBuilder_ == null) {
          ensureUploadRulesIsMutable();
          com.google.protobuf.AbstractMessageLite.Builder.addAll(
              values, uploadRules_);
          onChanged();
        } else {
          uploadRulesBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <pre>
       * When triggered, exits both this scenario and the parent scenario, stops the
       * tracing session, and attempts to upload the trace. All scenarios are
       * observed again.
       * </pre>
       *
       * <code>repeated .perfetto.protos.TriggerRule upload_rules = 4;</code>
       */
      public Builder clearUploadRules() {
        if (uploadRulesBuilder_ == null) {
          uploadRules_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000008);
          onChanged();
        } else {
          uploadRulesBuilder_.clear();
        }
        return this;
      }
      /**
       * <pre>
       * When triggered, exits both this scenario and the parent scenario, stops the
       * tracing session, and attempts to upload the trace. All scenarios are
       * observed again.
       * </pre>
       *
       * <code>repeated .perfetto.protos.TriggerRule upload_rules = 4;</code>
       */
      public Builder removeUploadRules(int index) {
        if (uploadRulesBuilder_ == null) {
          ensureUploadRulesIsMutable();
          uploadRules_.remove(index);
          onChanged();
        } else {
          uploadRulesBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <pre>
       * When triggered, exits both this scenario and the parent scenario, stops the
       * tracing session, and attempts to upload the trace. All scenarios are
       * observed again.
       * </pre>
       *
       * <code>repeated .perfetto.protos.TriggerRule upload_rules = 4;</code>
       */
      public perfetto.protos.ScenarioConfigOuterClass.TriggerRule.Builder getUploadRulesBuilder(
          int index) {
        return getUploadRulesFieldBuilder().getBuilder(index);
      }
      /**
       * <pre>
       * When triggered, exits both this scenario and the parent scenario, stops the
       * tracing session, and attempts to upload the trace. All scenarios are
       * observed again.
       * </pre>
       *
       * <code>repeated .perfetto.protos.TriggerRule upload_rules = 4;</code>
       */
      public perfetto.protos.ScenarioConfigOuterClass.TriggerRuleOrBuilder getUploadRulesOrBuilder(
          int index) {
        if (uploadRulesBuilder_ == null) {
          return uploadRules_.get(index);  } else {
          return uploadRulesBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <pre>
       * When triggered, exits both this scenario and the parent scenario, stops the
       * tracing session, and attempts to upload the trace. All scenarios are
       * observed again.
       * </pre>
       *
       * <code>repeated .perfetto.protos.TriggerRule upload_rules = 4;</code>
       */
      public java.util.List<? extends perfetto.protos.ScenarioConfigOuterClass.TriggerRuleOrBuilder> 
           getUploadRulesOrBuilderList() {
        if (uploadRulesBuilder_ != null) {
          return uploadRulesBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(uploadRules_);
        }
      }
      /**
       * <pre>
       * When triggered, exits both this scenario and the parent scenario, stops the
       * tracing session, and attempts to upload the trace. All scenarios are
       * observed again.
       * </pre>
       *
       * <code>repeated .perfetto.protos.TriggerRule upload_rules = 4;</code>
       */
      public perfetto.protos.ScenarioConfigOuterClass.TriggerRule.Builder addUploadRulesBuilder() {
        return getUploadRulesFieldBuilder().addBuilder(
            perfetto.protos.ScenarioConfigOuterClass.TriggerRule.getDefaultInstance());
      }
      /**
       * <pre>
       * When triggered, exits both this scenario and the parent scenario, stops the
       * tracing session, and attempts to upload the trace. All scenarios are
       * observed again.
       * </pre>
       *
       * <code>repeated .perfetto.protos.TriggerRule upload_rules = 4;</code>
       */
      public perfetto.protos.ScenarioConfigOuterClass.TriggerRule.Builder addUploadRulesBuilder(
          int index) {
        return getUploadRulesFieldBuilder().addBuilder(
            index, perfetto.protos.ScenarioConfigOuterClass.TriggerRule.getDefaultInstance());
      }
      /**
       * <pre>
       * When triggered, exits both this scenario and the parent scenario, stops the
       * tracing session, and attempts to upload the trace. All scenarios are
       * observed again.
       * </pre>
       *
       * <code>repeated .perfetto.protos.TriggerRule upload_rules = 4;</code>
       */
      public java.util.List<perfetto.protos.ScenarioConfigOuterClass.TriggerRule.Builder> 
           getUploadRulesBuilderList() {
        return getUploadRulesFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilder<
          perfetto.protos.ScenarioConfigOuterClass.TriggerRule, perfetto.protos.ScenarioConfigOuterClass.TriggerRule.Builder, perfetto.protos.ScenarioConfigOuterClass.TriggerRuleOrBuilder> 
          getUploadRulesFieldBuilder() {
        if (uploadRulesBuilder_ == null) {
          uploadRulesBuilder_ = new com.google.protobuf.RepeatedFieldBuilder<
              perfetto.protos.ScenarioConfigOuterClass.TriggerRule, perfetto.protos.ScenarioConfigOuterClass.TriggerRule.Builder, perfetto.protos.ScenarioConfigOuterClass.TriggerRuleOrBuilder>(
                  uploadRules_,
                  ((bitField0_ & 0x00000008) != 0),
                  getParentForChildren(),
                  isClean());
          uploadRules_ = null;
        }
        return uploadRulesBuilder_;
      }

      // @@protoc_insertion_point(builder_scope:perfetto.protos.NestedScenarioConfig)
    }

    // @@protoc_insertion_point(class_scope:perfetto.protos.NestedScenarioConfig)
    private static final perfetto.protos.ScenarioConfigOuterClass.NestedScenarioConfig DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new perfetto.protos.ScenarioConfigOuterClass.NestedScenarioConfig();
    }

    public static perfetto.protos.ScenarioConfigOuterClass.NestedScenarioConfig getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<NestedScenarioConfig>
        PARSER = new com.google.protobuf.AbstractParser<NestedScenarioConfig>() {
      @java.lang.Override
      public NestedScenarioConfig parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        Builder builder = newBuilder();
        try {
          builder.mergeFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.setUnfinishedMessage(builder.buildPartial());
        } catch (com.google.protobuf.UninitializedMessageException e) {
          throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
        } catch (java.io.IOException e) {
          throw new com.google.protobuf.InvalidProtocolBufferException(e)
              .setUnfinishedMessage(builder.buildPartial());
        }
        return builder.buildPartial();
      }
    };

    public static com.google.protobuf.Parser<NestedScenarioConfig> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<NestedScenarioConfig> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public perfetto.protos.ScenarioConfigOuterClass.NestedScenarioConfig getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface ScenarioConfigOrBuilder extends
      // @@protoc_insertion_point(interface_extends:perfetto.protos.ScenarioConfig)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <pre>
     * Scenario name, unique within the whole field tracing config.
     * </pre>
     *
     * <code>optional string scenario_name = 1;</code>
     * @return Whether the scenarioName field is set.
     */
    boolean hasScenarioName();
    /**
     * <pre>
     * Scenario name, unique within the whole field tracing config.
     * </pre>
     *
     * <code>optional string scenario_name = 1;</code>
     * @return The scenarioName.
     */
    java.lang.String getScenarioName();
    /**
     * <pre>
     * Scenario name, unique within the whole field tracing config.
     * </pre>
     *
     * <code>optional string scenario_name = 1;</code>
     * @return The bytes for scenarioName.
     */
    com.google.protobuf.ByteString
        getScenarioNameBytes();

    /**
     * <pre>
     * When triggered, this scenario becomes active. Initializes a tracing session
     * and starts recording data sources. This activates `upload_rules` and
     * `stop_rules`.
     * </pre>
     *
     * <code>repeated .perfetto.protos.TriggerRule start_rules = 2;</code>
     */
    java.util.List<perfetto.protos.ScenarioConfigOuterClass.TriggerRule> 
        getStartRulesList();
    /**
     * <pre>
     * When triggered, this scenario becomes active. Initializes a tracing session
     * and starts recording data sources. This activates `upload_rules` and
     * `stop_rules`.
     * </pre>
     *
     * <code>repeated .perfetto.protos.TriggerRule start_rules = 2;</code>
     */
    perfetto.protos.ScenarioConfigOuterClass.TriggerRule getStartRules(int index);
    /**
     * <pre>
     * When triggered, this scenario becomes active. Initializes a tracing session
     * and starts recording data sources. This activates `upload_rules` and
     * `stop_rules`.
     * </pre>
     *
     * <code>repeated .perfetto.protos.TriggerRule start_rules = 2;</code>
     */
    int getStartRulesCount();
    /**
     * <pre>
     * When triggered, this scenario becomes active. Initializes a tracing session
     * and starts recording data sources. This activates `upload_rules` and
     * `stop_rules`.
     * </pre>
     *
     * <code>repeated .perfetto.protos.TriggerRule start_rules = 2;</code>
     */
    java.util.List<? extends perfetto.protos.ScenarioConfigOuterClass.TriggerRuleOrBuilder> 
        getStartRulesOrBuilderList();
    /**
     * <pre>
     * When triggered, this scenario becomes active. Initializes a tracing session
     * and starts recording data sources. This activates `upload_rules` and
     * `stop_rules`.
     * </pre>
     *
     * <code>repeated .perfetto.protos.TriggerRule start_rules = 2;</code>
     */
    perfetto.protos.ScenarioConfigOuterClass.TriggerRuleOrBuilder getStartRulesOrBuilder(
        int index);

    /**
     * <pre>
     * When triggered, exits the scenario. This stops the tracing session and
     * discards the trace. All scenarios will be observed again.
     * </pre>
     *
     * <code>repeated .perfetto.protos.TriggerRule stop_rules = 3;</code>
     */
    java.util.List<perfetto.protos.ScenarioConfigOuterClass.TriggerRule> 
        getStopRulesList();
    /**
     * <pre>
     * When triggered, exits the scenario. This stops the tracing session and
     * discards the trace. All scenarios will be observed again.
     * </pre>
     *
     * <code>repeated .perfetto.protos.TriggerRule stop_rules = 3;</code>
     */
    perfetto.protos.ScenarioConfigOuterClass.TriggerRule getStopRules(int index);
    /**
     * <pre>
     * When triggered, exits the scenario. This stops the tracing session and
     * discards the trace. All scenarios will be observed again.
     * </pre>
     *
     * <code>repeated .perfetto.protos.TriggerRule stop_rules = 3;</code>
     */
    int getStopRulesCount();
    /**
     * <pre>
     * When triggered, exits the scenario. This stops the tracing session and
     * discards the trace. All scenarios will be observed again.
     * </pre>
     *
     * <code>repeated .perfetto.protos.TriggerRule stop_rules = 3;</code>
     */
    java.util.List<? extends perfetto.protos.ScenarioConfigOuterClass.TriggerRuleOrBuilder> 
        getStopRulesOrBuilderList();
    /**
     * <pre>
     * When triggered, exits the scenario. This stops the tracing session and
     * discards the trace. All scenarios will be observed again.
     * </pre>
     *
     * <code>repeated .perfetto.protos.TriggerRule stop_rules = 3;</code>
     */
    perfetto.protos.ScenarioConfigOuterClass.TriggerRuleOrBuilder getStopRulesOrBuilder(
        int index);

    /**
     * <pre>
     * When triggered, exits the scenario, stops the tracing session, and attempts
     * to upload the trace. All scenarios will be observed again.
     * </pre>
     *
     * <code>repeated .perfetto.protos.TriggerRule upload_rules = 4;</code>
     */
    java.util.List<perfetto.protos.ScenarioConfigOuterClass.TriggerRule> 
        getUploadRulesList();
    /**
     * <pre>
     * When triggered, exits the scenario, stops the tracing session, and attempts
     * to upload the trace. All scenarios will be observed again.
     * </pre>
     *
     * <code>repeated .perfetto.protos.TriggerRule upload_rules = 4;</code>
     */
    perfetto.protos.ScenarioConfigOuterClass.TriggerRule getUploadRules(int index);
    /**
     * <pre>
     * When triggered, exits the scenario, stops the tracing session, and attempts
     * to upload the trace. All scenarios will be observed again.
     * </pre>
     *
     * <code>repeated .perfetto.protos.TriggerRule upload_rules = 4;</code>
     */
    int getUploadRulesCount();
    /**
     * <pre>
     * When triggered, exits the scenario, stops the tracing session, and attempts
     * to upload the trace. All scenarios will be observed again.
     * </pre>
     *
     * <code>repeated .perfetto.protos.TriggerRule upload_rules = 4;</code>
     */
    java.util.List<? extends perfetto.protos.ScenarioConfigOuterClass.TriggerRuleOrBuilder> 
        getUploadRulesOrBuilderList();
    /**
     * <pre>
     * When triggered, exits the scenario, stops the tracing session, and attempts
     * to upload the trace. All scenarios will be observed again.
     * </pre>
     *
     * <code>repeated .perfetto.protos.TriggerRule upload_rules = 4;</code>
     */
    perfetto.protos.ScenarioConfigOuterClass.TriggerRuleOrBuilder getUploadRulesOrBuilder(
        int index);

    /**
     * <pre>
     * When triggered, this scenario becomes active. Initializes a tracing
     * session, without recording data sources, and waits for a `start_rules` or
     * to enter a `nested_scenarios`, which would start recording. This also
     * activates `stop_rules`.
     * </pre>
     *
     * <code>repeated .perfetto.protos.TriggerRule setup_rules = 5;</code>
     */
    java.util.List<perfetto.protos.ScenarioConfigOuterClass.TriggerRule> 
        getSetupRulesList();
    /**
     * <pre>
     * When triggered, this scenario becomes active. Initializes a tracing
     * session, without recording data sources, and waits for a `start_rules` or
     * to enter a `nested_scenarios`, which would start recording. This also
     * activates `stop_rules`.
     * </pre>
     *
     * <code>repeated .perfetto.protos.TriggerRule setup_rules = 5;</code>
     */
    perfetto.protos.ScenarioConfigOuterClass.TriggerRule getSetupRules(int index);
    /**
     * <pre>
     * When triggered, this scenario becomes active. Initializes a tracing
     * session, without recording data sources, and waits for a `start_rules` or
     * to enter a `nested_scenarios`, which would start recording. This also
     * activates `stop_rules`.
     * </pre>
     *
     * <code>repeated .perfetto.protos.TriggerRule setup_rules = 5;</code>
     */
    int getSetupRulesCount();
    /**
     * <pre>
     * When triggered, this scenario becomes active. Initializes a tracing
     * session, without recording data sources, and waits for a `start_rules` or
     * to enter a `nested_scenarios`, which would start recording. This also
     * activates `stop_rules`.
     * </pre>
     *
     * <code>repeated .perfetto.protos.TriggerRule setup_rules = 5;</code>
     */
    java.util.List<? extends perfetto.protos.ScenarioConfigOuterClass.TriggerRuleOrBuilder> 
        getSetupRulesOrBuilderList();
    /**
     * <pre>
     * When triggered, this scenario becomes active. Initializes a tracing
     * session, without recording data sources, and waits for a `start_rules` or
     * to enter a `nested_scenarios`, which would start recording. This also
     * activates `stop_rules`.
     * </pre>
     *
     * <code>repeated .perfetto.protos.TriggerRule setup_rules = 5;</code>
     */
    perfetto.protos.ScenarioConfigOuterClass.TriggerRuleOrBuilder getSetupRulesOrBuilder(
        int index);

    /**
     * <code>optional .perfetto.protos.TraceConfig trace_config = 6;</code>
     * @return Whether the traceConfig field is set.
     */
    boolean hasTraceConfig();
    /**
     * <code>optional .perfetto.protos.TraceConfig trace_config = 6;</code>
     * @return The traceConfig.
     */
    perfetto.protos.TraceConfigOuterClass.TraceConfig getTraceConfig();
    /**
     * <code>optional .perfetto.protos.TraceConfig trace_config = 6;</code>
     */
    perfetto.protos.TraceConfigOuterClass.TraceConfigOrBuilder getTraceConfigOrBuilder();

    /**
     * <code>repeated .perfetto.protos.NestedScenarioConfig nested_scenarios = 7;</code>
     */
    java.util.List<perfetto.protos.ScenarioConfigOuterClass.NestedScenarioConfig> 
        getNestedScenariosList();
    /**
     * <code>repeated .perfetto.protos.NestedScenarioConfig nested_scenarios = 7;</code>
     */
    perfetto.protos.ScenarioConfigOuterClass.NestedScenarioConfig getNestedScenarios(int index);
    /**
     * <code>repeated .perfetto.protos.NestedScenarioConfig nested_scenarios = 7;</code>
     */
    int getNestedScenariosCount();
    /**
     * <code>repeated .perfetto.protos.NestedScenarioConfig nested_scenarios = 7;</code>
     */
    java.util.List<? extends perfetto.protos.ScenarioConfigOuterClass.NestedScenarioConfigOrBuilder> 
        getNestedScenariosOrBuilderList();
    /**
     * <code>repeated .perfetto.protos.NestedScenarioConfig nested_scenarios = 7;</code>
     */
    perfetto.protos.ScenarioConfigOuterClass.NestedScenarioConfigOrBuilder getNestedScenariosOrBuilder(
        int index);
  }
  /**
   * Protobuf type {@code perfetto.protos.ScenarioConfig}
   */
  public static final class ScenarioConfig extends
      com.google.protobuf.GeneratedMessage implements
      // @@protoc_insertion_point(message_implements:perfetto.protos.ScenarioConfig)
      ScenarioConfigOrBuilder {
  private static final long serialVersionUID = 0L;
    static {
      com.google.protobuf.RuntimeVersion.validateProtobufGencodeVersion(
        com.google.protobuf.RuntimeVersion.RuntimeDomain.PUBLIC,
        /* major= */ 4,
        /* minor= */ 29,
        /* patch= */ 3,
        /* suffix= */ "",
        ScenarioConfig.class.getName());
    }
    // Use ScenarioConfig.newBuilder() to construct.
    private ScenarioConfig(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
    }
    private ScenarioConfig() {
      scenarioName_ = "";
      startRules_ = java.util.Collections.emptyList();
      stopRules_ = java.util.Collections.emptyList();
      uploadRules_ = java.util.Collections.emptyList();
      setupRules_ = java.util.Collections.emptyList();
      nestedScenarios_ = java.util.Collections.emptyList();
    }

    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return perfetto.protos.ScenarioConfigOuterClass.internal_static_perfetto_protos_ScenarioConfig_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return perfetto.protos.ScenarioConfigOuterClass.internal_static_perfetto_protos_ScenarioConfig_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              perfetto.protos.ScenarioConfigOuterClass.ScenarioConfig.class, perfetto.protos.ScenarioConfigOuterClass.ScenarioConfig.Builder.class);
    }

    private int bitField0_;
    public static final int SCENARIO_NAME_FIELD_NUMBER = 1;
    @SuppressWarnings("serial")
    private volatile java.lang.Object scenarioName_ = "";
    /**
     * <pre>
     * Scenario name, unique within the whole field tracing config.
     * </pre>
     *
     * <code>optional string scenario_name = 1;</code>
     * @return Whether the scenarioName field is set.
     */
    @java.lang.Override
    public boolean hasScenarioName() {
      return ((bitField0_ & 0x00000001) != 0);
    }
    /**
     * <pre>
     * Scenario name, unique within the whole field tracing config.
     * </pre>
     *
     * <code>optional string scenario_name = 1;</code>
     * @return The scenarioName.
     */
    @java.lang.Override
    public java.lang.String getScenarioName() {
      java.lang.Object ref = scenarioName_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        if (bs.isValidUtf8()) {
          scenarioName_ = s;
        }
        return s;
      }
    }
    /**
     * <pre>
     * Scenario name, unique within the whole field tracing config.
     * </pre>
     *
     * <code>optional string scenario_name = 1;</code>
     * @return The bytes for scenarioName.
     */
    @java.lang.Override
    public com.google.protobuf.ByteString
        getScenarioNameBytes() {
      java.lang.Object ref = scenarioName_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        scenarioName_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    public static final int START_RULES_FIELD_NUMBER = 2;
    @SuppressWarnings("serial")
    private java.util.List<perfetto.protos.ScenarioConfigOuterClass.TriggerRule> startRules_;
    /**
     * <pre>
     * When triggered, this scenario becomes active. Initializes a tracing session
     * and starts recording data sources. This activates `upload_rules` and
     * `stop_rules`.
     * </pre>
     *
     * <code>repeated .perfetto.protos.TriggerRule start_rules = 2;</code>
     */
    @java.lang.Override
    public java.util.List<perfetto.protos.ScenarioConfigOuterClass.TriggerRule> getStartRulesList() {
      return startRules_;
    }
    /**
     * <pre>
     * When triggered, this scenario becomes active. Initializes a tracing session
     * and starts recording data sources. This activates `upload_rules` and
     * `stop_rules`.
     * </pre>
     *
     * <code>repeated .perfetto.protos.TriggerRule start_rules = 2;</code>
     */
    @java.lang.Override
    public java.util.List<? extends perfetto.protos.ScenarioConfigOuterClass.TriggerRuleOrBuilder> 
        getStartRulesOrBuilderList() {
      return startRules_;
    }
    /**
     * <pre>
     * When triggered, this scenario becomes active. Initializes a tracing session
     * and starts recording data sources. This activates `upload_rules` and
     * `stop_rules`.
     * </pre>
     *
     * <code>repeated .perfetto.protos.TriggerRule start_rules = 2;</code>
     */
    @java.lang.Override
    public int getStartRulesCount() {
      return startRules_.size();
    }
    /**
     * <pre>
     * When triggered, this scenario becomes active. Initializes a tracing session
     * and starts recording data sources. This activates `upload_rules` and
     * `stop_rules`.
     * </pre>
     *
     * <code>repeated .perfetto.protos.TriggerRule start_rules = 2;</code>
     */
    @java.lang.Override
    public perfetto.protos.ScenarioConfigOuterClass.TriggerRule getStartRules(int index) {
      return startRules_.get(index);
    }
    /**
     * <pre>
     * When triggered, this scenario becomes active. Initializes a tracing session
     * and starts recording data sources. This activates `upload_rules` and
     * `stop_rules`.
     * </pre>
     *
     * <code>repeated .perfetto.protos.TriggerRule start_rules = 2;</code>
     */
    @java.lang.Override
    public perfetto.protos.ScenarioConfigOuterClass.TriggerRuleOrBuilder getStartRulesOrBuilder(
        int index) {
      return startRules_.get(index);
    }

    public static final int STOP_RULES_FIELD_NUMBER = 3;
    @SuppressWarnings("serial")
    private java.util.List<perfetto.protos.ScenarioConfigOuterClass.TriggerRule> stopRules_;
    /**
     * <pre>
     * When triggered, exits the scenario. This stops the tracing session and
     * discards the trace. All scenarios will be observed again.
     * </pre>
     *
     * <code>repeated .perfetto.protos.TriggerRule stop_rules = 3;</code>
     */
    @java.lang.Override
    public java.util.List<perfetto.protos.ScenarioConfigOuterClass.TriggerRule> getStopRulesList() {
      return stopRules_;
    }
    /**
     * <pre>
     * When triggered, exits the scenario. This stops the tracing session and
     * discards the trace. All scenarios will be observed again.
     * </pre>
     *
     * <code>repeated .perfetto.protos.TriggerRule stop_rules = 3;</code>
     */
    @java.lang.Override
    public java.util.List<? extends perfetto.protos.ScenarioConfigOuterClass.TriggerRuleOrBuilder> 
        getStopRulesOrBuilderList() {
      return stopRules_;
    }
    /**
     * <pre>
     * When triggered, exits the scenario. This stops the tracing session and
     * discards the trace. All scenarios will be observed again.
     * </pre>
     *
     * <code>repeated .perfetto.protos.TriggerRule stop_rules = 3;</code>
     */
    @java.lang.Override
    public int getStopRulesCount() {
      return stopRules_.size();
    }
    /**
     * <pre>
     * When triggered, exits the scenario. This stops the tracing session and
     * discards the trace. All scenarios will be observed again.
     * </pre>
     *
     * <code>repeated .perfetto.protos.TriggerRule stop_rules = 3;</code>
     */
    @java.lang.Override
    public perfetto.protos.ScenarioConfigOuterClass.TriggerRule getStopRules(int index) {
      return stopRules_.get(index);
    }
    /**
     * <pre>
     * When triggered, exits the scenario. This stops the tracing session and
     * discards the trace. All scenarios will be observed again.
     * </pre>
     *
     * <code>repeated .perfetto.protos.TriggerRule stop_rules = 3;</code>
     */
    @java.lang.Override
    public perfetto.protos.ScenarioConfigOuterClass.TriggerRuleOrBuilder getStopRulesOrBuilder(
        int index) {
      return stopRules_.get(index);
    }

    public static final int UPLOAD_RULES_FIELD_NUMBER = 4;
    @SuppressWarnings("serial")
    private java.util.List<perfetto.protos.ScenarioConfigOuterClass.TriggerRule> uploadRules_;
    /**
     * <pre>
     * When triggered, exits the scenario, stops the tracing session, and attempts
     * to upload the trace. All scenarios will be observed again.
     * </pre>
     *
     * <code>repeated .perfetto.protos.TriggerRule upload_rules = 4;</code>
     */
    @java.lang.Override
    public java.util.List<perfetto.protos.ScenarioConfigOuterClass.TriggerRule> getUploadRulesList() {
      return uploadRules_;
    }
    /**
     * <pre>
     * When triggered, exits the scenario, stops the tracing session, and attempts
     * to upload the trace. All scenarios will be observed again.
     * </pre>
     *
     * <code>repeated .perfetto.protos.TriggerRule upload_rules = 4;</code>
     */
    @java.lang.Override
    public java.util.List<? extends perfetto.protos.ScenarioConfigOuterClass.TriggerRuleOrBuilder> 
        getUploadRulesOrBuilderList() {
      return uploadRules_;
    }
    /**
     * <pre>
     * When triggered, exits the scenario, stops the tracing session, and attempts
     * to upload the trace. All scenarios will be observed again.
     * </pre>
     *
     * <code>repeated .perfetto.protos.TriggerRule upload_rules = 4;</code>
     */
    @java.lang.Override
    public int getUploadRulesCount() {
      return uploadRules_.size();
    }
    /**
     * <pre>
     * When triggered, exits the scenario, stops the tracing session, and attempts
     * to upload the trace. All scenarios will be observed again.
     * </pre>
     *
     * <code>repeated .perfetto.protos.TriggerRule upload_rules = 4;</code>
     */
    @java.lang.Override
    public perfetto.protos.ScenarioConfigOuterClass.TriggerRule getUploadRules(int index) {
      return uploadRules_.get(index);
    }
    /**
     * <pre>
     * When triggered, exits the scenario, stops the tracing session, and attempts
     * to upload the trace. All scenarios will be observed again.
     * </pre>
     *
     * <code>repeated .perfetto.protos.TriggerRule upload_rules = 4;</code>
     */
    @java.lang.Override
    public perfetto.protos.ScenarioConfigOuterClass.TriggerRuleOrBuilder getUploadRulesOrBuilder(
        int index) {
      return uploadRules_.get(index);
    }

    public static final int SETUP_RULES_FIELD_NUMBER = 5;
    @SuppressWarnings("serial")
    private java.util.List<perfetto.protos.ScenarioConfigOuterClass.TriggerRule> setupRules_;
    /**
     * <pre>
     * When triggered, this scenario becomes active. Initializes a tracing
     * session, without recording data sources, and waits for a `start_rules` or
     * to enter a `nested_scenarios`, which would start recording. This also
     * activates `stop_rules`.
     * </pre>
     *
     * <code>repeated .perfetto.protos.TriggerRule setup_rules = 5;</code>
     */
    @java.lang.Override
    public java.util.List<perfetto.protos.ScenarioConfigOuterClass.TriggerRule> getSetupRulesList() {
      return setupRules_;
    }
    /**
     * <pre>
     * When triggered, this scenario becomes active. Initializes a tracing
     * session, without recording data sources, and waits for a `start_rules` or
     * to enter a `nested_scenarios`, which would start recording. This also
     * activates `stop_rules`.
     * </pre>
     *
     * <code>repeated .perfetto.protos.TriggerRule setup_rules = 5;</code>
     */
    @java.lang.Override
    public java.util.List<? extends perfetto.protos.ScenarioConfigOuterClass.TriggerRuleOrBuilder> 
        getSetupRulesOrBuilderList() {
      return setupRules_;
    }
    /**
     * <pre>
     * When triggered, this scenario becomes active. Initializes a tracing
     * session, without recording data sources, and waits for a `start_rules` or
     * to enter a `nested_scenarios`, which would start recording. This also
     * activates `stop_rules`.
     * </pre>
     *
     * <code>repeated .perfetto.protos.TriggerRule setup_rules = 5;</code>
     */
    @java.lang.Override
    public int getSetupRulesCount() {
      return setupRules_.size();
    }
    /**
     * <pre>
     * When triggered, this scenario becomes active. Initializes a tracing
     * session, without recording data sources, and waits for a `start_rules` or
     * to enter a `nested_scenarios`, which would start recording. This also
     * activates `stop_rules`.
     * </pre>
     *
     * <code>repeated .perfetto.protos.TriggerRule setup_rules = 5;</code>
     */
    @java.lang.Override
    public perfetto.protos.ScenarioConfigOuterClass.TriggerRule getSetupRules(int index) {
      return setupRules_.get(index);
    }
    /**
     * <pre>
     * When triggered, this scenario becomes active. Initializes a tracing
     * session, without recording data sources, and waits for a `start_rules` or
     * to enter a `nested_scenarios`, which would start recording. This also
     * activates `stop_rules`.
     * </pre>
     *
     * <code>repeated .perfetto.protos.TriggerRule setup_rules = 5;</code>
     */
    @java.lang.Override
    public perfetto.protos.ScenarioConfigOuterClass.TriggerRuleOrBuilder getSetupRulesOrBuilder(
        int index) {
      return setupRules_.get(index);
    }

    public static final int TRACE_CONFIG_FIELD_NUMBER = 6;
    private perfetto.protos.TraceConfigOuterClass.TraceConfig traceConfig_;
    /**
     * <code>optional .perfetto.protos.TraceConfig trace_config = 6;</code>
     * @return Whether the traceConfig field is set.
     */
    @java.lang.Override
    public boolean hasTraceConfig() {
      return ((bitField0_ & 0x00000002) != 0);
    }
    /**
     * <code>optional .perfetto.protos.TraceConfig trace_config = 6;</code>
     * @return The traceConfig.
     */
    @java.lang.Override
    public perfetto.protos.TraceConfigOuterClass.TraceConfig getTraceConfig() {
      return traceConfig_ == null ? perfetto.protos.TraceConfigOuterClass.TraceConfig.getDefaultInstance() : traceConfig_;
    }
    /**
     * <code>optional .perfetto.protos.TraceConfig trace_config = 6;</code>
     */
    @java.lang.Override
    public perfetto.protos.TraceConfigOuterClass.TraceConfigOrBuilder getTraceConfigOrBuilder() {
      return traceConfig_ == null ? perfetto.protos.TraceConfigOuterClass.TraceConfig.getDefaultInstance() : traceConfig_;
    }

    public static final int NESTED_SCENARIOS_FIELD_NUMBER = 7;
    @SuppressWarnings("serial")
    private java.util.List<perfetto.protos.ScenarioConfigOuterClass.NestedScenarioConfig> nestedScenarios_;
    /**
     * <code>repeated .perfetto.protos.NestedScenarioConfig nested_scenarios = 7;</code>
     */
    @java.lang.Override
    public java.util.List<perfetto.protos.ScenarioConfigOuterClass.NestedScenarioConfig> getNestedScenariosList() {
      return nestedScenarios_;
    }
    /**
     * <code>repeated .perfetto.protos.NestedScenarioConfig nested_scenarios = 7;</code>
     */
    @java.lang.Override
    public java.util.List<? extends perfetto.protos.ScenarioConfigOuterClass.NestedScenarioConfigOrBuilder> 
        getNestedScenariosOrBuilderList() {
      return nestedScenarios_;
    }
    /**
     * <code>repeated .perfetto.protos.NestedScenarioConfig nested_scenarios = 7;</code>
     */
    @java.lang.Override
    public int getNestedScenariosCount() {
      return nestedScenarios_.size();
    }
    /**
     * <code>repeated .perfetto.protos.NestedScenarioConfig nested_scenarios = 7;</code>
     */
    @java.lang.Override
    public perfetto.protos.ScenarioConfigOuterClass.NestedScenarioConfig getNestedScenarios(int index) {
      return nestedScenarios_.get(index);
    }
    /**
     * <code>repeated .perfetto.protos.NestedScenarioConfig nested_scenarios = 7;</code>
     */
    @java.lang.Override
    public perfetto.protos.ScenarioConfigOuterClass.NestedScenarioConfigOrBuilder getNestedScenariosOrBuilder(
        int index) {
      return nestedScenarios_.get(index);
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (((bitField0_ & 0x00000001) != 0)) {
        com.google.protobuf.GeneratedMessage.writeString(output, 1, scenarioName_);
      }
      for (int i = 0; i < startRules_.size(); i++) {
        output.writeMessage(2, startRules_.get(i));
      }
      for (int i = 0; i < stopRules_.size(); i++) {
        output.writeMessage(3, stopRules_.get(i));
      }
      for (int i = 0; i < uploadRules_.size(); i++) {
        output.writeMessage(4, uploadRules_.get(i));
      }
      for (int i = 0; i < setupRules_.size(); i++) {
        output.writeMessage(5, setupRules_.get(i));
      }
      if (((bitField0_ & 0x00000002) != 0)) {
        output.writeMessage(6, getTraceConfig());
      }
      for (int i = 0; i < nestedScenarios_.size(); i++) {
        output.writeMessage(7, nestedScenarios_.get(i));
      }
      getUnknownFields().writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) != 0)) {
        size += com.google.protobuf.GeneratedMessage.computeStringSize(1, scenarioName_);
      }
      for (int i = 0; i < startRules_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(2, startRules_.get(i));
      }
      for (int i = 0; i < stopRules_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(3, stopRules_.get(i));
      }
      for (int i = 0; i < uploadRules_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(4, uploadRules_.get(i));
      }
      for (int i = 0; i < setupRules_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(5, setupRules_.get(i));
      }
      if (((bitField0_ & 0x00000002) != 0)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(6, getTraceConfig());
      }
      for (int i = 0; i < nestedScenarios_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(7, nestedScenarios_.get(i));
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof perfetto.protos.ScenarioConfigOuterClass.ScenarioConfig)) {
        return super.equals(obj);
      }
      perfetto.protos.ScenarioConfigOuterClass.ScenarioConfig other = (perfetto.protos.ScenarioConfigOuterClass.ScenarioConfig) obj;

      if (hasScenarioName() != other.hasScenarioName()) return false;
      if (hasScenarioName()) {
        if (!getScenarioName()
            .equals(other.getScenarioName())) return false;
      }
      if (!getStartRulesList()
          .equals(other.getStartRulesList())) return false;
      if (!getStopRulesList()
          .equals(other.getStopRulesList())) return false;
      if (!getUploadRulesList()
          .equals(other.getUploadRulesList())) return false;
      if (!getSetupRulesList()
          .equals(other.getSetupRulesList())) return false;
      if (hasTraceConfig() != other.hasTraceConfig()) return false;
      if (hasTraceConfig()) {
        if (!getTraceConfig()
            .equals(other.getTraceConfig())) return false;
      }
      if (!getNestedScenariosList()
          .equals(other.getNestedScenariosList())) return false;
      if (!getUnknownFields().equals(other.getUnknownFields())) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      if (hasScenarioName()) {
        hash = (37 * hash) + SCENARIO_NAME_FIELD_NUMBER;
        hash = (53 * hash) + getScenarioName().hashCode();
      }
      if (getStartRulesCount() > 0) {
        hash = (37 * hash) + START_RULES_FIELD_NUMBER;
        hash = (53 * hash) + getStartRulesList().hashCode();
      }
      if (getStopRulesCount() > 0) {
        hash = (37 * hash) + STOP_RULES_FIELD_NUMBER;
        hash = (53 * hash) + getStopRulesList().hashCode();
      }
      if (getUploadRulesCount() > 0) {
        hash = (37 * hash) + UPLOAD_RULES_FIELD_NUMBER;
        hash = (53 * hash) + getUploadRulesList().hashCode();
      }
      if (getSetupRulesCount() > 0) {
        hash = (37 * hash) + SETUP_RULES_FIELD_NUMBER;
        hash = (53 * hash) + getSetupRulesList().hashCode();
      }
      if (hasTraceConfig()) {
        hash = (37 * hash) + TRACE_CONFIG_FIELD_NUMBER;
        hash = (53 * hash) + getTraceConfig().hashCode();
      }
      if (getNestedScenariosCount() > 0) {
        hash = (37 * hash) + NESTED_SCENARIOS_FIELD_NUMBER;
        hash = (53 * hash) + getNestedScenariosList().hashCode();
      }
      hash = (29 * hash) + getUnknownFields().hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static perfetto.protos.ScenarioConfigOuterClass.ScenarioConfig parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static perfetto.protos.ScenarioConfigOuterClass.ScenarioConfig parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static perfetto.protos.ScenarioConfigOuterClass.ScenarioConfig parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static perfetto.protos.ScenarioConfigOuterClass.ScenarioConfig parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static perfetto.protos.ScenarioConfigOuterClass.ScenarioConfig parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static perfetto.protos.ScenarioConfigOuterClass.ScenarioConfig parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static perfetto.protos.ScenarioConfigOuterClass.ScenarioConfig parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input);
    }
    public static perfetto.protos.ScenarioConfigOuterClass.ScenarioConfig parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    public static perfetto.protos.ScenarioConfigOuterClass.ScenarioConfig parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessage
          .parseDelimitedWithIOException(PARSER, input);
    }

    public static perfetto.protos.ScenarioConfigOuterClass.ScenarioConfig parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessage
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static perfetto.protos.ScenarioConfigOuterClass.ScenarioConfig parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input);
    }
    public static perfetto.protos.ScenarioConfigOuterClass.ScenarioConfig parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(perfetto.protos.ScenarioConfigOuterClass.ScenarioConfig prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code perfetto.protos.ScenarioConfig}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:perfetto.protos.ScenarioConfig)
        perfetto.protos.ScenarioConfigOuterClass.ScenarioConfigOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return perfetto.protos.ScenarioConfigOuterClass.internal_static_perfetto_protos_ScenarioConfig_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return perfetto.protos.ScenarioConfigOuterClass.internal_static_perfetto_protos_ScenarioConfig_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                perfetto.protos.ScenarioConfigOuterClass.ScenarioConfig.class, perfetto.protos.ScenarioConfigOuterClass.ScenarioConfig.Builder.class);
      }

      // Construct using perfetto.protos.ScenarioConfigOuterClass.ScenarioConfig.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage
                .alwaysUseFieldBuilders) {
          getStartRulesFieldBuilder();
          getStopRulesFieldBuilder();
          getUploadRulesFieldBuilder();
          getSetupRulesFieldBuilder();
          getTraceConfigFieldBuilder();
          getNestedScenariosFieldBuilder();
        }
      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        bitField0_ = 0;
        scenarioName_ = "";
        if (startRulesBuilder_ == null) {
          startRules_ = java.util.Collections.emptyList();
        } else {
          startRules_ = null;
          startRulesBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000002);
        if (stopRulesBuilder_ == null) {
          stopRules_ = java.util.Collections.emptyList();
        } else {
          stopRules_ = null;
          stopRulesBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000004);
        if (uploadRulesBuilder_ == null) {
          uploadRules_ = java.util.Collections.emptyList();
        } else {
          uploadRules_ = null;
          uploadRulesBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000008);
        if (setupRulesBuilder_ == null) {
          setupRules_ = java.util.Collections.emptyList();
        } else {
          setupRules_ = null;
          setupRulesBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000010);
        traceConfig_ = null;
        if (traceConfigBuilder_ != null) {
          traceConfigBuilder_.dispose();
          traceConfigBuilder_ = null;
        }
        if (nestedScenariosBuilder_ == null) {
          nestedScenarios_ = java.util.Collections.emptyList();
        } else {
          nestedScenarios_ = null;
          nestedScenariosBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000040);
        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return perfetto.protos.ScenarioConfigOuterClass.internal_static_perfetto_protos_ScenarioConfig_descriptor;
      }

      @java.lang.Override
      public perfetto.protos.ScenarioConfigOuterClass.ScenarioConfig getDefaultInstanceForType() {
        return perfetto.protos.ScenarioConfigOuterClass.ScenarioConfig.getDefaultInstance();
      }

      @java.lang.Override
      public perfetto.protos.ScenarioConfigOuterClass.ScenarioConfig build() {
        perfetto.protos.ScenarioConfigOuterClass.ScenarioConfig result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public perfetto.protos.ScenarioConfigOuterClass.ScenarioConfig buildPartial() {
        perfetto.protos.ScenarioConfigOuterClass.ScenarioConfig result = new perfetto.protos.ScenarioConfigOuterClass.ScenarioConfig(this);
        buildPartialRepeatedFields(result);
        if (bitField0_ != 0) { buildPartial0(result); }
        onBuilt();
        return result;
      }

      private void buildPartialRepeatedFields(perfetto.protos.ScenarioConfigOuterClass.ScenarioConfig result) {
        if (startRulesBuilder_ == null) {
          if (((bitField0_ & 0x00000002) != 0)) {
            startRules_ = java.util.Collections.unmodifiableList(startRules_);
            bitField0_ = (bitField0_ & ~0x00000002);
          }
          result.startRules_ = startRules_;
        } else {
          result.startRules_ = startRulesBuilder_.build();
        }
        if (stopRulesBuilder_ == null) {
          if (((bitField0_ & 0x00000004) != 0)) {
            stopRules_ = java.util.Collections.unmodifiableList(stopRules_);
            bitField0_ = (bitField0_ & ~0x00000004);
          }
          result.stopRules_ = stopRules_;
        } else {
          result.stopRules_ = stopRulesBuilder_.build();
        }
        if (uploadRulesBuilder_ == null) {
          if (((bitField0_ & 0x00000008) != 0)) {
            uploadRules_ = java.util.Collections.unmodifiableList(uploadRules_);
            bitField0_ = (bitField0_ & ~0x00000008);
          }
          result.uploadRules_ = uploadRules_;
        } else {
          result.uploadRules_ = uploadRulesBuilder_.build();
        }
        if (setupRulesBuilder_ == null) {
          if (((bitField0_ & 0x00000010) != 0)) {
            setupRules_ = java.util.Collections.unmodifiableList(setupRules_);
            bitField0_ = (bitField0_ & ~0x00000010);
          }
          result.setupRules_ = setupRules_;
        } else {
          result.setupRules_ = setupRulesBuilder_.build();
        }
        if (nestedScenariosBuilder_ == null) {
          if (((bitField0_ & 0x00000040) != 0)) {
            nestedScenarios_ = java.util.Collections.unmodifiableList(nestedScenarios_);
            bitField0_ = (bitField0_ & ~0x00000040);
          }
          result.nestedScenarios_ = nestedScenarios_;
        } else {
          result.nestedScenarios_ = nestedScenariosBuilder_.build();
        }
      }

      private void buildPartial0(perfetto.protos.ScenarioConfigOuterClass.ScenarioConfig result) {
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) != 0)) {
          result.scenarioName_ = scenarioName_;
          to_bitField0_ |= 0x00000001;
        }
        if (((from_bitField0_ & 0x00000020) != 0)) {
          result.traceConfig_ = traceConfigBuilder_ == null
              ? traceConfig_
              : traceConfigBuilder_.build();
          to_bitField0_ |= 0x00000002;
        }
        result.bitField0_ |= to_bitField0_;
      }

      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof perfetto.protos.ScenarioConfigOuterClass.ScenarioConfig) {
          return mergeFrom((perfetto.protos.ScenarioConfigOuterClass.ScenarioConfig)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(perfetto.protos.ScenarioConfigOuterClass.ScenarioConfig other) {
        if (other == perfetto.protos.ScenarioConfigOuterClass.ScenarioConfig.getDefaultInstance()) return this;
        if (other.hasScenarioName()) {
          scenarioName_ = other.scenarioName_;
          bitField0_ |= 0x00000001;
          onChanged();
        }
        if (startRulesBuilder_ == null) {
          if (!other.startRules_.isEmpty()) {
            if (startRules_.isEmpty()) {
              startRules_ = other.startRules_;
              bitField0_ = (bitField0_ & ~0x00000002);
            } else {
              ensureStartRulesIsMutable();
              startRules_.addAll(other.startRules_);
            }
            onChanged();
          }
        } else {
          if (!other.startRules_.isEmpty()) {
            if (startRulesBuilder_.isEmpty()) {
              startRulesBuilder_.dispose();
              startRulesBuilder_ = null;
              startRules_ = other.startRules_;
              bitField0_ = (bitField0_ & ~0x00000002);
              startRulesBuilder_ = 
                com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders ?
                   getStartRulesFieldBuilder() : null;
            } else {
              startRulesBuilder_.addAllMessages(other.startRules_);
            }
          }
        }
        if (stopRulesBuilder_ == null) {
          if (!other.stopRules_.isEmpty()) {
            if (stopRules_.isEmpty()) {
              stopRules_ = other.stopRules_;
              bitField0_ = (bitField0_ & ~0x00000004);
            } else {
              ensureStopRulesIsMutable();
              stopRules_.addAll(other.stopRules_);
            }
            onChanged();
          }
        } else {
          if (!other.stopRules_.isEmpty()) {
            if (stopRulesBuilder_.isEmpty()) {
              stopRulesBuilder_.dispose();
              stopRulesBuilder_ = null;
              stopRules_ = other.stopRules_;
              bitField0_ = (bitField0_ & ~0x00000004);
              stopRulesBuilder_ = 
                com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders ?
                   getStopRulesFieldBuilder() : null;
            } else {
              stopRulesBuilder_.addAllMessages(other.stopRules_);
            }
          }
        }
        if (uploadRulesBuilder_ == null) {
          if (!other.uploadRules_.isEmpty()) {
            if (uploadRules_.isEmpty()) {
              uploadRules_ = other.uploadRules_;
              bitField0_ = (bitField0_ & ~0x00000008);
            } else {
              ensureUploadRulesIsMutable();
              uploadRules_.addAll(other.uploadRules_);
            }
            onChanged();
          }
        } else {
          if (!other.uploadRules_.isEmpty()) {
            if (uploadRulesBuilder_.isEmpty()) {
              uploadRulesBuilder_.dispose();
              uploadRulesBuilder_ = null;
              uploadRules_ = other.uploadRules_;
              bitField0_ = (bitField0_ & ~0x00000008);
              uploadRulesBuilder_ = 
                com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders ?
                   getUploadRulesFieldBuilder() : null;
            } else {
              uploadRulesBuilder_.addAllMessages(other.uploadRules_);
            }
          }
        }
        if (setupRulesBuilder_ == null) {
          if (!other.setupRules_.isEmpty()) {
            if (setupRules_.isEmpty()) {
              setupRules_ = other.setupRules_;
              bitField0_ = (bitField0_ & ~0x00000010);
            } else {
              ensureSetupRulesIsMutable();
              setupRules_.addAll(other.setupRules_);
            }
            onChanged();
          }
        } else {
          if (!other.setupRules_.isEmpty()) {
            if (setupRulesBuilder_.isEmpty()) {
              setupRulesBuilder_.dispose();
              setupRulesBuilder_ = null;
              setupRules_ = other.setupRules_;
              bitField0_ = (bitField0_ & ~0x00000010);
              setupRulesBuilder_ = 
                com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders ?
                   getSetupRulesFieldBuilder() : null;
            } else {
              setupRulesBuilder_.addAllMessages(other.setupRules_);
            }
          }
        }
        if (other.hasTraceConfig()) {
          mergeTraceConfig(other.getTraceConfig());
        }
        if (nestedScenariosBuilder_ == null) {
          if (!other.nestedScenarios_.isEmpty()) {
            if (nestedScenarios_.isEmpty()) {
              nestedScenarios_ = other.nestedScenarios_;
              bitField0_ = (bitField0_ & ~0x00000040);
            } else {
              ensureNestedScenariosIsMutable();
              nestedScenarios_.addAll(other.nestedScenarios_);
            }
            onChanged();
          }
        } else {
          if (!other.nestedScenarios_.isEmpty()) {
            if (nestedScenariosBuilder_.isEmpty()) {
              nestedScenariosBuilder_.dispose();
              nestedScenariosBuilder_ = null;
              nestedScenarios_ = other.nestedScenarios_;
              bitField0_ = (bitField0_ & ~0x00000040);
              nestedScenariosBuilder_ = 
                com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders ?
                   getNestedScenariosFieldBuilder() : null;
            } else {
              nestedScenariosBuilder_.addAllMessages(other.nestedScenarios_);
            }
          }
        }
        this.mergeUnknownFields(other.getUnknownFields());
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        if (extensionRegistry == null) {
          throw new java.lang.NullPointerException();
        }
        try {
          boolean done = false;
          while (!done) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                done = true;
                break;
              case 10: {
                scenarioName_ = input.readBytes();
                bitField0_ |= 0x00000001;
                break;
              } // case 10
              case 18: {
                perfetto.protos.ScenarioConfigOuterClass.TriggerRule m =
                    input.readMessage(
                        perfetto.protos.ScenarioConfigOuterClass.TriggerRule.parser(),
                        extensionRegistry);
                if (startRulesBuilder_ == null) {
                  ensureStartRulesIsMutable();
                  startRules_.add(m);
                } else {
                  startRulesBuilder_.addMessage(m);
                }
                break;
              } // case 18
              case 26: {
                perfetto.protos.ScenarioConfigOuterClass.TriggerRule m =
                    input.readMessage(
                        perfetto.protos.ScenarioConfigOuterClass.TriggerRule.parser(),
                        extensionRegistry);
                if (stopRulesBuilder_ == null) {
                  ensureStopRulesIsMutable();
                  stopRules_.add(m);
                } else {
                  stopRulesBuilder_.addMessage(m);
                }
                break;
              } // case 26
              case 34: {
                perfetto.protos.ScenarioConfigOuterClass.TriggerRule m =
                    input.readMessage(
                        perfetto.protos.ScenarioConfigOuterClass.TriggerRule.parser(),
                        extensionRegistry);
                if (uploadRulesBuilder_ == null) {
                  ensureUploadRulesIsMutable();
                  uploadRules_.add(m);
                } else {
                  uploadRulesBuilder_.addMessage(m);
                }
                break;
              } // case 34
              case 42: {
                perfetto.protos.ScenarioConfigOuterClass.TriggerRule m =
                    input.readMessage(
                        perfetto.protos.ScenarioConfigOuterClass.TriggerRule.parser(),
                        extensionRegistry);
                if (setupRulesBuilder_ == null) {
                  ensureSetupRulesIsMutable();
                  setupRules_.add(m);
                } else {
                  setupRulesBuilder_.addMessage(m);
                }
                break;
              } // case 42
              case 50: {
                input.readMessage(
                    getTraceConfigFieldBuilder().getBuilder(),
                    extensionRegistry);
                bitField0_ |= 0x00000020;
                break;
              } // case 50
              case 58: {
                perfetto.protos.ScenarioConfigOuterClass.NestedScenarioConfig m =
                    input.readMessage(
                        perfetto.protos.ScenarioConfigOuterClass.NestedScenarioConfig.parser(),
                        extensionRegistry);
                if (nestedScenariosBuilder_ == null) {
                  ensureNestedScenariosIsMutable();
                  nestedScenarios_.add(m);
                } else {
                  nestedScenariosBuilder_.addMessage(m);
                }
                break;
              } // case 58
              default: {
                if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                  done = true; // was an endgroup tag
                }
                break;
              } // default:
            } // switch (tag)
          } // while (!done)
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.unwrapIOException();
        } finally {
          onChanged();
        } // finally
        return this;
      }
      private int bitField0_;

      private java.lang.Object scenarioName_ = "";
      /**
       * <pre>
       * Scenario name, unique within the whole field tracing config.
       * </pre>
       *
       * <code>optional string scenario_name = 1;</code>
       * @return Whether the scenarioName field is set.
       */
      public boolean hasScenarioName() {
        return ((bitField0_ & 0x00000001) != 0);
      }
      /**
       * <pre>
       * Scenario name, unique within the whole field tracing config.
       * </pre>
       *
       * <code>optional string scenario_name = 1;</code>
       * @return The scenarioName.
       */
      public java.lang.String getScenarioName() {
        java.lang.Object ref = scenarioName_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          if (bs.isValidUtf8()) {
            scenarioName_ = s;
          }
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <pre>
       * Scenario name, unique within the whole field tracing config.
       * </pre>
       *
       * <code>optional string scenario_name = 1;</code>
       * @return The bytes for scenarioName.
       */
      public com.google.protobuf.ByteString
          getScenarioNameBytes() {
        java.lang.Object ref = scenarioName_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          scenarioName_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <pre>
       * Scenario name, unique within the whole field tracing config.
       * </pre>
       *
       * <code>optional string scenario_name = 1;</code>
       * @param value The scenarioName to set.
       * @return This builder for chaining.
       */
      public Builder setScenarioName(
          java.lang.String value) {
        if (value == null) { throw new NullPointerException(); }
        scenarioName_ = value;
        bitField0_ |= 0x00000001;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Scenario name, unique within the whole field tracing config.
       * </pre>
       *
       * <code>optional string scenario_name = 1;</code>
       * @return This builder for chaining.
       */
      public Builder clearScenarioName() {
        scenarioName_ = getDefaultInstance().getScenarioName();
        bitField0_ = (bitField0_ & ~0x00000001);
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Scenario name, unique within the whole field tracing config.
       * </pre>
       *
       * <code>optional string scenario_name = 1;</code>
       * @param value The bytes for scenarioName to set.
       * @return This builder for chaining.
       */
      public Builder setScenarioNameBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) { throw new NullPointerException(); }
        scenarioName_ = value;
        bitField0_ |= 0x00000001;
        onChanged();
        return this;
      }

      private java.util.List<perfetto.protos.ScenarioConfigOuterClass.TriggerRule> startRules_ =
        java.util.Collections.emptyList();
      private void ensureStartRulesIsMutable() {
        if (!((bitField0_ & 0x00000002) != 0)) {
          startRules_ = new java.util.ArrayList<perfetto.protos.ScenarioConfigOuterClass.TriggerRule>(startRules_);
          bitField0_ |= 0x00000002;
         }
      }

      private com.google.protobuf.RepeatedFieldBuilder<
          perfetto.protos.ScenarioConfigOuterClass.TriggerRule, perfetto.protos.ScenarioConfigOuterClass.TriggerRule.Builder, perfetto.protos.ScenarioConfigOuterClass.TriggerRuleOrBuilder> startRulesBuilder_;

      /**
       * <pre>
       * When triggered, this scenario becomes active. Initializes a tracing session
       * and starts recording data sources. This activates `upload_rules` and
       * `stop_rules`.
       * </pre>
       *
       * <code>repeated .perfetto.protos.TriggerRule start_rules = 2;</code>
       */
      public java.util.List<perfetto.protos.ScenarioConfigOuterClass.TriggerRule> getStartRulesList() {
        if (startRulesBuilder_ == null) {
          return java.util.Collections.unmodifiableList(startRules_);
        } else {
          return startRulesBuilder_.getMessageList();
        }
      }
      /**
       * <pre>
       * When triggered, this scenario becomes active. Initializes a tracing session
       * and starts recording data sources. This activates `upload_rules` and
       * `stop_rules`.
       * </pre>
       *
       * <code>repeated .perfetto.protos.TriggerRule start_rules = 2;</code>
       */
      public int getStartRulesCount() {
        if (startRulesBuilder_ == null) {
          return startRules_.size();
        } else {
          return startRulesBuilder_.getCount();
        }
      }
      /**
       * <pre>
       * When triggered, this scenario becomes active. Initializes a tracing session
       * and starts recording data sources. This activates `upload_rules` and
       * `stop_rules`.
       * </pre>
       *
       * <code>repeated .perfetto.protos.TriggerRule start_rules = 2;</code>
       */
      public perfetto.protos.ScenarioConfigOuterClass.TriggerRule getStartRules(int index) {
        if (startRulesBuilder_ == null) {
          return startRules_.get(index);
        } else {
          return startRulesBuilder_.getMessage(index);
        }
      }
      /**
       * <pre>
       * When triggered, this scenario becomes active. Initializes a tracing session
       * and starts recording data sources. This activates `upload_rules` and
       * `stop_rules`.
       * </pre>
       *
       * <code>repeated .perfetto.protos.TriggerRule start_rules = 2;</code>
       */
      public Builder setStartRules(
          int index, perfetto.protos.ScenarioConfigOuterClass.TriggerRule value) {
        if (startRulesBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureStartRulesIsMutable();
          startRules_.set(index, value);
          onChanged();
        } else {
          startRulesBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <pre>
       * When triggered, this scenario becomes active. Initializes a tracing session
       * and starts recording data sources. This activates `upload_rules` and
       * `stop_rules`.
       * </pre>
       *
       * <code>repeated .perfetto.protos.TriggerRule start_rules = 2;</code>
       */
      public Builder setStartRules(
          int index, perfetto.protos.ScenarioConfigOuterClass.TriggerRule.Builder builderForValue) {
        if (startRulesBuilder_ == null) {
          ensureStartRulesIsMutable();
          startRules_.set(index, builderForValue.build());
          onChanged();
        } else {
          startRulesBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * When triggered, this scenario becomes active. Initializes a tracing session
       * and starts recording data sources. This activates `upload_rules` and
       * `stop_rules`.
       * </pre>
       *
       * <code>repeated .perfetto.protos.TriggerRule start_rules = 2;</code>
       */
      public Builder addStartRules(perfetto.protos.ScenarioConfigOuterClass.TriggerRule value) {
        if (startRulesBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureStartRulesIsMutable();
          startRules_.add(value);
          onChanged();
        } else {
          startRulesBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <pre>
       * When triggered, this scenario becomes active. Initializes a tracing session
       * and starts recording data sources. This activates `upload_rules` and
       * `stop_rules`.
       * </pre>
       *
       * <code>repeated .perfetto.protos.TriggerRule start_rules = 2;</code>
       */
      public Builder addStartRules(
          int index, perfetto.protos.ScenarioConfigOuterClass.TriggerRule value) {
        if (startRulesBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureStartRulesIsMutable();
          startRules_.add(index, value);
          onChanged();
        } else {
          startRulesBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <pre>
       * When triggered, this scenario becomes active. Initializes a tracing session
       * and starts recording data sources. This activates `upload_rules` and
       * `stop_rules`.
       * </pre>
       *
       * <code>repeated .perfetto.protos.TriggerRule start_rules = 2;</code>
       */
      public Builder addStartRules(
          perfetto.protos.ScenarioConfigOuterClass.TriggerRule.Builder builderForValue) {
        if (startRulesBuilder_ == null) {
          ensureStartRulesIsMutable();
          startRules_.add(builderForValue.build());
          onChanged();
        } else {
          startRulesBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * When triggered, this scenario becomes active. Initializes a tracing session
       * and starts recording data sources. This activates `upload_rules` and
       * `stop_rules`.
       * </pre>
       *
       * <code>repeated .perfetto.protos.TriggerRule start_rules = 2;</code>
       */
      public Builder addStartRules(
          int index, perfetto.protos.ScenarioConfigOuterClass.TriggerRule.Builder builderForValue) {
        if (startRulesBuilder_ == null) {
          ensureStartRulesIsMutable();
          startRules_.add(index, builderForValue.build());
          onChanged();
        } else {
          startRulesBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * When triggered, this scenario becomes active. Initializes a tracing session
       * and starts recording data sources. This activates `upload_rules` and
       * `stop_rules`.
       * </pre>
       *
       * <code>repeated .perfetto.protos.TriggerRule start_rules = 2;</code>
       */
      public Builder addAllStartRules(
          java.lang.Iterable<? extends perfetto.protos.ScenarioConfigOuterClass.TriggerRule> values) {
        if (startRulesBuilder_ == null) {
          ensureStartRulesIsMutable();
          com.google.protobuf.AbstractMessageLite.Builder.addAll(
              values, startRules_);
          onChanged();
        } else {
          startRulesBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <pre>
       * When triggered, this scenario becomes active. Initializes a tracing session
       * and starts recording data sources. This activates `upload_rules` and
       * `stop_rules`.
       * </pre>
       *
       * <code>repeated .perfetto.protos.TriggerRule start_rules = 2;</code>
       */
      public Builder clearStartRules() {
        if (startRulesBuilder_ == null) {
          startRules_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000002);
          onChanged();
        } else {
          startRulesBuilder_.clear();
        }
        return this;
      }
      /**
       * <pre>
       * When triggered, this scenario becomes active. Initializes a tracing session
       * and starts recording data sources. This activates `upload_rules` and
       * `stop_rules`.
       * </pre>
       *
       * <code>repeated .perfetto.protos.TriggerRule start_rules = 2;</code>
       */
      public Builder removeStartRules(int index) {
        if (startRulesBuilder_ == null) {
          ensureStartRulesIsMutable();
          startRules_.remove(index);
          onChanged();
        } else {
          startRulesBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <pre>
       * When triggered, this scenario becomes active. Initializes a tracing session
       * and starts recording data sources. This activates `upload_rules` and
       * `stop_rules`.
       * </pre>
       *
       * <code>repeated .perfetto.protos.TriggerRule start_rules = 2;</code>
       */
      public perfetto.protos.ScenarioConfigOuterClass.TriggerRule.Builder getStartRulesBuilder(
          int index) {
        return getStartRulesFieldBuilder().getBuilder(index);
      }
      /**
       * <pre>
       * When triggered, this scenario becomes active. Initializes a tracing session
       * and starts recording data sources. This activates `upload_rules` and
       * `stop_rules`.
       * </pre>
       *
       * <code>repeated .perfetto.protos.TriggerRule start_rules = 2;</code>
       */
      public perfetto.protos.ScenarioConfigOuterClass.TriggerRuleOrBuilder getStartRulesOrBuilder(
          int index) {
        if (startRulesBuilder_ == null) {
          return startRules_.get(index);  } else {
          return startRulesBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <pre>
       * When triggered, this scenario becomes active. Initializes a tracing session
       * and starts recording data sources. This activates `upload_rules` and
       * `stop_rules`.
       * </pre>
       *
       * <code>repeated .perfetto.protos.TriggerRule start_rules = 2;</code>
       */
      public java.util.List<? extends perfetto.protos.ScenarioConfigOuterClass.TriggerRuleOrBuilder> 
           getStartRulesOrBuilderList() {
        if (startRulesBuilder_ != null) {
          return startRulesBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(startRules_);
        }
      }
      /**
       * <pre>
       * When triggered, this scenario becomes active. Initializes a tracing session
       * and starts recording data sources. This activates `upload_rules` and
       * `stop_rules`.
       * </pre>
       *
       * <code>repeated .perfetto.protos.TriggerRule start_rules = 2;</code>
       */
      public perfetto.protos.ScenarioConfigOuterClass.TriggerRule.Builder addStartRulesBuilder() {
        return getStartRulesFieldBuilder().addBuilder(
            perfetto.protos.ScenarioConfigOuterClass.TriggerRule.getDefaultInstance());
      }
      /**
       * <pre>
       * When triggered, this scenario becomes active. Initializes a tracing session
       * and starts recording data sources. This activates `upload_rules` and
       * `stop_rules`.
       * </pre>
       *
       * <code>repeated .perfetto.protos.TriggerRule start_rules = 2;</code>
       */
      public perfetto.protos.ScenarioConfigOuterClass.TriggerRule.Builder addStartRulesBuilder(
          int index) {
        return getStartRulesFieldBuilder().addBuilder(
            index, perfetto.protos.ScenarioConfigOuterClass.TriggerRule.getDefaultInstance());
      }
      /**
       * <pre>
       * When triggered, this scenario becomes active. Initializes a tracing session
       * and starts recording data sources. This activates `upload_rules` and
       * `stop_rules`.
       * </pre>
       *
       * <code>repeated .perfetto.protos.TriggerRule start_rules = 2;</code>
       */
      public java.util.List<perfetto.protos.ScenarioConfigOuterClass.TriggerRule.Builder> 
           getStartRulesBuilderList() {
        return getStartRulesFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilder<
          perfetto.protos.ScenarioConfigOuterClass.TriggerRule, perfetto.protos.ScenarioConfigOuterClass.TriggerRule.Builder, perfetto.protos.ScenarioConfigOuterClass.TriggerRuleOrBuilder> 
          getStartRulesFieldBuilder() {
        if (startRulesBuilder_ == null) {
          startRulesBuilder_ = new com.google.protobuf.RepeatedFieldBuilder<
              perfetto.protos.ScenarioConfigOuterClass.TriggerRule, perfetto.protos.ScenarioConfigOuterClass.TriggerRule.Builder, perfetto.protos.ScenarioConfigOuterClass.TriggerRuleOrBuilder>(
                  startRules_,
                  ((bitField0_ & 0x00000002) != 0),
                  getParentForChildren(),
                  isClean());
          startRules_ = null;
        }
        return startRulesBuilder_;
      }

      private java.util.List<perfetto.protos.ScenarioConfigOuterClass.TriggerRule> stopRules_ =
        java.util.Collections.emptyList();
      private void ensureStopRulesIsMutable() {
        if (!((bitField0_ & 0x00000004) != 0)) {
          stopRules_ = new java.util.ArrayList<perfetto.protos.ScenarioConfigOuterClass.TriggerRule>(stopRules_);
          bitField0_ |= 0x00000004;
         }
      }

      private com.google.protobuf.RepeatedFieldBuilder<
          perfetto.protos.ScenarioConfigOuterClass.TriggerRule, perfetto.protos.ScenarioConfigOuterClass.TriggerRule.Builder, perfetto.protos.ScenarioConfigOuterClass.TriggerRuleOrBuilder> stopRulesBuilder_;

      /**
       * <pre>
       * When triggered, exits the scenario. This stops the tracing session and
       * discards the trace. All scenarios will be observed again.
       * </pre>
       *
       * <code>repeated .perfetto.protos.TriggerRule stop_rules = 3;</code>
       */
      public java.util.List<perfetto.protos.ScenarioConfigOuterClass.TriggerRule> getStopRulesList() {
        if (stopRulesBuilder_ == null) {
          return java.util.Collections.unmodifiableList(stopRules_);
        } else {
          return stopRulesBuilder_.getMessageList();
        }
      }
      /**
       * <pre>
       * When triggered, exits the scenario. This stops the tracing session and
       * discards the trace. All scenarios will be observed again.
       * </pre>
       *
       * <code>repeated .perfetto.protos.TriggerRule stop_rules = 3;</code>
       */
      public int getStopRulesCount() {
        if (stopRulesBuilder_ == null) {
          return stopRules_.size();
        } else {
          return stopRulesBuilder_.getCount();
        }
      }
      /**
       * <pre>
       * When triggered, exits the scenario. This stops the tracing session and
       * discards the trace. All scenarios will be observed again.
       * </pre>
       *
       * <code>repeated .perfetto.protos.TriggerRule stop_rules = 3;</code>
       */
      public perfetto.protos.ScenarioConfigOuterClass.TriggerRule getStopRules(int index) {
        if (stopRulesBuilder_ == null) {
          return stopRules_.get(index);
        } else {
          return stopRulesBuilder_.getMessage(index);
        }
      }
      /**
       * <pre>
       * When triggered, exits the scenario. This stops the tracing session and
       * discards the trace. All scenarios will be observed again.
       * </pre>
       *
       * <code>repeated .perfetto.protos.TriggerRule stop_rules = 3;</code>
       */
      public Builder setStopRules(
          int index, perfetto.protos.ScenarioConfigOuterClass.TriggerRule value) {
        if (stopRulesBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureStopRulesIsMutable();
          stopRules_.set(index, value);
          onChanged();
        } else {
          stopRulesBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <pre>
       * When triggered, exits the scenario. This stops the tracing session and
       * discards the trace. All scenarios will be observed again.
       * </pre>
       *
       * <code>repeated .perfetto.protos.TriggerRule stop_rules = 3;</code>
       */
      public Builder setStopRules(
          int index, perfetto.protos.ScenarioConfigOuterClass.TriggerRule.Builder builderForValue) {
        if (stopRulesBuilder_ == null) {
          ensureStopRulesIsMutable();
          stopRules_.set(index, builderForValue.build());
          onChanged();
        } else {
          stopRulesBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * When triggered, exits the scenario. This stops the tracing session and
       * discards the trace. All scenarios will be observed again.
       * </pre>
       *
       * <code>repeated .perfetto.protos.TriggerRule stop_rules = 3;</code>
       */
      public Builder addStopRules(perfetto.protos.ScenarioConfigOuterClass.TriggerRule value) {
        if (stopRulesBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureStopRulesIsMutable();
          stopRules_.add(value);
          onChanged();
        } else {
          stopRulesBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <pre>
       * When triggered, exits the scenario. This stops the tracing session and
       * discards the trace. All scenarios will be observed again.
       * </pre>
       *
       * <code>repeated .perfetto.protos.TriggerRule stop_rules = 3;</code>
       */
      public Builder addStopRules(
          int index, perfetto.protos.ScenarioConfigOuterClass.TriggerRule value) {
        if (stopRulesBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureStopRulesIsMutable();
          stopRules_.add(index, value);
          onChanged();
        } else {
          stopRulesBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <pre>
       * When triggered, exits the scenario. This stops the tracing session and
       * discards the trace. All scenarios will be observed again.
       * </pre>
       *
       * <code>repeated .perfetto.protos.TriggerRule stop_rules = 3;</code>
       */
      public Builder addStopRules(
          perfetto.protos.ScenarioConfigOuterClass.TriggerRule.Builder builderForValue) {
        if (stopRulesBuilder_ == null) {
          ensureStopRulesIsMutable();
          stopRules_.add(builderForValue.build());
          onChanged();
        } else {
          stopRulesBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * When triggered, exits the scenario. This stops the tracing session and
       * discards the trace. All scenarios will be observed again.
       * </pre>
       *
       * <code>repeated .perfetto.protos.TriggerRule stop_rules = 3;</code>
       */
      public Builder addStopRules(
          int index, perfetto.protos.ScenarioConfigOuterClass.TriggerRule.Builder builderForValue) {
        if (stopRulesBuilder_ == null) {
          ensureStopRulesIsMutable();
          stopRules_.add(index, builderForValue.build());
          onChanged();
        } else {
          stopRulesBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * When triggered, exits the scenario. This stops the tracing session and
       * discards the trace. All scenarios will be observed again.
       * </pre>
       *
       * <code>repeated .perfetto.protos.TriggerRule stop_rules = 3;</code>
       */
      public Builder addAllStopRules(
          java.lang.Iterable<? extends perfetto.protos.ScenarioConfigOuterClass.TriggerRule> values) {
        if (stopRulesBuilder_ == null) {
          ensureStopRulesIsMutable();
          com.google.protobuf.AbstractMessageLite.Builder.addAll(
              values, stopRules_);
          onChanged();
        } else {
          stopRulesBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <pre>
       * When triggered, exits the scenario. This stops the tracing session and
       * discards the trace. All scenarios will be observed again.
       * </pre>
       *
       * <code>repeated .perfetto.protos.TriggerRule stop_rules = 3;</code>
       */
      public Builder clearStopRules() {
        if (stopRulesBuilder_ == null) {
          stopRules_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000004);
          onChanged();
        } else {
          stopRulesBuilder_.clear();
        }
        return this;
      }
      /**
       * <pre>
       * When triggered, exits the scenario. This stops the tracing session and
       * discards the trace. All scenarios will be observed again.
       * </pre>
       *
       * <code>repeated .perfetto.protos.TriggerRule stop_rules = 3;</code>
       */
      public Builder removeStopRules(int index) {
        if (stopRulesBuilder_ == null) {
          ensureStopRulesIsMutable();
          stopRules_.remove(index);
          onChanged();
        } else {
          stopRulesBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <pre>
       * When triggered, exits the scenario. This stops the tracing session and
       * discards the trace. All scenarios will be observed again.
       * </pre>
       *
       * <code>repeated .perfetto.protos.TriggerRule stop_rules = 3;</code>
       */
      public perfetto.protos.ScenarioConfigOuterClass.TriggerRule.Builder getStopRulesBuilder(
          int index) {
        return getStopRulesFieldBuilder().getBuilder(index);
      }
      /**
       * <pre>
       * When triggered, exits the scenario. This stops the tracing session and
       * discards the trace. All scenarios will be observed again.
       * </pre>
       *
       * <code>repeated .perfetto.protos.TriggerRule stop_rules = 3;</code>
       */
      public perfetto.protos.ScenarioConfigOuterClass.TriggerRuleOrBuilder getStopRulesOrBuilder(
          int index) {
        if (stopRulesBuilder_ == null) {
          return stopRules_.get(index);  } else {
          return stopRulesBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <pre>
       * When triggered, exits the scenario. This stops the tracing session and
       * discards the trace. All scenarios will be observed again.
       * </pre>
       *
       * <code>repeated .perfetto.protos.TriggerRule stop_rules = 3;</code>
       */
      public java.util.List<? extends perfetto.protos.ScenarioConfigOuterClass.TriggerRuleOrBuilder> 
           getStopRulesOrBuilderList() {
        if (stopRulesBuilder_ != null) {
          return stopRulesBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(stopRules_);
        }
      }
      /**
       * <pre>
       * When triggered, exits the scenario. This stops the tracing session and
       * discards the trace. All scenarios will be observed again.
       * </pre>
       *
       * <code>repeated .perfetto.protos.TriggerRule stop_rules = 3;</code>
       */
      public perfetto.protos.ScenarioConfigOuterClass.TriggerRule.Builder addStopRulesBuilder() {
        return getStopRulesFieldBuilder().addBuilder(
            perfetto.protos.ScenarioConfigOuterClass.TriggerRule.getDefaultInstance());
      }
      /**
       * <pre>
       * When triggered, exits the scenario. This stops the tracing session and
       * discards the trace. All scenarios will be observed again.
       * </pre>
       *
       * <code>repeated .perfetto.protos.TriggerRule stop_rules = 3;</code>
       */
      public perfetto.protos.ScenarioConfigOuterClass.TriggerRule.Builder addStopRulesBuilder(
          int index) {
        return getStopRulesFieldBuilder().addBuilder(
            index, perfetto.protos.ScenarioConfigOuterClass.TriggerRule.getDefaultInstance());
      }
      /**
       * <pre>
       * When triggered, exits the scenario. This stops the tracing session and
       * discards the trace. All scenarios will be observed again.
       * </pre>
       *
       * <code>repeated .perfetto.protos.TriggerRule stop_rules = 3;</code>
       */
      public java.util.List<perfetto.protos.ScenarioConfigOuterClass.TriggerRule.Builder> 
           getStopRulesBuilderList() {
        return getStopRulesFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilder<
          perfetto.protos.ScenarioConfigOuterClass.TriggerRule, perfetto.protos.ScenarioConfigOuterClass.TriggerRule.Builder, perfetto.protos.ScenarioConfigOuterClass.TriggerRuleOrBuilder> 
          getStopRulesFieldBuilder() {
        if (stopRulesBuilder_ == null) {
          stopRulesBuilder_ = new com.google.protobuf.RepeatedFieldBuilder<
              perfetto.protos.ScenarioConfigOuterClass.TriggerRule, perfetto.protos.ScenarioConfigOuterClass.TriggerRule.Builder, perfetto.protos.ScenarioConfigOuterClass.TriggerRuleOrBuilder>(
                  stopRules_,
                  ((bitField0_ & 0x00000004) != 0),
                  getParentForChildren(),
                  isClean());
          stopRules_ = null;
        }
        return stopRulesBuilder_;
      }

      private java.util.List<perfetto.protos.ScenarioConfigOuterClass.TriggerRule> uploadRules_ =
        java.util.Collections.emptyList();
      private void ensureUploadRulesIsMutable() {
        if (!((bitField0_ & 0x00000008) != 0)) {
          uploadRules_ = new java.util.ArrayList<perfetto.protos.ScenarioConfigOuterClass.TriggerRule>(uploadRules_);
          bitField0_ |= 0x00000008;
         }
      }

      private com.google.protobuf.RepeatedFieldBuilder<
          perfetto.protos.ScenarioConfigOuterClass.TriggerRule, perfetto.protos.ScenarioConfigOuterClass.TriggerRule.Builder, perfetto.protos.ScenarioConfigOuterClass.TriggerRuleOrBuilder> uploadRulesBuilder_;

      /**
       * <pre>
       * When triggered, exits the scenario, stops the tracing session, and attempts
       * to upload the trace. All scenarios will be observed again.
       * </pre>
       *
       * <code>repeated .perfetto.protos.TriggerRule upload_rules = 4;</code>
       */
      public java.util.List<perfetto.protos.ScenarioConfigOuterClass.TriggerRule> getUploadRulesList() {
        if (uploadRulesBuilder_ == null) {
          return java.util.Collections.unmodifiableList(uploadRules_);
        } else {
          return uploadRulesBuilder_.getMessageList();
        }
      }
      /**
       * <pre>
       * When triggered, exits the scenario, stops the tracing session, and attempts
       * to upload the trace. All scenarios will be observed again.
       * </pre>
       *
       * <code>repeated .perfetto.protos.TriggerRule upload_rules = 4;</code>
       */
      public int getUploadRulesCount() {
        if (uploadRulesBuilder_ == null) {
          return uploadRules_.size();
        } else {
          return uploadRulesBuilder_.getCount();
        }
      }
      /**
       * <pre>
       * When triggered, exits the scenario, stops the tracing session, and attempts
       * to upload the trace. All scenarios will be observed again.
       * </pre>
       *
       * <code>repeated .perfetto.protos.TriggerRule upload_rules = 4;</code>
       */
      public perfetto.protos.ScenarioConfigOuterClass.TriggerRule getUploadRules(int index) {
        if (uploadRulesBuilder_ == null) {
          return uploadRules_.get(index);
        } else {
          return uploadRulesBuilder_.getMessage(index);
        }
      }
      /**
       * <pre>
       * When triggered, exits the scenario, stops the tracing session, and attempts
       * to upload the trace. All scenarios will be observed again.
       * </pre>
       *
       * <code>repeated .perfetto.protos.TriggerRule upload_rules = 4;</code>
       */
      public Builder setUploadRules(
          int index, perfetto.protos.ScenarioConfigOuterClass.TriggerRule value) {
        if (uploadRulesBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureUploadRulesIsMutable();
          uploadRules_.set(index, value);
          onChanged();
        } else {
          uploadRulesBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <pre>
       * When triggered, exits the scenario, stops the tracing session, and attempts
       * to upload the trace. All scenarios will be observed again.
       * </pre>
       *
       * <code>repeated .perfetto.protos.TriggerRule upload_rules = 4;</code>
       */
      public Builder setUploadRules(
          int index, perfetto.protos.ScenarioConfigOuterClass.TriggerRule.Builder builderForValue) {
        if (uploadRulesBuilder_ == null) {
          ensureUploadRulesIsMutable();
          uploadRules_.set(index, builderForValue.build());
          onChanged();
        } else {
          uploadRulesBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * When triggered, exits the scenario, stops the tracing session, and attempts
       * to upload the trace. All scenarios will be observed again.
       * </pre>
       *
       * <code>repeated .perfetto.protos.TriggerRule upload_rules = 4;</code>
       */
      public Builder addUploadRules(perfetto.protos.ScenarioConfigOuterClass.TriggerRule value) {
        if (uploadRulesBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureUploadRulesIsMutable();
          uploadRules_.add(value);
          onChanged();
        } else {
          uploadRulesBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <pre>
       * When triggered, exits the scenario, stops the tracing session, and attempts
       * to upload the trace. All scenarios will be observed again.
       * </pre>
       *
       * <code>repeated .perfetto.protos.TriggerRule upload_rules = 4;</code>
       */
      public Builder addUploadRules(
          int index, perfetto.protos.ScenarioConfigOuterClass.TriggerRule value) {
        if (uploadRulesBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureUploadRulesIsMutable();
          uploadRules_.add(index, value);
          onChanged();
        } else {
          uploadRulesBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <pre>
       * When triggered, exits the scenario, stops the tracing session, and attempts
       * to upload the trace. All scenarios will be observed again.
       * </pre>
       *
       * <code>repeated .perfetto.protos.TriggerRule upload_rules = 4;</code>
       */
      public Builder addUploadRules(
          perfetto.protos.ScenarioConfigOuterClass.TriggerRule.Builder builderForValue) {
        if (uploadRulesBuilder_ == null) {
          ensureUploadRulesIsMutable();
          uploadRules_.add(builderForValue.build());
          onChanged();
        } else {
          uploadRulesBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * When triggered, exits the scenario, stops the tracing session, and attempts
       * to upload the trace. All scenarios will be observed again.
       * </pre>
       *
       * <code>repeated .perfetto.protos.TriggerRule upload_rules = 4;</code>
       */
      public Builder addUploadRules(
          int index, perfetto.protos.ScenarioConfigOuterClass.TriggerRule.Builder builderForValue) {
        if (uploadRulesBuilder_ == null) {
          ensureUploadRulesIsMutable();
          uploadRules_.add(index, builderForValue.build());
          onChanged();
        } else {
          uploadRulesBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * When triggered, exits the scenario, stops the tracing session, and attempts
       * to upload the trace. All scenarios will be observed again.
       * </pre>
       *
       * <code>repeated .perfetto.protos.TriggerRule upload_rules = 4;</code>
       */
      public Builder addAllUploadRules(
          java.lang.Iterable<? extends perfetto.protos.ScenarioConfigOuterClass.TriggerRule> values) {
        if (uploadRulesBuilder_ == null) {
          ensureUploadRulesIsMutable();
          com.google.protobuf.AbstractMessageLite.Builder.addAll(
              values, uploadRules_);
          onChanged();
        } else {
          uploadRulesBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <pre>
       * When triggered, exits the scenario, stops the tracing session, and attempts
       * to upload the trace. All scenarios will be observed again.
       * </pre>
       *
       * <code>repeated .perfetto.protos.TriggerRule upload_rules = 4;</code>
       */
      public Builder clearUploadRules() {
        if (uploadRulesBuilder_ == null) {
          uploadRules_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000008);
          onChanged();
        } else {
          uploadRulesBuilder_.clear();
        }
        return this;
      }
      /**
       * <pre>
       * When triggered, exits the scenario, stops the tracing session, and attempts
       * to upload the trace. All scenarios will be observed again.
       * </pre>
       *
       * <code>repeated .perfetto.protos.TriggerRule upload_rules = 4;</code>
       */
      public Builder removeUploadRules(int index) {
        if (uploadRulesBuilder_ == null) {
          ensureUploadRulesIsMutable();
          uploadRules_.remove(index);
          onChanged();
        } else {
          uploadRulesBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <pre>
       * When triggered, exits the scenario, stops the tracing session, and attempts
       * to upload the trace. All scenarios will be observed again.
       * </pre>
       *
       * <code>repeated .perfetto.protos.TriggerRule upload_rules = 4;</code>
       */
      public perfetto.protos.ScenarioConfigOuterClass.TriggerRule.Builder getUploadRulesBuilder(
          int index) {
        return getUploadRulesFieldBuilder().getBuilder(index);
      }
      /**
       * <pre>
       * When triggered, exits the scenario, stops the tracing session, and attempts
       * to upload the trace. All scenarios will be observed again.
       * </pre>
       *
       * <code>repeated .perfetto.protos.TriggerRule upload_rules = 4;</code>
       */
      public perfetto.protos.ScenarioConfigOuterClass.TriggerRuleOrBuilder getUploadRulesOrBuilder(
          int index) {
        if (uploadRulesBuilder_ == null) {
          return uploadRules_.get(index);  } else {
          return uploadRulesBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <pre>
       * When triggered, exits the scenario, stops the tracing session, and attempts
       * to upload the trace. All scenarios will be observed again.
       * </pre>
       *
       * <code>repeated .perfetto.protos.TriggerRule upload_rules = 4;</code>
       */
      public java.util.List<? extends perfetto.protos.ScenarioConfigOuterClass.TriggerRuleOrBuilder> 
           getUploadRulesOrBuilderList() {
        if (uploadRulesBuilder_ != null) {
          return uploadRulesBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(uploadRules_);
        }
      }
      /**
       * <pre>
       * When triggered, exits the scenario, stops the tracing session, and attempts
       * to upload the trace. All scenarios will be observed again.
       * </pre>
       *
       * <code>repeated .perfetto.protos.TriggerRule upload_rules = 4;</code>
       */
      public perfetto.protos.ScenarioConfigOuterClass.TriggerRule.Builder addUploadRulesBuilder() {
        return getUploadRulesFieldBuilder().addBuilder(
            perfetto.protos.ScenarioConfigOuterClass.TriggerRule.getDefaultInstance());
      }
      /**
       * <pre>
       * When triggered, exits the scenario, stops the tracing session, and attempts
       * to upload the trace. All scenarios will be observed again.
       * </pre>
       *
       * <code>repeated .perfetto.protos.TriggerRule upload_rules = 4;</code>
       */
      public perfetto.protos.ScenarioConfigOuterClass.TriggerRule.Builder addUploadRulesBuilder(
          int index) {
        return getUploadRulesFieldBuilder().addBuilder(
            index, perfetto.protos.ScenarioConfigOuterClass.TriggerRule.getDefaultInstance());
      }
      /**
       * <pre>
       * When triggered, exits the scenario, stops the tracing session, and attempts
       * to upload the trace. All scenarios will be observed again.
       * </pre>
       *
       * <code>repeated .perfetto.protos.TriggerRule upload_rules = 4;</code>
       */
      public java.util.List<perfetto.protos.ScenarioConfigOuterClass.TriggerRule.Builder> 
           getUploadRulesBuilderList() {
        return getUploadRulesFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilder<
          perfetto.protos.ScenarioConfigOuterClass.TriggerRule, perfetto.protos.ScenarioConfigOuterClass.TriggerRule.Builder, perfetto.protos.ScenarioConfigOuterClass.TriggerRuleOrBuilder> 
          getUploadRulesFieldBuilder() {
        if (uploadRulesBuilder_ == null) {
          uploadRulesBuilder_ = new com.google.protobuf.RepeatedFieldBuilder<
              perfetto.protos.ScenarioConfigOuterClass.TriggerRule, perfetto.protos.ScenarioConfigOuterClass.TriggerRule.Builder, perfetto.protos.ScenarioConfigOuterClass.TriggerRuleOrBuilder>(
                  uploadRules_,
                  ((bitField0_ & 0x00000008) != 0),
                  getParentForChildren(),
                  isClean());
          uploadRules_ = null;
        }
        return uploadRulesBuilder_;
      }

      private java.util.List<perfetto.protos.ScenarioConfigOuterClass.TriggerRule> setupRules_ =
        java.util.Collections.emptyList();
      private void ensureSetupRulesIsMutable() {
        if (!((bitField0_ & 0x00000010) != 0)) {
          setupRules_ = new java.util.ArrayList<perfetto.protos.ScenarioConfigOuterClass.TriggerRule>(setupRules_);
          bitField0_ |= 0x00000010;
         }
      }

      private com.google.protobuf.RepeatedFieldBuilder<
          perfetto.protos.ScenarioConfigOuterClass.TriggerRule, perfetto.protos.ScenarioConfigOuterClass.TriggerRule.Builder, perfetto.protos.ScenarioConfigOuterClass.TriggerRuleOrBuilder> setupRulesBuilder_;

      /**
       * <pre>
       * When triggered, this scenario becomes active. Initializes a tracing
       * session, without recording data sources, and waits for a `start_rules` or
       * to enter a `nested_scenarios`, which would start recording. This also
       * activates `stop_rules`.
       * </pre>
       *
       * <code>repeated .perfetto.protos.TriggerRule setup_rules = 5;</code>
       */
      public java.util.List<perfetto.protos.ScenarioConfigOuterClass.TriggerRule> getSetupRulesList() {
        if (setupRulesBuilder_ == null) {
          return java.util.Collections.unmodifiableList(setupRules_);
        } else {
          return setupRulesBuilder_.getMessageList();
        }
      }
      /**
       * <pre>
       * When triggered, this scenario becomes active. Initializes a tracing
       * session, without recording data sources, and waits for a `start_rules` or
       * to enter a `nested_scenarios`, which would start recording. This also
       * activates `stop_rules`.
       * </pre>
       *
       * <code>repeated .perfetto.protos.TriggerRule setup_rules = 5;</code>
       */
      public int getSetupRulesCount() {
        if (setupRulesBuilder_ == null) {
          return setupRules_.size();
        } else {
          return setupRulesBuilder_.getCount();
        }
      }
      /**
       * <pre>
       * When triggered, this scenario becomes active. Initializes a tracing
       * session, without recording data sources, and waits for a `start_rules` or
       * to enter a `nested_scenarios`, which would start recording. This also
       * activates `stop_rules`.
       * </pre>
       *
       * <code>repeated .perfetto.protos.TriggerRule setup_rules = 5;</code>
       */
      public perfetto.protos.ScenarioConfigOuterClass.TriggerRule getSetupRules(int index) {
        if (setupRulesBuilder_ == null) {
          return setupRules_.get(index);
        } else {
          return setupRulesBuilder_.getMessage(index);
        }
      }
      /**
       * <pre>
       * When triggered, this scenario becomes active. Initializes a tracing
       * session, without recording data sources, and waits for a `start_rules` or
       * to enter a `nested_scenarios`, which would start recording. This also
       * activates `stop_rules`.
       * </pre>
       *
       * <code>repeated .perfetto.protos.TriggerRule setup_rules = 5;</code>
       */
      public Builder setSetupRules(
          int index, perfetto.protos.ScenarioConfigOuterClass.TriggerRule value) {
        if (setupRulesBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureSetupRulesIsMutable();
          setupRules_.set(index, value);
          onChanged();
        } else {
          setupRulesBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <pre>
       * When triggered, this scenario becomes active. Initializes a tracing
       * session, without recording data sources, and waits for a `start_rules` or
       * to enter a `nested_scenarios`, which would start recording. This also
       * activates `stop_rules`.
       * </pre>
       *
       * <code>repeated .perfetto.protos.TriggerRule setup_rules = 5;</code>
       */
      public Builder setSetupRules(
          int index, perfetto.protos.ScenarioConfigOuterClass.TriggerRule.Builder builderForValue) {
        if (setupRulesBuilder_ == null) {
          ensureSetupRulesIsMutable();
          setupRules_.set(index, builderForValue.build());
          onChanged();
        } else {
          setupRulesBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * When triggered, this scenario becomes active. Initializes a tracing
       * session, without recording data sources, and waits for a `start_rules` or
       * to enter a `nested_scenarios`, which would start recording. This also
       * activates `stop_rules`.
       * </pre>
       *
       * <code>repeated .perfetto.protos.TriggerRule setup_rules = 5;</code>
       */
      public Builder addSetupRules(perfetto.protos.ScenarioConfigOuterClass.TriggerRule value) {
        if (setupRulesBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureSetupRulesIsMutable();
          setupRules_.add(value);
          onChanged();
        } else {
          setupRulesBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <pre>
       * When triggered, this scenario becomes active. Initializes a tracing
       * session, without recording data sources, and waits for a `start_rules` or
       * to enter a `nested_scenarios`, which would start recording. This also
       * activates `stop_rules`.
       * </pre>
       *
       * <code>repeated .perfetto.protos.TriggerRule setup_rules = 5;</code>
       */
      public Builder addSetupRules(
          int index, perfetto.protos.ScenarioConfigOuterClass.TriggerRule value) {
        if (setupRulesBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureSetupRulesIsMutable();
          setupRules_.add(index, value);
          onChanged();
        } else {
          setupRulesBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <pre>
       * When triggered, this scenario becomes active. Initializes a tracing
       * session, without recording data sources, and waits for a `start_rules` or
       * to enter a `nested_scenarios`, which would start recording. This also
       * activates `stop_rules`.
       * </pre>
       *
       * <code>repeated .perfetto.protos.TriggerRule setup_rules = 5;</code>
       */
      public Builder addSetupRules(
          perfetto.protos.ScenarioConfigOuterClass.TriggerRule.Builder builderForValue) {
        if (setupRulesBuilder_ == null) {
          ensureSetupRulesIsMutable();
          setupRules_.add(builderForValue.build());
          onChanged();
        } else {
          setupRulesBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * When triggered, this scenario becomes active. Initializes a tracing
       * session, without recording data sources, and waits for a `start_rules` or
       * to enter a `nested_scenarios`, which would start recording. This also
       * activates `stop_rules`.
       * </pre>
       *
       * <code>repeated .perfetto.protos.TriggerRule setup_rules = 5;</code>
       */
      public Builder addSetupRules(
          int index, perfetto.protos.ScenarioConfigOuterClass.TriggerRule.Builder builderForValue) {
        if (setupRulesBuilder_ == null) {
          ensureSetupRulesIsMutable();
          setupRules_.add(index, builderForValue.build());
          onChanged();
        } else {
          setupRulesBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * When triggered, this scenario becomes active. Initializes a tracing
       * session, without recording data sources, and waits for a `start_rules` or
       * to enter a `nested_scenarios`, which would start recording. This also
       * activates `stop_rules`.
       * </pre>
       *
       * <code>repeated .perfetto.protos.TriggerRule setup_rules = 5;</code>
       */
      public Builder addAllSetupRules(
          java.lang.Iterable<? extends perfetto.protos.ScenarioConfigOuterClass.TriggerRule> values) {
        if (setupRulesBuilder_ == null) {
          ensureSetupRulesIsMutable();
          com.google.protobuf.AbstractMessageLite.Builder.addAll(
              values, setupRules_);
          onChanged();
        } else {
          setupRulesBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <pre>
       * When triggered, this scenario becomes active. Initializes a tracing
       * session, without recording data sources, and waits for a `start_rules` or
       * to enter a `nested_scenarios`, which would start recording. This also
       * activates `stop_rules`.
       * </pre>
       *
       * <code>repeated .perfetto.protos.TriggerRule setup_rules = 5;</code>
       */
      public Builder clearSetupRules() {
        if (setupRulesBuilder_ == null) {
          setupRules_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000010);
          onChanged();
        } else {
          setupRulesBuilder_.clear();
        }
        return this;
      }
      /**
       * <pre>
       * When triggered, this scenario becomes active. Initializes a tracing
       * session, without recording data sources, and waits for a `start_rules` or
       * to enter a `nested_scenarios`, which would start recording. This also
       * activates `stop_rules`.
       * </pre>
       *
       * <code>repeated .perfetto.protos.TriggerRule setup_rules = 5;</code>
       */
      public Builder removeSetupRules(int index) {
        if (setupRulesBuilder_ == null) {
          ensureSetupRulesIsMutable();
          setupRules_.remove(index);
          onChanged();
        } else {
          setupRulesBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <pre>
       * When triggered, this scenario becomes active. Initializes a tracing
       * session, without recording data sources, and waits for a `start_rules` or
       * to enter a `nested_scenarios`, which would start recording. This also
       * activates `stop_rules`.
       * </pre>
       *
       * <code>repeated .perfetto.protos.TriggerRule setup_rules = 5;</code>
       */
      public perfetto.protos.ScenarioConfigOuterClass.TriggerRule.Builder getSetupRulesBuilder(
          int index) {
        return getSetupRulesFieldBuilder().getBuilder(index);
      }
      /**
       * <pre>
       * When triggered, this scenario becomes active. Initializes a tracing
       * session, without recording data sources, and waits for a `start_rules` or
       * to enter a `nested_scenarios`, which would start recording. This also
       * activates `stop_rules`.
       * </pre>
       *
       * <code>repeated .perfetto.protos.TriggerRule setup_rules = 5;</code>
       */
      public perfetto.protos.ScenarioConfigOuterClass.TriggerRuleOrBuilder getSetupRulesOrBuilder(
          int index) {
        if (setupRulesBuilder_ == null) {
          return setupRules_.get(index);  } else {
          return setupRulesBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <pre>
       * When triggered, this scenario becomes active. Initializes a tracing
       * session, without recording data sources, and waits for a `start_rules` or
       * to enter a `nested_scenarios`, which would start recording. This also
       * activates `stop_rules`.
       * </pre>
       *
       * <code>repeated .perfetto.protos.TriggerRule setup_rules = 5;</code>
       */
      public java.util.List<? extends perfetto.protos.ScenarioConfigOuterClass.TriggerRuleOrBuilder> 
           getSetupRulesOrBuilderList() {
        if (setupRulesBuilder_ != null) {
          return setupRulesBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(setupRules_);
        }
      }
      /**
       * <pre>
       * When triggered, this scenario becomes active. Initializes a tracing
       * session, without recording data sources, and waits for a `start_rules` or
       * to enter a `nested_scenarios`, which would start recording. This also
       * activates `stop_rules`.
       * </pre>
       *
       * <code>repeated .perfetto.protos.TriggerRule setup_rules = 5;</code>
       */
      public perfetto.protos.ScenarioConfigOuterClass.TriggerRule.Builder addSetupRulesBuilder() {
        return getSetupRulesFieldBuilder().addBuilder(
            perfetto.protos.ScenarioConfigOuterClass.TriggerRule.getDefaultInstance());
      }
      /**
       * <pre>
       * When triggered, this scenario becomes active. Initializes a tracing
       * session, without recording data sources, and waits for a `start_rules` or
       * to enter a `nested_scenarios`, which would start recording. This also
       * activates `stop_rules`.
       * </pre>
       *
       * <code>repeated .perfetto.protos.TriggerRule setup_rules = 5;</code>
       */
      public perfetto.protos.ScenarioConfigOuterClass.TriggerRule.Builder addSetupRulesBuilder(
          int index) {
        return getSetupRulesFieldBuilder().addBuilder(
            index, perfetto.protos.ScenarioConfigOuterClass.TriggerRule.getDefaultInstance());
      }
      /**
       * <pre>
       * When triggered, this scenario becomes active. Initializes a tracing
       * session, without recording data sources, and waits for a `start_rules` or
       * to enter a `nested_scenarios`, which would start recording. This also
       * activates `stop_rules`.
       * </pre>
       *
       * <code>repeated .perfetto.protos.TriggerRule setup_rules = 5;</code>
       */
      public java.util.List<perfetto.protos.ScenarioConfigOuterClass.TriggerRule.Builder> 
           getSetupRulesBuilderList() {
        return getSetupRulesFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilder<
          perfetto.protos.ScenarioConfigOuterClass.TriggerRule, perfetto.protos.ScenarioConfigOuterClass.TriggerRule.Builder, perfetto.protos.ScenarioConfigOuterClass.TriggerRuleOrBuilder> 
          getSetupRulesFieldBuilder() {
        if (setupRulesBuilder_ == null) {
          setupRulesBuilder_ = new com.google.protobuf.RepeatedFieldBuilder<
              perfetto.protos.ScenarioConfigOuterClass.TriggerRule, perfetto.protos.ScenarioConfigOuterClass.TriggerRule.Builder, perfetto.protos.ScenarioConfigOuterClass.TriggerRuleOrBuilder>(
                  setupRules_,
                  ((bitField0_ & 0x00000010) != 0),
                  getParentForChildren(),
                  isClean());
          setupRules_ = null;
        }
        return setupRulesBuilder_;
      }

      private perfetto.protos.TraceConfigOuterClass.TraceConfig traceConfig_;
      private com.google.protobuf.SingleFieldBuilder<
          perfetto.protos.TraceConfigOuterClass.TraceConfig, perfetto.protos.TraceConfigOuterClass.TraceConfig.Builder, perfetto.protos.TraceConfigOuterClass.TraceConfigOrBuilder> traceConfigBuilder_;
      /**
       * <code>optional .perfetto.protos.TraceConfig trace_config = 6;</code>
       * @return Whether the traceConfig field is set.
       */
      public boolean hasTraceConfig() {
        return ((bitField0_ & 0x00000020) != 0);
      }
      /**
       * <code>optional .perfetto.protos.TraceConfig trace_config = 6;</code>
       * @return The traceConfig.
       */
      public perfetto.protos.TraceConfigOuterClass.TraceConfig getTraceConfig() {
        if (traceConfigBuilder_ == null) {
          return traceConfig_ == null ? perfetto.protos.TraceConfigOuterClass.TraceConfig.getDefaultInstance() : traceConfig_;
        } else {
          return traceConfigBuilder_.getMessage();
        }
      }
      /**
       * <code>optional .perfetto.protos.TraceConfig trace_config = 6;</code>
       */
      public Builder setTraceConfig(perfetto.protos.TraceConfigOuterClass.TraceConfig value) {
        if (traceConfigBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          traceConfig_ = value;
        } else {
          traceConfigBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000020;
        onChanged();
        return this;
      }
      /**
       * <code>optional .perfetto.protos.TraceConfig trace_config = 6;</code>
       */
      public Builder setTraceConfig(
          perfetto.protos.TraceConfigOuterClass.TraceConfig.Builder builderForValue) {
        if (traceConfigBuilder_ == null) {
          traceConfig_ = builderForValue.build();
        } else {
          traceConfigBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000020;
        onChanged();
        return this;
      }
      /**
       * <code>optional .perfetto.protos.TraceConfig trace_config = 6;</code>
       */
      public Builder mergeTraceConfig(perfetto.protos.TraceConfigOuterClass.TraceConfig value) {
        if (traceConfigBuilder_ == null) {
          if (((bitField0_ & 0x00000020) != 0) &&
            traceConfig_ != null &&
            traceConfig_ != perfetto.protos.TraceConfigOuterClass.TraceConfig.getDefaultInstance()) {
            getTraceConfigBuilder().mergeFrom(value);
          } else {
            traceConfig_ = value;
          }
        } else {
          traceConfigBuilder_.mergeFrom(value);
        }
        if (traceConfig_ != null) {
          bitField0_ |= 0x00000020;
          onChanged();
        }
        return this;
      }
      /**
       * <code>optional .perfetto.protos.TraceConfig trace_config = 6;</code>
       */
      public Builder clearTraceConfig() {
        bitField0_ = (bitField0_ & ~0x00000020);
        traceConfig_ = null;
        if (traceConfigBuilder_ != null) {
          traceConfigBuilder_.dispose();
          traceConfigBuilder_ = null;
        }
        onChanged();
        return this;
      }
      /**
       * <code>optional .perfetto.protos.TraceConfig trace_config = 6;</code>
       */
      public perfetto.protos.TraceConfigOuterClass.TraceConfig.Builder getTraceConfigBuilder() {
        bitField0_ |= 0x00000020;
        onChanged();
        return getTraceConfigFieldBuilder().getBuilder();
      }
      /**
       * <code>optional .perfetto.protos.TraceConfig trace_config = 6;</code>
       */
      public perfetto.protos.TraceConfigOuterClass.TraceConfigOrBuilder getTraceConfigOrBuilder() {
        if (traceConfigBuilder_ != null) {
          return traceConfigBuilder_.getMessageOrBuilder();
        } else {
          return traceConfig_ == null ?
              perfetto.protos.TraceConfigOuterClass.TraceConfig.getDefaultInstance() : traceConfig_;
        }
      }
      /**
       * <code>optional .perfetto.protos.TraceConfig trace_config = 6;</code>
       */
      private com.google.protobuf.SingleFieldBuilder<
          perfetto.protos.TraceConfigOuterClass.TraceConfig, perfetto.protos.TraceConfigOuterClass.TraceConfig.Builder, perfetto.protos.TraceConfigOuterClass.TraceConfigOrBuilder> 
          getTraceConfigFieldBuilder() {
        if (traceConfigBuilder_ == null) {
          traceConfigBuilder_ = new com.google.protobuf.SingleFieldBuilder<
              perfetto.protos.TraceConfigOuterClass.TraceConfig, perfetto.protos.TraceConfigOuterClass.TraceConfig.Builder, perfetto.protos.TraceConfigOuterClass.TraceConfigOrBuilder>(
                  getTraceConfig(),
                  getParentForChildren(),
                  isClean());
          traceConfig_ = null;
        }
        return traceConfigBuilder_;
      }

      private java.util.List<perfetto.protos.ScenarioConfigOuterClass.NestedScenarioConfig> nestedScenarios_ =
        java.util.Collections.emptyList();
      private void ensureNestedScenariosIsMutable() {
        if (!((bitField0_ & 0x00000040) != 0)) {
          nestedScenarios_ = new java.util.ArrayList<perfetto.protos.ScenarioConfigOuterClass.NestedScenarioConfig>(nestedScenarios_);
          bitField0_ |= 0x00000040;
         }
      }

      private com.google.protobuf.RepeatedFieldBuilder<
          perfetto.protos.ScenarioConfigOuterClass.NestedScenarioConfig, perfetto.protos.ScenarioConfigOuterClass.NestedScenarioConfig.Builder, perfetto.protos.ScenarioConfigOuterClass.NestedScenarioConfigOrBuilder> nestedScenariosBuilder_;

      /**
       * <code>repeated .perfetto.protos.NestedScenarioConfig nested_scenarios = 7;</code>
       */
      public java.util.List<perfetto.protos.ScenarioConfigOuterClass.NestedScenarioConfig> getNestedScenariosList() {
        if (nestedScenariosBuilder_ == null) {
          return java.util.Collections.unmodifiableList(nestedScenarios_);
        } else {
          return nestedScenariosBuilder_.getMessageList();
        }
      }
      /**
       * <code>repeated .perfetto.protos.NestedScenarioConfig nested_scenarios = 7;</code>
       */
      public int getNestedScenariosCount() {
        if (nestedScenariosBuilder_ == null) {
          return nestedScenarios_.size();
        } else {
          return nestedScenariosBuilder_.getCount();
        }
      }
      /**
       * <code>repeated .perfetto.protos.NestedScenarioConfig nested_scenarios = 7;</code>
       */
      public perfetto.protos.ScenarioConfigOuterClass.NestedScenarioConfig getNestedScenarios(int index) {
        if (nestedScenariosBuilder_ == null) {
          return nestedScenarios_.get(index);
        } else {
          return nestedScenariosBuilder_.getMessage(index);
        }
      }
      /**
       * <code>repeated .perfetto.protos.NestedScenarioConfig nested_scenarios = 7;</code>
       */
      public Builder setNestedScenarios(
          int index, perfetto.protos.ScenarioConfigOuterClass.NestedScenarioConfig value) {
        if (nestedScenariosBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureNestedScenariosIsMutable();
          nestedScenarios_.set(index, value);
          onChanged();
        } else {
          nestedScenariosBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .perfetto.protos.NestedScenarioConfig nested_scenarios = 7;</code>
       */
      public Builder setNestedScenarios(
          int index, perfetto.protos.ScenarioConfigOuterClass.NestedScenarioConfig.Builder builderForValue) {
        if (nestedScenariosBuilder_ == null) {
          ensureNestedScenariosIsMutable();
          nestedScenarios_.set(index, builderForValue.build());
          onChanged();
        } else {
          nestedScenariosBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .perfetto.protos.NestedScenarioConfig nested_scenarios = 7;</code>
       */
      public Builder addNestedScenarios(perfetto.protos.ScenarioConfigOuterClass.NestedScenarioConfig value) {
        if (nestedScenariosBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureNestedScenariosIsMutable();
          nestedScenarios_.add(value);
          onChanged();
        } else {
          nestedScenariosBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <code>repeated .perfetto.protos.NestedScenarioConfig nested_scenarios = 7;</code>
       */
      public Builder addNestedScenarios(
          int index, perfetto.protos.ScenarioConfigOuterClass.NestedScenarioConfig value) {
        if (nestedScenariosBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureNestedScenariosIsMutable();
          nestedScenarios_.add(index, value);
          onChanged();
        } else {
          nestedScenariosBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .perfetto.protos.NestedScenarioConfig nested_scenarios = 7;</code>
       */
      public Builder addNestedScenarios(
          perfetto.protos.ScenarioConfigOuterClass.NestedScenarioConfig.Builder builderForValue) {
        if (nestedScenariosBuilder_ == null) {
          ensureNestedScenariosIsMutable();
          nestedScenarios_.add(builderForValue.build());
          onChanged();
        } else {
          nestedScenariosBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .perfetto.protos.NestedScenarioConfig nested_scenarios = 7;</code>
       */
      public Builder addNestedScenarios(
          int index, perfetto.protos.ScenarioConfigOuterClass.NestedScenarioConfig.Builder builderForValue) {
        if (nestedScenariosBuilder_ == null) {
          ensureNestedScenariosIsMutable();
          nestedScenarios_.add(index, builderForValue.build());
          onChanged();
        } else {
          nestedScenariosBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .perfetto.protos.NestedScenarioConfig nested_scenarios = 7;</code>
       */
      public Builder addAllNestedScenarios(
          java.lang.Iterable<? extends perfetto.protos.ScenarioConfigOuterClass.NestedScenarioConfig> values) {
        if (nestedScenariosBuilder_ == null) {
          ensureNestedScenariosIsMutable();
          com.google.protobuf.AbstractMessageLite.Builder.addAll(
              values, nestedScenarios_);
          onChanged();
        } else {
          nestedScenariosBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <code>repeated .perfetto.protos.NestedScenarioConfig nested_scenarios = 7;</code>
       */
      public Builder clearNestedScenarios() {
        if (nestedScenariosBuilder_ == null) {
          nestedScenarios_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000040);
          onChanged();
        } else {
          nestedScenariosBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>repeated .perfetto.protos.NestedScenarioConfig nested_scenarios = 7;</code>
       */
      public Builder removeNestedScenarios(int index) {
        if (nestedScenariosBuilder_ == null) {
          ensureNestedScenariosIsMutable();
          nestedScenarios_.remove(index);
          onChanged();
        } else {
          nestedScenariosBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <code>repeated .perfetto.protos.NestedScenarioConfig nested_scenarios = 7;</code>
       */
      public perfetto.protos.ScenarioConfigOuterClass.NestedScenarioConfig.Builder getNestedScenariosBuilder(
          int index) {
        return getNestedScenariosFieldBuilder().getBuilder(index);
      }
      /**
       * <code>repeated .perfetto.protos.NestedScenarioConfig nested_scenarios = 7;</code>
       */
      public perfetto.protos.ScenarioConfigOuterClass.NestedScenarioConfigOrBuilder getNestedScenariosOrBuilder(
          int index) {
        if (nestedScenariosBuilder_ == null) {
          return nestedScenarios_.get(index);  } else {
          return nestedScenariosBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <code>repeated .perfetto.protos.NestedScenarioConfig nested_scenarios = 7;</code>
       */
      public java.util.List<? extends perfetto.protos.ScenarioConfigOuterClass.NestedScenarioConfigOrBuilder> 
           getNestedScenariosOrBuilderList() {
        if (nestedScenariosBuilder_ != null) {
          return nestedScenariosBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(nestedScenarios_);
        }
      }
      /**
       * <code>repeated .perfetto.protos.NestedScenarioConfig nested_scenarios = 7;</code>
       */
      public perfetto.protos.ScenarioConfigOuterClass.NestedScenarioConfig.Builder addNestedScenariosBuilder() {
        return getNestedScenariosFieldBuilder().addBuilder(
            perfetto.protos.ScenarioConfigOuterClass.NestedScenarioConfig.getDefaultInstance());
      }
      /**
       * <code>repeated .perfetto.protos.NestedScenarioConfig nested_scenarios = 7;</code>
       */
      public perfetto.protos.ScenarioConfigOuterClass.NestedScenarioConfig.Builder addNestedScenariosBuilder(
          int index) {
        return getNestedScenariosFieldBuilder().addBuilder(
            index, perfetto.protos.ScenarioConfigOuterClass.NestedScenarioConfig.getDefaultInstance());
      }
      /**
       * <code>repeated .perfetto.protos.NestedScenarioConfig nested_scenarios = 7;</code>
       */
      public java.util.List<perfetto.protos.ScenarioConfigOuterClass.NestedScenarioConfig.Builder> 
           getNestedScenariosBuilderList() {
        return getNestedScenariosFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilder<
          perfetto.protos.ScenarioConfigOuterClass.NestedScenarioConfig, perfetto.protos.ScenarioConfigOuterClass.NestedScenarioConfig.Builder, perfetto.protos.ScenarioConfigOuterClass.NestedScenarioConfigOrBuilder> 
          getNestedScenariosFieldBuilder() {
        if (nestedScenariosBuilder_ == null) {
          nestedScenariosBuilder_ = new com.google.protobuf.RepeatedFieldBuilder<
              perfetto.protos.ScenarioConfigOuterClass.NestedScenarioConfig, perfetto.protos.ScenarioConfigOuterClass.NestedScenarioConfig.Builder, perfetto.protos.ScenarioConfigOuterClass.NestedScenarioConfigOrBuilder>(
                  nestedScenarios_,
                  ((bitField0_ & 0x00000040) != 0),
                  getParentForChildren(),
                  isClean());
          nestedScenarios_ = null;
        }
        return nestedScenariosBuilder_;
      }

      // @@protoc_insertion_point(builder_scope:perfetto.protos.ScenarioConfig)
    }

    // @@protoc_insertion_point(class_scope:perfetto.protos.ScenarioConfig)
    private static final perfetto.protos.ScenarioConfigOuterClass.ScenarioConfig DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new perfetto.protos.ScenarioConfigOuterClass.ScenarioConfig();
    }

    public static perfetto.protos.ScenarioConfigOuterClass.ScenarioConfig getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<ScenarioConfig>
        PARSER = new com.google.protobuf.AbstractParser<ScenarioConfig>() {
      @java.lang.Override
      public ScenarioConfig parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        Builder builder = newBuilder();
        try {
          builder.mergeFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.setUnfinishedMessage(builder.buildPartial());
        } catch (com.google.protobuf.UninitializedMessageException e) {
          throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
        } catch (java.io.IOException e) {
          throw new com.google.protobuf.InvalidProtocolBufferException(e)
              .setUnfinishedMessage(builder.buildPartial());
        }
        return builder.buildPartial();
      }
    };

    public static com.google.protobuf.Parser<ScenarioConfig> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<ScenarioConfig> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public perfetto.protos.ScenarioConfigOuterClass.ScenarioConfig getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface ChromeFieldTracingConfigOrBuilder extends
      // @@protoc_insertion_point(interface_extends:perfetto.protos.ChromeFieldTracingConfig)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <code>repeated .perfetto.protos.ScenarioConfig scenarios = 1;</code>
     */
    java.util.List<perfetto.protos.ScenarioConfigOuterClass.ScenarioConfig> 
        getScenariosList();
    /**
     * <code>repeated .perfetto.protos.ScenarioConfig scenarios = 1;</code>
     */
    perfetto.protos.ScenarioConfigOuterClass.ScenarioConfig getScenarios(int index);
    /**
     * <code>repeated .perfetto.protos.ScenarioConfig scenarios = 1;</code>
     */
    int getScenariosCount();
    /**
     * <code>repeated .perfetto.protos.ScenarioConfig scenarios = 1;</code>
     */
    java.util.List<? extends perfetto.protos.ScenarioConfigOuterClass.ScenarioConfigOrBuilder> 
        getScenariosOrBuilderList();
    /**
     * <code>repeated .perfetto.protos.ScenarioConfig scenarios = 1;</code>
     */
    perfetto.protos.ScenarioConfigOuterClass.ScenarioConfigOrBuilder getScenariosOrBuilder(
        int index);
  }
  /**
   * Protobuf type {@code perfetto.protos.ChromeFieldTracingConfig}
   */
  public static final class ChromeFieldTracingConfig extends
      com.google.protobuf.GeneratedMessage implements
      // @@protoc_insertion_point(message_implements:perfetto.protos.ChromeFieldTracingConfig)
      ChromeFieldTracingConfigOrBuilder {
  private static final long serialVersionUID = 0L;
    static {
      com.google.protobuf.RuntimeVersion.validateProtobufGencodeVersion(
        com.google.protobuf.RuntimeVersion.RuntimeDomain.PUBLIC,
        /* major= */ 4,
        /* minor= */ 29,
        /* patch= */ 3,
        /* suffix= */ "",
        ChromeFieldTracingConfig.class.getName());
    }
    // Use ChromeFieldTracingConfig.newBuilder() to construct.
    private ChromeFieldTracingConfig(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
    }
    private ChromeFieldTracingConfig() {
      scenarios_ = java.util.Collections.emptyList();
    }

    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return perfetto.protos.ScenarioConfigOuterClass.internal_static_perfetto_protos_ChromeFieldTracingConfig_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return perfetto.protos.ScenarioConfigOuterClass.internal_static_perfetto_protos_ChromeFieldTracingConfig_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              perfetto.protos.ScenarioConfigOuterClass.ChromeFieldTracingConfig.class, perfetto.protos.ScenarioConfigOuterClass.ChromeFieldTracingConfig.Builder.class);
    }

    public static final int SCENARIOS_FIELD_NUMBER = 1;
    @SuppressWarnings("serial")
    private java.util.List<perfetto.protos.ScenarioConfigOuterClass.ScenarioConfig> scenarios_;
    /**
     * <code>repeated .perfetto.protos.ScenarioConfig scenarios = 1;</code>
     */
    @java.lang.Override
    public java.util.List<perfetto.protos.ScenarioConfigOuterClass.ScenarioConfig> getScenariosList() {
      return scenarios_;
    }
    /**
     * <code>repeated .perfetto.protos.ScenarioConfig scenarios = 1;</code>
     */
    @java.lang.Override
    public java.util.List<? extends perfetto.protos.ScenarioConfigOuterClass.ScenarioConfigOrBuilder> 
        getScenariosOrBuilderList() {
      return scenarios_;
    }
    /**
     * <code>repeated .perfetto.protos.ScenarioConfig scenarios = 1;</code>
     */
    @java.lang.Override
    public int getScenariosCount() {
      return scenarios_.size();
    }
    /**
     * <code>repeated .perfetto.protos.ScenarioConfig scenarios = 1;</code>
     */
    @java.lang.Override
    public perfetto.protos.ScenarioConfigOuterClass.ScenarioConfig getScenarios(int index) {
      return scenarios_.get(index);
    }
    /**
     * <code>repeated .perfetto.protos.ScenarioConfig scenarios = 1;</code>
     */
    @java.lang.Override
    public perfetto.protos.ScenarioConfigOuterClass.ScenarioConfigOrBuilder getScenariosOrBuilder(
        int index) {
      return scenarios_.get(index);
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      for (int i = 0; i < scenarios_.size(); i++) {
        output.writeMessage(1, scenarios_.get(i));
      }
      getUnknownFields().writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      for (int i = 0; i < scenarios_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(1, scenarios_.get(i));
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof perfetto.protos.ScenarioConfigOuterClass.ChromeFieldTracingConfig)) {
        return super.equals(obj);
      }
      perfetto.protos.ScenarioConfigOuterClass.ChromeFieldTracingConfig other = (perfetto.protos.ScenarioConfigOuterClass.ChromeFieldTracingConfig) obj;

      if (!getScenariosList()
          .equals(other.getScenariosList())) return false;
      if (!getUnknownFields().equals(other.getUnknownFields())) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      if (getScenariosCount() > 0) {
        hash = (37 * hash) + SCENARIOS_FIELD_NUMBER;
        hash = (53 * hash) + getScenariosList().hashCode();
      }
      hash = (29 * hash) + getUnknownFields().hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static perfetto.protos.ScenarioConfigOuterClass.ChromeFieldTracingConfig parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static perfetto.protos.ScenarioConfigOuterClass.ChromeFieldTracingConfig parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static perfetto.protos.ScenarioConfigOuterClass.ChromeFieldTracingConfig parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static perfetto.protos.ScenarioConfigOuterClass.ChromeFieldTracingConfig parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static perfetto.protos.ScenarioConfigOuterClass.ChromeFieldTracingConfig parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static perfetto.protos.ScenarioConfigOuterClass.ChromeFieldTracingConfig parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static perfetto.protos.ScenarioConfigOuterClass.ChromeFieldTracingConfig parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input);
    }
    public static perfetto.protos.ScenarioConfigOuterClass.ChromeFieldTracingConfig parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    public static perfetto.protos.ScenarioConfigOuterClass.ChromeFieldTracingConfig parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessage
          .parseDelimitedWithIOException(PARSER, input);
    }

    public static perfetto.protos.ScenarioConfigOuterClass.ChromeFieldTracingConfig parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessage
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static perfetto.protos.ScenarioConfigOuterClass.ChromeFieldTracingConfig parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input);
    }
    public static perfetto.protos.ScenarioConfigOuterClass.ChromeFieldTracingConfig parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(perfetto.protos.ScenarioConfigOuterClass.ChromeFieldTracingConfig prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code perfetto.protos.ChromeFieldTracingConfig}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:perfetto.protos.ChromeFieldTracingConfig)
        perfetto.protos.ScenarioConfigOuterClass.ChromeFieldTracingConfigOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return perfetto.protos.ScenarioConfigOuterClass.internal_static_perfetto_protos_ChromeFieldTracingConfig_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return perfetto.protos.ScenarioConfigOuterClass.internal_static_perfetto_protos_ChromeFieldTracingConfig_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                perfetto.protos.ScenarioConfigOuterClass.ChromeFieldTracingConfig.class, perfetto.protos.ScenarioConfigOuterClass.ChromeFieldTracingConfig.Builder.class);
      }

      // Construct using perfetto.protos.ScenarioConfigOuterClass.ChromeFieldTracingConfig.newBuilder()
      private Builder() {

      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);

      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        bitField0_ = 0;
        if (scenariosBuilder_ == null) {
          scenarios_ = java.util.Collections.emptyList();
        } else {
          scenarios_ = null;
          scenariosBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000001);
        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return perfetto.protos.ScenarioConfigOuterClass.internal_static_perfetto_protos_ChromeFieldTracingConfig_descriptor;
      }

      @java.lang.Override
      public perfetto.protos.ScenarioConfigOuterClass.ChromeFieldTracingConfig getDefaultInstanceForType() {
        return perfetto.protos.ScenarioConfigOuterClass.ChromeFieldTracingConfig.getDefaultInstance();
      }

      @java.lang.Override
      public perfetto.protos.ScenarioConfigOuterClass.ChromeFieldTracingConfig build() {
        perfetto.protos.ScenarioConfigOuterClass.ChromeFieldTracingConfig result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public perfetto.protos.ScenarioConfigOuterClass.ChromeFieldTracingConfig buildPartial() {
        perfetto.protos.ScenarioConfigOuterClass.ChromeFieldTracingConfig result = new perfetto.protos.ScenarioConfigOuterClass.ChromeFieldTracingConfig(this);
        buildPartialRepeatedFields(result);
        if (bitField0_ != 0) { buildPartial0(result); }
        onBuilt();
        return result;
      }

      private void buildPartialRepeatedFields(perfetto.protos.ScenarioConfigOuterClass.ChromeFieldTracingConfig result) {
        if (scenariosBuilder_ == null) {
          if (((bitField0_ & 0x00000001) != 0)) {
            scenarios_ = java.util.Collections.unmodifiableList(scenarios_);
            bitField0_ = (bitField0_ & ~0x00000001);
          }
          result.scenarios_ = scenarios_;
        } else {
          result.scenarios_ = scenariosBuilder_.build();
        }
      }

      private void buildPartial0(perfetto.protos.ScenarioConfigOuterClass.ChromeFieldTracingConfig result) {
        int from_bitField0_ = bitField0_;
      }

      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof perfetto.protos.ScenarioConfigOuterClass.ChromeFieldTracingConfig) {
          return mergeFrom((perfetto.protos.ScenarioConfigOuterClass.ChromeFieldTracingConfig)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(perfetto.protos.ScenarioConfigOuterClass.ChromeFieldTracingConfig other) {
        if (other == perfetto.protos.ScenarioConfigOuterClass.ChromeFieldTracingConfig.getDefaultInstance()) return this;
        if (scenariosBuilder_ == null) {
          if (!other.scenarios_.isEmpty()) {
            if (scenarios_.isEmpty()) {
              scenarios_ = other.scenarios_;
              bitField0_ = (bitField0_ & ~0x00000001);
            } else {
              ensureScenariosIsMutable();
              scenarios_.addAll(other.scenarios_);
            }
            onChanged();
          }
        } else {
          if (!other.scenarios_.isEmpty()) {
            if (scenariosBuilder_.isEmpty()) {
              scenariosBuilder_.dispose();
              scenariosBuilder_ = null;
              scenarios_ = other.scenarios_;
              bitField0_ = (bitField0_ & ~0x00000001);
              scenariosBuilder_ = 
                com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders ?
                   getScenariosFieldBuilder() : null;
            } else {
              scenariosBuilder_.addAllMessages(other.scenarios_);
            }
          }
        }
        this.mergeUnknownFields(other.getUnknownFields());
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        if (extensionRegistry == null) {
          throw new java.lang.NullPointerException();
        }
        try {
          boolean done = false;
          while (!done) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                done = true;
                break;
              case 10: {
                perfetto.protos.ScenarioConfigOuterClass.ScenarioConfig m =
                    input.readMessage(
                        perfetto.protos.ScenarioConfigOuterClass.ScenarioConfig.parser(),
                        extensionRegistry);
                if (scenariosBuilder_ == null) {
                  ensureScenariosIsMutable();
                  scenarios_.add(m);
                } else {
                  scenariosBuilder_.addMessage(m);
                }
                break;
              } // case 10
              default: {
                if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                  done = true; // was an endgroup tag
                }
                break;
              } // default:
            } // switch (tag)
          } // while (!done)
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.unwrapIOException();
        } finally {
          onChanged();
        } // finally
        return this;
      }
      private int bitField0_;

      private java.util.List<perfetto.protos.ScenarioConfigOuterClass.ScenarioConfig> scenarios_ =
        java.util.Collections.emptyList();
      private void ensureScenariosIsMutable() {
        if (!((bitField0_ & 0x00000001) != 0)) {
          scenarios_ = new java.util.ArrayList<perfetto.protos.ScenarioConfigOuterClass.ScenarioConfig>(scenarios_);
          bitField0_ |= 0x00000001;
         }
      }

      private com.google.protobuf.RepeatedFieldBuilder<
          perfetto.protos.ScenarioConfigOuterClass.ScenarioConfig, perfetto.protos.ScenarioConfigOuterClass.ScenarioConfig.Builder, perfetto.protos.ScenarioConfigOuterClass.ScenarioConfigOrBuilder> scenariosBuilder_;

      /**
       * <code>repeated .perfetto.protos.ScenarioConfig scenarios = 1;</code>
       */
      public java.util.List<perfetto.protos.ScenarioConfigOuterClass.ScenarioConfig> getScenariosList() {
        if (scenariosBuilder_ == null) {
          return java.util.Collections.unmodifiableList(scenarios_);
        } else {
          return scenariosBuilder_.getMessageList();
        }
      }
      /**
       * <code>repeated .perfetto.protos.ScenarioConfig scenarios = 1;</code>
       */
      public int getScenariosCount() {
        if (scenariosBuilder_ == null) {
          return scenarios_.size();
        } else {
          return scenariosBuilder_.getCount();
        }
      }
      /**
       * <code>repeated .perfetto.protos.ScenarioConfig scenarios = 1;</code>
       */
      public perfetto.protos.ScenarioConfigOuterClass.ScenarioConfig getScenarios(int index) {
        if (scenariosBuilder_ == null) {
          return scenarios_.get(index);
        } else {
          return scenariosBuilder_.getMessage(index);
        }
      }
      /**
       * <code>repeated .perfetto.protos.ScenarioConfig scenarios = 1;</code>
       */
      public Builder setScenarios(
          int index, perfetto.protos.ScenarioConfigOuterClass.ScenarioConfig value) {
        if (scenariosBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureScenariosIsMutable();
          scenarios_.set(index, value);
          onChanged();
        } else {
          scenariosBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .perfetto.protos.ScenarioConfig scenarios = 1;</code>
       */
      public Builder setScenarios(
          int index, perfetto.protos.ScenarioConfigOuterClass.ScenarioConfig.Builder builderForValue) {
        if (scenariosBuilder_ == null) {
          ensureScenariosIsMutable();
          scenarios_.set(index, builderForValue.build());
          onChanged();
        } else {
          scenariosBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .perfetto.protos.ScenarioConfig scenarios = 1;</code>
       */
      public Builder addScenarios(perfetto.protos.ScenarioConfigOuterClass.ScenarioConfig value) {
        if (scenariosBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureScenariosIsMutable();
          scenarios_.add(value);
          onChanged();
        } else {
          scenariosBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <code>repeated .perfetto.protos.ScenarioConfig scenarios = 1;</code>
       */
      public Builder addScenarios(
          int index, perfetto.protos.ScenarioConfigOuterClass.ScenarioConfig value) {
        if (scenariosBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureScenariosIsMutable();
          scenarios_.add(index, value);
          onChanged();
        } else {
          scenariosBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .perfetto.protos.ScenarioConfig scenarios = 1;</code>
       */
      public Builder addScenarios(
          perfetto.protos.ScenarioConfigOuterClass.ScenarioConfig.Builder builderForValue) {
        if (scenariosBuilder_ == null) {
          ensureScenariosIsMutable();
          scenarios_.add(builderForValue.build());
          onChanged();
        } else {
          scenariosBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .perfetto.protos.ScenarioConfig scenarios = 1;</code>
       */
      public Builder addScenarios(
          int index, perfetto.protos.ScenarioConfigOuterClass.ScenarioConfig.Builder builderForValue) {
        if (scenariosBuilder_ == null) {
          ensureScenariosIsMutable();
          scenarios_.add(index, builderForValue.build());
          onChanged();
        } else {
          scenariosBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .perfetto.protos.ScenarioConfig scenarios = 1;</code>
       */
      public Builder addAllScenarios(
          java.lang.Iterable<? extends perfetto.protos.ScenarioConfigOuterClass.ScenarioConfig> values) {
        if (scenariosBuilder_ == null) {
          ensureScenariosIsMutable();
          com.google.protobuf.AbstractMessageLite.Builder.addAll(
              values, scenarios_);
          onChanged();
        } else {
          scenariosBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <code>repeated .perfetto.protos.ScenarioConfig scenarios = 1;</code>
       */
      public Builder clearScenarios() {
        if (scenariosBuilder_ == null) {
          scenarios_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000001);
          onChanged();
        } else {
          scenariosBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>repeated .perfetto.protos.ScenarioConfig scenarios = 1;</code>
       */
      public Builder removeScenarios(int index) {
        if (scenariosBuilder_ == null) {
          ensureScenariosIsMutable();
          scenarios_.remove(index);
          onChanged();
        } else {
          scenariosBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <code>repeated .perfetto.protos.ScenarioConfig scenarios = 1;</code>
       */
      public perfetto.protos.ScenarioConfigOuterClass.ScenarioConfig.Builder getScenariosBuilder(
          int index) {
        return getScenariosFieldBuilder().getBuilder(index);
      }
      /**
       * <code>repeated .perfetto.protos.ScenarioConfig scenarios = 1;</code>
       */
      public perfetto.protos.ScenarioConfigOuterClass.ScenarioConfigOrBuilder getScenariosOrBuilder(
          int index) {
        if (scenariosBuilder_ == null) {
          return scenarios_.get(index);  } else {
          return scenariosBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <code>repeated .perfetto.protos.ScenarioConfig scenarios = 1;</code>
       */
      public java.util.List<? extends perfetto.protos.ScenarioConfigOuterClass.ScenarioConfigOrBuilder> 
           getScenariosOrBuilderList() {
        if (scenariosBuilder_ != null) {
          return scenariosBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(scenarios_);
        }
      }
      /**
       * <code>repeated .perfetto.protos.ScenarioConfig scenarios = 1;</code>
       */
      public perfetto.protos.ScenarioConfigOuterClass.ScenarioConfig.Builder addScenariosBuilder() {
        return getScenariosFieldBuilder().addBuilder(
            perfetto.protos.ScenarioConfigOuterClass.ScenarioConfig.getDefaultInstance());
      }
      /**
       * <code>repeated .perfetto.protos.ScenarioConfig scenarios = 1;</code>
       */
      public perfetto.protos.ScenarioConfigOuterClass.ScenarioConfig.Builder addScenariosBuilder(
          int index) {
        return getScenariosFieldBuilder().addBuilder(
            index, perfetto.protos.ScenarioConfigOuterClass.ScenarioConfig.getDefaultInstance());
      }
      /**
       * <code>repeated .perfetto.protos.ScenarioConfig scenarios = 1;</code>
       */
      public java.util.List<perfetto.protos.ScenarioConfigOuterClass.ScenarioConfig.Builder> 
           getScenariosBuilderList() {
        return getScenariosFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilder<
          perfetto.protos.ScenarioConfigOuterClass.ScenarioConfig, perfetto.protos.ScenarioConfigOuterClass.ScenarioConfig.Builder, perfetto.protos.ScenarioConfigOuterClass.ScenarioConfigOrBuilder> 
          getScenariosFieldBuilder() {
        if (scenariosBuilder_ == null) {
          scenariosBuilder_ = new com.google.protobuf.RepeatedFieldBuilder<
              perfetto.protos.ScenarioConfigOuterClass.ScenarioConfig, perfetto.protos.ScenarioConfigOuterClass.ScenarioConfig.Builder, perfetto.protos.ScenarioConfigOuterClass.ScenarioConfigOrBuilder>(
                  scenarios_,
                  ((bitField0_ & 0x00000001) != 0),
                  getParentForChildren(),
                  isClean());
          scenarios_ = null;
        }
        return scenariosBuilder_;
      }

      // @@protoc_insertion_point(builder_scope:perfetto.protos.ChromeFieldTracingConfig)
    }

    // @@protoc_insertion_point(class_scope:perfetto.protos.ChromeFieldTracingConfig)
    private static final perfetto.protos.ScenarioConfigOuterClass.ChromeFieldTracingConfig DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new perfetto.protos.ScenarioConfigOuterClass.ChromeFieldTracingConfig();
    }

    public static perfetto.protos.ScenarioConfigOuterClass.ChromeFieldTracingConfig getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<ChromeFieldTracingConfig>
        PARSER = new com.google.protobuf.AbstractParser<ChromeFieldTracingConfig>() {
      @java.lang.Override
      public ChromeFieldTracingConfig parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        Builder builder = newBuilder();
        try {
          builder.mergeFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.setUnfinishedMessage(builder.buildPartial());
        } catch (com.google.protobuf.UninitializedMessageException e) {
          throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
        } catch (java.io.IOException e) {
          throw new com.google.protobuf.InvalidProtocolBufferException(e)
              .setUnfinishedMessage(builder.buildPartial());
        }
        return builder.buildPartial();
      }
    };

    public static com.google.protobuf.Parser<ChromeFieldTracingConfig> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<ChromeFieldTracingConfig> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public perfetto.protos.ScenarioConfigOuterClass.ChromeFieldTracingConfig getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface TracingTriggerRulesConfigOrBuilder extends
      // @@protoc_insertion_point(interface_extends:perfetto.protos.TracingTriggerRulesConfig)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <code>repeated .perfetto.protos.TriggerRule rules = 1;</code>
     */
    java.util.List<perfetto.protos.ScenarioConfigOuterClass.TriggerRule> 
        getRulesList();
    /**
     * <code>repeated .perfetto.protos.TriggerRule rules = 1;</code>
     */
    perfetto.protos.ScenarioConfigOuterClass.TriggerRule getRules(int index);
    /**
     * <code>repeated .perfetto.protos.TriggerRule rules = 1;</code>
     */
    int getRulesCount();
    /**
     * <code>repeated .perfetto.protos.TriggerRule rules = 1;</code>
     */
    java.util.List<? extends perfetto.protos.ScenarioConfigOuterClass.TriggerRuleOrBuilder> 
        getRulesOrBuilderList();
    /**
     * <code>repeated .perfetto.protos.TriggerRule rules = 1;</code>
     */
    perfetto.protos.ScenarioConfigOuterClass.TriggerRuleOrBuilder getRulesOrBuilder(
        int index);
  }
  /**
   * Protobuf type {@code perfetto.protos.TracingTriggerRulesConfig}
   */
  public static final class TracingTriggerRulesConfig extends
      com.google.protobuf.GeneratedMessage implements
      // @@protoc_insertion_point(message_implements:perfetto.protos.TracingTriggerRulesConfig)
      TracingTriggerRulesConfigOrBuilder {
  private static final long serialVersionUID = 0L;
    static {
      com.google.protobuf.RuntimeVersion.validateProtobufGencodeVersion(
        com.google.protobuf.RuntimeVersion.RuntimeDomain.PUBLIC,
        /* major= */ 4,
        /* minor= */ 29,
        /* patch= */ 3,
        /* suffix= */ "",
        TracingTriggerRulesConfig.class.getName());
    }
    // Use TracingTriggerRulesConfig.newBuilder() to construct.
    private TracingTriggerRulesConfig(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
    }
    private TracingTriggerRulesConfig() {
      rules_ = java.util.Collections.emptyList();
    }

    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return perfetto.protos.ScenarioConfigOuterClass.internal_static_perfetto_protos_TracingTriggerRulesConfig_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return perfetto.protos.ScenarioConfigOuterClass.internal_static_perfetto_protos_TracingTriggerRulesConfig_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              perfetto.protos.ScenarioConfigOuterClass.TracingTriggerRulesConfig.class, perfetto.protos.ScenarioConfigOuterClass.TracingTriggerRulesConfig.Builder.class);
    }

    public static final int RULES_FIELD_NUMBER = 1;
    @SuppressWarnings("serial")
    private java.util.List<perfetto.protos.ScenarioConfigOuterClass.TriggerRule> rules_;
    /**
     * <code>repeated .perfetto.protos.TriggerRule rules = 1;</code>
     */
    @java.lang.Override
    public java.util.List<perfetto.protos.ScenarioConfigOuterClass.TriggerRule> getRulesList() {
      return rules_;
    }
    /**
     * <code>repeated .perfetto.protos.TriggerRule rules = 1;</code>
     */
    @java.lang.Override
    public java.util.List<? extends perfetto.protos.ScenarioConfigOuterClass.TriggerRuleOrBuilder> 
        getRulesOrBuilderList() {
      return rules_;
    }
    /**
     * <code>repeated .perfetto.protos.TriggerRule rules = 1;</code>
     */
    @java.lang.Override
    public int getRulesCount() {
      return rules_.size();
    }
    /**
     * <code>repeated .perfetto.protos.TriggerRule rules = 1;</code>
     */
    @java.lang.Override
    public perfetto.protos.ScenarioConfigOuterClass.TriggerRule getRules(int index) {
      return rules_.get(index);
    }
    /**
     * <code>repeated .perfetto.protos.TriggerRule rules = 1;</code>
     */
    @java.lang.Override
    public perfetto.protos.ScenarioConfigOuterClass.TriggerRuleOrBuilder getRulesOrBuilder(
        int index) {
      return rules_.get(index);
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      for (int i = 0; i < rules_.size(); i++) {
        output.writeMessage(1, rules_.get(i));
      }
      getUnknownFields().writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      for (int i = 0; i < rules_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(1, rules_.get(i));
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof perfetto.protos.ScenarioConfigOuterClass.TracingTriggerRulesConfig)) {
        return super.equals(obj);
      }
      perfetto.protos.ScenarioConfigOuterClass.TracingTriggerRulesConfig other = (perfetto.protos.ScenarioConfigOuterClass.TracingTriggerRulesConfig) obj;

      if (!getRulesList()
          .equals(other.getRulesList())) return false;
      if (!getUnknownFields().equals(other.getUnknownFields())) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      if (getRulesCount() > 0) {
        hash = (37 * hash) + RULES_FIELD_NUMBER;
        hash = (53 * hash) + getRulesList().hashCode();
      }
      hash = (29 * hash) + getUnknownFields().hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static perfetto.protos.ScenarioConfigOuterClass.TracingTriggerRulesConfig parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static perfetto.protos.ScenarioConfigOuterClass.TracingTriggerRulesConfig parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static perfetto.protos.ScenarioConfigOuterClass.TracingTriggerRulesConfig parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static perfetto.protos.ScenarioConfigOuterClass.TracingTriggerRulesConfig parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static perfetto.protos.ScenarioConfigOuterClass.TracingTriggerRulesConfig parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static perfetto.protos.ScenarioConfigOuterClass.TracingTriggerRulesConfig parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static perfetto.protos.ScenarioConfigOuterClass.TracingTriggerRulesConfig parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input);
    }
    public static perfetto.protos.ScenarioConfigOuterClass.TracingTriggerRulesConfig parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    public static perfetto.protos.ScenarioConfigOuterClass.TracingTriggerRulesConfig parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessage
          .parseDelimitedWithIOException(PARSER, input);
    }

    public static perfetto.protos.ScenarioConfigOuterClass.TracingTriggerRulesConfig parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessage
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static perfetto.protos.ScenarioConfigOuterClass.TracingTriggerRulesConfig parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input);
    }
    public static perfetto.protos.ScenarioConfigOuterClass.TracingTriggerRulesConfig parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(perfetto.protos.ScenarioConfigOuterClass.TracingTriggerRulesConfig prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code perfetto.protos.TracingTriggerRulesConfig}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:perfetto.protos.TracingTriggerRulesConfig)
        perfetto.protos.ScenarioConfigOuterClass.TracingTriggerRulesConfigOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return perfetto.protos.ScenarioConfigOuterClass.internal_static_perfetto_protos_TracingTriggerRulesConfig_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return perfetto.protos.ScenarioConfigOuterClass.internal_static_perfetto_protos_TracingTriggerRulesConfig_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                perfetto.protos.ScenarioConfigOuterClass.TracingTriggerRulesConfig.class, perfetto.protos.ScenarioConfigOuterClass.TracingTriggerRulesConfig.Builder.class);
      }

      // Construct using perfetto.protos.ScenarioConfigOuterClass.TracingTriggerRulesConfig.newBuilder()
      private Builder() {

      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);

      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        bitField0_ = 0;
        if (rulesBuilder_ == null) {
          rules_ = java.util.Collections.emptyList();
        } else {
          rules_ = null;
          rulesBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000001);
        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return perfetto.protos.ScenarioConfigOuterClass.internal_static_perfetto_protos_TracingTriggerRulesConfig_descriptor;
      }

      @java.lang.Override
      public perfetto.protos.ScenarioConfigOuterClass.TracingTriggerRulesConfig getDefaultInstanceForType() {
        return perfetto.protos.ScenarioConfigOuterClass.TracingTriggerRulesConfig.getDefaultInstance();
      }

      @java.lang.Override
      public perfetto.protos.ScenarioConfigOuterClass.TracingTriggerRulesConfig build() {
        perfetto.protos.ScenarioConfigOuterClass.TracingTriggerRulesConfig result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public perfetto.protos.ScenarioConfigOuterClass.TracingTriggerRulesConfig buildPartial() {
        perfetto.protos.ScenarioConfigOuterClass.TracingTriggerRulesConfig result = new perfetto.protos.ScenarioConfigOuterClass.TracingTriggerRulesConfig(this);
        buildPartialRepeatedFields(result);
        if (bitField0_ != 0) { buildPartial0(result); }
        onBuilt();
        return result;
      }

      private void buildPartialRepeatedFields(perfetto.protos.ScenarioConfigOuterClass.TracingTriggerRulesConfig result) {
        if (rulesBuilder_ == null) {
          if (((bitField0_ & 0x00000001) != 0)) {
            rules_ = java.util.Collections.unmodifiableList(rules_);
            bitField0_ = (bitField0_ & ~0x00000001);
          }
          result.rules_ = rules_;
        } else {
          result.rules_ = rulesBuilder_.build();
        }
      }

      private void buildPartial0(perfetto.protos.ScenarioConfigOuterClass.TracingTriggerRulesConfig result) {
        int from_bitField0_ = bitField0_;
      }

      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof perfetto.protos.ScenarioConfigOuterClass.TracingTriggerRulesConfig) {
          return mergeFrom((perfetto.protos.ScenarioConfigOuterClass.TracingTriggerRulesConfig)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(perfetto.protos.ScenarioConfigOuterClass.TracingTriggerRulesConfig other) {
        if (other == perfetto.protos.ScenarioConfigOuterClass.TracingTriggerRulesConfig.getDefaultInstance()) return this;
        if (rulesBuilder_ == null) {
          if (!other.rules_.isEmpty()) {
            if (rules_.isEmpty()) {
              rules_ = other.rules_;
              bitField0_ = (bitField0_ & ~0x00000001);
            } else {
              ensureRulesIsMutable();
              rules_.addAll(other.rules_);
            }
            onChanged();
          }
        } else {
          if (!other.rules_.isEmpty()) {
            if (rulesBuilder_.isEmpty()) {
              rulesBuilder_.dispose();
              rulesBuilder_ = null;
              rules_ = other.rules_;
              bitField0_ = (bitField0_ & ~0x00000001);
              rulesBuilder_ = 
                com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders ?
                   getRulesFieldBuilder() : null;
            } else {
              rulesBuilder_.addAllMessages(other.rules_);
            }
          }
        }
        this.mergeUnknownFields(other.getUnknownFields());
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        if (extensionRegistry == null) {
          throw new java.lang.NullPointerException();
        }
        try {
          boolean done = false;
          while (!done) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                done = true;
                break;
              case 10: {
                perfetto.protos.ScenarioConfigOuterClass.TriggerRule m =
                    input.readMessage(
                        perfetto.protos.ScenarioConfigOuterClass.TriggerRule.parser(),
                        extensionRegistry);
                if (rulesBuilder_ == null) {
                  ensureRulesIsMutable();
                  rules_.add(m);
                } else {
                  rulesBuilder_.addMessage(m);
                }
                break;
              } // case 10
              default: {
                if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                  done = true; // was an endgroup tag
                }
                break;
              } // default:
            } // switch (tag)
          } // while (!done)
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.unwrapIOException();
        } finally {
          onChanged();
        } // finally
        return this;
      }
      private int bitField0_;

      private java.util.List<perfetto.protos.ScenarioConfigOuterClass.TriggerRule> rules_ =
        java.util.Collections.emptyList();
      private void ensureRulesIsMutable() {
        if (!((bitField0_ & 0x00000001) != 0)) {
          rules_ = new java.util.ArrayList<perfetto.protos.ScenarioConfigOuterClass.TriggerRule>(rules_);
          bitField0_ |= 0x00000001;
         }
      }

      private com.google.protobuf.RepeatedFieldBuilder<
          perfetto.protos.ScenarioConfigOuterClass.TriggerRule, perfetto.protos.ScenarioConfigOuterClass.TriggerRule.Builder, perfetto.protos.ScenarioConfigOuterClass.TriggerRuleOrBuilder> rulesBuilder_;

      /**
       * <code>repeated .perfetto.protos.TriggerRule rules = 1;</code>
       */
      public java.util.List<perfetto.protos.ScenarioConfigOuterClass.TriggerRule> getRulesList() {
        if (rulesBuilder_ == null) {
          return java.util.Collections.unmodifiableList(rules_);
        } else {
          return rulesBuilder_.getMessageList();
        }
      }
      /**
       * <code>repeated .perfetto.protos.TriggerRule rules = 1;</code>
       */
      public int getRulesCount() {
        if (rulesBuilder_ == null) {
          return rules_.size();
        } else {
          return rulesBuilder_.getCount();
        }
      }
      /**
       * <code>repeated .perfetto.protos.TriggerRule rules = 1;</code>
       */
      public perfetto.protos.ScenarioConfigOuterClass.TriggerRule getRules(int index) {
        if (rulesBuilder_ == null) {
          return rules_.get(index);
        } else {
          return rulesBuilder_.getMessage(index);
        }
      }
      /**
       * <code>repeated .perfetto.protos.TriggerRule rules = 1;</code>
       */
      public Builder setRules(
          int index, perfetto.protos.ScenarioConfigOuterClass.TriggerRule value) {
        if (rulesBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureRulesIsMutable();
          rules_.set(index, value);
          onChanged();
        } else {
          rulesBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .perfetto.protos.TriggerRule rules = 1;</code>
       */
      public Builder setRules(
          int index, perfetto.protos.ScenarioConfigOuterClass.TriggerRule.Builder builderForValue) {
        if (rulesBuilder_ == null) {
          ensureRulesIsMutable();
          rules_.set(index, builderForValue.build());
          onChanged();
        } else {
          rulesBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .perfetto.protos.TriggerRule rules = 1;</code>
       */
      public Builder addRules(perfetto.protos.ScenarioConfigOuterClass.TriggerRule value) {
        if (rulesBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureRulesIsMutable();
          rules_.add(value);
          onChanged();
        } else {
          rulesBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <code>repeated .perfetto.protos.TriggerRule rules = 1;</code>
       */
      public Builder addRules(
          int index, perfetto.protos.ScenarioConfigOuterClass.TriggerRule value) {
        if (rulesBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureRulesIsMutable();
          rules_.add(index, value);
          onChanged();
        } else {
          rulesBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .perfetto.protos.TriggerRule rules = 1;</code>
       */
      public Builder addRules(
          perfetto.protos.ScenarioConfigOuterClass.TriggerRule.Builder builderForValue) {
        if (rulesBuilder_ == null) {
          ensureRulesIsMutable();
          rules_.add(builderForValue.build());
          onChanged();
        } else {
          rulesBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .perfetto.protos.TriggerRule rules = 1;</code>
       */
      public Builder addRules(
          int index, perfetto.protos.ScenarioConfigOuterClass.TriggerRule.Builder builderForValue) {
        if (rulesBuilder_ == null) {
          ensureRulesIsMutable();
          rules_.add(index, builderForValue.build());
          onChanged();
        } else {
          rulesBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .perfetto.protos.TriggerRule rules = 1;</code>
       */
      public Builder addAllRules(
          java.lang.Iterable<? extends perfetto.protos.ScenarioConfigOuterClass.TriggerRule> values) {
        if (rulesBuilder_ == null) {
          ensureRulesIsMutable();
          com.google.protobuf.AbstractMessageLite.Builder.addAll(
              values, rules_);
          onChanged();
        } else {
          rulesBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <code>repeated .perfetto.protos.TriggerRule rules = 1;</code>
       */
      public Builder clearRules() {
        if (rulesBuilder_ == null) {
          rules_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000001);
          onChanged();
        } else {
          rulesBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>repeated .perfetto.protos.TriggerRule rules = 1;</code>
       */
      public Builder removeRules(int index) {
        if (rulesBuilder_ == null) {
          ensureRulesIsMutable();
          rules_.remove(index);
          onChanged();
        } else {
          rulesBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <code>repeated .perfetto.protos.TriggerRule rules = 1;</code>
       */
      public perfetto.protos.ScenarioConfigOuterClass.TriggerRule.Builder getRulesBuilder(
          int index) {
        return getRulesFieldBuilder().getBuilder(index);
      }
      /**
       * <code>repeated .perfetto.protos.TriggerRule rules = 1;</code>
       */
      public perfetto.protos.ScenarioConfigOuterClass.TriggerRuleOrBuilder getRulesOrBuilder(
          int index) {
        if (rulesBuilder_ == null) {
          return rules_.get(index);  } else {
          return rulesBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <code>repeated .perfetto.protos.TriggerRule rules = 1;</code>
       */
      public java.util.List<? extends perfetto.protos.ScenarioConfigOuterClass.TriggerRuleOrBuilder> 
           getRulesOrBuilderList() {
        if (rulesBuilder_ != null) {
          return rulesBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(rules_);
        }
      }
      /**
       * <code>repeated .perfetto.protos.TriggerRule rules = 1;</code>
       */
      public perfetto.protos.ScenarioConfigOuterClass.TriggerRule.Builder addRulesBuilder() {
        return getRulesFieldBuilder().addBuilder(
            perfetto.protos.ScenarioConfigOuterClass.TriggerRule.getDefaultInstance());
      }
      /**
       * <code>repeated .perfetto.protos.TriggerRule rules = 1;</code>
       */
      public perfetto.protos.ScenarioConfigOuterClass.TriggerRule.Builder addRulesBuilder(
          int index) {
        return getRulesFieldBuilder().addBuilder(
            index, perfetto.protos.ScenarioConfigOuterClass.TriggerRule.getDefaultInstance());
      }
      /**
       * <code>repeated .perfetto.protos.TriggerRule rules = 1;</code>
       */
      public java.util.List<perfetto.protos.ScenarioConfigOuterClass.TriggerRule.Builder> 
           getRulesBuilderList() {
        return getRulesFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilder<
          perfetto.protos.ScenarioConfigOuterClass.TriggerRule, perfetto.protos.ScenarioConfigOuterClass.TriggerRule.Builder, perfetto.protos.ScenarioConfigOuterClass.TriggerRuleOrBuilder> 
          getRulesFieldBuilder() {
        if (rulesBuilder_ == null) {
          rulesBuilder_ = new com.google.protobuf.RepeatedFieldBuilder<
              perfetto.protos.ScenarioConfigOuterClass.TriggerRule, perfetto.protos.ScenarioConfigOuterClass.TriggerRule.Builder, perfetto.protos.ScenarioConfigOuterClass.TriggerRuleOrBuilder>(
                  rules_,
                  ((bitField0_ & 0x00000001) != 0),
                  getParentForChildren(),
                  isClean());
          rules_ = null;
        }
        return rulesBuilder_;
      }

      // @@protoc_insertion_point(builder_scope:perfetto.protos.TracingTriggerRulesConfig)
    }

    // @@protoc_insertion_point(class_scope:perfetto.protos.TracingTriggerRulesConfig)
    private static final perfetto.protos.ScenarioConfigOuterClass.TracingTriggerRulesConfig DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new perfetto.protos.ScenarioConfigOuterClass.TracingTriggerRulesConfig();
    }

    public static perfetto.protos.ScenarioConfigOuterClass.TracingTriggerRulesConfig getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<TracingTriggerRulesConfig>
        PARSER = new com.google.protobuf.AbstractParser<TracingTriggerRulesConfig>() {
      @java.lang.Override
      public TracingTriggerRulesConfig parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        Builder builder = newBuilder();
        try {
          builder.mergeFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.setUnfinishedMessage(builder.buildPartial());
        } catch (com.google.protobuf.UninitializedMessageException e) {
          throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
        } catch (java.io.IOException e) {
          throw new com.google.protobuf.InvalidProtocolBufferException(e)
              .setUnfinishedMessage(builder.buildPartial());
        }
        return builder.buildPartial();
      }
    };

    public static com.google.protobuf.Parser<TracingTriggerRulesConfig> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<TracingTriggerRulesConfig> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public perfetto.protos.ScenarioConfigOuterClass.TracingTriggerRulesConfig getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_perfetto_protos_TriggerRule_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_perfetto_protos_TriggerRule_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_perfetto_protos_TriggerRule_HistogramTrigger_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_perfetto_protos_TriggerRule_HistogramTrigger_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_perfetto_protos_TriggerRule_RepeatingInterval_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_perfetto_protos_TriggerRule_RepeatingInterval_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_perfetto_protos_NestedScenarioConfig_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_perfetto_protos_NestedScenarioConfig_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_perfetto_protos_ScenarioConfig_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_perfetto_protos_ScenarioConfig_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_perfetto_protos_ChromeFieldTracingConfig_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_perfetto_protos_ChromeFieldTracingConfig_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_perfetto_protos_TracingTriggerRulesConfig_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_perfetto_protos_TracingTriggerRulesConfig_fieldAccessorTable;

  public static com.google.protobuf.Descriptors.FileDescriptor
      getDescriptor() {
    return descriptor;
  }
  private static  com.google.protobuf.Descriptors.FileDescriptor
      descriptor;
  static {
    java.lang.String[] descriptorData = {
      "\n3protos/perfetto/config/chrome/scenario" +
      "_config.proto\022\017perfetto.protos\032)protos/p" +
      "erfetto/config/trace_config.proto\"\254\003\n\013Tr" +
      "iggerRule\022\014\n\004name\030\001 \001(\t\022\026\n\016trigger_chanc" +
      "e\030\002 \001(\002\022\020\n\010delay_ms\030\003 \001(\004\022\033\n\023activation_" +
      "delay_ms\030\010 \001(\004\022\035\n\023manual_trigger_name\030\004 " +
      "\001(\tH\000\022B\n\thistogram\030\005 \001(\0132-.perfetto.prot" +
      "os.TriggerRule.HistogramTriggerH\000\022L\n\022rep" +
      "eating_interval\030\006 \001(\0132..perfetto.protos." +
      "TriggerRule.RepeatingIntervalH\000\032P\n\020Histo" +
      "gramTrigger\022\026\n\016histogram_name\030\001 \001(\t\022\021\n\tm" +
      "in_value\030\002 \001(\003\022\021\n\tmax_value\030\003 \001(\003\032:\n\021Rep" +
      "eatingInterval\022\021\n\tperiod_ms\030\001 \001(\004\022\022\n\nran" +
      "domized\030\002 \001(\010B\t\n\007trigger\"\306\001\n\024NestedScena" +
      "rioConfig\022\025\n\rscenario_name\030\001 \001(\t\0221\n\013star" +
      "t_rules\030\002 \003(\0132\034.perfetto.protos.TriggerR" +
      "ule\0220\n\nstop_rules\030\003 \003(\0132\034.perfetto.proto" +
      "s.TriggerRule\0222\n\014upload_rules\030\004 \003(\0132\034.pe" +
      "rfetto.protos.TriggerRule\"\350\002\n\016ScenarioCo" +
      "nfig\022\025\n\rscenario_name\030\001 \001(\t\0221\n\013start_rul" +
      "es\030\002 \003(\0132\034.perfetto.protos.TriggerRule\0220" +
      "\n\nstop_rules\030\003 \003(\0132\034.perfetto.protos.Tri" +
      "ggerRule\0222\n\014upload_rules\030\004 \003(\0132\034.perfett" +
      "o.protos.TriggerRule\0221\n\013setup_rules\030\005 \003(" +
      "\0132\034.perfetto.protos.TriggerRule\0222\n\014trace" +
      "_config\030\006 \001(\0132\034.perfetto.protos.TraceCon" +
      "fig\022?\n\020nested_scenarios\030\007 \003(\0132%.perfetto" +
      ".protos.NestedScenarioConfig\"N\n\030ChromeFi" +
      "eldTracingConfig\0222\n\tscenarios\030\001 \003(\0132\037.pe" +
      "rfetto.protos.ScenarioConfig\"H\n\031TracingT" +
      "riggerRulesConfig\022+\n\005rules\030\001 \003(\0132\034.perfe" +
      "tto.protos.TriggerRule"
    };
    descriptor = com.google.protobuf.Descriptors.FileDescriptor
      .internalBuildGeneratedFileFrom(descriptorData,
        new com.google.protobuf.Descriptors.FileDescriptor[] {
          perfetto.protos.TraceConfigOuterClass.getDescriptor(),
        });
    internal_static_perfetto_protos_TriggerRule_descriptor =
      getDescriptor().getMessageTypes().get(0);
    internal_static_perfetto_protos_TriggerRule_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessage.FieldAccessorTable(
        internal_static_perfetto_protos_TriggerRule_descriptor,
        new java.lang.String[] { "Name", "TriggerChance", "DelayMs", "ActivationDelayMs", "ManualTriggerName", "Histogram", "RepeatingInterval", "Trigger", });
    internal_static_perfetto_protos_TriggerRule_HistogramTrigger_descriptor =
      internal_static_perfetto_protos_TriggerRule_descriptor.getNestedTypes().get(0);
    internal_static_perfetto_protos_TriggerRule_HistogramTrigger_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessage.FieldAccessorTable(
        internal_static_perfetto_protos_TriggerRule_HistogramTrigger_descriptor,
        new java.lang.String[] { "HistogramName", "MinValue", "MaxValue", });
    internal_static_perfetto_protos_TriggerRule_RepeatingInterval_descriptor =
      internal_static_perfetto_protos_TriggerRule_descriptor.getNestedTypes().get(1);
    internal_static_perfetto_protos_TriggerRule_RepeatingInterval_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessage.FieldAccessorTable(
        internal_static_perfetto_protos_TriggerRule_RepeatingInterval_descriptor,
        new java.lang.String[] { "PeriodMs", "Randomized", });
    internal_static_perfetto_protos_NestedScenarioConfig_descriptor =
      getDescriptor().getMessageTypes().get(1);
    internal_static_perfetto_protos_NestedScenarioConfig_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessage.FieldAccessorTable(
        internal_static_perfetto_protos_NestedScenarioConfig_descriptor,
        new java.lang.String[] { "ScenarioName", "StartRules", "StopRules", "UploadRules", });
    internal_static_perfetto_protos_ScenarioConfig_descriptor =
      getDescriptor().getMessageTypes().get(2);
    internal_static_perfetto_protos_ScenarioConfig_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessage.FieldAccessorTable(
        internal_static_perfetto_protos_ScenarioConfig_descriptor,
        new java.lang.String[] { "ScenarioName", "StartRules", "StopRules", "UploadRules", "SetupRules", "TraceConfig", "NestedScenarios", });
    internal_static_perfetto_protos_ChromeFieldTracingConfig_descriptor =
      getDescriptor().getMessageTypes().get(3);
    internal_static_perfetto_protos_ChromeFieldTracingConfig_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessage.FieldAccessorTable(
        internal_static_perfetto_protos_ChromeFieldTracingConfig_descriptor,
        new java.lang.String[] { "Scenarios", });
    internal_static_perfetto_protos_TracingTriggerRulesConfig_descriptor =
      getDescriptor().getMessageTypes().get(4);
    internal_static_perfetto_protos_TracingTriggerRulesConfig_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessage.FieldAccessorTable(
        internal_static_perfetto_protos_TracingTriggerRulesConfig_descriptor,
        new java.lang.String[] { "Rules", });
    descriptor.resolveAllFeaturesImmutable();
    perfetto.protos.TraceConfigOuterClass.getDescriptor();
  }

  // @@protoc_insertion_point(outer_class_scope)
}
