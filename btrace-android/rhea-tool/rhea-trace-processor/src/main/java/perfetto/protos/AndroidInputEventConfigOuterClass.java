// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: protos/perfetto/config/android/android_input_event_config.proto
// Protobuf Java Version: 4.29.3

package perfetto.protos;

public final class AndroidInputEventConfigOuterClass {
  private AndroidInputEventConfigOuterClass() {}
  static {
    com.google.protobuf.RuntimeVersion.validateProtobufGencodeVersion(
      com.google.protobuf.RuntimeVersion.RuntimeDomain.PUBLIC,
      /* major= */ 4,
      /* minor= */ 29,
      /* patch= */ 3,
      /* suffix= */ "",
      AndroidInputEventConfigOuterClass.class.getName());
  }
  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistryLite registry) {
  }

  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistry registry) {
    registerAllExtensions(
        (com.google.protobuf.ExtensionRegistryLite) registry);
  }
  public interface AndroidInputEventConfigOrBuilder extends
      // @@protoc_insertion_point(interface_extends:perfetto.protos.AndroidInputEventConfig)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <pre>
     * The tracing mode to use. If unspecified, it will default to
     * TRACE_MODE_USE_RULES.
     * </pre>
     *
     * <code>optional .perfetto.protos.AndroidInputEventConfig.TraceMode mode = 1;</code>
     * @return Whether the mode field is set.
     */
    boolean hasMode();
    /**
     * <pre>
     * The tracing mode to use. If unspecified, it will default to
     * TRACE_MODE_USE_RULES.
     * </pre>
     *
     * <code>optional .perfetto.protos.AndroidInputEventConfig.TraceMode mode = 1;</code>
     * @return The mode.
     */
    perfetto.protos.AndroidInputEventConfigOuterClass.AndroidInputEventConfig.TraceMode getMode();

    /**
     * <pre>
     * The list of rules to use to determine the trace level of events.
     * Each event will be traced using the TraceLevel of the first rule that it
     * triggers from this list. The rules are evaluated in the order in which they
     * are specified. If an event does not match any of the rules,
     * TRACE_LEVEL_NONE will be used by default.
     * </pre>
     *
     * <code>repeated .perfetto.protos.AndroidInputEventConfig.TraceRule rules = 2;</code>
     */
    java.util.List<perfetto.protos.AndroidInputEventConfigOuterClass.AndroidInputEventConfig.TraceRule> 
        getRulesList();
    /**
     * <pre>
     * The list of rules to use to determine the trace level of events.
     * Each event will be traced using the TraceLevel of the first rule that it
     * triggers from this list. The rules are evaluated in the order in which they
     * are specified. If an event does not match any of the rules,
     * TRACE_LEVEL_NONE will be used by default.
     * </pre>
     *
     * <code>repeated .perfetto.protos.AndroidInputEventConfig.TraceRule rules = 2;</code>
     */
    perfetto.protos.AndroidInputEventConfigOuterClass.AndroidInputEventConfig.TraceRule getRules(int index);
    /**
     * <pre>
     * The list of rules to use to determine the trace level of events.
     * Each event will be traced using the TraceLevel of the first rule that it
     * triggers from this list. The rules are evaluated in the order in which they
     * are specified. If an event does not match any of the rules,
     * TRACE_LEVEL_NONE will be used by default.
     * </pre>
     *
     * <code>repeated .perfetto.protos.AndroidInputEventConfig.TraceRule rules = 2;</code>
     */
    int getRulesCount();
    /**
     * <pre>
     * The list of rules to use to determine the trace level of events.
     * Each event will be traced using the TraceLevel of the first rule that it
     * triggers from this list. The rules are evaluated in the order in which they
     * are specified. If an event does not match any of the rules,
     * TRACE_LEVEL_NONE will be used by default.
     * </pre>
     *
     * <code>repeated .perfetto.protos.AndroidInputEventConfig.TraceRule rules = 2;</code>
     */
    java.util.List<? extends perfetto.protos.AndroidInputEventConfigOuterClass.AndroidInputEventConfig.TraceRuleOrBuilder> 
        getRulesOrBuilderList();
    /**
     * <pre>
     * The list of rules to use to determine the trace level of events.
     * Each event will be traced using the TraceLevel of the first rule that it
     * triggers from this list. The rules are evaluated in the order in which they
     * are specified. If an event does not match any of the rules,
     * TRACE_LEVEL_NONE will be used by default.
     * </pre>
     *
     * <code>repeated .perfetto.protos.AndroidInputEventConfig.TraceRule rules = 2;</code>
     */
    perfetto.protos.AndroidInputEventConfigOuterClass.AndroidInputEventConfig.TraceRuleOrBuilder getRulesOrBuilder(
        int index);

    /**
     * <pre>
     * Trace input events processed by the system as they are being dispatched
     * to application windows. All trace rules will apply.
     * - If this flag is used without enabling trace_dispatcher_window_dispatch,
     * it will
     * trace InputDispatcher's inbound events (which does not include events
     * synthesized within InputDispatcher) that match the rules.
     * - If used with trace_dispatcher_window_dispatch, all inbound and outbound
     * events
     * matching the rules, including all events synthesized within
     * InputDispatcher, will be traced.
     * </pre>
     *
     * <code>optional bool trace_dispatcher_input_events = 3;</code>
     * @return Whether the traceDispatcherInputEvents field is set.
     */
    boolean hasTraceDispatcherInputEvents();
    /**
     * <pre>
     * Trace input events processed by the system as they are being dispatched
     * to application windows. All trace rules will apply.
     * - If this flag is used without enabling trace_dispatcher_window_dispatch,
     * it will
     * trace InputDispatcher's inbound events (which does not include events
     * synthesized within InputDispatcher) that match the rules.
     * - If used with trace_dispatcher_window_dispatch, all inbound and outbound
     * events
     * matching the rules, including all events synthesized within
     * InputDispatcher, will be traced.
     * </pre>
     *
     * <code>optional bool trace_dispatcher_input_events = 3;</code>
     * @return The traceDispatcherInputEvents.
     */
    boolean getTraceDispatcherInputEvents();

    /**
     * <pre>
     * Trace details about which windows the system is sending each input event
     * to. All trace rules will apply.
     * </pre>
     *
     * <code>optional bool trace_dispatcher_window_dispatch = 4;</code>
     * @return Whether the traceDispatcherWindowDispatch field is set.
     */
    boolean hasTraceDispatcherWindowDispatch();
    /**
     * <pre>
     * Trace details about which windows the system is sending each input event
     * to. All trace rules will apply.
     * </pre>
     *
     * <code>optional bool trace_dispatcher_window_dispatch = 4;</code>
     * @return The traceDispatcherWindowDispatch.
     */
    boolean getTraceDispatcherWindowDispatch();
  }
  /**
   * <pre>
   * Custom configuration for the "android.input.inputevent" data source.
   *
   * NOTE: Input traces can only be taken on debuggable (userdebug/eng) builds!
   *
   * Next ID: 5
   * </pre>
   *
   * Protobuf type {@code perfetto.protos.AndroidInputEventConfig}
   */
  public static final class AndroidInputEventConfig extends
      com.google.protobuf.GeneratedMessage implements
      // @@protoc_insertion_point(message_implements:perfetto.protos.AndroidInputEventConfig)
      AndroidInputEventConfigOrBuilder {
  private static final long serialVersionUID = 0L;
    static {
      com.google.protobuf.RuntimeVersion.validateProtobufGencodeVersion(
        com.google.protobuf.RuntimeVersion.RuntimeDomain.PUBLIC,
        /* major= */ 4,
        /* minor= */ 29,
        /* patch= */ 3,
        /* suffix= */ "",
        AndroidInputEventConfig.class.getName());
    }
    // Use AndroidInputEventConfig.newBuilder() to construct.
    private AndroidInputEventConfig(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
    }
    private AndroidInputEventConfig() {
      mode_ = 0;
      rules_ = java.util.Collections.emptyList();
    }

    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return perfetto.protos.AndroidInputEventConfigOuterClass.internal_static_perfetto_protos_AndroidInputEventConfig_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return perfetto.protos.AndroidInputEventConfigOuterClass.internal_static_perfetto_protos_AndroidInputEventConfig_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              perfetto.protos.AndroidInputEventConfigOuterClass.AndroidInputEventConfig.class, perfetto.protos.AndroidInputEventConfigOuterClass.AndroidInputEventConfig.Builder.class);
    }

    /**
     * <pre>
     * Trace modes are tracing presets that are included in the system.
     * </pre>
     *
     * Protobuf enum {@code perfetto.protos.AndroidInputEventConfig.TraceMode}
     */
    public enum TraceMode
        implements com.google.protobuf.ProtocolMessageEnum {
      /**
       * <pre>
       * Preset mode for maximal tracing.
       * WARNING: This will bypass all privacy measures on debuggable builds, and
       * will record all
       * input events processed by the system, regardless of the context
       * in which they were processed. It should only be used for tracing
       * on a local device or for tests. It should NEVER be used for
       * field tracing.
       * </pre>
       *
       * <code>TRACE_MODE_TRACE_ALL = 0;</code>
       */
      TRACE_MODE_TRACE_ALL(0),
      /**
       * <pre>
       * Use the tracing rules defined in this config to specify what events to
       * trace.
       * </pre>
       *
       * <code>TRACE_MODE_USE_RULES = 1;</code>
       */
      TRACE_MODE_USE_RULES(1),
      ;

      static {
        com.google.protobuf.RuntimeVersion.validateProtobufGencodeVersion(
          com.google.protobuf.RuntimeVersion.RuntimeDomain.PUBLIC,
          /* major= */ 4,
          /* minor= */ 29,
          /* patch= */ 3,
          /* suffix= */ "",
          TraceMode.class.getName());
      }
      /**
       * <pre>
       * Preset mode for maximal tracing.
       * WARNING: This will bypass all privacy measures on debuggable builds, and
       * will record all
       * input events processed by the system, regardless of the context
       * in which they were processed. It should only be used for tracing
       * on a local device or for tests. It should NEVER be used for
       * field tracing.
       * </pre>
       *
       * <code>TRACE_MODE_TRACE_ALL = 0;</code>
       */
      public static final int TRACE_MODE_TRACE_ALL_VALUE = 0;
      /**
       * <pre>
       * Use the tracing rules defined in this config to specify what events to
       * trace.
       * </pre>
       *
       * <code>TRACE_MODE_USE_RULES = 1;</code>
       */
      public static final int TRACE_MODE_USE_RULES_VALUE = 1;


      public final int getNumber() {
        return value;
      }

      /**
       * @param value The numeric wire value of the corresponding enum entry.
       * @return The enum associated with the given numeric wire value.
       * @deprecated Use {@link #forNumber(int)} instead.
       */
      @java.lang.Deprecated
      public static TraceMode valueOf(int value) {
        return forNumber(value);
      }

      /**
       * @param value The numeric wire value of the corresponding enum entry.
       * @return The enum associated with the given numeric wire value.
       */
      public static TraceMode forNumber(int value) {
        switch (value) {
          case 0: return TRACE_MODE_TRACE_ALL;
          case 1: return TRACE_MODE_USE_RULES;
          default: return null;
        }
      }

      public static com.google.protobuf.Internal.EnumLiteMap<TraceMode>
          internalGetValueMap() {
        return internalValueMap;
      }
      private static final com.google.protobuf.Internal.EnumLiteMap<
          TraceMode> internalValueMap =
            new com.google.protobuf.Internal.EnumLiteMap<TraceMode>() {
              public TraceMode findValueByNumber(int number) {
                return TraceMode.forNumber(number);
              }
            };

      public final com.google.protobuf.Descriptors.EnumValueDescriptor
          getValueDescriptor() {
        return getDescriptor().getValues().get(ordinal());
      }
      public final com.google.protobuf.Descriptors.EnumDescriptor
          getDescriptorForType() {
        return getDescriptor();
      }
      public static final com.google.protobuf.Descriptors.EnumDescriptor
          getDescriptor() {
        return perfetto.protos.AndroidInputEventConfigOuterClass.AndroidInputEventConfig.getDescriptor().getEnumTypes().get(0);
      }

      private static final TraceMode[] VALUES = values();

      public static TraceMode valueOf(
          com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
        if (desc.getType() != getDescriptor()) {
          throw new java.lang.IllegalArgumentException(
            "EnumValueDescriptor is not for this type.");
        }
        return VALUES[desc.getIndex()];
      }

      private final int value;

      private TraceMode(int value) {
        this.value = value;
      }

      // @@protoc_insertion_point(enum_scope:perfetto.protos.AndroidInputEventConfig.TraceMode)
    }

    /**
     * <pre>
     * The level of tracing that should be applied to an event.
     * </pre>
     *
     * Protobuf enum {@code perfetto.protos.AndroidInputEventConfig.TraceLevel}
     */
    public enum TraceLevel
        implements com.google.protobuf.ProtocolMessageEnum {
      /**
       * <pre>
       * Do not trace the input event.
       * </pre>
       *
       * <code>TRACE_LEVEL_NONE = 0;</code>
       */
      TRACE_LEVEL_NONE(0),
      /**
       * <pre>
       * Trace the event as a redacted event, where certain sensitive fields are
       * omitted from the trace, including the coordinates of pointer events and
       * the key/scan codes of key events.
       * </pre>
       *
       * <code>TRACE_LEVEL_REDACTED = 1;</code>
       */
      TRACE_LEVEL_REDACTED(1),
      /**
       * <pre>
       * Trace the complete event.
       * </pre>
       *
       * <code>TRACE_LEVEL_COMPLETE = 2;</code>
       */
      TRACE_LEVEL_COMPLETE(2),
      ;

      static {
        com.google.protobuf.RuntimeVersion.validateProtobufGencodeVersion(
          com.google.protobuf.RuntimeVersion.RuntimeDomain.PUBLIC,
          /* major= */ 4,
          /* minor= */ 29,
          /* patch= */ 3,
          /* suffix= */ "",
          TraceLevel.class.getName());
      }
      /**
       * <pre>
       * Do not trace the input event.
       * </pre>
       *
       * <code>TRACE_LEVEL_NONE = 0;</code>
       */
      public static final int TRACE_LEVEL_NONE_VALUE = 0;
      /**
       * <pre>
       * Trace the event as a redacted event, where certain sensitive fields are
       * omitted from the trace, including the coordinates of pointer events and
       * the key/scan codes of key events.
       * </pre>
       *
       * <code>TRACE_LEVEL_REDACTED = 1;</code>
       */
      public static final int TRACE_LEVEL_REDACTED_VALUE = 1;
      /**
       * <pre>
       * Trace the complete event.
       * </pre>
       *
       * <code>TRACE_LEVEL_COMPLETE = 2;</code>
       */
      public static final int TRACE_LEVEL_COMPLETE_VALUE = 2;


      public final int getNumber() {
        return value;
      }

      /**
       * @param value The numeric wire value of the corresponding enum entry.
       * @return The enum associated with the given numeric wire value.
       * @deprecated Use {@link #forNumber(int)} instead.
       */
      @java.lang.Deprecated
      public static TraceLevel valueOf(int value) {
        return forNumber(value);
      }

      /**
       * @param value The numeric wire value of the corresponding enum entry.
       * @return The enum associated with the given numeric wire value.
       */
      public static TraceLevel forNumber(int value) {
        switch (value) {
          case 0: return TRACE_LEVEL_NONE;
          case 1: return TRACE_LEVEL_REDACTED;
          case 2: return TRACE_LEVEL_COMPLETE;
          default: return null;
        }
      }

      public static com.google.protobuf.Internal.EnumLiteMap<TraceLevel>
          internalGetValueMap() {
        return internalValueMap;
      }
      private static final com.google.protobuf.Internal.EnumLiteMap<
          TraceLevel> internalValueMap =
            new com.google.protobuf.Internal.EnumLiteMap<TraceLevel>() {
              public TraceLevel findValueByNumber(int number) {
                return TraceLevel.forNumber(number);
              }
            };

      public final com.google.protobuf.Descriptors.EnumValueDescriptor
          getValueDescriptor() {
        return getDescriptor().getValues().get(ordinal());
      }
      public final com.google.protobuf.Descriptors.EnumDescriptor
          getDescriptorForType() {
        return getDescriptor();
      }
      public static final com.google.protobuf.Descriptors.EnumDescriptor
          getDescriptor() {
        return perfetto.protos.AndroidInputEventConfigOuterClass.AndroidInputEventConfig.getDescriptor().getEnumTypes().get(1);
      }

      private static final TraceLevel[] VALUES = values();

      public static TraceLevel valueOf(
          com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
        if (desc.getType() != getDescriptor()) {
          throw new java.lang.IllegalArgumentException(
            "EnumValueDescriptor is not for this type.");
        }
        return VALUES[desc.getIndex()];
      }

      private final int value;

      private TraceLevel(int value) {
        this.value = value;
      }

      // @@protoc_insertion_point(enum_scope:perfetto.protos.AndroidInputEventConfig.TraceLevel)
    }

    public interface TraceRuleOrBuilder extends
        // @@protoc_insertion_point(interface_extends:perfetto.protos.AndroidInputEventConfig.TraceRule)
        com.google.protobuf.MessageOrBuilder {

      /**
       * <pre>
       * The trace level to be used for events that trigger this rule.
       * If unspecified, TRACE_LEVEL_NONE will be used by default.
       * </pre>
       *
       * <code>optional .perfetto.protos.AndroidInputEventConfig.TraceLevel trace_level = 1;</code>
       * @return Whether the traceLevel field is set.
       */
      boolean hasTraceLevel();
      /**
       * <pre>
       * The trace level to be used for events that trigger this rule.
       * If unspecified, TRACE_LEVEL_NONE will be used by default.
       * </pre>
       *
       * <code>optional .perfetto.protos.AndroidInputEventConfig.TraceLevel trace_level = 1;</code>
       * @return The traceLevel.
       */
      perfetto.protos.AndroidInputEventConfigOuterClass.AndroidInputEventConfig.TraceLevel getTraceLevel();

      /**
       * <pre>
       * Package matchers
       *
       * Respectively matches if all or any of the target apps for this event are
       * contained in the specified list of package names.
       *
       * Intended usage:
       * - Use match_all_packages to selectively allow tracing for the listed
       * packages.
       * - Use match_any_packages to selectively deny tracing for certain
       * packages.
       *
       * WARNING: Great care must be taken when designing rules for field tracing!
       * This is because each event is almost always sent to more than
       * one app.
       * For example, when allowing tracing for a package that has a
       * spy window
       * over the display (e.g. SystemUI) using match_any_packages,
       * essentially all input will be recorded on that display. This is
       * because the events will be sent to the spy as well as the
       * foreground app, and regardless of what the foreground app is,
       * the event will end up being traced.
       * Alternatively, when attempting to block tracing for specific
       * packages using
       * match_all_packages, no events will likely be blocked. This is
       * because the event will also be sent to other apps (such as, but
       * not limited to, ones with spy windows), so the matcher will not
       * match unless all other targets are also listed under the
       * match_all_packages list.
       * </pre>
       *
       * <code>repeated string match_all_packages = 2;</code>
       * @return A list containing the matchAllPackages.
       */
      java.util.List<java.lang.String>
          getMatchAllPackagesList();
      /**
       * <pre>
       * Package matchers
       *
       * Respectively matches if all or any of the target apps for this event are
       * contained in the specified list of package names.
       *
       * Intended usage:
       * - Use match_all_packages to selectively allow tracing for the listed
       * packages.
       * - Use match_any_packages to selectively deny tracing for certain
       * packages.
       *
       * WARNING: Great care must be taken when designing rules for field tracing!
       * This is because each event is almost always sent to more than
       * one app.
       * For example, when allowing tracing for a package that has a
       * spy window
       * over the display (e.g. SystemUI) using match_any_packages,
       * essentially all input will be recorded on that display. This is
       * because the events will be sent to the spy as well as the
       * foreground app, and regardless of what the foreground app is,
       * the event will end up being traced.
       * Alternatively, when attempting to block tracing for specific
       * packages using
       * match_all_packages, no events will likely be blocked. This is
       * because the event will also be sent to other apps (such as, but
       * not limited to, ones with spy windows), so the matcher will not
       * match unless all other targets are also listed under the
       * match_all_packages list.
       * </pre>
       *
       * <code>repeated string match_all_packages = 2;</code>
       * @return The count of matchAllPackages.
       */
      int getMatchAllPackagesCount();
      /**
       * <pre>
       * Package matchers
       *
       * Respectively matches if all or any of the target apps for this event are
       * contained in the specified list of package names.
       *
       * Intended usage:
       * - Use match_all_packages to selectively allow tracing for the listed
       * packages.
       * - Use match_any_packages to selectively deny tracing for certain
       * packages.
       *
       * WARNING: Great care must be taken when designing rules for field tracing!
       * This is because each event is almost always sent to more than
       * one app.
       * For example, when allowing tracing for a package that has a
       * spy window
       * over the display (e.g. SystemUI) using match_any_packages,
       * essentially all input will be recorded on that display. This is
       * because the events will be sent to the spy as well as the
       * foreground app, and regardless of what the foreground app is,
       * the event will end up being traced.
       * Alternatively, when attempting to block tracing for specific
       * packages using
       * match_all_packages, no events will likely be blocked. This is
       * because the event will also be sent to other apps (such as, but
       * not limited to, ones with spy windows), so the matcher will not
       * match unless all other targets are also listed under the
       * match_all_packages list.
       * </pre>
       *
       * <code>repeated string match_all_packages = 2;</code>
       * @param index The index of the element to return.
       * @return The matchAllPackages at the given index.
       */
      java.lang.String getMatchAllPackages(int index);
      /**
       * <pre>
       * Package matchers
       *
       * Respectively matches if all or any of the target apps for this event are
       * contained in the specified list of package names.
       *
       * Intended usage:
       * - Use match_all_packages to selectively allow tracing for the listed
       * packages.
       * - Use match_any_packages to selectively deny tracing for certain
       * packages.
       *
       * WARNING: Great care must be taken when designing rules for field tracing!
       * This is because each event is almost always sent to more than
       * one app.
       * For example, when allowing tracing for a package that has a
       * spy window
       * over the display (e.g. SystemUI) using match_any_packages,
       * essentially all input will be recorded on that display. This is
       * because the events will be sent to the spy as well as the
       * foreground app, and regardless of what the foreground app is,
       * the event will end up being traced.
       * Alternatively, when attempting to block tracing for specific
       * packages using
       * match_all_packages, no events will likely be blocked. This is
       * because the event will also be sent to other apps (such as, but
       * not limited to, ones with spy windows), so the matcher will not
       * match unless all other targets are also listed under the
       * match_all_packages list.
       * </pre>
       *
       * <code>repeated string match_all_packages = 2;</code>
       * @param index The index of the value to return.
       * @return The bytes of the matchAllPackages at the given index.
       */
      com.google.protobuf.ByteString
          getMatchAllPackagesBytes(int index);

      /**
       * <code>repeated string match_any_packages = 3;</code>
       * @return A list containing the matchAnyPackages.
       */
      java.util.List<java.lang.String>
          getMatchAnyPackagesList();
      /**
       * <code>repeated string match_any_packages = 3;</code>
       * @return The count of matchAnyPackages.
       */
      int getMatchAnyPackagesCount();
      /**
       * <code>repeated string match_any_packages = 3;</code>
       * @param index The index of the element to return.
       * @return The matchAnyPackages at the given index.
       */
      java.lang.String getMatchAnyPackages(int index);
      /**
       * <code>repeated string match_any_packages = 3;</code>
       * @param index The index of the value to return.
       * @return The bytes of the matchAnyPackages at the given index.
       */
      com.google.protobuf.ByteString
          getMatchAnyPackagesBytes(int index);

      /**
       * <pre>
       * Matches if the event is secure, which means that at least one of the
       * targets of this event is using the window flag FLAG_SECURE.
       * </pre>
       *
       * <code>optional bool match_secure = 4;</code>
       * @return Whether the matchSecure field is set.
       */
      boolean hasMatchSecure();
      /**
       * <pre>
       * Matches if the event is secure, which means that at least one of the
       * targets of this event is using the window flag FLAG_SECURE.
       * </pre>
       *
       * <code>optional bool match_secure = 4;</code>
       * @return The matchSecure.
       */
      boolean getMatchSecure();

      /**
       * <pre>
       * Matches if there was an active IME connection while this event was being
       * processed.
       * </pre>
       *
       * <code>optional bool match_ime_connection_active = 5;</code>
       * @return Whether the matchImeConnectionActive field is set.
       */
      boolean hasMatchImeConnectionActive();
      /**
       * <pre>
       * Matches if there was an active IME connection while this event was being
       * processed.
       * </pre>
       *
       * <code>optional bool match_ime_connection_active = 5;</code>
       * @return The matchImeConnectionActive.
       */
      boolean getMatchImeConnectionActive();
    }
    /**
     * <pre>
     * A rule that specifies the TraceLevel for an event based on matching
     * conditions. All matchers in the rule are optional. To trigger this rule, an
     * event must match all of its specified matchers (i.e. the matchers function
     * like a series of conditions connected by a logical 'AND' operator). A rule
     * with no specified matchers will match all events. Next ID: 6
     * </pre>
     *
     * Protobuf type {@code perfetto.protos.AndroidInputEventConfig.TraceRule}
     */
    public static final class TraceRule extends
        com.google.protobuf.GeneratedMessage implements
        // @@protoc_insertion_point(message_implements:perfetto.protos.AndroidInputEventConfig.TraceRule)
        TraceRuleOrBuilder {
    private static final long serialVersionUID = 0L;
      static {
        com.google.protobuf.RuntimeVersion.validateProtobufGencodeVersion(
          com.google.protobuf.RuntimeVersion.RuntimeDomain.PUBLIC,
          /* major= */ 4,
          /* minor= */ 29,
          /* patch= */ 3,
          /* suffix= */ "",
          TraceRule.class.getName());
      }
      // Use TraceRule.newBuilder() to construct.
      private TraceRule(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
        super(builder);
      }
      private TraceRule() {
        traceLevel_ = 0;
        matchAllPackages_ =
            com.google.protobuf.LazyStringArrayList.emptyList();
        matchAnyPackages_ =
            com.google.protobuf.LazyStringArrayList.emptyList();
      }

      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return perfetto.protos.AndroidInputEventConfigOuterClass.internal_static_perfetto_protos_AndroidInputEventConfig_TraceRule_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return perfetto.protos.AndroidInputEventConfigOuterClass.internal_static_perfetto_protos_AndroidInputEventConfig_TraceRule_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                perfetto.protos.AndroidInputEventConfigOuterClass.AndroidInputEventConfig.TraceRule.class, perfetto.protos.AndroidInputEventConfigOuterClass.AndroidInputEventConfig.TraceRule.Builder.class);
      }

      private int bitField0_;
      public static final int TRACE_LEVEL_FIELD_NUMBER = 1;
      private int traceLevel_ = 0;
      /**
       * <pre>
       * The trace level to be used for events that trigger this rule.
       * If unspecified, TRACE_LEVEL_NONE will be used by default.
       * </pre>
       *
       * <code>optional .perfetto.protos.AndroidInputEventConfig.TraceLevel trace_level = 1;</code>
       * @return Whether the traceLevel field is set.
       */
      @java.lang.Override public boolean hasTraceLevel() {
        return ((bitField0_ & 0x00000001) != 0);
      }
      /**
       * <pre>
       * The trace level to be used for events that trigger this rule.
       * If unspecified, TRACE_LEVEL_NONE will be used by default.
       * </pre>
       *
       * <code>optional .perfetto.protos.AndroidInputEventConfig.TraceLevel trace_level = 1;</code>
       * @return The traceLevel.
       */
      @java.lang.Override public perfetto.protos.AndroidInputEventConfigOuterClass.AndroidInputEventConfig.TraceLevel getTraceLevel() {
        perfetto.protos.AndroidInputEventConfigOuterClass.AndroidInputEventConfig.TraceLevel result = perfetto.protos.AndroidInputEventConfigOuterClass.AndroidInputEventConfig.TraceLevel.forNumber(traceLevel_);
        return result == null ? perfetto.protos.AndroidInputEventConfigOuterClass.AndroidInputEventConfig.TraceLevel.TRACE_LEVEL_NONE : result;
      }

      public static final int MATCH_ALL_PACKAGES_FIELD_NUMBER = 2;
      @SuppressWarnings("serial")
      private com.google.protobuf.LazyStringArrayList matchAllPackages_ =
          com.google.protobuf.LazyStringArrayList.emptyList();
      /**
       * <pre>
       * Package matchers
       *
       * Respectively matches if all or any of the target apps for this event are
       * contained in the specified list of package names.
       *
       * Intended usage:
       * - Use match_all_packages to selectively allow tracing for the listed
       * packages.
       * - Use match_any_packages to selectively deny tracing for certain
       * packages.
       *
       * WARNING: Great care must be taken when designing rules for field tracing!
       * This is because each event is almost always sent to more than
       * one app.
       * For example, when allowing tracing for a package that has a
       * spy window
       * over the display (e.g. SystemUI) using match_any_packages,
       * essentially all input will be recorded on that display. This is
       * because the events will be sent to the spy as well as the
       * foreground app, and regardless of what the foreground app is,
       * the event will end up being traced.
       * Alternatively, when attempting to block tracing for specific
       * packages using
       * match_all_packages, no events will likely be blocked. This is
       * because the event will also be sent to other apps (such as, but
       * not limited to, ones with spy windows), so the matcher will not
       * match unless all other targets are also listed under the
       * match_all_packages list.
       * </pre>
       *
       * <code>repeated string match_all_packages = 2;</code>
       * @return A list containing the matchAllPackages.
       */
      public com.google.protobuf.ProtocolStringList
          getMatchAllPackagesList() {
        return matchAllPackages_;
      }
      /**
       * <pre>
       * Package matchers
       *
       * Respectively matches if all or any of the target apps for this event are
       * contained in the specified list of package names.
       *
       * Intended usage:
       * - Use match_all_packages to selectively allow tracing for the listed
       * packages.
       * - Use match_any_packages to selectively deny tracing for certain
       * packages.
       *
       * WARNING: Great care must be taken when designing rules for field tracing!
       * This is because each event is almost always sent to more than
       * one app.
       * For example, when allowing tracing for a package that has a
       * spy window
       * over the display (e.g. SystemUI) using match_any_packages,
       * essentially all input will be recorded on that display. This is
       * because the events will be sent to the spy as well as the
       * foreground app, and regardless of what the foreground app is,
       * the event will end up being traced.
       * Alternatively, when attempting to block tracing for specific
       * packages using
       * match_all_packages, no events will likely be blocked. This is
       * because the event will also be sent to other apps (such as, but
       * not limited to, ones with spy windows), so the matcher will not
       * match unless all other targets are also listed under the
       * match_all_packages list.
       * </pre>
       *
       * <code>repeated string match_all_packages = 2;</code>
       * @return The count of matchAllPackages.
       */
      public int getMatchAllPackagesCount() {
        return matchAllPackages_.size();
      }
      /**
       * <pre>
       * Package matchers
       *
       * Respectively matches if all or any of the target apps for this event are
       * contained in the specified list of package names.
       *
       * Intended usage:
       * - Use match_all_packages to selectively allow tracing for the listed
       * packages.
       * - Use match_any_packages to selectively deny tracing for certain
       * packages.
       *
       * WARNING: Great care must be taken when designing rules for field tracing!
       * This is because each event is almost always sent to more than
       * one app.
       * For example, when allowing tracing for a package that has a
       * spy window
       * over the display (e.g. SystemUI) using match_any_packages,
       * essentially all input will be recorded on that display. This is
       * because the events will be sent to the spy as well as the
       * foreground app, and regardless of what the foreground app is,
       * the event will end up being traced.
       * Alternatively, when attempting to block tracing for specific
       * packages using
       * match_all_packages, no events will likely be blocked. This is
       * because the event will also be sent to other apps (such as, but
       * not limited to, ones with spy windows), so the matcher will not
       * match unless all other targets are also listed under the
       * match_all_packages list.
       * </pre>
       *
       * <code>repeated string match_all_packages = 2;</code>
       * @param index The index of the element to return.
       * @return The matchAllPackages at the given index.
       */
      public java.lang.String getMatchAllPackages(int index) {
        return matchAllPackages_.get(index);
      }
      /**
       * <pre>
       * Package matchers
       *
       * Respectively matches if all or any of the target apps for this event are
       * contained in the specified list of package names.
       *
       * Intended usage:
       * - Use match_all_packages to selectively allow tracing for the listed
       * packages.
       * - Use match_any_packages to selectively deny tracing for certain
       * packages.
       *
       * WARNING: Great care must be taken when designing rules for field tracing!
       * This is because each event is almost always sent to more than
       * one app.
       * For example, when allowing tracing for a package that has a
       * spy window
       * over the display (e.g. SystemUI) using match_any_packages,
       * essentially all input will be recorded on that display. This is
       * because the events will be sent to the spy as well as the
       * foreground app, and regardless of what the foreground app is,
       * the event will end up being traced.
       * Alternatively, when attempting to block tracing for specific
       * packages using
       * match_all_packages, no events will likely be blocked. This is
       * because the event will also be sent to other apps (such as, but
       * not limited to, ones with spy windows), so the matcher will not
       * match unless all other targets are also listed under the
       * match_all_packages list.
       * </pre>
       *
       * <code>repeated string match_all_packages = 2;</code>
       * @param index The index of the value to return.
       * @return The bytes of the matchAllPackages at the given index.
       */
      public com.google.protobuf.ByteString
          getMatchAllPackagesBytes(int index) {
        return matchAllPackages_.getByteString(index);
      }

      public static final int MATCH_ANY_PACKAGES_FIELD_NUMBER = 3;
      @SuppressWarnings("serial")
      private com.google.protobuf.LazyStringArrayList matchAnyPackages_ =
          com.google.protobuf.LazyStringArrayList.emptyList();
      /**
       * <code>repeated string match_any_packages = 3;</code>
       * @return A list containing the matchAnyPackages.
       */
      public com.google.protobuf.ProtocolStringList
          getMatchAnyPackagesList() {
        return matchAnyPackages_;
      }
      /**
       * <code>repeated string match_any_packages = 3;</code>
       * @return The count of matchAnyPackages.
       */
      public int getMatchAnyPackagesCount() {
        return matchAnyPackages_.size();
      }
      /**
       * <code>repeated string match_any_packages = 3;</code>
       * @param index The index of the element to return.
       * @return The matchAnyPackages at the given index.
       */
      public java.lang.String getMatchAnyPackages(int index) {
        return matchAnyPackages_.get(index);
      }
      /**
       * <code>repeated string match_any_packages = 3;</code>
       * @param index The index of the value to return.
       * @return The bytes of the matchAnyPackages at the given index.
       */
      public com.google.protobuf.ByteString
          getMatchAnyPackagesBytes(int index) {
        return matchAnyPackages_.getByteString(index);
      }

      public static final int MATCH_SECURE_FIELD_NUMBER = 4;
      private boolean matchSecure_ = false;
      /**
       * <pre>
       * Matches if the event is secure, which means that at least one of the
       * targets of this event is using the window flag FLAG_SECURE.
       * </pre>
       *
       * <code>optional bool match_secure = 4;</code>
       * @return Whether the matchSecure field is set.
       */
      @java.lang.Override
      public boolean hasMatchSecure() {
        return ((bitField0_ & 0x00000002) != 0);
      }
      /**
       * <pre>
       * Matches if the event is secure, which means that at least one of the
       * targets of this event is using the window flag FLAG_SECURE.
       * </pre>
       *
       * <code>optional bool match_secure = 4;</code>
       * @return The matchSecure.
       */
      @java.lang.Override
      public boolean getMatchSecure() {
        return matchSecure_;
      }

      public static final int MATCH_IME_CONNECTION_ACTIVE_FIELD_NUMBER = 5;
      private boolean matchImeConnectionActive_ = false;
      /**
       * <pre>
       * Matches if there was an active IME connection while this event was being
       * processed.
       * </pre>
       *
       * <code>optional bool match_ime_connection_active = 5;</code>
       * @return Whether the matchImeConnectionActive field is set.
       */
      @java.lang.Override
      public boolean hasMatchImeConnectionActive() {
        return ((bitField0_ & 0x00000004) != 0);
      }
      /**
       * <pre>
       * Matches if there was an active IME connection while this event was being
       * processed.
       * </pre>
       *
       * <code>optional bool match_ime_connection_active = 5;</code>
       * @return The matchImeConnectionActive.
       */
      @java.lang.Override
      public boolean getMatchImeConnectionActive() {
        return matchImeConnectionActive_;
      }

      private byte memoizedIsInitialized = -1;
      @java.lang.Override
      public final boolean isInitialized() {
        byte isInitialized = memoizedIsInitialized;
        if (isInitialized == 1) return true;
        if (isInitialized == 0) return false;

        memoizedIsInitialized = 1;
        return true;
      }

      @java.lang.Override
      public void writeTo(com.google.protobuf.CodedOutputStream output)
                          throws java.io.IOException {
        if (((bitField0_ & 0x00000001) != 0)) {
          output.writeEnum(1, traceLevel_);
        }
        for (int i = 0; i < matchAllPackages_.size(); i++) {
          com.google.protobuf.GeneratedMessage.writeString(output, 2, matchAllPackages_.getRaw(i));
        }
        for (int i = 0; i < matchAnyPackages_.size(); i++) {
          com.google.protobuf.GeneratedMessage.writeString(output, 3, matchAnyPackages_.getRaw(i));
        }
        if (((bitField0_ & 0x00000002) != 0)) {
          output.writeBool(4, matchSecure_);
        }
        if (((bitField0_ & 0x00000004) != 0)) {
          output.writeBool(5, matchImeConnectionActive_);
        }
        getUnknownFields().writeTo(output);
      }

      @java.lang.Override
      public int getSerializedSize() {
        int size = memoizedSize;
        if (size != -1) return size;

        size = 0;
        if (((bitField0_ & 0x00000001) != 0)) {
          size += com.google.protobuf.CodedOutputStream
            .computeEnumSize(1, traceLevel_);
        }
        {
          int dataSize = 0;
          for (int i = 0; i < matchAllPackages_.size(); i++) {
            dataSize += computeStringSizeNoTag(matchAllPackages_.getRaw(i));
          }
          size += dataSize;
          size += 1 * getMatchAllPackagesList().size();
        }
        {
          int dataSize = 0;
          for (int i = 0; i < matchAnyPackages_.size(); i++) {
            dataSize += computeStringSizeNoTag(matchAnyPackages_.getRaw(i));
          }
          size += dataSize;
          size += 1 * getMatchAnyPackagesList().size();
        }
        if (((bitField0_ & 0x00000002) != 0)) {
          size += com.google.protobuf.CodedOutputStream
            .computeBoolSize(4, matchSecure_);
        }
        if (((bitField0_ & 0x00000004) != 0)) {
          size += com.google.protobuf.CodedOutputStream
            .computeBoolSize(5, matchImeConnectionActive_);
        }
        size += getUnknownFields().getSerializedSize();
        memoizedSize = size;
        return size;
      }

      @java.lang.Override
      public boolean equals(final java.lang.Object obj) {
        if (obj == this) {
         return true;
        }
        if (!(obj instanceof perfetto.protos.AndroidInputEventConfigOuterClass.AndroidInputEventConfig.TraceRule)) {
          return super.equals(obj);
        }
        perfetto.protos.AndroidInputEventConfigOuterClass.AndroidInputEventConfig.TraceRule other = (perfetto.protos.AndroidInputEventConfigOuterClass.AndroidInputEventConfig.TraceRule) obj;

        if (hasTraceLevel() != other.hasTraceLevel()) return false;
        if (hasTraceLevel()) {
          if (traceLevel_ != other.traceLevel_) return false;
        }
        if (!getMatchAllPackagesList()
            .equals(other.getMatchAllPackagesList())) return false;
        if (!getMatchAnyPackagesList()
            .equals(other.getMatchAnyPackagesList())) return false;
        if (hasMatchSecure() != other.hasMatchSecure()) return false;
        if (hasMatchSecure()) {
          if (getMatchSecure()
              != other.getMatchSecure()) return false;
        }
        if (hasMatchImeConnectionActive() != other.hasMatchImeConnectionActive()) return false;
        if (hasMatchImeConnectionActive()) {
          if (getMatchImeConnectionActive()
              != other.getMatchImeConnectionActive()) return false;
        }
        if (!getUnknownFields().equals(other.getUnknownFields())) return false;
        return true;
      }

      @java.lang.Override
      public int hashCode() {
        if (memoizedHashCode != 0) {
          return memoizedHashCode;
        }
        int hash = 41;
        hash = (19 * hash) + getDescriptor().hashCode();
        if (hasTraceLevel()) {
          hash = (37 * hash) + TRACE_LEVEL_FIELD_NUMBER;
          hash = (53 * hash) + traceLevel_;
        }
        if (getMatchAllPackagesCount() > 0) {
          hash = (37 * hash) + MATCH_ALL_PACKAGES_FIELD_NUMBER;
          hash = (53 * hash) + getMatchAllPackagesList().hashCode();
        }
        if (getMatchAnyPackagesCount() > 0) {
          hash = (37 * hash) + MATCH_ANY_PACKAGES_FIELD_NUMBER;
          hash = (53 * hash) + getMatchAnyPackagesList().hashCode();
        }
        if (hasMatchSecure()) {
          hash = (37 * hash) + MATCH_SECURE_FIELD_NUMBER;
          hash = (53 * hash) + com.google.protobuf.Internal.hashBoolean(
              getMatchSecure());
        }
        if (hasMatchImeConnectionActive()) {
          hash = (37 * hash) + MATCH_IME_CONNECTION_ACTIVE_FIELD_NUMBER;
          hash = (53 * hash) + com.google.protobuf.Internal.hashBoolean(
              getMatchImeConnectionActive());
        }
        hash = (29 * hash) + getUnknownFields().hashCode();
        memoizedHashCode = hash;
        return hash;
      }

      public static perfetto.protos.AndroidInputEventConfigOuterClass.AndroidInputEventConfig.TraceRule parseFrom(
          java.nio.ByteBuffer data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static perfetto.protos.AndroidInputEventConfigOuterClass.AndroidInputEventConfig.TraceRule parseFrom(
          java.nio.ByteBuffer data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static perfetto.protos.AndroidInputEventConfigOuterClass.AndroidInputEventConfig.TraceRule parseFrom(
          com.google.protobuf.ByteString data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static perfetto.protos.AndroidInputEventConfigOuterClass.AndroidInputEventConfig.TraceRule parseFrom(
          com.google.protobuf.ByteString data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static perfetto.protos.AndroidInputEventConfigOuterClass.AndroidInputEventConfig.TraceRule parseFrom(byte[] data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static perfetto.protos.AndroidInputEventConfigOuterClass.AndroidInputEventConfig.TraceRule parseFrom(
          byte[] data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static perfetto.protos.AndroidInputEventConfigOuterClass.AndroidInputEventConfig.TraceRule parseFrom(java.io.InputStream input)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessage
            .parseWithIOException(PARSER, input);
      }
      public static perfetto.protos.AndroidInputEventConfigOuterClass.AndroidInputEventConfig.TraceRule parseFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessage
            .parseWithIOException(PARSER, input, extensionRegistry);
      }

      public static perfetto.protos.AndroidInputEventConfigOuterClass.AndroidInputEventConfig.TraceRule parseDelimitedFrom(java.io.InputStream input)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessage
            .parseDelimitedWithIOException(PARSER, input);
      }

      public static perfetto.protos.AndroidInputEventConfigOuterClass.AndroidInputEventConfig.TraceRule parseDelimitedFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessage
            .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
      }
      public static perfetto.protos.AndroidInputEventConfigOuterClass.AndroidInputEventConfig.TraceRule parseFrom(
          com.google.protobuf.CodedInputStream input)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessage
            .parseWithIOException(PARSER, input);
      }
      public static perfetto.protos.AndroidInputEventConfigOuterClass.AndroidInputEventConfig.TraceRule parseFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessage
            .parseWithIOException(PARSER, input, extensionRegistry);
      }

      @java.lang.Override
      public Builder newBuilderForType() { return newBuilder(); }
      public static Builder newBuilder() {
        return DEFAULT_INSTANCE.toBuilder();
      }
      public static Builder newBuilder(perfetto.protos.AndroidInputEventConfigOuterClass.AndroidInputEventConfig.TraceRule prototype) {
        return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
      }
      @java.lang.Override
      public Builder toBuilder() {
        return this == DEFAULT_INSTANCE
            ? new Builder() : new Builder().mergeFrom(this);
      }

      @java.lang.Override
      protected Builder newBuilderForType(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        Builder builder = new Builder(parent);
        return builder;
      }
      /**
       * <pre>
       * A rule that specifies the TraceLevel for an event based on matching
       * conditions. All matchers in the rule are optional. To trigger this rule, an
       * event must match all of its specified matchers (i.e. the matchers function
       * like a series of conditions connected by a logical 'AND' operator). A rule
       * with no specified matchers will match all events. Next ID: 6
       * </pre>
       *
       * Protobuf type {@code perfetto.protos.AndroidInputEventConfig.TraceRule}
       */
      public static final class Builder extends
          com.google.protobuf.GeneratedMessage.Builder<Builder> implements
          // @@protoc_insertion_point(builder_implements:perfetto.protos.AndroidInputEventConfig.TraceRule)
          perfetto.protos.AndroidInputEventConfigOuterClass.AndroidInputEventConfig.TraceRuleOrBuilder {
        public static final com.google.protobuf.Descriptors.Descriptor
            getDescriptor() {
          return perfetto.protos.AndroidInputEventConfigOuterClass.internal_static_perfetto_protos_AndroidInputEventConfig_TraceRule_descriptor;
        }

        @java.lang.Override
        protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
            internalGetFieldAccessorTable() {
          return perfetto.protos.AndroidInputEventConfigOuterClass.internal_static_perfetto_protos_AndroidInputEventConfig_TraceRule_fieldAccessorTable
              .ensureFieldAccessorsInitialized(
                  perfetto.protos.AndroidInputEventConfigOuterClass.AndroidInputEventConfig.TraceRule.class, perfetto.protos.AndroidInputEventConfigOuterClass.AndroidInputEventConfig.TraceRule.Builder.class);
        }

        // Construct using perfetto.protos.AndroidInputEventConfigOuterClass.AndroidInputEventConfig.TraceRule.newBuilder()
        private Builder() {

        }

        private Builder(
            com.google.protobuf.GeneratedMessage.BuilderParent parent) {
          super(parent);

        }
        @java.lang.Override
        public Builder clear() {
          super.clear();
          bitField0_ = 0;
          traceLevel_ = 0;
          matchAllPackages_ =
              com.google.protobuf.LazyStringArrayList.emptyList();
          matchAnyPackages_ =
              com.google.protobuf.LazyStringArrayList.emptyList();
          matchSecure_ = false;
          matchImeConnectionActive_ = false;
          return this;
        }

        @java.lang.Override
        public com.google.protobuf.Descriptors.Descriptor
            getDescriptorForType() {
          return perfetto.protos.AndroidInputEventConfigOuterClass.internal_static_perfetto_protos_AndroidInputEventConfig_TraceRule_descriptor;
        }

        @java.lang.Override
        public perfetto.protos.AndroidInputEventConfigOuterClass.AndroidInputEventConfig.TraceRule getDefaultInstanceForType() {
          return perfetto.protos.AndroidInputEventConfigOuterClass.AndroidInputEventConfig.TraceRule.getDefaultInstance();
        }

        @java.lang.Override
        public perfetto.protos.AndroidInputEventConfigOuterClass.AndroidInputEventConfig.TraceRule build() {
          perfetto.protos.AndroidInputEventConfigOuterClass.AndroidInputEventConfig.TraceRule result = buildPartial();
          if (!result.isInitialized()) {
            throw newUninitializedMessageException(result);
          }
          return result;
        }

        @java.lang.Override
        public perfetto.protos.AndroidInputEventConfigOuterClass.AndroidInputEventConfig.TraceRule buildPartial() {
          perfetto.protos.AndroidInputEventConfigOuterClass.AndroidInputEventConfig.TraceRule result = new perfetto.protos.AndroidInputEventConfigOuterClass.AndroidInputEventConfig.TraceRule(this);
          if (bitField0_ != 0) { buildPartial0(result); }
          onBuilt();
          return result;
        }

        private void buildPartial0(perfetto.protos.AndroidInputEventConfigOuterClass.AndroidInputEventConfig.TraceRule result) {
          int from_bitField0_ = bitField0_;
          int to_bitField0_ = 0;
          if (((from_bitField0_ & 0x00000001) != 0)) {
            result.traceLevel_ = traceLevel_;
            to_bitField0_ |= 0x00000001;
          }
          if (((from_bitField0_ & 0x00000002) != 0)) {
            matchAllPackages_.makeImmutable();
            result.matchAllPackages_ = matchAllPackages_;
          }
          if (((from_bitField0_ & 0x00000004) != 0)) {
            matchAnyPackages_.makeImmutable();
            result.matchAnyPackages_ = matchAnyPackages_;
          }
          if (((from_bitField0_ & 0x00000008) != 0)) {
            result.matchSecure_ = matchSecure_;
            to_bitField0_ |= 0x00000002;
          }
          if (((from_bitField0_ & 0x00000010) != 0)) {
            result.matchImeConnectionActive_ = matchImeConnectionActive_;
            to_bitField0_ |= 0x00000004;
          }
          result.bitField0_ |= to_bitField0_;
        }

        @java.lang.Override
        public Builder mergeFrom(com.google.protobuf.Message other) {
          if (other instanceof perfetto.protos.AndroidInputEventConfigOuterClass.AndroidInputEventConfig.TraceRule) {
            return mergeFrom((perfetto.protos.AndroidInputEventConfigOuterClass.AndroidInputEventConfig.TraceRule)other);
          } else {
            super.mergeFrom(other);
            return this;
          }
        }

        public Builder mergeFrom(perfetto.protos.AndroidInputEventConfigOuterClass.AndroidInputEventConfig.TraceRule other) {
          if (other == perfetto.protos.AndroidInputEventConfigOuterClass.AndroidInputEventConfig.TraceRule.getDefaultInstance()) return this;
          if (other.hasTraceLevel()) {
            setTraceLevel(other.getTraceLevel());
          }
          if (!other.matchAllPackages_.isEmpty()) {
            if (matchAllPackages_.isEmpty()) {
              matchAllPackages_ = other.matchAllPackages_;
              bitField0_ |= 0x00000002;
            } else {
              ensureMatchAllPackagesIsMutable();
              matchAllPackages_.addAll(other.matchAllPackages_);
            }
            onChanged();
          }
          if (!other.matchAnyPackages_.isEmpty()) {
            if (matchAnyPackages_.isEmpty()) {
              matchAnyPackages_ = other.matchAnyPackages_;
              bitField0_ |= 0x00000004;
            } else {
              ensureMatchAnyPackagesIsMutable();
              matchAnyPackages_.addAll(other.matchAnyPackages_);
            }
            onChanged();
          }
          if (other.hasMatchSecure()) {
            setMatchSecure(other.getMatchSecure());
          }
          if (other.hasMatchImeConnectionActive()) {
            setMatchImeConnectionActive(other.getMatchImeConnectionActive());
          }
          this.mergeUnknownFields(other.getUnknownFields());
          onChanged();
          return this;
        }

        @java.lang.Override
        public final boolean isInitialized() {
          return true;
        }

        @java.lang.Override
        public Builder mergeFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws java.io.IOException {
          if (extensionRegistry == null) {
            throw new java.lang.NullPointerException();
          }
          try {
            boolean done = false;
            while (!done) {
              int tag = input.readTag();
              switch (tag) {
                case 0:
                  done = true;
                  break;
                case 8: {
                  int tmpRaw = input.readEnum();
                  perfetto.protos.AndroidInputEventConfigOuterClass.AndroidInputEventConfig.TraceLevel tmpValue =
                      perfetto.protos.AndroidInputEventConfigOuterClass.AndroidInputEventConfig.TraceLevel.forNumber(tmpRaw);
                  if (tmpValue == null) {
                    mergeUnknownVarintField(1, tmpRaw);
                  } else {
                    traceLevel_ = tmpRaw;
                    bitField0_ |= 0x00000001;
                  }
                  break;
                } // case 8
                case 18: {
                  com.google.protobuf.ByteString bs = input.readBytes();
                  ensureMatchAllPackagesIsMutable();
                  matchAllPackages_.add(bs);
                  break;
                } // case 18
                case 26: {
                  com.google.protobuf.ByteString bs = input.readBytes();
                  ensureMatchAnyPackagesIsMutable();
                  matchAnyPackages_.add(bs);
                  break;
                } // case 26
                case 32: {
                  matchSecure_ = input.readBool();
                  bitField0_ |= 0x00000008;
                  break;
                } // case 32
                case 40: {
                  matchImeConnectionActive_ = input.readBool();
                  bitField0_ |= 0x00000010;
                  break;
                } // case 40
                default: {
                  if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                    done = true; // was an endgroup tag
                  }
                  break;
                } // default:
              } // switch (tag)
            } // while (!done)
          } catch (com.google.protobuf.InvalidProtocolBufferException e) {
            throw e.unwrapIOException();
          } finally {
            onChanged();
          } // finally
          return this;
        }
        private int bitField0_;

        private int traceLevel_ = 0;
        /**
         * <pre>
         * The trace level to be used for events that trigger this rule.
         * If unspecified, TRACE_LEVEL_NONE will be used by default.
         * </pre>
         *
         * <code>optional .perfetto.protos.AndroidInputEventConfig.TraceLevel trace_level = 1;</code>
         * @return Whether the traceLevel field is set.
         */
        @java.lang.Override public boolean hasTraceLevel() {
          return ((bitField0_ & 0x00000001) != 0);
        }
        /**
         * <pre>
         * The trace level to be used for events that trigger this rule.
         * If unspecified, TRACE_LEVEL_NONE will be used by default.
         * </pre>
         *
         * <code>optional .perfetto.protos.AndroidInputEventConfig.TraceLevel trace_level = 1;</code>
         * @return The traceLevel.
         */
        @java.lang.Override
        public perfetto.protos.AndroidInputEventConfigOuterClass.AndroidInputEventConfig.TraceLevel getTraceLevel() {
          perfetto.protos.AndroidInputEventConfigOuterClass.AndroidInputEventConfig.TraceLevel result = perfetto.protos.AndroidInputEventConfigOuterClass.AndroidInputEventConfig.TraceLevel.forNumber(traceLevel_);
          return result == null ? perfetto.protos.AndroidInputEventConfigOuterClass.AndroidInputEventConfig.TraceLevel.TRACE_LEVEL_NONE : result;
        }
        /**
         * <pre>
         * The trace level to be used for events that trigger this rule.
         * If unspecified, TRACE_LEVEL_NONE will be used by default.
         * </pre>
         *
         * <code>optional .perfetto.protos.AndroidInputEventConfig.TraceLevel trace_level = 1;</code>
         * @param value The traceLevel to set.
         * @return This builder for chaining.
         */
        public Builder setTraceLevel(perfetto.protos.AndroidInputEventConfigOuterClass.AndroidInputEventConfig.TraceLevel value) {
          if (value == null) {
            throw new NullPointerException();
          }
          bitField0_ |= 0x00000001;
          traceLevel_ = value.getNumber();
          onChanged();
          return this;
        }
        /**
         * <pre>
         * The trace level to be used for events that trigger this rule.
         * If unspecified, TRACE_LEVEL_NONE will be used by default.
         * </pre>
         *
         * <code>optional .perfetto.protos.AndroidInputEventConfig.TraceLevel trace_level = 1;</code>
         * @return This builder for chaining.
         */
        public Builder clearTraceLevel() {
          bitField0_ = (bitField0_ & ~0x00000001);
          traceLevel_ = 0;
          onChanged();
          return this;
        }

        private com.google.protobuf.LazyStringArrayList matchAllPackages_ =
            com.google.protobuf.LazyStringArrayList.emptyList();
        private void ensureMatchAllPackagesIsMutable() {
          if (!matchAllPackages_.isModifiable()) {
            matchAllPackages_ = new com.google.protobuf.LazyStringArrayList(matchAllPackages_);
          }
          bitField0_ |= 0x00000002;
        }
        /**
         * <pre>
         * Package matchers
         *
         * Respectively matches if all or any of the target apps for this event are
         * contained in the specified list of package names.
         *
         * Intended usage:
         * - Use match_all_packages to selectively allow tracing for the listed
         * packages.
         * - Use match_any_packages to selectively deny tracing for certain
         * packages.
         *
         * WARNING: Great care must be taken when designing rules for field tracing!
         * This is because each event is almost always sent to more than
         * one app.
         * For example, when allowing tracing for a package that has a
         * spy window
         * over the display (e.g. SystemUI) using match_any_packages,
         * essentially all input will be recorded on that display. This is
         * because the events will be sent to the spy as well as the
         * foreground app, and regardless of what the foreground app is,
         * the event will end up being traced.
         * Alternatively, when attempting to block tracing for specific
         * packages using
         * match_all_packages, no events will likely be blocked. This is
         * because the event will also be sent to other apps (such as, but
         * not limited to, ones with spy windows), so the matcher will not
         * match unless all other targets are also listed under the
         * match_all_packages list.
         * </pre>
         *
         * <code>repeated string match_all_packages = 2;</code>
         * @return A list containing the matchAllPackages.
         */
        public com.google.protobuf.ProtocolStringList
            getMatchAllPackagesList() {
          matchAllPackages_.makeImmutable();
          return matchAllPackages_;
        }
        /**
         * <pre>
         * Package matchers
         *
         * Respectively matches if all or any of the target apps for this event are
         * contained in the specified list of package names.
         *
         * Intended usage:
         * - Use match_all_packages to selectively allow tracing for the listed
         * packages.
         * - Use match_any_packages to selectively deny tracing for certain
         * packages.
         *
         * WARNING: Great care must be taken when designing rules for field tracing!
         * This is because each event is almost always sent to more than
         * one app.
         * For example, when allowing tracing for a package that has a
         * spy window
         * over the display (e.g. SystemUI) using match_any_packages,
         * essentially all input will be recorded on that display. This is
         * because the events will be sent to the spy as well as the
         * foreground app, and regardless of what the foreground app is,
         * the event will end up being traced.
         * Alternatively, when attempting to block tracing for specific
         * packages using
         * match_all_packages, no events will likely be blocked. This is
         * because the event will also be sent to other apps (such as, but
         * not limited to, ones with spy windows), so the matcher will not
         * match unless all other targets are also listed under the
         * match_all_packages list.
         * </pre>
         *
         * <code>repeated string match_all_packages = 2;</code>
         * @return The count of matchAllPackages.
         */
        public int getMatchAllPackagesCount() {
          return matchAllPackages_.size();
        }
        /**
         * <pre>
         * Package matchers
         *
         * Respectively matches if all or any of the target apps for this event are
         * contained in the specified list of package names.
         *
         * Intended usage:
         * - Use match_all_packages to selectively allow tracing for the listed
         * packages.
         * - Use match_any_packages to selectively deny tracing for certain
         * packages.
         *
         * WARNING: Great care must be taken when designing rules for field tracing!
         * This is because each event is almost always sent to more than
         * one app.
         * For example, when allowing tracing for a package that has a
         * spy window
         * over the display (e.g. SystemUI) using match_any_packages,
         * essentially all input will be recorded on that display. This is
         * because the events will be sent to the spy as well as the
         * foreground app, and regardless of what the foreground app is,
         * the event will end up being traced.
         * Alternatively, when attempting to block tracing for specific
         * packages using
         * match_all_packages, no events will likely be blocked. This is
         * because the event will also be sent to other apps (such as, but
         * not limited to, ones with spy windows), so the matcher will not
         * match unless all other targets are also listed under the
         * match_all_packages list.
         * </pre>
         *
         * <code>repeated string match_all_packages = 2;</code>
         * @param index The index of the element to return.
         * @return The matchAllPackages at the given index.
         */
        public java.lang.String getMatchAllPackages(int index) {
          return matchAllPackages_.get(index);
        }
        /**
         * <pre>
         * Package matchers
         *
         * Respectively matches if all or any of the target apps for this event are
         * contained in the specified list of package names.
         *
         * Intended usage:
         * - Use match_all_packages to selectively allow tracing for the listed
         * packages.
         * - Use match_any_packages to selectively deny tracing for certain
         * packages.
         *
         * WARNING: Great care must be taken when designing rules for field tracing!
         * This is because each event is almost always sent to more than
         * one app.
         * For example, when allowing tracing for a package that has a
         * spy window
         * over the display (e.g. SystemUI) using match_any_packages,
         * essentially all input will be recorded on that display. This is
         * because the events will be sent to the spy as well as the
         * foreground app, and regardless of what the foreground app is,
         * the event will end up being traced.
         * Alternatively, when attempting to block tracing for specific
         * packages using
         * match_all_packages, no events will likely be blocked. This is
         * because the event will also be sent to other apps (such as, but
         * not limited to, ones with spy windows), so the matcher will not
         * match unless all other targets are also listed under the
         * match_all_packages list.
         * </pre>
         *
         * <code>repeated string match_all_packages = 2;</code>
         * @param index The index of the value to return.
         * @return The bytes of the matchAllPackages at the given index.
         */
        public com.google.protobuf.ByteString
            getMatchAllPackagesBytes(int index) {
          return matchAllPackages_.getByteString(index);
        }
        /**
         * <pre>
         * Package matchers
         *
         * Respectively matches if all or any of the target apps for this event are
         * contained in the specified list of package names.
         *
         * Intended usage:
         * - Use match_all_packages to selectively allow tracing for the listed
         * packages.
         * - Use match_any_packages to selectively deny tracing for certain
         * packages.
         *
         * WARNING: Great care must be taken when designing rules for field tracing!
         * This is because each event is almost always sent to more than
         * one app.
         * For example, when allowing tracing for a package that has a
         * spy window
         * over the display (e.g. SystemUI) using match_any_packages,
         * essentially all input will be recorded on that display. This is
         * because the events will be sent to the spy as well as the
         * foreground app, and regardless of what the foreground app is,
         * the event will end up being traced.
         * Alternatively, when attempting to block tracing for specific
         * packages using
         * match_all_packages, no events will likely be blocked. This is
         * because the event will also be sent to other apps (such as, but
         * not limited to, ones with spy windows), so the matcher will not
         * match unless all other targets are also listed under the
         * match_all_packages list.
         * </pre>
         *
         * <code>repeated string match_all_packages = 2;</code>
         * @param index The index to set the value at.
         * @param value The matchAllPackages to set.
         * @return This builder for chaining.
         */
        public Builder setMatchAllPackages(
            int index, java.lang.String value) {
          if (value == null) { throw new NullPointerException(); }
          ensureMatchAllPackagesIsMutable();
          matchAllPackages_.set(index, value);
          bitField0_ |= 0x00000002;
          onChanged();
          return this;
        }
        /**
         * <pre>
         * Package matchers
         *
         * Respectively matches if all or any of the target apps for this event are
         * contained in the specified list of package names.
         *
         * Intended usage:
         * - Use match_all_packages to selectively allow tracing for the listed
         * packages.
         * - Use match_any_packages to selectively deny tracing for certain
         * packages.
         *
         * WARNING: Great care must be taken when designing rules for field tracing!
         * This is because each event is almost always sent to more than
         * one app.
         * For example, when allowing tracing for a package that has a
         * spy window
         * over the display (e.g. SystemUI) using match_any_packages,
         * essentially all input will be recorded on that display. This is
         * because the events will be sent to the spy as well as the
         * foreground app, and regardless of what the foreground app is,
         * the event will end up being traced.
         * Alternatively, when attempting to block tracing for specific
         * packages using
         * match_all_packages, no events will likely be blocked. This is
         * because the event will also be sent to other apps (such as, but
         * not limited to, ones with spy windows), so the matcher will not
         * match unless all other targets are also listed under the
         * match_all_packages list.
         * </pre>
         *
         * <code>repeated string match_all_packages = 2;</code>
         * @param value The matchAllPackages to add.
         * @return This builder for chaining.
         */
        public Builder addMatchAllPackages(
            java.lang.String value) {
          if (value == null) { throw new NullPointerException(); }
          ensureMatchAllPackagesIsMutable();
          matchAllPackages_.add(value);
          bitField0_ |= 0x00000002;
          onChanged();
          return this;
        }
        /**
         * <pre>
         * Package matchers
         *
         * Respectively matches if all or any of the target apps for this event are
         * contained in the specified list of package names.
         *
         * Intended usage:
         * - Use match_all_packages to selectively allow tracing for the listed
         * packages.
         * - Use match_any_packages to selectively deny tracing for certain
         * packages.
         *
         * WARNING: Great care must be taken when designing rules for field tracing!
         * This is because each event is almost always sent to more than
         * one app.
         * For example, when allowing tracing for a package that has a
         * spy window
         * over the display (e.g. SystemUI) using match_any_packages,
         * essentially all input will be recorded on that display. This is
         * because the events will be sent to the spy as well as the
         * foreground app, and regardless of what the foreground app is,
         * the event will end up being traced.
         * Alternatively, when attempting to block tracing for specific
         * packages using
         * match_all_packages, no events will likely be blocked. This is
         * because the event will also be sent to other apps (such as, but
         * not limited to, ones with spy windows), so the matcher will not
         * match unless all other targets are also listed under the
         * match_all_packages list.
         * </pre>
         *
         * <code>repeated string match_all_packages = 2;</code>
         * @param values The matchAllPackages to add.
         * @return This builder for chaining.
         */
        public Builder addAllMatchAllPackages(
            java.lang.Iterable<java.lang.String> values) {
          ensureMatchAllPackagesIsMutable();
          com.google.protobuf.AbstractMessageLite.Builder.addAll(
              values, matchAllPackages_);
          bitField0_ |= 0x00000002;
          onChanged();
          return this;
        }
        /**
         * <pre>
         * Package matchers
         *
         * Respectively matches if all or any of the target apps for this event are
         * contained in the specified list of package names.
         *
         * Intended usage:
         * - Use match_all_packages to selectively allow tracing for the listed
         * packages.
         * - Use match_any_packages to selectively deny tracing for certain
         * packages.
         *
         * WARNING: Great care must be taken when designing rules for field tracing!
         * This is because each event is almost always sent to more than
         * one app.
         * For example, when allowing tracing for a package that has a
         * spy window
         * over the display (e.g. SystemUI) using match_any_packages,
         * essentially all input will be recorded on that display. This is
         * because the events will be sent to the spy as well as the
         * foreground app, and regardless of what the foreground app is,
         * the event will end up being traced.
         * Alternatively, when attempting to block tracing for specific
         * packages using
         * match_all_packages, no events will likely be blocked. This is
         * because the event will also be sent to other apps (such as, but
         * not limited to, ones with spy windows), so the matcher will not
         * match unless all other targets are also listed under the
         * match_all_packages list.
         * </pre>
         *
         * <code>repeated string match_all_packages = 2;</code>
         * @return This builder for chaining.
         */
        public Builder clearMatchAllPackages() {
          matchAllPackages_ =
            com.google.protobuf.LazyStringArrayList.emptyList();
          bitField0_ = (bitField0_ & ~0x00000002);;
          onChanged();
          return this;
        }
        /**
         * <pre>
         * Package matchers
         *
         * Respectively matches if all or any of the target apps for this event are
         * contained in the specified list of package names.
         *
         * Intended usage:
         * - Use match_all_packages to selectively allow tracing for the listed
         * packages.
         * - Use match_any_packages to selectively deny tracing for certain
         * packages.
         *
         * WARNING: Great care must be taken when designing rules for field tracing!
         * This is because each event is almost always sent to more than
         * one app.
         * For example, when allowing tracing for a package that has a
         * spy window
         * over the display (e.g. SystemUI) using match_any_packages,
         * essentially all input will be recorded on that display. This is
         * because the events will be sent to the spy as well as the
         * foreground app, and regardless of what the foreground app is,
         * the event will end up being traced.
         * Alternatively, when attempting to block tracing for specific
         * packages using
         * match_all_packages, no events will likely be blocked. This is
         * because the event will also be sent to other apps (such as, but
         * not limited to, ones with spy windows), so the matcher will not
         * match unless all other targets are also listed under the
         * match_all_packages list.
         * </pre>
         *
         * <code>repeated string match_all_packages = 2;</code>
         * @param value The bytes of the matchAllPackages to add.
         * @return This builder for chaining.
         */
        public Builder addMatchAllPackagesBytes(
            com.google.protobuf.ByteString value) {
          if (value == null) { throw new NullPointerException(); }
          ensureMatchAllPackagesIsMutable();
          matchAllPackages_.add(value);
          bitField0_ |= 0x00000002;
          onChanged();
          return this;
        }

        private com.google.protobuf.LazyStringArrayList matchAnyPackages_ =
            com.google.protobuf.LazyStringArrayList.emptyList();
        private void ensureMatchAnyPackagesIsMutable() {
          if (!matchAnyPackages_.isModifiable()) {
            matchAnyPackages_ = new com.google.protobuf.LazyStringArrayList(matchAnyPackages_);
          }
          bitField0_ |= 0x00000004;
        }
        /**
         * <code>repeated string match_any_packages = 3;</code>
         * @return A list containing the matchAnyPackages.
         */
        public com.google.protobuf.ProtocolStringList
            getMatchAnyPackagesList() {
          matchAnyPackages_.makeImmutable();
          return matchAnyPackages_;
        }
        /**
         * <code>repeated string match_any_packages = 3;</code>
         * @return The count of matchAnyPackages.
         */
        public int getMatchAnyPackagesCount() {
          return matchAnyPackages_.size();
        }
        /**
         * <code>repeated string match_any_packages = 3;</code>
         * @param index The index of the element to return.
         * @return The matchAnyPackages at the given index.
         */
        public java.lang.String getMatchAnyPackages(int index) {
          return matchAnyPackages_.get(index);
        }
        /**
         * <code>repeated string match_any_packages = 3;</code>
         * @param index The index of the value to return.
         * @return The bytes of the matchAnyPackages at the given index.
         */
        public com.google.protobuf.ByteString
            getMatchAnyPackagesBytes(int index) {
          return matchAnyPackages_.getByteString(index);
        }
        /**
         * <code>repeated string match_any_packages = 3;</code>
         * @param index The index to set the value at.
         * @param value The matchAnyPackages to set.
         * @return This builder for chaining.
         */
        public Builder setMatchAnyPackages(
            int index, java.lang.String value) {
          if (value == null) { throw new NullPointerException(); }
          ensureMatchAnyPackagesIsMutable();
          matchAnyPackages_.set(index, value);
          bitField0_ |= 0x00000004;
          onChanged();
          return this;
        }
        /**
         * <code>repeated string match_any_packages = 3;</code>
         * @param value The matchAnyPackages to add.
         * @return This builder for chaining.
         */
        public Builder addMatchAnyPackages(
            java.lang.String value) {
          if (value == null) { throw new NullPointerException(); }
          ensureMatchAnyPackagesIsMutable();
          matchAnyPackages_.add(value);
          bitField0_ |= 0x00000004;
          onChanged();
          return this;
        }
        /**
         * <code>repeated string match_any_packages = 3;</code>
         * @param values The matchAnyPackages to add.
         * @return This builder for chaining.
         */
        public Builder addAllMatchAnyPackages(
            java.lang.Iterable<java.lang.String> values) {
          ensureMatchAnyPackagesIsMutable();
          com.google.protobuf.AbstractMessageLite.Builder.addAll(
              values, matchAnyPackages_);
          bitField0_ |= 0x00000004;
          onChanged();
          return this;
        }
        /**
         * <code>repeated string match_any_packages = 3;</code>
         * @return This builder for chaining.
         */
        public Builder clearMatchAnyPackages() {
          matchAnyPackages_ =
            com.google.protobuf.LazyStringArrayList.emptyList();
          bitField0_ = (bitField0_ & ~0x00000004);;
          onChanged();
          return this;
        }
        /**
         * <code>repeated string match_any_packages = 3;</code>
         * @param value The bytes of the matchAnyPackages to add.
         * @return This builder for chaining.
         */
        public Builder addMatchAnyPackagesBytes(
            com.google.protobuf.ByteString value) {
          if (value == null) { throw new NullPointerException(); }
          ensureMatchAnyPackagesIsMutable();
          matchAnyPackages_.add(value);
          bitField0_ |= 0x00000004;
          onChanged();
          return this;
        }

        private boolean matchSecure_ ;
        /**
         * <pre>
         * Matches if the event is secure, which means that at least one of the
         * targets of this event is using the window flag FLAG_SECURE.
         * </pre>
         *
         * <code>optional bool match_secure = 4;</code>
         * @return Whether the matchSecure field is set.
         */
        @java.lang.Override
        public boolean hasMatchSecure() {
          return ((bitField0_ & 0x00000008) != 0);
        }
        /**
         * <pre>
         * Matches if the event is secure, which means that at least one of the
         * targets of this event is using the window flag FLAG_SECURE.
         * </pre>
         *
         * <code>optional bool match_secure = 4;</code>
         * @return The matchSecure.
         */
        @java.lang.Override
        public boolean getMatchSecure() {
          return matchSecure_;
        }
        /**
         * <pre>
         * Matches if the event is secure, which means that at least one of the
         * targets of this event is using the window flag FLAG_SECURE.
         * </pre>
         *
         * <code>optional bool match_secure = 4;</code>
         * @param value The matchSecure to set.
         * @return This builder for chaining.
         */
        public Builder setMatchSecure(boolean value) {

          matchSecure_ = value;
          bitField0_ |= 0x00000008;
          onChanged();
          return this;
        }
        /**
         * <pre>
         * Matches if the event is secure, which means that at least one of the
         * targets of this event is using the window flag FLAG_SECURE.
         * </pre>
         *
         * <code>optional bool match_secure = 4;</code>
         * @return This builder for chaining.
         */
        public Builder clearMatchSecure() {
          bitField0_ = (bitField0_ & ~0x00000008);
          matchSecure_ = false;
          onChanged();
          return this;
        }

        private boolean matchImeConnectionActive_ ;
        /**
         * <pre>
         * Matches if there was an active IME connection while this event was being
         * processed.
         * </pre>
         *
         * <code>optional bool match_ime_connection_active = 5;</code>
         * @return Whether the matchImeConnectionActive field is set.
         */
        @java.lang.Override
        public boolean hasMatchImeConnectionActive() {
          return ((bitField0_ & 0x00000010) != 0);
        }
        /**
         * <pre>
         * Matches if there was an active IME connection while this event was being
         * processed.
         * </pre>
         *
         * <code>optional bool match_ime_connection_active = 5;</code>
         * @return The matchImeConnectionActive.
         */
        @java.lang.Override
        public boolean getMatchImeConnectionActive() {
          return matchImeConnectionActive_;
        }
        /**
         * <pre>
         * Matches if there was an active IME connection while this event was being
         * processed.
         * </pre>
         *
         * <code>optional bool match_ime_connection_active = 5;</code>
         * @param value The matchImeConnectionActive to set.
         * @return This builder for chaining.
         */
        public Builder setMatchImeConnectionActive(boolean value) {

          matchImeConnectionActive_ = value;
          bitField0_ |= 0x00000010;
          onChanged();
          return this;
        }
        /**
         * <pre>
         * Matches if there was an active IME connection while this event was being
         * processed.
         * </pre>
         *
         * <code>optional bool match_ime_connection_active = 5;</code>
         * @return This builder for chaining.
         */
        public Builder clearMatchImeConnectionActive() {
          bitField0_ = (bitField0_ & ~0x00000010);
          matchImeConnectionActive_ = false;
          onChanged();
          return this;
        }

        // @@protoc_insertion_point(builder_scope:perfetto.protos.AndroidInputEventConfig.TraceRule)
      }

      // @@protoc_insertion_point(class_scope:perfetto.protos.AndroidInputEventConfig.TraceRule)
      private static final perfetto.protos.AndroidInputEventConfigOuterClass.AndroidInputEventConfig.TraceRule DEFAULT_INSTANCE;
      static {
        DEFAULT_INSTANCE = new perfetto.protos.AndroidInputEventConfigOuterClass.AndroidInputEventConfig.TraceRule();
      }

      public static perfetto.protos.AndroidInputEventConfigOuterClass.AndroidInputEventConfig.TraceRule getDefaultInstance() {
        return DEFAULT_INSTANCE;
      }

      private static final com.google.protobuf.Parser<TraceRule>
          PARSER = new com.google.protobuf.AbstractParser<TraceRule>() {
        @java.lang.Override
        public TraceRule parsePartialFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws com.google.protobuf.InvalidProtocolBufferException {
          Builder builder = newBuilder();
          try {
            builder.mergeFrom(input, extensionRegistry);
          } catch (com.google.protobuf.InvalidProtocolBufferException e) {
            throw e.setUnfinishedMessage(builder.buildPartial());
          } catch (com.google.protobuf.UninitializedMessageException e) {
            throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
          } catch (java.io.IOException e) {
            throw new com.google.protobuf.InvalidProtocolBufferException(e)
                .setUnfinishedMessage(builder.buildPartial());
          }
          return builder.buildPartial();
        }
      };

      public static com.google.protobuf.Parser<TraceRule> parser() {
        return PARSER;
      }

      @java.lang.Override
      public com.google.protobuf.Parser<TraceRule> getParserForType() {
        return PARSER;
      }

      @java.lang.Override
      public perfetto.protos.AndroidInputEventConfigOuterClass.AndroidInputEventConfig.TraceRule getDefaultInstanceForType() {
        return DEFAULT_INSTANCE;
      }

    }

    private int bitField0_;
    public static final int MODE_FIELD_NUMBER = 1;
    private int mode_ = 0;
    /**
     * <pre>
     * The tracing mode to use. If unspecified, it will default to
     * TRACE_MODE_USE_RULES.
     * </pre>
     *
     * <code>optional .perfetto.protos.AndroidInputEventConfig.TraceMode mode = 1;</code>
     * @return Whether the mode field is set.
     */
    @java.lang.Override public boolean hasMode() {
      return ((bitField0_ & 0x00000001) != 0);
    }
    /**
     * <pre>
     * The tracing mode to use. If unspecified, it will default to
     * TRACE_MODE_USE_RULES.
     * </pre>
     *
     * <code>optional .perfetto.protos.AndroidInputEventConfig.TraceMode mode = 1;</code>
     * @return The mode.
     */
    @java.lang.Override public perfetto.protos.AndroidInputEventConfigOuterClass.AndroidInputEventConfig.TraceMode getMode() {
      perfetto.protos.AndroidInputEventConfigOuterClass.AndroidInputEventConfig.TraceMode result = perfetto.protos.AndroidInputEventConfigOuterClass.AndroidInputEventConfig.TraceMode.forNumber(mode_);
      return result == null ? perfetto.protos.AndroidInputEventConfigOuterClass.AndroidInputEventConfig.TraceMode.TRACE_MODE_TRACE_ALL : result;
    }

    public static final int RULES_FIELD_NUMBER = 2;
    @SuppressWarnings("serial")
    private java.util.List<perfetto.protos.AndroidInputEventConfigOuterClass.AndroidInputEventConfig.TraceRule> rules_;
    /**
     * <pre>
     * The list of rules to use to determine the trace level of events.
     * Each event will be traced using the TraceLevel of the first rule that it
     * triggers from this list. The rules are evaluated in the order in which they
     * are specified. If an event does not match any of the rules,
     * TRACE_LEVEL_NONE will be used by default.
     * </pre>
     *
     * <code>repeated .perfetto.protos.AndroidInputEventConfig.TraceRule rules = 2;</code>
     */
    @java.lang.Override
    public java.util.List<perfetto.protos.AndroidInputEventConfigOuterClass.AndroidInputEventConfig.TraceRule> getRulesList() {
      return rules_;
    }
    /**
     * <pre>
     * The list of rules to use to determine the trace level of events.
     * Each event will be traced using the TraceLevel of the first rule that it
     * triggers from this list. The rules are evaluated in the order in which they
     * are specified. If an event does not match any of the rules,
     * TRACE_LEVEL_NONE will be used by default.
     * </pre>
     *
     * <code>repeated .perfetto.protos.AndroidInputEventConfig.TraceRule rules = 2;</code>
     */
    @java.lang.Override
    public java.util.List<? extends perfetto.protos.AndroidInputEventConfigOuterClass.AndroidInputEventConfig.TraceRuleOrBuilder> 
        getRulesOrBuilderList() {
      return rules_;
    }
    /**
     * <pre>
     * The list of rules to use to determine the trace level of events.
     * Each event will be traced using the TraceLevel of the first rule that it
     * triggers from this list. The rules are evaluated in the order in which they
     * are specified. If an event does not match any of the rules,
     * TRACE_LEVEL_NONE will be used by default.
     * </pre>
     *
     * <code>repeated .perfetto.protos.AndroidInputEventConfig.TraceRule rules = 2;</code>
     */
    @java.lang.Override
    public int getRulesCount() {
      return rules_.size();
    }
    /**
     * <pre>
     * The list of rules to use to determine the trace level of events.
     * Each event will be traced using the TraceLevel of the first rule that it
     * triggers from this list. The rules are evaluated in the order in which they
     * are specified. If an event does not match any of the rules,
     * TRACE_LEVEL_NONE will be used by default.
     * </pre>
     *
     * <code>repeated .perfetto.protos.AndroidInputEventConfig.TraceRule rules = 2;</code>
     */
    @java.lang.Override
    public perfetto.protos.AndroidInputEventConfigOuterClass.AndroidInputEventConfig.TraceRule getRules(int index) {
      return rules_.get(index);
    }
    /**
     * <pre>
     * The list of rules to use to determine the trace level of events.
     * Each event will be traced using the TraceLevel of the first rule that it
     * triggers from this list. The rules are evaluated in the order in which they
     * are specified. If an event does not match any of the rules,
     * TRACE_LEVEL_NONE will be used by default.
     * </pre>
     *
     * <code>repeated .perfetto.protos.AndroidInputEventConfig.TraceRule rules = 2;</code>
     */
    @java.lang.Override
    public perfetto.protos.AndroidInputEventConfigOuterClass.AndroidInputEventConfig.TraceRuleOrBuilder getRulesOrBuilder(
        int index) {
      return rules_.get(index);
    }

    public static final int TRACE_DISPATCHER_INPUT_EVENTS_FIELD_NUMBER = 3;
    private boolean traceDispatcherInputEvents_ = false;
    /**
     * <pre>
     * Trace input events processed by the system as they are being dispatched
     * to application windows. All trace rules will apply.
     * - If this flag is used without enabling trace_dispatcher_window_dispatch,
     * it will
     * trace InputDispatcher's inbound events (which does not include events
     * synthesized within InputDispatcher) that match the rules.
     * - If used with trace_dispatcher_window_dispatch, all inbound and outbound
     * events
     * matching the rules, including all events synthesized within
     * InputDispatcher, will be traced.
     * </pre>
     *
     * <code>optional bool trace_dispatcher_input_events = 3;</code>
     * @return Whether the traceDispatcherInputEvents field is set.
     */
    @java.lang.Override
    public boolean hasTraceDispatcherInputEvents() {
      return ((bitField0_ & 0x00000002) != 0);
    }
    /**
     * <pre>
     * Trace input events processed by the system as they are being dispatched
     * to application windows. All trace rules will apply.
     * - If this flag is used without enabling trace_dispatcher_window_dispatch,
     * it will
     * trace InputDispatcher's inbound events (which does not include events
     * synthesized within InputDispatcher) that match the rules.
     * - If used with trace_dispatcher_window_dispatch, all inbound and outbound
     * events
     * matching the rules, including all events synthesized within
     * InputDispatcher, will be traced.
     * </pre>
     *
     * <code>optional bool trace_dispatcher_input_events = 3;</code>
     * @return The traceDispatcherInputEvents.
     */
    @java.lang.Override
    public boolean getTraceDispatcherInputEvents() {
      return traceDispatcherInputEvents_;
    }

    public static final int TRACE_DISPATCHER_WINDOW_DISPATCH_FIELD_NUMBER = 4;
    private boolean traceDispatcherWindowDispatch_ = false;
    /**
     * <pre>
     * Trace details about which windows the system is sending each input event
     * to. All trace rules will apply.
     * </pre>
     *
     * <code>optional bool trace_dispatcher_window_dispatch = 4;</code>
     * @return Whether the traceDispatcherWindowDispatch field is set.
     */
    @java.lang.Override
    public boolean hasTraceDispatcherWindowDispatch() {
      return ((bitField0_ & 0x00000004) != 0);
    }
    /**
     * <pre>
     * Trace details about which windows the system is sending each input event
     * to. All trace rules will apply.
     * </pre>
     *
     * <code>optional bool trace_dispatcher_window_dispatch = 4;</code>
     * @return The traceDispatcherWindowDispatch.
     */
    @java.lang.Override
    public boolean getTraceDispatcherWindowDispatch() {
      return traceDispatcherWindowDispatch_;
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (((bitField0_ & 0x00000001) != 0)) {
        output.writeEnum(1, mode_);
      }
      for (int i = 0; i < rules_.size(); i++) {
        output.writeMessage(2, rules_.get(i));
      }
      if (((bitField0_ & 0x00000002) != 0)) {
        output.writeBool(3, traceDispatcherInputEvents_);
      }
      if (((bitField0_ & 0x00000004) != 0)) {
        output.writeBool(4, traceDispatcherWindowDispatch_);
      }
      getUnknownFields().writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) != 0)) {
        size += com.google.protobuf.CodedOutputStream
          .computeEnumSize(1, mode_);
      }
      for (int i = 0; i < rules_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(2, rules_.get(i));
      }
      if (((bitField0_ & 0x00000002) != 0)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(3, traceDispatcherInputEvents_);
      }
      if (((bitField0_ & 0x00000004) != 0)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(4, traceDispatcherWindowDispatch_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof perfetto.protos.AndroidInputEventConfigOuterClass.AndroidInputEventConfig)) {
        return super.equals(obj);
      }
      perfetto.protos.AndroidInputEventConfigOuterClass.AndroidInputEventConfig other = (perfetto.protos.AndroidInputEventConfigOuterClass.AndroidInputEventConfig) obj;

      if (hasMode() != other.hasMode()) return false;
      if (hasMode()) {
        if (mode_ != other.mode_) return false;
      }
      if (!getRulesList()
          .equals(other.getRulesList())) return false;
      if (hasTraceDispatcherInputEvents() != other.hasTraceDispatcherInputEvents()) return false;
      if (hasTraceDispatcherInputEvents()) {
        if (getTraceDispatcherInputEvents()
            != other.getTraceDispatcherInputEvents()) return false;
      }
      if (hasTraceDispatcherWindowDispatch() != other.hasTraceDispatcherWindowDispatch()) return false;
      if (hasTraceDispatcherWindowDispatch()) {
        if (getTraceDispatcherWindowDispatch()
            != other.getTraceDispatcherWindowDispatch()) return false;
      }
      if (!getUnknownFields().equals(other.getUnknownFields())) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      if (hasMode()) {
        hash = (37 * hash) + MODE_FIELD_NUMBER;
        hash = (53 * hash) + mode_;
      }
      if (getRulesCount() > 0) {
        hash = (37 * hash) + RULES_FIELD_NUMBER;
        hash = (53 * hash) + getRulesList().hashCode();
      }
      if (hasTraceDispatcherInputEvents()) {
        hash = (37 * hash) + TRACE_DISPATCHER_INPUT_EVENTS_FIELD_NUMBER;
        hash = (53 * hash) + com.google.protobuf.Internal.hashBoolean(
            getTraceDispatcherInputEvents());
      }
      if (hasTraceDispatcherWindowDispatch()) {
        hash = (37 * hash) + TRACE_DISPATCHER_WINDOW_DISPATCH_FIELD_NUMBER;
        hash = (53 * hash) + com.google.protobuf.Internal.hashBoolean(
            getTraceDispatcherWindowDispatch());
      }
      hash = (29 * hash) + getUnknownFields().hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static perfetto.protos.AndroidInputEventConfigOuterClass.AndroidInputEventConfig parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static perfetto.protos.AndroidInputEventConfigOuterClass.AndroidInputEventConfig parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static perfetto.protos.AndroidInputEventConfigOuterClass.AndroidInputEventConfig parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static perfetto.protos.AndroidInputEventConfigOuterClass.AndroidInputEventConfig parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static perfetto.protos.AndroidInputEventConfigOuterClass.AndroidInputEventConfig parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static perfetto.protos.AndroidInputEventConfigOuterClass.AndroidInputEventConfig parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static perfetto.protos.AndroidInputEventConfigOuterClass.AndroidInputEventConfig parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input);
    }
    public static perfetto.protos.AndroidInputEventConfigOuterClass.AndroidInputEventConfig parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    public static perfetto.protos.AndroidInputEventConfigOuterClass.AndroidInputEventConfig parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessage
          .parseDelimitedWithIOException(PARSER, input);
    }

    public static perfetto.protos.AndroidInputEventConfigOuterClass.AndroidInputEventConfig parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessage
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static perfetto.protos.AndroidInputEventConfigOuterClass.AndroidInputEventConfig parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input);
    }
    public static perfetto.protos.AndroidInputEventConfigOuterClass.AndroidInputEventConfig parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(perfetto.protos.AndroidInputEventConfigOuterClass.AndroidInputEventConfig prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * <pre>
     * Custom configuration for the "android.input.inputevent" data source.
     *
     * NOTE: Input traces can only be taken on debuggable (userdebug/eng) builds!
     *
     * Next ID: 5
     * </pre>
     *
     * Protobuf type {@code perfetto.protos.AndroidInputEventConfig}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:perfetto.protos.AndroidInputEventConfig)
        perfetto.protos.AndroidInputEventConfigOuterClass.AndroidInputEventConfigOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return perfetto.protos.AndroidInputEventConfigOuterClass.internal_static_perfetto_protos_AndroidInputEventConfig_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return perfetto.protos.AndroidInputEventConfigOuterClass.internal_static_perfetto_protos_AndroidInputEventConfig_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                perfetto.protos.AndroidInputEventConfigOuterClass.AndroidInputEventConfig.class, perfetto.protos.AndroidInputEventConfigOuterClass.AndroidInputEventConfig.Builder.class);
      }

      // Construct using perfetto.protos.AndroidInputEventConfigOuterClass.AndroidInputEventConfig.newBuilder()
      private Builder() {

      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);

      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        bitField0_ = 0;
        mode_ = 0;
        if (rulesBuilder_ == null) {
          rules_ = java.util.Collections.emptyList();
        } else {
          rules_ = null;
          rulesBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000002);
        traceDispatcherInputEvents_ = false;
        traceDispatcherWindowDispatch_ = false;
        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return perfetto.protos.AndroidInputEventConfigOuterClass.internal_static_perfetto_protos_AndroidInputEventConfig_descriptor;
      }

      @java.lang.Override
      public perfetto.protos.AndroidInputEventConfigOuterClass.AndroidInputEventConfig getDefaultInstanceForType() {
        return perfetto.protos.AndroidInputEventConfigOuterClass.AndroidInputEventConfig.getDefaultInstance();
      }

      @java.lang.Override
      public perfetto.protos.AndroidInputEventConfigOuterClass.AndroidInputEventConfig build() {
        perfetto.protos.AndroidInputEventConfigOuterClass.AndroidInputEventConfig result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public perfetto.protos.AndroidInputEventConfigOuterClass.AndroidInputEventConfig buildPartial() {
        perfetto.protos.AndroidInputEventConfigOuterClass.AndroidInputEventConfig result = new perfetto.protos.AndroidInputEventConfigOuterClass.AndroidInputEventConfig(this);
        buildPartialRepeatedFields(result);
        if (bitField0_ != 0) { buildPartial0(result); }
        onBuilt();
        return result;
      }

      private void buildPartialRepeatedFields(perfetto.protos.AndroidInputEventConfigOuterClass.AndroidInputEventConfig result) {
        if (rulesBuilder_ == null) {
          if (((bitField0_ & 0x00000002) != 0)) {
            rules_ = java.util.Collections.unmodifiableList(rules_);
            bitField0_ = (bitField0_ & ~0x00000002);
          }
          result.rules_ = rules_;
        } else {
          result.rules_ = rulesBuilder_.build();
        }
      }

      private void buildPartial0(perfetto.protos.AndroidInputEventConfigOuterClass.AndroidInputEventConfig result) {
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) != 0)) {
          result.mode_ = mode_;
          to_bitField0_ |= 0x00000001;
        }
        if (((from_bitField0_ & 0x00000004) != 0)) {
          result.traceDispatcherInputEvents_ = traceDispatcherInputEvents_;
          to_bitField0_ |= 0x00000002;
        }
        if (((from_bitField0_ & 0x00000008) != 0)) {
          result.traceDispatcherWindowDispatch_ = traceDispatcherWindowDispatch_;
          to_bitField0_ |= 0x00000004;
        }
        result.bitField0_ |= to_bitField0_;
      }

      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof perfetto.protos.AndroidInputEventConfigOuterClass.AndroidInputEventConfig) {
          return mergeFrom((perfetto.protos.AndroidInputEventConfigOuterClass.AndroidInputEventConfig)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(perfetto.protos.AndroidInputEventConfigOuterClass.AndroidInputEventConfig other) {
        if (other == perfetto.protos.AndroidInputEventConfigOuterClass.AndroidInputEventConfig.getDefaultInstance()) return this;
        if (other.hasMode()) {
          setMode(other.getMode());
        }
        if (rulesBuilder_ == null) {
          if (!other.rules_.isEmpty()) {
            if (rules_.isEmpty()) {
              rules_ = other.rules_;
              bitField0_ = (bitField0_ & ~0x00000002);
            } else {
              ensureRulesIsMutable();
              rules_.addAll(other.rules_);
            }
            onChanged();
          }
        } else {
          if (!other.rules_.isEmpty()) {
            if (rulesBuilder_.isEmpty()) {
              rulesBuilder_.dispose();
              rulesBuilder_ = null;
              rules_ = other.rules_;
              bitField0_ = (bitField0_ & ~0x00000002);
              rulesBuilder_ = 
                com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders ?
                   getRulesFieldBuilder() : null;
            } else {
              rulesBuilder_.addAllMessages(other.rules_);
            }
          }
        }
        if (other.hasTraceDispatcherInputEvents()) {
          setTraceDispatcherInputEvents(other.getTraceDispatcherInputEvents());
        }
        if (other.hasTraceDispatcherWindowDispatch()) {
          setTraceDispatcherWindowDispatch(other.getTraceDispatcherWindowDispatch());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        if (extensionRegistry == null) {
          throw new java.lang.NullPointerException();
        }
        try {
          boolean done = false;
          while (!done) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                done = true;
                break;
              case 8: {
                int tmpRaw = input.readEnum();
                perfetto.protos.AndroidInputEventConfigOuterClass.AndroidInputEventConfig.TraceMode tmpValue =
                    perfetto.protos.AndroidInputEventConfigOuterClass.AndroidInputEventConfig.TraceMode.forNumber(tmpRaw);
                if (tmpValue == null) {
                  mergeUnknownVarintField(1, tmpRaw);
                } else {
                  mode_ = tmpRaw;
                  bitField0_ |= 0x00000001;
                }
                break;
              } // case 8
              case 18: {
                perfetto.protos.AndroidInputEventConfigOuterClass.AndroidInputEventConfig.TraceRule m =
                    input.readMessage(
                        perfetto.protos.AndroidInputEventConfigOuterClass.AndroidInputEventConfig.TraceRule.parser(),
                        extensionRegistry);
                if (rulesBuilder_ == null) {
                  ensureRulesIsMutable();
                  rules_.add(m);
                } else {
                  rulesBuilder_.addMessage(m);
                }
                break;
              } // case 18
              case 24: {
                traceDispatcherInputEvents_ = input.readBool();
                bitField0_ |= 0x00000004;
                break;
              } // case 24
              case 32: {
                traceDispatcherWindowDispatch_ = input.readBool();
                bitField0_ |= 0x00000008;
                break;
              } // case 32
              default: {
                if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                  done = true; // was an endgroup tag
                }
                break;
              } // default:
            } // switch (tag)
          } // while (!done)
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.unwrapIOException();
        } finally {
          onChanged();
        } // finally
        return this;
      }
      private int bitField0_;

      private int mode_ = 0;
      /**
       * <pre>
       * The tracing mode to use. If unspecified, it will default to
       * TRACE_MODE_USE_RULES.
       * </pre>
       *
       * <code>optional .perfetto.protos.AndroidInputEventConfig.TraceMode mode = 1;</code>
       * @return Whether the mode field is set.
       */
      @java.lang.Override public boolean hasMode() {
        return ((bitField0_ & 0x00000001) != 0);
      }
      /**
       * <pre>
       * The tracing mode to use. If unspecified, it will default to
       * TRACE_MODE_USE_RULES.
       * </pre>
       *
       * <code>optional .perfetto.protos.AndroidInputEventConfig.TraceMode mode = 1;</code>
       * @return The mode.
       */
      @java.lang.Override
      public perfetto.protos.AndroidInputEventConfigOuterClass.AndroidInputEventConfig.TraceMode getMode() {
        perfetto.protos.AndroidInputEventConfigOuterClass.AndroidInputEventConfig.TraceMode result = perfetto.protos.AndroidInputEventConfigOuterClass.AndroidInputEventConfig.TraceMode.forNumber(mode_);
        return result == null ? perfetto.protos.AndroidInputEventConfigOuterClass.AndroidInputEventConfig.TraceMode.TRACE_MODE_TRACE_ALL : result;
      }
      /**
       * <pre>
       * The tracing mode to use. If unspecified, it will default to
       * TRACE_MODE_USE_RULES.
       * </pre>
       *
       * <code>optional .perfetto.protos.AndroidInputEventConfig.TraceMode mode = 1;</code>
       * @param value The mode to set.
       * @return This builder for chaining.
       */
      public Builder setMode(perfetto.protos.AndroidInputEventConfigOuterClass.AndroidInputEventConfig.TraceMode value) {
        if (value == null) {
          throw new NullPointerException();
        }
        bitField0_ |= 0x00000001;
        mode_ = value.getNumber();
        onChanged();
        return this;
      }
      /**
       * <pre>
       * The tracing mode to use. If unspecified, it will default to
       * TRACE_MODE_USE_RULES.
       * </pre>
       *
       * <code>optional .perfetto.protos.AndroidInputEventConfig.TraceMode mode = 1;</code>
       * @return This builder for chaining.
       */
      public Builder clearMode() {
        bitField0_ = (bitField0_ & ~0x00000001);
        mode_ = 0;
        onChanged();
        return this;
      }

      private java.util.List<perfetto.protos.AndroidInputEventConfigOuterClass.AndroidInputEventConfig.TraceRule> rules_ =
        java.util.Collections.emptyList();
      private void ensureRulesIsMutable() {
        if (!((bitField0_ & 0x00000002) != 0)) {
          rules_ = new java.util.ArrayList<perfetto.protos.AndroidInputEventConfigOuterClass.AndroidInputEventConfig.TraceRule>(rules_);
          bitField0_ |= 0x00000002;
         }
      }

      private com.google.protobuf.RepeatedFieldBuilder<
          perfetto.protos.AndroidInputEventConfigOuterClass.AndroidInputEventConfig.TraceRule, perfetto.protos.AndroidInputEventConfigOuterClass.AndroidInputEventConfig.TraceRule.Builder, perfetto.protos.AndroidInputEventConfigOuterClass.AndroidInputEventConfig.TraceRuleOrBuilder> rulesBuilder_;

      /**
       * <pre>
       * The list of rules to use to determine the trace level of events.
       * Each event will be traced using the TraceLevel of the first rule that it
       * triggers from this list. The rules are evaluated in the order in which they
       * are specified. If an event does not match any of the rules,
       * TRACE_LEVEL_NONE will be used by default.
       * </pre>
       *
       * <code>repeated .perfetto.protos.AndroidInputEventConfig.TraceRule rules = 2;</code>
       */
      public java.util.List<perfetto.protos.AndroidInputEventConfigOuterClass.AndroidInputEventConfig.TraceRule> getRulesList() {
        if (rulesBuilder_ == null) {
          return java.util.Collections.unmodifiableList(rules_);
        } else {
          return rulesBuilder_.getMessageList();
        }
      }
      /**
       * <pre>
       * The list of rules to use to determine the trace level of events.
       * Each event will be traced using the TraceLevel of the first rule that it
       * triggers from this list. The rules are evaluated in the order in which they
       * are specified. If an event does not match any of the rules,
       * TRACE_LEVEL_NONE will be used by default.
       * </pre>
       *
       * <code>repeated .perfetto.protos.AndroidInputEventConfig.TraceRule rules = 2;</code>
       */
      public int getRulesCount() {
        if (rulesBuilder_ == null) {
          return rules_.size();
        } else {
          return rulesBuilder_.getCount();
        }
      }
      /**
       * <pre>
       * The list of rules to use to determine the trace level of events.
       * Each event will be traced using the TraceLevel of the first rule that it
       * triggers from this list. The rules are evaluated in the order in which they
       * are specified. If an event does not match any of the rules,
       * TRACE_LEVEL_NONE will be used by default.
       * </pre>
       *
       * <code>repeated .perfetto.protos.AndroidInputEventConfig.TraceRule rules = 2;</code>
       */
      public perfetto.protos.AndroidInputEventConfigOuterClass.AndroidInputEventConfig.TraceRule getRules(int index) {
        if (rulesBuilder_ == null) {
          return rules_.get(index);
        } else {
          return rulesBuilder_.getMessage(index);
        }
      }
      /**
       * <pre>
       * The list of rules to use to determine the trace level of events.
       * Each event will be traced using the TraceLevel of the first rule that it
       * triggers from this list. The rules are evaluated in the order in which they
       * are specified. If an event does not match any of the rules,
       * TRACE_LEVEL_NONE will be used by default.
       * </pre>
       *
       * <code>repeated .perfetto.protos.AndroidInputEventConfig.TraceRule rules = 2;</code>
       */
      public Builder setRules(
          int index, perfetto.protos.AndroidInputEventConfigOuterClass.AndroidInputEventConfig.TraceRule value) {
        if (rulesBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureRulesIsMutable();
          rules_.set(index, value);
          onChanged();
        } else {
          rulesBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <pre>
       * The list of rules to use to determine the trace level of events.
       * Each event will be traced using the TraceLevel of the first rule that it
       * triggers from this list. The rules are evaluated in the order in which they
       * are specified. If an event does not match any of the rules,
       * TRACE_LEVEL_NONE will be used by default.
       * </pre>
       *
       * <code>repeated .perfetto.protos.AndroidInputEventConfig.TraceRule rules = 2;</code>
       */
      public Builder setRules(
          int index, perfetto.protos.AndroidInputEventConfigOuterClass.AndroidInputEventConfig.TraceRule.Builder builderForValue) {
        if (rulesBuilder_ == null) {
          ensureRulesIsMutable();
          rules_.set(index, builderForValue.build());
          onChanged();
        } else {
          rulesBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * The list of rules to use to determine the trace level of events.
       * Each event will be traced using the TraceLevel of the first rule that it
       * triggers from this list. The rules are evaluated in the order in which they
       * are specified. If an event does not match any of the rules,
       * TRACE_LEVEL_NONE will be used by default.
       * </pre>
       *
       * <code>repeated .perfetto.protos.AndroidInputEventConfig.TraceRule rules = 2;</code>
       */
      public Builder addRules(perfetto.protos.AndroidInputEventConfigOuterClass.AndroidInputEventConfig.TraceRule value) {
        if (rulesBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureRulesIsMutable();
          rules_.add(value);
          onChanged();
        } else {
          rulesBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <pre>
       * The list of rules to use to determine the trace level of events.
       * Each event will be traced using the TraceLevel of the first rule that it
       * triggers from this list. The rules are evaluated in the order in which they
       * are specified. If an event does not match any of the rules,
       * TRACE_LEVEL_NONE will be used by default.
       * </pre>
       *
       * <code>repeated .perfetto.protos.AndroidInputEventConfig.TraceRule rules = 2;</code>
       */
      public Builder addRules(
          int index, perfetto.protos.AndroidInputEventConfigOuterClass.AndroidInputEventConfig.TraceRule value) {
        if (rulesBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureRulesIsMutable();
          rules_.add(index, value);
          onChanged();
        } else {
          rulesBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <pre>
       * The list of rules to use to determine the trace level of events.
       * Each event will be traced using the TraceLevel of the first rule that it
       * triggers from this list. The rules are evaluated in the order in which they
       * are specified. If an event does not match any of the rules,
       * TRACE_LEVEL_NONE will be used by default.
       * </pre>
       *
       * <code>repeated .perfetto.protos.AndroidInputEventConfig.TraceRule rules = 2;</code>
       */
      public Builder addRules(
          perfetto.protos.AndroidInputEventConfigOuterClass.AndroidInputEventConfig.TraceRule.Builder builderForValue) {
        if (rulesBuilder_ == null) {
          ensureRulesIsMutable();
          rules_.add(builderForValue.build());
          onChanged();
        } else {
          rulesBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * The list of rules to use to determine the trace level of events.
       * Each event will be traced using the TraceLevel of the first rule that it
       * triggers from this list. The rules are evaluated in the order in which they
       * are specified. If an event does not match any of the rules,
       * TRACE_LEVEL_NONE will be used by default.
       * </pre>
       *
       * <code>repeated .perfetto.protos.AndroidInputEventConfig.TraceRule rules = 2;</code>
       */
      public Builder addRules(
          int index, perfetto.protos.AndroidInputEventConfigOuterClass.AndroidInputEventConfig.TraceRule.Builder builderForValue) {
        if (rulesBuilder_ == null) {
          ensureRulesIsMutable();
          rules_.add(index, builderForValue.build());
          onChanged();
        } else {
          rulesBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * The list of rules to use to determine the trace level of events.
       * Each event will be traced using the TraceLevel of the first rule that it
       * triggers from this list. The rules are evaluated in the order in which they
       * are specified. If an event does not match any of the rules,
       * TRACE_LEVEL_NONE will be used by default.
       * </pre>
       *
       * <code>repeated .perfetto.protos.AndroidInputEventConfig.TraceRule rules = 2;</code>
       */
      public Builder addAllRules(
          java.lang.Iterable<? extends perfetto.protos.AndroidInputEventConfigOuterClass.AndroidInputEventConfig.TraceRule> values) {
        if (rulesBuilder_ == null) {
          ensureRulesIsMutable();
          com.google.protobuf.AbstractMessageLite.Builder.addAll(
              values, rules_);
          onChanged();
        } else {
          rulesBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <pre>
       * The list of rules to use to determine the trace level of events.
       * Each event will be traced using the TraceLevel of the first rule that it
       * triggers from this list. The rules are evaluated in the order in which they
       * are specified. If an event does not match any of the rules,
       * TRACE_LEVEL_NONE will be used by default.
       * </pre>
       *
       * <code>repeated .perfetto.protos.AndroidInputEventConfig.TraceRule rules = 2;</code>
       */
      public Builder clearRules() {
        if (rulesBuilder_ == null) {
          rules_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000002);
          onChanged();
        } else {
          rulesBuilder_.clear();
        }
        return this;
      }
      /**
       * <pre>
       * The list of rules to use to determine the trace level of events.
       * Each event will be traced using the TraceLevel of the first rule that it
       * triggers from this list. The rules are evaluated in the order in which they
       * are specified. If an event does not match any of the rules,
       * TRACE_LEVEL_NONE will be used by default.
       * </pre>
       *
       * <code>repeated .perfetto.protos.AndroidInputEventConfig.TraceRule rules = 2;</code>
       */
      public Builder removeRules(int index) {
        if (rulesBuilder_ == null) {
          ensureRulesIsMutable();
          rules_.remove(index);
          onChanged();
        } else {
          rulesBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <pre>
       * The list of rules to use to determine the trace level of events.
       * Each event will be traced using the TraceLevel of the first rule that it
       * triggers from this list. The rules are evaluated in the order in which they
       * are specified. If an event does not match any of the rules,
       * TRACE_LEVEL_NONE will be used by default.
       * </pre>
       *
       * <code>repeated .perfetto.protos.AndroidInputEventConfig.TraceRule rules = 2;</code>
       */
      public perfetto.protos.AndroidInputEventConfigOuterClass.AndroidInputEventConfig.TraceRule.Builder getRulesBuilder(
          int index) {
        return getRulesFieldBuilder().getBuilder(index);
      }
      /**
       * <pre>
       * The list of rules to use to determine the trace level of events.
       * Each event will be traced using the TraceLevel of the first rule that it
       * triggers from this list. The rules are evaluated in the order in which they
       * are specified. If an event does not match any of the rules,
       * TRACE_LEVEL_NONE will be used by default.
       * </pre>
       *
       * <code>repeated .perfetto.protos.AndroidInputEventConfig.TraceRule rules = 2;</code>
       */
      public perfetto.protos.AndroidInputEventConfigOuterClass.AndroidInputEventConfig.TraceRuleOrBuilder getRulesOrBuilder(
          int index) {
        if (rulesBuilder_ == null) {
          return rules_.get(index);  } else {
          return rulesBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <pre>
       * The list of rules to use to determine the trace level of events.
       * Each event will be traced using the TraceLevel of the first rule that it
       * triggers from this list. The rules are evaluated in the order in which they
       * are specified. If an event does not match any of the rules,
       * TRACE_LEVEL_NONE will be used by default.
       * </pre>
       *
       * <code>repeated .perfetto.protos.AndroidInputEventConfig.TraceRule rules = 2;</code>
       */
      public java.util.List<? extends perfetto.protos.AndroidInputEventConfigOuterClass.AndroidInputEventConfig.TraceRuleOrBuilder> 
           getRulesOrBuilderList() {
        if (rulesBuilder_ != null) {
          return rulesBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(rules_);
        }
      }
      /**
       * <pre>
       * The list of rules to use to determine the trace level of events.
       * Each event will be traced using the TraceLevel of the first rule that it
       * triggers from this list. The rules are evaluated in the order in which they
       * are specified. If an event does not match any of the rules,
       * TRACE_LEVEL_NONE will be used by default.
       * </pre>
       *
       * <code>repeated .perfetto.protos.AndroidInputEventConfig.TraceRule rules = 2;</code>
       */
      public perfetto.protos.AndroidInputEventConfigOuterClass.AndroidInputEventConfig.TraceRule.Builder addRulesBuilder() {
        return getRulesFieldBuilder().addBuilder(
            perfetto.protos.AndroidInputEventConfigOuterClass.AndroidInputEventConfig.TraceRule.getDefaultInstance());
      }
      /**
       * <pre>
       * The list of rules to use to determine the trace level of events.
       * Each event will be traced using the TraceLevel of the first rule that it
       * triggers from this list. The rules are evaluated in the order in which they
       * are specified. If an event does not match any of the rules,
       * TRACE_LEVEL_NONE will be used by default.
       * </pre>
       *
       * <code>repeated .perfetto.protos.AndroidInputEventConfig.TraceRule rules = 2;</code>
       */
      public perfetto.protos.AndroidInputEventConfigOuterClass.AndroidInputEventConfig.TraceRule.Builder addRulesBuilder(
          int index) {
        return getRulesFieldBuilder().addBuilder(
            index, perfetto.protos.AndroidInputEventConfigOuterClass.AndroidInputEventConfig.TraceRule.getDefaultInstance());
      }
      /**
       * <pre>
       * The list of rules to use to determine the trace level of events.
       * Each event will be traced using the TraceLevel of the first rule that it
       * triggers from this list. The rules are evaluated in the order in which they
       * are specified. If an event does not match any of the rules,
       * TRACE_LEVEL_NONE will be used by default.
       * </pre>
       *
       * <code>repeated .perfetto.protos.AndroidInputEventConfig.TraceRule rules = 2;</code>
       */
      public java.util.List<perfetto.protos.AndroidInputEventConfigOuterClass.AndroidInputEventConfig.TraceRule.Builder> 
           getRulesBuilderList() {
        return getRulesFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilder<
          perfetto.protos.AndroidInputEventConfigOuterClass.AndroidInputEventConfig.TraceRule, perfetto.protos.AndroidInputEventConfigOuterClass.AndroidInputEventConfig.TraceRule.Builder, perfetto.protos.AndroidInputEventConfigOuterClass.AndroidInputEventConfig.TraceRuleOrBuilder> 
          getRulesFieldBuilder() {
        if (rulesBuilder_ == null) {
          rulesBuilder_ = new com.google.protobuf.RepeatedFieldBuilder<
              perfetto.protos.AndroidInputEventConfigOuterClass.AndroidInputEventConfig.TraceRule, perfetto.protos.AndroidInputEventConfigOuterClass.AndroidInputEventConfig.TraceRule.Builder, perfetto.protos.AndroidInputEventConfigOuterClass.AndroidInputEventConfig.TraceRuleOrBuilder>(
                  rules_,
                  ((bitField0_ & 0x00000002) != 0),
                  getParentForChildren(),
                  isClean());
          rules_ = null;
        }
        return rulesBuilder_;
      }

      private boolean traceDispatcherInputEvents_ ;
      /**
       * <pre>
       * Trace input events processed by the system as they are being dispatched
       * to application windows. All trace rules will apply.
       * - If this flag is used without enabling trace_dispatcher_window_dispatch,
       * it will
       * trace InputDispatcher's inbound events (which does not include events
       * synthesized within InputDispatcher) that match the rules.
       * - If used with trace_dispatcher_window_dispatch, all inbound and outbound
       * events
       * matching the rules, including all events synthesized within
       * InputDispatcher, will be traced.
       * </pre>
       *
       * <code>optional bool trace_dispatcher_input_events = 3;</code>
       * @return Whether the traceDispatcherInputEvents field is set.
       */
      @java.lang.Override
      public boolean hasTraceDispatcherInputEvents() {
        return ((bitField0_ & 0x00000004) != 0);
      }
      /**
       * <pre>
       * Trace input events processed by the system as they are being dispatched
       * to application windows. All trace rules will apply.
       * - If this flag is used without enabling trace_dispatcher_window_dispatch,
       * it will
       * trace InputDispatcher's inbound events (which does not include events
       * synthesized within InputDispatcher) that match the rules.
       * - If used with trace_dispatcher_window_dispatch, all inbound and outbound
       * events
       * matching the rules, including all events synthesized within
       * InputDispatcher, will be traced.
       * </pre>
       *
       * <code>optional bool trace_dispatcher_input_events = 3;</code>
       * @return The traceDispatcherInputEvents.
       */
      @java.lang.Override
      public boolean getTraceDispatcherInputEvents() {
        return traceDispatcherInputEvents_;
      }
      /**
       * <pre>
       * Trace input events processed by the system as they are being dispatched
       * to application windows. All trace rules will apply.
       * - If this flag is used without enabling trace_dispatcher_window_dispatch,
       * it will
       * trace InputDispatcher's inbound events (which does not include events
       * synthesized within InputDispatcher) that match the rules.
       * - If used with trace_dispatcher_window_dispatch, all inbound and outbound
       * events
       * matching the rules, including all events synthesized within
       * InputDispatcher, will be traced.
       * </pre>
       *
       * <code>optional bool trace_dispatcher_input_events = 3;</code>
       * @param value The traceDispatcherInputEvents to set.
       * @return This builder for chaining.
       */
      public Builder setTraceDispatcherInputEvents(boolean value) {

        traceDispatcherInputEvents_ = value;
        bitField0_ |= 0x00000004;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Trace input events processed by the system as they are being dispatched
       * to application windows. All trace rules will apply.
       * - If this flag is used without enabling trace_dispatcher_window_dispatch,
       * it will
       * trace InputDispatcher's inbound events (which does not include events
       * synthesized within InputDispatcher) that match the rules.
       * - If used with trace_dispatcher_window_dispatch, all inbound and outbound
       * events
       * matching the rules, including all events synthesized within
       * InputDispatcher, will be traced.
       * </pre>
       *
       * <code>optional bool trace_dispatcher_input_events = 3;</code>
       * @return This builder for chaining.
       */
      public Builder clearTraceDispatcherInputEvents() {
        bitField0_ = (bitField0_ & ~0x00000004);
        traceDispatcherInputEvents_ = false;
        onChanged();
        return this;
      }

      private boolean traceDispatcherWindowDispatch_ ;
      /**
       * <pre>
       * Trace details about which windows the system is sending each input event
       * to. All trace rules will apply.
       * </pre>
       *
       * <code>optional bool trace_dispatcher_window_dispatch = 4;</code>
       * @return Whether the traceDispatcherWindowDispatch field is set.
       */
      @java.lang.Override
      public boolean hasTraceDispatcherWindowDispatch() {
        return ((bitField0_ & 0x00000008) != 0);
      }
      /**
       * <pre>
       * Trace details about which windows the system is sending each input event
       * to. All trace rules will apply.
       * </pre>
       *
       * <code>optional bool trace_dispatcher_window_dispatch = 4;</code>
       * @return The traceDispatcherWindowDispatch.
       */
      @java.lang.Override
      public boolean getTraceDispatcherWindowDispatch() {
        return traceDispatcherWindowDispatch_;
      }
      /**
       * <pre>
       * Trace details about which windows the system is sending each input event
       * to. All trace rules will apply.
       * </pre>
       *
       * <code>optional bool trace_dispatcher_window_dispatch = 4;</code>
       * @param value The traceDispatcherWindowDispatch to set.
       * @return This builder for chaining.
       */
      public Builder setTraceDispatcherWindowDispatch(boolean value) {

        traceDispatcherWindowDispatch_ = value;
        bitField0_ |= 0x00000008;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Trace details about which windows the system is sending each input event
       * to. All trace rules will apply.
       * </pre>
       *
       * <code>optional bool trace_dispatcher_window_dispatch = 4;</code>
       * @return This builder for chaining.
       */
      public Builder clearTraceDispatcherWindowDispatch() {
        bitField0_ = (bitField0_ & ~0x00000008);
        traceDispatcherWindowDispatch_ = false;
        onChanged();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:perfetto.protos.AndroidInputEventConfig)
    }

    // @@protoc_insertion_point(class_scope:perfetto.protos.AndroidInputEventConfig)
    private static final perfetto.protos.AndroidInputEventConfigOuterClass.AndroidInputEventConfig DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new perfetto.protos.AndroidInputEventConfigOuterClass.AndroidInputEventConfig();
    }

    public static perfetto.protos.AndroidInputEventConfigOuterClass.AndroidInputEventConfig getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<AndroidInputEventConfig>
        PARSER = new com.google.protobuf.AbstractParser<AndroidInputEventConfig>() {
      @java.lang.Override
      public AndroidInputEventConfig parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        Builder builder = newBuilder();
        try {
          builder.mergeFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.setUnfinishedMessage(builder.buildPartial());
        } catch (com.google.protobuf.UninitializedMessageException e) {
          throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
        } catch (java.io.IOException e) {
          throw new com.google.protobuf.InvalidProtocolBufferException(e)
              .setUnfinishedMessage(builder.buildPartial());
        }
        return builder.buildPartial();
      }
    };

    public static com.google.protobuf.Parser<AndroidInputEventConfig> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<AndroidInputEventConfig> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public perfetto.protos.AndroidInputEventConfigOuterClass.AndroidInputEventConfig getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_perfetto_protos_AndroidInputEventConfig_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_perfetto_protos_AndroidInputEventConfig_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_perfetto_protos_AndroidInputEventConfig_TraceRule_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_perfetto_protos_AndroidInputEventConfig_TraceRule_fieldAccessorTable;

  public static com.google.protobuf.Descriptors.FileDescriptor
      getDescriptor() {
    return descriptor;
  }
  private static  com.google.protobuf.Descriptors.FileDescriptor
      descriptor;
  static {
    java.lang.String[] descriptorData = {
      "\n?protos/perfetto/config/android/android" +
      "_input_event_config.proto\022\017perfetto.prot" +
      "os\"\323\004\n\027AndroidInputEventConfig\022@\n\004mode\030\001" +
      " \001(\01622.perfetto.protos.AndroidInputEvent" +
      "Config.TraceMode\022A\n\005rules\030\002 \003(\01322.perfet" +
      "to.protos.AndroidInputEventConfig.TraceR" +
      "ule\022%\n\035trace_dispatcher_input_events\030\003 \001" +
      "(\010\022(\n trace_dispatcher_window_dispatch\030\004" +
      " \001(\010\032\310\001\n\tTraceRule\022H\n\013trace_level\030\001 \001(\0162" +
      "3.perfetto.protos.AndroidInputEventConfi" +
      "g.TraceLevel\022\032\n\022match_all_packages\030\002 \003(\t" +
      "\022\032\n\022match_any_packages\030\003 \003(\t\022\024\n\014match_se" +
      "cure\030\004 \001(\010\022#\n\033match_ime_connection_activ" +
      "e\030\005 \001(\010\"?\n\tTraceMode\022\030\n\024TRACE_MODE_TRACE" +
      "_ALL\020\000\022\030\n\024TRACE_MODE_USE_RULES\020\001\"V\n\nTrac" +
      "eLevel\022\024\n\020TRACE_LEVEL_NONE\020\000\022\030\n\024TRACE_LE" +
      "VEL_REDACTED\020\001\022\030\n\024TRACE_LEVEL_COMPLETE\020\002"
    };
    descriptor = com.google.protobuf.Descriptors.FileDescriptor
      .internalBuildGeneratedFileFrom(descriptorData,
        new com.google.protobuf.Descriptors.FileDescriptor[] {
        });
    internal_static_perfetto_protos_AndroidInputEventConfig_descriptor =
      getDescriptor().getMessageTypes().get(0);
    internal_static_perfetto_protos_AndroidInputEventConfig_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessage.FieldAccessorTable(
        internal_static_perfetto_protos_AndroidInputEventConfig_descriptor,
        new java.lang.String[] { "Mode", "Rules", "TraceDispatcherInputEvents", "TraceDispatcherWindowDispatch", });
    internal_static_perfetto_protos_AndroidInputEventConfig_TraceRule_descriptor =
      internal_static_perfetto_protos_AndroidInputEventConfig_descriptor.getNestedTypes().get(0);
    internal_static_perfetto_protos_AndroidInputEventConfig_TraceRule_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessage.FieldAccessorTable(
        internal_static_perfetto_protos_AndroidInputEventConfig_TraceRule_descriptor,
        new java.lang.String[] { "TraceLevel", "MatchAllPackages", "MatchAnyPackages", "MatchSecure", "MatchImeConnectionActive", });
    descriptor.resolveAllFeaturesImmutable();
  }

  // @@protoc_insertion_point(outer_class_scope)
}
