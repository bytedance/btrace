// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: protos/perfetto/trace/power/battery_counters.proto
// Protobuf Java Version: 4.29.3

package perfetto.protos;

public final class BatteryCountersOuterClass {
  private BatteryCountersOuterClass() {}
  static {
    com.google.protobuf.RuntimeVersion.validateProtobufGencodeVersion(
      com.google.protobuf.RuntimeVersion.RuntimeDomain.PUBLIC,
      /* major= */ 4,
      /* minor= */ 29,
      /* patch= */ 3,
      /* suffix= */ "",
      BatteryCountersOuterClass.class.getName());
  }
  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistryLite registry) {
  }

  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistry registry) {
    registerAllExtensions(
        (com.google.protobuf.ExtensionRegistryLite) registry);
  }
  public interface BatteryCountersOrBuilder extends
      // @@protoc_insertion_point(interface_extends:perfetto.protos.BatteryCounters)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <pre>
     * Battery capacity in microampere-hours(µAh). Also known as Coulomb counter.
     * </pre>
     *
     * <code>optional int64 charge_counter_uah = 1;</code>
     * @return Whether the chargeCounterUah field is set.
     */
    boolean hasChargeCounterUah();
    /**
     * <pre>
     * Battery capacity in microampere-hours(µAh). Also known as Coulomb counter.
     * </pre>
     *
     * <code>optional int64 charge_counter_uah = 1;</code>
     * @return The chargeCounterUah.
     */
    long getChargeCounterUah();

    /**
     * <pre>
     * Remaining battery capacity percentage of total capacity
     * </pre>
     *
     * <code>optional float capacity_percent = 2;</code>
     * @return Whether the capacityPercent field is set.
     */
    boolean hasCapacityPercent();
    /**
     * <pre>
     * Remaining battery capacity percentage of total capacity
     * </pre>
     *
     * <code>optional float capacity_percent = 2;</code>
     * @return The capacityPercent.
     */
    float getCapacityPercent();

    /**
     * <pre>
     * Instantaneous battery current in microamperes(µA).
     * Negative values indicate current being drained from the battery and
     * positive values indicate current feeding the battery from a charge source
     * (USB).
     *
     * See https://perfetto.dev/docs/data-sources/battery-counters for more info.
     * </pre>
     *
     * <code>optional int64 current_ua = 3;</code>
     * @return Whether the currentUa field is set.
     */
    boolean hasCurrentUa();
    /**
     * <pre>
     * Instantaneous battery current in microamperes(µA).
     * Negative values indicate current being drained from the battery and
     * positive values indicate current feeding the battery from a charge source
     * (USB).
     *
     * See https://perfetto.dev/docs/data-sources/battery-counters for more info.
     * </pre>
     *
     * <code>optional int64 current_ua = 3;</code>
     * @return The currentUa.
     */
    long getCurrentUa();

    /**
     * <pre>
     * Instantaneous battery current in microamperes(µA).
     * </pre>
     *
     * <code>optional int64 current_avg_ua = 4;</code>
     * @return Whether the currentAvgUa field is set.
     */
    boolean hasCurrentAvgUa();
    /**
     * <pre>
     * Instantaneous battery current in microamperes(µA).
     * </pre>
     *
     * <code>optional int64 current_avg_ua = 4;</code>
     * @return The currentAvgUa.
     */
    long getCurrentAvgUa();

    /**
     * <pre>
     * Battery name, emitted only on multiple batteries.
     * </pre>
     *
     * <code>optional string name = 5;</code>
     * @return Whether the name field is set.
     */
    boolean hasName();
    /**
     * <pre>
     * Battery name, emitted only on multiple batteries.
     * </pre>
     *
     * <code>optional string name = 5;</code>
     * @return The name.
     */
    java.lang.String getName();
    /**
     * <pre>
     * Battery name, emitted only on multiple batteries.
     * </pre>
     *
     * <code>optional string name = 5;</code>
     * @return The bytes for name.
     */
    com.google.protobuf.ByteString
        getNameBytes();

    /**
     * <pre>
     * Battery capacity in microwatt-hours(µWh).
     * </pre>
     *
     * <code>optional int64 energy_counter_uwh = 6;</code>
     * @return Whether the energyCounterUwh field is set.
     */
    boolean hasEnergyCounterUwh();
    /**
     * <pre>
     * Battery capacity in microwatt-hours(µWh).
     * </pre>
     *
     * <code>optional int64 energy_counter_uwh = 6;</code>
     * @return The energyCounterUwh.
     */
    long getEnergyCounterUwh();

    /**
     * <pre>
     * Battery voltage in microvolts(µV).
     * </pre>
     *
     * <code>optional int64 voltage_uv = 7;</code>
     * @return Whether the voltageUv field is set.
     */
    boolean hasVoltageUv();
    /**
     * <pre>
     * Battery voltage in microvolts(µV).
     * </pre>
     *
     * <code>optional int64 voltage_uv = 7;</code>
     * @return The voltageUv.
     */
    long getVoltageUv();
  }
  /**
   * Protobuf type {@code perfetto.protos.BatteryCounters}
   */
  public static final class BatteryCounters extends
      com.google.protobuf.GeneratedMessage implements
      // @@protoc_insertion_point(message_implements:perfetto.protos.BatteryCounters)
      BatteryCountersOrBuilder {
  private static final long serialVersionUID = 0L;
    static {
      com.google.protobuf.RuntimeVersion.validateProtobufGencodeVersion(
        com.google.protobuf.RuntimeVersion.RuntimeDomain.PUBLIC,
        /* major= */ 4,
        /* minor= */ 29,
        /* patch= */ 3,
        /* suffix= */ "",
        BatteryCounters.class.getName());
    }
    // Use BatteryCounters.newBuilder() to construct.
    private BatteryCounters(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
    }
    private BatteryCounters() {
      name_ = "";
    }

    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return perfetto.protos.BatteryCountersOuterClass.internal_static_perfetto_protos_BatteryCounters_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return perfetto.protos.BatteryCountersOuterClass.internal_static_perfetto_protos_BatteryCounters_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              perfetto.protos.BatteryCountersOuterClass.BatteryCounters.class, perfetto.protos.BatteryCountersOuterClass.BatteryCounters.Builder.class);
    }

    private int bitField0_;
    public static final int CHARGE_COUNTER_UAH_FIELD_NUMBER = 1;
    private long chargeCounterUah_ = 0L;
    /**
     * <pre>
     * Battery capacity in microampere-hours(µAh). Also known as Coulomb counter.
     * </pre>
     *
     * <code>optional int64 charge_counter_uah = 1;</code>
     * @return Whether the chargeCounterUah field is set.
     */
    @java.lang.Override
    public boolean hasChargeCounterUah() {
      return ((bitField0_ & 0x00000001) != 0);
    }
    /**
     * <pre>
     * Battery capacity in microampere-hours(µAh). Also known as Coulomb counter.
     * </pre>
     *
     * <code>optional int64 charge_counter_uah = 1;</code>
     * @return The chargeCounterUah.
     */
    @java.lang.Override
    public long getChargeCounterUah() {
      return chargeCounterUah_;
    }

    public static final int CAPACITY_PERCENT_FIELD_NUMBER = 2;
    private float capacityPercent_ = 0F;
    /**
     * <pre>
     * Remaining battery capacity percentage of total capacity
     * </pre>
     *
     * <code>optional float capacity_percent = 2;</code>
     * @return Whether the capacityPercent field is set.
     */
    @java.lang.Override
    public boolean hasCapacityPercent() {
      return ((bitField0_ & 0x00000002) != 0);
    }
    /**
     * <pre>
     * Remaining battery capacity percentage of total capacity
     * </pre>
     *
     * <code>optional float capacity_percent = 2;</code>
     * @return The capacityPercent.
     */
    @java.lang.Override
    public float getCapacityPercent() {
      return capacityPercent_;
    }

    public static final int CURRENT_UA_FIELD_NUMBER = 3;
    private long currentUa_ = 0L;
    /**
     * <pre>
     * Instantaneous battery current in microamperes(µA).
     * Negative values indicate current being drained from the battery and
     * positive values indicate current feeding the battery from a charge source
     * (USB).
     *
     * See https://perfetto.dev/docs/data-sources/battery-counters for more info.
     * </pre>
     *
     * <code>optional int64 current_ua = 3;</code>
     * @return Whether the currentUa field is set.
     */
    @java.lang.Override
    public boolean hasCurrentUa() {
      return ((bitField0_ & 0x00000004) != 0);
    }
    /**
     * <pre>
     * Instantaneous battery current in microamperes(µA).
     * Negative values indicate current being drained from the battery and
     * positive values indicate current feeding the battery from a charge source
     * (USB).
     *
     * See https://perfetto.dev/docs/data-sources/battery-counters for more info.
     * </pre>
     *
     * <code>optional int64 current_ua = 3;</code>
     * @return The currentUa.
     */
    @java.lang.Override
    public long getCurrentUa() {
      return currentUa_;
    }

    public static final int CURRENT_AVG_UA_FIELD_NUMBER = 4;
    private long currentAvgUa_ = 0L;
    /**
     * <pre>
     * Instantaneous battery current in microamperes(µA).
     * </pre>
     *
     * <code>optional int64 current_avg_ua = 4;</code>
     * @return Whether the currentAvgUa field is set.
     */
    @java.lang.Override
    public boolean hasCurrentAvgUa() {
      return ((bitField0_ & 0x00000008) != 0);
    }
    /**
     * <pre>
     * Instantaneous battery current in microamperes(µA).
     * </pre>
     *
     * <code>optional int64 current_avg_ua = 4;</code>
     * @return The currentAvgUa.
     */
    @java.lang.Override
    public long getCurrentAvgUa() {
      return currentAvgUa_;
    }

    public static final int NAME_FIELD_NUMBER = 5;
    @SuppressWarnings("serial")
    private volatile java.lang.Object name_ = "";
    /**
     * <pre>
     * Battery name, emitted only on multiple batteries.
     * </pre>
     *
     * <code>optional string name = 5;</code>
     * @return Whether the name field is set.
     */
    @java.lang.Override
    public boolean hasName() {
      return ((bitField0_ & 0x00000010) != 0);
    }
    /**
     * <pre>
     * Battery name, emitted only on multiple batteries.
     * </pre>
     *
     * <code>optional string name = 5;</code>
     * @return The name.
     */
    @java.lang.Override
    public java.lang.String getName() {
      java.lang.Object ref = name_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        if (bs.isValidUtf8()) {
          name_ = s;
        }
        return s;
      }
    }
    /**
     * <pre>
     * Battery name, emitted only on multiple batteries.
     * </pre>
     *
     * <code>optional string name = 5;</code>
     * @return The bytes for name.
     */
    @java.lang.Override
    public com.google.protobuf.ByteString
        getNameBytes() {
      java.lang.Object ref = name_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        name_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    public static final int ENERGY_COUNTER_UWH_FIELD_NUMBER = 6;
    private long energyCounterUwh_ = 0L;
    /**
     * <pre>
     * Battery capacity in microwatt-hours(µWh).
     * </pre>
     *
     * <code>optional int64 energy_counter_uwh = 6;</code>
     * @return Whether the energyCounterUwh field is set.
     */
    @java.lang.Override
    public boolean hasEnergyCounterUwh() {
      return ((bitField0_ & 0x00000020) != 0);
    }
    /**
     * <pre>
     * Battery capacity in microwatt-hours(µWh).
     * </pre>
     *
     * <code>optional int64 energy_counter_uwh = 6;</code>
     * @return The energyCounterUwh.
     */
    @java.lang.Override
    public long getEnergyCounterUwh() {
      return energyCounterUwh_;
    }

    public static final int VOLTAGE_UV_FIELD_NUMBER = 7;
    private long voltageUv_ = 0L;
    /**
     * <pre>
     * Battery voltage in microvolts(µV).
     * </pre>
     *
     * <code>optional int64 voltage_uv = 7;</code>
     * @return Whether the voltageUv field is set.
     */
    @java.lang.Override
    public boolean hasVoltageUv() {
      return ((bitField0_ & 0x00000040) != 0);
    }
    /**
     * <pre>
     * Battery voltage in microvolts(µV).
     * </pre>
     *
     * <code>optional int64 voltage_uv = 7;</code>
     * @return The voltageUv.
     */
    @java.lang.Override
    public long getVoltageUv() {
      return voltageUv_;
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (((bitField0_ & 0x00000001) != 0)) {
        output.writeInt64(1, chargeCounterUah_);
      }
      if (((bitField0_ & 0x00000002) != 0)) {
        output.writeFloat(2, capacityPercent_);
      }
      if (((bitField0_ & 0x00000004) != 0)) {
        output.writeInt64(3, currentUa_);
      }
      if (((bitField0_ & 0x00000008) != 0)) {
        output.writeInt64(4, currentAvgUa_);
      }
      if (((bitField0_ & 0x00000010) != 0)) {
        com.google.protobuf.GeneratedMessage.writeString(output, 5, name_);
      }
      if (((bitField0_ & 0x00000020) != 0)) {
        output.writeInt64(6, energyCounterUwh_);
      }
      if (((bitField0_ & 0x00000040) != 0)) {
        output.writeInt64(7, voltageUv_);
      }
      getUnknownFields().writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) != 0)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt64Size(1, chargeCounterUah_);
      }
      if (((bitField0_ & 0x00000002) != 0)) {
        size += com.google.protobuf.CodedOutputStream
          .computeFloatSize(2, capacityPercent_);
      }
      if (((bitField0_ & 0x00000004) != 0)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt64Size(3, currentUa_);
      }
      if (((bitField0_ & 0x00000008) != 0)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt64Size(4, currentAvgUa_);
      }
      if (((bitField0_ & 0x00000010) != 0)) {
        size += com.google.protobuf.GeneratedMessage.computeStringSize(5, name_);
      }
      if (((bitField0_ & 0x00000020) != 0)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt64Size(6, energyCounterUwh_);
      }
      if (((bitField0_ & 0x00000040) != 0)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt64Size(7, voltageUv_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof perfetto.protos.BatteryCountersOuterClass.BatteryCounters)) {
        return super.equals(obj);
      }
      perfetto.protos.BatteryCountersOuterClass.BatteryCounters other = (perfetto.protos.BatteryCountersOuterClass.BatteryCounters) obj;

      if (hasChargeCounterUah() != other.hasChargeCounterUah()) return false;
      if (hasChargeCounterUah()) {
        if (getChargeCounterUah()
            != other.getChargeCounterUah()) return false;
      }
      if (hasCapacityPercent() != other.hasCapacityPercent()) return false;
      if (hasCapacityPercent()) {
        if (java.lang.Float.floatToIntBits(getCapacityPercent())
            != java.lang.Float.floatToIntBits(
                other.getCapacityPercent())) return false;
      }
      if (hasCurrentUa() != other.hasCurrentUa()) return false;
      if (hasCurrentUa()) {
        if (getCurrentUa()
            != other.getCurrentUa()) return false;
      }
      if (hasCurrentAvgUa() != other.hasCurrentAvgUa()) return false;
      if (hasCurrentAvgUa()) {
        if (getCurrentAvgUa()
            != other.getCurrentAvgUa()) return false;
      }
      if (hasName() != other.hasName()) return false;
      if (hasName()) {
        if (!getName()
            .equals(other.getName())) return false;
      }
      if (hasEnergyCounterUwh() != other.hasEnergyCounterUwh()) return false;
      if (hasEnergyCounterUwh()) {
        if (getEnergyCounterUwh()
            != other.getEnergyCounterUwh()) return false;
      }
      if (hasVoltageUv() != other.hasVoltageUv()) return false;
      if (hasVoltageUv()) {
        if (getVoltageUv()
            != other.getVoltageUv()) return false;
      }
      if (!getUnknownFields().equals(other.getUnknownFields())) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      if (hasChargeCounterUah()) {
        hash = (37 * hash) + CHARGE_COUNTER_UAH_FIELD_NUMBER;
        hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
            getChargeCounterUah());
      }
      if (hasCapacityPercent()) {
        hash = (37 * hash) + CAPACITY_PERCENT_FIELD_NUMBER;
        hash = (53 * hash) + java.lang.Float.floatToIntBits(
            getCapacityPercent());
      }
      if (hasCurrentUa()) {
        hash = (37 * hash) + CURRENT_UA_FIELD_NUMBER;
        hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
            getCurrentUa());
      }
      if (hasCurrentAvgUa()) {
        hash = (37 * hash) + CURRENT_AVG_UA_FIELD_NUMBER;
        hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
            getCurrentAvgUa());
      }
      if (hasName()) {
        hash = (37 * hash) + NAME_FIELD_NUMBER;
        hash = (53 * hash) + getName().hashCode();
      }
      if (hasEnergyCounterUwh()) {
        hash = (37 * hash) + ENERGY_COUNTER_UWH_FIELD_NUMBER;
        hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
            getEnergyCounterUwh());
      }
      if (hasVoltageUv()) {
        hash = (37 * hash) + VOLTAGE_UV_FIELD_NUMBER;
        hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
            getVoltageUv());
      }
      hash = (29 * hash) + getUnknownFields().hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static perfetto.protos.BatteryCountersOuterClass.BatteryCounters parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static perfetto.protos.BatteryCountersOuterClass.BatteryCounters parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static perfetto.protos.BatteryCountersOuterClass.BatteryCounters parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static perfetto.protos.BatteryCountersOuterClass.BatteryCounters parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static perfetto.protos.BatteryCountersOuterClass.BatteryCounters parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static perfetto.protos.BatteryCountersOuterClass.BatteryCounters parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static perfetto.protos.BatteryCountersOuterClass.BatteryCounters parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input);
    }
    public static perfetto.protos.BatteryCountersOuterClass.BatteryCounters parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    public static perfetto.protos.BatteryCountersOuterClass.BatteryCounters parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessage
          .parseDelimitedWithIOException(PARSER, input);
    }

    public static perfetto.protos.BatteryCountersOuterClass.BatteryCounters parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessage
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static perfetto.protos.BatteryCountersOuterClass.BatteryCounters parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input);
    }
    public static perfetto.protos.BatteryCountersOuterClass.BatteryCounters parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(perfetto.protos.BatteryCountersOuterClass.BatteryCounters prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code perfetto.protos.BatteryCounters}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:perfetto.protos.BatteryCounters)
        perfetto.protos.BatteryCountersOuterClass.BatteryCountersOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return perfetto.protos.BatteryCountersOuterClass.internal_static_perfetto_protos_BatteryCounters_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return perfetto.protos.BatteryCountersOuterClass.internal_static_perfetto_protos_BatteryCounters_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                perfetto.protos.BatteryCountersOuterClass.BatteryCounters.class, perfetto.protos.BatteryCountersOuterClass.BatteryCounters.Builder.class);
      }

      // Construct using perfetto.protos.BatteryCountersOuterClass.BatteryCounters.newBuilder()
      private Builder() {

      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);

      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        bitField0_ = 0;
        chargeCounterUah_ = 0L;
        capacityPercent_ = 0F;
        currentUa_ = 0L;
        currentAvgUa_ = 0L;
        name_ = "";
        energyCounterUwh_ = 0L;
        voltageUv_ = 0L;
        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return perfetto.protos.BatteryCountersOuterClass.internal_static_perfetto_protos_BatteryCounters_descriptor;
      }

      @java.lang.Override
      public perfetto.protos.BatteryCountersOuterClass.BatteryCounters getDefaultInstanceForType() {
        return perfetto.protos.BatteryCountersOuterClass.BatteryCounters.getDefaultInstance();
      }

      @java.lang.Override
      public perfetto.protos.BatteryCountersOuterClass.BatteryCounters build() {
        perfetto.protos.BatteryCountersOuterClass.BatteryCounters result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public perfetto.protos.BatteryCountersOuterClass.BatteryCounters buildPartial() {
        perfetto.protos.BatteryCountersOuterClass.BatteryCounters result = new perfetto.protos.BatteryCountersOuterClass.BatteryCounters(this);
        if (bitField0_ != 0) { buildPartial0(result); }
        onBuilt();
        return result;
      }

      private void buildPartial0(perfetto.protos.BatteryCountersOuterClass.BatteryCounters result) {
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) != 0)) {
          result.chargeCounterUah_ = chargeCounterUah_;
          to_bitField0_ |= 0x00000001;
        }
        if (((from_bitField0_ & 0x00000002) != 0)) {
          result.capacityPercent_ = capacityPercent_;
          to_bitField0_ |= 0x00000002;
        }
        if (((from_bitField0_ & 0x00000004) != 0)) {
          result.currentUa_ = currentUa_;
          to_bitField0_ |= 0x00000004;
        }
        if (((from_bitField0_ & 0x00000008) != 0)) {
          result.currentAvgUa_ = currentAvgUa_;
          to_bitField0_ |= 0x00000008;
        }
        if (((from_bitField0_ & 0x00000010) != 0)) {
          result.name_ = name_;
          to_bitField0_ |= 0x00000010;
        }
        if (((from_bitField0_ & 0x00000020) != 0)) {
          result.energyCounterUwh_ = energyCounterUwh_;
          to_bitField0_ |= 0x00000020;
        }
        if (((from_bitField0_ & 0x00000040) != 0)) {
          result.voltageUv_ = voltageUv_;
          to_bitField0_ |= 0x00000040;
        }
        result.bitField0_ |= to_bitField0_;
      }

      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof perfetto.protos.BatteryCountersOuterClass.BatteryCounters) {
          return mergeFrom((perfetto.protos.BatteryCountersOuterClass.BatteryCounters)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(perfetto.protos.BatteryCountersOuterClass.BatteryCounters other) {
        if (other == perfetto.protos.BatteryCountersOuterClass.BatteryCounters.getDefaultInstance()) return this;
        if (other.hasChargeCounterUah()) {
          setChargeCounterUah(other.getChargeCounterUah());
        }
        if (other.hasCapacityPercent()) {
          setCapacityPercent(other.getCapacityPercent());
        }
        if (other.hasCurrentUa()) {
          setCurrentUa(other.getCurrentUa());
        }
        if (other.hasCurrentAvgUa()) {
          setCurrentAvgUa(other.getCurrentAvgUa());
        }
        if (other.hasName()) {
          name_ = other.name_;
          bitField0_ |= 0x00000010;
          onChanged();
        }
        if (other.hasEnergyCounterUwh()) {
          setEnergyCounterUwh(other.getEnergyCounterUwh());
        }
        if (other.hasVoltageUv()) {
          setVoltageUv(other.getVoltageUv());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        if (extensionRegistry == null) {
          throw new java.lang.NullPointerException();
        }
        try {
          boolean done = false;
          while (!done) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                done = true;
                break;
              case 8: {
                chargeCounterUah_ = input.readInt64();
                bitField0_ |= 0x00000001;
                break;
              } // case 8
              case 21: {
                capacityPercent_ = input.readFloat();
                bitField0_ |= 0x00000002;
                break;
              } // case 21
              case 24: {
                currentUa_ = input.readInt64();
                bitField0_ |= 0x00000004;
                break;
              } // case 24
              case 32: {
                currentAvgUa_ = input.readInt64();
                bitField0_ |= 0x00000008;
                break;
              } // case 32
              case 42: {
                name_ = input.readBytes();
                bitField0_ |= 0x00000010;
                break;
              } // case 42
              case 48: {
                energyCounterUwh_ = input.readInt64();
                bitField0_ |= 0x00000020;
                break;
              } // case 48
              case 56: {
                voltageUv_ = input.readInt64();
                bitField0_ |= 0x00000040;
                break;
              } // case 56
              default: {
                if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                  done = true; // was an endgroup tag
                }
                break;
              } // default:
            } // switch (tag)
          } // while (!done)
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.unwrapIOException();
        } finally {
          onChanged();
        } // finally
        return this;
      }
      private int bitField0_;

      private long chargeCounterUah_ ;
      /**
       * <pre>
       * Battery capacity in microampere-hours(µAh). Also known as Coulomb counter.
       * </pre>
       *
       * <code>optional int64 charge_counter_uah = 1;</code>
       * @return Whether the chargeCounterUah field is set.
       */
      @java.lang.Override
      public boolean hasChargeCounterUah() {
        return ((bitField0_ & 0x00000001) != 0);
      }
      /**
       * <pre>
       * Battery capacity in microampere-hours(µAh). Also known as Coulomb counter.
       * </pre>
       *
       * <code>optional int64 charge_counter_uah = 1;</code>
       * @return The chargeCounterUah.
       */
      @java.lang.Override
      public long getChargeCounterUah() {
        return chargeCounterUah_;
      }
      /**
       * <pre>
       * Battery capacity in microampere-hours(µAh). Also known as Coulomb counter.
       * </pre>
       *
       * <code>optional int64 charge_counter_uah = 1;</code>
       * @param value The chargeCounterUah to set.
       * @return This builder for chaining.
       */
      public Builder setChargeCounterUah(long value) {

        chargeCounterUah_ = value;
        bitField0_ |= 0x00000001;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Battery capacity in microampere-hours(µAh). Also known as Coulomb counter.
       * </pre>
       *
       * <code>optional int64 charge_counter_uah = 1;</code>
       * @return This builder for chaining.
       */
      public Builder clearChargeCounterUah() {
        bitField0_ = (bitField0_ & ~0x00000001);
        chargeCounterUah_ = 0L;
        onChanged();
        return this;
      }

      private float capacityPercent_ ;
      /**
       * <pre>
       * Remaining battery capacity percentage of total capacity
       * </pre>
       *
       * <code>optional float capacity_percent = 2;</code>
       * @return Whether the capacityPercent field is set.
       */
      @java.lang.Override
      public boolean hasCapacityPercent() {
        return ((bitField0_ & 0x00000002) != 0);
      }
      /**
       * <pre>
       * Remaining battery capacity percentage of total capacity
       * </pre>
       *
       * <code>optional float capacity_percent = 2;</code>
       * @return The capacityPercent.
       */
      @java.lang.Override
      public float getCapacityPercent() {
        return capacityPercent_;
      }
      /**
       * <pre>
       * Remaining battery capacity percentage of total capacity
       * </pre>
       *
       * <code>optional float capacity_percent = 2;</code>
       * @param value The capacityPercent to set.
       * @return This builder for chaining.
       */
      public Builder setCapacityPercent(float value) {

        capacityPercent_ = value;
        bitField0_ |= 0x00000002;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Remaining battery capacity percentage of total capacity
       * </pre>
       *
       * <code>optional float capacity_percent = 2;</code>
       * @return This builder for chaining.
       */
      public Builder clearCapacityPercent() {
        bitField0_ = (bitField0_ & ~0x00000002);
        capacityPercent_ = 0F;
        onChanged();
        return this;
      }

      private long currentUa_ ;
      /**
       * <pre>
       * Instantaneous battery current in microamperes(µA).
       * Negative values indicate current being drained from the battery and
       * positive values indicate current feeding the battery from a charge source
       * (USB).
       *
       * See https://perfetto.dev/docs/data-sources/battery-counters for more info.
       * </pre>
       *
       * <code>optional int64 current_ua = 3;</code>
       * @return Whether the currentUa field is set.
       */
      @java.lang.Override
      public boolean hasCurrentUa() {
        return ((bitField0_ & 0x00000004) != 0);
      }
      /**
       * <pre>
       * Instantaneous battery current in microamperes(µA).
       * Negative values indicate current being drained from the battery and
       * positive values indicate current feeding the battery from a charge source
       * (USB).
       *
       * See https://perfetto.dev/docs/data-sources/battery-counters for more info.
       * </pre>
       *
       * <code>optional int64 current_ua = 3;</code>
       * @return The currentUa.
       */
      @java.lang.Override
      public long getCurrentUa() {
        return currentUa_;
      }
      /**
       * <pre>
       * Instantaneous battery current in microamperes(µA).
       * Negative values indicate current being drained from the battery and
       * positive values indicate current feeding the battery from a charge source
       * (USB).
       *
       * See https://perfetto.dev/docs/data-sources/battery-counters for more info.
       * </pre>
       *
       * <code>optional int64 current_ua = 3;</code>
       * @param value The currentUa to set.
       * @return This builder for chaining.
       */
      public Builder setCurrentUa(long value) {

        currentUa_ = value;
        bitField0_ |= 0x00000004;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Instantaneous battery current in microamperes(µA).
       * Negative values indicate current being drained from the battery and
       * positive values indicate current feeding the battery from a charge source
       * (USB).
       *
       * See https://perfetto.dev/docs/data-sources/battery-counters for more info.
       * </pre>
       *
       * <code>optional int64 current_ua = 3;</code>
       * @return This builder for chaining.
       */
      public Builder clearCurrentUa() {
        bitField0_ = (bitField0_ & ~0x00000004);
        currentUa_ = 0L;
        onChanged();
        return this;
      }

      private long currentAvgUa_ ;
      /**
       * <pre>
       * Instantaneous battery current in microamperes(µA).
       * </pre>
       *
       * <code>optional int64 current_avg_ua = 4;</code>
       * @return Whether the currentAvgUa field is set.
       */
      @java.lang.Override
      public boolean hasCurrentAvgUa() {
        return ((bitField0_ & 0x00000008) != 0);
      }
      /**
       * <pre>
       * Instantaneous battery current in microamperes(µA).
       * </pre>
       *
       * <code>optional int64 current_avg_ua = 4;</code>
       * @return The currentAvgUa.
       */
      @java.lang.Override
      public long getCurrentAvgUa() {
        return currentAvgUa_;
      }
      /**
       * <pre>
       * Instantaneous battery current in microamperes(µA).
       * </pre>
       *
       * <code>optional int64 current_avg_ua = 4;</code>
       * @param value The currentAvgUa to set.
       * @return This builder for chaining.
       */
      public Builder setCurrentAvgUa(long value) {

        currentAvgUa_ = value;
        bitField0_ |= 0x00000008;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Instantaneous battery current in microamperes(µA).
       * </pre>
       *
       * <code>optional int64 current_avg_ua = 4;</code>
       * @return This builder for chaining.
       */
      public Builder clearCurrentAvgUa() {
        bitField0_ = (bitField0_ & ~0x00000008);
        currentAvgUa_ = 0L;
        onChanged();
        return this;
      }

      private java.lang.Object name_ = "";
      /**
       * <pre>
       * Battery name, emitted only on multiple batteries.
       * </pre>
       *
       * <code>optional string name = 5;</code>
       * @return Whether the name field is set.
       */
      public boolean hasName() {
        return ((bitField0_ & 0x00000010) != 0);
      }
      /**
       * <pre>
       * Battery name, emitted only on multiple batteries.
       * </pre>
       *
       * <code>optional string name = 5;</code>
       * @return The name.
       */
      public java.lang.String getName() {
        java.lang.Object ref = name_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          if (bs.isValidUtf8()) {
            name_ = s;
          }
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <pre>
       * Battery name, emitted only on multiple batteries.
       * </pre>
       *
       * <code>optional string name = 5;</code>
       * @return The bytes for name.
       */
      public com.google.protobuf.ByteString
          getNameBytes() {
        java.lang.Object ref = name_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          name_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <pre>
       * Battery name, emitted only on multiple batteries.
       * </pre>
       *
       * <code>optional string name = 5;</code>
       * @param value The name to set.
       * @return This builder for chaining.
       */
      public Builder setName(
          java.lang.String value) {
        if (value == null) { throw new NullPointerException(); }
        name_ = value;
        bitField0_ |= 0x00000010;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Battery name, emitted only on multiple batteries.
       * </pre>
       *
       * <code>optional string name = 5;</code>
       * @return This builder for chaining.
       */
      public Builder clearName() {
        name_ = getDefaultInstance().getName();
        bitField0_ = (bitField0_ & ~0x00000010);
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Battery name, emitted only on multiple batteries.
       * </pre>
       *
       * <code>optional string name = 5;</code>
       * @param value The bytes for name to set.
       * @return This builder for chaining.
       */
      public Builder setNameBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) { throw new NullPointerException(); }
        name_ = value;
        bitField0_ |= 0x00000010;
        onChanged();
        return this;
      }

      private long energyCounterUwh_ ;
      /**
       * <pre>
       * Battery capacity in microwatt-hours(µWh).
       * </pre>
       *
       * <code>optional int64 energy_counter_uwh = 6;</code>
       * @return Whether the energyCounterUwh field is set.
       */
      @java.lang.Override
      public boolean hasEnergyCounterUwh() {
        return ((bitField0_ & 0x00000020) != 0);
      }
      /**
       * <pre>
       * Battery capacity in microwatt-hours(µWh).
       * </pre>
       *
       * <code>optional int64 energy_counter_uwh = 6;</code>
       * @return The energyCounterUwh.
       */
      @java.lang.Override
      public long getEnergyCounterUwh() {
        return energyCounterUwh_;
      }
      /**
       * <pre>
       * Battery capacity in microwatt-hours(µWh).
       * </pre>
       *
       * <code>optional int64 energy_counter_uwh = 6;</code>
       * @param value The energyCounterUwh to set.
       * @return This builder for chaining.
       */
      public Builder setEnergyCounterUwh(long value) {

        energyCounterUwh_ = value;
        bitField0_ |= 0x00000020;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Battery capacity in microwatt-hours(µWh).
       * </pre>
       *
       * <code>optional int64 energy_counter_uwh = 6;</code>
       * @return This builder for chaining.
       */
      public Builder clearEnergyCounterUwh() {
        bitField0_ = (bitField0_ & ~0x00000020);
        energyCounterUwh_ = 0L;
        onChanged();
        return this;
      }

      private long voltageUv_ ;
      /**
       * <pre>
       * Battery voltage in microvolts(µV).
       * </pre>
       *
       * <code>optional int64 voltage_uv = 7;</code>
       * @return Whether the voltageUv field is set.
       */
      @java.lang.Override
      public boolean hasVoltageUv() {
        return ((bitField0_ & 0x00000040) != 0);
      }
      /**
       * <pre>
       * Battery voltage in microvolts(µV).
       * </pre>
       *
       * <code>optional int64 voltage_uv = 7;</code>
       * @return The voltageUv.
       */
      @java.lang.Override
      public long getVoltageUv() {
        return voltageUv_;
      }
      /**
       * <pre>
       * Battery voltage in microvolts(µV).
       * </pre>
       *
       * <code>optional int64 voltage_uv = 7;</code>
       * @param value The voltageUv to set.
       * @return This builder for chaining.
       */
      public Builder setVoltageUv(long value) {

        voltageUv_ = value;
        bitField0_ |= 0x00000040;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Battery voltage in microvolts(µV).
       * </pre>
       *
       * <code>optional int64 voltage_uv = 7;</code>
       * @return This builder for chaining.
       */
      public Builder clearVoltageUv() {
        bitField0_ = (bitField0_ & ~0x00000040);
        voltageUv_ = 0L;
        onChanged();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:perfetto.protos.BatteryCounters)
    }

    // @@protoc_insertion_point(class_scope:perfetto.protos.BatteryCounters)
    private static final perfetto.protos.BatteryCountersOuterClass.BatteryCounters DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new perfetto.protos.BatteryCountersOuterClass.BatteryCounters();
    }

    public static perfetto.protos.BatteryCountersOuterClass.BatteryCounters getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<BatteryCounters>
        PARSER = new com.google.protobuf.AbstractParser<BatteryCounters>() {
      @java.lang.Override
      public BatteryCounters parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        Builder builder = newBuilder();
        try {
          builder.mergeFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.setUnfinishedMessage(builder.buildPartial());
        } catch (com.google.protobuf.UninitializedMessageException e) {
          throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
        } catch (java.io.IOException e) {
          throw new com.google.protobuf.InvalidProtocolBufferException(e)
              .setUnfinishedMessage(builder.buildPartial());
        }
        return builder.buildPartial();
      }
    };

    public static com.google.protobuf.Parser<BatteryCounters> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<BatteryCounters> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public perfetto.protos.BatteryCountersOuterClass.BatteryCounters getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_perfetto_protos_BatteryCounters_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_perfetto_protos_BatteryCounters_fieldAccessorTable;

  public static com.google.protobuf.Descriptors.FileDescriptor
      getDescriptor() {
    return descriptor;
  }
  private static  com.google.protobuf.Descriptors.FileDescriptor
      descriptor;
  static {
    java.lang.String[] descriptorData = {
      "\n2protos/perfetto/trace/power/battery_co" +
      "unters.proto\022\017perfetto.protos\"\261\001\n\017Batter" +
      "yCounters\022\032\n\022charge_counter_uah\030\001 \001(\003\022\030\n" +
      "\020capacity_percent\030\002 \001(\002\022\022\n\ncurrent_ua\030\003 " +
      "\001(\003\022\026\n\016current_avg_ua\030\004 \001(\003\022\014\n\004name\030\005 \001(" +
      "\t\022\032\n\022energy_counter_uwh\030\006 \001(\003\022\022\n\nvoltage" +
      "_uv\030\007 \001(\003"
    };
    descriptor = com.google.protobuf.Descriptors.FileDescriptor
      .internalBuildGeneratedFileFrom(descriptorData,
        new com.google.protobuf.Descriptors.FileDescriptor[] {
        });
    internal_static_perfetto_protos_BatteryCounters_descriptor =
      getDescriptor().getMessageTypes().get(0);
    internal_static_perfetto_protos_BatteryCounters_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessage.FieldAccessorTable(
        internal_static_perfetto_protos_BatteryCounters_descriptor,
        new java.lang.String[] { "ChargeCounterUah", "CapacityPercent", "CurrentUa", "CurrentAvgUa", "Name", "EnergyCounterUwh", "VoltageUv", });
    descriptor.resolveAllFeaturesImmutable();
  }

  // @@protoc_insertion_point(outer_class_scope)
}
