// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: protos/perfetto/config/stress_test_config.proto

package perfetto.protos;

public final class StressTestConfigOuterClass {
  private StressTestConfigOuterClass() {}
  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistryLite registry) {
  }

  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistry registry) {
    registerAllExtensions(
        (com.google.protobuf.ExtensionRegistryLite) registry);
  }
  public interface StressTestConfigOrBuilder extends
      // @@protoc_insertion_point(interface_extends:perfetto.protos.StressTestConfig)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <code>optional .perfetto.protos.TraceConfig trace_config = 1;</code>
     * @return Whether the traceConfig field is set.
     */
    boolean hasTraceConfig();
    /**
     * <code>optional .perfetto.protos.TraceConfig trace_config = 1;</code>
     * @return The traceConfig.
     */
    perfetto.protos.TraceConfigOuterClass.TraceConfig getTraceConfig();
    /**
     * <code>optional .perfetto.protos.TraceConfig trace_config = 1;</code>
     */
    perfetto.protos.TraceConfigOuterClass.TraceConfigOrBuilder getTraceConfigOrBuilder();

    /**
     * <pre>
     * Shared Memory Buffer setup, passed as arguments to Tracing.Initialize().
     * </pre>
     *
     * <code>optional uint32 shmem_size_kb = 2;</code>
     * @return Whether the shmemSizeKb field is set.
     */
    boolean hasShmemSizeKb();
    /**
     * <pre>
     * Shared Memory Buffer setup, passed as arguments to Tracing.Initialize().
     * </pre>
     *
     * <code>optional uint32 shmem_size_kb = 2;</code>
     * @return The shmemSizeKb.
     */
    int getShmemSizeKb();

    /**
     * <code>optional uint32 shmem_page_size_kb = 3;</code>
     * @return Whether the shmemPageSizeKb field is set.
     */
    boolean hasShmemPageSizeKb();
    /**
     * <code>optional uint32 shmem_page_size_kb = 3;</code>
     * @return The shmemPageSizeKb.
     */
    int getShmemPageSizeKb();

    /**
     * <pre>
     * How many producer processes to spawn.
     * </pre>
     *
     * <code>optional uint32 num_processes = 4;</code>
     * @return Whether the numProcesses field is set.
     */
    boolean hasNumProcesses();
    /**
     * <pre>
     * How many producer processes to spawn.
     * </pre>
     *
     * <code>optional uint32 num_processes = 4;</code>
     * @return The numProcesses.
     */
    int getNumProcesses();

    /**
     * <pre>
     * How many writer threads each producer process should spawn.
     * </pre>
     *
     * <code>optional uint32 num_threads = 5;</code>
     * @return Whether the numThreads field is set.
     */
    boolean hasNumThreads();
    /**
     * <pre>
     * How many writer threads each producer process should spawn.
     * </pre>
     *
     * <code>optional uint32 num_threads = 5;</code>
     * @return The numThreads.
     */
    int getNumThreads();

    /**
     * <pre>
     * The producer will write events until one of the following is met:
     * - trace_config.duration_ms is reached.
     * - max_events is reached.
     * </pre>
     *
     * <code>optional uint32 max_events = 6;</code>
     * @return Whether the maxEvents field is set.
     */
    boolean hasMaxEvents();
    /**
     * <pre>
     * The producer will write events until one of the following is met:
     * - trace_config.duration_ms is reached.
     * - max_events is reached.
     * </pre>
     *
     * <code>optional uint32 max_events = 6;</code>
     * @return The maxEvents.
     */
    int getMaxEvents();

    /**
     * <pre>
     * If &gt; 0 will write nested messages up to N levels deep. The size of each
     * nested message depends on the payload_mean / sttdev arguments (below).
     * This is to cover the patching logic.
     * </pre>
     *
     * <code>optional uint32 nesting = 7;</code>
     * @return Whether the nesting field is set.
     */
    boolean hasNesting();
    /**
     * <pre>
     * If &gt; 0 will write nested messages up to N levels deep. The size of each
     * nested message depends on the payload_mean / sttdev arguments (below).
     * This is to cover the patching logic.
     * </pre>
     *
     * <code>optional uint32 nesting = 7;</code>
     * @return The nesting.
     */
    int getNesting();

    /**
     * <pre>
     * The timings used by default.
     * </pre>
     *
     * <code>optional .perfetto.protos.StressTestConfig.WriterTiming steady_state_timings = 8;</code>
     * @return Whether the steadyStateTimings field is set.
     */
    boolean hasSteadyStateTimings();
    /**
     * <pre>
     * The timings used by default.
     * </pre>
     *
     * <code>optional .perfetto.protos.StressTestConfig.WriterTiming steady_state_timings = 8;</code>
     * @return The steadyStateTimings.
     */
    perfetto.protos.StressTestConfigOuterClass.StressTestConfig.WriterTiming getSteadyStateTimings();
    /**
     * <pre>
     * The timings used by default.
     * </pre>
     *
     * <code>optional .perfetto.protos.StressTestConfig.WriterTiming steady_state_timings = 8;</code>
     */
    perfetto.protos.StressTestConfigOuterClass.StressTestConfig.WriterTimingOrBuilder getSteadyStateTimingsOrBuilder();

    /**
     * <pre>
     * Optionally it is possible to cause a writer to enter "burst mode",
     * simulating peaks of high-intensity writing. The way it works is the
     * following: by default the writer writes events using the
     * |steady_state_timings|. Then every |burst_period_ms| it will switch to the
     * |burst_timings| for |burst_duration_ms|, and go back to the steady state
     * after that (and then repeat).
     * </pre>
     *
     * <code>optional uint32 burst_period_ms = 9;</code>
     * @return Whether the burstPeriodMs field is set.
     */
    boolean hasBurstPeriodMs();
    /**
     * <pre>
     * Optionally it is possible to cause a writer to enter "burst mode",
     * simulating peaks of high-intensity writing. The way it works is the
     * following: by default the writer writes events using the
     * |steady_state_timings|. Then every |burst_period_ms| it will switch to the
     * |burst_timings| for |burst_duration_ms|, and go back to the steady state
     * after that (and then repeat).
     * </pre>
     *
     * <code>optional uint32 burst_period_ms = 9;</code>
     * @return The burstPeriodMs.
     */
    int getBurstPeriodMs();

    /**
     * <code>optional uint32 burst_duration_ms = 10;</code>
     * @return Whether the burstDurationMs field is set.
     */
    boolean hasBurstDurationMs();
    /**
     * <code>optional uint32 burst_duration_ms = 10;</code>
     * @return The burstDurationMs.
     */
    int getBurstDurationMs();

    /**
     * <code>optional .perfetto.protos.StressTestConfig.WriterTiming burst_timings = 11;</code>
     * @return Whether the burstTimings field is set.
     */
    boolean hasBurstTimings();
    /**
     * <code>optional .perfetto.protos.StressTestConfig.WriterTiming burst_timings = 11;</code>
     * @return The burstTimings.
     */
    perfetto.protos.StressTestConfigOuterClass.StressTestConfig.WriterTiming getBurstTimings();
    /**
     * <code>optional .perfetto.protos.StressTestConfig.WriterTiming burst_timings = 11;</code>
     */
    perfetto.protos.StressTestConfigOuterClass.StressTestConfig.WriterTimingOrBuilder getBurstTimingsOrBuilder();
  }
  /**
   * <pre>
   * This is the schema for the config files in /test/stress_test/configs/&#42;.cfg.
   * </pre>
   *
   * Protobuf type {@code perfetto.protos.StressTestConfig}
   */
  public static final class StressTestConfig extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:perfetto.protos.StressTestConfig)
      StressTestConfigOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use StressTestConfig.newBuilder() to construct.
    private StressTestConfig(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private StressTestConfig() {
    }

    @java.lang.Override
    @SuppressWarnings({"unused"})
    protected java.lang.Object newInstance(
        UnusedPrivateParameter unused) {
      return new StressTestConfig();
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return perfetto.protos.StressTestConfigOuterClass.internal_static_perfetto_protos_StressTestConfig_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return perfetto.protos.StressTestConfigOuterClass.internal_static_perfetto_protos_StressTestConfig_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              perfetto.protos.StressTestConfigOuterClass.StressTestConfig.class, perfetto.protos.StressTestConfigOuterClass.StressTestConfig.Builder.class);
    }

    public interface WriterTimingOrBuilder extends
        // @@protoc_insertion_point(interface_extends:perfetto.protos.StressTestConfig.WriterTiming)
        com.google.protobuf.MessageOrBuilder {

      /**
       * <pre>
       * The size of the payload written on each iteration.
       * </pre>
       *
       * <code>optional double payload_mean = 1;</code>
       * @return Whether the payloadMean field is set.
       */
      boolean hasPayloadMean();
      /**
       * <pre>
       * The size of the payload written on each iteration.
       * </pre>
       *
       * <code>optional double payload_mean = 1;</code>
       * @return The payloadMean.
       */
      double getPayloadMean();

      /**
       * <code>optional double payload_stddev = 2;</code>
       * @return Whether the payloadStddev field is set.
       */
      boolean hasPayloadStddev();
      /**
       * <code>optional double payload_stddev = 2;</code>
       * @return The payloadStddev.
       */
      double getPayloadStddev();

      /**
       * <pre>
       * The nominal event writing rate, expressed in events/sec.
       * E.g. if payload_mean = 500 (bytes) and rate_mean = 1000 (Hz), each thread
       * will write 500 KB / sec approximately (% stalling).
       * </pre>
       *
       * <code>optional double rate_mean = 3;</code>
       * @return Whether the rateMean field is set.
       */
      boolean hasRateMean();
      /**
       * <pre>
       * The nominal event writing rate, expressed in events/sec.
       * E.g. if payload_mean = 500 (bytes) and rate_mean = 1000 (Hz), each thread
       * will write 500 KB / sec approximately (% stalling).
       * </pre>
       *
       * <code>optional double rate_mean = 3;</code>
       * @return The rateMean.
       */
      double getRateMean();

      /**
       * <code>optional double rate_stddev = 4;</code>
       * @return Whether the rateStddev field is set.
       */
      boolean hasRateStddev();
      /**
       * <code>optional double rate_stddev = 4;</code>
       * @return The rateStddev.
       */
      double getRateStddev();

      /**
       * <pre>
       * If non-zero each worker will slow down the writing of the payload:
       * it writes half payload, sleep for payload_write_time_ms, then write the
       * other half.
       * </pre>
       *
       * <code>optional uint32 payload_write_time_ms = 5;</code>
       * @return Whether the payloadWriteTimeMs field is set.
       */
      boolean hasPayloadWriteTimeMs();
      /**
       * <pre>
       * If non-zero each worker will slow down the writing of the payload:
       * it writes half payload, sleep for payload_write_time_ms, then write the
       * other half.
       * </pre>
       *
       * <code>optional uint32 payload_write_time_ms = 5;</code>
       * @return The payloadWriteTimeMs.
       */
      int getPayloadWriteTimeMs();
    }
    /**
     * <pre>
     * This submessage defines the timings of each writer worker thread.
     * </pre>
     *
     * Protobuf type {@code perfetto.protos.StressTestConfig.WriterTiming}
     */
    public static final class WriterTiming extends
        com.google.protobuf.GeneratedMessageV3 implements
        // @@protoc_insertion_point(message_implements:perfetto.protos.StressTestConfig.WriterTiming)
        WriterTimingOrBuilder {
    private static final long serialVersionUID = 0L;
      // Use WriterTiming.newBuilder() to construct.
      private WriterTiming(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
        super(builder);
      }
      private WriterTiming() {
      }

      @java.lang.Override
      @SuppressWarnings({"unused"})
      protected java.lang.Object newInstance(
          UnusedPrivateParameter unused) {
        return new WriterTiming();
      }

      @java.lang.Override
      public final com.google.protobuf.UnknownFieldSet
      getUnknownFields() {
        return this.unknownFields;
      }
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return perfetto.protos.StressTestConfigOuterClass.internal_static_perfetto_protos_StressTestConfig_WriterTiming_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return perfetto.protos.StressTestConfigOuterClass.internal_static_perfetto_protos_StressTestConfig_WriterTiming_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                perfetto.protos.StressTestConfigOuterClass.StressTestConfig.WriterTiming.class, perfetto.protos.StressTestConfigOuterClass.StressTestConfig.WriterTiming.Builder.class);
      }

      private int bitField0_;
      public static final int PAYLOAD_MEAN_FIELD_NUMBER = 1;
      private double payloadMean_ = 0D;
      /**
       * <pre>
       * The size of the payload written on each iteration.
       * </pre>
       *
       * <code>optional double payload_mean = 1;</code>
       * @return Whether the payloadMean field is set.
       */
      @java.lang.Override
      public boolean hasPayloadMean() {
        return ((bitField0_ & 0x00000001) != 0);
      }
      /**
       * <pre>
       * The size of the payload written on each iteration.
       * </pre>
       *
       * <code>optional double payload_mean = 1;</code>
       * @return The payloadMean.
       */
      @java.lang.Override
      public double getPayloadMean() {
        return payloadMean_;
      }

      public static final int PAYLOAD_STDDEV_FIELD_NUMBER = 2;
      private double payloadStddev_ = 0D;
      /**
       * <code>optional double payload_stddev = 2;</code>
       * @return Whether the payloadStddev field is set.
       */
      @java.lang.Override
      public boolean hasPayloadStddev() {
        return ((bitField0_ & 0x00000002) != 0);
      }
      /**
       * <code>optional double payload_stddev = 2;</code>
       * @return The payloadStddev.
       */
      @java.lang.Override
      public double getPayloadStddev() {
        return payloadStddev_;
      }

      public static final int RATE_MEAN_FIELD_NUMBER = 3;
      private double rateMean_ = 0D;
      /**
       * <pre>
       * The nominal event writing rate, expressed in events/sec.
       * E.g. if payload_mean = 500 (bytes) and rate_mean = 1000 (Hz), each thread
       * will write 500 KB / sec approximately (% stalling).
       * </pre>
       *
       * <code>optional double rate_mean = 3;</code>
       * @return Whether the rateMean field is set.
       */
      @java.lang.Override
      public boolean hasRateMean() {
        return ((bitField0_ & 0x00000004) != 0);
      }
      /**
       * <pre>
       * The nominal event writing rate, expressed in events/sec.
       * E.g. if payload_mean = 500 (bytes) and rate_mean = 1000 (Hz), each thread
       * will write 500 KB / sec approximately (% stalling).
       * </pre>
       *
       * <code>optional double rate_mean = 3;</code>
       * @return The rateMean.
       */
      @java.lang.Override
      public double getRateMean() {
        return rateMean_;
      }

      public static final int RATE_STDDEV_FIELD_NUMBER = 4;
      private double rateStddev_ = 0D;
      /**
       * <code>optional double rate_stddev = 4;</code>
       * @return Whether the rateStddev field is set.
       */
      @java.lang.Override
      public boolean hasRateStddev() {
        return ((bitField0_ & 0x00000008) != 0);
      }
      /**
       * <code>optional double rate_stddev = 4;</code>
       * @return The rateStddev.
       */
      @java.lang.Override
      public double getRateStddev() {
        return rateStddev_;
      }

      public static final int PAYLOAD_WRITE_TIME_MS_FIELD_NUMBER = 5;
      private int payloadWriteTimeMs_ = 0;
      /**
       * <pre>
       * If non-zero each worker will slow down the writing of the payload:
       * it writes half payload, sleep for payload_write_time_ms, then write the
       * other half.
       * </pre>
       *
       * <code>optional uint32 payload_write_time_ms = 5;</code>
       * @return Whether the payloadWriteTimeMs field is set.
       */
      @java.lang.Override
      public boolean hasPayloadWriteTimeMs() {
        return ((bitField0_ & 0x00000010) != 0);
      }
      /**
       * <pre>
       * If non-zero each worker will slow down the writing of the payload:
       * it writes half payload, sleep for payload_write_time_ms, then write the
       * other half.
       * </pre>
       *
       * <code>optional uint32 payload_write_time_ms = 5;</code>
       * @return The payloadWriteTimeMs.
       */
      @java.lang.Override
      public int getPayloadWriteTimeMs() {
        return payloadWriteTimeMs_;
      }

      private byte memoizedIsInitialized = -1;
      @java.lang.Override
      public final boolean isInitialized() {
        byte isInitialized = memoizedIsInitialized;
        if (isInitialized == 1) return true;
        if (isInitialized == 0) return false;

        memoizedIsInitialized = 1;
        return true;
      }

      @java.lang.Override
      public void writeTo(com.google.protobuf.CodedOutputStream output)
                          throws java.io.IOException {
        if (((bitField0_ & 0x00000001) != 0)) {
          output.writeDouble(1, payloadMean_);
        }
        if (((bitField0_ & 0x00000002) != 0)) {
          output.writeDouble(2, payloadStddev_);
        }
        if (((bitField0_ & 0x00000004) != 0)) {
          output.writeDouble(3, rateMean_);
        }
        if (((bitField0_ & 0x00000008) != 0)) {
          output.writeDouble(4, rateStddev_);
        }
        if (((bitField0_ & 0x00000010) != 0)) {
          output.writeUInt32(5, payloadWriteTimeMs_);
        }
        getUnknownFields().writeTo(output);
      }

      @java.lang.Override
      public int getSerializedSize() {
        int size = memoizedSize;
        if (size != -1) return size;

        size = 0;
        if (((bitField0_ & 0x00000001) != 0)) {
          size += com.google.protobuf.CodedOutputStream
            .computeDoubleSize(1, payloadMean_);
        }
        if (((bitField0_ & 0x00000002) != 0)) {
          size += com.google.protobuf.CodedOutputStream
            .computeDoubleSize(2, payloadStddev_);
        }
        if (((bitField0_ & 0x00000004) != 0)) {
          size += com.google.protobuf.CodedOutputStream
            .computeDoubleSize(3, rateMean_);
        }
        if (((bitField0_ & 0x00000008) != 0)) {
          size += com.google.protobuf.CodedOutputStream
            .computeDoubleSize(4, rateStddev_);
        }
        if (((bitField0_ & 0x00000010) != 0)) {
          size += com.google.protobuf.CodedOutputStream
            .computeUInt32Size(5, payloadWriteTimeMs_);
        }
        size += getUnknownFields().getSerializedSize();
        memoizedSize = size;
        return size;
      }

      @java.lang.Override
      public boolean equals(final java.lang.Object obj) {
        if (obj == this) {
         return true;
        }
        if (!(obj instanceof perfetto.protos.StressTestConfigOuterClass.StressTestConfig.WriterTiming)) {
          return super.equals(obj);
        }
        perfetto.protos.StressTestConfigOuterClass.StressTestConfig.WriterTiming other = (perfetto.protos.StressTestConfigOuterClass.StressTestConfig.WriterTiming) obj;

        if (hasPayloadMean() != other.hasPayloadMean()) return false;
        if (hasPayloadMean()) {
          if (java.lang.Double.doubleToLongBits(getPayloadMean())
              != java.lang.Double.doubleToLongBits(
                  other.getPayloadMean())) return false;
        }
        if (hasPayloadStddev() != other.hasPayloadStddev()) return false;
        if (hasPayloadStddev()) {
          if (java.lang.Double.doubleToLongBits(getPayloadStddev())
              != java.lang.Double.doubleToLongBits(
                  other.getPayloadStddev())) return false;
        }
        if (hasRateMean() != other.hasRateMean()) return false;
        if (hasRateMean()) {
          if (java.lang.Double.doubleToLongBits(getRateMean())
              != java.lang.Double.doubleToLongBits(
                  other.getRateMean())) return false;
        }
        if (hasRateStddev() != other.hasRateStddev()) return false;
        if (hasRateStddev()) {
          if (java.lang.Double.doubleToLongBits(getRateStddev())
              != java.lang.Double.doubleToLongBits(
                  other.getRateStddev())) return false;
        }
        if (hasPayloadWriteTimeMs() != other.hasPayloadWriteTimeMs()) return false;
        if (hasPayloadWriteTimeMs()) {
          if (getPayloadWriteTimeMs()
              != other.getPayloadWriteTimeMs()) return false;
        }
        if (!getUnknownFields().equals(other.getUnknownFields())) return false;
        return true;
      }

      @java.lang.Override
      public int hashCode() {
        if (memoizedHashCode != 0) {
          return memoizedHashCode;
        }
        int hash = 41;
        hash = (19 * hash) + getDescriptor().hashCode();
        if (hasPayloadMean()) {
          hash = (37 * hash) + PAYLOAD_MEAN_FIELD_NUMBER;
          hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
              java.lang.Double.doubleToLongBits(getPayloadMean()));
        }
        if (hasPayloadStddev()) {
          hash = (37 * hash) + PAYLOAD_STDDEV_FIELD_NUMBER;
          hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
              java.lang.Double.doubleToLongBits(getPayloadStddev()));
        }
        if (hasRateMean()) {
          hash = (37 * hash) + RATE_MEAN_FIELD_NUMBER;
          hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
              java.lang.Double.doubleToLongBits(getRateMean()));
        }
        if (hasRateStddev()) {
          hash = (37 * hash) + RATE_STDDEV_FIELD_NUMBER;
          hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
              java.lang.Double.doubleToLongBits(getRateStddev()));
        }
        if (hasPayloadWriteTimeMs()) {
          hash = (37 * hash) + PAYLOAD_WRITE_TIME_MS_FIELD_NUMBER;
          hash = (53 * hash) + getPayloadWriteTimeMs();
        }
        hash = (29 * hash) + getUnknownFields().hashCode();
        memoizedHashCode = hash;
        return hash;
      }

      public static perfetto.protos.StressTestConfigOuterClass.StressTestConfig.WriterTiming parseFrom(
          java.nio.ByteBuffer data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static perfetto.protos.StressTestConfigOuterClass.StressTestConfig.WriterTiming parseFrom(
          java.nio.ByteBuffer data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static perfetto.protos.StressTestConfigOuterClass.StressTestConfig.WriterTiming parseFrom(
          com.google.protobuf.ByteString data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static perfetto.protos.StressTestConfigOuterClass.StressTestConfig.WriterTiming parseFrom(
          com.google.protobuf.ByteString data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static perfetto.protos.StressTestConfigOuterClass.StressTestConfig.WriterTiming parseFrom(byte[] data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static perfetto.protos.StressTestConfigOuterClass.StressTestConfig.WriterTiming parseFrom(
          byte[] data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static perfetto.protos.StressTestConfigOuterClass.StressTestConfig.WriterTiming parseFrom(java.io.InputStream input)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseWithIOException(PARSER, input);
      }
      public static perfetto.protos.StressTestConfigOuterClass.StressTestConfig.WriterTiming parseFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseWithIOException(PARSER, input, extensionRegistry);
      }
      public static perfetto.protos.StressTestConfigOuterClass.StressTestConfig.WriterTiming parseDelimitedFrom(java.io.InputStream input)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseDelimitedWithIOException(PARSER, input);
      }
      public static perfetto.protos.StressTestConfigOuterClass.StressTestConfig.WriterTiming parseDelimitedFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
      }
      public static perfetto.protos.StressTestConfigOuterClass.StressTestConfig.WriterTiming parseFrom(
          com.google.protobuf.CodedInputStream input)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseWithIOException(PARSER, input);
      }
      public static perfetto.protos.StressTestConfigOuterClass.StressTestConfig.WriterTiming parseFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseWithIOException(PARSER, input, extensionRegistry);
      }

      @java.lang.Override
      public Builder newBuilderForType() { return newBuilder(); }
      public static Builder newBuilder() {
        return DEFAULT_INSTANCE.toBuilder();
      }
      public static Builder newBuilder(perfetto.protos.StressTestConfigOuterClass.StressTestConfig.WriterTiming prototype) {
        return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
      }
      @java.lang.Override
      public Builder toBuilder() {
        return this == DEFAULT_INSTANCE
            ? new Builder() : new Builder().mergeFrom(this);
      }

      @java.lang.Override
      protected Builder newBuilderForType(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        Builder builder = new Builder(parent);
        return builder;
      }
      /**
       * <pre>
       * This submessage defines the timings of each writer worker thread.
       * </pre>
       *
       * Protobuf type {@code perfetto.protos.StressTestConfig.WriterTiming}
       */
      public static final class Builder extends
          com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
          // @@protoc_insertion_point(builder_implements:perfetto.protos.StressTestConfig.WriterTiming)
          perfetto.protos.StressTestConfigOuterClass.StressTestConfig.WriterTimingOrBuilder {
        public static final com.google.protobuf.Descriptors.Descriptor
            getDescriptor() {
          return perfetto.protos.StressTestConfigOuterClass.internal_static_perfetto_protos_StressTestConfig_WriterTiming_descriptor;
        }

        @java.lang.Override
        protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
            internalGetFieldAccessorTable() {
          return perfetto.protos.StressTestConfigOuterClass.internal_static_perfetto_protos_StressTestConfig_WriterTiming_fieldAccessorTable
              .ensureFieldAccessorsInitialized(
                  perfetto.protos.StressTestConfigOuterClass.StressTestConfig.WriterTiming.class, perfetto.protos.StressTestConfigOuterClass.StressTestConfig.WriterTiming.Builder.class);
        }

        // Construct using perfetto.protos.StressTestConfigOuterClass.StressTestConfig.WriterTiming.newBuilder()
        private Builder() {

        }

        private Builder(
            com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
          super(parent);

        }
        @java.lang.Override
        public Builder clear() {
          super.clear();
          bitField0_ = 0;
          payloadMean_ = 0D;
          payloadStddev_ = 0D;
          rateMean_ = 0D;
          rateStddev_ = 0D;
          payloadWriteTimeMs_ = 0;
          return this;
        }

        @java.lang.Override
        public com.google.protobuf.Descriptors.Descriptor
            getDescriptorForType() {
          return perfetto.protos.StressTestConfigOuterClass.internal_static_perfetto_protos_StressTestConfig_WriterTiming_descriptor;
        }

        @java.lang.Override
        public perfetto.protos.StressTestConfigOuterClass.StressTestConfig.WriterTiming getDefaultInstanceForType() {
          return perfetto.protos.StressTestConfigOuterClass.StressTestConfig.WriterTiming.getDefaultInstance();
        }

        @java.lang.Override
        public perfetto.protos.StressTestConfigOuterClass.StressTestConfig.WriterTiming build() {
          perfetto.protos.StressTestConfigOuterClass.StressTestConfig.WriterTiming result = buildPartial();
          if (!result.isInitialized()) {
            throw newUninitializedMessageException(result);
          }
          return result;
        }

        @java.lang.Override
        public perfetto.protos.StressTestConfigOuterClass.StressTestConfig.WriterTiming buildPartial() {
          perfetto.protos.StressTestConfigOuterClass.StressTestConfig.WriterTiming result = new perfetto.protos.StressTestConfigOuterClass.StressTestConfig.WriterTiming(this);
          if (bitField0_ != 0) { buildPartial0(result); }
          onBuilt();
          return result;
        }

        private void buildPartial0(perfetto.protos.StressTestConfigOuterClass.StressTestConfig.WriterTiming result) {
          int from_bitField0_ = bitField0_;
          int to_bitField0_ = 0;
          if (((from_bitField0_ & 0x00000001) != 0)) {
            result.payloadMean_ = payloadMean_;
            to_bitField0_ |= 0x00000001;
          }
          if (((from_bitField0_ & 0x00000002) != 0)) {
            result.payloadStddev_ = payloadStddev_;
            to_bitField0_ |= 0x00000002;
          }
          if (((from_bitField0_ & 0x00000004) != 0)) {
            result.rateMean_ = rateMean_;
            to_bitField0_ |= 0x00000004;
          }
          if (((from_bitField0_ & 0x00000008) != 0)) {
            result.rateStddev_ = rateStddev_;
            to_bitField0_ |= 0x00000008;
          }
          if (((from_bitField0_ & 0x00000010) != 0)) {
            result.payloadWriteTimeMs_ = payloadWriteTimeMs_;
            to_bitField0_ |= 0x00000010;
          }
          result.bitField0_ |= to_bitField0_;
        }

        @java.lang.Override
        public Builder clone() {
          return super.clone();
        }
        @java.lang.Override
        public Builder setField(
            com.google.protobuf.Descriptors.FieldDescriptor field,
            java.lang.Object value) {
          return super.setField(field, value);
        }
        @java.lang.Override
        public Builder clearField(
            com.google.protobuf.Descriptors.FieldDescriptor field) {
          return super.clearField(field);
        }
        @java.lang.Override
        public Builder clearOneof(
            com.google.protobuf.Descriptors.OneofDescriptor oneof) {
          return super.clearOneof(oneof);
        }
        @java.lang.Override
        public Builder setRepeatedField(
            com.google.protobuf.Descriptors.FieldDescriptor field,
            int index, java.lang.Object value) {
          return super.setRepeatedField(field, index, value);
        }
        @java.lang.Override
        public Builder addRepeatedField(
            com.google.protobuf.Descriptors.FieldDescriptor field,
            java.lang.Object value) {
          return super.addRepeatedField(field, value);
        }
        @java.lang.Override
        public Builder mergeFrom(com.google.protobuf.Message other) {
          if (other instanceof perfetto.protos.StressTestConfigOuterClass.StressTestConfig.WriterTiming) {
            return mergeFrom((perfetto.protos.StressTestConfigOuterClass.StressTestConfig.WriterTiming)other);
          } else {
            super.mergeFrom(other);
            return this;
          }
        }

        public Builder mergeFrom(perfetto.protos.StressTestConfigOuterClass.StressTestConfig.WriterTiming other) {
          if (other == perfetto.protos.StressTestConfigOuterClass.StressTestConfig.WriterTiming.getDefaultInstance()) return this;
          if (other.hasPayloadMean()) {
            setPayloadMean(other.getPayloadMean());
          }
          if (other.hasPayloadStddev()) {
            setPayloadStddev(other.getPayloadStddev());
          }
          if (other.hasRateMean()) {
            setRateMean(other.getRateMean());
          }
          if (other.hasRateStddev()) {
            setRateStddev(other.getRateStddev());
          }
          if (other.hasPayloadWriteTimeMs()) {
            setPayloadWriteTimeMs(other.getPayloadWriteTimeMs());
          }
          this.mergeUnknownFields(other.getUnknownFields());
          onChanged();
          return this;
        }

        @java.lang.Override
        public final boolean isInitialized() {
          return true;
        }

        @java.lang.Override
        public Builder mergeFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws java.io.IOException {
          if (extensionRegistry == null) {
            throw new java.lang.NullPointerException();
          }
          try {
            boolean done = false;
            while (!done) {
              int tag = input.readTag();
              switch (tag) {
                case 0:
                  done = true;
                  break;
                case 9: {
                  payloadMean_ = input.readDouble();
                  bitField0_ |= 0x00000001;
                  break;
                } // case 9
                case 17: {
                  payloadStddev_ = input.readDouble();
                  bitField0_ |= 0x00000002;
                  break;
                } // case 17
                case 25: {
                  rateMean_ = input.readDouble();
                  bitField0_ |= 0x00000004;
                  break;
                } // case 25
                case 33: {
                  rateStddev_ = input.readDouble();
                  bitField0_ |= 0x00000008;
                  break;
                } // case 33
                case 40: {
                  payloadWriteTimeMs_ = input.readUInt32();
                  bitField0_ |= 0x00000010;
                  break;
                } // case 40
                default: {
                  if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                    done = true; // was an endgroup tag
                  }
                  break;
                } // default:
              } // switch (tag)
            } // while (!done)
          } catch (com.google.protobuf.InvalidProtocolBufferException e) {
            throw e.unwrapIOException();
          } finally {
            onChanged();
          } // finally
          return this;
        }
        private int bitField0_;

        private double payloadMean_ ;
        /**
         * <pre>
         * The size of the payload written on each iteration.
         * </pre>
         *
         * <code>optional double payload_mean = 1;</code>
         * @return Whether the payloadMean field is set.
         */
        @java.lang.Override
        public boolean hasPayloadMean() {
          return ((bitField0_ & 0x00000001) != 0);
        }
        /**
         * <pre>
         * The size of the payload written on each iteration.
         * </pre>
         *
         * <code>optional double payload_mean = 1;</code>
         * @return The payloadMean.
         */
        @java.lang.Override
        public double getPayloadMean() {
          return payloadMean_;
        }
        /**
         * <pre>
         * The size of the payload written on each iteration.
         * </pre>
         *
         * <code>optional double payload_mean = 1;</code>
         * @param value The payloadMean to set.
         * @return This builder for chaining.
         */
        public Builder setPayloadMean(double value) {
          
          payloadMean_ = value;
          bitField0_ |= 0x00000001;
          onChanged();
          return this;
        }
        /**
         * <pre>
         * The size of the payload written on each iteration.
         * </pre>
         *
         * <code>optional double payload_mean = 1;</code>
         * @return This builder for chaining.
         */
        public Builder clearPayloadMean() {
          bitField0_ = (bitField0_ & ~0x00000001);
          payloadMean_ = 0D;
          onChanged();
          return this;
        }

        private double payloadStddev_ ;
        /**
         * <code>optional double payload_stddev = 2;</code>
         * @return Whether the payloadStddev field is set.
         */
        @java.lang.Override
        public boolean hasPayloadStddev() {
          return ((bitField0_ & 0x00000002) != 0);
        }
        /**
         * <code>optional double payload_stddev = 2;</code>
         * @return The payloadStddev.
         */
        @java.lang.Override
        public double getPayloadStddev() {
          return payloadStddev_;
        }
        /**
         * <code>optional double payload_stddev = 2;</code>
         * @param value The payloadStddev to set.
         * @return This builder for chaining.
         */
        public Builder setPayloadStddev(double value) {
          
          payloadStddev_ = value;
          bitField0_ |= 0x00000002;
          onChanged();
          return this;
        }
        /**
         * <code>optional double payload_stddev = 2;</code>
         * @return This builder for chaining.
         */
        public Builder clearPayloadStddev() {
          bitField0_ = (bitField0_ & ~0x00000002);
          payloadStddev_ = 0D;
          onChanged();
          return this;
        }

        private double rateMean_ ;
        /**
         * <pre>
         * The nominal event writing rate, expressed in events/sec.
         * E.g. if payload_mean = 500 (bytes) and rate_mean = 1000 (Hz), each thread
         * will write 500 KB / sec approximately (% stalling).
         * </pre>
         *
         * <code>optional double rate_mean = 3;</code>
         * @return Whether the rateMean field is set.
         */
        @java.lang.Override
        public boolean hasRateMean() {
          return ((bitField0_ & 0x00000004) != 0);
        }
        /**
         * <pre>
         * The nominal event writing rate, expressed in events/sec.
         * E.g. if payload_mean = 500 (bytes) and rate_mean = 1000 (Hz), each thread
         * will write 500 KB / sec approximately (% stalling).
         * </pre>
         *
         * <code>optional double rate_mean = 3;</code>
         * @return The rateMean.
         */
        @java.lang.Override
        public double getRateMean() {
          return rateMean_;
        }
        /**
         * <pre>
         * The nominal event writing rate, expressed in events/sec.
         * E.g. if payload_mean = 500 (bytes) and rate_mean = 1000 (Hz), each thread
         * will write 500 KB / sec approximately (% stalling).
         * </pre>
         *
         * <code>optional double rate_mean = 3;</code>
         * @param value The rateMean to set.
         * @return This builder for chaining.
         */
        public Builder setRateMean(double value) {
          
          rateMean_ = value;
          bitField0_ |= 0x00000004;
          onChanged();
          return this;
        }
        /**
         * <pre>
         * The nominal event writing rate, expressed in events/sec.
         * E.g. if payload_mean = 500 (bytes) and rate_mean = 1000 (Hz), each thread
         * will write 500 KB / sec approximately (% stalling).
         * </pre>
         *
         * <code>optional double rate_mean = 3;</code>
         * @return This builder for chaining.
         */
        public Builder clearRateMean() {
          bitField0_ = (bitField0_ & ~0x00000004);
          rateMean_ = 0D;
          onChanged();
          return this;
        }

        private double rateStddev_ ;
        /**
         * <code>optional double rate_stddev = 4;</code>
         * @return Whether the rateStddev field is set.
         */
        @java.lang.Override
        public boolean hasRateStddev() {
          return ((bitField0_ & 0x00000008) != 0);
        }
        /**
         * <code>optional double rate_stddev = 4;</code>
         * @return The rateStddev.
         */
        @java.lang.Override
        public double getRateStddev() {
          return rateStddev_;
        }
        /**
         * <code>optional double rate_stddev = 4;</code>
         * @param value The rateStddev to set.
         * @return This builder for chaining.
         */
        public Builder setRateStddev(double value) {
          
          rateStddev_ = value;
          bitField0_ |= 0x00000008;
          onChanged();
          return this;
        }
        /**
         * <code>optional double rate_stddev = 4;</code>
         * @return This builder for chaining.
         */
        public Builder clearRateStddev() {
          bitField0_ = (bitField0_ & ~0x00000008);
          rateStddev_ = 0D;
          onChanged();
          return this;
        }

        private int payloadWriteTimeMs_ ;
        /**
         * <pre>
         * If non-zero each worker will slow down the writing of the payload:
         * it writes half payload, sleep for payload_write_time_ms, then write the
         * other half.
         * </pre>
         *
         * <code>optional uint32 payload_write_time_ms = 5;</code>
         * @return Whether the payloadWriteTimeMs field is set.
         */
        @java.lang.Override
        public boolean hasPayloadWriteTimeMs() {
          return ((bitField0_ & 0x00000010) != 0);
        }
        /**
         * <pre>
         * If non-zero each worker will slow down the writing of the payload:
         * it writes half payload, sleep for payload_write_time_ms, then write the
         * other half.
         * </pre>
         *
         * <code>optional uint32 payload_write_time_ms = 5;</code>
         * @return The payloadWriteTimeMs.
         */
        @java.lang.Override
        public int getPayloadWriteTimeMs() {
          return payloadWriteTimeMs_;
        }
        /**
         * <pre>
         * If non-zero each worker will slow down the writing of the payload:
         * it writes half payload, sleep for payload_write_time_ms, then write the
         * other half.
         * </pre>
         *
         * <code>optional uint32 payload_write_time_ms = 5;</code>
         * @param value The payloadWriteTimeMs to set.
         * @return This builder for chaining.
         */
        public Builder setPayloadWriteTimeMs(int value) {
          
          payloadWriteTimeMs_ = value;
          bitField0_ |= 0x00000010;
          onChanged();
          return this;
        }
        /**
         * <pre>
         * If non-zero each worker will slow down the writing of the payload:
         * it writes half payload, sleep for payload_write_time_ms, then write the
         * other half.
         * </pre>
         *
         * <code>optional uint32 payload_write_time_ms = 5;</code>
         * @return This builder for chaining.
         */
        public Builder clearPayloadWriteTimeMs() {
          bitField0_ = (bitField0_ & ~0x00000010);
          payloadWriteTimeMs_ = 0;
          onChanged();
          return this;
        }
        @java.lang.Override
        public final Builder setUnknownFields(
            final com.google.protobuf.UnknownFieldSet unknownFields) {
          return super.setUnknownFields(unknownFields);
        }

        @java.lang.Override
        public final Builder mergeUnknownFields(
            final com.google.protobuf.UnknownFieldSet unknownFields) {
          return super.mergeUnknownFields(unknownFields);
        }


        // @@protoc_insertion_point(builder_scope:perfetto.protos.StressTestConfig.WriterTiming)
      }

      // @@protoc_insertion_point(class_scope:perfetto.protos.StressTestConfig.WriterTiming)
      private static final perfetto.protos.StressTestConfigOuterClass.StressTestConfig.WriterTiming DEFAULT_INSTANCE;
      static {
        DEFAULT_INSTANCE = new perfetto.protos.StressTestConfigOuterClass.StressTestConfig.WriterTiming();
      }

      public static perfetto.protos.StressTestConfigOuterClass.StressTestConfig.WriterTiming getDefaultInstance() {
        return DEFAULT_INSTANCE;
      }

      @java.lang.Deprecated public static final com.google.protobuf.Parser<WriterTiming>
          PARSER = new com.google.protobuf.AbstractParser<WriterTiming>() {
        @java.lang.Override
        public WriterTiming parsePartialFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws com.google.protobuf.InvalidProtocolBufferException {
          Builder builder = newBuilder();
          try {
            builder.mergeFrom(input, extensionRegistry);
          } catch (com.google.protobuf.InvalidProtocolBufferException e) {
            throw e.setUnfinishedMessage(builder.buildPartial());
          } catch (com.google.protobuf.UninitializedMessageException e) {
            throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
          } catch (java.io.IOException e) {
            throw new com.google.protobuf.InvalidProtocolBufferException(e)
                .setUnfinishedMessage(builder.buildPartial());
          }
          return builder.buildPartial();
        }
      };

      public static com.google.protobuf.Parser<WriterTiming> parser() {
        return PARSER;
      }

      @java.lang.Override
      public com.google.protobuf.Parser<WriterTiming> getParserForType() {
        return PARSER;
      }

      @java.lang.Override
      public perfetto.protos.StressTestConfigOuterClass.StressTestConfig.WriterTiming getDefaultInstanceForType() {
        return DEFAULT_INSTANCE;
      }

    }

    private int bitField0_;
    public static final int TRACE_CONFIG_FIELD_NUMBER = 1;
    private perfetto.protos.TraceConfigOuterClass.TraceConfig traceConfig_;
    /**
     * <code>optional .perfetto.protos.TraceConfig trace_config = 1;</code>
     * @return Whether the traceConfig field is set.
     */
    @java.lang.Override
    public boolean hasTraceConfig() {
      return ((bitField0_ & 0x00000001) != 0);
    }
    /**
     * <code>optional .perfetto.protos.TraceConfig trace_config = 1;</code>
     * @return The traceConfig.
     */
    @java.lang.Override
    public perfetto.protos.TraceConfigOuterClass.TraceConfig getTraceConfig() {
      return traceConfig_ == null ? perfetto.protos.TraceConfigOuterClass.TraceConfig.getDefaultInstance() : traceConfig_;
    }
    /**
     * <code>optional .perfetto.protos.TraceConfig trace_config = 1;</code>
     */
    @java.lang.Override
    public perfetto.protos.TraceConfigOuterClass.TraceConfigOrBuilder getTraceConfigOrBuilder() {
      return traceConfig_ == null ? perfetto.protos.TraceConfigOuterClass.TraceConfig.getDefaultInstance() : traceConfig_;
    }

    public static final int SHMEM_SIZE_KB_FIELD_NUMBER = 2;
    private int shmemSizeKb_ = 0;
    /**
     * <pre>
     * Shared Memory Buffer setup, passed as arguments to Tracing.Initialize().
     * </pre>
     *
     * <code>optional uint32 shmem_size_kb = 2;</code>
     * @return Whether the shmemSizeKb field is set.
     */
    @java.lang.Override
    public boolean hasShmemSizeKb() {
      return ((bitField0_ & 0x00000002) != 0);
    }
    /**
     * <pre>
     * Shared Memory Buffer setup, passed as arguments to Tracing.Initialize().
     * </pre>
     *
     * <code>optional uint32 shmem_size_kb = 2;</code>
     * @return The shmemSizeKb.
     */
    @java.lang.Override
    public int getShmemSizeKb() {
      return shmemSizeKb_;
    }

    public static final int SHMEM_PAGE_SIZE_KB_FIELD_NUMBER = 3;
    private int shmemPageSizeKb_ = 0;
    /**
     * <code>optional uint32 shmem_page_size_kb = 3;</code>
     * @return Whether the shmemPageSizeKb field is set.
     */
    @java.lang.Override
    public boolean hasShmemPageSizeKb() {
      return ((bitField0_ & 0x00000004) != 0);
    }
    /**
     * <code>optional uint32 shmem_page_size_kb = 3;</code>
     * @return The shmemPageSizeKb.
     */
    @java.lang.Override
    public int getShmemPageSizeKb() {
      return shmemPageSizeKb_;
    }

    public static final int NUM_PROCESSES_FIELD_NUMBER = 4;
    private int numProcesses_ = 0;
    /**
     * <pre>
     * How many producer processes to spawn.
     * </pre>
     *
     * <code>optional uint32 num_processes = 4;</code>
     * @return Whether the numProcesses field is set.
     */
    @java.lang.Override
    public boolean hasNumProcesses() {
      return ((bitField0_ & 0x00000008) != 0);
    }
    /**
     * <pre>
     * How many producer processes to spawn.
     * </pre>
     *
     * <code>optional uint32 num_processes = 4;</code>
     * @return The numProcesses.
     */
    @java.lang.Override
    public int getNumProcesses() {
      return numProcesses_;
    }

    public static final int NUM_THREADS_FIELD_NUMBER = 5;
    private int numThreads_ = 0;
    /**
     * <pre>
     * How many writer threads each producer process should spawn.
     * </pre>
     *
     * <code>optional uint32 num_threads = 5;</code>
     * @return Whether the numThreads field is set.
     */
    @java.lang.Override
    public boolean hasNumThreads() {
      return ((bitField0_ & 0x00000010) != 0);
    }
    /**
     * <pre>
     * How many writer threads each producer process should spawn.
     * </pre>
     *
     * <code>optional uint32 num_threads = 5;</code>
     * @return The numThreads.
     */
    @java.lang.Override
    public int getNumThreads() {
      return numThreads_;
    }

    public static final int MAX_EVENTS_FIELD_NUMBER = 6;
    private int maxEvents_ = 0;
    /**
     * <pre>
     * The producer will write events until one of the following is met:
     * - trace_config.duration_ms is reached.
     * - max_events is reached.
     * </pre>
     *
     * <code>optional uint32 max_events = 6;</code>
     * @return Whether the maxEvents field is set.
     */
    @java.lang.Override
    public boolean hasMaxEvents() {
      return ((bitField0_ & 0x00000020) != 0);
    }
    /**
     * <pre>
     * The producer will write events until one of the following is met:
     * - trace_config.duration_ms is reached.
     * - max_events is reached.
     * </pre>
     *
     * <code>optional uint32 max_events = 6;</code>
     * @return The maxEvents.
     */
    @java.lang.Override
    public int getMaxEvents() {
      return maxEvents_;
    }

    public static final int NESTING_FIELD_NUMBER = 7;
    private int nesting_ = 0;
    /**
     * <pre>
     * If &gt; 0 will write nested messages up to N levels deep. The size of each
     * nested message depends on the payload_mean / sttdev arguments (below).
     * This is to cover the patching logic.
     * </pre>
     *
     * <code>optional uint32 nesting = 7;</code>
     * @return Whether the nesting field is set.
     */
    @java.lang.Override
    public boolean hasNesting() {
      return ((bitField0_ & 0x00000040) != 0);
    }
    /**
     * <pre>
     * If &gt; 0 will write nested messages up to N levels deep. The size of each
     * nested message depends on the payload_mean / sttdev arguments (below).
     * This is to cover the patching logic.
     * </pre>
     *
     * <code>optional uint32 nesting = 7;</code>
     * @return The nesting.
     */
    @java.lang.Override
    public int getNesting() {
      return nesting_;
    }

    public static final int STEADY_STATE_TIMINGS_FIELD_NUMBER = 8;
    private perfetto.protos.StressTestConfigOuterClass.StressTestConfig.WriterTiming steadyStateTimings_;
    /**
     * <pre>
     * The timings used by default.
     * </pre>
     *
     * <code>optional .perfetto.protos.StressTestConfig.WriterTiming steady_state_timings = 8;</code>
     * @return Whether the steadyStateTimings field is set.
     */
    @java.lang.Override
    public boolean hasSteadyStateTimings() {
      return ((bitField0_ & 0x00000080) != 0);
    }
    /**
     * <pre>
     * The timings used by default.
     * </pre>
     *
     * <code>optional .perfetto.protos.StressTestConfig.WriterTiming steady_state_timings = 8;</code>
     * @return The steadyStateTimings.
     */
    @java.lang.Override
    public perfetto.protos.StressTestConfigOuterClass.StressTestConfig.WriterTiming getSteadyStateTimings() {
      return steadyStateTimings_ == null ? perfetto.protos.StressTestConfigOuterClass.StressTestConfig.WriterTiming.getDefaultInstance() : steadyStateTimings_;
    }
    /**
     * <pre>
     * The timings used by default.
     * </pre>
     *
     * <code>optional .perfetto.protos.StressTestConfig.WriterTiming steady_state_timings = 8;</code>
     */
    @java.lang.Override
    public perfetto.protos.StressTestConfigOuterClass.StressTestConfig.WriterTimingOrBuilder getSteadyStateTimingsOrBuilder() {
      return steadyStateTimings_ == null ? perfetto.protos.StressTestConfigOuterClass.StressTestConfig.WriterTiming.getDefaultInstance() : steadyStateTimings_;
    }

    public static final int BURST_PERIOD_MS_FIELD_NUMBER = 9;
    private int burstPeriodMs_ = 0;
    /**
     * <pre>
     * Optionally it is possible to cause a writer to enter "burst mode",
     * simulating peaks of high-intensity writing. The way it works is the
     * following: by default the writer writes events using the
     * |steady_state_timings|. Then every |burst_period_ms| it will switch to the
     * |burst_timings| for |burst_duration_ms|, and go back to the steady state
     * after that (and then repeat).
     * </pre>
     *
     * <code>optional uint32 burst_period_ms = 9;</code>
     * @return Whether the burstPeriodMs field is set.
     */
    @java.lang.Override
    public boolean hasBurstPeriodMs() {
      return ((bitField0_ & 0x00000100) != 0);
    }
    /**
     * <pre>
     * Optionally it is possible to cause a writer to enter "burst mode",
     * simulating peaks of high-intensity writing. The way it works is the
     * following: by default the writer writes events using the
     * |steady_state_timings|. Then every |burst_period_ms| it will switch to the
     * |burst_timings| for |burst_duration_ms|, and go back to the steady state
     * after that (and then repeat).
     * </pre>
     *
     * <code>optional uint32 burst_period_ms = 9;</code>
     * @return The burstPeriodMs.
     */
    @java.lang.Override
    public int getBurstPeriodMs() {
      return burstPeriodMs_;
    }

    public static final int BURST_DURATION_MS_FIELD_NUMBER = 10;
    private int burstDurationMs_ = 0;
    /**
     * <code>optional uint32 burst_duration_ms = 10;</code>
     * @return Whether the burstDurationMs field is set.
     */
    @java.lang.Override
    public boolean hasBurstDurationMs() {
      return ((bitField0_ & 0x00000200) != 0);
    }
    /**
     * <code>optional uint32 burst_duration_ms = 10;</code>
     * @return The burstDurationMs.
     */
    @java.lang.Override
    public int getBurstDurationMs() {
      return burstDurationMs_;
    }

    public static final int BURST_TIMINGS_FIELD_NUMBER = 11;
    private perfetto.protos.StressTestConfigOuterClass.StressTestConfig.WriterTiming burstTimings_;
    /**
     * <code>optional .perfetto.protos.StressTestConfig.WriterTiming burst_timings = 11;</code>
     * @return Whether the burstTimings field is set.
     */
    @java.lang.Override
    public boolean hasBurstTimings() {
      return ((bitField0_ & 0x00000400) != 0);
    }
    /**
     * <code>optional .perfetto.protos.StressTestConfig.WriterTiming burst_timings = 11;</code>
     * @return The burstTimings.
     */
    @java.lang.Override
    public perfetto.protos.StressTestConfigOuterClass.StressTestConfig.WriterTiming getBurstTimings() {
      return burstTimings_ == null ? perfetto.protos.StressTestConfigOuterClass.StressTestConfig.WriterTiming.getDefaultInstance() : burstTimings_;
    }
    /**
     * <code>optional .perfetto.protos.StressTestConfig.WriterTiming burst_timings = 11;</code>
     */
    @java.lang.Override
    public perfetto.protos.StressTestConfigOuterClass.StressTestConfig.WriterTimingOrBuilder getBurstTimingsOrBuilder() {
      return burstTimings_ == null ? perfetto.protos.StressTestConfigOuterClass.StressTestConfig.WriterTiming.getDefaultInstance() : burstTimings_;
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (((bitField0_ & 0x00000001) != 0)) {
        output.writeMessage(1, getTraceConfig());
      }
      if (((bitField0_ & 0x00000002) != 0)) {
        output.writeUInt32(2, shmemSizeKb_);
      }
      if (((bitField0_ & 0x00000004) != 0)) {
        output.writeUInt32(3, shmemPageSizeKb_);
      }
      if (((bitField0_ & 0x00000008) != 0)) {
        output.writeUInt32(4, numProcesses_);
      }
      if (((bitField0_ & 0x00000010) != 0)) {
        output.writeUInt32(5, numThreads_);
      }
      if (((bitField0_ & 0x00000020) != 0)) {
        output.writeUInt32(6, maxEvents_);
      }
      if (((bitField0_ & 0x00000040) != 0)) {
        output.writeUInt32(7, nesting_);
      }
      if (((bitField0_ & 0x00000080) != 0)) {
        output.writeMessage(8, getSteadyStateTimings());
      }
      if (((bitField0_ & 0x00000100) != 0)) {
        output.writeUInt32(9, burstPeriodMs_);
      }
      if (((bitField0_ & 0x00000200) != 0)) {
        output.writeUInt32(10, burstDurationMs_);
      }
      if (((bitField0_ & 0x00000400) != 0)) {
        output.writeMessage(11, getBurstTimings());
      }
      getUnknownFields().writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) != 0)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(1, getTraceConfig());
      }
      if (((bitField0_ & 0x00000002) != 0)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(2, shmemSizeKb_);
      }
      if (((bitField0_ & 0x00000004) != 0)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(3, shmemPageSizeKb_);
      }
      if (((bitField0_ & 0x00000008) != 0)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(4, numProcesses_);
      }
      if (((bitField0_ & 0x00000010) != 0)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(5, numThreads_);
      }
      if (((bitField0_ & 0x00000020) != 0)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(6, maxEvents_);
      }
      if (((bitField0_ & 0x00000040) != 0)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(7, nesting_);
      }
      if (((bitField0_ & 0x00000080) != 0)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(8, getSteadyStateTimings());
      }
      if (((bitField0_ & 0x00000100) != 0)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(9, burstPeriodMs_);
      }
      if (((bitField0_ & 0x00000200) != 0)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(10, burstDurationMs_);
      }
      if (((bitField0_ & 0x00000400) != 0)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(11, getBurstTimings());
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof perfetto.protos.StressTestConfigOuterClass.StressTestConfig)) {
        return super.equals(obj);
      }
      perfetto.protos.StressTestConfigOuterClass.StressTestConfig other = (perfetto.protos.StressTestConfigOuterClass.StressTestConfig) obj;

      if (hasTraceConfig() != other.hasTraceConfig()) return false;
      if (hasTraceConfig()) {
        if (!getTraceConfig()
            .equals(other.getTraceConfig())) return false;
      }
      if (hasShmemSizeKb() != other.hasShmemSizeKb()) return false;
      if (hasShmemSizeKb()) {
        if (getShmemSizeKb()
            != other.getShmemSizeKb()) return false;
      }
      if (hasShmemPageSizeKb() != other.hasShmemPageSizeKb()) return false;
      if (hasShmemPageSizeKb()) {
        if (getShmemPageSizeKb()
            != other.getShmemPageSizeKb()) return false;
      }
      if (hasNumProcesses() != other.hasNumProcesses()) return false;
      if (hasNumProcesses()) {
        if (getNumProcesses()
            != other.getNumProcesses()) return false;
      }
      if (hasNumThreads() != other.hasNumThreads()) return false;
      if (hasNumThreads()) {
        if (getNumThreads()
            != other.getNumThreads()) return false;
      }
      if (hasMaxEvents() != other.hasMaxEvents()) return false;
      if (hasMaxEvents()) {
        if (getMaxEvents()
            != other.getMaxEvents()) return false;
      }
      if (hasNesting() != other.hasNesting()) return false;
      if (hasNesting()) {
        if (getNesting()
            != other.getNesting()) return false;
      }
      if (hasSteadyStateTimings() != other.hasSteadyStateTimings()) return false;
      if (hasSteadyStateTimings()) {
        if (!getSteadyStateTimings()
            .equals(other.getSteadyStateTimings())) return false;
      }
      if (hasBurstPeriodMs() != other.hasBurstPeriodMs()) return false;
      if (hasBurstPeriodMs()) {
        if (getBurstPeriodMs()
            != other.getBurstPeriodMs()) return false;
      }
      if (hasBurstDurationMs() != other.hasBurstDurationMs()) return false;
      if (hasBurstDurationMs()) {
        if (getBurstDurationMs()
            != other.getBurstDurationMs()) return false;
      }
      if (hasBurstTimings() != other.hasBurstTimings()) return false;
      if (hasBurstTimings()) {
        if (!getBurstTimings()
            .equals(other.getBurstTimings())) return false;
      }
      if (!getUnknownFields().equals(other.getUnknownFields())) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      if (hasTraceConfig()) {
        hash = (37 * hash) + TRACE_CONFIG_FIELD_NUMBER;
        hash = (53 * hash) + getTraceConfig().hashCode();
      }
      if (hasShmemSizeKb()) {
        hash = (37 * hash) + SHMEM_SIZE_KB_FIELD_NUMBER;
        hash = (53 * hash) + getShmemSizeKb();
      }
      if (hasShmemPageSizeKb()) {
        hash = (37 * hash) + SHMEM_PAGE_SIZE_KB_FIELD_NUMBER;
        hash = (53 * hash) + getShmemPageSizeKb();
      }
      if (hasNumProcesses()) {
        hash = (37 * hash) + NUM_PROCESSES_FIELD_NUMBER;
        hash = (53 * hash) + getNumProcesses();
      }
      if (hasNumThreads()) {
        hash = (37 * hash) + NUM_THREADS_FIELD_NUMBER;
        hash = (53 * hash) + getNumThreads();
      }
      if (hasMaxEvents()) {
        hash = (37 * hash) + MAX_EVENTS_FIELD_NUMBER;
        hash = (53 * hash) + getMaxEvents();
      }
      if (hasNesting()) {
        hash = (37 * hash) + NESTING_FIELD_NUMBER;
        hash = (53 * hash) + getNesting();
      }
      if (hasSteadyStateTimings()) {
        hash = (37 * hash) + STEADY_STATE_TIMINGS_FIELD_NUMBER;
        hash = (53 * hash) + getSteadyStateTimings().hashCode();
      }
      if (hasBurstPeriodMs()) {
        hash = (37 * hash) + BURST_PERIOD_MS_FIELD_NUMBER;
        hash = (53 * hash) + getBurstPeriodMs();
      }
      if (hasBurstDurationMs()) {
        hash = (37 * hash) + BURST_DURATION_MS_FIELD_NUMBER;
        hash = (53 * hash) + getBurstDurationMs();
      }
      if (hasBurstTimings()) {
        hash = (37 * hash) + BURST_TIMINGS_FIELD_NUMBER;
        hash = (53 * hash) + getBurstTimings().hashCode();
      }
      hash = (29 * hash) + getUnknownFields().hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static perfetto.protos.StressTestConfigOuterClass.StressTestConfig parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static perfetto.protos.StressTestConfigOuterClass.StressTestConfig parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static perfetto.protos.StressTestConfigOuterClass.StressTestConfig parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static perfetto.protos.StressTestConfigOuterClass.StressTestConfig parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static perfetto.protos.StressTestConfigOuterClass.StressTestConfig parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static perfetto.protos.StressTestConfigOuterClass.StressTestConfig parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static perfetto.protos.StressTestConfigOuterClass.StressTestConfig parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static perfetto.protos.StressTestConfigOuterClass.StressTestConfig parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static perfetto.protos.StressTestConfigOuterClass.StressTestConfig parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static perfetto.protos.StressTestConfigOuterClass.StressTestConfig parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static perfetto.protos.StressTestConfigOuterClass.StressTestConfig parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static perfetto.protos.StressTestConfigOuterClass.StressTestConfig parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(perfetto.protos.StressTestConfigOuterClass.StressTestConfig prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * <pre>
     * This is the schema for the config files in /test/stress_test/configs/&#42;.cfg.
     * </pre>
     *
     * Protobuf type {@code perfetto.protos.StressTestConfig}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:perfetto.protos.StressTestConfig)
        perfetto.protos.StressTestConfigOuterClass.StressTestConfigOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return perfetto.protos.StressTestConfigOuterClass.internal_static_perfetto_protos_StressTestConfig_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return perfetto.protos.StressTestConfigOuterClass.internal_static_perfetto_protos_StressTestConfig_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                perfetto.protos.StressTestConfigOuterClass.StressTestConfig.class, perfetto.protos.StressTestConfigOuterClass.StressTestConfig.Builder.class);
      }

      // Construct using perfetto.protos.StressTestConfigOuterClass.StressTestConfig.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
          getTraceConfigFieldBuilder();
          getSteadyStateTimingsFieldBuilder();
          getBurstTimingsFieldBuilder();
        }
      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        bitField0_ = 0;
        traceConfig_ = null;
        if (traceConfigBuilder_ != null) {
          traceConfigBuilder_.dispose();
          traceConfigBuilder_ = null;
        }
        shmemSizeKb_ = 0;
        shmemPageSizeKb_ = 0;
        numProcesses_ = 0;
        numThreads_ = 0;
        maxEvents_ = 0;
        nesting_ = 0;
        steadyStateTimings_ = null;
        if (steadyStateTimingsBuilder_ != null) {
          steadyStateTimingsBuilder_.dispose();
          steadyStateTimingsBuilder_ = null;
        }
        burstPeriodMs_ = 0;
        burstDurationMs_ = 0;
        burstTimings_ = null;
        if (burstTimingsBuilder_ != null) {
          burstTimingsBuilder_.dispose();
          burstTimingsBuilder_ = null;
        }
        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return perfetto.protos.StressTestConfigOuterClass.internal_static_perfetto_protos_StressTestConfig_descriptor;
      }

      @java.lang.Override
      public perfetto.protos.StressTestConfigOuterClass.StressTestConfig getDefaultInstanceForType() {
        return perfetto.protos.StressTestConfigOuterClass.StressTestConfig.getDefaultInstance();
      }

      @java.lang.Override
      public perfetto.protos.StressTestConfigOuterClass.StressTestConfig build() {
        perfetto.protos.StressTestConfigOuterClass.StressTestConfig result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public perfetto.protos.StressTestConfigOuterClass.StressTestConfig buildPartial() {
        perfetto.protos.StressTestConfigOuterClass.StressTestConfig result = new perfetto.protos.StressTestConfigOuterClass.StressTestConfig(this);
        if (bitField0_ != 0) { buildPartial0(result); }
        onBuilt();
        return result;
      }

      private void buildPartial0(perfetto.protos.StressTestConfigOuterClass.StressTestConfig result) {
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) != 0)) {
          result.traceConfig_ = traceConfigBuilder_ == null
              ? traceConfig_
              : traceConfigBuilder_.build();
          to_bitField0_ |= 0x00000001;
        }
        if (((from_bitField0_ & 0x00000002) != 0)) {
          result.shmemSizeKb_ = shmemSizeKb_;
          to_bitField0_ |= 0x00000002;
        }
        if (((from_bitField0_ & 0x00000004) != 0)) {
          result.shmemPageSizeKb_ = shmemPageSizeKb_;
          to_bitField0_ |= 0x00000004;
        }
        if (((from_bitField0_ & 0x00000008) != 0)) {
          result.numProcesses_ = numProcesses_;
          to_bitField0_ |= 0x00000008;
        }
        if (((from_bitField0_ & 0x00000010) != 0)) {
          result.numThreads_ = numThreads_;
          to_bitField0_ |= 0x00000010;
        }
        if (((from_bitField0_ & 0x00000020) != 0)) {
          result.maxEvents_ = maxEvents_;
          to_bitField0_ |= 0x00000020;
        }
        if (((from_bitField0_ & 0x00000040) != 0)) {
          result.nesting_ = nesting_;
          to_bitField0_ |= 0x00000040;
        }
        if (((from_bitField0_ & 0x00000080) != 0)) {
          result.steadyStateTimings_ = steadyStateTimingsBuilder_ == null
              ? steadyStateTimings_
              : steadyStateTimingsBuilder_.build();
          to_bitField0_ |= 0x00000080;
        }
        if (((from_bitField0_ & 0x00000100) != 0)) {
          result.burstPeriodMs_ = burstPeriodMs_;
          to_bitField0_ |= 0x00000100;
        }
        if (((from_bitField0_ & 0x00000200) != 0)) {
          result.burstDurationMs_ = burstDurationMs_;
          to_bitField0_ |= 0x00000200;
        }
        if (((from_bitField0_ & 0x00000400) != 0)) {
          result.burstTimings_ = burstTimingsBuilder_ == null
              ? burstTimings_
              : burstTimingsBuilder_.build();
          to_bitField0_ |= 0x00000400;
        }
        result.bitField0_ |= to_bitField0_;
      }

      @java.lang.Override
      public Builder clone() {
        return super.clone();
      }
      @java.lang.Override
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.setField(field, value);
      }
      @java.lang.Override
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return super.clearField(field);
      }
      @java.lang.Override
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return super.clearOneof(oneof);
      }
      @java.lang.Override
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, java.lang.Object value) {
        return super.setRepeatedField(field, index, value);
      }
      @java.lang.Override
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.addRepeatedField(field, value);
      }
      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof perfetto.protos.StressTestConfigOuterClass.StressTestConfig) {
          return mergeFrom((perfetto.protos.StressTestConfigOuterClass.StressTestConfig)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(perfetto.protos.StressTestConfigOuterClass.StressTestConfig other) {
        if (other == perfetto.protos.StressTestConfigOuterClass.StressTestConfig.getDefaultInstance()) return this;
        if (other.hasTraceConfig()) {
          mergeTraceConfig(other.getTraceConfig());
        }
        if (other.hasShmemSizeKb()) {
          setShmemSizeKb(other.getShmemSizeKb());
        }
        if (other.hasShmemPageSizeKb()) {
          setShmemPageSizeKb(other.getShmemPageSizeKb());
        }
        if (other.hasNumProcesses()) {
          setNumProcesses(other.getNumProcesses());
        }
        if (other.hasNumThreads()) {
          setNumThreads(other.getNumThreads());
        }
        if (other.hasMaxEvents()) {
          setMaxEvents(other.getMaxEvents());
        }
        if (other.hasNesting()) {
          setNesting(other.getNesting());
        }
        if (other.hasSteadyStateTimings()) {
          mergeSteadyStateTimings(other.getSteadyStateTimings());
        }
        if (other.hasBurstPeriodMs()) {
          setBurstPeriodMs(other.getBurstPeriodMs());
        }
        if (other.hasBurstDurationMs()) {
          setBurstDurationMs(other.getBurstDurationMs());
        }
        if (other.hasBurstTimings()) {
          mergeBurstTimings(other.getBurstTimings());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        if (extensionRegistry == null) {
          throw new java.lang.NullPointerException();
        }
        try {
          boolean done = false;
          while (!done) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                done = true;
                break;
              case 10: {
                input.readMessage(
                    getTraceConfigFieldBuilder().getBuilder(),
                    extensionRegistry);
                bitField0_ |= 0x00000001;
                break;
              } // case 10
              case 16: {
                shmemSizeKb_ = input.readUInt32();
                bitField0_ |= 0x00000002;
                break;
              } // case 16
              case 24: {
                shmemPageSizeKb_ = input.readUInt32();
                bitField0_ |= 0x00000004;
                break;
              } // case 24
              case 32: {
                numProcesses_ = input.readUInt32();
                bitField0_ |= 0x00000008;
                break;
              } // case 32
              case 40: {
                numThreads_ = input.readUInt32();
                bitField0_ |= 0x00000010;
                break;
              } // case 40
              case 48: {
                maxEvents_ = input.readUInt32();
                bitField0_ |= 0x00000020;
                break;
              } // case 48
              case 56: {
                nesting_ = input.readUInt32();
                bitField0_ |= 0x00000040;
                break;
              } // case 56
              case 66: {
                input.readMessage(
                    getSteadyStateTimingsFieldBuilder().getBuilder(),
                    extensionRegistry);
                bitField0_ |= 0x00000080;
                break;
              } // case 66
              case 72: {
                burstPeriodMs_ = input.readUInt32();
                bitField0_ |= 0x00000100;
                break;
              } // case 72
              case 80: {
                burstDurationMs_ = input.readUInt32();
                bitField0_ |= 0x00000200;
                break;
              } // case 80
              case 90: {
                input.readMessage(
                    getBurstTimingsFieldBuilder().getBuilder(),
                    extensionRegistry);
                bitField0_ |= 0x00000400;
                break;
              } // case 90
              default: {
                if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                  done = true; // was an endgroup tag
                }
                break;
              } // default:
            } // switch (tag)
          } // while (!done)
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.unwrapIOException();
        } finally {
          onChanged();
        } // finally
        return this;
      }
      private int bitField0_;

      private perfetto.protos.TraceConfigOuterClass.TraceConfig traceConfig_;
      private com.google.protobuf.SingleFieldBuilderV3<
          perfetto.protos.TraceConfigOuterClass.TraceConfig, perfetto.protos.TraceConfigOuterClass.TraceConfig.Builder, perfetto.protos.TraceConfigOuterClass.TraceConfigOrBuilder> traceConfigBuilder_;
      /**
       * <code>optional .perfetto.protos.TraceConfig trace_config = 1;</code>
       * @return Whether the traceConfig field is set.
       */
      public boolean hasTraceConfig() {
        return ((bitField0_ & 0x00000001) != 0);
      }
      /**
       * <code>optional .perfetto.protos.TraceConfig trace_config = 1;</code>
       * @return The traceConfig.
       */
      public perfetto.protos.TraceConfigOuterClass.TraceConfig getTraceConfig() {
        if (traceConfigBuilder_ == null) {
          return traceConfig_ == null ? perfetto.protos.TraceConfigOuterClass.TraceConfig.getDefaultInstance() : traceConfig_;
        } else {
          return traceConfigBuilder_.getMessage();
        }
      }
      /**
       * <code>optional .perfetto.protos.TraceConfig trace_config = 1;</code>
       */
      public Builder setTraceConfig(perfetto.protos.TraceConfigOuterClass.TraceConfig value) {
        if (traceConfigBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          traceConfig_ = value;
        } else {
          traceConfigBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000001;
        onChanged();
        return this;
      }
      /**
       * <code>optional .perfetto.protos.TraceConfig trace_config = 1;</code>
       */
      public Builder setTraceConfig(
          perfetto.protos.TraceConfigOuterClass.TraceConfig.Builder builderForValue) {
        if (traceConfigBuilder_ == null) {
          traceConfig_ = builderForValue.build();
        } else {
          traceConfigBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000001;
        onChanged();
        return this;
      }
      /**
       * <code>optional .perfetto.protos.TraceConfig trace_config = 1;</code>
       */
      public Builder mergeTraceConfig(perfetto.protos.TraceConfigOuterClass.TraceConfig value) {
        if (traceConfigBuilder_ == null) {
          if (((bitField0_ & 0x00000001) != 0) &&
            traceConfig_ != null &&
            traceConfig_ != perfetto.protos.TraceConfigOuterClass.TraceConfig.getDefaultInstance()) {
            getTraceConfigBuilder().mergeFrom(value);
          } else {
            traceConfig_ = value;
          }
        } else {
          traceConfigBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00000001;
        onChanged();
        return this;
      }
      /**
       * <code>optional .perfetto.protos.TraceConfig trace_config = 1;</code>
       */
      public Builder clearTraceConfig() {
        bitField0_ = (bitField0_ & ~0x00000001);
        traceConfig_ = null;
        if (traceConfigBuilder_ != null) {
          traceConfigBuilder_.dispose();
          traceConfigBuilder_ = null;
        }
        onChanged();
        return this;
      }
      /**
       * <code>optional .perfetto.protos.TraceConfig trace_config = 1;</code>
       */
      public perfetto.protos.TraceConfigOuterClass.TraceConfig.Builder getTraceConfigBuilder() {
        bitField0_ |= 0x00000001;
        onChanged();
        return getTraceConfigFieldBuilder().getBuilder();
      }
      /**
       * <code>optional .perfetto.protos.TraceConfig trace_config = 1;</code>
       */
      public perfetto.protos.TraceConfigOuterClass.TraceConfigOrBuilder getTraceConfigOrBuilder() {
        if (traceConfigBuilder_ != null) {
          return traceConfigBuilder_.getMessageOrBuilder();
        } else {
          return traceConfig_ == null ?
              perfetto.protos.TraceConfigOuterClass.TraceConfig.getDefaultInstance() : traceConfig_;
        }
      }
      /**
       * <code>optional .perfetto.protos.TraceConfig trace_config = 1;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          perfetto.protos.TraceConfigOuterClass.TraceConfig, perfetto.protos.TraceConfigOuterClass.TraceConfig.Builder, perfetto.protos.TraceConfigOuterClass.TraceConfigOrBuilder> 
          getTraceConfigFieldBuilder() {
        if (traceConfigBuilder_ == null) {
          traceConfigBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              perfetto.protos.TraceConfigOuterClass.TraceConfig, perfetto.protos.TraceConfigOuterClass.TraceConfig.Builder, perfetto.protos.TraceConfigOuterClass.TraceConfigOrBuilder>(
                  getTraceConfig(),
                  getParentForChildren(),
                  isClean());
          traceConfig_ = null;
        }
        return traceConfigBuilder_;
      }

      private int shmemSizeKb_ ;
      /**
       * <pre>
       * Shared Memory Buffer setup, passed as arguments to Tracing.Initialize().
       * </pre>
       *
       * <code>optional uint32 shmem_size_kb = 2;</code>
       * @return Whether the shmemSizeKb field is set.
       */
      @java.lang.Override
      public boolean hasShmemSizeKb() {
        return ((bitField0_ & 0x00000002) != 0);
      }
      /**
       * <pre>
       * Shared Memory Buffer setup, passed as arguments to Tracing.Initialize().
       * </pre>
       *
       * <code>optional uint32 shmem_size_kb = 2;</code>
       * @return The shmemSizeKb.
       */
      @java.lang.Override
      public int getShmemSizeKb() {
        return shmemSizeKb_;
      }
      /**
       * <pre>
       * Shared Memory Buffer setup, passed as arguments to Tracing.Initialize().
       * </pre>
       *
       * <code>optional uint32 shmem_size_kb = 2;</code>
       * @param value The shmemSizeKb to set.
       * @return This builder for chaining.
       */
      public Builder setShmemSizeKb(int value) {
        
        shmemSizeKb_ = value;
        bitField0_ |= 0x00000002;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Shared Memory Buffer setup, passed as arguments to Tracing.Initialize().
       * </pre>
       *
       * <code>optional uint32 shmem_size_kb = 2;</code>
       * @return This builder for chaining.
       */
      public Builder clearShmemSizeKb() {
        bitField0_ = (bitField0_ & ~0x00000002);
        shmemSizeKb_ = 0;
        onChanged();
        return this;
      }

      private int shmemPageSizeKb_ ;
      /**
       * <code>optional uint32 shmem_page_size_kb = 3;</code>
       * @return Whether the shmemPageSizeKb field is set.
       */
      @java.lang.Override
      public boolean hasShmemPageSizeKb() {
        return ((bitField0_ & 0x00000004) != 0);
      }
      /**
       * <code>optional uint32 shmem_page_size_kb = 3;</code>
       * @return The shmemPageSizeKb.
       */
      @java.lang.Override
      public int getShmemPageSizeKb() {
        return shmemPageSizeKb_;
      }
      /**
       * <code>optional uint32 shmem_page_size_kb = 3;</code>
       * @param value The shmemPageSizeKb to set.
       * @return This builder for chaining.
       */
      public Builder setShmemPageSizeKb(int value) {
        
        shmemPageSizeKb_ = value;
        bitField0_ |= 0x00000004;
        onChanged();
        return this;
      }
      /**
       * <code>optional uint32 shmem_page_size_kb = 3;</code>
       * @return This builder for chaining.
       */
      public Builder clearShmemPageSizeKb() {
        bitField0_ = (bitField0_ & ~0x00000004);
        shmemPageSizeKb_ = 0;
        onChanged();
        return this;
      }

      private int numProcesses_ ;
      /**
       * <pre>
       * How many producer processes to spawn.
       * </pre>
       *
       * <code>optional uint32 num_processes = 4;</code>
       * @return Whether the numProcesses field is set.
       */
      @java.lang.Override
      public boolean hasNumProcesses() {
        return ((bitField0_ & 0x00000008) != 0);
      }
      /**
       * <pre>
       * How many producer processes to spawn.
       * </pre>
       *
       * <code>optional uint32 num_processes = 4;</code>
       * @return The numProcesses.
       */
      @java.lang.Override
      public int getNumProcesses() {
        return numProcesses_;
      }
      /**
       * <pre>
       * How many producer processes to spawn.
       * </pre>
       *
       * <code>optional uint32 num_processes = 4;</code>
       * @param value The numProcesses to set.
       * @return This builder for chaining.
       */
      public Builder setNumProcesses(int value) {
        
        numProcesses_ = value;
        bitField0_ |= 0x00000008;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * How many producer processes to spawn.
       * </pre>
       *
       * <code>optional uint32 num_processes = 4;</code>
       * @return This builder for chaining.
       */
      public Builder clearNumProcesses() {
        bitField0_ = (bitField0_ & ~0x00000008);
        numProcesses_ = 0;
        onChanged();
        return this;
      }

      private int numThreads_ ;
      /**
       * <pre>
       * How many writer threads each producer process should spawn.
       * </pre>
       *
       * <code>optional uint32 num_threads = 5;</code>
       * @return Whether the numThreads field is set.
       */
      @java.lang.Override
      public boolean hasNumThreads() {
        return ((bitField0_ & 0x00000010) != 0);
      }
      /**
       * <pre>
       * How many writer threads each producer process should spawn.
       * </pre>
       *
       * <code>optional uint32 num_threads = 5;</code>
       * @return The numThreads.
       */
      @java.lang.Override
      public int getNumThreads() {
        return numThreads_;
      }
      /**
       * <pre>
       * How many writer threads each producer process should spawn.
       * </pre>
       *
       * <code>optional uint32 num_threads = 5;</code>
       * @param value The numThreads to set.
       * @return This builder for chaining.
       */
      public Builder setNumThreads(int value) {
        
        numThreads_ = value;
        bitField0_ |= 0x00000010;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * How many writer threads each producer process should spawn.
       * </pre>
       *
       * <code>optional uint32 num_threads = 5;</code>
       * @return This builder for chaining.
       */
      public Builder clearNumThreads() {
        bitField0_ = (bitField0_ & ~0x00000010);
        numThreads_ = 0;
        onChanged();
        return this;
      }

      private int maxEvents_ ;
      /**
       * <pre>
       * The producer will write events until one of the following is met:
       * - trace_config.duration_ms is reached.
       * - max_events is reached.
       * </pre>
       *
       * <code>optional uint32 max_events = 6;</code>
       * @return Whether the maxEvents field is set.
       */
      @java.lang.Override
      public boolean hasMaxEvents() {
        return ((bitField0_ & 0x00000020) != 0);
      }
      /**
       * <pre>
       * The producer will write events until one of the following is met:
       * - trace_config.duration_ms is reached.
       * - max_events is reached.
       * </pre>
       *
       * <code>optional uint32 max_events = 6;</code>
       * @return The maxEvents.
       */
      @java.lang.Override
      public int getMaxEvents() {
        return maxEvents_;
      }
      /**
       * <pre>
       * The producer will write events until one of the following is met:
       * - trace_config.duration_ms is reached.
       * - max_events is reached.
       * </pre>
       *
       * <code>optional uint32 max_events = 6;</code>
       * @param value The maxEvents to set.
       * @return This builder for chaining.
       */
      public Builder setMaxEvents(int value) {
        
        maxEvents_ = value;
        bitField0_ |= 0x00000020;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * The producer will write events until one of the following is met:
       * - trace_config.duration_ms is reached.
       * - max_events is reached.
       * </pre>
       *
       * <code>optional uint32 max_events = 6;</code>
       * @return This builder for chaining.
       */
      public Builder clearMaxEvents() {
        bitField0_ = (bitField0_ & ~0x00000020);
        maxEvents_ = 0;
        onChanged();
        return this;
      }

      private int nesting_ ;
      /**
       * <pre>
       * If &gt; 0 will write nested messages up to N levels deep. The size of each
       * nested message depends on the payload_mean / sttdev arguments (below).
       * This is to cover the patching logic.
       * </pre>
       *
       * <code>optional uint32 nesting = 7;</code>
       * @return Whether the nesting field is set.
       */
      @java.lang.Override
      public boolean hasNesting() {
        return ((bitField0_ & 0x00000040) != 0);
      }
      /**
       * <pre>
       * If &gt; 0 will write nested messages up to N levels deep. The size of each
       * nested message depends on the payload_mean / sttdev arguments (below).
       * This is to cover the patching logic.
       * </pre>
       *
       * <code>optional uint32 nesting = 7;</code>
       * @return The nesting.
       */
      @java.lang.Override
      public int getNesting() {
        return nesting_;
      }
      /**
       * <pre>
       * If &gt; 0 will write nested messages up to N levels deep. The size of each
       * nested message depends on the payload_mean / sttdev arguments (below).
       * This is to cover the patching logic.
       * </pre>
       *
       * <code>optional uint32 nesting = 7;</code>
       * @param value The nesting to set.
       * @return This builder for chaining.
       */
      public Builder setNesting(int value) {
        
        nesting_ = value;
        bitField0_ |= 0x00000040;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * If &gt; 0 will write nested messages up to N levels deep. The size of each
       * nested message depends on the payload_mean / sttdev arguments (below).
       * This is to cover the patching logic.
       * </pre>
       *
       * <code>optional uint32 nesting = 7;</code>
       * @return This builder for chaining.
       */
      public Builder clearNesting() {
        bitField0_ = (bitField0_ & ~0x00000040);
        nesting_ = 0;
        onChanged();
        return this;
      }

      private perfetto.protos.StressTestConfigOuterClass.StressTestConfig.WriterTiming steadyStateTimings_;
      private com.google.protobuf.SingleFieldBuilderV3<
          perfetto.protos.StressTestConfigOuterClass.StressTestConfig.WriterTiming, perfetto.protos.StressTestConfigOuterClass.StressTestConfig.WriterTiming.Builder, perfetto.protos.StressTestConfigOuterClass.StressTestConfig.WriterTimingOrBuilder> steadyStateTimingsBuilder_;
      /**
       * <pre>
       * The timings used by default.
       * </pre>
       *
       * <code>optional .perfetto.protos.StressTestConfig.WriterTiming steady_state_timings = 8;</code>
       * @return Whether the steadyStateTimings field is set.
       */
      public boolean hasSteadyStateTimings() {
        return ((bitField0_ & 0x00000080) != 0);
      }
      /**
       * <pre>
       * The timings used by default.
       * </pre>
       *
       * <code>optional .perfetto.protos.StressTestConfig.WriterTiming steady_state_timings = 8;</code>
       * @return The steadyStateTimings.
       */
      public perfetto.protos.StressTestConfigOuterClass.StressTestConfig.WriterTiming getSteadyStateTimings() {
        if (steadyStateTimingsBuilder_ == null) {
          return steadyStateTimings_ == null ? perfetto.protos.StressTestConfigOuterClass.StressTestConfig.WriterTiming.getDefaultInstance() : steadyStateTimings_;
        } else {
          return steadyStateTimingsBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       * The timings used by default.
       * </pre>
       *
       * <code>optional .perfetto.protos.StressTestConfig.WriterTiming steady_state_timings = 8;</code>
       */
      public Builder setSteadyStateTimings(perfetto.protos.StressTestConfigOuterClass.StressTestConfig.WriterTiming value) {
        if (steadyStateTimingsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          steadyStateTimings_ = value;
        } else {
          steadyStateTimingsBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000080;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * The timings used by default.
       * </pre>
       *
       * <code>optional .perfetto.protos.StressTestConfig.WriterTiming steady_state_timings = 8;</code>
       */
      public Builder setSteadyStateTimings(
          perfetto.protos.StressTestConfigOuterClass.StressTestConfig.WriterTiming.Builder builderForValue) {
        if (steadyStateTimingsBuilder_ == null) {
          steadyStateTimings_ = builderForValue.build();
        } else {
          steadyStateTimingsBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000080;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * The timings used by default.
       * </pre>
       *
       * <code>optional .perfetto.protos.StressTestConfig.WriterTiming steady_state_timings = 8;</code>
       */
      public Builder mergeSteadyStateTimings(perfetto.protos.StressTestConfigOuterClass.StressTestConfig.WriterTiming value) {
        if (steadyStateTimingsBuilder_ == null) {
          if (((bitField0_ & 0x00000080) != 0) &&
            steadyStateTimings_ != null &&
            steadyStateTimings_ != perfetto.protos.StressTestConfigOuterClass.StressTestConfig.WriterTiming.getDefaultInstance()) {
            getSteadyStateTimingsBuilder().mergeFrom(value);
          } else {
            steadyStateTimings_ = value;
          }
        } else {
          steadyStateTimingsBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00000080;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * The timings used by default.
       * </pre>
       *
       * <code>optional .perfetto.protos.StressTestConfig.WriterTiming steady_state_timings = 8;</code>
       */
      public Builder clearSteadyStateTimings() {
        bitField0_ = (bitField0_ & ~0x00000080);
        steadyStateTimings_ = null;
        if (steadyStateTimingsBuilder_ != null) {
          steadyStateTimingsBuilder_.dispose();
          steadyStateTimingsBuilder_ = null;
        }
        onChanged();
        return this;
      }
      /**
       * <pre>
       * The timings used by default.
       * </pre>
       *
       * <code>optional .perfetto.protos.StressTestConfig.WriterTiming steady_state_timings = 8;</code>
       */
      public perfetto.protos.StressTestConfigOuterClass.StressTestConfig.WriterTiming.Builder getSteadyStateTimingsBuilder() {
        bitField0_ |= 0x00000080;
        onChanged();
        return getSteadyStateTimingsFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       * The timings used by default.
       * </pre>
       *
       * <code>optional .perfetto.protos.StressTestConfig.WriterTiming steady_state_timings = 8;</code>
       */
      public perfetto.protos.StressTestConfigOuterClass.StressTestConfig.WriterTimingOrBuilder getSteadyStateTimingsOrBuilder() {
        if (steadyStateTimingsBuilder_ != null) {
          return steadyStateTimingsBuilder_.getMessageOrBuilder();
        } else {
          return steadyStateTimings_ == null ?
              perfetto.protos.StressTestConfigOuterClass.StressTestConfig.WriterTiming.getDefaultInstance() : steadyStateTimings_;
        }
      }
      /**
       * <pre>
       * The timings used by default.
       * </pre>
       *
       * <code>optional .perfetto.protos.StressTestConfig.WriterTiming steady_state_timings = 8;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          perfetto.protos.StressTestConfigOuterClass.StressTestConfig.WriterTiming, perfetto.protos.StressTestConfigOuterClass.StressTestConfig.WriterTiming.Builder, perfetto.protos.StressTestConfigOuterClass.StressTestConfig.WriterTimingOrBuilder> 
          getSteadyStateTimingsFieldBuilder() {
        if (steadyStateTimingsBuilder_ == null) {
          steadyStateTimingsBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              perfetto.protos.StressTestConfigOuterClass.StressTestConfig.WriterTiming, perfetto.protos.StressTestConfigOuterClass.StressTestConfig.WriterTiming.Builder, perfetto.protos.StressTestConfigOuterClass.StressTestConfig.WriterTimingOrBuilder>(
                  getSteadyStateTimings(),
                  getParentForChildren(),
                  isClean());
          steadyStateTimings_ = null;
        }
        return steadyStateTimingsBuilder_;
      }

      private int burstPeriodMs_ ;
      /**
       * <pre>
       * Optionally it is possible to cause a writer to enter "burst mode",
       * simulating peaks of high-intensity writing. The way it works is the
       * following: by default the writer writes events using the
       * |steady_state_timings|. Then every |burst_period_ms| it will switch to the
       * |burst_timings| for |burst_duration_ms|, and go back to the steady state
       * after that (and then repeat).
       * </pre>
       *
       * <code>optional uint32 burst_period_ms = 9;</code>
       * @return Whether the burstPeriodMs field is set.
       */
      @java.lang.Override
      public boolean hasBurstPeriodMs() {
        return ((bitField0_ & 0x00000100) != 0);
      }
      /**
       * <pre>
       * Optionally it is possible to cause a writer to enter "burst mode",
       * simulating peaks of high-intensity writing. The way it works is the
       * following: by default the writer writes events using the
       * |steady_state_timings|. Then every |burst_period_ms| it will switch to the
       * |burst_timings| for |burst_duration_ms|, and go back to the steady state
       * after that (and then repeat).
       * </pre>
       *
       * <code>optional uint32 burst_period_ms = 9;</code>
       * @return The burstPeriodMs.
       */
      @java.lang.Override
      public int getBurstPeriodMs() {
        return burstPeriodMs_;
      }
      /**
       * <pre>
       * Optionally it is possible to cause a writer to enter "burst mode",
       * simulating peaks of high-intensity writing. The way it works is the
       * following: by default the writer writes events using the
       * |steady_state_timings|. Then every |burst_period_ms| it will switch to the
       * |burst_timings| for |burst_duration_ms|, and go back to the steady state
       * after that (and then repeat).
       * </pre>
       *
       * <code>optional uint32 burst_period_ms = 9;</code>
       * @param value The burstPeriodMs to set.
       * @return This builder for chaining.
       */
      public Builder setBurstPeriodMs(int value) {
        
        burstPeriodMs_ = value;
        bitField0_ |= 0x00000100;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Optionally it is possible to cause a writer to enter "burst mode",
       * simulating peaks of high-intensity writing. The way it works is the
       * following: by default the writer writes events using the
       * |steady_state_timings|. Then every |burst_period_ms| it will switch to the
       * |burst_timings| for |burst_duration_ms|, and go back to the steady state
       * after that (and then repeat).
       * </pre>
       *
       * <code>optional uint32 burst_period_ms = 9;</code>
       * @return This builder for chaining.
       */
      public Builder clearBurstPeriodMs() {
        bitField0_ = (bitField0_ & ~0x00000100);
        burstPeriodMs_ = 0;
        onChanged();
        return this;
      }

      private int burstDurationMs_ ;
      /**
       * <code>optional uint32 burst_duration_ms = 10;</code>
       * @return Whether the burstDurationMs field is set.
       */
      @java.lang.Override
      public boolean hasBurstDurationMs() {
        return ((bitField0_ & 0x00000200) != 0);
      }
      /**
       * <code>optional uint32 burst_duration_ms = 10;</code>
       * @return The burstDurationMs.
       */
      @java.lang.Override
      public int getBurstDurationMs() {
        return burstDurationMs_;
      }
      /**
       * <code>optional uint32 burst_duration_ms = 10;</code>
       * @param value The burstDurationMs to set.
       * @return This builder for chaining.
       */
      public Builder setBurstDurationMs(int value) {
        
        burstDurationMs_ = value;
        bitField0_ |= 0x00000200;
        onChanged();
        return this;
      }
      /**
       * <code>optional uint32 burst_duration_ms = 10;</code>
       * @return This builder for chaining.
       */
      public Builder clearBurstDurationMs() {
        bitField0_ = (bitField0_ & ~0x00000200);
        burstDurationMs_ = 0;
        onChanged();
        return this;
      }

      private perfetto.protos.StressTestConfigOuterClass.StressTestConfig.WriterTiming burstTimings_;
      private com.google.protobuf.SingleFieldBuilderV3<
          perfetto.protos.StressTestConfigOuterClass.StressTestConfig.WriterTiming, perfetto.protos.StressTestConfigOuterClass.StressTestConfig.WriterTiming.Builder, perfetto.protos.StressTestConfigOuterClass.StressTestConfig.WriterTimingOrBuilder> burstTimingsBuilder_;
      /**
       * <code>optional .perfetto.protos.StressTestConfig.WriterTiming burst_timings = 11;</code>
       * @return Whether the burstTimings field is set.
       */
      public boolean hasBurstTimings() {
        return ((bitField0_ & 0x00000400) != 0);
      }
      /**
       * <code>optional .perfetto.protos.StressTestConfig.WriterTiming burst_timings = 11;</code>
       * @return The burstTimings.
       */
      public perfetto.protos.StressTestConfigOuterClass.StressTestConfig.WriterTiming getBurstTimings() {
        if (burstTimingsBuilder_ == null) {
          return burstTimings_ == null ? perfetto.protos.StressTestConfigOuterClass.StressTestConfig.WriterTiming.getDefaultInstance() : burstTimings_;
        } else {
          return burstTimingsBuilder_.getMessage();
        }
      }
      /**
       * <code>optional .perfetto.protos.StressTestConfig.WriterTiming burst_timings = 11;</code>
       */
      public Builder setBurstTimings(perfetto.protos.StressTestConfigOuterClass.StressTestConfig.WriterTiming value) {
        if (burstTimingsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          burstTimings_ = value;
        } else {
          burstTimingsBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000400;
        onChanged();
        return this;
      }
      /**
       * <code>optional .perfetto.protos.StressTestConfig.WriterTiming burst_timings = 11;</code>
       */
      public Builder setBurstTimings(
          perfetto.protos.StressTestConfigOuterClass.StressTestConfig.WriterTiming.Builder builderForValue) {
        if (burstTimingsBuilder_ == null) {
          burstTimings_ = builderForValue.build();
        } else {
          burstTimingsBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000400;
        onChanged();
        return this;
      }
      /**
       * <code>optional .perfetto.protos.StressTestConfig.WriterTiming burst_timings = 11;</code>
       */
      public Builder mergeBurstTimings(perfetto.protos.StressTestConfigOuterClass.StressTestConfig.WriterTiming value) {
        if (burstTimingsBuilder_ == null) {
          if (((bitField0_ & 0x00000400) != 0) &&
            burstTimings_ != null &&
            burstTimings_ != perfetto.protos.StressTestConfigOuterClass.StressTestConfig.WriterTiming.getDefaultInstance()) {
            getBurstTimingsBuilder().mergeFrom(value);
          } else {
            burstTimings_ = value;
          }
        } else {
          burstTimingsBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00000400;
        onChanged();
        return this;
      }
      /**
       * <code>optional .perfetto.protos.StressTestConfig.WriterTiming burst_timings = 11;</code>
       */
      public Builder clearBurstTimings() {
        bitField0_ = (bitField0_ & ~0x00000400);
        burstTimings_ = null;
        if (burstTimingsBuilder_ != null) {
          burstTimingsBuilder_.dispose();
          burstTimingsBuilder_ = null;
        }
        onChanged();
        return this;
      }
      /**
       * <code>optional .perfetto.protos.StressTestConfig.WriterTiming burst_timings = 11;</code>
       */
      public perfetto.protos.StressTestConfigOuterClass.StressTestConfig.WriterTiming.Builder getBurstTimingsBuilder() {
        bitField0_ |= 0x00000400;
        onChanged();
        return getBurstTimingsFieldBuilder().getBuilder();
      }
      /**
       * <code>optional .perfetto.protos.StressTestConfig.WriterTiming burst_timings = 11;</code>
       */
      public perfetto.protos.StressTestConfigOuterClass.StressTestConfig.WriterTimingOrBuilder getBurstTimingsOrBuilder() {
        if (burstTimingsBuilder_ != null) {
          return burstTimingsBuilder_.getMessageOrBuilder();
        } else {
          return burstTimings_ == null ?
              perfetto.protos.StressTestConfigOuterClass.StressTestConfig.WriterTiming.getDefaultInstance() : burstTimings_;
        }
      }
      /**
       * <code>optional .perfetto.protos.StressTestConfig.WriterTiming burst_timings = 11;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          perfetto.protos.StressTestConfigOuterClass.StressTestConfig.WriterTiming, perfetto.protos.StressTestConfigOuterClass.StressTestConfig.WriterTiming.Builder, perfetto.protos.StressTestConfigOuterClass.StressTestConfig.WriterTimingOrBuilder> 
          getBurstTimingsFieldBuilder() {
        if (burstTimingsBuilder_ == null) {
          burstTimingsBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              perfetto.protos.StressTestConfigOuterClass.StressTestConfig.WriterTiming, perfetto.protos.StressTestConfigOuterClass.StressTestConfig.WriterTiming.Builder, perfetto.protos.StressTestConfigOuterClass.StressTestConfig.WriterTimingOrBuilder>(
                  getBurstTimings(),
                  getParentForChildren(),
                  isClean());
          burstTimings_ = null;
        }
        return burstTimingsBuilder_;
      }
      @java.lang.Override
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      @java.lang.Override
      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:perfetto.protos.StressTestConfig)
    }

    // @@protoc_insertion_point(class_scope:perfetto.protos.StressTestConfig)
    private static final perfetto.protos.StressTestConfigOuterClass.StressTestConfig DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new perfetto.protos.StressTestConfigOuterClass.StressTestConfig();
    }

    public static perfetto.protos.StressTestConfigOuterClass.StressTestConfig getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    @java.lang.Deprecated public static final com.google.protobuf.Parser<StressTestConfig>
        PARSER = new com.google.protobuf.AbstractParser<StressTestConfig>() {
      @java.lang.Override
      public StressTestConfig parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        Builder builder = newBuilder();
        try {
          builder.mergeFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.setUnfinishedMessage(builder.buildPartial());
        } catch (com.google.protobuf.UninitializedMessageException e) {
          throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
        } catch (java.io.IOException e) {
          throw new com.google.protobuf.InvalidProtocolBufferException(e)
              .setUnfinishedMessage(builder.buildPartial());
        }
        return builder.buildPartial();
      }
    };

    public static com.google.protobuf.Parser<StressTestConfig> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<StressTestConfig> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public perfetto.protos.StressTestConfigOuterClass.StressTestConfig getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_perfetto_protos_StressTestConfig_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_perfetto_protos_StressTestConfig_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_perfetto_protos_StressTestConfig_WriterTiming_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_perfetto_protos_StressTestConfig_WriterTiming_fieldAccessorTable;

  public static com.google.protobuf.Descriptors.FileDescriptor
      getDescriptor() {
    return descriptor;
  }
  private static  com.google.protobuf.Descriptors.FileDescriptor
      descriptor;
  static {
    java.lang.String[] descriptorData = {
      "\n/protos/perfetto/config/stress_test_con" +
      "fig.proto\022\017perfetto.protos\032)protos/perfe" +
      "tto/config/trace_config.proto\"\231\004\n\020Stress" +
      "TestConfig\0222\n\014trace_config\030\001 \001(\0132\034.perfe" +
      "tto.protos.TraceConfig\022\025\n\rshmem_size_kb\030" +
      "\002 \001(\r\022\032\n\022shmem_page_size_kb\030\003 \001(\r\022\025\n\rnum" +
      "_processes\030\004 \001(\r\022\023\n\013num_threads\030\005 \001(\r\022\022\n" +
      "\nmax_events\030\006 \001(\r\022\017\n\007nesting\030\007 \001(\r\022L\n\024st" +
      "eady_state_timings\030\010 \001(\0132..perfetto.prot" +
      "os.StressTestConfig.WriterTiming\022\027\n\017burs" +
      "t_period_ms\030\t \001(\r\022\031\n\021burst_duration_ms\030\n" +
      " \001(\r\022E\n\rburst_timings\030\013 \001(\0132..perfetto.p" +
      "rotos.StressTestConfig.WriterTiming\032\203\001\n\014" +
      "WriterTiming\022\024\n\014payload_mean\030\001 \001(\001\022\026\n\016pa" +
      "yload_stddev\030\002 \001(\001\022\021\n\trate_mean\030\003 \001(\001\022\023\n" +
      "\013rate_stddev\030\004 \001(\001\022\035\n\025payload_write_time" +
      "_ms\030\005 \001(\r"
    };
    descriptor = com.google.protobuf.Descriptors.FileDescriptor
      .internalBuildGeneratedFileFrom(descriptorData,
        new com.google.protobuf.Descriptors.FileDescriptor[] {
          perfetto.protos.TraceConfigOuterClass.getDescriptor(),
        });
    internal_static_perfetto_protos_StressTestConfig_descriptor =
      getDescriptor().getMessageTypes().get(0);
    internal_static_perfetto_protos_StressTestConfig_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_perfetto_protos_StressTestConfig_descriptor,
        new java.lang.String[] { "TraceConfig", "ShmemSizeKb", "ShmemPageSizeKb", "NumProcesses", "NumThreads", "MaxEvents", "Nesting", "SteadyStateTimings", "BurstPeriodMs", "BurstDurationMs", "BurstTimings", });
    internal_static_perfetto_protos_StressTestConfig_WriterTiming_descriptor =
      internal_static_perfetto_protos_StressTestConfig_descriptor.getNestedTypes().get(0);
    internal_static_perfetto_protos_StressTestConfig_WriterTiming_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_perfetto_protos_StressTestConfig_WriterTiming_descriptor,
        new java.lang.String[] { "PayloadMean", "PayloadStddev", "RateMean", "RateStddev", "PayloadWriteTimeMs", });
    perfetto.protos.TraceConfigOuterClass.getDescriptor();
  }

  // @@protoc_insertion_point(outer_class_scope)
}
