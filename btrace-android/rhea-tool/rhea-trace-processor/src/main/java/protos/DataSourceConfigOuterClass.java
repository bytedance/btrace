// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: protos/perfetto/config/data_source_config.proto

package perfetto.protos;

public final class DataSourceConfigOuterClass {
  private DataSourceConfigOuterClass() {}
  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistryLite registry) {
  }

  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistry registry) {
    registerAllExtensions(
        (com.google.protobuf.ExtensionRegistryLite) registry);
  }
  public interface DataSourceConfigOrBuilder extends
      // @@protoc_insertion_point(interface_extends:perfetto.protos.DataSourceConfig)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <pre>
     * Data source unique name, e.g., "linux.ftrace". This must match
     * the name passed by the data source when it registers (see
     * RegisterDataSource()).
     * </pre>
     *
     * <code>optional string name = 1;</code>
     * @return Whether the name field is set.
     */
    boolean hasName();
    /**
     * <pre>
     * Data source unique name, e.g., "linux.ftrace". This must match
     * the name passed by the data source when it registers (see
     * RegisterDataSource()).
     * </pre>
     *
     * <code>optional string name = 1;</code>
     * @return The name.
     */
    java.lang.String getName();
    /**
     * <pre>
     * Data source unique name, e.g., "linux.ftrace". This must match
     * the name passed by the data source when it registers (see
     * RegisterDataSource()).
     * </pre>
     *
     * <code>optional string name = 1;</code>
     * @return The bytes for name.
     */
    com.google.protobuf.ByteString
        getNameBytes();

    /**
     * <pre>
     * The index of the logging buffer where TracePacket(s) will be stored.
     * This field doesn't make a major difference for the Producer(s). The final
     * logging buffers, in fact, are completely owned by the Service. We just ask
     * the Producer to copy this number into the chunk headers it emits, so that
     * the Service can quickly identify the buffer where to move the chunks into
     * without expensive lookups on its fastpath.
     * </pre>
     *
     * <code>optional uint32 target_buffer = 2;</code>
     * @return Whether the targetBuffer field is set.
     */
    boolean hasTargetBuffer();
    /**
     * <pre>
     * The index of the logging buffer where TracePacket(s) will be stored.
     * This field doesn't make a major difference for the Producer(s). The final
     * logging buffers, in fact, are completely owned by the Service. We just ask
     * the Producer to copy this number into the chunk headers it emits, so that
     * the Service can quickly identify the buffer where to move the chunks into
     * without expensive lookups on its fastpath.
     * </pre>
     *
     * <code>optional uint32 target_buffer = 2;</code>
     * @return The targetBuffer.
     */
    int getTargetBuffer();

    /**
     * <pre>
     * Set by the service to indicate the duration of the trace.
     * DO NOT SET in consumer as this will be overridden by the service.
     * </pre>
     *
     * <code>optional uint32 trace_duration_ms = 3;</code>
     * @return Whether the traceDurationMs field is set.
     */
    boolean hasTraceDurationMs();
    /**
     * <pre>
     * Set by the service to indicate the duration of the trace.
     * DO NOT SET in consumer as this will be overridden by the service.
     * </pre>
     *
     * <code>optional uint32 trace_duration_ms = 3;</code>
     * @return The traceDurationMs.
     */
    int getTraceDurationMs();

    /**
     * <pre>
     * Set by the service to indicate how long it waits after StopDataSource.
     * DO NOT SET in consumer as this will be overridden by the service.
     * </pre>
     *
     * <code>optional uint32 stop_timeout_ms = 7;</code>
     * @return Whether the stopTimeoutMs field is set.
     */
    boolean hasStopTimeoutMs();
    /**
     * <pre>
     * Set by the service to indicate how long it waits after StopDataSource.
     * DO NOT SET in consumer as this will be overridden by the service.
     * </pre>
     *
     * <code>optional uint32 stop_timeout_ms = 7;</code>
     * @return The stopTimeoutMs.
     */
    int getStopTimeoutMs();

    /**
     * <pre>
     * Set by the service to indicate whether this tracing session has extra
     * guardrails.
     * DO NOT SET in consumer as this will be overridden by the service.
     * </pre>
     *
     * <code>optional bool enable_extra_guardrails = 6;</code>
     * @return Whether the enableExtraGuardrails field is set.
     */
    boolean hasEnableExtraGuardrails();
    /**
     * <pre>
     * Set by the service to indicate whether this tracing session has extra
     * guardrails.
     * DO NOT SET in consumer as this will be overridden by the service.
     * </pre>
     *
     * <code>optional bool enable_extra_guardrails = 6;</code>
     * @return The enableExtraGuardrails.
     */
    boolean getEnableExtraGuardrails();

    /**
     * <pre>
     * Set by the service to indicate which user initiated this trace.
     * DO NOT SET in consumer as this will be overridden by the service.
     * </pre>
     *
     * <code>optional .perfetto.protos.DataSourceConfig.SessionInitiator session_initiator = 8;</code>
     * @return Whether the sessionInitiator field is set.
     */
    boolean hasSessionInitiator();
    /**
     * <pre>
     * Set by the service to indicate which user initiated this trace.
     * DO NOT SET in consumer as this will be overridden by the service.
     * </pre>
     *
     * <code>optional .perfetto.protos.DataSourceConfig.SessionInitiator session_initiator = 8;</code>
     * @return The sessionInitiator.
     */
    perfetto.protos.DataSourceConfigOuterClass.DataSourceConfig.SessionInitiator getSessionInitiator();

    /**
     * <pre>
     * Set by the service to indicate which tracing session the data source
     * belongs to. The intended use case for this is checking if two data sources,
     * one of which produces metadata for the other one, belong to the same trace
     * session and hence should be linked together.
     * This field was introduced in Aug 2018 after Android P.
     * DO NOT SET in consumer as this will be overridden by the service.
     * </pre>
     *
     * <code>optional uint64 tracing_session_id = 4;</code>
     * @return Whether the tracingSessionId field is set.
     */
    boolean hasTracingSessionId();
    /**
     * <pre>
     * Set by the service to indicate which tracing session the data source
     * belongs to. The intended use case for this is checking if two data sources,
     * one of which produces metadata for the other one, belong to the same trace
     * session and hence should be linked together.
     * This field was introduced in Aug 2018 after Android P.
     * DO NOT SET in consumer as this will be overridden by the service.
     * </pre>
     *
     * <code>optional uint64 tracing_session_id = 4;</code>
     * @return The tracingSessionId.
     */
    long getTracingSessionId();

    /**
     * <pre>
     * Data source name: linux.ftrace
     * </pre>
     *
     * <code>optional .perfetto.protos.FtraceConfig ftrace_config = 100 [lazy = true];</code>
     * @return Whether the ftraceConfig field is set.
     */
    boolean hasFtraceConfig();
    /**
     * <pre>
     * Data source name: linux.ftrace
     * </pre>
     *
     * <code>optional .perfetto.protos.FtraceConfig ftrace_config = 100 [lazy = true];</code>
     * @return The ftraceConfig.
     */
    perfetto.protos.FtraceConfigOuterClass.FtraceConfig getFtraceConfig();
    /**
     * <pre>
     * Data source name: linux.ftrace
     * </pre>
     *
     * <code>optional .perfetto.protos.FtraceConfig ftrace_config = 100 [lazy = true];</code>
     */
    perfetto.protos.FtraceConfigOuterClass.FtraceConfigOrBuilder getFtraceConfigOrBuilder();

    /**
     * <pre>
     * Data source name: linux.inode_file_map
     * </pre>
     *
     * <code>optional .perfetto.protos.InodeFileConfig inode_file_config = 102 [lazy = true];</code>
     * @return Whether the inodeFileConfig field is set.
     */
    boolean hasInodeFileConfig();
    /**
     * <pre>
     * Data source name: linux.inode_file_map
     * </pre>
     *
     * <code>optional .perfetto.protos.InodeFileConfig inode_file_config = 102 [lazy = true];</code>
     * @return The inodeFileConfig.
     */
    perfetto.protos.InodeFileConfigOuterClass.InodeFileConfig getInodeFileConfig();
    /**
     * <pre>
     * Data source name: linux.inode_file_map
     * </pre>
     *
     * <code>optional .perfetto.protos.InodeFileConfig inode_file_config = 102 [lazy = true];</code>
     */
    perfetto.protos.InodeFileConfigOuterClass.InodeFileConfigOrBuilder getInodeFileConfigOrBuilder();

    /**
     * <pre>
     * Data source name: linux.process_stats
     * </pre>
     *
     * <code>optional .perfetto.protos.ProcessStatsConfig process_stats_config = 103 [lazy = true];</code>
     * @return Whether the processStatsConfig field is set.
     */
    boolean hasProcessStatsConfig();
    /**
     * <pre>
     * Data source name: linux.process_stats
     * </pre>
     *
     * <code>optional .perfetto.protos.ProcessStatsConfig process_stats_config = 103 [lazy = true];</code>
     * @return The processStatsConfig.
     */
    perfetto.protos.ProcessStatsConfigOuterClass.ProcessStatsConfig getProcessStatsConfig();
    /**
     * <pre>
     * Data source name: linux.process_stats
     * </pre>
     *
     * <code>optional .perfetto.protos.ProcessStatsConfig process_stats_config = 103 [lazy = true];</code>
     */
    perfetto.protos.ProcessStatsConfigOuterClass.ProcessStatsConfigOrBuilder getProcessStatsConfigOrBuilder();

    /**
     * <pre>
     * Data source name: linux.sys_stats
     * </pre>
     *
     * <code>optional .perfetto.protos.SysStatsConfig sys_stats_config = 104 [lazy = true];</code>
     * @return Whether the sysStatsConfig field is set.
     */
    boolean hasSysStatsConfig();
    /**
     * <pre>
     * Data source name: linux.sys_stats
     * </pre>
     *
     * <code>optional .perfetto.protos.SysStatsConfig sys_stats_config = 104 [lazy = true];</code>
     * @return The sysStatsConfig.
     */
    perfetto.protos.SysStatsConfigOuterClass.SysStatsConfig getSysStatsConfig();
    /**
     * <pre>
     * Data source name: linux.sys_stats
     * </pre>
     *
     * <code>optional .perfetto.protos.SysStatsConfig sys_stats_config = 104 [lazy = true];</code>
     */
    perfetto.protos.SysStatsConfigOuterClass.SysStatsConfigOrBuilder getSysStatsConfigOrBuilder();

    /**
     * <pre>
     * Data source name: android.heapprofd
     * Introduced in Android 10.
     * </pre>
     *
     * <code>optional .perfetto.protos.HeapprofdConfig heapprofd_config = 105 [lazy = true];</code>
     * @return Whether the heapprofdConfig field is set.
     */
    boolean hasHeapprofdConfig();
    /**
     * <pre>
     * Data source name: android.heapprofd
     * Introduced in Android 10.
     * </pre>
     *
     * <code>optional .perfetto.protos.HeapprofdConfig heapprofd_config = 105 [lazy = true];</code>
     * @return The heapprofdConfig.
     */
    perfetto.protos.HeapprofdConfigOuterClass.HeapprofdConfig getHeapprofdConfig();
    /**
     * <pre>
     * Data source name: android.heapprofd
     * Introduced in Android 10.
     * </pre>
     *
     * <code>optional .perfetto.protos.HeapprofdConfig heapprofd_config = 105 [lazy = true];</code>
     */
    perfetto.protos.HeapprofdConfigOuterClass.HeapprofdConfigOrBuilder getHeapprofdConfigOrBuilder();

    /**
     * <pre>
     * Data source name: android.java_hprof
     * Introduced in Android 11.
     * </pre>
     *
     * <code>optional .perfetto.protos.JavaHprofConfig java_hprof_config = 110 [lazy = true];</code>
     * @return Whether the javaHprofConfig field is set.
     */
    boolean hasJavaHprofConfig();
    /**
     * <pre>
     * Data source name: android.java_hprof
     * Introduced in Android 11.
     * </pre>
     *
     * <code>optional .perfetto.protos.JavaHprofConfig java_hprof_config = 110 [lazy = true];</code>
     * @return The javaHprofConfig.
     */
    perfetto.protos.JavaHprofConfigOuterClass.JavaHprofConfig getJavaHprofConfig();
    /**
     * <pre>
     * Data source name: android.java_hprof
     * Introduced in Android 11.
     * </pre>
     *
     * <code>optional .perfetto.protos.JavaHprofConfig java_hprof_config = 110 [lazy = true];</code>
     */
    perfetto.protos.JavaHprofConfigOuterClass.JavaHprofConfigOrBuilder getJavaHprofConfigOrBuilder();

    /**
     * <pre>
     * Data source name: android.power
     * </pre>
     *
     * <code>optional .perfetto.protos.AndroidPowerConfig android_power_config = 106 [lazy = true];</code>
     * @return Whether the androidPowerConfig field is set.
     */
    boolean hasAndroidPowerConfig();
    /**
     * <pre>
     * Data source name: android.power
     * </pre>
     *
     * <code>optional .perfetto.protos.AndroidPowerConfig android_power_config = 106 [lazy = true];</code>
     * @return The androidPowerConfig.
     */
    perfetto.protos.AndroidPowerConfigOuterClass.AndroidPowerConfig getAndroidPowerConfig();
    /**
     * <pre>
     * Data source name: android.power
     * </pre>
     *
     * <code>optional .perfetto.protos.AndroidPowerConfig android_power_config = 106 [lazy = true];</code>
     */
    perfetto.protos.AndroidPowerConfigOuterClass.AndroidPowerConfigOrBuilder getAndroidPowerConfigOrBuilder();

    /**
     * <pre>
     * Data source name: android.log
     * </pre>
     *
     * <code>optional .perfetto.protos.AndroidLogConfig android_log_config = 107 [lazy = true];</code>
     * @return Whether the androidLogConfig field is set.
     */
    boolean hasAndroidLogConfig();
    /**
     * <pre>
     * Data source name: android.log
     * </pre>
     *
     * <code>optional .perfetto.protos.AndroidLogConfig android_log_config = 107 [lazy = true];</code>
     * @return The androidLogConfig.
     */
    perfetto.protos.AndroidLogConfigOuterClass.AndroidLogConfig getAndroidLogConfig();
    /**
     * <pre>
     * Data source name: android.log
     * </pre>
     *
     * <code>optional .perfetto.protos.AndroidLogConfig android_log_config = 107 [lazy = true];</code>
     */
    perfetto.protos.AndroidLogConfigOuterClass.AndroidLogConfigOrBuilder getAndroidLogConfigOrBuilder();

    /**
     * <pre>
     * TODO(fmayer): Add data source name for this.
     * </pre>
     *
     * <code>optional .perfetto.protos.GpuCounterConfig gpu_counter_config = 108 [lazy = true];</code>
     * @return Whether the gpuCounterConfig field is set.
     */
    boolean hasGpuCounterConfig();
    /**
     * <pre>
     * TODO(fmayer): Add data source name for this.
     * </pre>
     *
     * <code>optional .perfetto.protos.GpuCounterConfig gpu_counter_config = 108 [lazy = true];</code>
     * @return The gpuCounterConfig.
     */
    perfetto.protos.GpuCounterConfigOuterClass.GpuCounterConfig getGpuCounterConfig();
    /**
     * <pre>
     * TODO(fmayer): Add data source name for this.
     * </pre>
     *
     * <code>optional .perfetto.protos.GpuCounterConfig gpu_counter_config = 108 [lazy = true];</code>
     */
    perfetto.protos.GpuCounterConfigOuterClass.GpuCounterConfigOrBuilder getGpuCounterConfigOrBuilder();

    /**
     * <pre>
     * Data source name: android.game_interventions
     * </pre>
     *
     * <code>optional .perfetto.protos.AndroidGameInterventionListConfig android_game_intervention_list_config = 116 [lazy = true];</code>
     * @return Whether the androidGameInterventionListConfig field is set.
     */
    boolean hasAndroidGameInterventionListConfig();
    /**
     * <pre>
     * Data source name: android.game_interventions
     * </pre>
     *
     * <code>optional .perfetto.protos.AndroidGameInterventionListConfig android_game_intervention_list_config = 116 [lazy = true];</code>
     * @return The androidGameInterventionListConfig.
     */
    perfetto.protos.AndroidGameInterventionListConfigOuterClass.AndroidGameInterventionListConfig getAndroidGameInterventionListConfig();
    /**
     * <pre>
     * Data source name: android.game_interventions
     * </pre>
     *
     * <code>optional .perfetto.protos.AndroidGameInterventionListConfig android_game_intervention_list_config = 116 [lazy = true];</code>
     */
    perfetto.protos.AndroidGameInterventionListConfigOuterClass.AndroidGameInterventionListConfigOrBuilder getAndroidGameInterventionListConfigOrBuilder();

    /**
     * <pre>
     * Data source name: android.packages_list
     * </pre>
     *
     * <code>optional .perfetto.protos.PackagesListConfig packages_list_config = 109 [lazy = true];</code>
     * @return Whether the packagesListConfig field is set.
     */
    boolean hasPackagesListConfig();
    /**
     * <pre>
     * Data source name: android.packages_list
     * </pre>
     *
     * <code>optional .perfetto.protos.PackagesListConfig packages_list_config = 109 [lazy = true];</code>
     * @return The packagesListConfig.
     */
    perfetto.protos.PackagesListConfigOuterClass.PackagesListConfig getPackagesListConfig();
    /**
     * <pre>
     * Data source name: android.packages_list
     * </pre>
     *
     * <code>optional .perfetto.protos.PackagesListConfig packages_list_config = 109 [lazy = true];</code>
     */
    perfetto.protos.PackagesListConfigOuterClass.PackagesListConfigOrBuilder getPackagesListConfigOrBuilder();

    /**
     * <pre>
     * Data source name: linux.perf
     * </pre>
     *
     * <code>optional .perfetto.protos.PerfEventConfig perf_event_config = 111 [lazy = true];</code>
     * @return Whether the perfEventConfig field is set.
     */
    boolean hasPerfEventConfig();
    /**
     * <pre>
     * Data source name: linux.perf
     * </pre>
     *
     * <code>optional .perfetto.protos.PerfEventConfig perf_event_config = 111 [lazy = true];</code>
     * @return The perfEventConfig.
     */
    perfetto.protos.PerfEventConfigOuterClass.PerfEventConfig getPerfEventConfig();
    /**
     * <pre>
     * Data source name: linux.perf
     * </pre>
     *
     * <code>optional .perfetto.protos.PerfEventConfig perf_event_config = 111 [lazy = true];</code>
     */
    perfetto.protos.PerfEventConfigOuterClass.PerfEventConfigOrBuilder getPerfEventConfigOrBuilder();

    /**
     * <pre>
     * Data source name: vulkan.memory_tracker
     * </pre>
     *
     * <code>optional .perfetto.protos.VulkanMemoryConfig vulkan_memory_config = 112 [lazy = true];</code>
     * @return Whether the vulkanMemoryConfig field is set.
     */
    boolean hasVulkanMemoryConfig();
    /**
     * <pre>
     * Data source name: vulkan.memory_tracker
     * </pre>
     *
     * <code>optional .perfetto.protos.VulkanMemoryConfig vulkan_memory_config = 112 [lazy = true];</code>
     * @return The vulkanMemoryConfig.
     */
    perfetto.protos.VulkanMemoryConfigOuterClass.VulkanMemoryConfig getVulkanMemoryConfig();
    /**
     * <pre>
     * Data source name: vulkan.memory_tracker
     * </pre>
     *
     * <code>optional .perfetto.protos.VulkanMemoryConfig vulkan_memory_config = 112 [lazy = true];</code>
     */
    perfetto.protos.VulkanMemoryConfigOuterClass.VulkanMemoryConfigOrBuilder getVulkanMemoryConfigOrBuilder();

    /**
     * <pre>
     * Data source name: track_event
     * </pre>
     *
     * <code>optional .perfetto.protos.TrackEventConfig track_event_config = 113 [lazy = true];</code>
     * @return Whether the trackEventConfig field is set.
     */
    boolean hasTrackEventConfig();
    /**
     * <pre>
     * Data source name: track_event
     * </pre>
     *
     * <code>optional .perfetto.protos.TrackEventConfig track_event_config = 113 [lazy = true];</code>
     * @return The trackEventConfig.
     */
    perfetto.protos.TrackEventConfigOuterClass.TrackEventConfig getTrackEventConfig();
    /**
     * <pre>
     * Data source name: track_event
     * </pre>
     *
     * <code>optional .perfetto.protos.TrackEventConfig track_event_config = 113 [lazy = true];</code>
     */
    perfetto.protos.TrackEventConfigOuterClass.TrackEventConfigOrBuilder getTrackEventConfigOrBuilder();

    /**
     * <pre>
     * Data source name: android.polled_state
     * </pre>
     *
     * <code>optional .perfetto.protos.AndroidPolledStateConfig android_polled_state_config = 114 [lazy = true];</code>
     * @return Whether the androidPolledStateConfig field is set.
     */
    boolean hasAndroidPolledStateConfig();
    /**
     * <pre>
     * Data source name: android.polled_state
     * </pre>
     *
     * <code>optional .perfetto.protos.AndroidPolledStateConfig android_polled_state_config = 114 [lazy = true];</code>
     * @return The androidPolledStateConfig.
     */
    perfetto.protos.AndroidPolledStateConfigOuterClass.AndroidPolledStateConfig getAndroidPolledStateConfig();
    /**
     * <pre>
     * Data source name: android.polled_state
     * </pre>
     *
     * <code>optional .perfetto.protos.AndroidPolledStateConfig android_polled_state_config = 114 [lazy = true];</code>
     */
    perfetto.protos.AndroidPolledStateConfigOuterClass.AndroidPolledStateConfigOrBuilder getAndroidPolledStateConfigOrBuilder();

    /**
     * <pre>
     * Data source name: android.system_property
     * </pre>
     *
     * <code>optional .perfetto.protos.AndroidSystemPropertyConfig android_system_property_config = 118 [lazy = true];</code>
     * @return Whether the androidSystemPropertyConfig field is set.
     */
    boolean hasAndroidSystemPropertyConfig();
    /**
     * <pre>
     * Data source name: android.system_property
     * </pre>
     *
     * <code>optional .perfetto.protos.AndroidSystemPropertyConfig android_system_property_config = 118 [lazy = true];</code>
     * @return The androidSystemPropertyConfig.
     */
    perfetto.protos.AndroidSystemPropertyConfigOuterClass.AndroidSystemPropertyConfig getAndroidSystemPropertyConfig();
    /**
     * <pre>
     * Data source name: android.system_property
     * </pre>
     *
     * <code>optional .perfetto.protos.AndroidSystemPropertyConfig android_system_property_config = 118 [lazy = true];</code>
     */
    perfetto.protos.AndroidSystemPropertyConfigOuterClass.AndroidSystemPropertyConfigOrBuilder getAndroidSystemPropertyConfigOrBuilder();

    /**
     * <pre>
     * Data source name: android.statsd
     * </pre>
     *
     * <code>optional .perfetto.protos.StatsdTracingConfig statsd_tracing_config = 117 [lazy = true];</code>
     * @return Whether the statsdTracingConfig field is set.
     */
    boolean hasStatsdTracingConfig();
    /**
     * <pre>
     * Data source name: android.statsd
     * </pre>
     *
     * <code>optional .perfetto.protos.StatsdTracingConfig statsd_tracing_config = 117 [lazy = true];</code>
     * @return The statsdTracingConfig.
     */
    perfetto.protos.StatsdTracingConfigOuterClass.StatsdTracingConfig getStatsdTracingConfig();
    /**
     * <pre>
     * Data source name: android.statsd
     * </pre>
     *
     * <code>optional .perfetto.protos.StatsdTracingConfig statsd_tracing_config = 117 [lazy = true];</code>
     */
    perfetto.protos.StatsdTracingConfigOuterClass.StatsdTracingConfigOrBuilder getStatsdTracingConfigOrBuilder();

    /**
     * <pre>
     * Data source name: linux.system_info
     * </pre>
     *
     * <code>optional .perfetto.protos.SystemInfoConfig system_info_config = 119;</code>
     * @return Whether the systemInfoConfig field is set.
     */
    boolean hasSystemInfoConfig();
    /**
     * <pre>
     * Data source name: linux.system_info
     * </pre>
     *
     * <code>optional .perfetto.protos.SystemInfoConfig system_info_config = 119;</code>
     * @return The systemInfoConfig.
     */
    perfetto.protos.SystemInfo.SystemInfoConfig getSystemInfoConfig();
    /**
     * <pre>
     * Data source name: linux.system_info
     * </pre>
     *
     * <code>optional .perfetto.protos.SystemInfoConfig system_info_config = 119;</code>
     */
    perfetto.protos.SystemInfo.SystemInfoConfigOrBuilder getSystemInfoConfigOrBuilder();

    /**
     * <pre>
     * Chrome is special as it doesn't use the perfetto IPC layer. We want to
     * avoid proto serialization and de-serialization there because that would
     * just add extra hops on top of the Mojo ser/des. Instead we auto-generate a
     * C++ class for it so it can pass around plain C++ objets.
     * </pre>
     *
     * <code>optional .perfetto.protos.ChromeConfig chrome_config = 101;</code>
     * @return Whether the chromeConfig field is set.
     */
    boolean hasChromeConfig();
    /**
     * <pre>
     * Chrome is special as it doesn't use the perfetto IPC layer. We want to
     * avoid proto serialization and de-serialization there because that would
     * just add extra hops on top of the Mojo ser/des. Instead we auto-generate a
     * C++ class for it so it can pass around plain C++ objets.
     * </pre>
     *
     * <code>optional .perfetto.protos.ChromeConfig chrome_config = 101;</code>
     * @return The chromeConfig.
     */
    perfetto.protos.ChromeConfigOuterClass.ChromeConfig getChromeConfig();
    /**
     * <pre>
     * Chrome is special as it doesn't use the perfetto IPC layer. We want to
     * avoid proto serialization and de-serialization there because that would
     * just add extra hops on top of the Mojo ser/des. Instead we auto-generate a
     * C++ class for it so it can pass around plain C++ objets.
     * </pre>
     *
     * <code>optional .perfetto.protos.ChromeConfig chrome_config = 101;</code>
     */
    perfetto.protos.ChromeConfigOuterClass.ChromeConfigOrBuilder getChromeConfigOrBuilder();

    /**
     * <pre>
     * If an interceptor is specified here, packets for this data source will be
     * rerouted to the interceptor instead of the main trace buffer. This can be
     * used, for example, to write trace data into ETW or for logging trace points
     * to the console.
     * Note that interceptors are only supported by data sources registered
     * through the Perfetto SDK API. Data sources that don't use that API (e.g.,
     * traced_probes) may not support interception.
     * </pre>
     *
     * <code>optional .perfetto.protos.InterceptorConfig interceptor_config = 115;</code>
     * @return Whether the interceptorConfig field is set.
     */
    boolean hasInterceptorConfig();
    /**
     * <pre>
     * If an interceptor is specified here, packets for this data source will be
     * rerouted to the interceptor instead of the main trace buffer. This can be
     * used, for example, to write trace data into ETW or for logging trace points
     * to the console.
     * Note that interceptors are only supported by data sources registered
     * through the Perfetto SDK API. Data sources that don't use that API (e.g.,
     * traced_probes) may not support interception.
     * </pre>
     *
     * <code>optional .perfetto.protos.InterceptorConfig interceptor_config = 115;</code>
     * @return The interceptorConfig.
     */
    perfetto.protos.InterceptorConfigOuterClass.InterceptorConfig getInterceptorConfig();
    /**
     * <pre>
     * If an interceptor is specified here, packets for this data source will be
     * rerouted to the interceptor instead of the main trace buffer. This can be
     * used, for example, to write trace data into ETW or for logging trace points
     * to the console.
     * Note that interceptors are only supported by data sources registered
     * through the Perfetto SDK API. Data sources that don't use that API (e.g.,
     * traced_probes) may not support interception.
     * </pre>
     *
     * <code>optional .perfetto.protos.InterceptorConfig interceptor_config = 115;</code>
     */
    perfetto.protos.InterceptorConfigOuterClass.InterceptorConfigOrBuilder getInterceptorConfigOrBuilder();

    /**
     * <pre>
     * Data source name: android.network_packets.
     * Introduced in Android 14 (U).
     * </pre>
     *
     * <code>optional .perfetto.protos.NetworkPacketTraceConfig network_packet_trace_config = 120 [lazy = true];</code>
     * @return Whether the networkPacketTraceConfig field is set.
     */
    boolean hasNetworkPacketTraceConfig();
    /**
     * <pre>
     * Data source name: android.network_packets.
     * Introduced in Android 14 (U).
     * </pre>
     *
     * <code>optional .perfetto.protos.NetworkPacketTraceConfig network_packet_trace_config = 120 [lazy = true];</code>
     * @return The networkPacketTraceConfig.
     */
    perfetto.protos.NetworkTraceConfig.NetworkPacketTraceConfig getNetworkPacketTraceConfig();
    /**
     * <pre>
     * Data source name: android.network_packets.
     * Introduced in Android 14 (U).
     * </pre>
     *
     * <code>optional .perfetto.protos.NetworkPacketTraceConfig network_packet_trace_config = 120 [lazy = true];</code>
     */
    perfetto.protos.NetworkTraceConfig.NetworkPacketTraceConfigOrBuilder getNetworkPacketTraceConfigOrBuilder();

    /**
     * <pre>
     * This is a fallback mechanism to send a free-form text config to the
     * producer. In theory this should never be needed. All the code that
     * is part of the platform (i.e. traced service) is supposed to *not* truncate
     * the trace config proto and propagate unknown fields. However, if anything
     * in the pipeline (client or backend) ends up breaking this forward compat
     * plan, this field will become the escape hatch to allow future data sources
     * to get some meaningful configuration.
     * </pre>
     *
     * <code>optional string legacy_config = 1000;</code>
     * @return Whether the legacyConfig field is set.
     */
    boolean hasLegacyConfig();
    /**
     * <pre>
     * This is a fallback mechanism to send a free-form text config to the
     * producer. In theory this should never be needed. All the code that
     * is part of the platform (i.e. traced service) is supposed to *not* truncate
     * the trace config proto and propagate unknown fields. However, if anything
     * in the pipeline (client or backend) ends up breaking this forward compat
     * plan, this field will become the escape hatch to allow future data sources
     * to get some meaningful configuration.
     * </pre>
     *
     * <code>optional string legacy_config = 1000;</code>
     * @return The legacyConfig.
     */
    java.lang.String getLegacyConfig();
    /**
     * <pre>
     * This is a fallback mechanism to send a free-form text config to the
     * producer. In theory this should never be needed. All the code that
     * is part of the platform (i.e. traced service) is supposed to *not* truncate
     * the trace config proto and propagate unknown fields. However, if anything
     * in the pipeline (client or backend) ends up breaking this forward compat
     * plan, this field will become the escape hatch to allow future data sources
     * to get some meaningful configuration.
     * </pre>
     *
     * <code>optional string legacy_config = 1000;</code>
     * @return The bytes for legacyConfig.
     */
    com.google.protobuf.ByteString
        getLegacyConfigBytes();

    /**
     * <pre>
     * This field is only used for testing.
     * </pre>
     *
     * <code>optional .perfetto.protos.TestConfig for_testing = 1001;</code>
     * @return Whether the forTesting field is set.
     */
    boolean hasForTesting();
    /**
     * <pre>
     * This field is only used for testing.
     * </pre>
     *
     * <code>optional .perfetto.protos.TestConfig for_testing = 1001;</code>
     * @return The forTesting.
     */
    perfetto.protos.TestConfigOuterClass.TestConfig getForTesting();
    /**
     * <pre>
     * This field is only used for testing.
     * </pre>
     *
     * <code>optional .perfetto.protos.TestConfig for_testing = 1001;</code>
     */
    perfetto.protos.TestConfigOuterClass.TestConfigOrBuilder getForTestingOrBuilder();
  }
  /**
   * <pre>
   * The configuration that is passed to each data source when starting tracing.
   * Next id: 121
   * </pre>
   *
   * Protobuf type {@code perfetto.protos.DataSourceConfig}
   */
  public static final class DataSourceConfig extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:perfetto.protos.DataSourceConfig)
      DataSourceConfigOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use DataSourceConfig.newBuilder() to construct.
    private DataSourceConfig(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private DataSourceConfig() {
      name_ = "";
      sessionInitiator_ = 0;
      legacyConfig_ = "";
    }

    @java.lang.Override
    @SuppressWarnings({"unused"})
    protected java.lang.Object newInstance(
        UnusedPrivateParameter unused) {
      return new DataSourceConfig();
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return perfetto.protos.DataSourceConfigOuterClass.internal_static_perfetto_protos_DataSourceConfig_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return perfetto.protos.DataSourceConfigOuterClass.internal_static_perfetto_protos_DataSourceConfig_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              perfetto.protos.DataSourceConfigOuterClass.DataSourceConfig.class, perfetto.protos.DataSourceConfigOuterClass.DataSourceConfig.Builder.class);
    }

    /**
     * Protobuf enum {@code perfetto.protos.DataSourceConfig.SessionInitiator}
     */
    public enum SessionInitiator
        implements com.google.protobuf.ProtocolMessageEnum {
      /**
       * <code>SESSION_INITIATOR_UNSPECIFIED = 0;</code>
       */
      SESSION_INITIATOR_UNSPECIFIED(0),
      /**
       * <pre>
       * This trace was initiated from a trusted system app has DUMP and
       * USAGE_STATS permission. This system app is expected to not expose the
       * trace to the user of the device.
       * This is determined by checking the UID initiating the trace.
       * </pre>
       *
       * <code>SESSION_INITIATOR_TRUSTED_SYSTEM = 1;</code>
       */
      SESSION_INITIATOR_TRUSTED_SYSTEM(1),
      ;

      /**
       * <code>SESSION_INITIATOR_UNSPECIFIED = 0;</code>
       */
      public static final int SESSION_INITIATOR_UNSPECIFIED_VALUE = 0;
      /**
       * <pre>
       * This trace was initiated from a trusted system app has DUMP and
       * USAGE_STATS permission. This system app is expected to not expose the
       * trace to the user of the device.
       * This is determined by checking the UID initiating the trace.
       * </pre>
       *
       * <code>SESSION_INITIATOR_TRUSTED_SYSTEM = 1;</code>
       */
      public static final int SESSION_INITIATOR_TRUSTED_SYSTEM_VALUE = 1;


      public final int getNumber() {
        return value;
      }

      /**
       * @param value The numeric wire value of the corresponding enum entry.
       * @return The enum associated with the given numeric wire value.
       * @deprecated Use {@link #forNumber(int)} instead.
       */
      @java.lang.Deprecated
      public static SessionInitiator valueOf(int value) {
        return forNumber(value);
      }

      /**
       * @param value The numeric wire value of the corresponding enum entry.
       * @return The enum associated with the given numeric wire value.
       */
      public static SessionInitiator forNumber(int value) {
        switch (value) {
          case 0: return SESSION_INITIATOR_UNSPECIFIED;
          case 1: return SESSION_INITIATOR_TRUSTED_SYSTEM;
          default: return null;
        }
      }

      public static com.google.protobuf.Internal.EnumLiteMap<SessionInitiator>
          internalGetValueMap() {
        return internalValueMap;
      }
      private static final com.google.protobuf.Internal.EnumLiteMap<
          SessionInitiator> internalValueMap =
            new com.google.protobuf.Internal.EnumLiteMap<SessionInitiator>() {
              public SessionInitiator findValueByNumber(int number) {
                return SessionInitiator.forNumber(number);
              }
            };

      public final com.google.protobuf.Descriptors.EnumValueDescriptor
          getValueDescriptor() {
        return getDescriptor().getValues().get(ordinal());
      }
      public final com.google.protobuf.Descriptors.EnumDescriptor
          getDescriptorForType() {
        return getDescriptor();
      }
      public static final com.google.protobuf.Descriptors.EnumDescriptor
          getDescriptor() {
        return perfetto.protos.DataSourceConfigOuterClass.DataSourceConfig.getDescriptor().getEnumTypes().get(0);
      }

      private static final SessionInitiator[] VALUES = values();

      public static SessionInitiator valueOf(
          com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
        if (desc.getType() != getDescriptor()) {
          throw new java.lang.IllegalArgumentException(
            "EnumValueDescriptor is not for this type.");
        }
        return VALUES[desc.getIndex()];
      }

      private final int value;

      private SessionInitiator(int value) {
        this.value = value;
      }

      // @@protoc_insertion_point(enum_scope:perfetto.protos.DataSourceConfig.SessionInitiator)
    }

    private int bitField0_;
    public static final int NAME_FIELD_NUMBER = 1;
    @SuppressWarnings("serial")
    private volatile java.lang.Object name_ = "";
    /**
     * <pre>
     * Data source unique name, e.g., "linux.ftrace". This must match
     * the name passed by the data source when it registers (see
     * RegisterDataSource()).
     * </pre>
     *
     * <code>optional string name = 1;</code>
     * @return Whether the name field is set.
     */
    @java.lang.Override
    public boolean hasName() {
      return ((bitField0_ & 0x00000001) != 0);
    }
    /**
     * <pre>
     * Data source unique name, e.g., "linux.ftrace". This must match
     * the name passed by the data source when it registers (see
     * RegisterDataSource()).
     * </pre>
     *
     * <code>optional string name = 1;</code>
     * @return The name.
     */
    @java.lang.Override
    public java.lang.String getName() {
      java.lang.Object ref = name_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        if (bs.isValidUtf8()) {
          name_ = s;
        }
        return s;
      }
    }
    /**
     * <pre>
     * Data source unique name, e.g., "linux.ftrace". This must match
     * the name passed by the data source when it registers (see
     * RegisterDataSource()).
     * </pre>
     *
     * <code>optional string name = 1;</code>
     * @return The bytes for name.
     */
    @java.lang.Override
    public com.google.protobuf.ByteString
        getNameBytes() {
      java.lang.Object ref = name_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        name_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    public static final int TARGET_BUFFER_FIELD_NUMBER = 2;
    private int targetBuffer_ = 0;
    /**
     * <pre>
     * The index of the logging buffer where TracePacket(s) will be stored.
     * This field doesn't make a major difference for the Producer(s). The final
     * logging buffers, in fact, are completely owned by the Service. We just ask
     * the Producer to copy this number into the chunk headers it emits, so that
     * the Service can quickly identify the buffer where to move the chunks into
     * without expensive lookups on its fastpath.
     * </pre>
     *
     * <code>optional uint32 target_buffer = 2;</code>
     * @return Whether the targetBuffer field is set.
     */
    @java.lang.Override
    public boolean hasTargetBuffer() {
      return ((bitField0_ & 0x00000002) != 0);
    }
    /**
     * <pre>
     * The index of the logging buffer where TracePacket(s) will be stored.
     * This field doesn't make a major difference for the Producer(s). The final
     * logging buffers, in fact, are completely owned by the Service. We just ask
     * the Producer to copy this number into the chunk headers it emits, so that
     * the Service can quickly identify the buffer where to move the chunks into
     * without expensive lookups on its fastpath.
     * </pre>
     *
     * <code>optional uint32 target_buffer = 2;</code>
     * @return The targetBuffer.
     */
    @java.lang.Override
    public int getTargetBuffer() {
      return targetBuffer_;
    }

    public static final int TRACE_DURATION_MS_FIELD_NUMBER = 3;
    private int traceDurationMs_ = 0;
    /**
     * <pre>
     * Set by the service to indicate the duration of the trace.
     * DO NOT SET in consumer as this will be overridden by the service.
     * </pre>
     *
     * <code>optional uint32 trace_duration_ms = 3;</code>
     * @return Whether the traceDurationMs field is set.
     */
    @java.lang.Override
    public boolean hasTraceDurationMs() {
      return ((bitField0_ & 0x00000004) != 0);
    }
    /**
     * <pre>
     * Set by the service to indicate the duration of the trace.
     * DO NOT SET in consumer as this will be overridden by the service.
     * </pre>
     *
     * <code>optional uint32 trace_duration_ms = 3;</code>
     * @return The traceDurationMs.
     */
    @java.lang.Override
    public int getTraceDurationMs() {
      return traceDurationMs_;
    }

    public static final int STOP_TIMEOUT_MS_FIELD_NUMBER = 7;
    private int stopTimeoutMs_ = 0;
    /**
     * <pre>
     * Set by the service to indicate how long it waits after StopDataSource.
     * DO NOT SET in consumer as this will be overridden by the service.
     * </pre>
     *
     * <code>optional uint32 stop_timeout_ms = 7;</code>
     * @return Whether the stopTimeoutMs field is set.
     */
    @java.lang.Override
    public boolean hasStopTimeoutMs() {
      return ((bitField0_ & 0x00000008) != 0);
    }
    /**
     * <pre>
     * Set by the service to indicate how long it waits after StopDataSource.
     * DO NOT SET in consumer as this will be overridden by the service.
     * </pre>
     *
     * <code>optional uint32 stop_timeout_ms = 7;</code>
     * @return The stopTimeoutMs.
     */
    @java.lang.Override
    public int getStopTimeoutMs() {
      return stopTimeoutMs_;
    }

    public static final int ENABLE_EXTRA_GUARDRAILS_FIELD_NUMBER = 6;
    private boolean enableExtraGuardrails_ = false;
    /**
     * <pre>
     * Set by the service to indicate whether this tracing session has extra
     * guardrails.
     * DO NOT SET in consumer as this will be overridden by the service.
     * </pre>
     *
     * <code>optional bool enable_extra_guardrails = 6;</code>
     * @return Whether the enableExtraGuardrails field is set.
     */
    @java.lang.Override
    public boolean hasEnableExtraGuardrails() {
      return ((bitField0_ & 0x00000010) != 0);
    }
    /**
     * <pre>
     * Set by the service to indicate whether this tracing session has extra
     * guardrails.
     * DO NOT SET in consumer as this will be overridden by the service.
     * </pre>
     *
     * <code>optional bool enable_extra_guardrails = 6;</code>
     * @return The enableExtraGuardrails.
     */
    @java.lang.Override
    public boolean getEnableExtraGuardrails() {
      return enableExtraGuardrails_;
    }

    public static final int SESSION_INITIATOR_FIELD_NUMBER = 8;
    private int sessionInitiator_ = 0;
    /**
     * <pre>
     * Set by the service to indicate which user initiated this trace.
     * DO NOT SET in consumer as this will be overridden by the service.
     * </pre>
     *
     * <code>optional .perfetto.protos.DataSourceConfig.SessionInitiator session_initiator = 8;</code>
     * @return Whether the sessionInitiator field is set.
     */
    @java.lang.Override public boolean hasSessionInitiator() {
      return ((bitField0_ & 0x00000020) != 0);
    }
    /**
     * <pre>
     * Set by the service to indicate which user initiated this trace.
     * DO NOT SET in consumer as this will be overridden by the service.
     * </pre>
     *
     * <code>optional .perfetto.protos.DataSourceConfig.SessionInitiator session_initiator = 8;</code>
     * @return The sessionInitiator.
     */
    @java.lang.Override public perfetto.protos.DataSourceConfigOuterClass.DataSourceConfig.SessionInitiator getSessionInitiator() {
      perfetto.protos.DataSourceConfigOuterClass.DataSourceConfig.SessionInitiator result = perfetto.protos.DataSourceConfigOuterClass.DataSourceConfig.SessionInitiator.forNumber(sessionInitiator_);
      return result == null ? perfetto.protos.DataSourceConfigOuterClass.DataSourceConfig.SessionInitiator.SESSION_INITIATOR_UNSPECIFIED : result;
    }

    public static final int TRACING_SESSION_ID_FIELD_NUMBER = 4;
    private long tracingSessionId_ = 0L;
    /**
     * <pre>
     * Set by the service to indicate which tracing session the data source
     * belongs to. The intended use case for this is checking if two data sources,
     * one of which produces metadata for the other one, belong to the same trace
     * session and hence should be linked together.
     * This field was introduced in Aug 2018 after Android P.
     * DO NOT SET in consumer as this will be overridden by the service.
     * </pre>
     *
     * <code>optional uint64 tracing_session_id = 4;</code>
     * @return Whether the tracingSessionId field is set.
     */
    @java.lang.Override
    public boolean hasTracingSessionId() {
      return ((bitField0_ & 0x00000040) != 0);
    }
    /**
     * <pre>
     * Set by the service to indicate which tracing session the data source
     * belongs to. The intended use case for this is checking if two data sources,
     * one of which produces metadata for the other one, belong to the same trace
     * session and hence should be linked together.
     * This field was introduced in Aug 2018 after Android P.
     * DO NOT SET in consumer as this will be overridden by the service.
     * </pre>
     *
     * <code>optional uint64 tracing_session_id = 4;</code>
     * @return The tracingSessionId.
     */
    @java.lang.Override
    public long getTracingSessionId() {
      return tracingSessionId_;
    }

    public static final int FTRACE_CONFIG_FIELD_NUMBER = 100;
    private perfetto.protos.FtraceConfigOuterClass.FtraceConfig ftraceConfig_;
    /**
     * <pre>
     * Data source name: linux.ftrace
     * </pre>
     *
     * <code>optional .perfetto.protos.FtraceConfig ftrace_config = 100 [lazy = true];</code>
     * @return Whether the ftraceConfig field is set.
     */
    @java.lang.Override
    public boolean hasFtraceConfig() {
      return ((bitField0_ & 0x00000080) != 0);
    }
    /**
     * <pre>
     * Data source name: linux.ftrace
     * </pre>
     *
     * <code>optional .perfetto.protos.FtraceConfig ftrace_config = 100 [lazy = true];</code>
     * @return The ftraceConfig.
     */
    @java.lang.Override
    public perfetto.protos.FtraceConfigOuterClass.FtraceConfig getFtraceConfig() {
      return ftraceConfig_ == null ? perfetto.protos.FtraceConfigOuterClass.FtraceConfig.getDefaultInstance() : ftraceConfig_;
    }
    /**
     * <pre>
     * Data source name: linux.ftrace
     * </pre>
     *
     * <code>optional .perfetto.protos.FtraceConfig ftrace_config = 100 [lazy = true];</code>
     */
    @java.lang.Override
    public perfetto.protos.FtraceConfigOuterClass.FtraceConfigOrBuilder getFtraceConfigOrBuilder() {
      return ftraceConfig_ == null ? perfetto.protos.FtraceConfigOuterClass.FtraceConfig.getDefaultInstance() : ftraceConfig_;
    }

    public static final int INODE_FILE_CONFIG_FIELD_NUMBER = 102;
    private perfetto.protos.InodeFileConfigOuterClass.InodeFileConfig inodeFileConfig_;
    /**
     * <pre>
     * Data source name: linux.inode_file_map
     * </pre>
     *
     * <code>optional .perfetto.protos.InodeFileConfig inode_file_config = 102 [lazy = true];</code>
     * @return Whether the inodeFileConfig field is set.
     */
    @java.lang.Override
    public boolean hasInodeFileConfig() {
      return ((bitField0_ & 0x00000100) != 0);
    }
    /**
     * <pre>
     * Data source name: linux.inode_file_map
     * </pre>
     *
     * <code>optional .perfetto.protos.InodeFileConfig inode_file_config = 102 [lazy = true];</code>
     * @return The inodeFileConfig.
     */
    @java.lang.Override
    public perfetto.protos.InodeFileConfigOuterClass.InodeFileConfig getInodeFileConfig() {
      return inodeFileConfig_ == null ? perfetto.protos.InodeFileConfigOuterClass.InodeFileConfig.getDefaultInstance() : inodeFileConfig_;
    }
    /**
     * <pre>
     * Data source name: linux.inode_file_map
     * </pre>
     *
     * <code>optional .perfetto.protos.InodeFileConfig inode_file_config = 102 [lazy = true];</code>
     */
    @java.lang.Override
    public perfetto.protos.InodeFileConfigOuterClass.InodeFileConfigOrBuilder getInodeFileConfigOrBuilder() {
      return inodeFileConfig_ == null ? perfetto.protos.InodeFileConfigOuterClass.InodeFileConfig.getDefaultInstance() : inodeFileConfig_;
    }

    public static final int PROCESS_STATS_CONFIG_FIELD_NUMBER = 103;
    private perfetto.protos.ProcessStatsConfigOuterClass.ProcessStatsConfig processStatsConfig_;
    /**
     * <pre>
     * Data source name: linux.process_stats
     * </pre>
     *
     * <code>optional .perfetto.protos.ProcessStatsConfig process_stats_config = 103 [lazy = true];</code>
     * @return Whether the processStatsConfig field is set.
     */
    @java.lang.Override
    public boolean hasProcessStatsConfig() {
      return ((bitField0_ & 0x00000200) != 0);
    }
    /**
     * <pre>
     * Data source name: linux.process_stats
     * </pre>
     *
     * <code>optional .perfetto.protos.ProcessStatsConfig process_stats_config = 103 [lazy = true];</code>
     * @return The processStatsConfig.
     */
    @java.lang.Override
    public perfetto.protos.ProcessStatsConfigOuterClass.ProcessStatsConfig getProcessStatsConfig() {
      return processStatsConfig_ == null ? perfetto.protos.ProcessStatsConfigOuterClass.ProcessStatsConfig.getDefaultInstance() : processStatsConfig_;
    }
    /**
     * <pre>
     * Data source name: linux.process_stats
     * </pre>
     *
     * <code>optional .perfetto.protos.ProcessStatsConfig process_stats_config = 103 [lazy = true];</code>
     */
    @java.lang.Override
    public perfetto.protos.ProcessStatsConfigOuterClass.ProcessStatsConfigOrBuilder getProcessStatsConfigOrBuilder() {
      return processStatsConfig_ == null ? perfetto.protos.ProcessStatsConfigOuterClass.ProcessStatsConfig.getDefaultInstance() : processStatsConfig_;
    }

    public static final int SYS_STATS_CONFIG_FIELD_NUMBER = 104;
    private perfetto.protos.SysStatsConfigOuterClass.SysStatsConfig sysStatsConfig_;
    /**
     * <pre>
     * Data source name: linux.sys_stats
     * </pre>
     *
     * <code>optional .perfetto.protos.SysStatsConfig sys_stats_config = 104 [lazy = true];</code>
     * @return Whether the sysStatsConfig field is set.
     */
    @java.lang.Override
    public boolean hasSysStatsConfig() {
      return ((bitField0_ & 0x00000400) != 0);
    }
    /**
     * <pre>
     * Data source name: linux.sys_stats
     * </pre>
     *
     * <code>optional .perfetto.protos.SysStatsConfig sys_stats_config = 104 [lazy = true];</code>
     * @return The sysStatsConfig.
     */
    @java.lang.Override
    public perfetto.protos.SysStatsConfigOuterClass.SysStatsConfig getSysStatsConfig() {
      return sysStatsConfig_ == null ? perfetto.protos.SysStatsConfigOuterClass.SysStatsConfig.getDefaultInstance() : sysStatsConfig_;
    }
    /**
     * <pre>
     * Data source name: linux.sys_stats
     * </pre>
     *
     * <code>optional .perfetto.protos.SysStatsConfig sys_stats_config = 104 [lazy = true];</code>
     */
    @java.lang.Override
    public perfetto.protos.SysStatsConfigOuterClass.SysStatsConfigOrBuilder getSysStatsConfigOrBuilder() {
      return sysStatsConfig_ == null ? perfetto.protos.SysStatsConfigOuterClass.SysStatsConfig.getDefaultInstance() : sysStatsConfig_;
    }

    public static final int HEAPPROFD_CONFIG_FIELD_NUMBER = 105;
    private perfetto.protos.HeapprofdConfigOuterClass.HeapprofdConfig heapprofdConfig_;
    /**
     * <pre>
     * Data source name: android.heapprofd
     * Introduced in Android 10.
     * </pre>
     *
     * <code>optional .perfetto.protos.HeapprofdConfig heapprofd_config = 105 [lazy = true];</code>
     * @return Whether the heapprofdConfig field is set.
     */
    @java.lang.Override
    public boolean hasHeapprofdConfig() {
      return ((bitField0_ & 0x00000800) != 0);
    }
    /**
     * <pre>
     * Data source name: android.heapprofd
     * Introduced in Android 10.
     * </pre>
     *
     * <code>optional .perfetto.protos.HeapprofdConfig heapprofd_config = 105 [lazy = true];</code>
     * @return The heapprofdConfig.
     */
    @java.lang.Override
    public perfetto.protos.HeapprofdConfigOuterClass.HeapprofdConfig getHeapprofdConfig() {
      return heapprofdConfig_ == null ? perfetto.protos.HeapprofdConfigOuterClass.HeapprofdConfig.getDefaultInstance() : heapprofdConfig_;
    }
    /**
     * <pre>
     * Data source name: android.heapprofd
     * Introduced in Android 10.
     * </pre>
     *
     * <code>optional .perfetto.protos.HeapprofdConfig heapprofd_config = 105 [lazy = true];</code>
     */
    @java.lang.Override
    public perfetto.protos.HeapprofdConfigOuterClass.HeapprofdConfigOrBuilder getHeapprofdConfigOrBuilder() {
      return heapprofdConfig_ == null ? perfetto.protos.HeapprofdConfigOuterClass.HeapprofdConfig.getDefaultInstance() : heapprofdConfig_;
    }

    public static final int JAVA_HPROF_CONFIG_FIELD_NUMBER = 110;
    private perfetto.protos.JavaHprofConfigOuterClass.JavaHprofConfig javaHprofConfig_;
    /**
     * <pre>
     * Data source name: android.java_hprof
     * Introduced in Android 11.
     * </pre>
     *
     * <code>optional .perfetto.protos.JavaHprofConfig java_hprof_config = 110 [lazy = true];</code>
     * @return Whether the javaHprofConfig field is set.
     */
    @java.lang.Override
    public boolean hasJavaHprofConfig() {
      return ((bitField0_ & 0x00001000) != 0);
    }
    /**
     * <pre>
     * Data source name: android.java_hprof
     * Introduced in Android 11.
     * </pre>
     *
     * <code>optional .perfetto.protos.JavaHprofConfig java_hprof_config = 110 [lazy = true];</code>
     * @return The javaHprofConfig.
     */
    @java.lang.Override
    public perfetto.protos.JavaHprofConfigOuterClass.JavaHprofConfig getJavaHprofConfig() {
      return javaHprofConfig_ == null ? perfetto.protos.JavaHprofConfigOuterClass.JavaHprofConfig.getDefaultInstance() : javaHprofConfig_;
    }
    /**
     * <pre>
     * Data source name: android.java_hprof
     * Introduced in Android 11.
     * </pre>
     *
     * <code>optional .perfetto.protos.JavaHprofConfig java_hprof_config = 110 [lazy = true];</code>
     */
    @java.lang.Override
    public perfetto.protos.JavaHprofConfigOuterClass.JavaHprofConfigOrBuilder getJavaHprofConfigOrBuilder() {
      return javaHprofConfig_ == null ? perfetto.protos.JavaHprofConfigOuterClass.JavaHprofConfig.getDefaultInstance() : javaHprofConfig_;
    }

    public static final int ANDROID_POWER_CONFIG_FIELD_NUMBER = 106;
    private perfetto.protos.AndroidPowerConfigOuterClass.AndroidPowerConfig androidPowerConfig_;
    /**
     * <pre>
     * Data source name: android.power
     * </pre>
     *
     * <code>optional .perfetto.protos.AndroidPowerConfig android_power_config = 106 [lazy = true];</code>
     * @return Whether the androidPowerConfig field is set.
     */
    @java.lang.Override
    public boolean hasAndroidPowerConfig() {
      return ((bitField0_ & 0x00002000) != 0);
    }
    /**
     * <pre>
     * Data source name: android.power
     * </pre>
     *
     * <code>optional .perfetto.protos.AndroidPowerConfig android_power_config = 106 [lazy = true];</code>
     * @return The androidPowerConfig.
     */
    @java.lang.Override
    public perfetto.protos.AndroidPowerConfigOuterClass.AndroidPowerConfig getAndroidPowerConfig() {
      return androidPowerConfig_ == null ? perfetto.protos.AndroidPowerConfigOuterClass.AndroidPowerConfig.getDefaultInstance() : androidPowerConfig_;
    }
    /**
     * <pre>
     * Data source name: android.power
     * </pre>
     *
     * <code>optional .perfetto.protos.AndroidPowerConfig android_power_config = 106 [lazy = true];</code>
     */
    @java.lang.Override
    public perfetto.protos.AndroidPowerConfigOuterClass.AndroidPowerConfigOrBuilder getAndroidPowerConfigOrBuilder() {
      return androidPowerConfig_ == null ? perfetto.protos.AndroidPowerConfigOuterClass.AndroidPowerConfig.getDefaultInstance() : androidPowerConfig_;
    }

    public static final int ANDROID_LOG_CONFIG_FIELD_NUMBER = 107;
    private perfetto.protos.AndroidLogConfigOuterClass.AndroidLogConfig androidLogConfig_;
    /**
     * <pre>
     * Data source name: android.log
     * </pre>
     *
     * <code>optional .perfetto.protos.AndroidLogConfig android_log_config = 107 [lazy = true];</code>
     * @return Whether the androidLogConfig field is set.
     */
    @java.lang.Override
    public boolean hasAndroidLogConfig() {
      return ((bitField0_ & 0x00004000) != 0);
    }
    /**
     * <pre>
     * Data source name: android.log
     * </pre>
     *
     * <code>optional .perfetto.protos.AndroidLogConfig android_log_config = 107 [lazy = true];</code>
     * @return The androidLogConfig.
     */
    @java.lang.Override
    public perfetto.protos.AndroidLogConfigOuterClass.AndroidLogConfig getAndroidLogConfig() {
      return androidLogConfig_ == null ? perfetto.protos.AndroidLogConfigOuterClass.AndroidLogConfig.getDefaultInstance() : androidLogConfig_;
    }
    /**
     * <pre>
     * Data source name: android.log
     * </pre>
     *
     * <code>optional .perfetto.protos.AndroidLogConfig android_log_config = 107 [lazy = true];</code>
     */
    @java.lang.Override
    public perfetto.protos.AndroidLogConfigOuterClass.AndroidLogConfigOrBuilder getAndroidLogConfigOrBuilder() {
      return androidLogConfig_ == null ? perfetto.protos.AndroidLogConfigOuterClass.AndroidLogConfig.getDefaultInstance() : androidLogConfig_;
    }

    public static final int GPU_COUNTER_CONFIG_FIELD_NUMBER = 108;
    private perfetto.protos.GpuCounterConfigOuterClass.GpuCounterConfig gpuCounterConfig_;
    /**
     * <pre>
     * TODO(fmayer): Add data source name for this.
     * </pre>
     *
     * <code>optional .perfetto.protos.GpuCounterConfig gpu_counter_config = 108 [lazy = true];</code>
     * @return Whether the gpuCounterConfig field is set.
     */
    @java.lang.Override
    public boolean hasGpuCounterConfig() {
      return ((bitField0_ & 0x00008000) != 0);
    }
    /**
     * <pre>
     * TODO(fmayer): Add data source name for this.
     * </pre>
     *
     * <code>optional .perfetto.protos.GpuCounterConfig gpu_counter_config = 108 [lazy = true];</code>
     * @return The gpuCounterConfig.
     */
    @java.lang.Override
    public perfetto.protos.GpuCounterConfigOuterClass.GpuCounterConfig getGpuCounterConfig() {
      return gpuCounterConfig_ == null ? perfetto.protos.GpuCounterConfigOuterClass.GpuCounterConfig.getDefaultInstance() : gpuCounterConfig_;
    }
    /**
     * <pre>
     * TODO(fmayer): Add data source name for this.
     * </pre>
     *
     * <code>optional .perfetto.protos.GpuCounterConfig gpu_counter_config = 108 [lazy = true];</code>
     */
    @java.lang.Override
    public perfetto.protos.GpuCounterConfigOuterClass.GpuCounterConfigOrBuilder getGpuCounterConfigOrBuilder() {
      return gpuCounterConfig_ == null ? perfetto.protos.GpuCounterConfigOuterClass.GpuCounterConfig.getDefaultInstance() : gpuCounterConfig_;
    }

    public static final int ANDROID_GAME_INTERVENTION_LIST_CONFIG_FIELD_NUMBER = 116;
    private perfetto.protos.AndroidGameInterventionListConfigOuterClass.AndroidGameInterventionListConfig androidGameInterventionListConfig_;
    /**
     * <pre>
     * Data source name: android.game_interventions
     * </pre>
     *
     * <code>optional .perfetto.protos.AndroidGameInterventionListConfig android_game_intervention_list_config = 116 [lazy = true];</code>
     * @return Whether the androidGameInterventionListConfig field is set.
     */
    @java.lang.Override
    public boolean hasAndroidGameInterventionListConfig() {
      return ((bitField0_ & 0x00010000) != 0);
    }
    /**
     * <pre>
     * Data source name: android.game_interventions
     * </pre>
     *
     * <code>optional .perfetto.protos.AndroidGameInterventionListConfig android_game_intervention_list_config = 116 [lazy = true];</code>
     * @return The androidGameInterventionListConfig.
     */
    @java.lang.Override
    public perfetto.protos.AndroidGameInterventionListConfigOuterClass.AndroidGameInterventionListConfig getAndroidGameInterventionListConfig() {
      return androidGameInterventionListConfig_ == null ? perfetto.protos.AndroidGameInterventionListConfigOuterClass.AndroidGameInterventionListConfig.getDefaultInstance() : androidGameInterventionListConfig_;
    }
    /**
     * <pre>
     * Data source name: android.game_interventions
     * </pre>
     *
     * <code>optional .perfetto.protos.AndroidGameInterventionListConfig android_game_intervention_list_config = 116 [lazy = true];</code>
     */
    @java.lang.Override
    public perfetto.protos.AndroidGameInterventionListConfigOuterClass.AndroidGameInterventionListConfigOrBuilder getAndroidGameInterventionListConfigOrBuilder() {
      return androidGameInterventionListConfig_ == null ? perfetto.protos.AndroidGameInterventionListConfigOuterClass.AndroidGameInterventionListConfig.getDefaultInstance() : androidGameInterventionListConfig_;
    }

    public static final int PACKAGES_LIST_CONFIG_FIELD_NUMBER = 109;
    private perfetto.protos.PackagesListConfigOuterClass.PackagesListConfig packagesListConfig_;
    /**
     * <pre>
     * Data source name: android.packages_list
     * </pre>
     *
     * <code>optional .perfetto.protos.PackagesListConfig packages_list_config = 109 [lazy = true];</code>
     * @return Whether the packagesListConfig field is set.
     */
    @java.lang.Override
    public boolean hasPackagesListConfig() {
      return ((bitField0_ & 0x00020000) != 0);
    }
    /**
     * <pre>
     * Data source name: android.packages_list
     * </pre>
     *
     * <code>optional .perfetto.protos.PackagesListConfig packages_list_config = 109 [lazy = true];</code>
     * @return The packagesListConfig.
     */
    @java.lang.Override
    public perfetto.protos.PackagesListConfigOuterClass.PackagesListConfig getPackagesListConfig() {
      return packagesListConfig_ == null ? perfetto.protos.PackagesListConfigOuterClass.PackagesListConfig.getDefaultInstance() : packagesListConfig_;
    }
    /**
     * <pre>
     * Data source name: android.packages_list
     * </pre>
     *
     * <code>optional .perfetto.protos.PackagesListConfig packages_list_config = 109 [lazy = true];</code>
     */
    @java.lang.Override
    public perfetto.protos.PackagesListConfigOuterClass.PackagesListConfigOrBuilder getPackagesListConfigOrBuilder() {
      return packagesListConfig_ == null ? perfetto.protos.PackagesListConfigOuterClass.PackagesListConfig.getDefaultInstance() : packagesListConfig_;
    }

    public static final int PERF_EVENT_CONFIG_FIELD_NUMBER = 111;
    private perfetto.protos.PerfEventConfigOuterClass.PerfEventConfig perfEventConfig_;
    /**
     * <pre>
     * Data source name: linux.perf
     * </pre>
     *
     * <code>optional .perfetto.protos.PerfEventConfig perf_event_config = 111 [lazy = true];</code>
     * @return Whether the perfEventConfig field is set.
     */
    @java.lang.Override
    public boolean hasPerfEventConfig() {
      return ((bitField0_ & 0x00040000) != 0);
    }
    /**
     * <pre>
     * Data source name: linux.perf
     * </pre>
     *
     * <code>optional .perfetto.protos.PerfEventConfig perf_event_config = 111 [lazy = true];</code>
     * @return The perfEventConfig.
     */
    @java.lang.Override
    public perfetto.protos.PerfEventConfigOuterClass.PerfEventConfig getPerfEventConfig() {
      return perfEventConfig_ == null ? perfetto.protos.PerfEventConfigOuterClass.PerfEventConfig.getDefaultInstance() : perfEventConfig_;
    }
    /**
     * <pre>
     * Data source name: linux.perf
     * </pre>
     *
     * <code>optional .perfetto.protos.PerfEventConfig perf_event_config = 111 [lazy = true];</code>
     */
    @java.lang.Override
    public perfetto.protos.PerfEventConfigOuterClass.PerfEventConfigOrBuilder getPerfEventConfigOrBuilder() {
      return perfEventConfig_ == null ? perfetto.protos.PerfEventConfigOuterClass.PerfEventConfig.getDefaultInstance() : perfEventConfig_;
    }

    public static final int VULKAN_MEMORY_CONFIG_FIELD_NUMBER = 112;
    private perfetto.protos.VulkanMemoryConfigOuterClass.VulkanMemoryConfig vulkanMemoryConfig_;
    /**
     * <pre>
     * Data source name: vulkan.memory_tracker
     * </pre>
     *
     * <code>optional .perfetto.protos.VulkanMemoryConfig vulkan_memory_config = 112 [lazy = true];</code>
     * @return Whether the vulkanMemoryConfig field is set.
     */
    @java.lang.Override
    public boolean hasVulkanMemoryConfig() {
      return ((bitField0_ & 0x00080000) != 0);
    }
    /**
     * <pre>
     * Data source name: vulkan.memory_tracker
     * </pre>
     *
     * <code>optional .perfetto.protos.VulkanMemoryConfig vulkan_memory_config = 112 [lazy = true];</code>
     * @return The vulkanMemoryConfig.
     */
    @java.lang.Override
    public perfetto.protos.VulkanMemoryConfigOuterClass.VulkanMemoryConfig getVulkanMemoryConfig() {
      return vulkanMemoryConfig_ == null ? perfetto.protos.VulkanMemoryConfigOuterClass.VulkanMemoryConfig.getDefaultInstance() : vulkanMemoryConfig_;
    }
    /**
     * <pre>
     * Data source name: vulkan.memory_tracker
     * </pre>
     *
     * <code>optional .perfetto.protos.VulkanMemoryConfig vulkan_memory_config = 112 [lazy = true];</code>
     */
    @java.lang.Override
    public perfetto.protos.VulkanMemoryConfigOuterClass.VulkanMemoryConfigOrBuilder getVulkanMemoryConfigOrBuilder() {
      return vulkanMemoryConfig_ == null ? perfetto.protos.VulkanMemoryConfigOuterClass.VulkanMemoryConfig.getDefaultInstance() : vulkanMemoryConfig_;
    }

    public static final int TRACK_EVENT_CONFIG_FIELD_NUMBER = 113;
    private perfetto.protos.TrackEventConfigOuterClass.TrackEventConfig trackEventConfig_;
    /**
     * <pre>
     * Data source name: track_event
     * </pre>
     *
     * <code>optional .perfetto.protos.TrackEventConfig track_event_config = 113 [lazy = true];</code>
     * @return Whether the trackEventConfig field is set.
     */
    @java.lang.Override
    public boolean hasTrackEventConfig() {
      return ((bitField0_ & 0x00100000) != 0);
    }
    /**
     * <pre>
     * Data source name: track_event
     * </pre>
     *
     * <code>optional .perfetto.protos.TrackEventConfig track_event_config = 113 [lazy = true];</code>
     * @return The trackEventConfig.
     */
    @java.lang.Override
    public perfetto.protos.TrackEventConfigOuterClass.TrackEventConfig getTrackEventConfig() {
      return trackEventConfig_ == null ? perfetto.protos.TrackEventConfigOuterClass.TrackEventConfig.getDefaultInstance() : trackEventConfig_;
    }
    /**
     * <pre>
     * Data source name: track_event
     * </pre>
     *
     * <code>optional .perfetto.protos.TrackEventConfig track_event_config = 113 [lazy = true];</code>
     */
    @java.lang.Override
    public perfetto.protos.TrackEventConfigOuterClass.TrackEventConfigOrBuilder getTrackEventConfigOrBuilder() {
      return trackEventConfig_ == null ? perfetto.protos.TrackEventConfigOuterClass.TrackEventConfig.getDefaultInstance() : trackEventConfig_;
    }

    public static final int ANDROID_POLLED_STATE_CONFIG_FIELD_NUMBER = 114;
    private perfetto.protos.AndroidPolledStateConfigOuterClass.AndroidPolledStateConfig androidPolledStateConfig_;
    /**
     * <pre>
     * Data source name: android.polled_state
     * </pre>
     *
     * <code>optional .perfetto.protos.AndroidPolledStateConfig android_polled_state_config = 114 [lazy = true];</code>
     * @return Whether the androidPolledStateConfig field is set.
     */
    @java.lang.Override
    public boolean hasAndroidPolledStateConfig() {
      return ((bitField0_ & 0x00200000) != 0);
    }
    /**
     * <pre>
     * Data source name: android.polled_state
     * </pre>
     *
     * <code>optional .perfetto.protos.AndroidPolledStateConfig android_polled_state_config = 114 [lazy = true];</code>
     * @return The androidPolledStateConfig.
     */
    @java.lang.Override
    public perfetto.protos.AndroidPolledStateConfigOuterClass.AndroidPolledStateConfig getAndroidPolledStateConfig() {
      return androidPolledStateConfig_ == null ? perfetto.protos.AndroidPolledStateConfigOuterClass.AndroidPolledStateConfig.getDefaultInstance() : androidPolledStateConfig_;
    }
    /**
     * <pre>
     * Data source name: android.polled_state
     * </pre>
     *
     * <code>optional .perfetto.protos.AndroidPolledStateConfig android_polled_state_config = 114 [lazy = true];</code>
     */
    @java.lang.Override
    public perfetto.protos.AndroidPolledStateConfigOuterClass.AndroidPolledStateConfigOrBuilder getAndroidPolledStateConfigOrBuilder() {
      return androidPolledStateConfig_ == null ? perfetto.protos.AndroidPolledStateConfigOuterClass.AndroidPolledStateConfig.getDefaultInstance() : androidPolledStateConfig_;
    }

    public static final int ANDROID_SYSTEM_PROPERTY_CONFIG_FIELD_NUMBER = 118;
    private perfetto.protos.AndroidSystemPropertyConfigOuterClass.AndroidSystemPropertyConfig androidSystemPropertyConfig_;
    /**
     * <pre>
     * Data source name: android.system_property
     * </pre>
     *
     * <code>optional .perfetto.protos.AndroidSystemPropertyConfig android_system_property_config = 118 [lazy = true];</code>
     * @return Whether the androidSystemPropertyConfig field is set.
     */
    @java.lang.Override
    public boolean hasAndroidSystemPropertyConfig() {
      return ((bitField0_ & 0x00400000) != 0);
    }
    /**
     * <pre>
     * Data source name: android.system_property
     * </pre>
     *
     * <code>optional .perfetto.protos.AndroidSystemPropertyConfig android_system_property_config = 118 [lazy = true];</code>
     * @return The androidSystemPropertyConfig.
     */
    @java.lang.Override
    public perfetto.protos.AndroidSystemPropertyConfigOuterClass.AndroidSystemPropertyConfig getAndroidSystemPropertyConfig() {
      return androidSystemPropertyConfig_ == null ? perfetto.protos.AndroidSystemPropertyConfigOuterClass.AndroidSystemPropertyConfig.getDefaultInstance() : androidSystemPropertyConfig_;
    }
    /**
     * <pre>
     * Data source name: android.system_property
     * </pre>
     *
     * <code>optional .perfetto.protos.AndroidSystemPropertyConfig android_system_property_config = 118 [lazy = true];</code>
     */
    @java.lang.Override
    public perfetto.protos.AndroidSystemPropertyConfigOuterClass.AndroidSystemPropertyConfigOrBuilder getAndroidSystemPropertyConfigOrBuilder() {
      return androidSystemPropertyConfig_ == null ? perfetto.protos.AndroidSystemPropertyConfigOuterClass.AndroidSystemPropertyConfig.getDefaultInstance() : androidSystemPropertyConfig_;
    }

    public static final int STATSD_TRACING_CONFIG_FIELD_NUMBER = 117;
    private perfetto.protos.StatsdTracingConfigOuterClass.StatsdTracingConfig statsdTracingConfig_;
    /**
     * <pre>
     * Data source name: android.statsd
     * </pre>
     *
     * <code>optional .perfetto.protos.StatsdTracingConfig statsd_tracing_config = 117 [lazy = true];</code>
     * @return Whether the statsdTracingConfig field is set.
     */
    @java.lang.Override
    public boolean hasStatsdTracingConfig() {
      return ((bitField0_ & 0x00800000) != 0);
    }
    /**
     * <pre>
     * Data source name: android.statsd
     * </pre>
     *
     * <code>optional .perfetto.protos.StatsdTracingConfig statsd_tracing_config = 117 [lazy = true];</code>
     * @return The statsdTracingConfig.
     */
    @java.lang.Override
    public perfetto.protos.StatsdTracingConfigOuterClass.StatsdTracingConfig getStatsdTracingConfig() {
      return statsdTracingConfig_ == null ? perfetto.protos.StatsdTracingConfigOuterClass.StatsdTracingConfig.getDefaultInstance() : statsdTracingConfig_;
    }
    /**
     * <pre>
     * Data source name: android.statsd
     * </pre>
     *
     * <code>optional .perfetto.protos.StatsdTracingConfig statsd_tracing_config = 117 [lazy = true];</code>
     */
    @java.lang.Override
    public perfetto.protos.StatsdTracingConfigOuterClass.StatsdTracingConfigOrBuilder getStatsdTracingConfigOrBuilder() {
      return statsdTracingConfig_ == null ? perfetto.protos.StatsdTracingConfigOuterClass.StatsdTracingConfig.getDefaultInstance() : statsdTracingConfig_;
    }

    public static final int SYSTEM_INFO_CONFIG_FIELD_NUMBER = 119;
    private perfetto.protos.SystemInfo.SystemInfoConfig systemInfoConfig_;
    /**
     * <pre>
     * Data source name: linux.system_info
     * </pre>
     *
     * <code>optional .perfetto.protos.SystemInfoConfig system_info_config = 119;</code>
     * @return Whether the systemInfoConfig field is set.
     */
    @java.lang.Override
    public boolean hasSystemInfoConfig() {
      return ((bitField0_ & 0x01000000) != 0);
    }
    /**
     * <pre>
     * Data source name: linux.system_info
     * </pre>
     *
     * <code>optional .perfetto.protos.SystemInfoConfig system_info_config = 119;</code>
     * @return The systemInfoConfig.
     */
    @java.lang.Override
    public perfetto.protos.SystemInfo.SystemInfoConfig getSystemInfoConfig() {
      return systemInfoConfig_ == null ? perfetto.protos.SystemInfo.SystemInfoConfig.getDefaultInstance() : systemInfoConfig_;
    }
    /**
     * <pre>
     * Data source name: linux.system_info
     * </pre>
     *
     * <code>optional .perfetto.protos.SystemInfoConfig system_info_config = 119;</code>
     */
    @java.lang.Override
    public perfetto.protos.SystemInfo.SystemInfoConfigOrBuilder getSystemInfoConfigOrBuilder() {
      return systemInfoConfig_ == null ? perfetto.protos.SystemInfo.SystemInfoConfig.getDefaultInstance() : systemInfoConfig_;
    }

    public static final int CHROME_CONFIG_FIELD_NUMBER = 101;
    private perfetto.protos.ChromeConfigOuterClass.ChromeConfig chromeConfig_;
    /**
     * <pre>
     * Chrome is special as it doesn't use the perfetto IPC layer. We want to
     * avoid proto serialization and de-serialization there because that would
     * just add extra hops on top of the Mojo ser/des. Instead we auto-generate a
     * C++ class for it so it can pass around plain C++ objets.
     * </pre>
     *
     * <code>optional .perfetto.protos.ChromeConfig chrome_config = 101;</code>
     * @return Whether the chromeConfig field is set.
     */
    @java.lang.Override
    public boolean hasChromeConfig() {
      return ((bitField0_ & 0x02000000) != 0);
    }
    /**
     * <pre>
     * Chrome is special as it doesn't use the perfetto IPC layer. We want to
     * avoid proto serialization and de-serialization there because that would
     * just add extra hops on top of the Mojo ser/des. Instead we auto-generate a
     * C++ class for it so it can pass around plain C++ objets.
     * </pre>
     *
     * <code>optional .perfetto.protos.ChromeConfig chrome_config = 101;</code>
     * @return The chromeConfig.
     */
    @java.lang.Override
    public perfetto.protos.ChromeConfigOuterClass.ChromeConfig getChromeConfig() {
      return chromeConfig_ == null ? perfetto.protos.ChromeConfigOuterClass.ChromeConfig.getDefaultInstance() : chromeConfig_;
    }
    /**
     * <pre>
     * Chrome is special as it doesn't use the perfetto IPC layer. We want to
     * avoid proto serialization and de-serialization there because that would
     * just add extra hops on top of the Mojo ser/des. Instead we auto-generate a
     * C++ class for it so it can pass around plain C++ objets.
     * </pre>
     *
     * <code>optional .perfetto.protos.ChromeConfig chrome_config = 101;</code>
     */
    @java.lang.Override
    public perfetto.protos.ChromeConfigOuterClass.ChromeConfigOrBuilder getChromeConfigOrBuilder() {
      return chromeConfig_ == null ? perfetto.protos.ChromeConfigOuterClass.ChromeConfig.getDefaultInstance() : chromeConfig_;
    }

    public static final int INTERCEPTOR_CONFIG_FIELD_NUMBER = 115;
    private perfetto.protos.InterceptorConfigOuterClass.InterceptorConfig interceptorConfig_;
    /**
     * <pre>
     * If an interceptor is specified here, packets for this data source will be
     * rerouted to the interceptor instead of the main trace buffer. This can be
     * used, for example, to write trace data into ETW or for logging trace points
     * to the console.
     * Note that interceptors are only supported by data sources registered
     * through the Perfetto SDK API. Data sources that don't use that API (e.g.,
     * traced_probes) may not support interception.
     * </pre>
     *
     * <code>optional .perfetto.protos.InterceptorConfig interceptor_config = 115;</code>
     * @return Whether the interceptorConfig field is set.
     */
    @java.lang.Override
    public boolean hasInterceptorConfig() {
      return ((bitField0_ & 0x04000000) != 0);
    }
    /**
     * <pre>
     * If an interceptor is specified here, packets for this data source will be
     * rerouted to the interceptor instead of the main trace buffer. This can be
     * used, for example, to write trace data into ETW or for logging trace points
     * to the console.
     * Note that interceptors are only supported by data sources registered
     * through the Perfetto SDK API. Data sources that don't use that API (e.g.,
     * traced_probes) may not support interception.
     * </pre>
     *
     * <code>optional .perfetto.protos.InterceptorConfig interceptor_config = 115;</code>
     * @return The interceptorConfig.
     */
    @java.lang.Override
    public perfetto.protos.InterceptorConfigOuterClass.InterceptorConfig getInterceptorConfig() {
      return interceptorConfig_ == null ? perfetto.protos.InterceptorConfigOuterClass.InterceptorConfig.getDefaultInstance() : interceptorConfig_;
    }
    /**
     * <pre>
     * If an interceptor is specified here, packets for this data source will be
     * rerouted to the interceptor instead of the main trace buffer. This can be
     * used, for example, to write trace data into ETW or for logging trace points
     * to the console.
     * Note that interceptors are only supported by data sources registered
     * through the Perfetto SDK API. Data sources that don't use that API (e.g.,
     * traced_probes) may not support interception.
     * </pre>
     *
     * <code>optional .perfetto.protos.InterceptorConfig interceptor_config = 115;</code>
     */
    @java.lang.Override
    public perfetto.protos.InterceptorConfigOuterClass.InterceptorConfigOrBuilder getInterceptorConfigOrBuilder() {
      return interceptorConfig_ == null ? perfetto.protos.InterceptorConfigOuterClass.InterceptorConfig.getDefaultInstance() : interceptorConfig_;
    }

    public static final int NETWORK_PACKET_TRACE_CONFIG_FIELD_NUMBER = 120;
    private perfetto.protos.NetworkTraceConfig.NetworkPacketTraceConfig networkPacketTraceConfig_;
    /**
     * <pre>
     * Data source name: android.network_packets.
     * Introduced in Android 14 (U).
     * </pre>
     *
     * <code>optional .perfetto.protos.NetworkPacketTraceConfig network_packet_trace_config = 120 [lazy = true];</code>
     * @return Whether the networkPacketTraceConfig field is set.
     */
    @java.lang.Override
    public boolean hasNetworkPacketTraceConfig() {
      return ((bitField0_ & 0x08000000) != 0);
    }
    /**
     * <pre>
     * Data source name: android.network_packets.
     * Introduced in Android 14 (U).
     * </pre>
     *
     * <code>optional .perfetto.protos.NetworkPacketTraceConfig network_packet_trace_config = 120 [lazy = true];</code>
     * @return The networkPacketTraceConfig.
     */
    @java.lang.Override
    public perfetto.protos.NetworkTraceConfig.NetworkPacketTraceConfig getNetworkPacketTraceConfig() {
      return networkPacketTraceConfig_ == null ? perfetto.protos.NetworkTraceConfig.NetworkPacketTraceConfig.getDefaultInstance() : networkPacketTraceConfig_;
    }
    /**
     * <pre>
     * Data source name: android.network_packets.
     * Introduced in Android 14 (U).
     * </pre>
     *
     * <code>optional .perfetto.protos.NetworkPacketTraceConfig network_packet_trace_config = 120 [lazy = true];</code>
     */
    @java.lang.Override
    public perfetto.protos.NetworkTraceConfig.NetworkPacketTraceConfigOrBuilder getNetworkPacketTraceConfigOrBuilder() {
      return networkPacketTraceConfig_ == null ? perfetto.protos.NetworkTraceConfig.NetworkPacketTraceConfig.getDefaultInstance() : networkPacketTraceConfig_;
    }

    public static final int LEGACY_CONFIG_FIELD_NUMBER = 1000;
    @SuppressWarnings("serial")
    private volatile java.lang.Object legacyConfig_ = "";
    /**
     * <pre>
     * This is a fallback mechanism to send a free-form text config to the
     * producer. In theory this should never be needed. All the code that
     * is part of the platform (i.e. traced service) is supposed to *not* truncate
     * the trace config proto and propagate unknown fields. However, if anything
     * in the pipeline (client or backend) ends up breaking this forward compat
     * plan, this field will become the escape hatch to allow future data sources
     * to get some meaningful configuration.
     * </pre>
     *
     * <code>optional string legacy_config = 1000;</code>
     * @return Whether the legacyConfig field is set.
     */
    @java.lang.Override
    public boolean hasLegacyConfig() {
      return ((bitField0_ & 0x10000000) != 0);
    }
    /**
     * <pre>
     * This is a fallback mechanism to send a free-form text config to the
     * producer. In theory this should never be needed. All the code that
     * is part of the platform (i.e. traced service) is supposed to *not* truncate
     * the trace config proto and propagate unknown fields. However, if anything
     * in the pipeline (client or backend) ends up breaking this forward compat
     * plan, this field will become the escape hatch to allow future data sources
     * to get some meaningful configuration.
     * </pre>
     *
     * <code>optional string legacy_config = 1000;</code>
     * @return The legacyConfig.
     */
    @java.lang.Override
    public java.lang.String getLegacyConfig() {
      java.lang.Object ref = legacyConfig_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        if (bs.isValidUtf8()) {
          legacyConfig_ = s;
        }
        return s;
      }
    }
    /**
     * <pre>
     * This is a fallback mechanism to send a free-form text config to the
     * producer. In theory this should never be needed. All the code that
     * is part of the platform (i.e. traced service) is supposed to *not* truncate
     * the trace config proto and propagate unknown fields. However, if anything
     * in the pipeline (client or backend) ends up breaking this forward compat
     * plan, this field will become the escape hatch to allow future data sources
     * to get some meaningful configuration.
     * </pre>
     *
     * <code>optional string legacy_config = 1000;</code>
     * @return The bytes for legacyConfig.
     */
    @java.lang.Override
    public com.google.protobuf.ByteString
        getLegacyConfigBytes() {
      java.lang.Object ref = legacyConfig_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        legacyConfig_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    public static final int FOR_TESTING_FIELD_NUMBER = 1001;
    private perfetto.protos.TestConfigOuterClass.TestConfig forTesting_;
    /**
     * <pre>
     * This field is only used for testing.
     * </pre>
     *
     * <code>optional .perfetto.protos.TestConfig for_testing = 1001;</code>
     * @return Whether the forTesting field is set.
     */
    @java.lang.Override
    public boolean hasForTesting() {
      return ((bitField0_ & 0x20000000) != 0);
    }
    /**
     * <pre>
     * This field is only used for testing.
     * </pre>
     *
     * <code>optional .perfetto.protos.TestConfig for_testing = 1001;</code>
     * @return The forTesting.
     */
    @java.lang.Override
    public perfetto.protos.TestConfigOuterClass.TestConfig getForTesting() {
      return forTesting_ == null ? perfetto.protos.TestConfigOuterClass.TestConfig.getDefaultInstance() : forTesting_;
    }
    /**
     * <pre>
     * This field is only used for testing.
     * </pre>
     *
     * <code>optional .perfetto.protos.TestConfig for_testing = 1001;</code>
     */
    @java.lang.Override
    public perfetto.protos.TestConfigOuterClass.TestConfigOrBuilder getForTestingOrBuilder() {
      return forTesting_ == null ? perfetto.protos.TestConfigOuterClass.TestConfig.getDefaultInstance() : forTesting_;
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (((bitField0_ & 0x00000001) != 0)) {
        com.google.protobuf.GeneratedMessageV3.writeString(output, 1, name_);
      }
      if (((bitField0_ & 0x00000002) != 0)) {
        output.writeUInt32(2, targetBuffer_);
      }
      if (((bitField0_ & 0x00000004) != 0)) {
        output.writeUInt32(3, traceDurationMs_);
      }
      if (((bitField0_ & 0x00000040) != 0)) {
        output.writeUInt64(4, tracingSessionId_);
      }
      if (((bitField0_ & 0x00000010) != 0)) {
        output.writeBool(6, enableExtraGuardrails_);
      }
      if (((bitField0_ & 0x00000008) != 0)) {
        output.writeUInt32(7, stopTimeoutMs_);
      }
      if (((bitField0_ & 0x00000020) != 0)) {
        output.writeEnum(8, sessionInitiator_);
      }
      if (((bitField0_ & 0x00000080) != 0)) {
        output.writeMessage(100, getFtraceConfig());
      }
      if (((bitField0_ & 0x02000000) != 0)) {
        output.writeMessage(101, getChromeConfig());
      }
      if (((bitField0_ & 0x00000100) != 0)) {
        output.writeMessage(102, getInodeFileConfig());
      }
      if (((bitField0_ & 0x00000200) != 0)) {
        output.writeMessage(103, getProcessStatsConfig());
      }
      if (((bitField0_ & 0x00000400) != 0)) {
        output.writeMessage(104, getSysStatsConfig());
      }
      if (((bitField0_ & 0x00000800) != 0)) {
        output.writeMessage(105, getHeapprofdConfig());
      }
      if (((bitField0_ & 0x00002000) != 0)) {
        output.writeMessage(106, getAndroidPowerConfig());
      }
      if (((bitField0_ & 0x00004000) != 0)) {
        output.writeMessage(107, getAndroidLogConfig());
      }
      if (((bitField0_ & 0x00008000) != 0)) {
        output.writeMessage(108, getGpuCounterConfig());
      }
      if (((bitField0_ & 0x00020000) != 0)) {
        output.writeMessage(109, getPackagesListConfig());
      }
      if (((bitField0_ & 0x00001000) != 0)) {
        output.writeMessage(110, getJavaHprofConfig());
      }
      if (((bitField0_ & 0x00040000) != 0)) {
        output.writeMessage(111, getPerfEventConfig());
      }
      if (((bitField0_ & 0x00080000) != 0)) {
        output.writeMessage(112, getVulkanMemoryConfig());
      }
      if (((bitField0_ & 0x00100000) != 0)) {
        output.writeMessage(113, getTrackEventConfig());
      }
      if (((bitField0_ & 0x00200000) != 0)) {
        output.writeMessage(114, getAndroidPolledStateConfig());
      }
      if (((bitField0_ & 0x04000000) != 0)) {
        output.writeMessage(115, getInterceptorConfig());
      }
      if (((bitField0_ & 0x00010000) != 0)) {
        output.writeMessage(116, getAndroidGameInterventionListConfig());
      }
      if (((bitField0_ & 0x00800000) != 0)) {
        output.writeMessage(117, getStatsdTracingConfig());
      }
      if (((bitField0_ & 0x00400000) != 0)) {
        output.writeMessage(118, getAndroidSystemPropertyConfig());
      }
      if (((bitField0_ & 0x01000000) != 0)) {
        output.writeMessage(119, getSystemInfoConfig());
      }
      if (((bitField0_ & 0x08000000) != 0)) {
        output.writeMessage(120, getNetworkPacketTraceConfig());
      }
      if (((bitField0_ & 0x10000000) != 0)) {
        com.google.protobuf.GeneratedMessageV3.writeString(output, 1000, legacyConfig_);
      }
      if (((bitField0_ & 0x20000000) != 0)) {
        output.writeMessage(1001, getForTesting());
      }
      getUnknownFields().writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) != 0)) {
        size += com.google.protobuf.GeneratedMessageV3.computeStringSize(1, name_);
      }
      if (((bitField0_ & 0x00000002) != 0)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(2, targetBuffer_);
      }
      if (((bitField0_ & 0x00000004) != 0)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(3, traceDurationMs_);
      }
      if (((bitField0_ & 0x00000040) != 0)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt64Size(4, tracingSessionId_);
      }
      if (((bitField0_ & 0x00000010) != 0)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(6, enableExtraGuardrails_);
      }
      if (((bitField0_ & 0x00000008) != 0)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(7, stopTimeoutMs_);
      }
      if (((bitField0_ & 0x00000020) != 0)) {
        size += com.google.protobuf.CodedOutputStream
          .computeEnumSize(8, sessionInitiator_);
      }
      if (((bitField0_ & 0x00000080) != 0)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(100, getFtraceConfig());
      }
      if (((bitField0_ & 0x02000000) != 0)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(101, getChromeConfig());
      }
      if (((bitField0_ & 0x00000100) != 0)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(102, getInodeFileConfig());
      }
      if (((bitField0_ & 0x00000200) != 0)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(103, getProcessStatsConfig());
      }
      if (((bitField0_ & 0x00000400) != 0)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(104, getSysStatsConfig());
      }
      if (((bitField0_ & 0x00000800) != 0)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(105, getHeapprofdConfig());
      }
      if (((bitField0_ & 0x00002000) != 0)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(106, getAndroidPowerConfig());
      }
      if (((bitField0_ & 0x00004000) != 0)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(107, getAndroidLogConfig());
      }
      if (((bitField0_ & 0x00008000) != 0)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(108, getGpuCounterConfig());
      }
      if (((bitField0_ & 0x00020000) != 0)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(109, getPackagesListConfig());
      }
      if (((bitField0_ & 0x00001000) != 0)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(110, getJavaHprofConfig());
      }
      if (((bitField0_ & 0x00040000) != 0)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(111, getPerfEventConfig());
      }
      if (((bitField0_ & 0x00080000) != 0)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(112, getVulkanMemoryConfig());
      }
      if (((bitField0_ & 0x00100000) != 0)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(113, getTrackEventConfig());
      }
      if (((bitField0_ & 0x00200000) != 0)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(114, getAndroidPolledStateConfig());
      }
      if (((bitField0_ & 0x04000000) != 0)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(115, getInterceptorConfig());
      }
      if (((bitField0_ & 0x00010000) != 0)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(116, getAndroidGameInterventionListConfig());
      }
      if (((bitField0_ & 0x00800000) != 0)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(117, getStatsdTracingConfig());
      }
      if (((bitField0_ & 0x00400000) != 0)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(118, getAndroidSystemPropertyConfig());
      }
      if (((bitField0_ & 0x01000000) != 0)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(119, getSystemInfoConfig());
      }
      if (((bitField0_ & 0x08000000) != 0)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(120, getNetworkPacketTraceConfig());
      }
      if (((bitField0_ & 0x10000000) != 0)) {
        size += com.google.protobuf.GeneratedMessageV3.computeStringSize(1000, legacyConfig_);
      }
      if (((bitField0_ & 0x20000000) != 0)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(1001, getForTesting());
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof perfetto.protos.DataSourceConfigOuterClass.DataSourceConfig)) {
        return super.equals(obj);
      }
      perfetto.protos.DataSourceConfigOuterClass.DataSourceConfig other = (perfetto.protos.DataSourceConfigOuterClass.DataSourceConfig) obj;

      if (hasName() != other.hasName()) return false;
      if (hasName()) {
        if (!getName()
            .equals(other.getName())) return false;
      }
      if (hasTargetBuffer() != other.hasTargetBuffer()) return false;
      if (hasTargetBuffer()) {
        if (getTargetBuffer()
            != other.getTargetBuffer()) return false;
      }
      if (hasTraceDurationMs() != other.hasTraceDurationMs()) return false;
      if (hasTraceDurationMs()) {
        if (getTraceDurationMs()
            != other.getTraceDurationMs()) return false;
      }
      if (hasStopTimeoutMs() != other.hasStopTimeoutMs()) return false;
      if (hasStopTimeoutMs()) {
        if (getStopTimeoutMs()
            != other.getStopTimeoutMs()) return false;
      }
      if (hasEnableExtraGuardrails() != other.hasEnableExtraGuardrails()) return false;
      if (hasEnableExtraGuardrails()) {
        if (getEnableExtraGuardrails()
            != other.getEnableExtraGuardrails()) return false;
      }
      if (hasSessionInitiator() != other.hasSessionInitiator()) return false;
      if (hasSessionInitiator()) {
        if (sessionInitiator_ != other.sessionInitiator_) return false;
      }
      if (hasTracingSessionId() != other.hasTracingSessionId()) return false;
      if (hasTracingSessionId()) {
        if (getTracingSessionId()
            != other.getTracingSessionId()) return false;
      }
      if (hasFtraceConfig() != other.hasFtraceConfig()) return false;
      if (hasFtraceConfig()) {
        if (!getFtraceConfig()
            .equals(other.getFtraceConfig())) return false;
      }
      if (hasInodeFileConfig() != other.hasInodeFileConfig()) return false;
      if (hasInodeFileConfig()) {
        if (!getInodeFileConfig()
            .equals(other.getInodeFileConfig())) return false;
      }
      if (hasProcessStatsConfig() != other.hasProcessStatsConfig()) return false;
      if (hasProcessStatsConfig()) {
        if (!getProcessStatsConfig()
            .equals(other.getProcessStatsConfig())) return false;
      }
      if (hasSysStatsConfig() != other.hasSysStatsConfig()) return false;
      if (hasSysStatsConfig()) {
        if (!getSysStatsConfig()
            .equals(other.getSysStatsConfig())) return false;
      }
      if (hasHeapprofdConfig() != other.hasHeapprofdConfig()) return false;
      if (hasHeapprofdConfig()) {
        if (!getHeapprofdConfig()
            .equals(other.getHeapprofdConfig())) return false;
      }
      if (hasJavaHprofConfig() != other.hasJavaHprofConfig()) return false;
      if (hasJavaHprofConfig()) {
        if (!getJavaHprofConfig()
            .equals(other.getJavaHprofConfig())) return false;
      }
      if (hasAndroidPowerConfig() != other.hasAndroidPowerConfig()) return false;
      if (hasAndroidPowerConfig()) {
        if (!getAndroidPowerConfig()
            .equals(other.getAndroidPowerConfig())) return false;
      }
      if (hasAndroidLogConfig() != other.hasAndroidLogConfig()) return false;
      if (hasAndroidLogConfig()) {
        if (!getAndroidLogConfig()
            .equals(other.getAndroidLogConfig())) return false;
      }
      if (hasGpuCounterConfig() != other.hasGpuCounterConfig()) return false;
      if (hasGpuCounterConfig()) {
        if (!getGpuCounterConfig()
            .equals(other.getGpuCounterConfig())) return false;
      }
      if (hasAndroidGameInterventionListConfig() != other.hasAndroidGameInterventionListConfig()) return false;
      if (hasAndroidGameInterventionListConfig()) {
        if (!getAndroidGameInterventionListConfig()
            .equals(other.getAndroidGameInterventionListConfig())) return false;
      }
      if (hasPackagesListConfig() != other.hasPackagesListConfig()) return false;
      if (hasPackagesListConfig()) {
        if (!getPackagesListConfig()
            .equals(other.getPackagesListConfig())) return false;
      }
      if (hasPerfEventConfig() != other.hasPerfEventConfig()) return false;
      if (hasPerfEventConfig()) {
        if (!getPerfEventConfig()
            .equals(other.getPerfEventConfig())) return false;
      }
      if (hasVulkanMemoryConfig() != other.hasVulkanMemoryConfig()) return false;
      if (hasVulkanMemoryConfig()) {
        if (!getVulkanMemoryConfig()
            .equals(other.getVulkanMemoryConfig())) return false;
      }
      if (hasTrackEventConfig() != other.hasTrackEventConfig()) return false;
      if (hasTrackEventConfig()) {
        if (!getTrackEventConfig()
            .equals(other.getTrackEventConfig())) return false;
      }
      if (hasAndroidPolledStateConfig() != other.hasAndroidPolledStateConfig()) return false;
      if (hasAndroidPolledStateConfig()) {
        if (!getAndroidPolledStateConfig()
            .equals(other.getAndroidPolledStateConfig())) return false;
      }
      if (hasAndroidSystemPropertyConfig() != other.hasAndroidSystemPropertyConfig()) return false;
      if (hasAndroidSystemPropertyConfig()) {
        if (!getAndroidSystemPropertyConfig()
            .equals(other.getAndroidSystemPropertyConfig())) return false;
      }
      if (hasStatsdTracingConfig() != other.hasStatsdTracingConfig()) return false;
      if (hasStatsdTracingConfig()) {
        if (!getStatsdTracingConfig()
            .equals(other.getStatsdTracingConfig())) return false;
      }
      if (hasSystemInfoConfig() != other.hasSystemInfoConfig()) return false;
      if (hasSystemInfoConfig()) {
        if (!getSystemInfoConfig()
            .equals(other.getSystemInfoConfig())) return false;
      }
      if (hasChromeConfig() != other.hasChromeConfig()) return false;
      if (hasChromeConfig()) {
        if (!getChromeConfig()
            .equals(other.getChromeConfig())) return false;
      }
      if (hasInterceptorConfig() != other.hasInterceptorConfig()) return false;
      if (hasInterceptorConfig()) {
        if (!getInterceptorConfig()
            .equals(other.getInterceptorConfig())) return false;
      }
      if (hasNetworkPacketTraceConfig() != other.hasNetworkPacketTraceConfig()) return false;
      if (hasNetworkPacketTraceConfig()) {
        if (!getNetworkPacketTraceConfig()
            .equals(other.getNetworkPacketTraceConfig())) return false;
      }
      if (hasLegacyConfig() != other.hasLegacyConfig()) return false;
      if (hasLegacyConfig()) {
        if (!getLegacyConfig()
            .equals(other.getLegacyConfig())) return false;
      }
      if (hasForTesting() != other.hasForTesting()) return false;
      if (hasForTesting()) {
        if (!getForTesting()
            .equals(other.getForTesting())) return false;
      }
      if (!getUnknownFields().equals(other.getUnknownFields())) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      if (hasName()) {
        hash = (37 * hash) + NAME_FIELD_NUMBER;
        hash = (53 * hash) + getName().hashCode();
      }
      if (hasTargetBuffer()) {
        hash = (37 * hash) + TARGET_BUFFER_FIELD_NUMBER;
        hash = (53 * hash) + getTargetBuffer();
      }
      if (hasTraceDurationMs()) {
        hash = (37 * hash) + TRACE_DURATION_MS_FIELD_NUMBER;
        hash = (53 * hash) + getTraceDurationMs();
      }
      if (hasStopTimeoutMs()) {
        hash = (37 * hash) + STOP_TIMEOUT_MS_FIELD_NUMBER;
        hash = (53 * hash) + getStopTimeoutMs();
      }
      if (hasEnableExtraGuardrails()) {
        hash = (37 * hash) + ENABLE_EXTRA_GUARDRAILS_FIELD_NUMBER;
        hash = (53 * hash) + com.google.protobuf.Internal.hashBoolean(
            getEnableExtraGuardrails());
      }
      if (hasSessionInitiator()) {
        hash = (37 * hash) + SESSION_INITIATOR_FIELD_NUMBER;
        hash = (53 * hash) + sessionInitiator_;
      }
      if (hasTracingSessionId()) {
        hash = (37 * hash) + TRACING_SESSION_ID_FIELD_NUMBER;
        hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
            getTracingSessionId());
      }
      if (hasFtraceConfig()) {
        hash = (37 * hash) + FTRACE_CONFIG_FIELD_NUMBER;
        hash = (53 * hash) + getFtraceConfig().hashCode();
      }
      if (hasInodeFileConfig()) {
        hash = (37 * hash) + INODE_FILE_CONFIG_FIELD_NUMBER;
        hash = (53 * hash) + getInodeFileConfig().hashCode();
      }
      if (hasProcessStatsConfig()) {
        hash = (37 * hash) + PROCESS_STATS_CONFIG_FIELD_NUMBER;
        hash = (53 * hash) + getProcessStatsConfig().hashCode();
      }
      if (hasSysStatsConfig()) {
        hash = (37 * hash) + SYS_STATS_CONFIG_FIELD_NUMBER;
        hash = (53 * hash) + getSysStatsConfig().hashCode();
      }
      if (hasHeapprofdConfig()) {
        hash = (37 * hash) + HEAPPROFD_CONFIG_FIELD_NUMBER;
        hash = (53 * hash) + getHeapprofdConfig().hashCode();
      }
      if (hasJavaHprofConfig()) {
        hash = (37 * hash) + JAVA_HPROF_CONFIG_FIELD_NUMBER;
        hash = (53 * hash) + getJavaHprofConfig().hashCode();
      }
      if (hasAndroidPowerConfig()) {
        hash = (37 * hash) + ANDROID_POWER_CONFIG_FIELD_NUMBER;
        hash = (53 * hash) + getAndroidPowerConfig().hashCode();
      }
      if (hasAndroidLogConfig()) {
        hash = (37 * hash) + ANDROID_LOG_CONFIG_FIELD_NUMBER;
        hash = (53 * hash) + getAndroidLogConfig().hashCode();
      }
      if (hasGpuCounterConfig()) {
        hash = (37 * hash) + GPU_COUNTER_CONFIG_FIELD_NUMBER;
        hash = (53 * hash) + getGpuCounterConfig().hashCode();
      }
      if (hasAndroidGameInterventionListConfig()) {
        hash = (37 * hash) + ANDROID_GAME_INTERVENTION_LIST_CONFIG_FIELD_NUMBER;
        hash = (53 * hash) + getAndroidGameInterventionListConfig().hashCode();
      }
      if (hasPackagesListConfig()) {
        hash = (37 * hash) + PACKAGES_LIST_CONFIG_FIELD_NUMBER;
        hash = (53 * hash) + getPackagesListConfig().hashCode();
      }
      if (hasPerfEventConfig()) {
        hash = (37 * hash) + PERF_EVENT_CONFIG_FIELD_NUMBER;
        hash = (53 * hash) + getPerfEventConfig().hashCode();
      }
      if (hasVulkanMemoryConfig()) {
        hash = (37 * hash) + VULKAN_MEMORY_CONFIG_FIELD_NUMBER;
        hash = (53 * hash) + getVulkanMemoryConfig().hashCode();
      }
      if (hasTrackEventConfig()) {
        hash = (37 * hash) + TRACK_EVENT_CONFIG_FIELD_NUMBER;
        hash = (53 * hash) + getTrackEventConfig().hashCode();
      }
      if (hasAndroidPolledStateConfig()) {
        hash = (37 * hash) + ANDROID_POLLED_STATE_CONFIG_FIELD_NUMBER;
        hash = (53 * hash) + getAndroidPolledStateConfig().hashCode();
      }
      if (hasAndroidSystemPropertyConfig()) {
        hash = (37 * hash) + ANDROID_SYSTEM_PROPERTY_CONFIG_FIELD_NUMBER;
        hash = (53 * hash) + getAndroidSystemPropertyConfig().hashCode();
      }
      if (hasStatsdTracingConfig()) {
        hash = (37 * hash) + STATSD_TRACING_CONFIG_FIELD_NUMBER;
        hash = (53 * hash) + getStatsdTracingConfig().hashCode();
      }
      if (hasSystemInfoConfig()) {
        hash = (37 * hash) + SYSTEM_INFO_CONFIG_FIELD_NUMBER;
        hash = (53 * hash) + getSystemInfoConfig().hashCode();
      }
      if (hasChromeConfig()) {
        hash = (37 * hash) + CHROME_CONFIG_FIELD_NUMBER;
        hash = (53 * hash) + getChromeConfig().hashCode();
      }
      if (hasInterceptorConfig()) {
        hash = (37 * hash) + INTERCEPTOR_CONFIG_FIELD_NUMBER;
        hash = (53 * hash) + getInterceptorConfig().hashCode();
      }
      if (hasNetworkPacketTraceConfig()) {
        hash = (37 * hash) + NETWORK_PACKET_TRACE_CONFIG_FIELD_NUMBER;
        hash = (53 * hash) + getNetworkPacketTraceConfig().hashCode();
      }
      if (hasLegacyConfig()) {
        hash = (37 * hash) + LEGACY_CONFIG_FIELD_NUMBER;
        hash = (53 * hash) + getLegacyConfig().hashCode();
      }
      if (hasForTesting()) {
        hash = (37 * hash) + FOR_TESTING_FIELD_NUMBER;
        hash = (53 * hash) + getForTesting().hashCode();
      }
      hash = (29 * hash) + getUnknownFields().hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static perfetto.protos.DataSourceConfigOuterClass.DataSourceConfig parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static perfetto.protos.DataSourceConfigOuterClass.DataSourceConfig parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static perfetto.protos.DataSourceConfigOuterClass.DataSourceConfig parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static perfetto.protos.DataSourceConfigOuterClass.DataSourceConfig parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static perfetto.protos.DataSourceConfigOuterClass.DataSourceConfig parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static perfetto.protos.DataSourceConfigOuterClass.DataSourceConfig parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static perfetto.protos.DataSourceConfigOuterClass.DataSourceConfig parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static perfetto.protos.DataSourceConfigOuterClass.DataSourceConfig parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static perfetto.protos.DataSourceConfigOuterClass.DataSourceConfig parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static perfetto.protos.DataSourceConfigOuterClass.DataSourceConfig parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static perfetto.protos.DataSourceConfigOuterClass.DataSourceConfig parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static perfetto.protos.DataSourceConfigOuterClass.DataSourceConfig parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(perfetto.protos.DataSourceConfigOuterClass.DataSourceConfig prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * <pre>
     * The configuration that is passed to each data source when starting tracing.
     * Next id: 121
     * </pre>
     *
     * Protobuf type {@code perfetto.protos.DataSourceConfig}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:perfetto.protos.DataSourceConfig)
        perfetto.protos.DataSourceConfigOuterClass.DataSourceConfigOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return perfetto.protos.DataSourceConfigOuterClass.internal_static_perfetto_protos_DataSourceConfig_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return perfetto.protos.DataSourceConfigOuterClass.internal_static_perfetto_protos_DataSourceConfig_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                perfetto.protos.DataSourceConfigOuterClass.DataSourceConfig.class, perfetto.protos.DataSourceConfigOuterClass.DataSourceConfig.Builder.class);
      }

      // Construct using perfetto.protos.DataSourceConfigOuterClass.DataSourceConfig.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
          getFtraceConfigFieldBuilder();
          getInodeFileConfigFieldBuilder();
          getProcessStatsConfigFieldBuilder();
          getSysStatsConfigFieldBuilder();
          getHeapprofdConfigFieldBuilder();
          getJavaHprofConfigFieldBuilder();
          getAndroidPowerConfigFieldBuilder();
          getAndroidLogConfigFieldBuilder();
          getGpuCounterConfigFieldBuilder();
          getAndroidGameInterventionListConfigFieldBuilder();
          getPackagesListConfigFieldBuilder();
          getPerfEventConfigFieldBuilder();
          getVulkanMemoryConfigFieldBuilder();
          getTrackEventConfigFieldBuilder();
          getAndroidPolledStateConfigFieldBuilder();
          getAndroidSystemPropertyConfigFieldBuilder();
          getStatsdTracingConfigFieldBuilder();
          getSystemInfoConfigFieldBuilder();
          getChromeConfigFieldBuilder();
          getInterceptorConfigFieldBuilder();
          getNetworkPacketTraceConfigFieldBuilder();
          getForTestingFieldBuilder();
        }
      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        bitField0_ = 0;
        name_ = "";
        targetBuffer_ = 0;
        traceDurationMs_ = 0;
        stopTimeoutMs_ = 0;
        enableExtraGuardrails_ = false;
        sessionInitiator_ = 0;
        tracingSessionId_ = 0L;
        ftraceConfig_ = null;
        if (ftraceConfigBuilder_ != null) {
          ftraceConfigBuilder_.dispose();
          ftraceConfigBuilder_ = null;
        }
        inodeFileConfig_ = null;
        if (inodeFileConfigBuilder_ != null) {
          inodeFileConfigBuilder_.dispose();
          inodeFileConfigBuilder_ = null;
        }
        processStatsConfig_ = null;
        if (processStatsConfigBuilder_ != null) {
          processStatsConfigBuilder_.dispose();
          processStatsConfigBuilder_ = null;
        }
        sysStatsConfig_ = null;
        if (sysStatsConfigBuilder_ != null) {
          sysStatsConfigBuilder_.dispose();
          sysStatsConfigBuilder_ = null;
        }
        heapprofdConfig_ = null;
        if (heapprofdConfigBuilder_ != null) {
          heapprofdConfigBuilder_.dispose();
          heapprofdConfigBuilder_ = null;
        }
        javaHprofConfig_ = null;
        if (javaHprofConfigBuilder_ != null) {
          javaHprofConfigBuilder_.dispose();
          javaHprofConfigBuilder_ = null;
        }
        androidPowerConfig_ = null;
        if (androidPowerConfigBuilder_ != null) {
          androidPowerConfigBuilder_.dispose();
          androidPowerConfigBuilder_ = null;
        }
        androidLogConfig_ = null;
        if (androidLogConfigBuilder_ != null) {
          androidLogConfigBuilder_.dispose();
          androidLogConfigBuilder_ = null;
        }
        gpuCounterConfig_ = null;
        if (gpuCounterConfigBuilder_ != null) {
          gpuCounterConfigBuilder_.dispose();
          gpuCounterConfigBuilder_ = null;
        }
        androidGameInterventionListConfig_ = null;
        if (androidGameInterventionListConfigBuilder_ != null) {
          androidGameInterventionListConfigBuilder_.dispose();
          androidGameInterventionListConfigBuilder_ = null;
        }
        packagesListConfig_ = null;
        if (packagesListConfigBuilder_ != null) {
          packagesListConfigBuilder_.dispose();
          packagesListConfigBuilder_ = null;
        }
        perfEventConfig_ = null;
        if (perfEventConfigBuilder_ != null) {
          perfEventConfigBuilder_.dispose();
          perfEventConfigBuilder_ = null;
        }
        vulkanMemoryConfig_ = null;
        if (vulkanMemoryConfigBuilder_ != null) {
          vulkanMemoryConfigBuilder_.dispose();
          vulkanMemoryConfigBuilder_ = null;
        }
        trackEventConfig_ = null;
        if (trackEventConfigBuilder_ != null) {
          trackEventConfigBuilder_.dispose();
          trackEventConfigBuilder_ = null;
        }
        androidPolledStateConfig_ = null;
        if (androidPolledStateConfigBuilder_ != null) {
          androidPolledStateConfigBuilder_.dispose();
          androidPolledStateConfigBuilder_ = null;
        }
        androidSystemPropertyConfig_ = null;
        if (androidSystemPropertyConfigBuilder_ != null) {
          androidSystemPropertyConfigBuilder_.dispose();
          androidSystemPropertyConfigBuilder_ = null;
        }
        statsdTracingConfig_ = null;
        if (statsdTracingConfigBuilder_ != null) {
          statsdTracingConfigBuilder_.dispose();
          statsdTracingConfigBuilder_ = null;
        }
        systemInfoConfig_ = null;
        if (systemInfoConfigBuilder_ != null) {
          systemInfoConfigBuilder_.dispose();
          systemInfoConfigBuilder_ = null;
        }
        chromeConfig_ = null;
        if (chromeConfigBuilder_ != null) {
          chromeConfigBuilder_.dispose();
          chromeConfigBuilder_ = null;
        }
        interceptorConfig_ = null;
        if (interceptorConfigBuilder_ != null) {
          interceptorConfigBuilder_.dispose();
          interceptorConfigBuilder_ = null;
        }
        networkPacketTraceConfig_ = null;
        if (networkPacketTraceConfigBuilder_ != null) {
          networkPacketTraceConfigBuilder_.dispose();
          networkPacketTraceConfigBuilder_ = null;
        }
        legacyConfig_ = "";
        forTesting_ = null;
        if (forTestingBuilder_ != null) {
          forTestingBuilder_.dispose();
          forTestingBuilder_ = null;
        }
        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return perfetto.protos.DataSourceConfigOuterClass.internal_static_perfetto_protos_DataSourceConfig_descriptor;
      }

      @java.lang.Override
      public perfetto.protos.DataSourceConfigOuterClass.DataSourceConfig getDefaultInstanceForType() {
        return perfetto.protos.DataSourceConfigOuterClass.DataSourceConfig.getDefaultInstance();
      }

      @java.lang.Override
      public perfetto.protos.DataSourceConfigOuterClass.DataSourceConfig build() {
        perfetto.protos.DataSourceConfigOuterClass.DataSourceConfig result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public perfetto.protos.DataSourceConfigOuterClass.DataSourceConfig buildPartial() {
        perfetto.protos.DataSourceConfigOuterClass.DataSourceConfig result = new perfetto.protos.DataSourceConfigOuterClass.DataSourceConfig(this);
        if (bitField0_ != 0) { buildPartial0(result); }
        onBuilt();
        return result;
      }

      private void buildPartial0(perfetto.protos.DataSourceConfigOuterClass.DataSourceConfig result) {
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) != 0)) {
          result.name_ = name_;
          to_bitField0_ |= 0x00000001;
        }
        if (((from_bitField0_ & 0x00000002) != 0)) {
          result.targetBuffer_ = targetBuffer_;
          to_bitField0_ |= 0x00000002;
        }
        if (((from_bitField0_ & 0x00000004) != 0)) {
          result.traceDurationMs_ = traceDurationMs_;
          to_bitField0_ |= 0x00000004;
        }
        if (((from_bitField0_ & 0x00000008) != 0)) {
          result.stopTimeoutMs_ = stopTimeoutMs_;
          to_bitField0_ |= 0x00000008;
        }
        if (((from_bitField0_ & 0x00000010) != 0)) {
          result.enableExtraGuardrails_ = enableExtraGuardrails_;
          to_bitField0_ |= 0x00000010;
        }
        if (((from_bitField0_ & 0x00000020) != 0)) {
          result.sessionInitiator_ = sessionInitiator_;
          to_bitField0_ |= 0x00000020;
        }
        if (((from_bitField0_ & 0x00000040) != 0)) {
          result.tracingSessionId_ = tracingSessionId_;
          to_bitField0_ |= 0x00000040;
        }
        if (((from_bitField0_ & 0x00000080) != 0)) {
          result.ftraceConfig_ = ftraceConfigBuilder_ == null
              ? ftraceConfig_
              : ftraceConfigBuilder_.build();
          to_bitField0_ |= 0x00000080;
        }
        if (((from_bitField0_ & 0x00000100) != 0)) {
          result.inodeFileConfig_ = inodeFileConfigBuilder_ == null
              ? inodeFileConfig_
              : inodeFileConfigBuilder_.build();
          to_bitField0_ |= 0x00000100;
        }
        if (((from_bitField0_ & 0x00000200) != 0)) {
          result.processStatsConfig_ = processStatsConfigBuilder_ == null
              ? processStatsConfig_
              : processStatsConfigBuilder_.build();
          to_bitField0_ |= 0x00000200;
        }
        if (((from_bitField0_ & 0x00000400) != 0)) {
          result.sysStatsConfig_ = sysStatsConfigBuilder_ == null
              ? sysStatsConfig_
              : sysStatsConfigBuilder_.build();
          to_bitField0_ |= 0x00000400;
        }
        if (((from_bitField0_ & 0x00000800) != 0)) {
          result.heapprofdConfig_ = heapprofdConfigBuilder_ == null
              ? heapprofdConfig_
              : heapprofdConfigBuilder_.build();
          to_bitField0_ |= 0x00000800;
        }
        if (((from_bitField0_ & 0x00001000) != 0)) {
          result.javaHprofConfig_ = javaHprofConfigBuilder_ == null
              ? javaHprofConfig_
              : javaHprofConfigBuilder_.build();
          to_bitField0_ |= 0x00001000;
        }
        if (((from_bitField0_ & 0x00002000) != 0)) {
          result.androidPowerConfig_ = androidPowerConfigBuilder_ == null
              ? androidPowerConfig_
              : androidPowerConfigBuilder_.build();
          to_bitField0_ |= 0x00002000;
        }
        if (((from_bitField0_ & 0x00004000) != 0)) {
          result.androidLogConfig_ = androidLogConfigBuilder_ == null
              ? androidLogConfig_
              : androidLogConfigBuilder_.build();
          to_bitField0_ |= 0x00004000;
        }
        if (((from_bitField0_ & 0x00008000) != 0)) {
          result.gpuCounterConfig_ = gpuCounterConfigBuilder_ == null
              ? gpuCounterConfig_
              : gpuCounterConfigBuilder_.build();
          to_bitField0_ |= 0x00008000;
        }
        if (((from_bitField0_ & 0x00010000) != 0)) {
          result.androidGameInterventionListConfig_ = androidGameInterventionListConfigBuilder_ == null
              ? androidGameInterventionListConfig_
              : androidGameInterventionListConfigBuilder_.build();
          to_bitField0_ |= 0x00010000;
        }
        if (((from_bitField0_ & 0x00020000) != 0)) {
          result.packagesListConfig_ = packagesListConfigBuilder_ == null
              ? packagesListConfig_
              : packagesListConfigBuilder_.build();
          to_bitField0_ |= 0x00020000;
        }
        if (((from_bitField0_ & 0x00040000) != 0)) {
          result.perfEventConfig_ = perfEventConfigBuilder_ == null
              ? perfEventConfig_
              : perfEventConfigBuilder_.build();
          to_bitField0_ |= 0x00040000;
        }
        if (((from_bitField0_ & 0x00080000) != 0)) {
          result.vulkanMemoryConfig_ = vulkanMemoryConfigBuilder_ == null
              ? vulkanMemoryConfig_
              : vulkanMemoryConfigBuilder_.build();
          to_bitField0_ |= 0x00080000;
        }
        if (((from_bitField0_ & 0x00100000) != 0)) {
          result.trackEventConfig_ = trackEventConfigBuilder_ == null
              ? trackEventConfig_
              : trackEventConfigBuilder_.build();
          to_bitField0_ |= 0x00100000;
        }
        if (((from_bitField0_ & 0x00200000) != 0)) {
          result.androidPolledStateConfig_ = androidPolledStateConfigBuilder_ == null
              ? androidPolledStateConfig_
              : androidPolledStateConfigBuilder_.build();
          to_bitField0_ |= 0x00200000;
        }
        if (((from_bitField0_ & 0x00400000) != 0)) {
          result.androidSystemPropertyConfig_ = androidSystemPropertyConfigBuilder_ == null
              ? androidSystemPropertyConfig_
              : androidSystemPropertyConfigBuilder_.build();
          to_bitField0_ |= 0x00400000;
        }
        if (((from_bitField0_ & 0x00800000) != 0)) {
          result.statsdTracingConfig_ = statsdTracingConfigBuilder_ == null
              ? statsdTracingConfig_
              : statsdTracingConfigBuilder_.build();
          to_bitField0_ |= 0x00800000;
        }
        if (((from_bitField0_ & 0x01000000) != 0)) {
          result.systemInfoConfig_ = systemInfoConfigBuilder_ == null
              ? systemInfoConfig_
              : systemInfoConfigBuilder_.build();
          to_bitField0_ |= 0x01000000;
        }
        if (((from_bitField0_ & 0x02000000) != 0)) {
          result.chromeConfig_ = chromeConfigBuilder_ == null
              ? chromeConfig_
              : chromeConfigBuilder_.build();
          to_bitField0_ |= 0x02000000;
        }
        if (((from_bitField0_ & 0x04000000) != 0)) {
          result.interceptorConfig_ = interceptorConfigBuilder_ == null
              ? interceptorConfig_
              : interceptorConfigBuilder_.build();
          to_bitField0_ |= 0x04000000;
        }
        if (((from_bitField0_ & 0x08000000) != 0)) {
          result.networkPacketTraceConfig_ = networkPacketTraceConfigBuilder_ == null
              ? networkPacketTraceConfig_
              : networkPacketTraceConfigBuilder_.build();
          to_bitField0_ |= 0x08000000;
        }
        if (((from_bitField0_ & 0x10000000) != 0)) {
          result.legacyConfig_ = legacyConfig_;
          to_bitField0_ |= 0x10000000;
        }
        if (((from_bitField0_ & 0x20000000) != 0)) {
          result.forTesting_ = forTestingBuilder_ == null
              ? forTesting_
              : forTestingBuilder_.build();
          to_bitField0_ |= 0x20000000;
        }
        result.bitField0_ |= to_bitField0_;
      }

      @java.lang.Override
      public Builder clone() {
        return super.clone();
      }
      @java.lang.Override
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.setField(field, value);
      }
      @java.lang.Override
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return super.clearField(field);
      }
      @java.lang.Override
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return super.clearOneof(oneof);
      }
      @java.lang.Override
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, java.lang.Object value) {
        return super.setRepeatedField(field, index, value);
      }
      @java.lang.Override
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.addRepeatedField(field, value);
      }
      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof perfetto.protos.DataSourceConfigOuterClass.DataSourceConfig) {
          return mergeFrom((perfetto.protos.DataSourceConfigOuterClass.DataSourceConfig)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(perfetto.protos.DataSourceConfigOuterClass.DataSourceConfig other) {
        if (other == perfetto.protos.DataSourceConfigOuterClass.DataSourceConfig.getDefaultInstance()) return this;
        if (other.hasName()) {
          name_ = other.name_;
          bitField0_ |= 0x00000001;
          onChanged();
        }
        if (other.hasTargetBuffer()) {
          setTargetBuffer(other.getTargetBuffer());
        }
        if (other.hasTraceDurationMs()) {
          setTraceDurationMs(other.getTraceDurationMs());
        }
        if (other.hasStopTimeoutMs()) {
          setStopTimeoutMs(other.getStopTimeoutMs());
        }
        if (other.hasEnableExtraGuardrails()) {
          setEnableExtraGuardrails(other.getEnableExtraGuardrails());
        }
        if (other.hasSessionInitiator()) {
          setSessionInitiator(other.getSessionInitiator());
        }
        if (other.hasTracingSessionId()) {
          setTracingSessionId(other.getTracingSessionId());
        }
        if (other.hasFtraceConfig()) {
          mergeFtraceConfig(other.getFtraceConfig());
        }
        if (other.hasInodeFileConfig()) {
          mergeInodeFileConfig(other.getInodeFileConfig());
        }
        if (other.hasProcessStatsConfig()) {
          mergeProcessStatsConfig(other.getProcessStatsConfig());
        }
        if (other.hasSysStatsConfig()) {
          mergeSysStatsConfig(other.getSysStatsConfig());
        }
        if (other.hasHeapprofdConfig()) {
          mergeHeapprofdConfig(other.getHeapprofdConfig());
        }
        if (other.hasJavaHprofConfig()) {
          mergeJavaHprofConfig(other.getJavaHprofConfig());
        }
        if (other.hasAndroidPowerConfig()) {
          mergeAndroidPowerConfig(other.getAndroidPowerConfig());
        }
        if (other.hasAndroidLogConfig()) {
          mergeAndroidLogConfig(other.getAndroidLogConfig());
        }
        if (other.hasGpuCounterConfig()) {
          mergeGpuCounterConfig(other.getGpuCounterConfig());
        }
        if (other.hasAndroidGameInterventionListConfig()) {
          mergeAndroidGameInterventionListConfig(other.getAndroidGameInterventionListConfig());
        }
        if (other.hasPackagesListConfig()) {
          mergePackagesListConfig(other.getPackagesListConfig());
        }
        if (other.hasPerfEventConfig()) {
          mergePerfEventConfig(other.getPerfEventConfig());
        }
        if (other.hasVulkanMemoryConfig()) {
          mergeVulkanMemoryConfig(other.getVulkanMemoryConfig());
        }
        if (other.hasTrackEventConfig()) {
          mergeTrackEventConfig(other.getTrackEventConfig());
        }
        if (other.hasAndroidPolledStateConfig()) {
          mergeAndroidPolledStateConfig(other.getAndroidPolledStateConfig());
        }
        if (other.hasAndroidSystemPropertyConfig()) {
          mergeAndroidSystemPropertyConfig(other.getAndroidSystemPropertyConfig());
        }
        if (other.hasStatsdTracingConfig()) {
          mergeStatsdTracingConfig(other.getStatsdTracingConfig());
        }
        if (other.hasSystemInfoConfig()) {
          mergeSystemInfoConfig(other.getSystemInfoConfig());
        }
        if (other.hasChromeConfig()) {
          mergeChromeConfig(other.getChromeConfig());
        }
        if (other.hasInterceptorConfig()) {
          mergeInterceptorConfig(other.getInterceptorConfig());
        }
        if (other.hasNetworkPacketTraceConfig()) {
          mergeNetworkPacketTraceConfig(other.getNetworkPacketTraceConfig());
        }
        if (other.hasLegacyConfig()) {
          legacyConfig_ = other.legacyConfig_;
          bitField0_ |= 0x10000000;
          onChanged();
        }
        if (other.hasForTesting()) {
          mergeForTesting(other.getForTesting());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        if (extensionRegistry == null) {
          throw new java.lang.NullPointerException();
        }
        try {
          boolean done = false;
          while (!done) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                done = true;
                break;
              case 10: {
                name_ = input.readBytes();
                bitField0_ |= 0x00000001;
                break;
              } // case 10
              case 16: {
                targetBuffer_ = input.readUInt32();
                bitField0_ |= 0x00000002;
                break;
              } // case 16
              case 24: {
                traceDurationMs_ = input.readUInt32();
                bitField0_ |= 0x00000004;
                break;
              } // case 24
              case 32: {
                tracingSessionId_ = input.readUInt64();
                bitField0_ |= 0x00000040;
                break;
              } // case 32
              case 48: {
                enableExtraGuardrails_ = input.readBool();
                bitField0_ |= 0x00000010;
                break;
              } // case 48
              case 56: {
                stopTimeoutMs_ = input.readUInt32();
                bitField0_ |= 0x00000008;
                break;
              } // case 56
              case 64: {
                int tmpRaw = input.readEnum();
                perfetto.protos.DataSourceConfigOuterClass.DataSourceConfig.SessionInitiator tmpValue =
                    perfetto.protos.DataSourceConfigOuterClass.DataSourceConfig.SessionInitiator.forNumber(tmpRaw);
                if (tmpValue == null) {
                  mergeUnknownVarintField(8, tmpRaw);
                } else {
                  sessionInitiator_ = tmpRaw;
                  bitField0_ |= 0x00000020;
                }
                break;
              } // case 64
              case 802: {
                input.readMessage(
                    getFtraceConfigFieldBuilder().getBuilder(),
                    extensionRegistry);
                bitField0_ |= 0x00000080;
                break;
              } // case 802
              case 810: {
                input.readMessage(
                    getChromeConfigFieldBuilder().getBuilder(),
                    extensionRegistry);
                bitField0_ |= 0x02000000;
                break;
              } // case 810
              case 818: {
                input.readMessage(
                    getInodeFileConfigFieldBuilder().getBuilder(),
                    extensionRegistry);
                bitField0_ |= 0x00000100;
                break;
              } // case 818
              case 826: {
                input.readMessage(
                    getProcessStatsConfigFieldBuilder().getBuilder(),
                    extensionRegistry);
                bitField0_ |= 0x00000200;
                break;
              } // case 826
              case 834: {
                input.readMessage(
                    getSysStatsConfigFieldBuilder().getBuilder(),
                    extensionRegistry);
                bitField0_ |= 0x00000400;
                break;
              } // case 834
              case 842: {
                input.readMessage(
                    getHeapprofdConfigFieldBuilder().getBuilder(),
                    extensionRegistry);
                bitField0_ |= 0x00000800;
                break;
              } // case 842
              case 850: {
                input.readMessage(
                    getAndroidPowerConfigFieldBuilder().getBuilder(),
                    extensionRegistry);
                bitField0_ |= 0x00002000;
                break;
              } // case 850
              case 858: {
                input.readMessage(
                    getAndroidLogConfigFieldBuilder().getBuilder(),
                    extensionRegistry);
                bitField0_ |= 0x00004000;
                break;
              } // case 858
              case 866: {
                input.readMessage(
                    getGpuCounterConfigFieldBuilder().getBuilder(),
                    extensionRegistry);
                bitField0_ |= 0x00008000;
                break;
              } // case 866
              case 874: {
                input.readMessage(
                    getPackagesListConfigFieldBuilder().getBuilder(),
                    extensionRegistry);
                bitField0_ |= 0x00020000;
                break;
              } // case 874
              case 882: {
                input.readMessage(
                    getJavaHprofConfigFieldBuilder().getBuilder(),
                    extensionRegistry);
                bitField0_ |= 0x00001000;
                break;
              } // case 882
              case 890: {
                input.readMessage(
                    getPerfEventConfigFieldBuilder().getBuilder(),
                    extensionRegistry);
                bitField0_ |= 0x00040000;
                break;
              } // case 890
              case 898: {
                input.readMessage(
                    getVulkanMemoryConfigFieldBuilder().getBuilder(),
                    extensionRegistry);
                bitField0_ |= 0x00080000;
                break;
              } // case 898
              case 906: {
                input.readMessage(
                    getTrackEventConfigFieldBuilder().getBuilder(),
                    extensionRegistry);
                bitField0_ |= 0x00100000;
                break;
              } // case 906
              case 914: {
                input.readMessage(
                    getAndroidPolledStateConfigFieldBuilder().getBuilder(),
                    extensionRegistry);
                bitField0_ |= 0x00200000;
                break;
              } // case 914
              case 922: {
                input.readMessage(
                    getInterceptorConfigFieldBuilder().getBuilder(),
                    extensionRegistry);
                bitField0_ |= 0x04000000;
                break;
              } // case 922
              case 930: {
                input.readMessage(
                    getAndroidGameInterventionListConfigFieldBuilder().getBuilder(),
                    extensionRegistry);
                bitField0_ |= 0x00010000;
                break;
              } // case 930
              case 938: {
                input.readMessage(
                    getStatsdTracingConfigFieldBuilder().getBuilder(),
                    extensionRegistry);
                bitField0_ |= 0x00800000;
                break;
              } // case 938
              case 946: {
                input.readMessage(
                    getAndroidSystemPropertyConfigFieldBuilder().getBuilder(),
                    extensionRegistry);
                bitField0_ |= 0x00400000;
                break;
              } // case 946
              case 954: {
                input.readMessage(
                    getSystemInfoConfigFieldBuilder().getBuilder(),
                    extensionRegistry);
                bitField0_ |= 0x01000000;
                break;
              } // case 954
              case 962: {
                input.readMessage(
                    getNetworkPacketTraceConfigFieldBuilder().getBuilder(),
                    extensionRegistry);
                bitField0_ |= 0x08000000;
                break;
              } // case 962
              case 8002: {
                legacyConfig_ = input.readBytes();
                bitField0_ |= 0x10000000;
                break;
              } // case 8002
              case 8010: {
                input.readMessage(
                    getForTestingFieldBuilder().getBuilder(),
                    extensionRegistry);
                bitField0_ |= 0x20000000;
                break;
              } // case 8010
              default: {
                if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                  done = true; // was an endgroup tag
                }
                break;
              } // default:
            } // switch (tag)
          } // while (!done)
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.unwrapIOException();
        } finally {
          onChanged();
        } // finally
        return this;
      }
      private int bitField0_;

      private java.lang.Object name_ = "";
      /**
       * <pre>
       * Data source unique name, e.g., "linux.ftrace". This must match
       * the name passed by the data source when it registers (see
       * RegisterDataSource()).
       * </pre>
       *
       * <code>optional string name = 1;</code>
       * @return Whether the name field is set.
       */
      public boolean hasName() {
        return ((bitField0_ & 0x00000001) != 0);
      }
      /**
       * <pre>
       * Data source unique name, e.g., "linux.ftrace". This must match
       * the name passed by the data source when it registers (see
       * RegisterDataSource()).
       * </pre>
       *
       * <code>optional string name = 1;</code>
       * @return The name.
       */
      public java.lang.String getName() {
        java.lang.Object ref = name_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          if (bs.isValidUtf8()) {
            name_ = s;
          }
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <pre>
       * Data source unique name, e.g., "linux.ftrace". This must match
       * the name passed by the data source when it registers (see
       * RegisterDataSource()).
       * </pre>
       *
       * <code>optional string name = 1;</code>
       * @return The bytes for name.
       */
      public com.google.protobuf.ByteString
          getNameBytes() {
        java.lang.Object ref = name_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          name_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <pre>
       * Data source unique name, e.g., "linux.ftrace". This must match
       * the name passed by the data source when it registers (see
       * RegisterDataSource()).
       * </pre>
       *
       * <code>optional string name = 1;</code>
       * @param value The name to set.
       * @return This builder for chaining.
       */
      public Builder setName(
          java.lang.String value) {
        if (value == null) { throw new NullPointerException(); }
        name_ = value;
        bitField0_ |= 0x00000001;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Data source unique name, e.g., "linux.ftrace". This must match
       * the name passed by the data source when it registers (see
       * RegisterDataSource()).
       * </pre>
       *
       * <code>optional string name = 1;</code>
       * @return This builder for chaining.
       */
      public Builder clearName() {
        name_ = getDefaultInstance().getName();
        bitField0_ = (bitField0_ & ~0x00000001);
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Data source unique name, e.g., "linux.ftrace". This must match
       * the name passed by the data source when it registers (see
       * RegisterDataSource()).
       * </pre>
       *
       * <code>optional string name = 1;</code>
       * @param value The bytes for name to set.
       * @return This builder for chaining.
       */
      public Builder setNameBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) { throw new NullPointerException(); }
        name_ = value;
        bitField0_ |= 0x00000001;
        onChanged();
        return this;
      }

      private int targetBuffer_ ;
      /**
       * <pre>
       * The index of the logging buffer where TracePacket(s) will be stored.
       * This field doesn't make a major difference for the Producer(s). The final
       * logging buffers, in fact, are completely owned by the Service. We just ask
       * the Producer to copy this number into the chunk headers it emits, so that
       * the Service can quickly identify the buffer where to move the chunks into
       * without expensive lookups on its fastpath.
       * </pre>
       *
       * <code>optional uint32 target_buffer = 2;</code>
       * @return Whether the targetBuffer field is set.
       */
      @java.lang.Override
      public boolean hasTargetBuffer() {
        return ((bitField0_ & 0x00000002) != 0);
      }
      /**
       * <pre>
       * The index of the logging buffer where TracePacket(s) will be stored.
       * This field doesn't make a major difference for the Producer(s). The final
       * logging buffers, in fact, are completely owned by the Service. We just ask
       * the Producer to copy this number into the chunk headers it emits, so that
       * the Service can quickly identify the buffer where to move the chunks into
       * without expensive lookups on its fastpath.
       * </pre>
       *
       * <code>optional uint32 target_buffer = 2;</code>
       * @return The targetBuffer.
       */
      @java.lang.Override
      public int getTargetBuffer() {
        return targetBuffer_;
      }
      /**
       * <pre>
       * The index of the logging buffer where TracePacket(s) will be stored.
       * This field doesn't make a major difference for the Producer(s). The final
       * logging buffers, in fact, are completely owned by the Service. We just ask
       * the Producer to copy this number into the chunk headers it emits, so that
       * the Service can quickly identify the buffer where to move the chunks into
       * without expensive lookups on its fastpath.
       * </pre>
       *
       * <code>optional uint32 target_buffer = 2;</code>
       * @param value The targetBuffer to set.
       * @return This builder for chaining.
       */
      public Builder setTargetBuffer(int value) {
        
        targetBuffer_ = value;
        bitField0_ |= 0x00000002;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * The index of the logging buffer where TracePacket(s) will be stored.
       * This field doesn't make a major difference for the Producer(s). The final
       * logging buffers, in fact, are completely owned by the Service. We just ask
       * the Producer to copy this number into the chunk headers it emits, so that
       * the Service can quickly identify the buffer where to move the chunks into
       * without expensive lookups on its fastpath.
       * </pre>
       *
       * <code>optional uint32 target_buffer = 2;</code>
       * @return This builder for chaining.
       */
      public Builder clearTargetBuffer() {
        bitField0_ = (bitField0_ & ~0x00000002);
        targetBuffer_ = 0;
        onChanged();
        return this;
      }

      private int traceDurationMs_ ;
      /**
       * <pre>
       * Set by the service to indicate the duration of the trace.
       * DO NOT SET in consumer as this will be overridden by the service.
       * </pre>
       *
       * <code>optional uint32 trace_duration_ms = 3;</code>
       * @return Whether the traceDurationMs field is set.
       */
      @java.lang.Override
      public boolean hasTraceDurationMs() {
        return ((bitField0_ & 0x00000004) != 0);
      }
      /**
       * <pre>
       * Set by the service to indicate the duration of the trace.
       * DO NOT SET in consumer as this will be overridden by the service.
       * </pre>
       *
       * <code>optional uint32 trace_duration_ms = 3;</code>
       * @return The traceDurationMs.
       */
      @java.lang.Override
      public int getTraceDurationMs() {
        return traceDurationMs_;
      }
      /**
       * <pre>
       * Set by the service to indicate the duration of the trace.
       * DO NOT SET in consumer as this will be overridden by the service.
       * </pre>
       *
       * <code>optional uint32 trace_duration_ms = 3;</code>
       * @param value The traceDurationMs to set.
       * @return This builder for chaining.
       */
      public Builder setTraceDurationMs(int value) {
        
        traceDurationMs_ = value;
        bitField0_ |= 0x00000004;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Set by the service to indicate the duration of the trace.
       * DO NOT SET in consumer as this will be overridden by the service.
       * </pre>
       *
       * <code>optional uint32 trace_duration_ms = 3;</code>
       * @return This builder for chaining.
       */
      public Builder clearTraceDurationMs() {
        bitField0_ = (bitField0_ & ~0x00000004);
        traceDurationMs_ = 0;
        onChanged();
        return this;
      }

      private int stopTimeoutMs_ ;
      /**
       * <pre>
       * Set by the service to indicate how long it waits after StopDataSource.
       * DO NOT SET in consumer as this will be overridden by the service.
       * </pre>
       *
       * <code>optional uint32 stop_timeout_ms = 7;</code>
       * @return Whether the stopTimeoutMs field is set.
       */
      @java.lang.Override
      public boolean hasStopTimeoutMs() {
        return ((bitField0_ & 0x00000008) != 0);
      }
      /**
       * <pre>
       * Set by the service to indicate how long it waits after StopDataSource.
       * DO NOT SET in consumer as this will be overridden by the service.
       * </pre>
       *
       * <code>optional uint32 stop_timeout_ms = 7;</code>
       * @return The stopTimeoutMs.
       */
      @java.lang.Override
      public int getStopTimeoutMs() {
        return stopTimeoutMs_;
      }
      /**
       * <pre>
       * Set by the service to indicate how long it waits after StopDataSource.
       * DO NOT SET in consumer as this will be overridden by the service.
       * </pre>
       *
       * <code>optional uint32 stop_timeout_ms = 7;</code>
       * @param value The stopTimeoutMs to set.
       * @return This builder for chaining.
       */
      public Builder setStopTimeoutMs(int value) {
        
        stopTimeoutMs_ = value;
        bitField0_ |= 0x00000008;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Set by the service to indicate how long it waits after StopDataSource.
       * DO NOT SET in consumer as this will be overridden by the service.
       * </pre>
       *
       * <code>optional uint32 stop_timeout_ms = 7;</code>
       * @return This builder for chaining.
       */
      public Builder clearStopTimeoutMs() {
        bitField0_ = (bitField0_ & ~0x00000008);
        stopTimeoutMs_ = 0;
        onChanged();
        return this;
      }

      private boolean enableExtraGuardrails_ ;
      /**
       * <pre>
       * Set by the service to indicate whether this tracing session has extra
       * guardrails.
       * DO NOT SET in consumer as this will be overridden by the service.
       * </pre>
       *
       * <code>optional bool enable_extra_guardrails = 6;</code>
       * @return Whether the enableExtraGuardrails field is set.
       */
      @java.lang.Override
      public boolean hasEnableExtraGuardrails() {
        return ((bitField0_ & 0x00000010) != 0);
      }
      /**
       * <pre>
       * Set by the service to indicate whether this tracing session has extra
       * guardrails.
       * DO NOT SET in consumer as this will be overridden by the service.
       * </pre>
       *
       * <code>optional bool enable_extra_guardrails = 6;</code>
       * @return The enableExtraGuardrails.
       */
      @java.lang.Override
      public boolean getEnableExtraGuardrails() {
        return enableExtraGuardrails_;
      }
      /**
       * <pre>
       * Set by the service to indicate whether this tracing session has extra
       * guardrails.
       * DO NOT SET in consumer as this will be overridden by the service.
       * </pre>
       *
       * <code>optional bool enable_extra_guardrails = 6;</code>
       * @param value The enableExtraGuardrails to set.
       * @return This builder for chaining.
       */
      public Builder setEnableExtraGuardrails(boolean value) {
        
        enableExtraGuardrails_ = value;
        bitField0_ |= 0x00000010;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Set by the service to indicate whether this tracing session has extra
       * guardrails.
       * DO NOT SET in consumer as this will be overridden by the service.
       * </pre>
       *
       * <code>optional bool enable_extra_guardrails = 6;</code>
       * @return This builder for chaining.
       */
      public Builder clearEnableExtraGuardrails() {
        bitField0_ = (bitField0_ & ~0x00000010);
        enableExtraGuardrails_ = false;
        onChanged();
        return this;
      }

      private int sessionInitiator_ = 0;
      /**
       * <pre>
       * Set by the service to indicate which user initiated this trace.
       * DO NOT SET in consumer as this will be overridden by the service.
       * </pre>
       *
       * <code>optional .perfetto.protos.DataSourceConfig.SessionInitiator session_initiator = 8;</code>
       * @return Whether the sessionInitiator field is set.
       */
      @java.lang.Override public boolean hasSessionInitiator() {
        return ((bitField0_ & 0x00000020) != 0);
      }
      /**
       * <pre>
       * Set by the service to indicate which user initiated this trace.
       * DO NOT SET in consumer as this will be overridden by the service.
       * </pre>
       *
       * <code>optional .perfetto.protos.DataSourceConfig.SessionInitiator session_initiator = 8;</code>
       * @return The sessionInitiator.
       */
      @java.lang.Override
      public perfetto.protos.DataSourceConfigOuterClass.DataSourceConfig.SessionInitiator getSessionInitiator() {
        perfetto.protos.DataSourceConfigOuterClass.DataSourceConfig.SessionInitiator result = perfetto.protos.DataSourceConfigOuterClass.DataSourceConfig.SessionInitiator.forNumber(sessionInitiator_);
        return result == null ? perfetto.protos.DataSourceConfigOuterClass.DataSourceConfig.SessionInitiator.SESSION_INITIATOR_UNSPECIFIED : result;
      }
      /**
       * <pre>
       * Set by the service to indicate which user initiated this trace.
       * DO NOT SET in consumer as this will be overridden by the service.
       * </pre>
       *
       * <code>optional .perfetto.protos.DataSourceConfig.SessionInitiator session_initiator = 8;</code>
       * @param value The sessionInitiator to set.
       * @return This builder for chaining.
       */
      public Builder setSessionInitiator(perfetto.protos.DataSourceConfigOuterClass.DataSourceConfig.SessionInitiator value) {
        if (value == null) {
          throw new NullPointerException();
        }
        bitField0_ |= 0x00000020;
        sessionInitiator_ = value.getNumber();
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Set by the service to indicate which user initiated this trace.
       * DO NOT SET in consumer as this will be overridden by the service.
       * </pre>
       *
       * <code>optional .perfetto.protos.DataSourceConfig.SessionInitiator session_initiator = 8;</code>
       * @return This builder for chaining.
       */
      public Builder clearSessionInitiator() {
        bitField0_ = (bitField0_ & ~0x00000020);
        sessionInitiator_ = 0;
        onChanged();
        return this;
      }

      private long tracingSessionId_ ;
      /**
       * <pre>
       * Set by the service to indicate which tracing session the data source
       * belongs to. The intended use case for this is checking if two data sources,
       * one of which produces metadata for the other one, belong to the same trace
       * session and hence should be linked together.
       * This field was introduced in Aug 2018 after Android P.
       * DO NOT SET in consumer as this will be overridden by the service.
       * </pre>
       *
       * <code>optional uint64 tracing_session_id = 4;</code>
       * @return Whether the tracingSessionId field is set.
       */
      @java.lang.Override
      public boolean hasTracingSessionId() {
        return ((bitField0_ & 0x00000040) != 0);
      }
      /**
       * <pre>
       * Set by the service to indicate which tracing session the data source
       * belongs to. The intended use case for this is checking if two data sources,
       * one of which produces metadata for the other one, belong to the same trace
       * session and hence should be linked together.
       * This field was introduced in Aug 2018 after Android P.
       * DO NOT SET in consumer as this will be overridden by the service.
       * </pre>
       *
       * <code>optional uint64 tracing_session_id = 4;</code>
       * @return The tracingSessionId.
       */
      @java.lang.Override
      public long getTracingSessionId() {
        return tracingSessionId_;
      }
      /**
       * <pre>
       * Set by the service to indicate which tracing session the data source
       * belongs to. The intended use case for this is checking if two data sources,
       * one of which produces metadata for the other one, belong to the same trace
       * session and hence should be linked together.
       * This field was introduced in Aug 2018 after Android P.
       * DO NOT SET in consumer as this will be overridden by the service.
       * </pre>
       *
       * <code>optional uint64 tracing_session_id = 4;</code>
       * @param value The tracingSessionId to set.
       * @return This builder for chaining.
       */
      public Builder setTracingSessionId(long value) {
        
        tracingSessionId_ = value;
        bitField0_ |= 0x00000040;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Set by the service to indicate which tracing session the data source
       * belongs to. The intended use case for this is checking if two data sources,
       * one of which produces metadata for the other one, belong to the same trace
       * session and hence should be linked together.
       * This field was introduced in Aug 2018 after Android P.
       * DO NOT SET in consumer as this will be overridden by the service.
       * </pre>
       *
       * <code>optional uint64 tracing_session_id = 4;</code>
       * @return This builder for chaining.
       */
      public Builder clearTracingSessionId() {
        bitField0_ = (bitField0_ & ~0x00000040);
        tracingSessionId_ = 0L;
        onChanged();
        return this;
      }

      private perfetto.protos.FtraceConfigOuterClass.FtraceConfig ftraceConfig_;
      private com.google.protobuf.SingleFieldBuilderV3<
          perfetto.protos.FtraceConfigOuterClass.FtraceConfig, perfetto.protos.FtraceConfigOuterClass.FtraceConfig.Builder, perfetto.protos.FtraceConfigOuterClass.FtraceConfigOrBuilder> ftraceConfigBuilder_;
      /**
       * <pre>
       * Data source name: linux.ftrace
       * </pre>
       *
       * <code>optional .perfetto.protos.FtraceConfig ftrace_config = 100 [lazy = true];</code>
       * @return Whether the ftraceConfig field is set.
       */
      public boolean hasFtraceConfig() {
        return ((bitField0_ & 0x00000080) != 0);
      }
      /**
       * <pre>
       * Data source name: linux.ftrace
       * </pre>
       *
       * <code>optional .perfetto.protos.FtraceConfig ftrace_config = 100 [lazy = true];</code>
       * @return The ftraceConfig.
       */
      public perfetto.protos.FtraceConfigOuterClass.FtraceConfig getFtraceConfig() {
        if (ftraceConfigBuilder_ == null) {
          return ftraceConfig_ == null ? perfetto.protos.FtraceConfigOuterClass.FtraceConfig.getDefaultInstance() : ftraceConfig_;
        } else {
          return ftraceConfigBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       * Data source name: linux.ftrace
       * </pre>
       *
       * <code>optional .perfetto.protos.FtraceConfig ftrace_config = 100 [lazy = true];</code>
       */
      public Builder setFtraceConfig(perfetto.protos.FtraceConfigOuterClass.FtraceConfig value) {
        if (ftraceConfigBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ftraceConfig_ = value;
        } else {
          ftraceConfigBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000080;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Data source name: linux.ftrace
       * </pre>
       *
       * <code>optional .perfetto.protos.FtraceConfig ftrace_config = 100 [lazy = true];</code>
       */
      public Builder setFtraceConfig(
          perfetto.protos.FtraceConfigOuterClass.FtraceConfig.Builder builderForValue) {
        if (ftraceConfigBuilder_ == null) {
          ftraceConfig_ = builderForValue.build();
        } else {
          ftraceConfigBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000080;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Data source name: linux.ftrace
       * </pre>
       *
       * <code>optional .perfetto.protos.FtraceConfig ftrace_config = 100 [lazy = true];</code>
       */
      public Builder mergeFtraceConfig(perfetto.protos.FtraceConfigOuterClass.FtraceConfig value) {
        if (ftraceConfigBuilder_ == null) {
          if (((bitField0_ & 0x00000080) != 0) &&
            ftraceConfig_ != null &&
            ftraceConfig_ != perfetto.protos.FtraceConfigOuterClass.FtraceConfig.getDefaultInstance()) {
            getFtraceConfigBuilder().mergeFrom(value);
          } else {
            ftraceConfig_ = value;
          }
        } else {
          ftraceConfigBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00000080;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Data source name: linux.ftrace
       * </pre>
       *
       * <code>optional .perfetto.protos.FtraceConfig ftrace_config = 100 [lazy = true];</code>
       */
      public Builder clearFtraceConfig() {
        bitField0_ = (bitField0_ & ~0x00000080);
        ftraceConfig_ = null;
        if (ftraceConfigBuilder_ != null) {
          ftraceConfigBuilder_.dispose();
          ftraceConfigBuilder_ = null;
        }
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Data source name: linux.ftrace
       * </pre>
       *
       * <code>optional .perfetto.protos.FtraceConfig ftrace_config = 100 [lazy = true];</code>
       */
      public perfetto.protos.FtraceConfigOuterClass.FtraceConfig.Builder getFtraceConfigBuilder() {
        bitField0_ |= 0x00000080;
        onChanged();
        return getFtraceConfigFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       * Data source name: linux.ftrace
       * </pre>
       *
       * <code>optional .perfetto.protos.FtraceConfig ftrace_config = 100 [lazy = true];</code>
       */
      public perfetto.protos.FtraceConfigOuterClass.FtraceConfigOrBuilder getFtraceConfigOrBuilder() {
        if (ftraceConfigBuilder_ != null) {
          return ftraceConfigBuilder_.getMessageOrBuilder();
        } else {
          return ftraceConfig_ == null ?
              perfetto.protos.FtraceConfigOuterClass.FtraceConfig.getDefaultInstance() : ftraceConfig_;
        }
      }
      /**
       * <pre>
       * Data source name: linux.ftrace
       * </pre>
       *
       * <code>optional .perfetto.protos.FtraceConfig ftrace_config = 100 [lazy = true];</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          perfetto.protos.FtraceConfigOuterClass.FtraceConfig, perfetto.protos.FtraceConfigOuterClass.FtraceConfig.Builder, perfetto.protos.FtraceConfigOuterClass.FtraceConfigOrBuilder> 
          getFtraceConfigFieldBuilder() {
        if (ftraceConfigBuilder_ == null) {
          ftraceConfigBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              perfetto.protos.FtraceConfigOuterClass.FtraceConfig, perfetto.protos.FtraceConfigOuterClass.FtraceConfig.Builder, perfetto.protos.FtraceConfigOuterClass.FtraceConfigOrBuilder>(
                  getFtraceConfig(),
                  getParentForChildren(),
                  isClean());
          ftraceConfig_ = null;
        }
        return ftraceConfigBuilder_;
      }

      private perfetto.protos.InodeFileConfigOuterClass.InodeFileConfig inodeFileConfig_;
      private com.google.protobuf.SingleFieldBuilderV3<
          perfetto.protos.InodeFileConfigOuterClass.InodeFileConfig, perfetto.protos.InodeFileConfigOuterClass.InodeFileConfig.Builder, perfetto.protos.InodeFileConfigOuterClass.InodeFileConfigOrBuilder> inodeFileConfigBuilder_;
      /**
       * <pre>
       * Data source name: linux.inode_file_map
       * </pre>
       *
       * <code>optional .perfetto.protos.InodeFileConfig inode_file_config = 102 [lazy = true];</code>
       * @return Whether the inodeFileConfig field is set.
       */
      public boolean hasInodeFileConfig() {
        return ((bitField0_ & 0x00000100) != 0);
      }
      /**
       * <pre>
       * Data source name: linux.inode_file_map
       * </pre>
       *
       * <code>optional .perfetto.protos.InodeFileConfig inode_file_config = 102 [lazy = true];</code>
       * @return The inodeFileConfig.
       */
      public perfetto.protos.InodeFileConfigOuterClass.InodeFileConfig getInodeFileConfig() {
        if (inodeFileConfigBuilder_ == null) {
          return inodeFileConfig_ == null ? perfetto.protos.InodeFileConfigOuterClass.InodeFileConfig.getDefaultInstance() : inodeFileConfig_;
        } else {
          return inodeFileConfigBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       * Data source name: linux.inode_file_map
       * </pre>
       *
       * <code>optional .perfetto.protos.InodeFileConfig inode_file_config = 102 [lazy = true];</code>
       */
      public Builder setInodeFileConfig(perfetto.protos.InodeFileConfigOuterClass.InodeFileConfig value) {
        if (inodeFileConfigBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          inodeFileConfig_ = value;
        } else {
          inodeFileConfigBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000100;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Data source name: linux.inode_file_map
       * </pre>
       *
       * <code>optional .perfetto.protos.InodeFileConfig inode_file_config = 102 [lazy = true];</code>
       */
      public Builder setInodeFileConfig(
          perfetto.protos.InodeFileConfigOuterClass.InodeFileConfig.Builder builderForValue) {
        if (inodeFileConfigBuilder_ == null) {
          inodeFileConfig_ = builderForValue.build();
        } else {
          inodeFileConfigBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000100;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Data source name: linux.inode_file_map
       * </pre>
       *
       * <code>optional .perfetto.protos.InodeFileConfig inode_file_config = 102 [lazy = true];</code>
       */
      public Builder mergeInodeFileConfig(perfetto.protos.InodeFileConfigOuterClass.InodeFileConfig value) {
        if (inodeFileConfigBuilder_ == null) {
          if (((bitField0_ & 0x00000100) != 0) &&
            inodeFileConfig_ != null &&
            inodeFileConfig_ != perfetto.protos.InodeFileConfigOuterClass.InodeFileConfig.getDefaultInstance()) {
            getInodeFileConfigBuilder().mergeFrom(value);
          } else {
            inodeFileConfig_ = value;
          }
        } else {
          inodeFileConfigBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00000100;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Data source name: linux.inode_file_map
       * </pre>
       *
       * <code>optional .perfetto.protos.InodeFileConfig inode_file_config = 102 [lazy = true];</code>
       */
      public Builder clearInodeFileConfig() {
        bitField0_ = (bitField0_ & ~0x00000100);
        inodeFileConfig_ = null;
        if (inodeFileConfigBuilder_ != null) {
          inodeFileConfigBuilder_.dispose();
          inodeFileConfigBuilder_ = null;
        }
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Data source name: linux.inode_file_map
       * </pre>
       *
       * <code>optional .perfetto.protos.InodeFileConfig inode_file_config = 102 [lazy = true];</code>
       */
      public perfetto.protos.InodeFileConfigOuterClass.InodeFileConfig.Builder getInodeFileConfigBuilder() {
        bitField0_ |= 0x00000100;
        onChanged();
        return getInodeFileConfigFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       * Data source name: linux.inode_file_map
       * </pre>
       *
       * <code>optional .perfetto.protos.InodeFileConfig inode_file_config = 102 [lazy = true];</code>
       */
      public perfetto.protos.InodeFileConfigOuterClass.InodeFileConfigOrBuilder getInodeFileConfigOrBuilder() {
        if (inodeFileConfigBuilder_ != null) {
          return inodeFileConfigBuilder_.getMessageOrBuilder();
        } else {
          return inodeFileConfig_ == null ?
              perfetto.protos.InodeFileConfigOuterClass.InodeFileConfig.getDefaultInstance() : inodeFileConfig_;
        }
      }
      /**
       * <pre>
       * Data source name: linux.inode_file_map
       * </pre>
       *
       * <code>optional .perfetto.protos.InodeFileConfig inode_file_config = 102 [lazy = true];</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          perfetto.protos.InodeFileConfigOuterClass.InodeFileConfig, perfetto.protos.InodeFileConfigOuterClass.InodeFileConfig.Builder, perfetto.protos.InodeFileConfigOuterClass.InodeFileConfigOrBuilder> 
          getInodeFileConfigFieldBuilder() {
        if (inodeFileConfigBuilder_ == null) {
          inodeFileConfigBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              perfetto.protos.InodeFileConfigOuterClass.InodeFileConfig, perfetto.protos.InodeFileConfigOuterClass.InodeFileConfig.Builder, perfetto.protos.InodeFileConfigOuterClass.InodeFileConfigOrBuilder>(
                  getInodeFileConfig(),
                  getParentForChildren(),
                  isClean());
          inodeFileConfig_ = null;
        }
        return inodeFileConfigBuilder_;
      }

      private perfetto.protos.ProcessStatsConfigOuterClass.ProcessStatsConfig processStatsConfig_;
      private com.google.protobuf.SingleFieldBuilderV3<
          perfetto.protos.ProcessStatsConfigOuterClass.ProcessStatsConfig, perfetto.protos.ProcessStatsConfigOuterClass.ProcessStatsConfig.Builder, perfetto.protos.ProcessStatsConfigOuterClass.ProcessStatsConfigOrBuilder> processStatsConfigBuilder_;
      /**
       * <pre>
       * Data source name: linux.process_stats
       * </pre>
       *
       * <code>optional .perfetto.protos.ProcessStatsConfig process_stats_config = 103 [lazy = true];</code>
       * @return Whether the processStatsConfig field is set.
       */
      public boolean hasProcessStatsConfig() {
        return ((bitField0_ & 0x00000200) != 0);
      }
      /**
       * <pre>
       * Data source name: linux.process_stats
       * </pre>
       *
       * <code>optional .perfetto.protos.ProcessStatsConfig process_stats_config = 103 [lazy = true];</code>
       * @return The processStatsConfig.
       */
      public perfetto.protos.ProcessStatsConfigOuterClass.ProcessStatsConfig getProcessStatsConfig() {
        if (processStatsConfigBuilder_ == null) {
          return processStatsConfig_ == null ? perfetto.protos.ProcessStatsConfigOuterClass.ProcessStatsConfig.getDefaultInstance() : processStatsConfig_;
        } else {
          return processStatsConfigBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       * Data source name: linux.process_stats
       * </pre>
       *
       * <code>optional .perfetto.protos.ProcessStatsConfig process_stats_config = 103 [lazy = true];</code>
       */
      public Builder setProcessStatsConfig(perfetto.protos.ProcessStatsConfigOuterClass.ProcessStatsConfig value) {
        if (processStatsConfigBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          processStatsConfig_ = value;
        } else {
          processStatsConfigBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000200;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Data source name: linux.process_stats
       * </pre>
       *
       * <code>optional .perfetto.protos.ProcessStatsConfig process_stats_config = 103 [lazy = true];</code>
       */
      public Builder setProcessStatsConfig(
          perfetto.protos.ProcessStatsConfigOuterClass.ProcessStatsConfig.Builder builderForValue) {
        if (processStatsConfigBuilder_ == null) {
          processStatsConfig_ = builderForValue.build();
        } else {
          processStatsConfigBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000200;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Data source name: linux.process_stats
       * </pre>
       *
       * <code>optional .perfetto.protos.ProcessStatsConfig process_stats_config = 103 [lazy = true];</code>
       */
      public Builder mergeProcessStatsConfig(perfetto.protos.ProcessStatsConfigOuterClass.ProcessStatsConfig value) {
        if (processStatsConfigBuilder_ == null) {
          if (((bitField0_ & 0x00000200) != 0) &&
            processStatsConfig_ != null &&
            processStatsConfig_ != perfetto.protos.ProcessStatsConfigOuterClass.ProcessStatsConfig.getDefaultInstance()) {
            getProcessStatsConfigBuilder().mergeFrom(value);
          } else {
            processStatsConfig_ = value;
          }
        } else {
          processStatsConfigBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00000200;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Data source name: linux.process_stats
       * </pre>
       *
       * <code>optional .perfetto.protos.ProcessStatsConfig process_stats_config = 103 [lazy = true];</code>
       */
      public Builder clearProcessStatsConfig() {
        bitField0_ = (bitField0_ & ~0x00000200);
        processStatsConfig_ = null;
        if (processStatsConfigBuilder_ != null) {
          processStatsConfigBuilder_.dispose();
          processStatsConfigBuilder_ = null;
        }
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Data source name: linux.process_stats
       * </pre>
       *
       * <code>optional .perfetto.protos.ProcessStatsConfig process_stats_config = 103 [lazy = true];</code>
       */
      public perfetto.protos.ProcessStatsConfigOuterClass.ProcessStatsConfig.Builder getProcessStatsConfigBuilder() {
        bitField0_ |= 0x00000200;
        onChanged();
        return getProcessStatsConfigFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       * Data source name: linux.process_stats
       * </pre>
       *
       * <code>optional .perfetto.protos.ProcessStatsConfig process_stats_config = 103 [lazy = true];</code>
       */
      public perfetto.protos.ProcessStatsConfigOuterClass.ProcessStatsConfigOrBuilder getProcessStatsConfigOrBuilder() {
        if (processStatsConfigBuilder_ != null) {
          return processStatsConfigBuilder_.getMessageOrBuilder();
        } else {
          return processStatsConfig_ == null ?
              perfetto.protos.ProcessStatsConfigOuterClass.ProcessStatsConfig.getDefaultInstance() : processStatsConfig_;
        }
      }
      /**
       * <pre>
       * Data source name: linux.process_stats
       * </pre>
       *
       * <code>optional .perfetto.protos.ProcessStatsConfig process_stats_config = 103 [lazy = true];</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          perfetto.protos.ProcessStatsConfigOuterClass.ProcessStatsConfig, perfetto.protos.ProcessStatsConfigOuterClass.ProcessStatsConfig.Builder, perfetto.protos.ProcessStatsConfigOuterClass.ProcessStatsConfigOrBuilder> 
          getProcessStatsConfigFieldBuilder() {
        if (processStatsConfigBuilder_ == null) {
          processStatsConfigBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              perfetto.protos.ProcessStatsConfigOuterClass.ProcessStatsConfig, perfetto.protos.ProcessStatsConfigOuterClass.ProcessStatsConfig.Builder, perfetto.protos.ProcessStatsConfigOuterClass.ProcessStatsConfigOrBuilder>(
                  getProcessStatsConfig(),
                  getParentForChildren(),
                  isClean());
          processStatsConfig_ = null;
        }
        return processStatsConfigBuilder_;
      }

      private perfetto.protos.SysStatsConfigOuterClass.SysStatsConfig sysStatsConfig_;
      private com.google.protobuf.SingleFieldBuilderV3<
          perfetto.protos.SysStatsConfigOuterClass.SysStatsConfig, perfetto.protos.SysStatsConfigOuterClass.SysStatsConfig.Builder, perfetto.protos.SysStatsConfigOuterClass.SysStatsConfigOrBuilder> sysStatsConfigBuilder_;
      /**
       * <pre>
       * Data source name: linux.sys_stats
       * </pre>
       *
       * <code>optional .perfetto.protos.SysStatsConfig sys_stats_config = 104 [lazy = true];</code>
       * @return Whether the sysStatsConfig field is set.
       */
      public boolean hasSysStatsConfig() {
        return ((bitField0_ & 0x00000400) != 0);
      }
      /**
       * <pre>
       * Data source name: linux.sys_stats
       * </pre>
       *
       * <code>optional .perfetto.protos.SysStatsConfig sys_stats_config = 104 [lazy = true];</code>
       * @return The sysStatsConfig.
       */
      public perfetto.protos.SysStatsConfigOuterClass.SysStatsConfig getSysStatsConfig() {
        if (sysStatsConfigBuilder_ == null) {
          return sysStatsConfig_ == null ? perfetto.protos.SysStatsConfigOuterClass.SysStatsConfig.getDefaultInstance() : sysStatsConfig_;
        } else {
          return sysStatsConfigBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       * Data source name: linux.sys_stats
       * </pre>
       *
       * <code>optional .perfetto.protos.SysStatsConfig sys_stats_config = 104 [lazy = true];</code>
       */
      public Builder setSysStatsConfig(perfetto.protos.SysStatsConfigOuterClass.SysStatsConfig value) {
        if (sysStatsConfigBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          sysStatsConfig_ = value;
        } else {
          sysStatsConfigBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000400;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Data source name: linux.sys_stats
       * </pre>
       *
       * <code>optional .perfetto.protos.SysStatsConfig sys_stats_config = 104 [lazy = true];</code>
       */
      public Builder setSysStatsConfig(
          perfetto.protos.SysStatsConfigOuterClass.SysStatsConfig.Builder builderForValue) {
        if (sysStatsConfigBuilder_ == null) {
          sysStatsConfig_ = builderForValue.build();
        } else {
          sysStatsConfigBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000400;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Data source name: linux.sys_stats
       * </pre>
       *
       * <code>optional .perfetto.protos.SysStatsConfig sys_stats_config = 104 [lazy = true];</code>
       */
      public Builder mergeSysStatsConfig(perfetto.protos.SysStatsConfigOuterClass.SysStatsConfig value) {
        if (sysStatsConfigBuilder_ == null) {
          if (((bitField0_ & 0x00000400) != 0) &&
            sysStatsConfig_ != null &&
            sysStatsConfig_ != perfetto.protos.SysStatsConfigOuterClass.SysStatsConfig.getDefaultInstance()) {
            getSysStatsConfigBuilder().mergeFrom(value);
          } else {
            sysStatsConfig_ = value;
          }
        } else {
          sysStatsConfigBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00000400;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Data source name: linux.sys_stats
       * </pre>
       *
       * <code>optional .perfetto.protos.SysStatsConfig sys_stats_config = 104 [lazy = true];</code>
       */
      public Builder clearSysStatsConfig() {
        bitField0_ = (bitField0_ & ~0x00000400);
        sysStatsConfig_ = null;
        if (sysStatsConfigBuilder_ != null) {
          sysStatsConfigBuilder_.dispose();
          sysStatsConfigBuilder_ = null;
        }
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Data source name: linux.sys_stats
       * </pre>
       *
       * <code>optional .perfetto.protos.SysStatsConfig sys_stats_config = 104 [lazy = true];</code>
       */
      public perfetto.protos.SysStatsConfigOuterClass.SysStatsConfig.Builder getSysStatsConfigBuilder() {
        bitField0_ |= 0x00000400;
        onChanged();
        return getSysStatsConfigFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       * Data source name: linux.sys_stats
       * </pre>
       *
       * <code>optional .perfetto.protos.SysStatsConfig sys_stats_config = 104 [lazy = true];</code>
       */
      public perfetto.protos.SysStatsConfigOuterClass.SysStatsConfigOrBuilder getSysStatsConfigOrBuilder() {
        if (sysStatsConfigBuilder_ != null) {
          return sysStatsConfigBuilder_.getMessageOrBuilder();
        } else {
          return sysStatsConfig_ == null ?
              perfetto.protos.SysStatsConfigOuterClass.SysStatsConfig.getDefaultInstance() : sysStatsConfig_;
        }
      }
      /**
       * <pre>
       * Data source name: linux.sys_stats
       * </pre>
       *
       * <code>optional .perfetto.protos.SysStatsConfig sys_stats_config = 104 [lazy = true];</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          perfetto.protos.SysStatsConfigOuterClass.SysStatsConfig, perfetto.protos.SysStatsConfigOuterClass.SysStatsConfig.Builder, perfetto.protos.SysStatsConfigOuterClass.SysStatsConfigOrBuilder> 
          getSysStatsConfigFieldBuilder() {
        if (sysStatsConfigBuilder_ == null) {
          sysStatsConfigBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              perfetto.protos.SysStatsConfigOuterClass.SysStatsConfig, perfetto.protos.SysStatsConfigOuterClass.SysStatsConfig.Builder, perfetto.protos.SysStatsConfigOuterClass.SysStatsConfigOrBuilder>(
                  getSysStatsConfig(),
                  getParentForChildren(),
                  isClean());
          sysStatsConfig_ = null;
        }
        return sysStatsConfigBuilder_;
      }

      private perfetto.protos.HeapprofdConfigOuterClass.HeapprofdConfig heapprofdConfig_;
      private com.google.protobuf.SingleFieldBuilderV3<
          perfetto.protos.HeapprofdConfigOuterClass.HeapprofdConfig, perfetto.protos.HeapprofdConfigOuterClass.HeapprofdConfig.Builder, perfetto.protos.HeapprofdConfigOuterClass.HeapprofdConfigOrBuilder> heapprofdConfigBuilder_;
      /**
       * <pre>
       * Data source name: android.heapprofd
       * Introduced in Android 10.
       * </pre>
       *
       * <code>optional .perfetto.protos.HeapprofdConfig heapprofd_config = 105 [lazy = true];</code>
       * @return Whether the heapprofdConfig field is set.
       */
      public boolean hasHeapprofdConfig() {
        return ((bitField0_ & 0x00000800) != 0);
      }
      /**
       * <pre>
       * Data source name: android.heapprofd
       * Introduced in Android 10.
       * </pre>
       *
       * <code>optional .perfetto.protos.HeapprofdConfig heapprofd_config = 105 [lazy = true];</code>
       * @return The heapprofdConfig.
       */
      public perfetto.protos.HeapprofdConfigOuterClass.HeapprofdConfig getHeapprofdConfig() {
        if (heapprofdConfigBuilder_ == null) {
          return heapprofdConfig_ == null ? perfetto.protos.HeapprofdConfigOuterClass.HeapprofdConfig.getDefaultInstance() : heapprofdConfig_;
        } else {
          return heapprofdConfigBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       * Data source name: android.heapprofd
       * Introduced in Android 10.
       * </pre>
       *
       * <code>optional .perfetto.protos.HeapprofdConfig heapprofd_config = 105 [lazy = true];</code>
       */
      public Builder setHeapprofdConfig(perfetto.protos.HeapprofdConfigOuterClass.HeapprofdConfig value) {
        if (heapprofdConfigBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          heapprofdConfig_ = value;
        } else {
          heapprofdConfigBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000800;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Data source name: android.heapprofd
       * Introduced in Android 10.
       * </pre>
       *
       * <code>optional .perfetto.protos.HeapprofdConfig heapprofd_config = 105 [lazy = true];</code>
       */
      public Builder setHeapprofdConfig(
          perfetto.protos.HeapprofdConfigOuterClass.HeapprofdConfig.Builder builderForValue) {
        if (heapprofdConfigBuilder_ == null) {
          heapprofdConfig_ = builderForValue.build();
        } else {
          heapprofdConfigBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000800;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Data source name: android.heapprofd
       * Introduced in Android 10.
       * </pre>
       *
       * <code>optional .perfetto.protos.HeapprofdConfig heapprofd_config = 105 [lazy = true];</code>
       */
      public Builder mergeHeapprofdConfig(perfetto.protos.HeapprofdConfigOuterClass.HeapprofdConfig value) {
        if (heapprofdConfigBuilder_ == null) {
          if (((bitField0_ & 0x00000800) != 0) &&
            heapprofdConfig_ != null &&
            heapprofdConfig_ != perfetto.protos.HeapprofdConfigOuterClass.HeapprofdConfig.getDefaultInstance()) {
            getHeapprofdConfigBuilder().mergeFrom(value);
          } else {
            heapprofdConfig_ = value;
          }
        } else {
          heapprofdConfigBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00000800;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Data source name: android.heapprofd
       * Introduced in Android 10.
       * </pre>
       *
       * <code>optional .perfetto.protos.HeapprofdConfig heapprofd_config = 105 [lazy = true];</code>
       */
      public Builder clearHeapprofdConfig() {
        bitField0_ = (bitField0_ & ~0x00000800);
        heapprofdConfig_ = null;
        if (heapprofdConfigBuilder_ != null) {
          heapprofdConfigBuilder_.dispose();
          heapprofdConfigBuilder_ = null;
        }
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Data source name: android.heapprofd
       * Introduced in Android 10.
       * </pre>
       *
       * <code>optional .perfetto.protos.HeapprofdConfig heapprofd_config = 105 [lazy = true];</code>
       */
      public perfetto.protos.HeapprofdConfigOuterClass.HeapprofdConfig.Builder getHeapprofdConfigBuilder() {
        bitField0_ |= 0x00000800;
        onChanged();
        return getHeapprofdConfigFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       * Data source name: android.heapprofd
       * Introduced in Android 10.
       * </pre>
       *
       * <code>optional .perfetto.protos.HeapprofdConfig heapprofd_config = 105 [lazy = true];</code>
       */
      public perfetto.protos.HeapprofdConfigOuterClass.HeapprofdConfigOrBuilder getHeapprofdConfigOrBuilder() {
        if (heapprofdConfigBuilder_ != null) {
          return heapprofdConfigBuilder_.getMessageOrBuilder();
        } else {
          return heapprofdConfig_ == null ?
              perfetto.protos.HeapprofdConfigOuterClass.HeapprofdConfig.getDefaultInstance() : heapprofdConfig_;
        }
      }
      /**
       * <pre>
       * Data source name: android.heapprofd
       * Introduced in Android 10.
       * </pre>
       *
       * <code>optional .perfetto.protos.HeapprofdConfig heapprofd_config = 105 [lazy = true];</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          perfetto.protos.HeapprofdConfigOuterClass.HeapprofdConfig, perfetto.protos.HeapprofdConfigOuterClass.HeapprofdConfig.Builder, perfetto.protos.HeapprofdConfigOuterClass.HeapprofdConfigOrBuilder> 
          getHeapprofdConfigFieldBuilder() {
        if (heapprofdConfigBuilder_ == null) {
          heapprofdConfigBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              perfetto.protos.HeapprofdConfigOuterClass.HeapprofdConfig, perfetto.protos.HeapprofdConfigOuterClass.HeapprofdConfig.Builder, perfetto.protos.HeapprofdConfigOuterClass.HeapprofdConfigOrBuilder>(
                  getHeapprofdConfig(),
                  getParentForChildren(),
                  isClean());
          heapprofdConfig_ = null;
        }
        return heapprofdConfigBuilder_;
      }

      private perfetto.protos.JavaHprofConfigOuterClass.JavaHprofConfig javaHprofConfig_;
      private com.google.protobuf.SingleFieldBuilderV3<
          perfetto.protos.JavaHprofConfigOuterClass.JavaHprofConfig, perfetto.protos.JavaHprofConfigOuterClass.JavaHprofConfig.Builder, perfetto.protos.JavaHprofConfigOuterClass.JavaHprofConfigOrBuilder> javaHprofConfigBuilder_;
      /**
       * <pre>
       * Data source name: android.java_hprof
       * Introduced in Android 11.
       * </pre>
       *
       * <code>optional .perfetto.protos.JavaHprofConfig java_hprof_config = 110 [lazy = true];</code>
       * @return Whether the javaHprofConfig field is set.
       */
      public boolean hasJavaHprofConfig() {
        return ((bitField0_ & 0x00001000) != 0);
      }
      /**
       * <pre>
       * Data source name: android.java_hprof
       * Introduced in Android 11.
       * </pre>
       *
       * <code>optional .perfetto.protos.JavaHprofConfig java_hprof_config = 110 [lazy = true];</code>
       * @return The javaHprofConfig.
       */
      public perfetto.protos.JavaHprofConfigOuterClass.JavaHprofConfig getJavaHprofConfig() {
        if (javaHprofConfigBuilder_ == null) {
          return javaHprofConfig_ == null ? perfetto.protos.JavaHprofConfigOuterClass.JavaHprofConfig.getDefaultInstance() : javaHprofConfig_;
        } else {
          return javaHprofConfigBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       * Data source name: android.java_hprof
       * Introduced in Android 11.
       * </pre>
       *
       * <code>optional .perfetto.protos.JavaHprofConfig java_hprof_config = 110 [lazy = true];</code>
       */
      public Builder setJavaHprofConfig(perfetto.protos.JavaHprofConfigOuterClass.JavaHprofConfig value) {
        if (javaHprofConfigBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          javaHprofConfig_ = value;
        } else {
          javaHprofConfigBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00001000;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Data source name: android.java_hprof
       * Introduced in Android 11.
       * </pre>
       *
       * <code>optional .perfetto.protos.JavaHprofConfig java_hprof_config = 110 [lazy = true];</code>
       */
      public Builder setJavaHprofConfig(
          perfetto.protos.JavaHprofConfigOuterClass.JavaHprofConfig.Builder builderForValue) {
        if (javaHprofConfigBuilder_ == null) {
          javaHprofConfig_ = builderForValue.build();
        } else {
          javaHprofConfigBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00001000;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Data source name: android.java_hprof
       * Introduced in Android 11.
       * </pre>
       *
       * <code>optional .perfetto.protos.JavaHprofConfig java_hprof_config = 110 [lazy = true];</code>
       */
      public Builder mergeJavaHprofConfig(perfetto.protos.JavaHprofConfigOuterClass.JavaHprofConfig value) {
        if (javaHprofConfigBuilder_ == null) {
          if (((bitField0_ & 0x00001000) != 0) &&
            javaHprofConfig_ != null &&
            javaHprofConfig_ != perfetto.protos.JavaHprofConfigOuterClass.JavaHprofConfig.getDefaultInstance()) {
            getJavaHprofConfigBuilder().mergeFrom(value);
          } else {
            javaHprofConfig_ = value;
          }
        } else {
          javaHprofConfigBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00001000;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Data source name: android.java_hprof
       * Introduced in Android 11.
       * </pre>
       *
       * <code>optional .perfetto.protos.JavaHprofConfig java_hprof_config = 110 [lazy = true];</code>
       */
      public Builder clearJavaHprofConfig() {
        bitField0_ = (bitField0_ & ~0x00001000);
        javaHprofConfig_ = null;
        if (javaHprofConfigBuilder_ != null) {
          javaHprofConfigBuilder_.dispose();
          javaHprofConfigBuilder_ = null;
        }
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Data source name: android.java_hprof
       * Introduced in Android 11.
       * </pre>
       *
       * <code>optional .perfetto.protos.JavaHprofConfig java_hprof_config = 110 [lazy = true];</code>
       */
      public perfetto.protos.JavaHprofConfigOuterClass.JavaHprofConfig.Builder getJavaHprofConfigBuilder() {
        bitField0_ |= 0x00001000;
        onChanged();
        return getJavaHprofConfigFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       * Data source name: android.java_hprof
       * Introduced in Android 11.
       * </pre>
       *
       * <code>optional .perfetto.protos.JavaHprofConfig java_hprof_config = 110 [lazy = true];</code>
       */
      public perfetto.protos.JavaHprofConfigOuterClass.JavaHprofConfigOrBuilder getJavaHprofConfigOrBuilder() {
        if (javaHprofConfigBuilder_ != null) {
          return javaHprofConfigBuilder_.getMessageOrBuilder();
        } else {
          return javaHprofConfig_ == null ?
              perfetto.protos.JavaHprofConfigOuterClass.JavaHprofConfig.getDefaultInstance() : javaHprofConfig_;
        }
      }
      /**
       * <pre>
       * Data source name: android.java_hprof
       * Introduced in Android 11.
       * </pre>
       *
       * <code>optional .perfetto.protos.JavaHprofConfig java_hprof_config = 110 [lazy = true];</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          perfetto.protos.JavaHprofConfigOuterClass.JavaHprofConfig, perfetto.protos.JavaHprofConfigOuterClass.JavaHprofConfig.Builder, perfetto.protos.JavaHprofConfigOuterClass.JavaHprofConfigOrBuilder> 
          getJavaHprofConfigFieldBuilder() {
        if (javaHprofConfigBuilder_ == null) {
          javaHprofConfigBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              perfetto.protos.JavaHprofConfigOuterClass.JavaHprofConfig, perfetto.protos.JavaHprofConfigOuterClass.JavaHprofConfig.Builder, perfetto.protos.JavaHprofConfigOuterClass.JavaHprofConfigOrBuilder>(
                  getJavaHprofConfig(),
                  getParentForChildren(),
                  isClean());
          javaHprofConfig_ = null;
        }
        return javaHprofConfigBuilder_;
      }

      private perfetto.protos.AndroidPowerConfigOuterClass.AndroidPowerConfig androidPowerConfig_;
      private com.google.protobuf.SingleFieldBuilderV3<
          perfetto.protos.AndroidPowerConfigOuterClass.AndroidPowerConfig, perfetto.protos.AndroidPowerConfigOuterClass.AndroidPowerConfig.Builder, perfetto.protos.AndroidPowerConfigOuterClass.AndroidPowerConfigOrBuilder> androidPowerConfigBuilder_;
      /**
       * <pre>
       * Data source name: android.power
       * </pre>
       *
       * <code>optional .perfetto.protos.AndroidPowerConfig android_power_config = 106 [lazy = true];</code>
       * @return Whether the androidPowerConfig field is set.
       */
      public boolean hasAndroidPowerConfig() {
        return ((bitField0_ & 0x00002000) != 0);
      }
      /**
       * <pre>
       * Data source name: android.power
       * </pre>
       *
       * <code>optional .perfetto.protos.AndroidPowerConfig android_power_config = 106 [lazy = true];</code>
       * @return The androidPowerConfig.
       */
      public perfetto.protos.AndroidPowerConfigOuterClass.AndroidPowerConfig getAndroidPowerConfig() {
        if (androidPowerConfigBuilder_ == null) {
          return androidPowerConfig_ == null ? perfetto.protos.AndroidPowerConfigOuterClass.AndroidPowerConfig.getDefaultInstance() : androidPowerConfig_;
        } else {
          return androidPowerConfigBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       * Data source name: android.power
       * </pre>
       *
       * <code>optional .perfetto.protos.AndroidPowerConfig android_power_config = 106 [lazy = true];</code>
       */
      public Builder setAndroidPowerConfig(perfetto.protos.AndroidPowerConfigOuterClass.AndroidPowerConfig value) {
        if (androidPowerConfigBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          androidPowerConfig_ = value;
        } else {
          androidPowerConfigBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00002000;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Data source name: android.power
       * </pre>
       *
       * <code>optional .perfetto.protos.AndroidPowerConfig android_power_config = 106 [lazy = true];</code>
       */
      public Builder setAndroidPowerConfig(
          perfetto.protos.AndroidPowerConfigOuterClass.AndroidPowerConfig.Builder builderForValue) {
        if (androidPowerConfigBuilder_ == null) {
          androidPowerConfig_ = builderForValue.build();
        } else {
          androidPowerConfigBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00002000;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Data source name: android.power
       * </pre>
       *
       * <code>optional .perfetto.protos.AndroidPowerConfig android_power_config = 106 [lazy = true];</code>
       */
      public Builder mergeAndroidPowerConfig(perfetto.protos.AndroidPowerConfigOuterClass.AndroidPowerConfig value) {
        if (androidPowerConfigBuilder_ == null) {
          if (((bitField0_ & 0x00002000) != 0) &&
            androidPowerConfig_ != null &&
            androidPowerConfig_ != perfetto.protos.AndroidPowerConfigOuterClass.AndroidPowerConfig.getDefaultInstance()) {
            getAndroidPowerConfigBuilder().mergeFrom(value);
          } else {
            androidPowerConfig_ = value;
          }
        } else {
          androidPowerConfigBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00002000;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Data source name: android.power
       * </pre>
       *
       * <code>optional .perfetto.protos.AndroidPowerConfig android_power_config = 106 [lazy = true];</code>
       */
      public Builder clearAndroidPowerConfig() {
        bitField0_ = (bitField0_ & ~0x00002000);
        androidPowerConfig_ = null;
        if (androidPowerConfigBuilder_ != null) {
          androidPowerConfigBuilder_.dispose();
          androidPowerConfigBuilder_ = null;
        }
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Data source name: android.power
       * </pre>
       *
       * <code>optional .perfetto.protos.AndroidPowerConfig android_power_config = 106 [lazy = true];</code>
       */
      public perfetto.protos.AndroidPowerConfigOuterClass.AndroidPowerConfig.Builder getAndroidPowerConfigBuilder() {
        bitField0_ |= 0x00002000;
        onChanged();
        return getAndroidPowerConfigFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       * Data source name: android.power
       * </pre>
       *
       * <code>optional .perfetto.protos.AndroidPowerConfig android_power_config = 106 [lazy = true];</code>
       */
      public perfetto.protos.AndroidPowerConfigOuterClass.AndroidPowerConfigOrBuilder getAndroidPowerConfigOrBuilder() {
        if (androidPowerConfigBuilder_ != null) {
          return androidPowerConfigBuilder_.getMessageOrBuilder();
        } else {
          return androidPowerConfig_ == null ?
              perfetto.protos.AndroidPowerConfigOuterClass.AndroidPowerConfig.getDefaultInstance() : androidPowerConfig_;
        }
      }
      /**
       * <pre>
       * Data source name: android.power
       * </pre>
       *
       * <code>optional .perfetto.protos.AndroidPowerConfig android_power_config = 106 [lazy = true];</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          perfetto.protos.AndroidPowerConfigOuterClass.AndroidPowerConfig, perfetto.protos.AndroidPowerConfigOuterClass.AndroidPowerConfig.Builder, perfetto.protos.AndroidPowerConfigOuterClass.AndroidPowerConfigOrBuilder> 
          getAndroidPowerConfigFieldBuilder() {
        if (androidPowerConfigBuilder_ == null) {
          androidPowerConfigBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              perfetto.protos.AndroidPowerConfigOuterClass.AndroidPowerConfig, perfetto.protos.AndroidPowerConfigOuterClass.AndroidPowerConfig.Builder, perfetto.protos.AndroidPowerConfigOuterClass.AndroidPowerConfigOrBuilder>(
                  getAndroidPowerConfig(),
                  getParentForChildren(),
                  isClean());
          androidPowerConfig_ = null;
        }
        return androidPowerConfigBuilder_;
      }

      private perfetto.protos.AndroidLogConfigOuterClass.AndroidLogConfig androidLogConfig_;
      private com.google.protobuf.SingleFieldBuilderV3<
          perfetto.protos.AndroidLogConfigOuterClass.AndroidLogConfig, perfetto.protos.AndroidLogConfigOuterClass.AndroidLogConfig.Builder, perfetto.protos.AndroidLogConfigOuterClass.AndroidLogConfigOrBuilder> androidLogConfigBuilder_;
      /**
       * <pre>
       * Data source name: android.log
       * </pre>
       *
       * <code>optional .perfetto.protos.AndroidLogConfig android_log_config = 107 [lazy = true];</code>
       * @return Whether the androidLogConfig field is set.
       */
      public boolean hasAndroidLogConfig() {
        return ((bitField0_ & 0x00004000) != 0);
      }
      /**
       * <pre>
       * Data source name: android.log
       * </pre>
       *
       * <code>optional .perfetto.protos.AndroidLogConfig android_log_config = 107 [lazy = true];</code>
       * @return The androidLogConfig.
       */
      public perfetto.protos.AndroidLogConfigOuterClass.AndroidLogConfig getAndroidLogConfig() {
        if (androidLogConfigBuilder_ == null) {
          return androidLogConfig_ == null ? perfetto.protos.AndroidLogConfigOuterClass.AndroidLogConfig.getDefaultInstance() : androidLogConfig_;
        } else {
          return androidLogConfigBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       * Data source name: android.log
       * </pre>
       *
       * <code>optional .perfetto.protos.AndroidLogConfig android_log_config = 107 [lazy = true];</code>
       */
      public Builder setAndroidLogConfig(perfetto.protos.AndroidLogConfigOuterClass.AndroidLogConfig value) {
        if (androidLogConfigBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          androidLogConfig_ = value;
        } else {
          androidLogConfigBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00004000;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Data source name: android.log
       * </pre>
       *
       * <code>optional .perfetto.protos.AndroidLogConfig android_log_config = 107 [lazy = true];</code>
       */
      public Builder setAndroidLogConfig(
          perfetto.protos.AndroidLogConfigOuterClass.AndroidLogConfig.Builder builderForValue) {
        if (androidLogConfigBuilder_ == null) {
          androidLogConfig_ = builderForValue.build();
        } else {
          androidLogConfigBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00004000;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Data source name: android.log
       * </pre>
       *
       * <code>optional .perfetto.protos.AndroidLogConfig android_log_config = 107 [lazy = true];</code>
       */
      public Builder mergeAndroidLogConfig(perfetto.protos.AndroidLogConfigOuterClass.AndroidLogConfig value) {
        if (androidLogConfigBuilder_ == null) {
          if (((bitField0_ & 0x00004000) != 0) &&
            androidLogConfig_ != null &&
            androidLogConfig_ != perfetto.protos.AndroidLogConfigOuterClass.AndroidLogConfig.getDefaultInstance()) {
            getAndroidLogConfigBuilder().mergeFrom(value);
          } else {
            androidLogConfig_ = value;
          }
        } else {
          androidLogConfigBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00004000;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Data source name: android.log
       * </pre>
       *
       * <code>optional .perfetto.protos.AndroidLogConfig android_log_config = 107 [lazy = true];</code>
       */
      public Builder clearAndroidLogConfig() {
        bitField0_ = (bitField0_ & ~0x00004000);
        androidLogConfig_ = null;
        if (androidLogConfigBuilder_ != null) {
          androidLogConfigBuilder_.dispose();
          androidLogConfigBuilder_ = null;
        }
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Data source name: android.log
       * </pre>
       *
       * <code>optional .perfetto.protos.AndroidLogConfig android_log_config = 107 [lazy = true];</code>
       */
      public perfetto.protos.AndroidLogConfigOuterClass.AndroidLogConfig.Builder getAndroidLogConfigBuilder() {
        bitField0_ |= 0x00004000;
        onChanged();
        return getAndroidLogConfigFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       * Data source name: android.log
       * </pre>
       *
       * <code>optional .perfetto.protos.AndroidLogConfig android_log_config = 107 [lazy = true];</code>
       */
      public perfetto.protos.AndroidLogConfigOuterClass.AndroidLogConfigOrBuilder getAndroidLogConfigOrBuilder() {
        if (androidLogConfigBuilder_ != null) {
          return androidLogConfigBuilder_.getMessageOrBuilder();
        } else {
          return androidLogConfig_ == null ?
              perfetto.protos.AndroidLogConfigOuterClass.AndroidLogConfig.getDefaultInstance() : androidLogConfig_;
        }
      }
      /**
       * <pre>
       * Data source name: android.log
       * </pre>
       *
       * <code>optional .perfetto.protos.AndroidLogConfig android_log_config = 107 [lazy = true];</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          perfetto.protos.AndroidLogConfigOuterClass.AndroidLogConfig, perfetto.protos.AndroidLogConfigOuterClass.AndroidLogConfig.Builder, perfetto.protos.AndroidLogConfigOuterClass.AndroidLogConfigOrBuilder> 
          getAndroidLogConfigFieldBuilder() {
        if (androidLogConfigBuilder_ == null) {
          androidLogConfigBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              perfetto.protos.AndroidLogConfigOuterClass.AndroidLogConfig, perfetto.protos.AndroidLogConfigOuterClass.AndroidLogConfig.Builder, perfetto.protos.AndroidLogConfigOuterClass.AndroidLogConfigOrBuilder>(
                  getAndroidLogConfig(),
                  getParentForChildren(),
                  isClean());
          androidLogConfig_ = null;
        }
        return androidLogConfigBuilder_;
      }

      private perfetto.protos.GpuCounterConfigOuterClass.GpuCounterConfig gpuCounterConfig_;
      private com.google.protobuf.SingleFieldBuilderV3<
          perfetto.protos.GpuCounterConfigOuterClass.GpuCounterConfig, perfetto.protos.GpuCounterConfigOuterClass.GpuCounterConfig.Builder, perfetto.protos.GpuCounterConfigOuterClass.GpuCounterConfigOrBuilder> gpuCounterConfigBuilder_;
      /**
       * <pre>
       * TODO(fmayer): Add data source name for this.
       * </pre>
       *
       * <code>optional .perfetto.protos.GpuCounterConfig gpu_counter_config = 108 [lazy = true];</code>
       * @return Whether the gpuCounterConfig field is set.
       */
      public boolean hasGpuCounterConfig() {
        return ((bitField0_ & 0x00008000) != 0);
      }
      /**
       * <pre>
       * TODO(fmayer): Add data source name for this.
       * </pre>
       *
       * <code>optional .perfetto.protos.GpuCounterConfig gpu_counter_config = 108 [lazy = true];</code>
       * @return The gpuCounterConfig.
       */
      public perfetto.protos.GpuCounterConfigOuterClass.GpuCounterConfig getGpuCounterConfig() {
        if (gpuCounterConfigBuilder_ == null) {
          return gpuCounterConfig_ == null ? perfetto.protos.GpuCounterConfigOuterClass.GpuCounterConfig.getDefaultInstance() : gpuCounterConfig_;
        } else {
          return gpuCounterConfigBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       * TODO(fmayer): Add data source name for this.
       * </pre>
       *
       * <code>optional .perfetto.protos.GpuCounterConfig gpu_counter_config = 108 [lazy = true];</code>
       */
      public Builder setGpuCounterConfig(perfetto.protos.GpuCounterConfigOuterClass.GpuCounterConfig value) {
        if (gpuCounterConfigBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          gpuCounterConfig_ = value;
        } else {
          gpuCounterConfigBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00008000;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * TODO(fmayer): Add data source name for this.
       * </pre>
       *
       * <code>optional .perfetto.protos.GpuCounterConfig gpu_counter_config = 108 [lazy = true];</code>
       */
      public Builder setGpuCounterConfig(
          perfetto.protos.GpuCounterConfigOuterClass.GpuCounterConfig.Builder builderForValue) {
        if (gpuCounterConfigBuilder_ == null) {
          gpuCounterConfig_ = builderForValue.build();
        } else {
          gpuCounterConfigBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00008000;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * TODO(fmayer): Add data source name for this.
       * </pre>
       *
       * <code>optional .perfetto.protos.GpuCounterConfig gpu_counter_config = 108 [lazy = true];</code>
       */
      public Builder mergeGpuCounterConfig(perfetto.protos.GpuCounterConfigOuterClass.GpuCounterConfig value) {
        if (gpuCounterConfigBuilder_ == null) {
          if (((bitField0_ & 0x00008000) != 0) &&
            gpuCounterConfig_ != null &&
            gpuCounterConfig_ != perfetto.protos.GpuCounterConfigOuterClass.GpuCounterConfig.getDefaultInstance()) {
            getGpuCounterConfigBuilder().mergeFrom(value);
          } else {
            gpuCounterConfig_ = value;
          }
        } else {
          gpuCounterConfigBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00008000;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * TODO(fmayer): Add data source name for this.
       * </pre>
       *
       * <code>optional .perfetto.protos.GpuCounterConfig gpu_counter_config = 108 [lazy = true];</code>
       */
      public Builder clearGpuCounterConfig() {
        bitField0_ = (bitField0_ & ~0x00008000);
        gpuCounterConfig_ = null;
        if (gpuCounterConfigBuilder_ != null) {
          gpuCounterConfigBuilder_.dispose();
          gpuCounterConfigBuilder_ = null;
        }
        onChanged();
        return this;
      }
      /**
       * <pre>
       * TODO(fmayer): Add data source name for this.
       * </pre>
       *
       * <code>optional .perfetto.protos.GpuCounterConfig gpu_counter_config = 108 [lazy = true];</code>
       */
      public perfetto.protos.GpuCounterConfigOuterClass.GpuCounterConfig.Builder getGpuCounterConfigBuilder() {
        bitField0_ |= 0x00008000;
        onChanged();
        return getGpuCounterConfigFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       * TODO(fmayer): Add data source name for this.
       * </pre>
       *
       * <code>optional .perfetto.protos.GpuCounterConfig gpu_counter_config = 108 [lazy = true];</code>
       */
      public perfetto.protos.GpuCounterConfigOuterClass.GpuCounterConfigOrBuilder getGpuCounterConfigOrBuilder() {
        if (gpuCounterConfigBuilder_ != null) {
          return gpuCounterConfigBuilder_.getMessageOrBuilder();
        } else {
          return gpuCounterConfig_ == null ?
              perfetto.protos.GpuCounterConfigOuterClass.GpuCounterConfig.getDefaultInstance() : gpuCounterConfig_;
        }
      }
      /**
       * <pre>
       * TODO(fmayer): Add data source name for this.
       * </pre>
       *
       * <code>optional .perfetto.protos.GpuCounterConfig gpu_counter_config = 108 [lazy = true];</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          perfetto.protos.GpuCounterConfigOuterClass.GpuCounterConfig, perfetto.protos.GpuCounterConfigOuterClass.GpuCounterConfig.Builder, perfetto.protos.GpuCounterConfigOuterClass.GpuCounterConfigOrBuilder> 
          getGpuCounterConfigFieldBuilder() {
        if (gpuCounterConfigBuilder_ == null) {
          gpuCounterConfigBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              perfetto.protos.GpuCounterConfigOuterClass.GpuCounterConfig, perfetto.protos.GpuCounterConfigOuterClass.GpuCounterConfig.Builder, perfetto.protos.GpuCounterConfigOuterClass.GpuCounterConfigOrBuilder>(
                  getGpuCounterConfig(),
                  getParentForChildren(),
                  isClean());
          gpuCounterConfig_ = null;
        }
        return gpuCounterConfigBuilder_;
      }

      private perfetto.protos.AndroidGameInterventionListConfigOuterClass.AndroidGameInterventionListConfig androidGameInterventionListConfig_;
      private com.google.protobuf.SingleFieldBuilderV3<
          perfetto.protos.AndroidGameInterventionListConfigOuterClass.AndroidGameInterventionListConfig, perfetto.protos.AndroidGameInterventionListConfigOuterClass.AndroidGameInterventionListConfig.Builder, perfetto.protos.AndroidGameInterventionListConfigOuterClass.AndroidGameInterventionListConfigOrBuilder> androidGameInterventionListConfigBuilder_;
      /**
       * <pre>
       * Data source name: android.game_interventions
       * </pre>
       *
       * <code>optional .perfetto.protos.AndroidGameInterventionListConfig android_game_intervention_list_config = 116 [lazy = true];</code>
       * @return Whether the androidGameInterventionListConfig field is set.
       */
      public boolean hasAndroidGameInterventionListConfig() {
        return ((bitField0_ & 0x00010000) != 0);
      }
      /**
       * <pre>
       * Data source name: android.game_interventions
       * </pre>
       *
       * <code>optional .perfetto.protos.AndroidGameInterventionListConfig android_game_intervention_list_config = 116 [lazy = true];</code>
       * @return The androidGameInterventionListConfig.
       */
      public perfetto.protos.AndroidGameInterventionListConfigOuterClass.AndroidGameInterventionListConfig getAndroidGameInterventionListConfig() {
        if (androidGameInterventionListConfigBuilder_ == null) {
          return androidGameInterventionListConfig_ == null ? perfetto.protos.AndroidGameInterventionListConfigOuterClass.AndroidGameInterventionListConfig.getDefaultInstance() : androidGameInterventionListConfig_;
        } else {
          return androidGameInterventionListConfigBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       * Data source name: android.game_interventions
       * </pre>
       *
       * <code>optional .perfetto.protos.AndroidGameInterventionListConfig android_game_intervention_list_config = 116 [lazy = true];</code>
       */
      public Builder setAndroidGameInterventionListConfig(perfetto.protos.AndroidGameInterventionListConfigOuterClass.AndroidGameInterventionListConfig value) {
        if (androidGameInterventionListConfigBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          androidGameInterventionListConfig_ = value;
        } else {
          androidGameInterventionListConfigBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00010000;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Data source name: android.game_interventions
       * </pre>
       *
       * <code>optional .perfetto.protos.AndroidGameInterventionListConfig android_game_intervention_list_config = 116 [lazy = true];</code>
       */
      public Builder setAndroidGameInterventionListConfig(
          perfetto.protos.AndroidGameInterventionListConfigOuterClass.AndroidGameInterventionListConfig.Builder builderForValue) {
        if (androidGameInterventionListConfigBuilder_ == null) {
          androidGameInterventionListConfig_ = builderForValue.build();
        } else {
          androidGameInterventionListConfigBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00010000;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Data source name: android.game_interventions
       * </pre>
       *
       * <code>optional .perfetto.protos.AndroidGameInterventionListConfig android_game_intervention_list_config = 116 [lazy = true];</code>
       */
      public Builder mergeAndroidGameInterventionListConfig(perfetto.protos.AndroidGameInterventionListConfigOuterClass.AndroidGameInterventionListConfig value) {
        if (androidGameInterventionListConfigBuilder_ == null) {
          if (((bitField0_ & 0x00010000) != 0) &&
            androidGameInterventionListConfig_ != null &&
            androidGameInterventionListConfig_ != perfetto.protos.AndroidGameInterventionListConfigOuterClass.AndroidGameInterventionListConfig.getDefaultInstance()) {
            getAndroidGameInterventionListConfigBuilder().mergeFrom(value);
          } else {
            androidGameInterventionListConfig_ = value;
          }
        } else {
          androidGameInterventionListConfigBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00010000;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Data source name: android.game_interventions
       * </pre>
       *
       * <code>optional .perfetto.protos.AndroidGameInterventionListConfig android_game_intervention_list_config = 116 [lazy = true];</code>
       */
      public Builder clearAndroidGameInterventionListConfig() {
        bitField0_ = (bitField0_ & ~0x00010000);
        androidGameInterventionListConfig_ = null;
        if (androidGameInterventionListConfigBuilder_ != null) {
          androidGameInterventionListConfigBuilder_.dispose();
          androidGameInterventionListConfigBuilder_ = null;
        }
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Data source name: android.game_interventions
       * </pre>
       *
       * <code>optional .perfetto.protos.AndroidGameInterventionListConfig android_game_intervention_list_config = 116 [lazy = true];</code>
       */
      public perfetto.protos.AndroidGameInterventionListConfigOuterClass.AndroidGameInterventionListConfig.Builder getAndroidGameInterventionListConfigBuilder() {
        bitField0_ |= 0x00010000;
        onChanged();
        return getAndroidGameInterventionListConfigFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       * Data source name: android.game_interventions
       * </pre>
       *
       * <code>optional .perfetto.protos.AndroidGameInterventionListConfig android_game_intervention_list_config = 116 [lazy = true];</code>
       */
      public perfetto.protos.AndroidGameInterventionListConfigOuterClass.AndroidGameInterventionListConfigOrBuilder getAndroidGameInterventionListConfigOrBuilder() {
        if (androidGameInterventionListConfigBuilder_ != null) {
          return androidGameInterventionListConfigBuilder_.getMessageOrBuilder();
        } else {
          return androidGameInterventionListConfig_ == null ?
              perfetto.protos.AndroidGameInterventionListConfigOuterClass.AndroidGameInterventionListConfig.getDefaultInstance() : androidGameInterventionListConfig_;
        }
      }
      /**
       * <pre>
       * Data source name: android.game_interventions
       * </pre>
       *
       * <code>optional .perfetto.protos.AndroidGameInterventionListConfig android_game_intervention_list_config = 116 [lazy = true];</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          perfetto.protos.AndroidGameInterventionListConfigOuterClass.AndroidGameInterventionListConfig, perfetto.protos.AndroidGameInterventionListConfigOuterClass.AndroidGameInterventionListConfig.Builder, perfetto.protos.AndroidGameInterventionListConfigOuterClass.AndroidGameInterventionListConfigOrBuilder> 
          getAndroidGameInterventionListConfigFieldBuilder() {
        if (androidGameInterventionListConfigBuilder_ == null) {
          androidGameInterventionListConfigBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              perfetto.protos.AndroidGameInterventionListConfigOuterClass.AndroidGameInterventionListConfig, perfetto.protos.AndroidGameInterventionListConfigOuterClass.AndroidGameInterventionListConfig.Builder, perfetto.protos.AndroidGameInterventionListConfigOuterClass.AndroidGameInterventionListConfigOrBuilder>(
                  getAndroidGameInterventionListConfig(),
                  getParentForChildren(),
                  isClean());
          androidGameInterventionListConfig_ = null;
        }
        return androidGameInterventionListConfigBuilder_;
      }

      private perfetto.protos.PackagesListConfigOuterClass.PackagesListConfig packagesListConfig_;
      private com.google.protobuf.SingleFieldBuilderV3<
          perfetto.protos.PackagesListConfigOuterClass.PackagesListConfig, perfetto.protos.PackagesListConfigOuterClass.PackagesListConfig.Builder, perfetto.protos.PackagesListConfigOuterClass.PackagesListConfigOrBuilder> packagesListConfigBuilder_;
      /**
       * <pre>
       * Data source name: android.packages_list
       * </pre>
       *
       * <code>optional .perfetto.protos.PackagesListConfig packages_list_config = 109 [lazy = true];</code>
       * @return Whether the packagesListConfig field is set.
       */
      public boolean hasPackagesListConfig() {
        return ((bitField0_ & 0x00020000) != 0);
      }
      /**
       * <pre>
       * Data source name: android.packages_list
       * </pre>
       *
       * <code>optional .perfetto.protos.PackagesListConfig packages_list_config = 109 [lazy = true];</code>
       * @return The packagesListConfig.
       */
      public perfetto.protos.PackagesListConfigOuterClass.PackagesListConfig getPackagesListConfig() {
        if (packagesListConfigBuilder_ == null) {
          return packagesListConfig_ == null ? perfetto.protos.PackagesListConfigOuterClass.PackagesListConfig.getDefaultInstance() : packagesListConfig_;
        } else {
          return packagesListConfigBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       * Data source name: android.packages_list
       * </pre>
       *
       * <code>optional .perfetto.protos.PackagesListConfig packages_list_config = 109 [lazy = true];</code>
       */
      public Builder setPackagesListConfig(perfetto.protos.PackagesListConfigOuterClass.PackagesListConfig value) {
        if (packagesListConfigBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          packagesListConfig_ = value;
        } else {
          packagesListConfigBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00020000;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Data source name: android.packages_list
       * </pre>
       *
       * <code>optional .perfetto.protos.PackagesListConfig packages_list_config = 109 [lazy = true];</code>
       */
      public Builder setPackagesListConfig(
          perfetto.protos.PackagesListConfigOuterClass.PackagesListConfig.Builder builderForValue) {
        if (packagesListConfigBuilder_ == null) {
          packagesListConfig_ = builderForValue.build();
        } else {
          packagesListConfigBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00020000;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Data source name: android.packages_list
       * </pre>
       *
       * <code>optional .perfetto.protos.PackagesListConfig packages_list_config = 109 [lazy = true];</code>
       */
      public Builder mergePackagesListConfig(perfetto.protos.PackagesListConfigOuterClass.PackagesListConfig value) {
        if (packagesListConfigBuilder_ == null) {
          if (((bitField0_ & 0x00020000) != 0) &&
            packagesListConfig_ != null &&
            packagesListConfig_ != perfetto.protos.PackagesListConfigOuterClass.PackagesListConfig.getDefaultInstance()) {
            getPackagesListConfigBuilder().mergeFrom(value);
          } else {
            packagesListConfig_ = value;
          }
        } else {
          packagesListConfigBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00020000;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Data source name: android.packages_list
       * </pre>
       *
       * <code>optional .perfetto.protos.PackagesListConfig packages_list_config = 109 [lazy = true];</code>
       */
      public Builder clearPackagesListConfig() {
        bitField0_ = (bitField0_ & ~0x00020000);
        packagesListConfig_ = null;
        if (packagesListConfigBuilder_ != null) {
          packagesListConfigBuilder_.dispose();
          packagesListConfigBuilder_ = null;
        }
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Data source name: android.packages_list
       * </pre>
       *
       * <code>optional .perfetto.protos.PackagesListConfig packages_list_config = 109 [lazy = true];</code>
       */
      public perfetto.protos.PackagesListConfigOuterClass.PackagesListConfig.Builder getPackagesListConfigBuilder() {
        bitField0_ |= 0x00020000;
        onChanged();
        return getPackagesListConfigFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       * Data source name: android.packages_list
       * </pre>
       *
       * <code>optional .perfetto.protos.PackagesListConfig packages_list_config = 109 [lazy = true];</code>
       */
      public perfetto.protos.PackagesListConfigOuterClass.PackagesListConfigOrBuilder getPackagesListConfigOrBuilder() {
        if (packagesListConfigBuilder_ != null) {
          return packagesListConfigBuilder_.getMessageOrBuilder();
        } else {
          return packagesListConfig_ == null ?
              perfetto.protos.PackagesListConfigOuterClass.PackagesListConfig.getDefaultInstance() : packagesListConfig_;
        }
      }
      /**
       * <pre>
       * Data source name: android.packages_list
       * </pre>
       *
       * <code>optional .perfetto.protos.PackagesListConfig packages_list_config = 109 [lazy = true];</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          perfetto.protos.PackagesListConfigOuterClass.PackagesListConfig, perfetto.protos.PackagesListConfigOuterClass.PackagesListConfig.Builder, perfetto.protos.PackagesListConfigOuterClass.PackagesListConfigOrBuilder> 
          getPackagesListConfigFieldBuilder() {
        if (packagesListConfigBuilder_ == null) {
          packagesListConfigBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              perfetto.protos.PackagesListConfigOuterClass.PackagesListConfig, perfetto.protos.PackagesListConfigOuterClass.PackagesListConfig.Builder, perfetto.protos.PackagesListConfigOuterClass.PackagesListConfigOrBuilder>(
                  getPackagesListConfig(),
                  getParentForChildren(),
                  isClean());
          packagesListConfig_ = null;
        }
        return packagesListConfigBuilder_;
      }

      private perfetto.protos.PerfEventConfigOuterClass.PerfEventConfig perfEventConfig_;
      private com.google.protobuf.SingleFieldBuilderV3<
          perfetto.protos.PerfEventConfigOuterClass.PerfEventConfig, perfetto.protos.PerfEventConfigOuterClass.PerfEventConfig.Builder, perfetto.protos.PerfEventConfigOuterClass.PerfEventConfigOrBuilder> perfEventConfigBuilder_;
      /**
       * <pre>
       * Data source name: linux.perf
       * </pre>
       *
       * <code>optional .perfetto.protos.PerfEventConfig perf_event_config = 111 [lazy = true];</code>
       * @return Whether the perfEventConfig field is set.
       */
      public boolean hasPerfEventConfig() {
        return ((bitField0_ & 0x00040000) != 0);
      }
      /**
       * <pre>
       * Data source name: linux.perf
       * </pre>
       *
       * <code>optional .perfetto.protos.PerfEventConfig perf_event_config = 111 [lazy = true];</code>
       * @return The perfEventConfig.
       */
      public perfetto.protos.PerfEventConfigOuterClass.PerfEventConfig getPerfEventConfig() {
        if (perfEventConfigBuilder_ == null) {
          return perfEventConfig_ == null ? perfetto.protos.PerfEventConfigOuterClass.PerfEventConfig.getDefaultInstance() : perfEventConfig_;
        } else {
          return perfEventConfigBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       * Data source name: linux.perf
       * </pre>
       *
       * <code>optional .perfetto.protos.PerfEventConfig perf_event_config = 111 [lazy = true];</code>
       */
      public Builder setPerfEventConfig(perfetto.protos.PerfEventConfigOuterClass.PerfEventConfig value) {
        if (perfEventConfigBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          perfEventConfig_ = value;
        } else {
          perfEventConfigBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00040000;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Data source name: linux.perf
       * </pre>
       *
       * <code>optional .perfetto.protos.PerfEventConfig perf_event_config = 111 [lazy = true];</code>
       */
      public Builder setPerfEventConfig(
          perfetto.protos.PerfEventConfigOuterClass.PerfEventConfig.Builder builderForValue) {
        if (perfEventConfigBuilder_ == null) {
          perfEventConfig_ = builderForValue.build();
        } else {
          perfEventConfigBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00040000;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Data source name: linux.perf
       * </pre>
       *
       * <code>optional .perfetto.protos.PerfEventConfig perf_event_config = 111 [lazy = true];</code>
       */
      public Builder mergePerfEventConfig(perfetto.protos.PerfEventConfigOuterClass.PerfEventConfig value) {
        if (perfEventConfigBuilder_ == null) {
          if (((bitField0_ & 0x00040000) != 0) &&
            perfEventConfig_ != null &&
            perfEventConfig_ != perfetto.protos.PerfEventConfigOuterClass.PerfEventConfig.getDefaultInstance()) {
            getPerfEventConfigBuilder().mergeFrom(value);
          } else {
            perfEventConfig_ = value;
          }
        } else {
          perfEventConfigBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00040000;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Data source name: linux.perf
       * </pre>
       *
       * <code>optional .perfetto.protos.PerfEventConfig perf_event_config = 111 [lazy = true];</code>
       */
      public Builder clearPerfEventConfig() {
        bitField0_ = (bitField0_ & ~0x00040000);
        perfEventConfig_ = null;
        if (perfEventConfigBuilder_ != null) {
          perfEventConfigBuilder_.dispose();
          perfEventConfigBuilder_ = null;
        }
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Data source name: linux.perf
       * </pre>
       *
       * <code>optional .perfetto.protos.PerfEventConfig perf_event_config = 111 [lazy = true];</code>
       */
      public perfetto.protos.PerfEventConfigOuterClass.PerfEventConfig.Builder getPerfEventConfigBuilder() {
        bitField0_ |= 0x00040000;
        onChanged();
        return getPerfEventConfigFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       * Data source name: linux.perf
       * </pre>
       *
       * <code>optional .perfetto.protos.PerfEventConfig perf_event_config = 111 [lazy = true];</code>
       */
      public perfetto.protos.PerfEventConfigOuterClass.PerfEventConfigOrBuilder getPerfEventConfigOrBuilder() {
        if (perfEventConfigBuilder_ != null) {
          return perfEventConfigBuilder_.getMessageOrBuilder();
        } else {
          return perfEventConfig_ == null ?
              perfetto.protos.PerfEventConfigOuterClass.PerfEventConfig.getDefaultInstance() : perfEventConfig_;
        }
      }
      /**
       * <pre>
       * Data source name: linux.perf
       * </pre>
       *
       * <code>optional .perfetto.protos.PerfEventConfig perf_event_config = 111 [lazy = true];</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          perfetto.protos.PerfEventConfigOuterClass.PerfEventConfig, perfetto.protos.PerfEventConfigOuterClass.PerfEventConfig.Builder, perfetto.protos.PerfEventConfigOuterClass.PerfEventConfigOrBuilder> 
          getPerfEventConfigFieldBuilder() {
        if (perfEventConfigBuilder_ == null) {
          perfEventConfigBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              perfetto.protos.PerfEventConfigOuterClass.PerfEventConfig, perfetto.protos.PerfEventConfigOuterClass.PerfEventConfig.Builder, perfetto.protos.PerfEventConfigOuterClass.PerfEventConfigOrBuilder>(
                  getPerfEventConfig(),
                  getParentForChildren(),
                  isClean());
          perfEventConfig_ = null;
        }
        return perfEventConfigBuilder_;
      }

      private perfetto.protos.VulkanMemoryConfigOuterClass.VulkanMemoryConfig vulkanMemoryConfig_;
      private com.google.protobuf.SingleFieldBuilderV3<
          perfetto.protos.VulkanMemoryConfigOuterClass.VulkanMemoryConfig, perfetto.protos.VulkanMemoryConfigOuterClass.VulkanMemoryConfig.Builder, perfetto.protos.VulkanMemoryConfigOuterClass.VulkanMemoryConfigOrBuilder> vulkanMemoryConfigBuilder_;
      /**
       * <pre>
       * Data source name: vulkan.memory_tracker
       * </pre>
       *
       * <code>optional .perfetto.protos.VulkanMemoryConfig vulkan_memory_config = 112 [lazy = true];</code>
       * @return Whether the vulkanMemoryConfig field is set.
       */
      public boolean hasVulkanMemoryConfig() {
        return ((bitField0_ & 0x00080000) != 0);
      }
      /**
       * <pre>
       * Data source name: vulkan.memory_tracker
       * </pre>
       *
       * <code>optional .perfetto.protos.VulkanMemoryConfig vulkan_memory_config = 112 [lazy = true];</code>
       * @return The vulkanMemoryConfig.
       */
      public perfetto.protos.VulkanMemoryConfigOuterClass.VulkanMemoryConfig getVulkanMemoryConfig() {
        if (vulkanMemoryConfigBuilder_ == null) {
          return vulkanMemoryConfig_ == null ? perfetto.protos.VulkanMemoryConfigOuterClass.VulkanMemoryConfig.getDefaultInstance() : vulkanMemoryConfig_;
        } else {
          return vulkanMemoryConfigBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       * Data source name: vulkan.memory_tracker
       * </pre>
       *
       * <code>optional .perfetto.protos.VulkanMemoryConfig vulkan_memory_config = 112 [lazy = true];</code>
       */
      public Builder setVulkanMemoryConfig(perfetto.protos.VulkanMemoryConfigOuterClass.VulkanMemoryConfig value) {
        if (vulkanMemoryConfigBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          vulkanMemoryConfig_ = value;
        } else {
          vulkanMemoryConfigBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00080000;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Data source name: vulkan.memory_tracker
       * </pre>
       *
       * <code>optional .perfetto.protos.VulkanMemoryConfig vulkan_memory_config = 112 [lazy = true];</code>
       */
      public Builder setVulkanMemoryConfig(
          perfetto.protos.VulkanMemoryConfigOuterClass.VulkanMemoryConfig.Builder builderForValue) {
        if (vulkanMemoryConfigBuilder_ == null) {
          vulkanMemoryConfig_ = builderForValue.build();
        } else {
          vulkanMemoryConfigBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00080000;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Data source name: vulkan.memory_tracker
       * </pre>
       *
       * <code>optional .perfetto.protos.VulkanMemoryConfig vulkan_memory_config = 112 [lazy = true];</code>
       */
      public Builder mergeVulkanMemoryConfig(perfetto.protos.VulkanMemoryConfigOuterClass.VulkanMemoryConfig value) {
        if (vulkanMemoryConfigBuilder_ == null) {
          if (((bitField0_ & 0x00080000) != 0) &&
            vulkanMemoryConfig_ != null &&
            vulkanMemoryConfig_ != perfetto.protos.VulkanMemoryConfigOuterClass.VulkanMemoryConfig.getDefaultInstance()) {
            getVulkanMemoryConfigBuilder().mergeFrom(value);
          } else {
            vulkanMemoryConfig_ = value;
          }
        } else {
          vulkanMemoryConfigBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00080000;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Data source name: vulkan.memory_tracker
       * </pre>
       *
       * <code>optional .perfetto.protos.VulkanMemoryConfig vulkan_memory_config = 112 [lazy = true];</code>
       */
      public Builder clearVulkanMemoryConfig() {
        bitField0_ = (bitField0_ & ~0x00080000);
        vulkanMemoryConfig_ = null;
        if (vulkanMemoryConfigBuilder_ != null) {
          vulkanMemoryConfigBuilder_.dispose();
          vulkanMemoryConfigBuilder_ = null;
        }
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Data source name: vulkan.memory_tracker
       * </pre>
       *
       * <code>optional .perfetto.protos.VulkanMemoryConfig vulkan_memory_config = 112 [lazy = true];</code>
       */
      public perfetto.protos.VulkanMemoryConfigOuterClass.VulkanMemoryConfig.Builder getVulkanMemoryConfigBuilder() {
        bitField0_ |= 0x00080000;
        onChanged();
        return getVulkanMemoryConfigFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       * Data source name: vulkan.memory_tracker
       * </pre>
       *
       * <code>optional .perfetto.protos.VulkanMemoryConfig vulkan_memory_config = 112 [lazy = true];</code>
       */
      public perfetto.protos.VulkanMemoryConfigOuterClass.VulkanMemoryConfigOrBuilder getVulkanMemoryConfigOrBuilder() {
        if (vulkanMemoryConfigBuilder_ != null) {
          return vulkanMemoryConfigBuilder_.getMessageOrBuilder();
        } else {
          return vulkanMemoryConfig_ == null ?
              perfetto.protos.VulkanMemoryConfigOuterClass.VulkanMemoryConfig.getDefaultInstance() : vulkanMemoryConfig_;
        }
      }
      /**
       * <pre>
       * Data source name: vulkan.memory_tracker
       * </pre>
       *
       * <code>optional .perfetto.protos.VulkanMemoryConfig vulkan_memory_config = 112 [lazy = true];</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          perfetto.protos.VulkanMemoryConfigOuterClass.VulkanMemoryConfig, perfetto.protos.VulkanMemoryConfigOuterClass.VulkanMemoryConfig.Builder, perfetto.protos.VulkanMemoryConfigOuterClass.VulkanMemoryConfigOrBuilder> 
          getVulkanMemoryConfigFieldBuilder() {
        if (vulkanMemoryConfigBuilder_ == null) {
          vulkanMemoryConfigBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              perfetto.protos.VulkanMemoryConfigOuterClass.VulkanMemoryConfig, perfetto.protos.VulkanMemoryConfigOuterClass.VulkanMemoryConfig.Builder, perfetto.protos.VulkanMemoryConfigOuterClass.VulkanMemoryConfigOrBuilder>(
                  getVulkanMemoryConfig(),
                  getParentForChildren(),
                  isClean());
          vulkanMemoryConfig_ = null;
        }
        return vulkanMemoryConfigBuilder_;
      }

      private perfetto.protos.TrackEventConfigOuterClass.TrackEventConfig trackEventConfig_;
      private com.google.protobuf.SingleFieldBuilderV3<
          perfetto.protos.TrackEventConfigOuterClass.TrackEventConfig, perfetto.protos.TrackEventConfigOuterClass.TrackEventConfig.Builder, perfetto.protos.TrackEventConfigOuterClass.TrackEventConfigOrBuilder> trackEventConfigBuilder_;
      /**
       * <pre>
       * Data source name: track_event
       * </pre>
       *
       * <code>optional .perfetto.protos.TrackEventConfig track_event_config = 113 [lazy = true];</code>
       * @return Whether the trackEventConfig field is set.
       */
      public boolean hasTrackEventConfig() {
        return ((bitField0_ & 0x00100000) != 0);
      }
      /**
       * <pre>
       * Data source name: track_event
       * </pre>
       *
       * <code>optional .perfetto.protos.TrackEventConfig track_event_config = 113 [lazy = true];</code>
       * @return The trackEventConfig.
       */
      public perfetto.protos.TrackEventConfigOuterClass.TrackEventConfig getTrackEventConfig() {
        if (trackEventConfigBuilder_ == null) {
          return trackEventConfig_ == null ? perfetto.protos.TrackEventConfigOuterClass.TrackEventConfig.getDefaultInstance() : trackEventConfig_;
        } else {
          return trackEventConfigBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       * Data source name: track_event
       * </pre>
       *
       * <code>optional .perfetto.protos.TrackEventConfig track_event_config = 113 [lazy = true];</code>
       */
      public Builder setTrackEventConfig(perfetto.protos.TrackEventConfigOuterClass.TrackEventConfig value) {
        if (trackEventConfigBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          trackEventConfig_ = value;
        } else {
          trackEventConfigBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00100000;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Data source name: track_event
       * </pre>
       *
       * <code>optional .perfetto.protos.TrackEventConfig track_event_config = 113 [lazy = true];</code>
       */
      public Builder setTrackEventConfig(
          perfetto.protos.TrackEventConfigOuterClass.TrackEventConfig.Builder builderForValue) {
        if (trackEventConfigBuilder_ == null) {
          trackEventConfig_ = builderForValue.build();
        } else {
          trackEventConfigBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00100000;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Data source name: track_event
       * </pre>
       *
       * <code>optional .perfetto.protos.TrackEventConfig track_event_config = 113 [lazy = true];</code>
       */
      public Builder mergeTrackEventConfig(perfetto.protos.TrackEventConfigOuterClass.TrackEventConfig value) {
        if (trackEventConfigBuilder_ == null) {
          if (((bitField0_ & 0x00100000) != 0) &&
            trackEventConfig_ != null &&
            trackEventConfig_ != perfetto.protos.TrackEventConfigOuterClass.TrackEventConfig.getDefaultInstance()) {
            getTrackEventConfigBuilder().mergeFrom(value);
          } else {
            trackEventConfig_ = value;
          }
        } else {
          trackEventConfigBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00100000;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Data source name: track_event
       * </pre>
       *
       * <code>optional .perfetto.protos.TrackEventConfig track_event_config = 113 [lazy = true];</code>
       */
      public Builder clearTrackEventConfig() {
        bitField0_ = (bitField0_ & ~0x00100000);
        trackEventConfig_ = null;
        if (trackEventConfigBuilder_ != null) {
          trackEventConfigBuilder_.dispose();
          trackEventConfigBuilder_ = null;
        }
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Data source name: track_event
       * </pre>
       *
       * <code>optional .perfetto.protos.TrackEventConfig track_event_config = 113 [lazy = true];</code>
       */
      public perfetto.protos.TrackEventConfigOuterClass.TrackEventConfig.Builder getTrackEventConfigBuilder() {
        bitField0_ |= 0x00100000;
        onChanged();
        return getTrackEventConfigFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       * Data source name: track_event
       * </pre>
       *
       * <code>optional .perfetto.protos.TrackEventConfig track_event_config = 113 [lazy = true];</code>
       */
      public perfetto.protos.TrackEventConfigOuterClass.TrackEventConfigOrBuilder getTrackEventConfigOrBuilder() {
        if (trackEventConfigBuilder_ != null) {
          return trackEventConfigBuilder_.getMessageOrBuilder();
        } else {
          return trackEventConfig_ == null ?
              perfetto.protos.TrackEventConfigOuterClass.TrackEventConfig.getDefaultInstance() : trackEventConfig_;
        }
      }
      /**
       * <pre>
       * Data source name: track_event
       * </pre>
       *
       * <code>optional .perfetto.protos.TrackEventConfig track_event_config = 113 [lazy = true];</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          perfetto.protos.TrackEventConfigOuterClass.TrackEventConfig, perfetto.protos.TrackEventConfigOuterClass.TrackEventConfig.Builder, perfetto.protos.TrackEventConfigOuterClass.TrackEventConfigOrBuilder> 
          getTrackEventConfigFieldBuilder() {
        if (trackEventConfigBuilder_ == null) {
          trackEventConfigBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              perfetto.protos.TrackEventConfigOuterClass.TrackEventConfig, perfetto.protos.TrackEventConfigOuterClass.TrackEventConfig.Builder, perfetto.protos.TrackEventConfigOuterClass.TrackEventConfigOrBuilder>(
                  getTrackEventConfig(),
                  getParentForChildren(),
                  isClean());
          trackEventConfig_ = null;
        }
        return trackEventConfigBuilder_;
      }

      private perfetto.protos.AndroidPolledStateConfigOuterClass.AndroidPolledStateConfig androidPolledStateConfig_;
      private com.google.protobuf.SingleFieldBuilderV3<
          perfetto.protos.AndroidPolledStateConfigOuterClass.AndroidPolledStateConfig, perfetto.protos.AndroidPolledStateConfigOuterClass.AndroidPolledStateConfig.Builder, perfetto.protos.AndroidPolledStateConfigOuterClass.AndroidPolledStateConfigOrBuilder> androidPolledStateConfigBuilder_;
      /**
       * <pre>
       * Data source name: android.polled_state
       * </pre>
       *
       * <code>optional .perfetto.protos.AndroidPolledStateConfig android_polled_state_config = 114 [lazy = true];</code>
       * @return Whether the androidPolledStateConfig field is set.
       */
      public boolean hasAndroidPolledStateConfig() {
        return ((bitField0_ & 0x00200000) != 0);
      }
      /**
       * <pre>
       * Data source name: android.polled_state
       * </pre>
       *
       * <code>optional .perfetto.protos.AndroidPolledStateConfig android_polled_state_config = 114 [lazy = true];</code>
       * @return The androidPolledStateConfig.
       */
      public perfetto.protos.AndroidPolledStateConfigOuterClass.AndroidPolledStateConfig getAndroidPolledStateConfig() {
        if (androidPolledStateConfigBuilder_ == null) {
          return androidPolledStateConfig_ == null ? perfetto.protos.AndroidPolledStateConfigOuterClass.AndroidPolledStateConfig.getDefaultInstance() : androidPolledStateConfig_;
        } else {
          return androidPolledStateConfigBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       * Data source name: android.polled_state
       * </pre>
       *
       * <code>optional .perfetto.protos.AndroidPolledStateConfig android_polled_state_config = 114 [lazy = true];</code>
       */
      public Builder setAndroidPolledStateConfig(perfetto.protos.AndroidPolledStateConfigOuterClass.AndroidPolledStateConfig value) {
        if (androidPolledStateConfigBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          androidPolledStateConfig_ = value;
        } else {
          androidPolledStateConfigBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00200000;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Data source name: android.polled_state
       * </pre>
       *
       * <code>optional .perfetto.protos.AndroidPolledStateConfig android_polled_state_config = 114 [lazy = true];</code>
       */
      public Builder setAndroidPolledStateConfig(
          perfetto.protos.AndroidPolledStateConfigOuterClass.AndroidPolledStateConfig.Builder builderForValue) {
        if (androidPolledStateConfigBuilder_ == null) {
          androidPolledStateConfig_ = builderForValue.build();
        } else {
          androidPolledStateConfigBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00200000;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Data source name: android.polled_state
       * </pre>
       *
       * <code>optional .perfetto.protos.AndroidPolledStateConfig android_polled_state_config = 114 [lazy = true];</code>
       */
      public Builder mergeAndroidPolledStateConfig(perfetto.protos.AndroidPolledStateConfigOuterClass.AndroidPolledStateConfig value) {
        if (androidPolledStateConfigBuilder_ == null) {
          if (((bitField0_ & 0x00200000) != 0) &&
            androidPolledStateConfig_ != null &&
            androidPolledStateConfig_ != perfetto.protos.AndroidPolledStateConfigOuterClass.AndroidPolledStateConfig.getDefaultInstance()) {
            getAndroidPolledStateConfigBuilder().mergeFrom(value);
          } else {
            androidPolledStateConfig_ = value;
          }
        } else {
          androidPolledStateConfigBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00200000;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Data source name: android.polled_state
       * </pre>
       *
       * <code>optional .perfetto.protos.AndroidPolledStateConfig android_polled_state_config = 114 [lazy = true];</code>
       */
      public Builder clearAndroidPolledStateConfig() {
        bitField0_ = (bitField0_ & ~0x00200000);
        androidPolledStateConfig_ = null;
        if (androidPolledStateConfigBuilder_ != null) {
          androidPolledStateConfigBuilder_.dispose();
          androidPolledStateConfigBuilder_ = null;
        }
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Data source name: android.polled_state
       * </pre>
       *
       * <code>optional .perfetto.protos.AndroidPolledStateConfig android_polled_state_config = 114 [lazy = true];</code>
       */
      public perfetto.protos.AndroidPolledStateConfigOuterClass.AndroidPolledStateConfig.Builder getAndroidPolledStateConfigBuilder() {
        bitField0_ |= 0x00200000;
        onChanged();
        return getAndroidPolledStateConfigFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       * Data source name: android.polled_state
       * </pre>
       *
       * <code>optional .perfetto.protos.AndroidPolledStateConfig android_polled_state_config = 114 [lazy = true];</code>
       */
      public perfetto.protos.AndroidPolledStateConfigOuterClass.AndroidPolledStateConfigOrBuilder getAndroidPolledStateConfigOrBuilder() {
        if (androidPolledStateConfigBuilder_ != null) {
          return androidPolledStateConfigBuilder_.getMessageOrBuilder();
        } else {
          return androidPolledStateConfig_ == null ?
              perfetto.protos.AndroidPolledStateConfigOuterClass.AndroidPolledStateConfig.getDefaultInstance() : androidPolledStateConfig_;
        }
      }
      /**
       * <pre>
       * Data source name: android.polled_state
       * </pre>
       *
       * <code>optional .perfetto.protos.AndroidPolledStateConfig android_polled_state_config = 114 [lazy = true];</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          perfetto.protos.AndroidPolledStateConfigOuterClass.AndroidPolledStateConfig, perfetto.protos.AndroidPolledStateConfigOuterClass.AndroidPolledStateConfig.Builder, perfetto.protos.AndroidPolledStateConfigOuterClass.AndroidPolledStateConfigOrBuilder> 
          getAndroidPolledStateConfigFieldBuilder() {
        if (androidPolledStateConfigBuilder_ == null) {
          androidPolledStateConfigBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              perfetto.protos.AndroidPolledStateConfigOuterClass.AndroidPolledStateConfig, perfetto.protos.AndroidPolledStateConfigOuterClass.AndroidPolledStateConfig.Builder, perfetto.protos.AndroidPolledStateConfigOuterClass.AndroidPolledStateConfigOrBuilder>(
                  getAndroidPolledStateConfig(),
                  getParentForChildren(),
                  isClean());
          androidPolledStateConfig_ = null;
        }
        return androidPolledStateConfigBuilder_;
      }

      private perfetto.protos.AndroidSystemPropertyConfigOuterClass.AndroidSystemPropertyConfig androidSystemPropertyConfig_;
      private com.google.protobuf.SingleFieldBuilderV3<
          perfetto.protos.AndroidSystemPropertyConfigOuterClass.AndroidSystemPropertyConfig, perfetto.protos.AndroidSystemPropertyConfigOuterClass.AndroidSystemPropertyConfig.Builder, perfetto.protos.AndroidSystemPropertyConfigOuterClass.AndroidSystemPropertyConfigOrBuilder> androidSystemPropertyConfigBuilder_;
      /**
       * <pre>
       * Data source name: android.system_property
       * </pre>
       *
       * <code>optional .perfetto.protos.AndroidSystemPropertyConfig android_system_property_config = 118 [lazy = true];</code>
       * @return Whether the androidSystemPropertyConfig field is set.
       */
      public boolean hasAndroidSystemPropertyConfig() {
        return ((bitField0_ & 0x00400000) != 0);
      }
      /**
       * <pre>
       * Data source name: android.system_property
       * </pre>
       *
       * <code>optional .perfetto.protos.AndroidSystemPropertyConfig android_system_property_config = 118 [lazy = true];</code>
       * @return The androidSystemPropertyConfig.
       */
      public perfetto.protos.AndroidSystemPropertyConfigOuterClass.AndroidSystemPropertyConfig getAndroidSystemPropertyConfig() {
        if (androidSystemPropertyConfigBuilder_ == null) {
          return androidSystemPropertyConfig_ == null ? perfetto.protos.AndroidSystemPropertyConfigOuterClass.AndroidSystemPropertyConfig.getDefaultInstance() : androidSystemPropertyConfig_;
        } else {
          return androidSystemPropertyConfigBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       * Data source name: android.system_property
       * </pre>
       *
       * <code>optional .perfetto.protos.AndroidSystemPropertyConfig android_system_property_config = 118 [lazy = true];</code>
       */
      public Builder setAndroidSystemPropertyConfig(perfetto.protos.AndroidSystemPropertyConfigOuterClass.AndroidSystemPropertyConfig value) {
        if (androidSystemPropertyConfigBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          androidSystemPropertyConfig_ = value;
        } else {
          androidSystemPropertyConfigBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00400000;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Data source name: android.system_property
       * </pre>
       *
       * <code>optional .perfetto.protos.AndroidSystemPropertyConfig android_system_property_config = 118 [lazy = true];</code>
       */
      public Builder setAndroidSystemPropertyConfig(
          perfetto.protos.AndroidSystemPropertyConfigOuterClass.AndroidSystemPropertyConfig.Builder builderForValue) {
        if (androidSystemPropertyConfigBuilder_ == null) {
          androidSystemPropertyConfig_ = builderForValue.build();
        } else {
          androidSystemPropertyConfigBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00400000;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Data source name: android.system_property
       * </pre>
       *
       * <code>optional .perfetto.protos.AndroidSystemPropertyConfig android_system_property_config = 118 [lazy = true];</code>
       */
      public Builder mergeAndroidSystemPropertyConfig(perfetto.protos.AndroidSystemPropertyConfigOuterClass.AndroidSystemPropertyConfig value) {
        if (androidSystemPropertyConfigBuilder_ == null) {
          if (((bitField0_ & 0x00400000) != 0) &&
            androidSystemPropertyConfig_ != null &&
            androidSystemPropertyConfig_ != perfetto.protos.AndroidSystemPropertyConfigOuterClass.AndroidSystemPropertyConfig.getDefaultInstance()) {
            getAndroidSystemPropertyConfigBuilder().mergeFrom(value);
          } else {
            androidSystemPropertyConfig_ = value;
          }
        } else {
          androidSystemPropertyConfigBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00400000;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Data source name: android.system_property
       * </pre>
       *
       * <code>optional .perfetto.protos.AndroidSystemPropertyConfig android_system_property_config = 118 [lazy = true];</code>
       */
      public Builder clearAndroidSystemPropertyConfig() {
        bitField0_ = (bitField0_ & ~0x00400000);
        androidSystemPropertyConfig_ = null;
        if (androidSystemPropertyConfigBuilder_ != null) {
          androidSystemPropertyConfigBuilder_.dispose();
          androidSystemPropertyConfigBuilder_ = null;
        }
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Data source name: android.system_property
       * </pre>
       *
       * <code>optional .perfetto.protos.AndroidSystemPropertyConfig android_system_property_config = 118 [lazy = true];</code>
       */
      public perfetto.protos.AndroidSystemPropertyConfigOuterClass.AndroidSystemPropertyConfig.Builder getAndroidSystemPropertyConfigBuilder() {
        bitField0_ |= 0x00400000;
        onChanged();
        return getAndroidSystemPropertyConfigFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       * Data source name: android.system_property
       * </pre>
       *
       * <code>optional .perfetto.protos.AndroidSystemPropertyConfig android_system_property_config = 118 [lazy = true];</code>
       */
      public perfetto.protos.AndroidSystemPropertyConfigOuterClass.AndroidSystemPropertyConfigOrBuilder getAndroidSystemPropertyConfigOrBuilder() {
        if (androidSystemPropertyConfigBuilder_ != null) {
          return androidSystemPropertyConfigBuilder_.getMessageOrBuilder();
        } else {
          return androidSystemPropertyConfig_ == null ?
              perfetto.protos.AndroidSystemPropertyConfigOuterClass.AndroidSystemPropertyConfig.getDefaultInstance() : androidSystemPropertyConfig_;
        }
      }
      /**
       * <pre>
       * Data source name: android.system_property
       * </pre>
       *
       * <code>optional .perfetto.protos.AndroidSystemPropertyConfig android_system_property_config = 118 [lazy = true];</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          perfetto.protos.AndroidSystemPropertyConfigOuterClass.AndroidSystemPropertyConfig, perfetto.protos.AndroidSystemPropertyConfigOuterClass.AndroidSystemPropertyConfig.Builder, perfetto.protos.AndroidSystemPropertyConfigOuterClass.AndroidSystemPropertyConfigOrBuilder> 
          getAndroidSystemPropertyConfigFieldBuilder() {
        if (androidSystemPropertyConfigBuilder_ == null) {
          androidSystemPropertyConfigBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              perfetto.protos.AndroidSystemPropertyConfigOuterClass.AndroidSystemPropertyConfig, perfetto.protos.AndroidSystemPropertyConfigOuterClass.AndroidSystemPropertyConfig.Builder, perfetto.protos.AndroidSystemPropertyConfigOuterClass.AndroidSystemPropertyConfigOrBuilder>(
                  getAndroidSystemPropertyConfig(),
                  getParentForChildren(),
                  isClean());
          androidSystemPropertyConfig_ = null;
        }
        return androidSystemPropertyConfigBuilder_;
      }

      private perfetto.protos.StatsdTracingConfigOuterClass.StatsdTracingConfig statsdTracingConfig_;
      private com.google.protobuf.SingleFieldBuilderV3<
          perfetto.protos.StatsdTracingConfigOuterClass.StatsdTracingConfig, perfetto.protos.StatsdTracingConfigOuterClass.StatsdTracingConfig.Builder, perfetto.protos.StatsdTracingConfigOuterClass.StatsdTracingConfigOrBuilder> statsdTracingConfigBuilder_;
      /**
       * <pre>
       * Data source name: android.statsd
       * </pre>
       *
       * <code>optional .perfetto.protos.StatsdTracingConfig statsd_tracing_config = 117 [lazy = true];</code>
       * @return Whether the statsdTracingConfig field is set.
       */
      public boolean hasStatsdTracingConfig() {
        return ((bitField0_ & 0x00800000) != 0);
      }
      /**
       * <pre>
       * Data source name: android.statsd
       * </pre>
       *
       * <code>optional .perfetto.protos.StatsdTracingConfig statsd_tracing_config = 117 [lazy = true];</code>
       * @return The statsdTracingConfig.
       */
      public perfetto.protos.StatsdTracingConfigOuterClass.StatsdTracingConfig getStatsdTracingConfig() {
        if (statsdTracingConfigBuilder_ == null) {
          return statsdTracingConfig_ == null ? perfetto.protos.StatsdTracingConfigOuterClass.StatsdTracingConfig.getDefaultInstance() : statsdTracingConfig_;
        } else {
          return statsdTracingConfigBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       * Data source name: android.statsd
       * </pre>
       *
       * <code>optional .perfetto.protos.StatsdTracingConfig statsd_tracing_config = 117 [lazy = true];</code>
       */
      public Builder setStatsdTracingConfig(perfetto.protos.StatsdTracingConfigOuterClass.StatsdTracingConfig value) {
        if (statsdTracingConfigBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          statsdTracingConfig_ = value;
        } else {
          statsdTracingConfigBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00800000;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Data source name: android.statsd
       * </pre>
       *
       * <code>optional .perfetto.protos.StatsdTracingConfig statsd_tracing_config = 117 [lazy = true];</code>
       */
      public Builder setStatsdTracingConfig(
          perfetto.protos.StatsdTracingConfigOuterClass.StatsdTracingConfig.Builder builderForValue) {
        if (statsdTracingConfigBuilder_ == null) {
          statsdTracingConfig_ = builderForValue.build();
        } else {
          statsdTracingConfigBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00800000;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Data source name: android.statsd
       * </pre>
       *
       * <code>optional .perfetto.protos.StatsdTracingConfig statsd_tracing_config = 117 [lazy = true];</code>
       */
      public Builder mergeStatsdTracingConfig(perfetto.protos.StatsdTracingConfigOuterClass.StatsdTracingConfig value) {
        if (statsdTracingConfigBuilder_ == null) {
          if (((bitField0_ & 0x00800000) != 0) &&
            statsdTracingConfig_ != null &&
            statsdTracingConfig_ != perfetto.protos.StatsdTracingConfigOuterClass.StatsdTracingConfig.getDefaultInstance()) {
            getStatsdTracingConfigBuilder().mergeFrom(value);
          } else {
            statsdTracingConfig_ = value;
          }
        } else {
          statsdTracingConfigBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00800000;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Data source name: android.statsd
       * </pre>
       *
       * <code>optional .perfetto.protos.StatsdTracingConfig statsd_tracing_config = 117 [lazy = true];</code>
       */
      public Builder clearStatsdTracingConfig() {
        bitField0_ = (bitField0_ & ~0x00800000);
        statsdTracingConfig_ = null;
        if (statsdTracingConfigBuilder_ != null) {
          statsdTracingConfigBuilder_.dispose();
          statsdTracingConfigBuilder_ = null;
        }
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Data source name: android.statsd
       * </pre>
       *
       * <code>optional .perfetto.protos.StatsdTracingConfig statsd_tracing_config = 117 [lazy = true];</code>
       */
      public perfetto.protos.StatsdTracingConfigOuterClass.StatsdTracingConfig.Builder getStatsdTracingConfigBuilder() {
        bitField0_ |= 0x00800000;
        onChanged();
        return getStatsdTracingConfigFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       * Data source name: android.statsd
       * </pre>
       *
       * <code>optional .perfetto.protos.StatsdTracingConfig statsd_tracing_config = 117 [lazy = true];</code>
       */
      public perfetto.protos.StatsdTracingConfigOuterClass.StatsdTracingConfigOrBuilder getStatsdTracingConfigOrBuilder() {
        if (statsdTracingConfigBuilder_ != null) {
          return statsdTracingConfigBuilder_.getMessageOrBuilder();
        } else {
          return statsdTracingConfig_ == null ?
              perfetto.protos.StatsdTracingConfigOuterClass.StatsdTracingConfig.getDefaultInstance() : statsdTracingConfig_;
        }
      }
      /**
       * <pre>
       * Data source name: android.statsd
       * </pre>
       *
       * <code>optional .perfetto.protos.StatsdTracingConfig statsd_tracing_config = 117 [lazy = true];</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          perfetto.protos.StatsdTracingConfigOuterClass.StatsdTracingConfig, perfetto.protos.StatsdTracingConfigOuterClass.StatsdTracingConfig.Builder, perfetto.protos.StatsdTracingConfigOuterClass.StatsdTracingConfigOrBuilder> 
          getStatsdTracingConfigFieldBuilder() {
        if (statsdTracingConfigBuilder_ == null) {
          statsdTracingConfigBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              perfetto.protos.StatsdTracingConfigOuterClass.StatsdTracingConfig, perfetto.protos.StatsdTracingConfigOuterClass.StatsdTracingConfig.Builder, perfetto.protos.StatsdTracingConfigOuterClass.StatsdTracingConfigOrBuilder>(
                  getStatsdTracingConfig(),
                  getParentForChildren(),
                  isClean());
          statsdTracingConfig_ = null;
        }
        return statsdTracingConfigBuilder_;
      }

      private perfetto.protos.SystemInfo.SystemInfoConfig systemInfoConfig_;
      private com.google.protobuf.SingleFieldBuilderV3<
          perfetto.protos.SystemInfo.SystemInfoConfig, perfetto.protos.SystemInfo.SystemInfoConfig.Builder, perfetto.protos.SystemInfo.SystemInfoConfigOrBuilder> systemInfoConfigBuilder_;
      /**
       * <pre>
       * Data source name: linux.system_info
       * </pre>
       *
       * <code>optional .perfetto.protos.SystemInfoConfig system_info_config = 119;</code>
       * @return Whether the systemInfoConfig field is set.
       */
      public boolean hasSystemInfoConfig() {
        return ((bitField0_ & 0x01000000) != 0);
      }
      /**
       * <pre>
       * Data source name: linux.system_info
       * </pre>
       *
       * <code>optional .perfetto.protos.SystemInfoConfig system_info_config = 119;</code>
       * @return The systemInfoConfig.
       */
      public perfetto.protos.SystemInfo.SystemInfoConfig getSystemInfoConfig() {
        if (systemInfoConfigBuilder_ == null) {
          return systemInfoConfig_ == null ? perfetto.protos.SystemInfo.SystemInfoConfig.getDefaultInstance() : systemInfoConfig_;
        } else {
          return systemInfoConfigBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       * Data source name: linux.system_info
       * </pre>
       *
       * <code>optional .perfetto.protos.SystemInfoConfig system_info_config = 119;</code>
       */
      public Builder setSystemInfoConfig(perfetto.protos.SystemInfo.SystemInfoConfig value) {
        if (systemInfoConfigBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          systemInfoConfig_ = value;
        } else {
          systemInfoConfigBuilder_.setMessage(value);
        }
        bitField0_ |= 0x01000000;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Data source name: linux.system_info
       * </pre>
       *
       * <code>optional .perfetto.protos.SystemInfoConfig system_info_config = 119;</code>
       */
      public Builder setSystemInfoConfig(
          perfetto.protos.SystemInfo.SystemInfoConfig.Builder builderForValue) {
        if (systemInfoConfigBuilder_ == null) {
          systemInfoConfig_ = builderForValue.build();
        } else {
          systemInfoConfigBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x01000000;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Data source name: linux.system_info
       * </pre>
       *
       * <code>optional .perfetto.protos.SystemInfoConfig system_info_config = 119;</code>
       */
      public Builder mergeSystemInfoConfig(perfetto.protos.SystemInfo.SystemInfoConfig value) {
        if (systemInfoConfigBuilder_ == null) {
          if (((bitField0_ & 0x01000000) != 0) &&
            systemInfoConfig_ != null &&
            systemInfoConfig_ != perfetto.protos.SystemInfo.SystemInfoConfig.getDefaultInstance()) {
            getSystemInfoConfigBuilder().mergeFrom(value);
          } else {
            systemInfoConfig_ = value;
          }
        } else {
          systemInfoConfigBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x01000000;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Data source name: linux.system_info
       * </pre>
       *
       * <code>optional .perfetto.protos.SystemInfoConfig system_info_config = 119;</code>
       */
      public Builder clearSystemInfoConfig() {
        bitField0_ = (bitField0_ & ~0x01000000);
        systemInfoConfig_ = null;
        if (systemInfoConfigBuilder_ != null) {
          systemInfoConfigBuilder_.dispose();
          systemInfoConfigBuilder_ = null;
        }
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Data source name: linux.system_info
       * </pre>
       *
       * <code>optional .perfetto.protos.SystemInfoConfig system_info_config = 119;</code>
       */
      public perfetto.protos.SystemInfo.SystemInfoConfig.Builder getSystemInfoConfigBuilder() {
        bitField0_ |= 0x01000000;
        onChanged();
        return getSystemInfoConfigFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       * Data source name: linux.system_info
       * </pre>
       *
       * <code>optional .perfetto.protos.SystemInfoConfig system_info_config = 119;</code>
       */
      public perfetto.protos.SystemInfo.SystemInfoConfigOrBuilder getSystemInfoConfigOrBuilder() {
        if (systemInfoConfigBuilder_ != null) {
          return systemInfoConfigBuilder_.getMessageOrBuilder();
        } else {
          return systemInfoConfig_ == null ?
              perfetto.protos.SystemInfo.SystemInfoConfig.getDefaultInstance() : systemInfoConfig_;
        }
      }
      /**
       * <pre>
       * Data source name: linux.system_info
       * </pre>
       *
       * <code>optional .perfetto.protos.SystemInfoConfig system_info_config = 119;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          perfetto.protos.SystemInfo.SystemInfoConfig, perfetto.protos.SystemInfo.SystemInfoConfig.Builder, perfetto.protos.SystemInfo.SystemInfoConfigOrBuilder> 
          getSystemInfoConfigFieldBuilder() {
        if (systemInfoConfigBuilder_ == null) {
          systemInfoConfigBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              perfetto.protos.SystemInfo.SystemInfoConfig, perfetto.protos.SystemInfo.SystemInfoConfig.Builder, perfetto.protos.SystemInfo.SystemInfoConfigOrBuilder>(
                  getSystemInfoConfig(),
                  getParentForChildren(),
                  isClean());
          systemInfoConfig_ = null;
        }
        return systemInfoConfigBuilder_;
      }

      private perfetto.protos.ChromeConfigOuterClass.ChromeConfig chromeConfig_;
      private com.google.protobuf.SingleFieldBuilderV3<
          perfetto.protos.ChromeConfigOuterClass.ChromeConfig, perfetto.protos.ChromeConfigOuterClass.ChromeConfig.Builder, perfetto.protos.ChromeConfigOuterClass.ChromeConfigOrBuilder> chromeConfigBuilder_;
      /**
       * <pre>
       * Chrome is special as it doesn't use the perfetto IPC layer. We want to
       * avoid proto serialization and de-serialization there because that would
       * just add extra hops on top of the Mojo ser/des. Instead we auto-generate a
       * C++ class for it so it can pass around plain C++ objets.
       * </pre>
       *
       * <code>optional .perfetto.protos.ChromeConfig chrome_config = 101;</code>
       * @return Whether the chromeConfig field is set.
       */
      public boolean hasChromeConfig() {
        return ((bitField0_ & 0x02000000) != 0);
      }
      /**
       * <pre>
       * Chrome is special as it doesn't use the perfetto IPC layer. We want to
       * avoid proto serialization and de-serialization there because that would
       * just add extra hops on top of the Mojo ser/des. Instead we auto-generate a
       * C++ class for it so it can pass around plain C++ objets.
       * </pre>
       *
       * <code>optional .perfetto.protos.ChromeConfig chrome_config = 101;</code>
       * @return The chromeConfig.
       */
      public perfetto.protos.ChromeConfigOuterClass.ChromeConfig getChromeConfig() {
        if (chromeConfigBuilder_ == null) {
          return chromeConfig_ == null ? perfetto.protos.ChromeConfigOuterClass.ChromeConfig.getDefaultInstance() : chromeConfig_;
        } else {
          return chromeConfigBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       * Chrome is special as it doesn't use the perfetto IPC layer. We want to
       * avoid proto serialization and de-serialization there because that would
       * just add extra hops on top of the Mojo ser/des. Instead we auto-generate a
       * C++ class for it so it can pass around plain C++ objets.
       * </pre>
       *
       * <code>optional .perfetto.protos.ChromeConfig chrome_config = 101;</code>
       */
      public Builder setChromeConfig(perfetto.protos.ChromeConfigOuterClass.ChromeConfig value) {
        if (chromeConfigBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          chromeConfig_ = value;
        } else {
          chromeConfigBuilder_.setMessage(value);
        }
        bitField0_ |= 0x02000000;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Chrome is special as it doesn't use the perfetto IPC layer. We want to
       * avoid proto serialization and de-serialization there because that would
       * just add extra hops on top of the Mojo ser/des. Instead we auto-generate a
       * C++ class for it so it can pass around plain C++ objets.
       * </pre>
       *
       * <code>optional .perfetto.protos.ChromeConfig chrome_config = 101;</code>
       */
      public Builder setChromeConfig(
          perfetto.protos.ChromeConfigOuterClass.ChromeConfig.Builder builderForValue) {
        if (chromeConfigBuilder_ == null) {
          chromeConfig_ = builderForValue.build();
        } else {
          chromeConfigBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x02000000;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Chrome is special as it doesn't use the perfetto IPC layer. We want to
       * avoid proto serialization and de-serialization there because that would
       * just add extra hops on top of the Mojo ser/des. Instead we auto-generate a
       * C++ class for it so it can pass around plain C++ objets.
       * </pre>
       *
       * <code>optional .perfetto.protos.ChromeConfig chrome_config = 101;</code>
       */
      public Builder mergeChromeConfig(perfetto.protos.ChromeConfigOuterClass.ChromeConfig value) {
        if (chromeConfigBuilder_ == null) {
          if (((bitField0_ & 0x02000000) != 0) &&
            chromeConfig_ != null &&
            chromeConfig_ != perfetto.protos.ChromeConfigOuterClass.ChromeConfig.getDefaultInstance()) {
            getChromeConfigBuilder().mergeFrom(value);
          } else {
            chromeConfig_ = value;
          }
        } else {
          chromeConfigBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x02000000;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Chrome is special as it doesn't use the perfetto IPC layer. We want to
       * avoid proto serialization and de-serialization there because that would
       * just add extra hops on top of the Mojo ser/des. Instead we auto-generate a
       * C++ class for it so it can pass around plain C++ objets.
       * </pre>
       *
       * <code>optional .perfetto.protos.ChromeConfig chrome_config = 101;</code>
       */
      public Builder clearChromeConfig() {
        bitField0_ = (bitField0_ & ~0x02000000);
        chromeConfig_ = null;
        if (chromeConfigBuilder_ != null) {
          chromeConfigBuilder_.dispose();
          chromeConfigBuilder_ = null;
        }
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Chrome is special as it doesn't use the perfetto IPC layer. We want to
       * avoid proto serialization and de-serialization there because that would
       * just add extra hops on top of the Mojo ser/des. Instead we auto-generate a
       * C++ class for it so it can pass around plain C++ objets.
       * </pre>
       *
       * <code>optional .perfetto.protos.ChromeConfig chrome_config = 101;</code>
       */
      public perfetto.protos.ChromeConfigOuterClass.ChromeConfig.Builder getChromeConfigBuilder() {
        bitField0_ |= 0x02000000;
        onChanged();
        return getChromeConfigFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       * Chrome is special as it doesn't use the perfetto IPC layer. We want to
       * avoid proto serialization and de-serialization there because that would
       * just add extra hops on top of the Mojo ser/des. Instead we auto-generate a
       * C++ class for it so it can pass around plain C++ objets.
       * </pre>
       *
       * <code>optional .perfetto.protos.ChromeConfig chrome_config = 101;</code>
       */
      public perfetto.protos.ChromeConfigOuterClass.ChromeConfigOrBuilder getChromeConfigOrBuilder() {
        if (chromeConfigBuilder_ != null) {
          return chromeConfigBuilder_.getMessageOrBuilder();
        } else {
          return chromeConfig_ == null ?
              perfetto.protos.ChromeConfigOuterClass.ChromeConfig.getDefaultInstance() : chromeConfig_;
        }
      }
      /**
       * <pre>
       * Chrome is special as it doesn't use the perfetto IPC layer. We want to
       * avoid proto serialization and de-serialization there because that would
       * just add extra hops on top of the Mojo ser/des. Instead we auto-generate a
       * C++ class for it so it can pass around plain C++ objets.
       * </pre>
       *
       * <code>optional .perfetto.protos.ChromeConfig chrome_config = 101;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          perfetto.protos.ChromeConfigOuterClass.ChromeConfig, perfetto.protos.ChromeConfigOuterClass.ChromeConfig.Builder, perfetto.protos.ChromeConfigOuterClass.ChromeConfigOrBuilder> 
          getChromeConfigFieldBuilder() {
        if (chromeConfigBuilder_ == null) {
          chromeConfigBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              perfetto.protos.ChromeConfigOuterClass.ChromeConfig, perfetto.protos.ChromeConfigOuterClass.ChromeConfig.Builder, perfetto.protos.ChromeConfigOuterClass.ChromeConfigOrBuilder>(
                  getChromeConfig(),
                  getParentForChildren(),
                  isClean());
          chromeConfig_ = null;
        }
        return chromeConfigBuilder_;
      }

      private perfetto.protos.InterceptorConfigOuterClass.InterceptorConfig interceptorConfig_;
      private com.google.protobuf.SingleFieldBuilderV3<
          perfetto.protos.InterceptorConfigOuterClass.InterceptorConfig, perfetto.protos.InterceptorConfigOuterClass.InterceptorConfig.Builder, perfetto.protos.InterceptorConfigOuterClass.InterceptorConfigOrBuilder> interceptorConfigBuilder_;
      /**
       * <pre>
       * If an interceptor is specified here, packets for this data source will be
       * rerouted to the interceptor instead of the main trace buffer. This can be
       * used, for example, to write trace data into ETW or for logging trace points
       * to the console.
       * Note that interceptors are only supported by data sources registered
       * through the Perfetto SDK API. Data sources that don't use that API (e.g.,
       * traced_probes) may not support interception.
       * </pre>
       *
       * <code>optional .perfetto.protos.InterceptorConfig interceptor_config = 115;</code>
       * @return Whether the interceptorConfig field is set.
       */
      public boolean hasInterceptorConfig() {
        return ((bitField0_ & 0x04000000) != 0);
      }
      /**
       * <pre>
       * If an interceptor is specified here, packets for this data source will be
       * rerouted to the interceptor instead of the main trace buffer. This can be
       * used, for example, to write trace data into ETW or for logging trace points
       * to the console.
       * Note that interceptors are only supported by data sources registered
       * through the Perfetto SDK API. Data sources that don't use that API (e.g.,
       * traced_probes) may not support interception.
       * </pre>
       *
       * <code>optional .perfetto.protos.InterceptorConfig interceptor_config = 115;</code>
       * @return The interceptorConfig.
       */
      public perfetto.protos.InterceptorConfigOuterClass.InterceptorConfig getInterceptorConfig() {
        if (interceptorConfigBuilder_ == null) {
          return interceptorConfig_ == null ? perfetto.protos.InterceptorConfigOuterClass.InterceptorConfig.getDefaultInstance() : interceptorConfig_;
        } else {
          return interceptorConfigBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       * If an interceptor is specified here, packets for this data source will be
       * rerouted to the interceptor instead of the main trace buffer. This can be
       * used, for example, to write trace data into ETW or for logging trace points
       * to the console.
       * Note that interceptors are only supported by data sources registered
       * through the Perfetto SDK API. Data sources that don't use that API (e.g.,
       * traced_probes) may not support interception.
       * </pre>
       *
       * <code>optional .perfetto.protos.InterceptorConfig interceptor_config = 115;</code>
       */
      public Builder setInterceptorConfig(perfetto.protos.InterceptorConfigOuterClass.InterceptorConfig value) {
        if (interceptorConfigBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          interceptorConfig_ = value;
        } else {
          interceptorConfigBuilder_.setMessage(value);
        }
        bitField0_ |= 0x04000000;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * If an interceptor is specified here, packets for this data source will be
       * rerouted to the interceptor instead of the main trace buffer. This can be
       * used, for example, to write trace data into ETW or for logging trace points
       * to the console.
       * Note that interceptors are only supported by data sources registered
       * through the Perfetto SDK API. Data sources that don't use that API (e.g.,
       * traced_probes) may not support interception.
       * </pre>
       *
       * <code>optional .perfetto.protos.InterceptorConfig interceptor_config = 115;</code>
       */
      public Builder setInterceptorConfig(
          perfetto.protos.InterceptorConfigOuterClass.InterceptorConfig.Builder builderForValue) {
        if (interceptorConfigBuilder_ == null) {
          interceptorConfig_ = builderForValue.build();
        } else {
          interceptorConfigBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x04000000;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * If an interceptor is specified here, packets for this data source will be
       * rerouted to the interceptor instead of the main trace buffer. This can be
       * used, for example, to write trace data into ETW or for logging trace points
       * to the console.
       * Note that interceptors are only supported by data sources registered
       * through the Perfetto SDK API. Data sources that don't use that API (e.g.,
       * traced_probes) may not support interception.
       * </pre>
       *
       * <code>optional .perfetto.protos.InterceptorConfig interceptor_config = 115;</code>
       */
      public Builder mergeInterceptorConfig(perfetto.protos.InterceptorConfigOuterClass.InterceptorConfig value) {
        if (interceptorConfigBuilder_ == null) {
          if (((bitField0_ & 0x04000000) != 0) &&
            interceptorConfig_ != null &&
            interceptorConfig_ != perfetto.protos.InterceptorConfigOuterClass.InterceptorConfig.getDefaultInstance()) {
            getInterceptorConfigBuilder().mergeFrom(value);
          } else {
            interceptorConfig_ = value;
          }
        } else {
          interceptorConfigBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x04000000;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * If an interceptor is specified here, packets for this data source will be
       * rerouted to the interceptor instead of the main trace buffer. This can be
       * used, for example, to write trace data into ETW or for logging trace points
       * to the console.
       * Note that interceptors are only supported by data sources registered
       * through the Perfetto SDK API. Data sources that don't use that API (e.g.,
       * traced_probes) may not support interception.
       * </pre>
       *
       * <code>optional .perfetto.protos.InterceptorConfig interceptor_config = 115;</code>
       */
      public Builder clearInterceptorConfig() {
        bitField0_ = (bitField0_ & ~0x04000000);
        interceptorConfig_ = null;
        if (interceptorConfigBuilder_ != null) {
          interceptorConfigBuilder_.dispose();
          interceptorConfigBuilder_ = null;
        }
        onChanged();
        return this;
      }
      /**
       * <pre>
       * If an interceptor is specified here, packets for this data source will be
       * rerouted to the interceptor instead of the main trace buffer. This can be
       * used, for example, to write trace data into ETW or for logging trace points
       * to the console.
       * Note that interceptors are only supported by data sources registered
       * through the Perfetto SDK API. Data sources that don't use that API (e.g.,
       * traced_probes) may not support interception.
       * </pre>
       *
       * <code>optional .perfetto.protos.InterceptorConfig interceptor_config = 115;</code>
       */
      public perfetto.protos.InterceptorConfigOuterClass.InterceptorConfig.Builder getInterceptorConfigBuilder() {
        bitField0_ |= 0x04000000;
        onChanged();
        return getInterceptorConfigFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       * If an interceptor is specified here, packets for this data source will be
       * rerouted to the interceptor instead of the main trace buffer. This can be
       * used, for example, to write trace data into ETW or for logging trace points
       * to the console.
       * Note that interceptors are only supported by data sources registered
       * through the Perfetto SDK API. Data sources that don't use that API (e.g.,
       * traced_probes) may not support interception.
       * </pre>
       *
       * <code>optional .perfetto.protos.InterceptorConfig interceptor_config = 115;</code>
       */
      public perfetto.protos.InterceptorConfigOuterClass.InterceptorConfigOrBuilder getInterceptorConfigOrBuilder() {
        if (interceptorConfigBuilder_ != null) {
          return interceptorConfigBuilder_.getMessageOrBuilder();
        } else {
          return interceptorConfig_ == null ?
              perfetto.protos.InterceptorConfigOuterClass.InterceptorConfig.getDefaultInstance() : interceptorConfig_;
        }
      }
      /**
       * <pre>
       * If an interceptor is specified here, packets for this data source will be
       * rerouted to the interceptor instead of the main trace buffer. This can be
       * used, for example, to write trace data into ETW or for logging trace points
       * to the console.
       * Note that interceptors are only supported by data sources registered
       * through the Perfetto SDK API. Data sources that don't use that API (e.g.,
       * traced_probes) may not support interception.
       * </pre>
       *
       * <code>optional .perfetto.protos.InterceptorConfig interceptor_config = 115;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          perfetto.protos.InterceptorConfigOuterClass.InterceptorConfig, perfetto.protos.InterceptorConfigOuterClass.InterceptorConfig.Builder, perfetto.protos.InterceptorConfigOuterClass.InterceptorConfigOrBuilder> 
          getInterceptorConfigFieldBuilder() {
        if (interceptorConfigBuilder_ == null) {
          interceptorConfigBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              perfetto.protos.InterceptorConfigOuterClass.InterceptorConfig, perfetto.protos.InterceptorConfigOuterClass.InterceptorConfig.Builder, perfetto.protos.InterceptorConfigOuterClass.InterceptorConfigOrBuilder>(
                  getInterceptorConfig(),
                  getParentForChildren(),
                  isClean());
          interceptorConfig_ = null;
        }
        return interceptorConfigBuilder_;
      }

      private perfetto.protos.NetworkTraceConfig.NetworkPacketTraceConfig networkPacketTraceConfig_;
      private com.google.protobuf.SingleFieldBuilderV3<
          perfetto.protos.NetworkTraceConfig.NetworkPacketTraceConfig, perfetto.protos.NetworkTraceConfig.NetworkPacketTraceConfig.Builder, perfetto.protos.NetworkTraceConfig.NetworkPacketTraceConfigOrBuilder> networkPacketTraceConfigBuilder_;
      /**
       * <pre>
       * Data source name: android.network_packets.
       * Introduced in Android 14 (U).
       * </pre>
       *
       * <code>optional .perfetto.protos.NetworkPacketTraceConfig network_packet_trace_config = 120 [lazy = true];</code>
       * @return Whether the networkPacketTraceConfig field is set.
       */
      public boolean hasNetworkPacketTraceConfig() {
        return ((bitField0_ & 0x08000000) != 0);
      }
      /**
       * <pre>
       * Data source name: android.network_packets.
       * Introduced in Android 14 (U).
       * </pre>
       *
       * <code>optional .perfetto.protos.NetworkPacketTraceConfig network_packet_trace_config = 120 [lazy = true];</code>
       * @return The networkPacketTraceConfig.
       */
      public perfetto.protos.NetworkTraceConfig.NetworkPacketTraceConfig getNetworkPacketTraceConfig() {
        if (networkPacketTraceConfigBuilder_ == null) {
          return networkPacketTraceConfig_ == null ? perfetto.protos.NetworkTraceConfig.NetworkPacketTraceConfig.getDefaultInstance() : networkPacketTraceConfig_;
        } else {
          return networkPacketTraceConfigBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       * Data source name: android.network_packets.
       * Introduced in Android 14 (U).
       * </pre>
       *
       * <code>optional .perfetto.protos.NetworkPacketTraceConfig network_packet_trace_config = 120 [lazy = true];</code>
       */
      public Builder setNetworkPacketTraceConfig(perfetto.protos.NetworkTraceConfig.NetworkPacketTraceConfig value) {
        if (networkPacketTraceConfigBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          networkPacketTraceConfig_ = value;
        } else {
          networkPacketTraceConfigBuilder_.setMessage(value);
        }
        bitField0_ |= 0x08000000;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Data source name: android.network_packets.
       * Introduced in Android 14 (U).
       * </pre>
       *
       * <code>optional .perfetto.protos.NetworkPacketTraceConfig network_packet_trace_config = 120 [lazy = true];</code>
       */
      public Builder setNetworkPacketTraceConfig(
          perfetto.protos.NetworkTraceConfig.NetworkPacketTraceConfig.Builder builderForValue) {
        if (networkPacketTraceConfigBuilder_ == null) {
          networkPacketTraceConfig_ = builderForValue.build();
        } else {
          networkPacketTraceConfigBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x08000000;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Data source name: android.network_packets.
       * Introduced in Android 14 (U).
       * </pre>
       *
       * <code>optional .perfetto.protos.NetworkPacketTraceConfig network_packet_trace_config = 120 [lazy = true];</code>
       */
      public Builder mergeNetworkPacketTraceConfig(perfetto.protos.NetworkTraceConfig.NetworkPacketTraceConfig value) {
        if (networkPacketTraceConfigBuilder_ == null) {
          if (((bitField0_ & 0x08000000) != 0) &&
            networkPacketTraceConfig_ != null &&
            networkPacketTraceConfig_ != perfetto.protos.NetworkTraceConfig.NetworkPacketTraceConfig.getDefaultInstance()) {
            getNetworkPacketTraceConfigBuilder().mergeFrom(value);
          } else {
            networkPacketTraceConfig_ = value;
          }
        } else {
          networkPacketTraceConfigBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x08000000;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Data source name: android.network_packets.
       * Introduced in Android 14 (U).
       * </pre>
       *
       * <code>optional .perfetto.protos.NetworkPacketTraceConfig network_packet_trace_config = 120 [lazy = true];</code>
       */
      public Builder clearNetworkPacketTraceConfig() {
        bitField0_ = (bitField0_ & ~0x08000000);
        networkPacketTraceConfig_ = null;
        if (networkPacketTraceConfigBuilder_ != null) {
          networkPacketTraceConfigBuilder_.dispose();
          networkPacketTraceConfigBuilder_ = null;
        }
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Data source name: android.network_packets.
       * Introduced in Android 14 (U).
       * </pre>
       *
       * <code>optional .perfetto.protos.NetworkPacketTraceConfig network_packet_trace_config = 120 [lazy = true];</code>
       */
      public perfetto.protos.NetworkTraceConfig.NetworkPacketTraceConfig.Builder getNetworkPacketTraceConfigBuilder() {
        bitField0_ |= 0x08000000;
        onChanged();
        return getNetworkPacketTraceConfigFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       * Data source name: android.network_packets.
       * Introduced in Android 14 (U).
       * </pre>
       *
       * <code>optional .perfetto.protos.NetworkPacketTraceConfig network_packet_trace_config = 120 [lazy = true];</code>
       */
      public perfetto.protos.NetworkTraceConfig.NetworkPacketTraceConfigOrBuilder getNetworkPacketTraceConfigOrBuilder() {
        if (networkPacketTraceConfigBuilder_ != null) {
          return networkPacketTraceConfigBuilder_.getMessageOrBuilder();
        } else {
          return networkPacketTraceConfig_ == null ?
              perfetto.protos.NetworkTraceConfig.NetworkPacketTraceConfig.getDefaultInstance() : networkPacketTraceConfig_;
        }
      }
      /**
       * <pre>
       * Data source name: android.network_packets.
       * Introduced in Android 14 (U).
       * </pre>
       *
       * <code>optional .perfetto.protos.NetworkPacketTraceConfig network_packet_trace_config = 120 [lazy = true];</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          perfetto.protos.NetworkTraceConfig.NetworkPacketTraceConfig, perfetto.protos.NetworkTraceConfig.NetworkPacketTraceConfig.Builder, perfetto.protos.NetworkTraceConfig.NetworkPacketTraceConfigOrBuilder> 
          getNetworkPacketTraceConfigFieldBuilder() {
        if (networkPacketTraceConfigBuilder_ == null) {
          networkPacketTraceConfigBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              perfetto.protos.NetworkTraceConfig.NetworkPacketTraceConfig, perfetto.protos.NetworkTraceConfig.NetworkPacketTraceConfig.Builder, perfetto.protos.NetworkTraceConfig.NetworkPacketTraceConfigOrBuilder>(
                  getNetworkPacketTraceConfig(),
                  getParentForChildren(),
                  isClean());
          networkPacketTraceConfig_ = null;
        }
        return networkPacketTraceConfigBuilder_;
      }

      private java.lang.Object legacyConfig_ = "";
      /**
       * <pre>
       * This is a fallback mechanism to send a free-form text config to the
       * producer. In theory this should never be needed. All the code that
       * is part of the platform (i.e. traced service) is supposed to *not* truncate
       * the trace config proto and propagate unknown fields. However, if anything
       * in the pipeline (client or backend) ends up breaking this forward compat
       * plan, this field will become the escape hatch to allow future data sources
       * to get some meaningful configuration.
       * </pre>
       *
       * <code>optional string legacy_config = 1000;</code>
       * @return Whether the legacyConfig field is set.
       */
      public boolean hasLegacyConfig() {
        return ((bitField0_ & 0x10000000) != 0);
      }
      /**
       * <pre>
       * This is a fallback mechanism to send a free-form text config to the
       * producer. In theory this should never be needed. All the code that
       * is part of the platform (i.e. traced service) is supposed to *not* truncate
       * the trace config proto and propagate unknown fields. However, if anything
       * in the pipeline (client or backend) ends up breaking this forward compat
       * plan, this field will become the escape hatch to allow future data sources
       * to get some meaningful configuration.
       * </pre>
       *
       * <code>optional string legacy_config = 1000;</code>
       * @return The legacyConfig.
       */
      public java.lang.String getLegacyConfig() {
        java.lang.Object ref = legacyConfig_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          if (bs.isValidUtf8()) {
            legacyConfig_ = s;
          }
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <pre>
       * This is a fallback mechanism to send a free-form text config to the
       * producer. In theory this should never be needed. All the code that
       * is part of the platform (i.e. traced service) is supposed to *not* truncate
       * the trace config proto and propagate unknown fields. However, if anything
       * in the pipeline (client or backend) ends up breaking this forward compat
       * plan, this field will become the escape hatch to allow future data sources
       * to get some meaningful configuration.
       * </pre>
       *
       * <code>optional string legacy_config = 1000;</code>
       * @return The bytes for legacyConfig.
       */
      public com.google.protobuf.ByteString
          getLegacyConfigBytes() {
        java.lang.Object ref = legacyConfig_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          legacyConfig_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <pre>
       * This is a fallback mechanism to send a free-form text config to the
       * producer. In theory this should never be needed. All the code that
       * is part of the platform (i.e. traced service) is supposed to *not* truncate
       * the trace config proto and propagate unknown fields. However, if anything
       * in the pipeline (client or backend) ends up breaking this forward compat
       * plan, this field will become the escape hatch to allow future data sources
       * to get some meaningful configuration.
       * </pre>
       *
       * <code>optional string legacy_config = 1000;</code>
       * @param value The legacyConfig to set.
       * @return This builder for chaining.
       */
      public Builder setLegacyConfig(
          java.lang.String value) {
        if (value == null) { throw new NullPointerException(); }
        legacyConfig_ = value;
        bitField0_ |= 0x10000000;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * This is a fallback mechanism to send a free-form text config to the
       * producer. In theory this should never be needed. All the code that
       * is part of the platform (i.e. traced service) is supposed to *not* truncate
       * the trace config proto and propagate unknown fields. However, if anything
       * in the pipeline (client or backend) ends up breaking this forward compat
       * plan, this field will become the escape hatch to allow future data sources
       * to get some meaningful configuration.
       * </pre>
       *
       * <code>optional string legacy_config = 1000;</code>
       * @return This builder for chaining.
       */
      public Builder clearLegacyConfig() {
        legacyConfig_ = getDefaultInstance().getLegacyConfig();
        bitField0_ = (bitField0_ & ~0x10000000);
        onChanged();
        return this;
      }
      /**
       * <pre>
       * This is a fallback mechanism to send a free-form text config to the
       * producer. In theory this should never be needed. All the code that
       * is part of the platform (i.e. traced service) is supposed to *not* truncate
       * the trace config proto and propagate unknown fields. However, if anything
       * in the pipeline (client or backend) ends up breaking this forward compat
       * plan, this field will become the escape hatch to allow future data sources
       * to get some meaningful configuration.
       * </pre>
       *
       * <code>optional string legacy_config = 1000;</code>
       * @param value The bytes for legacyConfig to set.
       * @return This builder for chaining.
       */
      public Builder setLegacyConfigBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) { throw new NullPointerException(); }
        legacyConfig_ = value;
        bitField0_ |= 0x10000000;
        onChanged();
        return this;
      }

      private perfetto.protos.TestConfigOuterClass.TestConfig forTesting_;
      private com.google.protobuf.SingleFieldBuilderV3<
          perfetto.protos.TestConfigOuterClass.TestConfig, perfetto.protos.TestConfigOuterClass.TestConfig.Builder, perfetto.protos.TestConfigOuterClass.TestConfigOrBuilder> forTestingBuilder_;
      /**
       * <pre>
       * This field is only used for testing.
       * </pre>
       *
       * <code>optional .perfetto.protos.TestConfig for_testing = 1001;</code>
       * @return Whether the forTesting field is set.
       */
      public boolean hasForTesting() {
        return ((bitField0_ & 0x20000000) != 0);
      }
      /**
       * <pre>
       * This field is only used for testing.
       * </pre>
       *
       * <code>optional .perfetto.protos.TestConfig for_testing = 1001;</code>
       * @return The forTesting.
       */
      public perfetto.protos.TestConfigOuterClass.TestConfig getForTesting() {
        if (forTestingBuilder_ == null) {
          return forTesting_ == null ? perfetto.protos.TestConfigOuterClass.TestConfig.getDefaultInstance() : forTesting_;
        } else {
          return forTestingBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       * This field is only used for testing.
       * </pre>
       *
       * <code>optional .perfetto.protos.TestConfig for_testing = 1001;</code>
       */
      public Builder setForTesting(perfetto.protos.TestConfigOuterClass.TestConfig value) {
        if (forTestingBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          forTesting_ = value;
        } else {
          forTestingBuilder_.setMessage(value);
        }
        bitField0_ |= 0x20000000;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * This field is only used for testing.
       * </pre>
       *
       * <code>optional .perfetto.protos.TestConfig for_testing = 1001;</code>
       */
      public Builder setForTesting(
          perfetto.protos.TestConfigOuterClass.TestConfig.Builder builderForValue) {
        if (forTestingBuilder_ == null) {
          forTesting_ = builderForValue.build();
        } else {
          forTestingBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x20000000;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * This field is only used for testing.
       * </pre>
       *
       * <code>optional .perfetto.protos.TestConfig for_testing = 1001;</code>
       */
      public Builder mergeForTesting(perfetto.protos.TestConfigOuterClass.TestConfig value) {
        if (forTestingBuilder_ == null) {
          if (((bitField0_ & 0x20000000) != 0) &&
            forTesting_ != null &&
            forTesting_ != perfetto.protos.TestConfigOuterClass.TestConfig.getDefaultInstance()) {
            getForTestingBuilder().mergeFrom(value);
          } else {
            forTesting_ = value;
          }
        } else {
          forTestingBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x20000000;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * This field is only used for testing.
       * </pre>
       *
       * <code>optional .perfetto.protos.TestConfig for_testing = 1001;</code>
       */
      public Builder clearForTesting() {
        bitField0_ = (bitField0_ & ~0x20000000);
        forTesting_ = null;
        if (forTestingBuilder_ != null) {
          forTestingBuilder_.dispose();
          forTestingBuilder_ = null;
        }
        onChanged();
        return this;
      }
      /**
       * <pre>
       * This field is only used for testing.
       * </pre>
       *
       * <code>optional .perfetto.protos.TestConfig for_testing = 1001;</code>
       */
      public perfetto.protos.TestConfigOuterClass.TestConfig.Builder getForTestingBuilder() {
        bitField0_ |= 0x20000000;
        onChanged();
        return getForTestingFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       * This field is only used for testing.
       * </pre>
       *
       * <code>optional .perfetto.protos.TestConfig for_testing = 1001;</code>
       */
      public perfetto.protos.TestConfigOuterClass.TestConfigOrBuilder getForTestingOrBuilder() {
        if (forTestingBuilder_ != null) {
          return forTestingBuilder_.getMessageOrBuilder();
        } else {
          return forTesting_ == null ?
              perfetto.protos.TestConfigOuterClass.TestConfig.getDefaultInstance() : forTesting_;
        }
      }
      /**
       * <pre>
       * This field is only used for testing.
       * </pre>
       *
       * <code>optional .perfetto.protos.TestConfig for_testing = 1001;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          perfetto.protos.TestConfigOuterClass.TestConfig, perfetto.protos.TestConfigOuterClass.TestConfig.Builder, perfetto.protos.TestConfigOuterClass.TestConfigOrBuilder> 
          getForTestingFieldBuilder() {
        if (forTestingBuilder_ == null) {
          forTestingBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              perfetto.protos.TestConfigOuterClass.TestConfig, perfetto.protos.TestConfigOuterClass.TestConfig.Builder, perfetto.protos.TestConfigOuterClass.TestConfigOrBuilder>(
                  getForTesting(),
                  getParentForChildren(),
                  isClean());
          forTesting_ = null;
        }
        return forTestingBuilder_;
      }
      @java.lang.Override
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      @java.lang.Override
      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:perfetto.protos.DataSourceConfig)
    }

    // @@protoc_insertion_point(class_scope:perfetto.protos.DataSourceConfig)
    private static final perfetto.protos.DataSourceConfigOuterClass.DataSourceConfig DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new perfetto.protos.DataSourceConfigOuterClass.DataSourceConfig();
    }

    public static perfetto.protos.DataSourceConfigOuterClass.DataSourceConfig getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    @java.lang.Deprecated public static final com.google.protobuf.Parser<DataSourceConfig>
        PARSER = new com.google.protobuf.AbstractParser<DataSourceConfig>() {
      @java.lang.Override
      public DataSourceConfig parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        Builder builder = newBuilder();
        try {
          builder.mergeFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.setUnfinishedMessage(builder.buildPartial());
        } catch (com.google.protobuf.UninitializedMessageException e) {
          throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
        } catch (java.io.IOException e) {
          throw new com.google.protobuf.InvalidProtocolBufferException(e)
              .setUnfinishedMessage(builder.buildPartial());
        }
        return builder.buildPartial();
      }
    };

    public static com.google.protobuf.Parser<DataSourceConfig> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<DataSourceConfig> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public perfetto.protos.DataSourceConfigOuterClass.DataSourceConfig getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_perfetto_protos_DataSourceConfig_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_perfetto_protos_DataSourceConfig_fieldAccessorTable;

  public static com.google.protobuf.Descriptors.FileDescriptor
      getDescriptor() {
    return descriptor;
  }
  private static  com.google.protobuf.Descriptors.FileDescriptor
      descriptor;
  static {
    java.lang.String[] descriptorData = {
      "\n/protos/perfetto/config/data_source_con" +
      "fig.proto\022\017perfetto.protos\032Jprotos/perfe" +
      "tto/config/android/android_game_interven" +
      "tion_list_config.proto\0327protos/perfetto/" +
      "config/android/android_log_config.proto\032" +
      "@protos/perfetto/config/android/android_" +
      "polled_state_config.proto\032Cprotos/perfet" +
      "to/config/android/android_system_propert" +
      "y_config.proto\0329protos/perfetto/config/a" +
      "ndroid/network_trace_config.proto\0329proto" +
      "s/perfetto/config/android/packages_list_" +
      "config.proto\0321protos/perfetto/config/chr" +
      "ome/chrome_config.proto\0321protos/perfetto" +
      "/config/ftrace/ftrace_config.proto\0323prot" +
      "os/perfetto/config/gpu/gpu_counter_confi" +
      "g.proto\0325protos/perfetto/config/gpu/vulk" +
      "an_memory_config.proto\0329protos/perfetto/" +
      "config/inode_file/inode_file_config.prot" +
      "o\032/protos/perfetto/config/interceptor_co" +
      "nfig.proto\0327protos/perfetto/config/power" +
      "/android_power_config.proto\0329protos/perf" +
      "etto/config/statsd/statsd_tracing_config" +
      ".proto\032?protos/perfetto/config/process_s" +
      "tats/process_stats_config.proto\0327protos/" +
      "perfetto/config/profiling/heapprofd_conf" +
      "ig.proto\0328protos/perfetto/config/profili" +
      "ng/java_hprof_config.proto\0328protos/perfe" +
      "tto/config/profiling/perf_event_config.p" +
      "roto\0327protos/perfetto/config/sys_stats/s" +
      "ys_stats_config.proto\032(protos/perfetto/c" +
      "onfig/test_config.proto\032;protos/perfetto" +
      "/config/track_event/track_event_config.p" +
      "roto\0324protos/perfetto/config/system_info" +
      "/system_info.proto\"\364\016\n\020DataSourceConfig\022" +
      "\014\n\004name\030\001 \001(\t\022\025\n\rtarget_buffer\030\002 \001(\r\022\031\n\021" +
      "trace_duration_ms\030\003 \001(\r\022\027\n\017stop_timeout_" +
      "ms\030\007 \001(\r\022\037\n\027enable_extra_guardrails\030\006 \001(" +
      "\010\022M\n\021session_initiator\030\010 \001(\01622.perfetto." +
      "protos.DataSourceConfig.SessionInitiator" +
      "\022\032\n\022tracing_session_id\030\004 \001(\004\0228\n\rftrace_c" +
      "onfig\030d \001(\0132\035.perfetto.protos.FtraceConf" +
      "igB\002(\001\022?\n\021inode_file_config\030f \001(\0132 .perf" +
      "etto.protos.InodeFileConfigB\002(\001\022E\n\024proce" +
      "ss_stats_config\030g \001(\0132#.perfetto.protos." +
      "ProcessStatsConfigB\002(\001\022=\n\020sys_stats_conf" +
      "ig\030h \001(\0132\037.perfetto.protos.SysStatsConfi" +
      "gB\002(\001\022>\n\020heapprofd_config\030i \001(\0132 .perfet" +
      "to.protos.HeapprofdConfigB\002(\001\022?\n\021java_hp" +
      "rof_config\030n \001(\0132 .perfetto.protos.JavaH" +
      "profConfigB\002(\001\022E\n\024android_power_config\030j" +
      " \001(\0132#.perfetto.protos.AndroidPowerConfi" +
      "gB\002(\001\022A\n\022android_log_config\030k \001(\0132!.perf" +
      "etto.protos.AndroidLogConfigB\002(\001\022A\n\022gpu_" +
      "counter_config\030l \001(\0132!.perfetto.protos.G" +
      "puCounterConfigB\002(\001\022e\n%android_game_inte" +
      "rvention_list_config\030t \001(\01322.perfetto.pr" +
      "otos.AndroidGameInterventionListConfigB\002" +
      "(\001\022E\n\024packages_list_config\030m \001(\0132#.perfe" +
      "tto.protos.PackagesListConfigB\002(\001\022?\n\021per" +
      "f_event_config\030o \001(\0132 .perfetto.protos.P" +
      "erfEventConfigB\002(\001\022E\n\024vulkan_memory_conf" +
      "ig\030p \001(\0132#.perfetto.protos.VulkanMemoryC" +
      "onfigB\002(\001\022A\n\022track_event_config\030q \001(\0132!." +
      "perfetto.protos.TrackEventConfigB\002(\001\022R\n\033" +
      "android_polled_state_config\030r \001(\0132).perf" +
      "etto.protos.AndroidPolledStateConfigB\002(\001" +
      "\022X\n\036android_system_property_config\030v \001(\013" +
      "2,.perfetto.protos.AndroidSystemProperty" +
      "ConfigB\002(\001\022G\n\025statsd_tracing_config\030u \001(" +
      "\0132$.perfetto.protos.StatsdTracingConfigB" +
      "\002(\001\022=\n\022system_info_config\030w \001(\0132!.perfet" +
      "to.protos.SystemInfoConfig\0224\n\rchrome_con" +
      "fig\030e \001(\0132\035.perfetto.protos.ChromeConfig" +
      "\022>\n\022interceptor_config\030s \001(\0132\".perfetto." +
      "protos.InterceptorConfig\022R\n\033network_pack" +
      "et_trace_config\030x \001(\0132).perfetto.protos." +
      "NetworkPacketTraceConfigB\002(\001\022\026\n\rlegacy_c" +
      "onfig\030\350\007 \001(\t\0221\n\013for_testing\030\351\007 \001(\0132\033.per" +
      "fetto.protos.TestConfig\"[\n\020SessionInitia" +
      "tor\022!\n\035SESSION_INITIATOR_UNSPECIFIED\020\000\022$" +
      "\n SESSION_INITIATOR_TRUSTED_SYSTEM\020\001J\013\010\377" +
      "\377\377\177\020\200\200\200\200\001"
    };
    descriptor = com.google.protobuf.Descriptors.FileDescriptor
      .internalBuildGeneratedFileFrom(descriptorData,
        new com.google.protobuf.Descriptors.FileDescriptor[] {
          perfetto.protos.AndroidGameInterventionListConfigOuterClass.getDescriptor(),
          perfetto.protos.AndroidLogConfigOuterClass.getDescriptor(),
          perfetto.protos.AndroidPolledStateConfigOuterClass.getDescriptor(),
          perfetto.protos.AndroidSystemPropertyConfigOuterClass.getDescriptor(),
          perfetto.protos.NetworkTraceConfig.getDescriptor(),
          perfetto.protos.PackagesListConfigOuterClass.getDescriptor(),
          perfetto.protos.ChromeConfigOuterClass.getDescriptor(),
          perfetto.protos.FtraceConfigOuterClass.getDescriptor(),
          perfetto.protos.GpuCounterConfigOuterClass.getDescriptor(),
          perfetto.protos.VulkanMemoryConfigOuterClass.getDescriptor(),
          perfetto.protos.InodeFileConfigOuterClass.getDescriptor(),
          perfetto.protos.InterceptorConfigOuterClass.getDescriptor(),
          perfetto.protos.AndroidPowerConfigOuterClass.getDescriptor(),
          perfetto.protos.StatsdTracingConfigOuterClass.getDescriptor(),
          perfetto.protos.ProcessStatsConfigOuterClass.getDescriptor(),
          perfetto.protos.HeapprofdConfigOuterClass.getDescriptor(),
          perfetto.protos.JavaHprofConfigOuterClass.getDescriptor(),
          perfetto.protos.PerfEventConfigOuterClass.getDescriptor(),
          perfetto.protos.SysStatsConfigOuterClass.getDescriptor(),
          perfetto.protos.TestConfigOuterClass.getDescriptor(),
          perfetto.protos.TrackEventConfigOuterClass.getDescriptor(),
          perfetto.protos.SystemInfo.getDescriptor(),
        });
    internal_static_perfetto_protos_DataSourceConfig_descriptor =
      getDescriptor().getMessageTypes().get(0);
    internal_static_perfetto_protos_DataSourceConfig_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_perfetto_protos_DataSourceConfig_descriptor,
        new java.lang.String[] { "Name", "TargetBuffer", "TraceDurationMs", "StopTimeoutMs", "EnableExtraGuardrails", "SessionInitiator", "TracingSessionId", "FtraceConfig", "InodeFileConfig", "ProcessStatsConfig", "SysStatsConfig", "HeapprofdConfig", "JavaHprofConfig", "AndroidPowerConfig", "AndroidLogConfig", "GpuCounterConfig", "AndroidGameInterventionListConfig", "PackagesListConfig", "PerfEventConfig", "VulkanMemoryConfig", "TrackEventConfig", "AndroidPolledStateConfig", "AndroidSystemPropertyConfig", "StatsdTracingConfig", "SystemInfoConfig", "ChromeConfig", "InterceptorConfig", "NetworkPacketTraceConfig", "LegacyConfig", "ForTesting", });
    perfetto.protos.AndroidGameInterventionListConfigOuterClass.getDescriptor();
    perfetto.protos.AndroidLogConfigOuterClass.getDescriptor();
    perfetto.protos.AndroidPolledStateConfigOuterClass.getDescriptor();
    perfetto.protos.AndroidSystemPropertyConfigOuterClass.getDescriptor();
    perfetto.protos.NetworkTraceConfig.getDescriptor();
    perfetto.protos.PackagesListConfigOuterClass.getDescriptor();
    perfetto.protos.ChromeConfigOuterClass.getDescriptor();
    perfetto.protos.FtraceConfigOuterClass.getDescriptor();
    perfetto.protos.GpuCounterConfigOuterClass.getDescriptor();
    perfetto.protos.VulkanMemoryConfigOuterClass.getDescriptor();
    perfetto.protos.InodeFileConfigOuterClass.getDescriptor();
    perfetto.protos.InterceptorConfigOuterClass.getDescriptor();
    perfetto.protos.AndroidPowerConfigOuterClass.getDescriptor();
    perfetto.protos.StatsdTracingConfigOuterClass.getDescriptor();
    perfetto.protos.ProcessStatsConfigOuterClass.getDescriptor();
    perfetto.protos.HeapprofdConfigOuterClass.getDescriptor();
    perfetto.protos.JavaHprofConfigOuterClass.getDescriptor();
    perfetto.protos.PerfEventConfigOuterClass.getDescriptor();
    perfetto.protos.SysStatsConfigOuterClass.getDescriptor();
    perfetto.protos.TestConfigOuterClass.getDescriptor();
    perfetto.protos.TrackEventConfigOuterClass.getDescriptor();
    perfetto.protos.SystemInfo.getDescriptor();
  }

  // @@protoc_insertion_point(outer_class_scope)
}
