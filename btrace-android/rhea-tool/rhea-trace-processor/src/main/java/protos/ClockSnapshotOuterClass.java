// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: protos/perfetto/trace/clock_snapshot.proto

package perfetto.protos;

public final class ClockSnapshotOuterClass {
  private ClockSnapshotOuterClass() {}
  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistryLite registry) {
  }

  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistry registry) {
    registerAllExtensions(
        (com.google.protobuf.ExtensionRegistryLite) registry);
  }
  public interface ClockSnapshotOrBuilder extends
      // @@protoc_insertion_point(interface_extends:perfetto.protos.ClockSnapshot)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <code>repeated .perfetto.protos.ClockSnapshot.Clock clocks = 1;</code>
     */
    java.util.List<perfetto.protos.ClockSnapshotOuterClass.ClockSnapshot.Clock> 
        getClocksList();
    /**
     * <code>repeated .perfetto.protos.ClockSnapshot.Clock clocks = 1;</code>
     */
    perfetto.protos.ClockSnapshotOuterClass.ClockSnapshot.Clock getClocks(int index);
    /**
     * <code>repeated .perfetto.protos.ClockSnapshot.Clock clocks = 1;</code>
     */
    int getClocksCount();
    /**
     * <code>repeated .perfetto.protos.ClockSnapshot.Clock clocks = 1;</code>
     */
    java.util.List<? extends perfetto.protos.ClockSnapshotOuterClass.ClockSnapshot.ClockOrBuilder> 
        getClocksOrBuilderList();
    /**
     * <code>repeated .perfetto.protos.ClockSnapshot.Clock clocks = 1;</code>
     */
    perfetto.protos.ClockSnapshotOuterClass.ClockSnapshot.ClockOrBuilder getClocksOrBuilder(
        int index);

    /**
     * <pre>
     * The authoritative clock domain for the trace. Defaults to BOOTTIME, but can
     * be overridden in TraceConfig's builtin_data_sources. Trace processor will
     * attempt to translate packet/event timestamps from various data sources (and
     * their chosen clock domains) to this domain during import.
     * </pre>
     *
     * <code>optional .perfetto.protos.BuiltinClock primary_trace_clock = 2;</code>
     * @return Whether the primaryTraceClock field is set.
     */
    boolean hasPrimaryTraceClock();
    /**
     * <pre>
     * The authoritative clock domain for the trace. Defaults to BOOTTIME, but can
     * be overridden in TraceConfig's builtin_data_sources. Trace processor will
     * attempt to translate packet/event timestamps from various data sources (and
     * their chosen clock domains) to this domain during import.
     * </pre>
     *
     * <code>optional .perfetto.protos.BuiltinClock primary_trace_clock = 2;</code>
     * @return The primaryTraceClock.
     */
    perfetto.protos.BuiltinClockOuterClass.BuiltinClock getPrimaryTraceClock();
  }
  /**
   * <pre>
   * A snapshot of clock readings to allow for trace alignment.
   * </pre>
   *
   * Protobuf type {@code perfetto.protos.ClockSnapshot}
   */
  public static final class ClockSnapshot extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:perfetto.protos.ClockSnapshot)
      ClockSnapshotOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use ClockSnapshot.newBuilder() to construct.
    private ClockSnapshot(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private ClockSnapshot() {
      clocks_ = java.util.Collections.emptyList();
      primaryTraceClock_ = 0;
    }

    @java.lang.Override
    @SuppressWarnings({"unused"})
    protected java.lang.Object newInstance(
        UnusedPrivateParameter unused) {
      return new ClockSnapshot();
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return perfetto.protos.ClockSnapshotOuterClass.internal_static_perfetto_protos_ClockSnapshot_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return perfetto.protos.ClockSnapshotOuterClass.internal_static_perfetto_protos_ClockSnapshot_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              perfetto.protos.ClockSnapshotOuterClass.ClockSnapshot.class, perfetto.protos.ClockSnapshotOuterClass.ClockSnapshot.Builder.class);
    }

    public interface ClockOrBuilder extends
        // @@protoc_insertion_point(interface_extends:perfetto.protos.ClockSnapshot.Clock)
        com.google.protobuf.MessageOrBuilder {

      /**
       * <pre>
       * Clock IDs have the following semantic:
       * [1, 63]:    Builtin types, see BuiltinClock from
       *             ../common/builtin_clock.proto.
       * [64, 127]:  User-defined clocks. These clocks are sequence-scoped. They
       *             are only valid within the same |trusted_packet_sequence_id|
       *             (i.e. only for TracePacket(s) emitted by the same TraceWriter
       *             that emitted the clock snapshot).
       * [128, MAX]: Reserved for future use. The idea is to allow global clock
       *             IDs and setting this ID to hash(full_clock_name) &amp; ~127.
       * </pre>
       *
       * <code>optional uint32 clock_id = 1;</code>
       * @return Whether the clockId field is set.
       */
      boolean hasClockId();
      /**
       * <pre>
       * Clock IDs have the following semantic:
       * [1, 63]:    Builtin types, see BuiltinClock from
       *             ../common/builtin_clock.proto.
       * [64, 127]:  User-defined clocks. These clocks are sequence-scoped. They
       *             are only valid within the same |trusted_packet_sequence_id|
       *             (i.e. only for TracePacket(s) emitted by the same TraceWriter
       *             that emitted the clock snapshot).
       * [128, MAX]: Reserved for future use. The idea is to allow global clock
       *             IDs and setting this ID to hash(full_clock_name) &amp; ~127.
       * </pre>
       *
       * <code>optional uint32 clock_id = 1;</code>
       * @return The clockId.
       */
      int getClockId();

      /**
       * <pre>
       * Absolute timestamp. Unit is ns unless specified otherwise by the
       * unit_multiplier_ns field below.
       * </pre>
       *
       * <code>optional uint64 timestamp = 2;</code>
       * @return Whether the timestamp field is set.
       */
      boolean hasTimestamp();
      /**
       * <pre>
       * Absolute timestamp. Unit is ns unless specified otherwise by the
       * unit_multiplier_ns field below.
       * </pre>
       *
       * <code>optional uint64 timestamp = 2;</code>
       * @return The timestamp.
       */
      long getTimestamp();

      /**
       * <pre>
       * When true each TracePacket's timestamp should be interpreted as a delta
       * from the last TracePacket's timestamp (referencing this clock) emitted by
       * the same packet_sequence_id. Should only be used for user-defined
       * sequence-local clocks. The first packet timestamp after each
       * ClockSnapshot that contains this clock is relative to the |timestamp| in
       * the ClockSnapshot.
       * </pre>
       *
       * <code>optional bool is_incremental = 3;</code>
       * @return Whether the isIncremental field is set.
       */
      boolean hasIsIncremental();
      /**
       * <pre>
       * When true each TracePacket's timestamp should be interpreted as a delta
       * from the last TracePacket's timestamp (referencing this clock) emitted by
       * the same packet_sequence_id. Should only be used for user-defined
       * sequence-local clocks. The first packet timestamp after each
       * ClockSnapshot that contains this clock is relative to the |timestamp| in
       * the ClockSnapshot.
       * </pre>
       *
       * <code>optional bool is_incremental = 3;</code>
       * @return The isIncremental.
       */
      boolean getIsIncremental();

      /**
       * <pre>
       * Allows to specify a custom unit different than the default (ns) for this
       * clock domain. A multiplier of 1000 means that a timestamp = 3 should be
       * interpreted as 3000 ns = 3 us. All snapshots for the same clock within a
       * trace need to use the same unit.
       * </pre>
       *
       * <code>optional uint64 unit_multiplier_ns = 4;</code>
       * @return Whether the unitMultiplierNs field is set.
       */
      boolean hasUnitMultiplierNs();
      /**
       * <pre>
       * Allows to specify a custom unit different than the default (ns) for this
       * clock domain. A multiplier of 1000 means that a timestamp = 3 should be
       * interpreted as 3000 ns = 3 us. All snapshots for the same clock within a
       * trace need to use the same unit.
       * </pre>
       *
       * <code>optional uint64 unit_multiplier_ns = 4;</code>
       * @return The unitMultiplierNs.
       */
      long getUnitMultiplierNs();
    }
    /**
     * Protobuf type {@code perfetto.protos.ClockSnapshot.Clock}
     */
    public static final class Clock extends
        com.google.protobuf.GeneratedMessageV3 implements
        // @@protoc_insertion_point(message_implements:perfetto.protos.ClockSnapshot.Clock)
        ClockOrBuilder {
    private static final long serialVersionUID = 0L;
      // Use Clock.newBuilder() to construct.
      private Clock(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
        super(builder);
      }
      private Clock() {
      }

      @java.lang.Override
      @SuppressWarnings({"unused"})
      protected java.lang.Object newInstance(
          UnusedPrivateParameter unused) {
        return new Clock();
      }

      @java.lang.Override
      public final com.google.protobuf.UnknownFieldSet
      getUnknownFields() {
        return this.unknownFields;
      }
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return perfetto.protos.ClockSnapshotOuterClass.internal_static_perfetto_protos_ClockSnapshot_Clock_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return perfetto.protos.ClockSnapshotOuterClass.internal_static_perfetto_protos_ClockSnapshot_Clock_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                perfetto.protos.ClockSnapshotOuterClass.ClockSnapshot.Clock.class, perfetto.protos.ClockSnapshotOuterClass.ClockSnapshot.Clock.Builder.class);
      }

      /**
       * <pre>
       * DEPRECATED. This enum has moved to ../common/builtin_clock.proto.
       * </pre>
       *
       * Protobuf enum {@code perfetto.protos.ClockSnapshot.Clock.BuiltinClocks}
       */
      public enum BuiltinClocks
          implements com.google.protobuf.ProtocolMessageEnum {
        /**
         * <code>UNKNOWN = 0;</code>
         */
        UNKNOWN(0),
        /**
         * <code>REALTIME = 1;</code>
         */
        REALTIME(1),
        /**
         * <code>REALTIME_COARSE = 2;</code>
         */
        REALTIME_COARSE(2),
        /**
         * <code>MONOTONIC = 3;</code>
         */
        MONOTONIC(3),
        /**
         * <code>MONOTONIC_COARSE = 4;</code>
         */
        MONOTONIC_COARSE(4),
        /**
         * <code>MONOTONIC_RAW = 5;</code>
         */
        MONOTONIC_RAW(5),
        /**
         * <code>BOOTTIME = 6;</code>
         */
        BOOTTIME(6),
        /**
         * <code>BUILTIN_CLOCK_MAX_ID = 63;</code>
         */
        BUILTIN_CLOCK_MAX_ID(63),
        ;

        /**
         * <code>UNKNOWN = 0;</code>
         */
        public static final int UNKNOWN_VALUE = 0;
        /**
         * <code>REALTIME = 1;</code>
         */
        public static final int REALTIME_VALUE = 1;
        /**
         * <code>REALTIME_COARSE = 2;</code>
         */
        public static final int REALTIME_COARSE_VALUE = 2;
        /**
         * <code>MONOTONIC = 3;</code>
         */
        public static final int MONOTONIC_VALUE = 3;
        /**
         * <code>MONOTONIC_COARSE = 4;</code>
         */
        public static final int MONOTONIC_COARSE_VALUE = 4;
        /**
         * <code>MONOTONIC_RAW = 5;</code>
         */
        public static final int MONOTONIC_RAW_VALUE = 5;
        /**
         * <code>BOOTTIME = 6;</code>
         */
        public static final int BOOTTIME_VALUE = 6;
        /**
         * <code>BUILTIN_CLOCK_MAX_ID = 63;</code>
         */
        public static final int BUILTIN_CLOCK_MAX_ID_VALUE = 63;


        public final int getNumber() {
          return value;
        }

        /**
         * @param value The numeric wire value of the corresponding enum entry.
         * @return The enum associated with the given numeric wire value.
         * @deprecated Use {@link #forNumber(int)} instead.
         */
        @java.lang.Deprecated
        public static BuiltinClocks valueOf(int value) {
          return forNumber(value);
        }

        /**
         * @param value The numeric wire value of the corresponding enum entry.
         * @return The enum associated with the given numeric wire value.
         */
        public static BuiltinClocks forNumber(int value) {
          switch (value) {
            case 0: return UNKNOWN;
            case 1: return REALTIME;
            case 2: return REALTIME_COARSE;
            case 3: return MONOTONIC;
            case 4: return MONOTONIC_COARSE;
            case 5: return MONOTONIC_RAW;
            case 6: return BOOTTIME;
            case 63: return BUILTIN_CLOCK_MAX_ID;
            default: return null;
          }
        }

        public static com.google.protobuf.Internal.EnumLiteMap<BuiltinClocks>
            internalGetValueMap() {
          return internalValueMap;
        }
        private static final com.google.protobuf.Internal.EnumLiteMap<
            BuiltinClocks> internalValueMap =
              new com.google.protobuf.Internal.EnumLiteMap<BuiltinClocks>() {
                public BuiltinClocks findValueByNumber(int number) {
                  return BuiltinClocks.forNumber(number);
                }
              };

        public final com.google.protobuf.Descriptors.EnumValueDescriptor
            getValueDescriptor() {
          return getDescriptor().getValues().get(ordinal());
        }
        public final com.google.protobuf.Descriptors.EnumDescriptor
            getDescriptorForType() {
          return getDescriptor();
        }
        public static final com.google.protobuf.Descriptors.EnumDescriptor
            getDescriptor() {
          return perfetto.protos.ClockSnapshotOuterClass.ClockSnapshot.Clock.getDescriptor().getEnumTypes().get(0);
        }

        private static final BuiltinClocks[] VALUES = values();

        public static BuiltinClocks valueOf(
            com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
          if (desc.getType() != getDescriptor()) {
            throw new java.lang.IllegalArgumentException(
              "EnumValueDescriptor is not for this type.");
          }
          return VALUES[desc.getIndex()];
        }

        private final int value;

        private BuiltinClocks(int value) {
          this.value = value;
        }

        // @@protoc_insertion_point(enum_scope:perfetto.protos.ClockSnapshot.Clock.BuiltinClocks)
      }

      private int bitField0_;
      public static final int CLOCK_ID_FIELD_NUMBER = 1;
      private int clockId_ = 0;
      /**
       * <pre>
       * Clock IDs have the following semantic:
       * [1, 63]:    Builtin types, see BuiltinClock from
       *             ../common/builtin_clock.proto.
       * [64, 127]:  User-defined clocks. These clocks are sequence-scoped. They
       *             are only valid within the same |trusted_packet_sequence_id|
       *             (i.e. only for TracePacket(s) emitted by the same TraceWriter
       *             that emitted the clock snapshot).
       * [128, MAX]: Reserved for future use. The idea is to allow global clock
       *             IDs and setting this ID to hash(full_clock_name) &amp; ~127.
       * </pre>
       *
       * <code>optional uint32 clock_id = 1;</code>
       * @return Whether the clockId field is set.
       */
      @java.lang.Override
      public boolean hasClockId() {
        return ((bitField0_ & 0x00000001) != 0);
      }
      /**
       * <pre>
       * Clock IDs have the following semantic:
       * [1, 63]:    Builtin types, see BuiltinClock from
       *             ../common/builtin_clock.proto.
       * [64, 127]:  User-defined clocks. These clocks are sequence-scoped. They
       *             are only valid within the same |trusted_packet_sequence_id|
       *             (i.e. only for TracePacket(s) emitted by the same TraceWriter
       *             that emitted the clock snapshot).
       * [128, MAX]: Reserved for future use. The idea is to allow global clock
       *             IDs and setting this ID to hash(full_clock_name) &amp; ~127.
       * </pre>
       *
       * <code>optional uint32 clock_id = 1;</code>
       * @return The clockId.
       */
      @java.lang.Override
      public int getClockId() {
        return clockId_;
      }

      public static final int TIMESTAMP_FIELD_NUMBER = 2;
      private long timestamp_ = 0L;
      /**
       * <pre>
       * Absolute timestamp. Unit is ns unless specified otherwise by the
       * unit_multiplier_ns field below.
       * </pre>
       *
       * <code>optional uint64 timestamp = 2;</code>
       * @return Whether the timestamp field is set.
       */
      @java.lang.Override
      public boolean hasTimestamp() {
        return ((bitField0_ & 0x00000002) != 0);
      }
      /**
       * <pre>
       * Absolute timestamp. Unit is ns unless specified otherwise by the
       * unit_multiplier_ns field below.
       * </pre>
       *
       * <code>optional uint64 timestamp = 2;</code>
       * @return The timestamp.
       */
      @java.lang.Override
      public long getTimestamp() {
        return timestamp_;
      }

      public static final int IS_INCREMENTAL_FIELD_NUMBER = 3;
      private boolean isIncremental_ = false;
      /**
       * <pre>
       * When true each TracePacket's timestamp should be interpreted as a delta
       * from the last TracePacket's timestamp (referencing this clock) emitted by
       * the same packet_sequence_id. Should only be used for user-defined
       * sequence-local clocks. The first packet timestamp after each
       * ClockSnapshot that contains this clock is relative to the |timestamp| in
       * the ClockSnapshot.
       * </pre>
       *
       * <code>optional bool is_incremental = 3;</code>
       * @return Whether the isIncremental field is set.
       */
      @java.lang.Override
      public boolean hasIsIncremental() {
        return ((bitField0_ & 0x00000004) != 0);
      }
      /**
       * <pre>
       * When true each TracePacket's timestamp should be interpreted as a delta
       * from the last TracePacket's timestamp (referencing this clock) emitted by
       * the same packet_sequence_id. Should only be used for user-defined
       * sequence-local clocks. The first packet timestamp after each
       * ClockSnapshot that contains this clock is relative to the |timestamp| in
       * the ClockSnapshot.
       * </pre>
       *
       * <code>optional bool is_incremental = 3;</code>
       * @return The isIncremental.
       */
      @java.lang.Override
      public boolean getIsIncremental() {
        return isIncremental_;
      }

      public static final int UNIT_MULTIPLIER_NS_FIELD_NUMBER = 4;
      private long unitMultiplierNs_ = 0L;
      /**
       * <pre>
       * Allows to specify a custom unit different than the default (ns) for this
       * clock domain. A multiplier of 1000 means that a timestamp = 3 should be
       * interpreted as 3000 ns = 3 us. All snapshots for the same clock within a
       * trace need to use the same unit.
       * </pre>
       *
       * <code>optional uint64 unit_multiplier_ns = 4;</code>
       * @return Whether the unitMultiplierNs field is set.
       */
      @java.lang.Override
      public boolean hasUnitMultiplierNs() {
        return ((bitField0_ & 0x00000008) != 0);
      }
      /**
       * <pre>
       * Allows to specify a custom unit different than the default (ns) for this
       * clock domain. A multiplier of 1000 means that a timestamp = 3 should be
       * interpreted as 3000 ns = 3 us. All snapshots for the same clock within a
       * trace need to use the same unit.
       * </pre>
       *
       * <code>optional uint64 unit_multiplier_ns = 4;</code>
       * @return The unitMultiplierNs.
       */
      @java.lang.Override
      public long getUnitMultiplierNs() {
        return unitMultiplierNs_;
      }

      private byte memoizedIsInitialized = -1;
      @java.lang.Override
      public final boolean isInitialized() {
        byte isInitialized = memoizedIsInitialized;
        if (isInitialized == 1) return true;
        if (isInitialized == 0) return false;

        memoizedIsInitialized = 1;
        return true;
      }

      @java.lang.Override
      public void writeTo(com.google.protobuf.CodedOutputStream output)
                          throws java.io.IOException {
        if (((bitField0_ & 0x00000001) != 0)) {
          output.writeUInt32(1, clockId_);
        }
        if (((bitField0_ & 0x00000002) != 0)) {
          output.writeUInt64(2, timestamp_);
        }
        if (((bitField0_ & 0x00000004) != 0)) {
          output.writeBool(3, isIncremental_);
        }
        if (((bitField0_ & 0x00000008) != 0)) {
          output.writeUInt64(4, unitMultiplierNs_);
        }
        getUnknownFields().writeTo(output);
      }

      @java.lang.Override
      public int getSerializedSize() {
        int size = memoizedSize;
        if (size != -1) return size;

        size = 0;
        if (((bitField0_ & 0x00000001) != 0)) {
          size += com.google.protobuf.CodedOutputStream
            .computeUInt32Size(1, clockId_);
        }
        if (((bitField0_ & 0x00000002) != 0)) {
          size += com.google.protobuf.CodedOutputStream
            .computeUInt64Size(2, timestamp_);
        }
        if (((bitField0_ & 0x00000004) != 0)) {
          size += com.google.protobuf.CodedOutputStream
            .computeBoolSize(3, isIncremental_);
        }
        if (((bitField0_ & 0x00000008) != 0)) {
          size += com.google.protobuf.CodedOutputStream
            .computeUInt64Size(4, unitMultiplierNs_);
        }
        size += getUnknownFields().getSerializedSize();
        memoizedSize = size;
        return size;
      }

      @java.lang.Override
      public boolean equals(final java.lang.Object obj) {
        if (obj == this) {
         return true;
        }
        if (!(obj instanceof perfetto.protos.ClockSnapshotOuterClass.ClockSnapshot.Clock)) {
          return super.equals(obj);
        }
        perfetto.protos.ClockSnapshotOuterClass.ClockSnapshot.Clock other = (perfetto.protos.ClockSnapshotOuterClass.ClockSnapshot.Clock) obj;

        if (hasClockId() != other.hasClockId()) return false;
        if (hasClockId()) {
          if (getClockId()
              != other.getClockId()) return false;
        }
        if (hasTimestamp() != other.hasTimestamp()) return false;
        if (hasTimestamp()) {
          if (getTimestamp()
              != other.getTimestamp()) return false;
        }
        if (hasIsIncremental() != other.hasIsIncremental()) return false;
        if (hasIsIncremental()) {
          if (getIsIncremental()
              != other.getIsIncremental()) return false;
        }
        if (hasUnitMultiplierNs() != other.hasUnitMultiplierNs()) return false;
        if (hasUnitMultiplierNs()) {
          if (getUnitMultiplierNs()
              != other.getUnitMultiplierNs()) return false;
        }
        if (!getUnknownFields().equals(other.getUnknownFields())) return false;
        return true;
      }

      @java.lang.Override
      public int hashCode() {
        if (memoizedHashCode != 0) {
          return memoizedHashCode;
        }
        int hash = 41;
        hash = (19 * hash) + getDescriptor().hashCode();
        if (hasClockId()) {
          hash = (37 * hash) + CLOCK_ID_FIELD_NUMBER;
          hash = (53 * hash) + getClockId();
        }
        if (hasTimestamp()) {
          hash = (37 * hash) + TIMESTAMP_FIELD_NUMBER;
          hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
              getTimestamp());
        }
        if (hasIsIncremental()) {
          hash = (37 * hash) + IS_INCREMENTAL_FIELD_NUMBER;
          hash = (53 * hash) + com.google.protobuf.Internal.hashBoolean(
              getIsIncremental());
        }
        if (hasUnitMultiplierNs()) {
          hash = (37 * hash) + UNIT_MULTIPLIER_NS_FIELD_NUMBER;
          hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
              getUnitMultiplierNs());
        }
        hash = (29 * hash) + getUnknownFields().hashCode();
        memoizedHashCode = hash;
        return hash;
      }

      public static perfetto.protos.ClockSnapshotOuterClass.ClockSnapshot.Clock parseFrom(
          java.nio.ByteBuffer data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static perfetto.protos.ClockSnapshotOuterClass.ClockSnapshot.Clock parseFrom(
          java.nio.ByteBuffer data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static perfetto.protos.ClockSnapshotOuterClass.ClockSnapshot.Clock parseFrom(
          com.google.protobuf.ByteString data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static perfetto.protos.ClockSnapshotOuterClass.ClockSnapshot.Clock parseFrom(
          com.google.protobuf.ByteString data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static perfetto.protos.ClockSnapshotOuterClass.ClockSnapshot.Clock parseFrom(byte[] data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static perfetto.protos.ClockSnapshotOuterClass.ClockSnapshot.Clock parseFrom(
          byte[] data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static perfetto.protos.ClockSnapshotOuterClass.ClockSnapshot.Clock parseFrom(java.io.InputStream input)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseWithIOException(PARSER, input);
      }
      public static perfetto.protos.ClockSnapshotOuterClass.ClockSnapshot.Clock parseFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseWithIOException(PARSER, input, extensionRegistry);
      }
      public static perfetto.protos.ClockSnapshotOuterClass.ClockSnapshot.Clock parseDelimitedFrom(java.io.InputStream input)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseDelimitedWithIOException(PARSER, input);
      }
      public static perfetto.protos.ClockSnapshotOuterClass.ClockSnapshot.Clock parseDelimitedFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
      }
      public static perfetto.protos.ClockSnapshotOuterClass.ClockSnapshot.Clock parseFrom(
          com.google.protobuf.CodedInputStream input)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseWithIOException(PARSER, input);
      }
      public static perfetto.protos.ClockSnapshotOuterClass.ClockSnapshot.Clock parseFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseWithIOException(PARSER, input, extensionRegistry);
      }

      @java.lang.Override
      public Builder newBuilderForType() { return newBuilder(); }
      public static Builder newBuilder() {
        return DEFAULT_INSTANCE.toBuilder();
      }
      public static Builder newBuilder(perfetto.protos.ClockSnapshotOuterClass.ClockSnapshot.Clock prototype) {
        return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
      }
      @java.lang.Override
      public Builder toBuilder() {
        return this == DEFAULT_INSTANCE
            ? new Builder() : new Builder().mergeFrom(this);
      }

      @java.lang.Override
      protected Builder newBuilderForType(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        Builder builder = new Builder(parent);
        return builder;
      }
      /**
       * Protobuf type {@code perfetto.protos.ClockSnapshot.Clock}
       */
      public static final class Builder extends
          com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
          // @@protoc_insertion_point(builder_implements:perfetto.protos.ClockSnapshot.Clock)
          perfetto.protos.ClockSnapshotOuterClass.ClockSnapshot.ClockOrBuilder {
        public static final com.google.protobuf.Descriptors.Descriptor
            getDescriptor() {
          return perfetto.protos.ClockSnapshotOuterClass.internal_static_perfetto_protos_ClockSnapshot_Clock_descriptor;
        }

        @java.lang.Override
        protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
            internalGetFieldAccessorTable() {
          return perfetto.protos.ClockSnapshotOuterClass.internal_static_perfetto_protos_ClockSnapshot_Clock_fieldAccessorTable
              .ensureFieldAccessorsInitialized(
                  perfetto.protos.ClockSnapshotOuterClass.ClockSnapshot.Clock.class, perfetto.protos.ClockSnapshotOuterClass.ClockSnapshot.Clock.Builder.class);
        }

        // Construct using perfetto.protos.ClockSnapshotOuterClass.ClockSnapshot.Clock.newBuilder()
        private Builder() {

        }

        private Builder(
            com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
          super(parent);

        }
        @java.lang.Override
        public Builder clear() {
          super.clear();
          bitField0_ = 0;
          clockId_ = 0;
          timestamp_ = 0L;
          isIncremental_ = false;
          unitMultiplierNs_ = 0L;
          return this;
        }

        @java.lang.Override
        public com.google.protobuf.Descriptors.Descriptor
            getDescriptorForType() {
          return perfetto.protos.ClockSnapshotOuterClass.internal_static_perfetto_protos_ClockSnapshot_Clock_descriptor;
        }

        @java.lang.Override
        public perfetto.protos.ClockSnapshotOuterClass.ClockSnapshot.Clock getDefaultInstanceForType() {
          return perfetto.protos.ClockSnapshotOuterClass.ClockSnapshot.Clock.getDefaultInstance();
        }

        @java.lang.Override
        public perfetto.protos.ClockSnapshotOuterClass.ClockSnapshot.Clock build() {
          perfetto.protos.ClockSnapshotOuterClass.ClockSnapshot.Clock result = buildPartial();
          if (!result.isInitialized()) {
            throw newUninitializedMessageException(result);
          }
          return result;
        }

        @java.lang.Override
        public perfetto.protos.ClockSnapshotOuterClass.ClockSnapshot.Clock buildPartial() {
          perfetto.protos.ClockSnapshotOuterClass.ClockSnapshot.Clock result = new perfetto.protos.ClockSnapshotOuterClass.ClockSnapshot.Clock(this);
          if (bitField0_ != 0) { buildPartial0(result); }
          onBuilt();
          return result;
        }

        private void buildPartial0(perfetto.protos.ClockSnapshotOuterClass.ClockSnapshot.Clock result) {
          int from_bitField0_ = bitField0_;
          int to_bitField0_ = 0;
          if (((from_bitField0_ & 0x00000001) != 0)) {
            result.clockId_ = clockId_;
            to_bitField0_ |= 0x00000001;
          }
          if (((from_bitField0_ & 0x00000002) != 0)) {
            result.timestamp_ = timestamp_;
            to_bitField0_ |= 0x00000002;
          }
          if (((from_bitField0_ & 0x00000004) != 0)) {
            result.isIncremental_ = isIncremental_;
            to_bitField0_ |= 0x00000004;
          }
          if (((from_bitField0_ & 0x00000008) != 0)) {
            result.unitMultiplierNs_ = unitMultiplierNs_;
            to_bitField0_ |= 0x00000008;
          }
          result.bitField0_ |= to_bitField0_;
        }

        @java.lang.Override
        public Builder clone() {
          return super.clone();
        }
        @java.lang.Override
        public Builder setField(
            com.google.protobuf.Descriptors.FieldDescriptor field,
            java.lang.Object value) {
          return super.setField(field, value);
        }
        @java.lang.Override
        public Builder clearField(
            com.google.protobuf.Descriptors.FieldDescriptor field) {
          return super.clearField(field);
        }
        @java.lang.Override
        public Builder clearOneof(
            com.google.protobuf.Descriptors.OneofDescriptor oneof) {
          return super.clearOneof(oneof);
        }
        @java.lang.Override
        public Builder setRepeatedField(
            com.google.protobuf.Descriptors.FieldDescriptor field,
            int index, java.lang.Object value) {
          return super.setRepeatedField(field, index, value);
        }
        @java.lang.Override
        public Builder addRepeatedField(
            com.google.protobuf.Descriptors.FieldDescriptor field,
            java.lang.Object value) {
          return super.addRepeatedField(field, value);
        }
        @java.lang.Override
        public Builder mergeFrom(com.google.protobuf.Message other) {
          if (other instanceof perfetto.protos.ClockSnapshotOuterClass.ClockSnapshot.Clock) {
            return mergeFrom((perfetto.protos.ClockSnapshotOuterClass.ClockSnapshot.Clock)other);
          } else {
            super.mergeFrom(other);
            return this;
          }
        }

        public Builder mergeFrom(perfetto.protos.ClockSnapshotOuterClass.ClockSnapshot.Clock other) {
          if (other == perfetto.protos.ClockSnapshotOuterClass.ClockSnapshot.Clock.getDefaultInstance()) return this;
          if (other.hasClockId()) {
            setClockId(other.getClockId());
          }
          if (other.hasTimestamp()) {
            setTimestamp(other.getTimestamp());
          }
          if (other.hasIsIncremental()) {
            setIsIncremental(other.getIsIncremental());
          }
          if (other.hasUnitMultiplierNs()) {
            setUnitMultiplierNs(other.getUnitMultiplierNs());
          }
          this.mergeUnknownFields(other.getUnknownFields());
          onChanged();
          return this;
        }

        @java.lang.Override
        public final boolean isInitialized() {
          return true;
        }

        @java.lang.Override
        public Builder mergeFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws java.io.IOException {
          if (extensionRegistry == null) {
            throw new java.lang.NullPointerException();
          }
          try {
            boolean done = false;
            while (!done) {
              int tag = input.readTag();
              switch (tag) {
                case 0:
                  done = true;
                  break;
                case 8: {
                  clockId_ = input.readUInt32();
                  bitField0_ |= 0x00000001;
                  break;
                } // case 8
                case 16: {
                  timestamp_ = input.readUInt64();
                  bitField0_ |= 0x00000002;
                  break;
                } // case 16
                case 24: {
                  isIncremental_ = input.readBool();
                  bitField0_ |= 0x00000004;
                  break;
                } // case 24
                case 32: {
                  unitMultiplierNs_ = input.readUInt64();
                  bitField0_ |= 0x00000008;
                  break;
                } // case 32
                default: {
                  if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                    done = true; // was an endgroup tag
                  }
                  break;
                } // default:
              } // switch (tag)
            } // while (!done)
          } catch (com.google.protobuf.InvalidProtocolBufferException e) {
            throw e.unwrapIOException();
          } finally {
            onChanged();
          } // finally
          return this;
        }
        private int bitField0_;

        private int clockId_ ;
        /**
         * <pre>
         * Clock IDs have the following semantic:
         * [1, 63]:    Builtin types, see BuiltinClock from
         *             ../common/builtin_clock.proto.
         * [64, 127]:  User-defined clocks. These clocks are sequence-scoped. They
         *             are only valid within the same |trusted_packet_sequence_id|
         *             (i.e. only for TracePacket(s) emitted by the same TraceWriter
         *             that emitted the clock snapshot).
         * [128, MAX]: Reserved for future use. The idea is to allow global clock
         *             IDs and setting this ID to hash(full_clock_name) &amp; ~127.
         * </pre>
         *
         * <code>optional uint32 clock_id = 1;</code>
         * @return Whether the clockId field is set.
         */
        @java.lang.Override
        public boolean hasClockId() {
          return ((bitField0_ & 0x00000001) != 0);
        }
        /**
         * <pre>
         * Clock IDs have the following semantic:
         * [1, 63]:    Builtin types, see BuiltinClock from
         *             ../common/builtin_clock.proto.
         * [64, 127]:  User-defined clocks. These clocks are sequence-scoped. They
         *             are only valid within the same |trusted_packet_sequence_id|
         *             (i.e. only for TracePacket(s) emitted by the same TraceWriter
         *             that emitted the clock snapshot).
         * [128, MAX]: Reserved for future use. The idea is to allow global clock
         *             IDs and setting this ID to hash(full_clock_name) &amp; ~127.
         * </pre>
         *
         * <code>optional uint32 clock_id = 1;</code>
         * @return The clockId.
         */
        @java.lang.Override
        public int getClockId() {
          return clockId_;
        }
        /**
         * <pre>
         * Clock IDs have the following semantic:
         * [1, 63]:    Builtin types, see BuiltinClock from
         *             ../common/builtin_clock.proto.
         * [64, 127]:  User-defined clocks. These clocks are sequence-scoped. They
         *             are only valid within the same |trusted_packet_sequence_id|
         *             (i.e. only for TracePacket(s) emitted by the same TraceWriter
         *             that emitted the clock snapshot).
         * [128, MAX]: Reserved for future use. The idea is to allow global clock
         *             IDs and setting this ID to hash(full_clock_name) &amp; ~127.
         * </pre>
         *
         * <code>optional uint32 clock_id = 1;</code>
         * @param value The clockId to set.
         * @return This builder for chaining.
         */
        public Builder setClockId(int value) {
          
          clockId_ = value;
          bitField0_ |= 0x00000001;
          onChanged();
          return this;
        }
        /**
         * <pre>
         * Clock IDs have the following semantic:
         * [1, 63]:    Builtin types, see BuiltinClock from
         *             ../common/builtin_clock.proto.
         * [64, 127]:  User-defined clocks. These clocks are sequence-scoped. They
         *             are only valid within the same |trusted_packet_sequence_id|
         *             (i.e. only for TracePacket(s) emitted by the same TraceWriter
         *             that emitted the clock snapshot).
         * [128, MAX]: Reserved for future use. The idea is to allow global clock
         *             IDs and setting this ID to hash(full_clock_name) &amp; ~127.
         * </pre>
         *
         * <code>optional uint32 clock_id = 1;</code>
         * @return This builder for chaining.
         */
        public Builder clearClockId() {
          bitField0_ = (bitField0_ & ~0x00000001);
          clockId_ = 0;
          onChanged();
          return this;
        }

        private long timestamp_ ;
        /**
         * <pre>
         * Absolute timestamp. Unit is ns unless specified otherwise by the
         * unit_multiplier_ns field below.
         * </pre>
         *
         * <code>optional uint64 timestamp = 2;</code>
         * @return Whether the timestamp field is set.
         */
        @java.lang.Override
        public boolean hasTimestamp() {
          return ((bitField0_ & 0x00000002) != 0);
        }
        /**
         * <pre>
         * Absolute timestamp. Unit is ns unless specified otherwise by the
         * unit_multiplier_ns field below.
         * </pre>
         *
         * <code>optional uint64 timestamp = 2;</code>
         * @return The timestamp.
         */
        @java.lang.Override
        public long getTimestamp() {
          return timestamp_;
        }
        /**
         * <pre>
         * Absolute timestamp. Unit is ns unless specified otherwise by the
         * unit_multiplier_ns field below.
         * </pre>
         *
         * <code>optional uint64 timestamp = 2;</code>
         * @param value The timestamp to set.
         * @return This builder for chaining.
         */
        public Builder setTimestamp(long value) {
          
          timestamp_ = value;
          bitField0_ |= 0x00000002;
          onChanged();
          return this;
        }
        /**
         * <pre>
         * Absolute timestamp. Unit is ns unless specified otherwise by the
         * unit_multiplier_ns field below.
         * </pre>
         *
         * <code>optional uint64 timestamp = 2;</code>
         * @return This builder for chaining.
         */
        public Builder clearTimestamp() {
          bitField0_ = (bitField0_ & ~0x00000002);
          timestamp_ = 0L;
          onChanged();
          return this;
        }

        private boolean isIncremental_ ;
        /**
         * <pre>
         * When true each TracePacket's timestamp should be interpreted as a delta
         * from the last TracePacket's timestamp (referencing this clock) emitted by
         * the same packet_sequence_id. Should only be used for user-defined
         * sequence-local clocks. The first packet timestamp after each
         * ClockSnapshot that contains this clock is relative to the |timestamp| in
         * the ClockSnapshot.
         * </pre>
         *
         * <code>optional bool is_incremental = 3;</code>
         * @return Whether the isIncremental field is set.
         */
        @java.lang.Override
        public boolean hasIsIncremental() {
          return ((bitField0_ & 0x00000004) != 0);
        }
        /**
         * <pre>
         * When true each TracePacket's timestamp should be interpreted as a delta
         * from the last TracePacket's timestamp (referencing this clock) emitted by
         * the same packet_sequence_id. Should only be used for user-defined
         * sequence-local clocks. The first packet timestamp after each
         * ClockSnapshot that contains this clock is relative to the |timestamp| in
         * the ClockSnapshot.
         * </pre>
         *
         * <code>optional bool is_incremental = 3;</code>
         * @return The isIncremental.
         */
        @java.lang.Override
        public boolean getIsIncremental() {
          return isIncremental_;
        }
        /**
         * <pre>
         * When true each TracePacket's timestamp should be interpreted as a delta
         * from the last TracePacket's timestamp (referencing this clock) emitted by
         * the same packet_sequence_id. Should only be used for user-defined
         * sequence-local clocks. The first packet timestamp after each
         * ClockSnapshot that contains this clock is relative to the |timestamp| in
         * the ClockSnapshot.
         * </pre>
         *
         * <code>optional bool is_incremental = 3;</code>
         * @param value The isIncremental to set.
         * @return This builder for chaining.
         */
        public Builder setIsIncremental(boolean value) {
          
          isIncremental_ = value;
          bitField0_ |= 0x00000004;
          onChanged();
          return this;
        }
        /**
         * <pre>
         * When true each TracePacket's timestamp should be interpreted as a delta
         * from the last TracePacket's timestamp (referencing this clock) emitted by
         * the same packet_sequence_id. Should only be used for user-defined
         * sequence-local clocks. The first packet timestamp after each
         * ClockSnapshot that contains this clock is relative to the |timestamp| in
         * the ClockSnapshot.
         * </pre>
         *
         * <code>optional bool is_incremental = 3;</code>
         * @return This builder for chaining.
         */
        public Builder clearIsIncremental() {
          bitField0_ = (bitField0_ & ~0x00000004);
          isIncremental_ = false;
          onChanged();
          return this;
        }

        private long unitMultiplierNs_ ;
        /**
         * <pre>
         * Allows to specify a custom unit different than the default (ns) for this
         * clock domain. A multiplier of 1000 means that a timestamp = 3 should be
         * interpreted as 3000 ns = 3 us. All snapshots for the same clock within a
         * trace need to use the same unit.
         * </pre>
         *
         * <code>optional uint64 unit_multiplier_ns = 4;</code>
         * @return Whether the unitMultiplierNs field is set.
         */
        @java.lang.Override
        public boolean hasUnitMultiplierNs() {
          return ((bitField0_ & 0x00000008) != 0);
        }
        /**
         * <pre>
         * Allows to specify a custom unit different than the default (ns) for this
         * clock domain. A multiplier of 1000 means that a timestamp = 3 should be
         * interpreted as 3000 ns = 3 us. All snapshots for the same clock within a
         * trace need to use the same unit.
         * </pre>
         *
         * <code>optional uint64 unit_multiplier_ns = 4;</code>
         * @return The unitMultiplierNs.
         */
        @java.lang.Override
        public long getUnitMultiplierNs() {
          return unitMultiplierNs_;
        }
        /**
         * <pre>
         * Allows to specify a custom unit different than the default (ns) for this
         * clock domain. A multiplier of 1000 means that a timestamp = 3 should be
         * interpreted as 3000 ns = 3 us. All snapshots for the same clock within a
         * trace need to use the same unit.
         * </pre>
         *
         * <code>optional uint64 unit_multiplier_ns = 4;</code>
         * @param value The unitMultiplierNs to set.
         * @return This builder for chaining.
         */
        public Builder setUnitMultiplierNs(long value) {
          
          unitMultiplierNs_ = value;
          bitField0_ |= 0x00000008;
          onChanged();
          return this;
        }
        /**
         * <pre>
         * Allows to specify a custom unit different than the default (ns) for this
         * clock domain. A multiplier of 1000 means that a timestamp = 3 should be
         * interpreted as 3000 ns = 3 us. All snapshots for the same clock within a
         * trace need to use the same unit.
         * </pre>
         *
         * <code>optional uint64 unit_multiplier_ns = 4;</code>
         * @return This builder for chaining.
         */
        public Builder clearUnitMultiplierNs() {
          bitField0_ = (bitField0_ & ~0x00000008);
          unitMultiplierNs_ = 0L;
          onChanged();
          return this;
        }
        @java.lang.Override
        public final Builder setUnknownFields(
            final com.google.protobuf.UnknownFieldSet unknownFields) {
          return super.setUnknownFields(unknownFields);
        }

        @java.lang.Override
        public final Builder mergeUnknownFields(
            final com.google.protobuf.UnknownFieldSet unknownFields) {
          return super.mergeUnknownFields(unknownFields);
        }


        // @@protoc_insertion_point(builder_scope:perfetto.protos.ClockSnapshot.Clock)
      }

      // @@protoc_insertion_point(class_scope:perfetto.protos.ClockSnapshot.Clock)
      private static final perfetto.protos.ClockSnapshotOuterClass.ClockSnapshot.Clock DEFAULT_INSTANCE;
      static {
        DEFAULT_INSTANCE = new perfetto.protos.ClockSnapshotOuterClass.ClockSnapshot.Clock();
      }

      public static perfetto.protos.ClockSnapshotOuterClass.ClockSnapshot.Clock getDefaultInstance() {
        return DEFAULT_INSTANCE;
      }

      @java.lang.Deprecated public static final com.google.protobuf.Parser<Clock>
          PARSER = new com.google.protobuf.AbstractParser<Clock>() {
        @java.lang.Override
        public Clock parsePartialFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws com.google.protobuf.InvalidProtocolBufferException {
          Builder builder = newBuilder();
          try {
            builder.mergeFrom(input, extensionRegistry);
          } catch (com.google.protobuf.InvalidProtocolBufferException e) {
            throw e.setUnfinishedMessage(builder.buildPartial());
          } catch (com.google.protobuf.UninitializedMessageException e) {
            throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
          } catch (java.io.IOException e) {
            throw new com.google.protobuf.InvalidProtocolBufferException(e)
                .setUnfinishedMessage(builder.buildPartial());
          }
          return builder.buildPartial();
        }
      };

      public static com.google.protobuf.Parser<Clock> parser() {
        return PARSER;
      }

      @java.lang.Override
      public com.google.protobuf.Parser<Clock> getParserForType() {
        return PARSER;
      }

      @java.lang.Override
      public perfetto.protos.ClockSnapshotOuterClass.ClockSnapshot.Clock getDefaultInstanceForType() {
        return DEFAULT_INSTANCE;
      }

    }

    private int bitField0_;
    public static final int CLOCKS_FIELD_NUMBER = 1;
    @SuppressWarnings("serial")
    private java.util.List<perfetto.protos.ClockSnapshotOuterClass.ClockSnapshot.Clock> clocks_;
    /**
     * <code>repeated .perfetto.protos.ClockSnapshot.Clock clocks = 1;</code>
     */
    @java.lang.Override
    public java.util.List<perfetto.protos.ClockSnapshotOuterClass.ClockSnapshot.Clock> getClocksList() {
      return clocks_;
    }
    /**
     * <code>repeated .perfetto.protos.ClockSnapshot.Clock clocks = 1;</code>
     */
    @java.lang.Override
    public java.util.List<? extends perfetto.protos.ClockSnapshotOuterClass.ClockSnapshot.ClockOrBuilder> 
        getClocksOrBuilderList() {
      return clocks_;
    }
    /**
     * <code>repeated .perfetto.protos.ClockSnapshot.Clock clocks = 1;</code>
     */
    @java.lang.Override
    public int getClocksCount() {
      return clocks_.size();
    }
    /**
     * <code>repeated .perfetto.protos.ClockSnapshot.Clock clocks = 1;</code>
     */
    @java.lang.Override
    public perfetto.protos.ClockSnapshotOuterClass.ClockSnapshot.Clock getClocks(int index) {
      return clocks_.get(index);
    }
    /**
     * <code>repeated .perfetto.protos.ClockSnapshot.Clock clocks = 1;</code>
     */
    @java.lang.Override
    public perfetto.protos.ClockSnapshotOuterClass.ClockSnapshot.ClockOrBuilder getClocksOrBuilder(
        int index) {
      return clocks_.get(index);
    }

    public static final int PRIMARY_TRACE_CLOCK_FIELD_NUMBER = 2;
    private int primaryTraceClock_ = 0;
    /**
     * <pre>
     * The authoritative clock domain for the trace. Defaults to BOOTTIME, but can
     * be overridden in TraceConfig's builtin_data_sources. Trace processor will
     * attempt to translate packet/event timestamps from various data sources (and
     * their chosen clock domains) to this domain during import.
     * </pre>
     *
     * <code>optional .perfetto.protos.BuiltinClock primary_trace_clock = 2;</code>
     * @return Whether the primaryTraceClock field is set.
     */
    @java.lang.Override public boolean hasPrimaryTraceClock() {
      return ((bitField0_ & 0x00000001) != 0);
    }
    /**
     * <pre>
     * The authoritative clock domain for the trace. Defaults to BOOTTIME, but can
     * be overridden in TraceConfig's builtin_data_sources. Trace processor will
     * attempt to translate packet/event timestamps from various data sources (and
     * their chosen clock domains) to this domain during import.
     * </pre>
     *
     * <code>optional .perfetto.protos.BuiltinClock primary_trace_clock = 2;</code>
     * @return The primaryTraceClock.
     */
    @java.lang.Override public perfetto.protos.BuiltinClockOuterClass.BuiltinClock getPrimaryTraceClock() {
      perfetto.protos.BuiltinClockOuterClass.BuiltinClock result = perfetto.protos.BuiltinClockOuterClass.BuiltinClock.forNumber(primaryTraceClock_);
      return result == null ? perfetto.protos.BuiltinClockOuterClass.BuiltinClock.BUILTIN_CLOCK_UNKNOWN : result;
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      for (int i = 0; i < clocks_.size(); i++) {
        output.writeMessage(1, clocks_.get(i));
      }
      if (((bitField0_ & 0x00000001) != 0)) {
        output.writeEnum(2, primaryTraceClock_);
      }
      getUnknownFields().writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      for (int i = 0; i < clocks_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(1, clocks_.get(i));
      }
      if (((bitField0_ & 0x00000001) != 0)) {
        size += com.google.protobuf.CodedOutputStream
          .computeEnumSize(2, primaryTraceClock_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof perfetto.protos.ClockSnapshotOuterClass.ClockSnapshot)) {
        return super.equals(obj);
      }
      perfetto.protos.ClockSnapshotOuterClass.ClockSnapshot other = (perfetto.protos.ClockSnapshotOuterClass.ClockSnapshot) obj;

      if (!getClocksList()
          .equals(other.getClocksList())) return false;
      if (hasPrimaryTraceClock() != other.hasPrimaryTraceClock()) return false;
      if (hasPrimaryTraceClock()) {
        if (primaryTraceClock_ != other.primaryTraceClock_) return false;
      }
      if (!getUnknownFields().equals(other.getUnknownFields())) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      if (getClocksCount() > 0) {
        hash = (37 * hash) + CLOCKS_FIELD_NUMBER;
        hash = (53 * hash) + getClocksList().hashCode();
      }
      if (hasPrimaryTraceClock()) {
        hash = (37 * hash) + PRIMARY_TRACE_CLOCK_FIELD_NUMBER;
        hash = (53 * hash) + primaryTraceClock_;
      }
      hash = (29 * hash) + getUnknownFields().hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static perfetto.protos.ClockSnapshotOuterClass.ClockSnapshot parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static perfetto.protos.ClockSnapshotOuterClass.ClockSnapshot parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static perfetto.protos.ClockSnapshotOuterClass.ClockSnapshot parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static perfetto.protos.ClockSnapshotOuterClass.ClockSnapshot parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static perfetto.protos.ClockSnapshotOuterClass.ClockSnapshot parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static perfetto.protos.ClockSnapshotOuterClass.ClockSnapshot parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static perfetto.protos.ClockSnapshotOuterClass.ClockSnapshot parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static perfetto.protos.ClockSnapshotOuterClass.ClockSnapshot parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static perfetto.protos.ClockSnapshotOuterClass.ClockSnapshot parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static perfetto.protos.ClockSnapshotOuterClass.ClockSnapshot parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static perfetto.protos.ClockSnapshotOuterClass.ClockSnapshot parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static perfetto.protos.ClockSnapshotOuterClass.ClockSnapshot parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(perfetto.protos.ClockSnapshotOuterClass.ClockSnapshot prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * <pre>
     * A snapshot of clock readings to allow for trace alignment.
     * </pre>
     *
     * Protobuf type {@code perfetto.protos.ClockSnapshot}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:perfetto.protos.ClockSnapshot)
        perfetto.protos.ClockSnapshotOuterClass.ClockSnapshotOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return perfetto.protos.ClockSnapshotOuterClass.internal_static_perfetto_protos_ClockSnapshot_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return perfetto.protos.ClockSnapshotOuterClass.internal_static_perfetto_protos_ClockSnapshot_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                perfetto.protos.ClockSnapshotOuterClass.ClockSnapshot.class, perfetto.protos.ClockSnapshotOuterClass.ClockSnapshot.Builder.class);
      }

      // Construct using perfetto.protos.ClockSnapshotOuterClass.ClockSnapshot.newBuilder()
      private Builder() {

      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);

      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        bitField0_ = 0;
        if (clocksBuilder_ == null) {
          clocks_ = java.util.Collections.emptyList();
        } else {
          clocks_ = null;
          clocksBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000001);
        primaryTraceClock_ = 0;
        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return perfetto.protos.ClockSnapshotOuterClass.internal_static_perfetto_protos_ClockSnapshot_descriptor;
      }

      @java.lang.Override
      public perfetto.protos.ClockSnapshotOuterClass.ClockSnapshot getDefaultInstanceForType() {
        return perfetto.protos.ClockSnapshotOuterClass.ClockSnapshot.getDefaultInstance();
      }

      @java.lang.Override
      public perfetto.protos.ClockSnapshotOuterClass.ClockSnapshot build() {
        perfetto.protos.ClockSnapshotOuterClass.ClockSnapshot result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public perfetto.protos.ClockSnapshotOuterClass.ClockSnapshot buildPartial() {
        perfetto.protos.ClockSnapshotOuterClass.ClockSnapshot result = new perfetto.protos.ClockSnapshotOuterClass.ClockSnapshot(this);
        buildPartialRepeatedFields(result);
        if (bitField0_ != 0) { buildPartial0(result); }
        onBuilt();
        return result;
      }

      private void buildPartialRepeatedFields(perfetto.protos.ClockSnapshotOuterClass.ClockSnapshot result) {
        if (clocksBuilder_ == null) {
          if (((bitField0_ & 0x00000001) != 0)) {
            clocks_ = java.util.Collections.unmodifiableList(clocks_);
            bitField0_ = (bitField0_ & ~0x00000001);
          }
          result.clocks_ = clocks_;
        } else {
          result.clocks_ = clocksBuilder_.build();
        }
      }

      private void buildPartial0(perfetto.protos.ClockSnapshotOuterClass.ClockSnapshot result) {
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000002) != 0)) {
          result.primaryTraceClock_ = primaryTraceClock_;
          to_bitField0_ |= 0x00000001;
        }
        result.bitField0_ |= to_bitField0_;
      }

      @java.lang.Override
      public Builder clone() {
        return super.clone();
      }
      @java.lang.Override
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.setField(field, value);
      }
      @java.lang.Override
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return super.clearField(field);
      }
      @java.lang.Override
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return super.clearOneof(oneof);
      }
      @java.lang.Override
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, java.lang.Object value) {
        return super.setRepeatedField(field, index, value);
      }
      @java.lang.Override
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.addRepeatedField(field, value);
      }
      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof perfetto.protos.ClockSnapshotOuterClass.ClockSnapshot) {
          return mergeFrom((perfetto.protos.ClockSnapshotOuterClass.ClockSnapshot)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(perfetto.protos.ClockSnapshotOuterClass.ClockSnapshot other) {
        if (other == perfetto.protos.ClockSnapshotOuterClass.ClockSnapshot.getDefaultInstance()) return this;
        if (clocksBuilder_ == null) {
          if (!other.clocks_.isEmpty()) {
            if (clocks_.isEmpty()) {
              clocks_ = other.clocks_;
              bitField0_ = (bitField0_ & ~0x00000001);
            } else {
              ensureClocksIsMutable();
              clocks_.addAll(other.clocks_);
            }
            onChanged();
          }
        } else {
          if (!other.clocks_.isEmpty()) {
            if (clocksBuilder_.isEmpty()) {
              clocksBuilder_.dispose();
              clocksBuilder_ = null;
              clocks_ = other.clocks_;
              bitField0_ = (bitField0_ & ~0x00000001);
              clocksBuilder_ = 
                com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders ?
                   getClocksFieldBuilder() : null;
            } else {
              clocksBuilder_.addAllMessages(other.clocks_);
            }
          }
        }
        if (other.hasPrimaryTraceClock()) {
          setPrimaryTraceClock(other.getPrimaryTraceClock());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        if (extensionRegistry == null) {
          throw new java.lang.NullPointerException();
        }
        try {
          boolean done = false;
          while (!done) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                done = true;
                break;
              case 10: {
                perfetto.protos.ClockSnapshotOuterClass.ClockSnapshot.Clock m =
                    input.readMessage(
                        perfetto.protos.ClockSnapshotOuterClass.ClockSnapshot.Clock.PARSER,
                        extensionRegistry);
                if (clocksBuilder_ == null) {
                  ensureClocksIsMutable();
                  clocks_.add(m);
                } else {
                  clocksBuilder_.addMessage(m);
                }
                break;
              } // case 10
              case 16: {
                int tmpRaw = input.readEnum();
                perfetto.protos.BuiltinClockOuterClass.BuiltinClock tmpValue =
                    perfetto.protos.BuiltinClockOuterClass.BuiltinClock.forNumber(tmpRaw);
                if (tmpValue == null) {
                  mergeUnknownVarintField(2, tmpRaw);
                } else {
                  primaryTraceClock_ = tmpRaw;
                  bitField0_ |= 0x00000002;
                }
                break;
              } // case 16
              default: {
                if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                  done = true; // was an endgroup tag
                }
                break;
              } // default:
            } // switch (tag)
          } // while (!done)
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.unwrapIOException();
        } finally {
          onChanged();
        } // finally
        return this;
      }
      private int bitField0_;

      private java.util.List<perfetto.protos.ClockSnapshotOuterClass.ClockSnapshot.Clock> clocks_ =
        java.util.Collections.emptyList();
      private void ensureClocksIsMutable() {
        if (!((bitField0_ & 0x00000001) != 0)) {
          clocks_ = new java.util.ArrayList<perfetto.protos.ClockSnapshotOuterClass.ClockSnapshot.Clock>(clocks_);
          bitField0_ |= 0x00000001;
         }
      }

      private com.google.protobuf.RepeatedFieldBuilderV3<
          perfetto.protos.ClockSnapshotOuterClass.ClockSnapshot.Clock, perfetto.protos.ClockSnapshotOuterClass.ClockSnapshot.Clock.Builder, perfetto.protos.ClockSnapshotOuterClass.ClockSnapshot.ClockOrBuilder> clocksBuilder_;

      /**
       * <code>repeated .perfetto.protos.ClockSnapshot.Clock clocks = 1;</code>
       */
      public java.util.List<perfetto.protos.ClockSnapshotOuterClass.ClockSnapshot.Clock> getClocksList() {
        if (clocksBuilder_ == null) {
          return java.util.Collections.unmodifiableList(clocks_);
        } else {
          return clocksBuilder_.getMessageList();
        }
      }
      /**
       * <code>repeated .perfetto.protos.ClockSnapshot.Clock clocks = 1;</code>
       */
      public int getClocksCount() {
        if (clocksBuilder_ == null) {
          return clocks_.size();
        } else {
          return clocksBuilder_.getCount();
        }
      }
      /**
       * <code>repeated .perfetto.protos.ClockSnapshot.Clock clocks = 1;</code>
       */
      public perfetto.protos.ClockSnapshotOuterClass.ClockSnapshot.Clock getClocks(int index) {
        if (clocksBuilder_ == null) {
          return clocks_.get(index);
        } else {
          return clocksBuilder_.getMessage(index);
        }
      }
      /**
       * <code>repeated .perfetto.protos.ClockSnapshot.Clock clocks = 1;</code>
       */
      public Builder setClocks(
          int index, perfetto.protos.ClockSnapshotOuterClass.ClockSnapshot.Clock value) {
        if (clocksBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureClocksIsMutable();
          clocks_.set(index, value);
          onChanged();
        } else {
          clocksBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .perfetto.protos.ClockSnapshot.Clock clocks = 1;</code>
       */
      public Builder setClocks(
          int index, perfetto.protos.ClockSnapshotOuterClass.ClockSnapshot.Clock.Builder builderForValue) {
        if (clocksBuilder_ == null) {
          ensureClocksIsMutable();
          clocks_.set(index, builderForValue.build());
          onChanged();
        } else {
          clocksBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .perfetto.protos.ClockSnapshot.Clock clocks = 1;</code>
       */
      public Builder addClocks(perfetto.protos.ClockSnapshotOuterClass.ClockSnapshot.Clock value) {
        if (clocksBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureClocksIsMutable();
          clocks_.add(value);
          onChanged();
        } else {
          clocksBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <code>repeated .perfetto.protos.ClockSnapshot.Clock clocks = 1;</code>
       */
      public Builder addClocks(
          int index, perfetto.protos.ClockSnapshotOuterClass.ClockSnapshot.Clock value) {
        if (clocksBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureClocksIsMutable();
          clocks_.add(index, value);
          onChanged();
        } else {
          clocksBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .perfetto.protos.ClockSnapshot.Clock clocks = 1;</code>
       */
      public Builder addClocks(
          perfetto.protos.ClockSnapshotOuterClass.ClockSnapshot.Clock.Builder builderForValue) {
        if (clocksBuilder_ == null) {
          ensureClocksIsMutable();
          clocks_.add(builderForValue.build());
          onChanged();
        } else {
          clocksBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .perfetto.protos.ClockSnapshot.Clock clocks = 1;</code>
       */
      public Builder addClocks(
          int index, perfetto.protos.ClockSnapshotOuterClass.ClockSnapshot.Clock.Builder builderForValue) {
        if (clocksBuilder_ == null) {
          ensureClocksIsMutable();
          clocks_.add(index, builderForValue.build());
          onChanged();
        } else {
          clocksBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .perfetto.protos.ClockSnapshot.Clock clocks = 1;</code>
       */
      public Builder addAllClocks(
          java.lang.Iterable<? extends perfetto.protos.ClockSnapshotOuterClass.ClockSnapshot.Clock> values) {
        if (clocksBuilder_ == null) {
          ensureClocksIsMutable();
          com.google.protobuf.AbstractMessageLite.Builder.addAll(
              values, clocks_);
          onChanged();
        } else {
          clocksBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <code>repeated .perfetto.protos.ClockSnapshot.Clock clocks = 1;</code>
       */
      public Builder clearClocks() {
        if (clocksBuilder_ == null) {
          clocks_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000001);
          onChanged();
        } else {
          clocksBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>repeated .perfetto.protos.ClockSnapshot.Clock clocks = 1;</code>
       */
      public Builder removeClocks(int index) {
        if (clocksBuilder_ == null) {
          ensureClocksIsMutable();
          clocks_.remove(index);
          onChanged();
        } else {
          clocksBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <code>repeated .perfetto.protos.ClockSnapshot.Clock clocks = 1;</code>
       */
      public perfetto.protos.ClockSnapshotOuterClass.ClockSnapshot.Clock.Builder getClocksBuilder(
          int index) {
        return getClocksFieldBuilder().getBuilder(index);
      }
      /**
       * <code>repeated .perfetto.protos.ClockSnapshot.Clock clocks = 1;</code>
       */
      public perfetto.protos.ClockSnapshotOuterClass.ClockSnapshot.ClockOrBuilder getClocksOrBuilder(
          int index) {
        if (clocksBuilder_ == null) {
          return clocks_.get(index);  } else {
          return clocksBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <code>repeated .perfetto.protos.ClockSnapshot.Clock clocks = 1;</code>
       */
      public java.util.List<? extends perfetto.protos.ClockSnapshotOuterClass.ClockSnapshot.ClockOrBuilder> 
           getClocksOrBuilderList() {
        if (clocksBuilder_ != null) {
          return clocksBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(clocks_);
        }
      }
      /**
       * <code>repeated .perfetto.protos.ClockSnapshot.Clock clocks = 1;</code>
       */
      public perfetto.protos.ClockSnapshotOuterClass.ClockSnapshot.Clock.Builder addClocksBuilder() {
        return getClocksFieldBuilder().addBuilder(
            perfetto.protos.ClockSnapshotOuterClass.ClockSnapshot.Clock.getDefaultInstance());
      }
      /**
       * <code>repeated .perfetto.protos.ClockSnapshot.Clock clocks = 1;</code>
       */
      public perfetto.protos.ClockSnapshotOuterClass.ClockSnapshot.Clock.Builder addClocksBuilder(
          int index) {
        return getClocksFieldBuilder().addBuilder(
            index, perfetto.protos.ClockSnapshotOuterClass.ClockSnapshot.Clock.getDefaultInstance());
      }
      /**
       * <code>repeated .perfetto.protos.ClockSnapshot.Clock clocks = 1;</code>
       */
      public java.util.List<perfetto.protos.ClockSnapshotOuterClass.ClockSnapshot.Clock.Builder> 
           getClocksBuilderList() {
        return getClocksFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilderV3<
          perfetto.protos.ClockSnapshotOuterClass.ClockSnapshot.Clock, perfetto.protos.ClockSnapshotOuterClass.ClockSnapshot.Clock.Builder, perfetto.protos.ClockSnapshotOuterClass.ClockSnapshot.ClockOrBuilder> 
          getClocksFieldBuilder() {
        if (clocksBuilder_ == null) {
          clocksBuilder_ = new com.google.protobuf.RepeatedFieldBuilderV3<
              perfetto.protos.ClockSnapshotOuterClass.ClockSnapshot.Clock, perfetto.protos.ClockSnapshotOuterClass.ClockSnapshot.Clock.Builder, perfetto.protos.ClockSnapshotOuterClass.ClockSnapshot.ClockOrBuilder>(
                  clocks_,
                  ((bitField0_ & 0x00000001) != 0),
                  getParentForChildren(),
                  isClean());
          clocks_ = null;
        }
        return clocksBuilder_;
      }

      private int primaryTraceClock_ = 0;
      /**
       * <pre>
       * The authoritative clock domain for the trace. Defaults to BOOTTIME, but can
       * be overridden in TraceConfig's builtin_data_sources. Trace processor will
       * attempt to translate packet/event timestamps from various data sources (and
       * their chosen clock domains) to this domain during import.
       * </pre>
       *
       * <code>optional .perfetto.protos.BuiltinClock primary_trace_clock = 2;</code>
       * @return Whether the primaryTraceClock field is set.
       */
      @java.lang.Override public boolean hasPrimaryTraceClock() {
        return ((bitField0_ & 0x00000002) != 0);
      }
      /**
       * <pre>
       * The authoritative clock domain for the trace. Defaults to BOOTTIME, but can
       * be overridden in TraceConfig's builtin_data_sources. Trace processor will
       * attempt to translate packet/event timestamps from various data sources (and
       * their chosen clock domains) to this domain during import.
       * </pre>
       *
       * <code>optional .perfetto.protos.BuiltinClock primary_trace_clock = 2;</code>
       * @return The primaryTraceClock.
       */
      @java.lang.Override
      public perfetto.protos.BuiltinClockOuterClass.BuiltinClock getPrimaryTraceClock() {
        perfetto.protos.BuiltinClockOuterClass.BuiltinClock result = perfetto.protos.BuiltinClockOuterClass.BuiltinClock.forNumber(primaryTraceClock_);
        return result == null ? perfetto.protos.BuiltinClockOuterClass.BuiltinClock.BUILTIN_CLOCK_UNKNOWN : result;
      }
      /**
       * <pre>
       * The authoritative clock domain for the trace. Defaults to BOOTTIME, but can
       * be overridden in TraceConfig's builtin_data_sources. Trace processor will
       * attempt to translate packet/event timestamps from various data sources (and
       * their chosen clock domains) to this domain during import.
       * </pre>
       *
       * <code>optional .perfetto.protos.BuiltinClock primary_trace_clock = 2;</code>
       * @param value The primaryTraceClock to set.
       * @return This builder for chaining.
       */
      public Builder setPrimaryTraceClock(perfetto.protos.BuiltinClockOuterClass.BuiltinClock value) {
        if (value == null) {
          throw new NullPointerException();
        }
        bitField0_ |= 0x00000002;
        primaryTraceClock_ = value.getNumber();
        onChanged();
        return this;
      }
      /**
       * <pre>
       * The authoritative clock domain for the trace. Defaults to BOOTTIME, but can
       * be overridden in TraceConfig's builtin_data_sources. Trace processor will
       * attempt to translate packet/event timestamps from various data sources (and
       * their chosen clock domains) to this domain during import.
       * </pre>
       *
       * <code>optional .perfetto.protos.BuiltinClock primary_trace_clock = 2;</code>
       * @return This builder for chaining.
       */
      public Builder clearPrimaryTraceClock() {
        bitField0_ = (bitField0_ & ~0x00000002);
        primaryTraceClock_ = 0;
        onChanged();
        return this;
      }
      @java.lang.Override
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      @java.lang.Override
      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:perfetto.protos.ClockSnapshot)
    }

    // @@protoc_insertion_point(class_scope:perfetto.protos.ClockSnapshot)
    private static final perfetto.protos.ClockSnapshotOuterClass.ClockSnapshot DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new perfetto.protos.ClockSnapshotOuterClass.ClockSnapshot();
    }

    public static perfetto.protos.ClockSnapshotOuterClass.ClockSnapshot getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    @java.lang.Deprecated public static final com.google.protobuf.Parser<ClockSnapshot>
        PARSER = new com.google.protobuf.AbstractParser<ClockSnapshot>() {
      @java.lang.Override
      public ClockSnapshot parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        Builder builder = newBuilder();
        try {
          builder.mergeFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.setUnfinishedMessage(builder.buildPartial());
        } catch (com.google.protobuf.UninitializedMessageException e) {
          throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
        } catch (java.io.IOException e) {
          throw new com.google.protobuf.InvalidProtocolBufferException(e)
              .setUnfinishedMessage(builder.buildPartial());
        }
        return builder.buildPartial();
      }
    };

    public static com.google.protobuf.Parser<ClockSnapshot> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<ClockSnapshot> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public perfetto.protos.ClockSnapshotOuterClass.ClockSnapshot getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_perfetto_protos_ClockSnapshot_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_perfetto_protos_ClockSnapshot_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_perfetto_protos_ClockSnapshot_Clock_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_perfetto_protos_ClockSnapshot_Clock_fieldAccessorTable;

  public static com.google.protobuf.Descriptors.FileDescriptor
      getDescriptor() {
    return descriptor;
  }
  private static  com.google.protobuf.Descriptors.FileDescriptor
      descriptor;
  static {
    java.lang.String[] descriptorData = {
      "\n*protos/perfetto/trace/clock_snapshot.p" +
      "roto\022\017perfetto.protos\032*protos/perfetto/c" +
      "ommon/builtin_clock.proto\"\222\003\n\rClockSnaps" +
      "hot\0224\n\006clocks\030\001 \003(\0132$.perfetto.protos.Cl" +
      "ockSnapshot.Clock\022:\n\023primary_trace_clock" +
      "\030\002 \001(\0162\035.perfetto.protos.BuiltinClock\032\216\002" +
      "\n\005Clock\022\020\n\010clock_id\030\001 \001(\r\022\021\n\ttimestamp\030\002" +
      " \001(\004\022\026\n\016is_incremental\030\003 \001(\010\022\032\n\022unit_mul" +
      "tiplier_ns\030\004 \001(\004\"\253\001\n\rBuiltinClocks\022\013\n\007UN" +
      "KNOWN\020\000\022\014\n\010REALTIME\020\001\022\023\n\017REALTIME_COARSE" +
      "\020\002\022\r\n\tMONOTONIC\020\003\022\024\n\020MONOTONIC_COARSE\020\004\022" +
      "\021\n\rMONOTONIC_RAW\020\005\022\014\n\010BOOTTIME\020\006\022\030\n\024BUIL" +
      "TIN_CLOCK_MAX_ID\020?\"\004\010\007\020\007\"\004\010\010\020\010"
    };
    descriptor = com.google.protobuf.Descriptors.FileDescriptor
      .internalBuildGeneratedFileFrom(descriptorData,
        new com.google.protobuf.Descriptors.FileDescriptor[] {
          perfetto.protos.BuiltinClockOuterClass.getDescriptor(),
        });
    internal_static_perfetto_protos_ClockSnapshot_descriptor =
      getDescriptor().getMessageTypes().get(0);
    internal_static_perfetto_protos_ClockSnapshot_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_perfetto_protos_ClockSnapshot_descriptor,
        new java.lang.String[] { "Clocks", "PrimaryTraceClock", });
    internal_static_perfetto_protos_ClockSnapshot_Clock_descriptor =
      internal_static_perfetto_protos_ClockSnapshot_descriptor.getNestedTypes().get(0);
    internal_static_perfetto_protos_ClockSnapshot_Clock_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_perfetto_protos_ClockSnapshot_Clock_descriptor,
        new java.lang.String[] { "ClockId", "Timestamp", "IsIncremental", "UnitMultiplierNs", });
    perfetto.protos.BuiltinClockOuterClass.getDescriptor();
  }

  // @@protoc_insertion_point(outer_class_scope)
}
