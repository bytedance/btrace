// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: protos/perfetto/trace/track_event/chrome_frame_reporter.proto

package perfetto.protos;

public final class ChromeFrameReporterOuterClass {
  private ChromeFrameReporterOuterClass() {}
  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistryLite registry) {
  }

  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistry registry) {
    registerAllExtensions(
        (com.google.protobuf.ExtensionRegistryLite) registry);
  }
  public interface ChromeFrameReporterOrBuilder extends
      // @@protoc_insertion_point(interface_extends:perfetto.protos.ChromeFrameReporter)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <code>optional .perfetto.protos.ChromeFrameReporter.State state = 1;</code>
     * @return Whether the state field is set.
     */
    boolean hasState();
    /**
     * <code>optional .perfetto.protos.ChromeFrameReporter.State state = 1;</code>
     * @return The state.
     */
    perfetto.protos.ChromeFrameReporterOuterClass.ChromeFrameReporter.State getState();

    /**
     * <pre>
     * The reason is set only if |state| is not |STATE_UPDATED_ALL|.
     * </pre>
     *
     * <code>optional .perfetto.protos.ChromeFrameReporter.FrameDropReason reason = 2;</code>
     * @return Whether the reason field is set.
     */
    boolean hasReason();
    /**
     * <pre>
     * The reason is set only if |state| is not |STATE_UPDATED_ALL|.
     * </pre>
     *
     * <code>optional .perfetto.protos.ChromeFrameReporter.FrameDropReason reason = 2;</code>
     * @return The reason.
     */
    perfetto.protos.ChromeFrameReporterOuterClass.ChromeFrameReporter.FrameDropReason getReason();

    /**
     * <code>optional uint64 frame_source = 3;</code>
     * @return Whether the frameSource field is set.
     */
    boolean hasFrameSource();
    /**
     * <code>optional uint64 frame_source = 3;</code>
     * @return The frameSource.
     */
    long getFrameSource();

    /**
     * <code>optional uint64 frame_sequence = 4;</code>
     * @return Whether the frameSequence field is set.
     */
    boolean hasFrameSequence();
    /**
     * <code>optional uint64 frame_sequence = 4;</code>
     * @return The frameSequence.
     */
    long getFrameSequence();

    /**
     * <pre>
     * If this is a droped frame (i.e. if |state| is set to |STATE_DROPPED| or
     * |STATE_PRESENTED_PARTIAL|), then indicates whether this frame impacts
     * smoothness.
     * </pre>
     *
     * <code>optional bool affects_smoothness = 5;</code>
     * @return Whether the affectsSmoothness field is set.
     */
    boolean hasAffectsSmoothness();
    /**
     * <pre>
     * If this is a droped frame (i.e. if |state| is set to |STATE_DROPPED| or
     * |STATE_PRESENTED_PARTIAL|), then indicates whether this frame impacts
     * smoothness.
     * </pre>
     *
     * <code>optional bool affects_smoothness = 5;</code>
     * @return The affectsSmoothness.
     */
    boolean getAffectsSmoothness();

    /**
     * <pre>
     * The type of active scroll.
     * </pre>
     *
     * <code>optional .perfetto.protos.ChromeFrameReporter.ScrollState scroll_state = 6;</code>
     * @return Whether the scrollState field is set.
     */
    boolean hasScrollState();
    /**
     * <pre>
     * The type of active scroll.
     * </pre>
     *
     * <code>optional .perfetto.protos.ChromeFrameReporter.ScrollState scroll_state = 6;</code>
     * @return The scrollState.
     */
    perfetto.protos.ChromeFrameReporterOuterClass.ChromeFrameReporter.ScrollState getScrollState();

    /**
     * <pre>
     * If any main thread animation is active during this frame.
     * </pre>
     *
     * <code>optional bool has_main_animation = 7;</code>
     * @return Whether the hasMainAnimation field is set.
     */
    boolean hasHasMainAnimation();
    /**
     * <pre>
     * If any main thread animation is active during this frame.
     * </pre>
     *
     * <code>optional bool has_main_animation = 7;</code>
     * @return The hasMainAnimation.
     */
    boolean getHasMainAnimation();

    /**
     * <pre>
     * If any compositor thread animation is active during this frame.
     * </pre>
     *
     * <code>optional bool has_compositor_animation = 8;</code>
     * @return Whether the hasCompositorAnimation field is set.
     */
    boolean hasHasCompositorAnimation();
    /**
     * <pre>
     * If any compositor thread animation is active during this frame.
     * </pre>
     *
     * <code>optional bool has_compositor_animation = 8;</code>
     * @return The hasCompositorAnimation.
     */
    boolean getHasCompositorAnimation();

    /**
     * <pre>
     * If any touch-driven UX (not scroll) is active during this frame.
     * </pre>
     *
     * <code>optional bool has_smooth_input_main = 9;</code>
     * @return Whether the hasSmoothInputMain field is set.
     */
    boolean hasHasSmoothInputMain();
    /**
     * <pre>
     * If any touch-driven UX (not scroll) is active during this frame.
     * </pre>
     *
     * <code>optional bool has_smooth_input_main = 9;</code>
     * @return The hasSmoothInputMain.
     */
    boolean getHasSmoothInputMain();

    /**
     * <pre>
     * Whether the frame contained any missing content (i.e. whether there was
     * checkerboarding in the frame).
     * </pre>
     *
     * <code>optional bool has_missing_content = 10;</code>
     * @return Whether the hasMissingContent field is set.
     */
    boolean hasHasMissingContent();
    /**
     * <pre>
     * Whether the frame contained any missing content (i.e. whether there was
     * checkerboarding in the frame).
     * </pre>
     *
     * <code>optional bool has_missing_content = 10;</code>
     * @return The hasMissingContent.
     */
    boolean getHasMissingContent();

    /**
     * <pre>
     * The id of layer_tree_host that the frame has been produced for.
     * </pre>
     *
     * <code>optional uint64 layer_tree_host_id = 11;</code>
     * @return Whether the layerTreeHostId field is set.
     */
    boolean hasLayerTreeHostId();
    /**
     * <pre>
     * The id of layer_tree_host that the frame has been produced for.
     * </pre>
     *
     * <code>optional uint64 layer_tree_host_id = 11;</code>
     * @return The layerTreeHostId.
     */
    long getLayerTreeHostId();

    /**
     * <pre>
     * If total latency of PipelineReporter exceeds a certain limit.
     * </pre>
     *
     * <code>optional bool has_high_latency = 12;</code>
     * @return Whether the hasHighLatency field is set.
     */
    boolean hasHasHighLatency();
    /**
     * <pre>
     * If total latency of PipelineReporter exceeds a certain limit.
     * </pre>
     *
     * <code>optional bool has_high_latency = 12;</code>
     * @return The hasHighLatency.
     */
    boolean getHasHighLatency();

    /**
     * <pre>
     * Indicate if the frame is "FORKED" (i.e. a PipelineReporter event starts at
     * the same frame sequence as another PipelineReporter) or "BACKFILL"
     * (i.e. dropped frames when there are no partial compositor updates).
     * </pre>
     *
     * <code>optional .perfetto.protos.ChromeFrameReporter.FrameType frame_type = 13;</code>
     * @return Whether the frameType field is set.
     */
    boolean hasFrameType();
    /**
     * <pre>
     * Indicate if the frame is "FORKED" (i.e. a PipelineReporter event starts at
     * the same frame sequence as another PipelineReporter) or "BACKFILL"
     * (i.e. dropped frames when there are no partial compositor updates).
     * </pre>
     *
     * <code>optional .perfetto.protos.ChromeFrameReporter.FrameType frame_type = 13;</code>
     * @return The frameType.
     */
    perfetto.protos.ChromeFrameReporterOuterClass.ChromeFrameReporter.FrameType getFrameType();

    /**
     * <pre>
     * The breakdown stage of PipelineReporter that is most likely accountable for
     * high latency.
     * </pre>
     *
     * <code>repeated string high_latency_contribution_stage = 14;</code>
     * @return A list containing the highLatencyContributionStage.
     */
    java.util.List<java.lang.String>
        getHighLatencyContributionStageList();
    /**
     * <pre>
     * The breakdown stage of PipelineReporter that is most likely accountable for
     * high latency.
     * </pre>
     *
     * <code>repeated string high_latency_contribution_stage = 14;</code>
     * @return The count of highLatencyContributionStage.
     */
    int getHighLatencyContributionStageCount();
    /**
     * <pre>
     * The breakdown stage of PipelineReporter that is most likely accountable for
     * high latency.
     * </pre>
     *
     * <code>repeated string high_latency_contribution_stage = 14;</code>
     * @param index The index of the element to return.
     * @return The highLatencyContributionStage at the given index.
     */
    java.lang.String getHighLatencyContributionStage(int index);
    /**
     * <pre>
     * The breakdown stage of PipelineReporter that is most likely accountable for
     * high latency.
     * </pre>
     *
     * <code>repeated string high_latency_contribution_stage = 14;</code>
     * @param index The index of the value to return.
     * @return The bytes of the highLatencyContributionStage at the given index.
     */
    com.google.protobuf.ByteString
        getHighLatencyContributionStageBytes(int index);
  }
  /**
   * Protobuf type {@code perfetto.protos.ChromeFrameReporter}
   */
  public static final class ChromeFrameReporter extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:perfetto.protos.ChromeFrameReporter)
      ChromeFrameReporterOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use ChromeFrameReporter.newBuilder() to construct.
    private ChromeFrameReporter(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private ChromeFrameReporter() {
      state_ = 0;
      reason_ = 0;
      scrollState_ = 0;
      frameType_ = 0;
      highLatencyContributionStage_ = com.google.protobuf.LazyStringArrayList.EMPTY;
    }

    @java.lang.Override
    @SuppressWarnings({"unused"})
    protected java.lang.Object newInstance(
        UnusedPrivateParameter unused) {
      return new ChromeFrameReporter();
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return perfetto.protos.ChromeFrameReporterOuterClass.internal_static_perfetto_protos_ChromeFrameReporter_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return perfetto.protos.ChromeFrameReporterOuterClass.internal_static_perfetto_protos_ChromeFrameReporter_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              perfetto.protos.ChromeFrameReporterOuterClass.ChromeFrameReporter.class, perfetto.protos.ChromeFrameReporterOuterClass.ChromeFrameReporter.Builder.class);
    }

    /**
     * Protobuf enum {@code perfetto.protos.ChromeFrameReporter.State}
     */
    public enum State
        implements com.google.protobuf.ProtocolMessageEnum {
      /**
       * <pre>
       * The frame did not have any updates to present.
       * </pre>
       *
       * <code>STATE_NO_UPDATE_DESIRED = 0;</code>
       */
      STATE_NO_UPDATE_DESIRED(0),
      /**
       * <pre>
       * The frame presented all the desired updates (i.e. any updates requested
       * from both the compositor thread and main-threads were handled).
       * </pre>
       *
       * <code>STATE_PRESENTED_ALL = 1;</code>
       */
      STATE_PRESENTED_ALL(1),
      /**
       * <pre>
       * The frame was presented with some updates, but also missed some updates
       * (e.g. missed updates from the main-thread, but included updates from the
       * compositor thread).
       * </pre>
       *
       * <code>STATE_PRESENTED_PARTIAL = 2;</code>
       */
      STATE_PRESENTED_PARTIAL(2),
      /**
       * <pre>
       * The frame was dropped, i.e. some updates were desired for the frame, but
       * was not presented.
       * </pre>
       *
       * <code>STATE_DROPPED = 3;</code>
       */
      STATE_DROPPED(3),
      ;

      /**
       * <pre>
       * The frame did not have any updates to present.
       * </pre>
       *
       * <code>STATE_NO_UPDATE_DESIRED = 0;</code>
       */
      public static final int STATE_NO_UPDATE_DESIRED_VALUE = 0;
      /**
       * <pre>
       * The frame presented all the desired updates (i.e. any updates requested
       * from both the compositor thread and main-threads were handled).
       * </pre>
       *
       * <code>STATE_PRESENTED_ALL = 1;</code>
       */
      public static final int STATE_PRESENTED_ALL_VALUE = 1;
      /**
       * <pre>
       * The frame was presented with some updates, but also missed some updates
       * (e.g. missed updates from the main-thread, but included updates from the
       * compositor thread).
       * </pre>
       *
       * <code>STATE_PRESENTED_PARTIAL = 2;</code>
       */
      public static final int STATE_PRESENTED_PARTIAL_VALUE = 2;
      /**
       * <pre>
       * The frame was dropped, i.e. some updates were desired for the frame, but
       * was not presented.
       * </pre>
       *
       * <code>STATE_DROPPED = 3;</code>
       */
      public static final int STATE_DROPPED_VALUE = 3;


      public final int getNumber() {
        return value;
      }

      /**
       * @param value The numeric wire value of the corresponding enum entry.
       * @return The enum associated with the given numeric wire value.
       * @deprecated Use {@link #forNumber(int)} instead.
       */
      @java.lang.Deprecated
      public static State valueOf(int value) {
        return forNumber(value);
      }

      /**
       * @param value The numeric wire value of the corresponding enum entry.
       * @return The enum associated with the given numeric wire value.
       */
      public static State forNumber(int value) {
        switch (value) {
          case 0: return STATE_NO_UPDATE_DESIRED;
          case 1: return STATE_PRESENTED_ALL;
          case 2: return STATE_PRESENTED_PARTIAL;
          case 3: return STATE_DROPPED;
          default: return null;
        }
      }

      public static com.google.protobuf.Internal.EnumLiteMap<State>
          internalGetValueMap() {
        return internalValueMap;
      }
      private static final com.google.protobuf.Internal.EnumLiteMap<
          State> internalValueMap =
            new com.google.protobuf.Internal.EnumLiteMap<State>() {
              public State findValueByNumber(int number) {
                return State.forNumber(number);
              }
            };

      public final com.google.protobuf.Descriptors.EnumValueDescriptor
          getValueDescriptor() {
        return getDescriptor().getValues().get(ordinal());
      }
      public final com.google.protobuf.Descriptors.EnumDescriptor
          getDescriptorForType() {
        return getDescriptor();
      }
      public static final com.google.protobuf.Descriptors.EnumDescriptor
          getDescriptor() {
        return perfetto.protos.ChromeFrameReporterOuterClass.ChromeFrameReporter.getDescriptor().getEnumTypes().get(0);
      }

      private static final State[] VALUES = values();

      public static State valueOf(
          com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
        if (desc.getType() != getDescriptor()) {
          throw new java.lang.IllegalArgumentException(
            "EnumValueDescriptor is not for this type.");
        }
        return VALUES[desc.getIndex()];
      }

      private final int value;

      private State(int value) {
        this.value = value;
      }

      // @@protoc_insertion_point(enum_scope:perfetto.protos.ChromeFrameReporter.State)
    }

    /**
     * Protobuf enum {@code perfetto.protos.ChromeFrameReporter.FrameDropReason}
     */
    public enum FrameDropReason
        implements com.google.protobuf.ProtocolMessageEnum {
      /**
       * <code>REASON_UNSPECIFIED = 0;</code>
       */
      REASON_UNSPECIFIED(0),
      /**
       * <pre>
       * Frame was dropped by the display-compositor.
       * The display-compositor may drop a frame some times (e.g. the frame missed
       * the deadline, or was blocked on surface-sync, etc.)
       * </pre>
       *
       * <code>REASON_DISPLAY_COMPOSITOR = 1;</code>
       */
      REASON_DISPLAY_COMPOSITOR(1),
      /**
       * <pre>
       * Frame was dropped because of the main-thread.
       * The main-thread may cause a frame to be dropped, e.g. if the main-thread
       * is running expensive javascript, or doing a lot of layout updates, etc.
       * </pre>
       *
       * <code>REASON_MAIN_THREAD = 2;</code>
       */
      REASON_MAIN_THREAD(2),
      /**
       * <pre>
       * Frame was dropped by the client compositor.
       * The client compositor can drop some frames too (e.g. attempting to
       * recover latency, missing the deadline, etc.).
       * </pre>
       *
       * <code>REASON_CLIENT_COMPOSITOR = 3;</code>
       */
      REASON_CLIENT_COMPOSITOR(3),
      ;

      /**
       * <code>REASON_UNSPECIFIED = 0;</code>
       */
      public static final int REASON_UNSPECIFIED_VALUE = 0;
      /**
       * <pre>
       * Frame was dropped by the display-compositor.
       * The display-compositor may drop a frame some times (e.g. the frame missed
       * the deadline, or was blocked on surface-sync, etc.)
       * </pre>
       *
       * <code>REASON_DISPLAY_COMPOSITOR = 1;</code>
       */
      public static final int REASON_DISPLAY_COMPOSITOR_VALUE = 1;
      /**
       * <pre>
       * Frame was dropped because of the main-thread.
       * The main-thread may cause a frame to be dropped, e.g. if the main-thread
       * is running expensive javascript, or doing a lot of layout updates, etc.
       * </pre>
       *
       * <code>REASON_MAIN_THREAD = 2;</code>
       */
      public static final int REASON_MAIN_THREAD_VALUE = 2;
      /**
       * <pre>
       * Frame was dropped by the client compositor.
       * The client compositor can drop some frames too (e.g. attempting to
       * recover latency, missing the deadline, etc.).
       * </pre>
       *
       * <code>REASON_CLIENT_COMPOSITOR = 3;</code>
       */
      public static final int REASON_CLIENT_COMPOSITOR_VALUE = 3;


      public final int getNumber() {
        return value;
      }

      /**
       * @param value The numeric wire value of the corresponding enum entry.
       * @return The enum associated with the given numeric wire value.
       * @deprecated Use {@link #forNumber(int)} instead.
       */
      @java.lang.Deprecated
      public static FrameDropReason valueOf(int value) {
        return forNumber(value);
      }

      /**
       * @param value The numeric wire value of the corresponding enum entry.
       * @return The enum associated with the given numeric wire value.
       */
      public static FrameDropReason forNumber(int value) {
        switch (value) {
          case 0: return REASON_UNSPECIFIED;
          case 1: return REASON_DISPLAY_COMPOSITOR;
          case 2: return REASON_MAIN_THREAD;
          case 3: return REASON_CLIENT_COMPOSITOR;
          default: return null;
        }
      }

      public static com.google.protobuf.Internal.EnumLiteMap<FrameDropReason>
          internalGetValueMap() {
        return internalValueMap;
      }
      private static final com.google.protobuf.Internal.EnumLiteMap<
          FrameDropReason> internalValueMap =
            new com.google.protobuf.Internal.EnumLiteMap<FrameDropReason>() {
              public FrameDropReason findValueByNumber(int number) {
                return FrameDropReason.forNumber(number);
              }
            };

      public final com.google.protobuf.Descriptors.EnumValueDescriptor
          getValueDescriptor() {
        return getDescriptor().getValues().get(ordinal());
      }
      public final com.google.protobuf.Descriptors.EnumDescriptor
          getDescriptorForType() {
        return getDescriptor();
      }
      public static final com.google.protobuf.Descriptors.EnumDescriptor
          getDescriptor() {
        return perfetto.protos.ChromeFrameReporterOuterClass.ChromeFrameReporter.getDescriptor().getEnumTypes().get(1);
      }

      private static final FrameDropReason[] VALUES = values();

      public static FrameDropReason valueOf(
          com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
        if (desc.getType() != getDescriptor()) {
          throw new java.lang.IllegalArgumentException(
            "EnumValueDescriptor is not for this type.");
        }
        return VALUES[desc.getIndex()];
      }

      private final int value;

      private FrameDropReason(int value) {
        this.value = value;
      }

      // @@protoc_insertion_point(enum_scope:perfetto.protos.ChromeFrameReporter.FrameDropReason)
    }

    /**
     * Protobuf enum {@code perfetto.protos.ChromeFrameReporter.ScrollState}
     */
    public enum ScrollState
        implements com.google.protobuf.ProtocolMessageEnum {
      /**
       * <code>SCROLL_NONE = 0;</code>
       */
      SCROLL_NONE(0),
      /**
       * <code>SCROLL_MAIN_THREAD = 1;</code>
       */
      SCROLL_MAIN_THREAD(1),
      /**
       * <code>SCROLL_COMPOSITOR_THREAD = 2;</code>
       */
      SCROLL_COMPOSITOR_THREAD(2),
      /**
       * <pre>
       * Used when it can't be determined whether a scroll is in progress or not.
       * </pre>
       *
       * <code>SCROLL_UNKNOWN = 3;</code>
       */
      SCROLL_UNKNOWN(3),
      ;

      /**
       * <code>SCROLL_NONE = 0;</code>
       */
      public static final int SCROLL_NONE_VALUE = 0;
      /**
       * <code>SCROLL_MAIN_THREAD = 1;</code>
       */
      public static final int SCROLL_MAIN_THREAD_VALUE = 1;
      /**
       * <code>SCROLL_COMPOSITOR_THREAD = 2;</code>
       */
      public static final int SCROLL_COMPOSITOR_THREAD_VALUE = 2;
      /**
       * <pre>
       * Used when it can't be determined whether a scroll is in progress or not.
       * </pre>
       *
       * <code>SCROLL_UNKNOWN = 3;</code>
       */
      public static final int SCROLL_UNKNOWN_VALUE = 3;


      public final int getNumber() {
        return value;
      }

      /**
       * @param value The numeric wire value of the corresponding enum entry.
       * @return The enum associated with the given numeric wire value.
       * @deprecated Use {@link #forNumber(int)} instead.
       */
      @java.lang.Deprecated
      public static ScrollState valueOf(int value) {
        return forNumber(value);
      }

      /**
       * @param value The numeric wire value of the corresponding enum entry.
       * @return The enum associated with the given numeric wire value.
       */
      public static ScrollState forNumber(int value) {
        switch (value) {
          case 0: return SCROLL_NONE;
          case 1: return SCROLL_MAIN_THREAD;
          case 2: return SCROLL_COMPOSITOR_THREAD;
          case 3: return SCROLL_UNKNOWN;
          default: return null;
        }
      }

      public static com.google.protobuf.Internal.EnumLiteMap<ScrollState>
          internalGetValueMap() {
        return internalValueMap;
      }
      private static final com.google.protobuf.Internal.EnumLiteMap<
          ScrollState> internalValueMap =
            new com.google.protobuf.Internal.EnumLiteMap<ScrollState>() {
              public ScrollState findValueByNumber(int number) {
                return ScrollState.forNumber(number);
              }
            };

      public final com.google.protobuf.Descriptors.EnumValueDescriptor
          getValueDescriptor() {
        return getDescriptor().getValues().get(ordinal());
      }
      public final com.google.protobuf.Descriptors.EnumDescriptor
          getDescriptorForType() {
        return getDescriptor();
      }
      public static final com.google.protobuf.Descriptors.EnumDescriptor
          getDescriptor() {
        return perfetto.protos.ChromeFrameReporterOuterClass.ChromeFrameReporter.getDescriptor().getEnumTypes().get(2);
      }

      private static final ScrollState[] VALUES = values();

      public static ScrollState valueOf(
          com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
        if (desc.getType() != getDescriptor()) {
          throw new java.lang.IllegalArgumentException(
            "EnumValueDescriptor is not for this type.");
        }
        return VALUES[desc.getIndex()];
      }

      private final int value;

      private ScrollState(int value) {
        this.value = value;
      }

      // @@protoc_insertion_point(enum_scope:perfetto.protos.ChromeFrameReporter.ScrollState)
    }

    /**
     * Protobuf enum {@code perfetto.protos.ChromeFrameReporter.FrameType}
     */
    public enum FrameType
        implements com.google.protobuf.ProtocolMessageEnum {
      /**
       * <code>FORKED = 0;</code>
       */
      FORKED(0),
      /**
       * <code>BACKFILL = 1;</code>
       */
      BACKFILL(1),
      ;

      /**
       * <code>FORKED = 0;</code>
       */
      public static final int FORKED_VALUE = 0;
      /**
       * <code>BACKFILL = 1;</code>
       */
      public static final int BACKFILL_VALUE = 1;


      public final int getNumber() {
        return value;
      }

      /**
       * @param value The numeric wire value of the corresponding enum entry.
       * @return The enum associated with the given numeric wire value.
       * @deprecated Use {@link #forNumber(int)} instead.
       */
      @java.lang.Deprecated
      public static FrameType valueOf(int value) {
        return forNumber(value);
      }

      /**
       * @param value The numeric wire value of the corresponding enum entry.
       * @return The enum associated with the given numeric wire value.
       */
      public static FrameType forNumber(int value) {
        switch (value) {
          case 0: return FORKED;
          case 1: return BACKFILL;
          default: return null;
        }
      }

      public static com.google.protobuf.Internal.EnumLiteMap<FrameType>
          internalGetValueMap() {
        return internalValueMap;
      }
      private static final com.google.protobuf.Internal.EnumLiteMap<
          FrameType> internalValueMap =
            new com.google.protobuf.Internal.EnumLiteMap<FrameType>() {
              public FrameType findValueByNumber(int number) {
                return FrameType.forNumber(number);
              }
            };

      public final com.google.protobuf.Descriptors.EnumValueDescriptor
          getValueDescriptor() {
        return getDescriptor().getValues().get(ordinal());
      }
      public final com.google.protobuf.Descriptors.EnumDescriptor
          getDescriptorForType() {
        return getDescriptor();
      }
      public static final com.google.protobuf.Descriptors.EnumDescriptor
          getDescriptor() {
        return perfetto.protos.ChromeFrameReporterOuterClass.ChromeFrameReporter.getDescriptor().getEnumTypes().get(3);
      }

      private static final FrameType[] VALUES = values();

      public static FrameType valueOf(
          com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
        if (desc.getType() != getDescriptor()) {
          throw new java.lang.IllegalArgumentException(
            "EnumValueDescriptor is not for this type.");
        }
        return VALUES[desc.getIndex()];
      }

      private final int value;

      private FrameType(int value) {
        this.value = value;
      }

      // @@protoc_insertion_point(enum_scope:perfetto.protos.ChromeFrameReporter.FrameType)
    }

    private int bitField0_;
    public static final int STATE_FIELD_NUMBER = 1;
    private int state_ = 0;
    /**
     * <code>optional .perfetto.protos.ChromeFrameReporter.State state = 1;</code>
     * @return Whether the state field is set.
     */
    @java.lang.Override public boolean hasState() {
      return ((bitField0_ & 0x00000001) != 0);
    }
    /**
     * <code>optional .perfetto.protos.ChromeFrameReporter.State state = 1;</code>
     * @return The state.
     */
    @java.lang.Override public perfetto.protos.ChromeFrameReporterOuterClass.ChromeFrameReporter.State getState() {
      perfetto.protos.ChromeFrameReporterOuterClass.ChromeFrameReporter.State result = perfetto.protos.ChromeFrameReporterOuterClass.ChromeFrameReporter.State.forNumber(state_);
      return result == null ? perfetto.protos.ChromeFrameReporterOuterClass.ChromeFrameReporter.State.STATE_NO_UPDATE_DESIRED : result;
    }

    public static final int REASON_FIELD_NUMBER = 2;
    private int reason_ = 0;
    /**
     * <pre>
     * The reason is set only if |state| is not |STATE_UPDATED_ALL|.
     * </pre>
     *
     * <code>optional .perfetto.protos.ChromeFrameReporter.FrameDropReason reason = 2;</code>
     * @return Whether the reason field is set.
     */
    @java.lang.Override public boolean hasReason() {
      return ((bitField0_ & 0x00000002) != 0);
    }
    /**
     * <pre>
     * The reason is set only if |state| is not |STATE_UPDATED_ALL|.
     * </pre>
     *
     * <code>optional .perfetto.protos.ChromeFrameReporter.FrameDropReason reason = 2;</code>
     * @return The reason.
     */
    @java.lang.Override public perfetto.protos.ChromeFrameReporterOuterClass.ChromeFrameReporter.FrameDropReason getReason() {
      perfetto.protos.ChromeFrameReporterOuterClass.ChromeFrameReporter.FrameDropReason result = perfetto.protos.ChromeFrameReporterOuterClass.ChromeFrameReporter.FrameDropReason.forNumber(reason_);
      return result == null ? perfetto.protos.ChromeFrameReporterOuterClass.ChromeFrameReporter.FrameDropReason.REASON_UNSPECIFIED : result;
    }

    public static final int FRAME_SOURCE_FIELD_NUMBER = 3;
    private long frameSource_ = 0L;
    /**
     * <code>optional uint64 frame_source = 3;</code>
     * @return Whether the frameSource field is set.
     */
    @java.lang.Override
    public boolean hasFrameSource() {
      return ((bitField0_ & 0x00000004) != 0);
    }
    /**
     * <code>optional uint64 frame_source = 3;</code>
     * @return The frameSource.
     */
    @java.lang.Override
    public long getFrameSource() {
      return frameSource_;
    }

    public static final int FRAME_SEQUENCE_FIELD_NUMBER = 4;
    private long frameSequence_ = 0L;
    /**
     * <code>optional uint64 frame_sequence = 4;</code>
     * @return Whether the frameSequence field is set.
     */
    @java.lang.Override
    public boolean hasFrameSequence() {
      return ((bitField0_ & 0x00000008) != 0);
    }
    /**
     * <code>optional uint64 frame_sequence = 4;</code>
     * @return The frameSequence.
     */
    @java.lang.Override
    public long getFrameSequence() {
      return frameSequence_;
    }

    public static final int AFFECTS_SMOOTHNESS_FIELD_NUMBER = 5;
    private boolean affectsSmoothness_ = false;
    /**
     * <pre>
     * If this is a droped frame (i.e. if |state| is set to |STATE_DROPPED| or
     * |STATE_PRESENTED_PARTIAL|), then indicates whether this frame impacts
     * smoothness.
     * </pre>
     *
     * <code>optional bool affects_smoothness = 5;</code>
     * @return Whether the affectsSmoothness field is set.
     */
    @java.lang.Override
    public boolean hasAffectsSmoothness() {
      return ((bitField0_ & 0x00000010) != 0);
    }
    /**
     * <pre>
     * If this is a droped frame (i.e. if |state| is set to |STATE_DROPPED| or
     * |STATE_PRESENTED_PARTIAL|), then indicates whether this frame impacts
     * smoothness.
     * </pre>
     *
     * <code>optional bool affects_smoothness = 5;</code>
     * @return The affectsSmoothness.
     */
    @java.lang.Override
    public boolean getAffectsSmoothness() {
      return affectsSmoothness_;
    }

    public static final int SCROLL_STATE_FIELD_NUMBER = 6;
    private int scrollState_ = 0;
    /**
     * <pre>
     * The type of active scroll.
     * </pre>
     *
     * <code>optional .perfetto.protos.ChromeFrameReporter.ScrollState scroll_state = 6;</code>
     * @return Whether the scrollState field is set.
     */
    @java.lang.Override public boolean hasScrollState() {
      return ((bitField0_ & 0x00000020) != 0);
    }
    /**
     * <pre>
     * The type of active scroll.
     * </pre>
     *
     * <code>optional .perfetto.protos.ChromeFrameReporter.ScrollState scroll_state = 6;</code>
     * @return The scrollState.
     */
    @java.lang.Override public perfetto.protos.ChromeFrameReporterOuterClass.ChromeFrameReporter.ScrollState getScrollState() {
      perfetto.protos.ChromeFrameReporterOuterClass.ChromeFrameReporter.ScrollState result = perfetto.protos.ChromeFrameReporterOuterClass.ChromeFrameReporter.ScrollState.forNumber(scrollState_);
      return result == null ? perfetto.protos.ChromeFrameReporterOuterClass.ChromeFrameReporter.ScrollState.SCROLL_NONE : result;
    }

    public static final int HAS_MAIN_ANIMATION_FIELD_NUMBER = 7;
    private boolean hasMainAnimation_ = false;
    /**
     * <pre>
     * If any main thread animation is active during this frame.
     * </pre>
     *
     * <code>optional bool has_main_animation = 7;</code>
     * @return Whether the hasMainAnimation field is set.
     */
    @java.lang.Override
    public boolean hasHasMainAnimation() {
      return ((bitField0_ & 0x00000040) != 0);
    }
    /**
     * <pre>
     * If any main thread animation is active during this frame.
     * </pre>
     *
     * <code>optional bool has_main_animation = 7;</code>
     * @return The hasMainAnimation.
     */
    @java.lang.Override
    public boolean getHasMainAnimation() {
      return hasMainAnimation_;
    }

    public static final int HAS_COMPOSITOR_ANIMATION_FIELD_NUMBER = 8;
    private boolean hasCompositorAnimation_ = false;
    /**
     * <pre>
     * If any compositor thread animation is active during this frame.
     * </pre>
     *
     * <code>optional bool has_compositor_animation = 8;</code>
     * @return Whether the hasCompositorAnimation field is set.
     */
    @java.lang.Override
    public boolean hasHasCompositorAnimation() {
      return ((bitField0_ & 0x00000080) != 0);
    }
    /**
     * <pre>
     * If any compositor thread animation is active during this frame.
     * </pre>
     *
     * <code>optional bool has_compositor_animation = 8;</code>
     * @return The hasCompositorAnimation.
     */
    @java.lang.Override
    public boolean getHasCompositorAnimation() {
      return hasCompositorAnimation_;
    }

    public static final int HAS_SMOOTH_INPUT_MAIN_FIELD_NUMBER = 9;
    private boolean hasSmoothInputMain_ = false;
    /**
     * <pre>
     * If any touch-driven UX (not scroll) is active during this frame.
     * </pre>
     *
     * <code>optional bool has_smooth_input_main = 9;</code>
     * @return Whether the hasSmoothInputMain field is set.
     */
    @java.lang.Override
    public boolean hasHasSmoothInputMain() {
      return ((bitField0_ & 0x00000100) != 0);
    }
    /**
     * <pre>
     * If any touch-driven UX (not scroll) is active during this frame.
     * </pre>
     *
     * <code>optional bool has_smooth_input_main = 9;</code>
     * @return The hasSmoothInputMain.
     */
    @java.lang.Override
    public boolean getHasSmoothInputMain() {
      return hasSmoothInputMain_;
    }

    public static final int HAS_MISSING_CONTENT_FIELD_NUMBER = 10;
    private boolean hasMissingContent_ = false;
    /**
     * <pre>
     * Whether the frame contained any missing content (i.e. whether there was
     * checkerboarding in the frame).
     * </pre>
     *
     * <code>optional bool has_missing_content = 10;</code>
     * @return Whether the hasMissingContent field is set.
     */
    @java.lang.Override
    public boolean hasHasMissingContent() {
      return ((bitField0_ & 0x00000200) != 0);
    }
    /**
     * <pre>
     * Whether the frame contained any missing content (i.e. whether there was
     * checkerboarding in the frame).
     * </pre>
     *
     * <code>optional bool has_missing_content = 10;</code>
     * @return The hasMissingContent.
     */
    @java.lang.Override
    public boolean getHasMissingContent() {
      return hasMissingContent_;
    }

    public static final int LAYER_TREE_HOST_ID_FIELD_NUMBER = 11;
    private long layerTreeHostId_ = 0L;
    /**
     * <pre>
     * The id of layer_tree_host that the frame has been produced for.
     * </pre>
     *
     * <code>optional uint64 layer_tree_host_id = 11;</code>
     * @return Whether the layerTreeHostId field is set.
     */
    @java.lang.Override
    public boolean hasLayerTreeHostId() {
      return ((bitField0_ & 0x00000400) != 0);
    }
    /**
     * <pre>
     * The id of layer_tree_host that the frame has been produced for.
     * </pre>
     *
     * <code>optional uint64 layer_tree_host_id = 11;</code>
     * @return The layerTreeHostId.
     */
    @java.lang.Override
    public long getLayerTreeHostId() {
      return layerTreeHostId_;
    }

    public static final int HAS_HIGH_LATENCY_FIELD_NUMBER = 12;
    private boolean hasHighLatency_ = false;
    /**
     * <pre>
     * If total latency of PipelineReporter exceeds a certain limit.
     * </pre>
     *
     * <code>optional bool has_high_latency = 12;</code>
     * @return Whether the hasHighLatency field is set.
     */
    @java.lang.Override
    public boolean hasHasHighLatency() {
      return ((bitField0_ & 0x00000800) != 0);
    }
    /**
     * <pre>
     * If total latency of PipelineReporter exceeds a certain limit.
     * </pre>
     *
     * <code>optional bool has_high_latency = 12;</code>
     * @return The hasHighLatency.
     */
    @java.lang.Override
    public boolean getHasHighLatency() {
      return hasHighLatency_;
    }

    public static final int FRAME_TYPE_FIELD_NUMBER = 13;
    private int frameType_ = 0;
    /**
     * <pre>
     * Indicate if the frame is "FORKED" (i.e. a PipelineReporter event starts at
     * the same frame sequence as another PipelineReporter) or "BACKFILL"
     * (i.e. dropped frames when there are no partial compositor updates).
     * </pre>
     *
     * <code>optional .perfetto.protos.ChromeFrameReporter.FrameType frame_type = 13;</code>
     * @return Whether the frameType field is set.
     */
    @java.lang.Override public boolean hasFrameType() {
      return ((bitField0_ & 0x00001000) != 0);
    }
    /**
     * <pre>
     * Indicate if the frame is "FORKED" (i.e. a PipelineReporter event starts at
     * the same frame sequence as another PipelineReporter) or "BACKFILL"
     * (i.e. dropped frames when there are no partial compositor updates).
     * </pre>
     *
     * <code>optional .perfetto.protos.ChromeFrameReporter.FrameType frame_type = 13;</code>
     * @return The frameType.
     */
    @java.lang.Override public perfetto.protos.ChromeFrameReporterOuterClass.ChromeFrameReporter.FrameType getFrameType() {
      perfetto.protos.ChromeFrameReporterOuterClass.ChromeFrameReporter.FrameType result = perfetto.protos.ChromeFrameReporterOuterClass.ChromeFrameReporter.FrameType.forNumber(frameType_);
      return result == null ? perfetto.protos.ChromeFrameReporterOuterClass.ChromeFrameReporter.FrameType.FORKED : result;
    }

    public static final int HIGH_LATENCY_CONTRIBUTION_STAGE_FIELD_NUMBER = 14;
    @SuppressWarnings("serial")
    private com.google.protobuf.LazyStringList highLatencyContributionStage_;
    /**
     * <pre>
     * The breakdown stage of PipelineReporter that is most likely accountable for
     * high latency.
     * </pre>
     *
     * <code>repeated string high_latency_contribution_stage = 14;</code>
     * @return A list containing the highLatencyContributionStage.
     */
    public com.google.protobuf.ProtocolStringList
        getHighLatencyContributionStageList() {
      return highLatencyContributionStage_;
    }
    /**
     * <pre>
     * The breakdown stage of PipelineReporter that is most likely accountable for
     * high latency.
     * </pre>
     *
     * <code>repeated string high_latency_contribution_stage = 14;</code>
     * @return The count of highLatencyContributionStage.
     */
    public int getHighLatencyContributionStageCount() {
      return highLatencyContributionStage_.size();
    }
    /**
     * <pre>
     * The breakdown stage of PipelineReporter that is most likely accountable for
     * high latency.
     * </pre>
     *
     * <code>repeated string high_latency_contribution_stage = 14;</code>
     * @param index The index of the element to return.
     * @return The highLatencyContributionStage at the given index.
     */
    public java.lang.String getHighLatencyContributionStage(int index) {
      return highLatencyContributionStage_.get(index);
    }
    /**
     * <pre>
     * The breakdown stage of PipelineReporter that is most likely accountable for
     * high latency.
     * </pre>
     *
     * <code>repeated string high_latency_contribution_stage = 14;</code>
     * @param index The index of the value to return.
     * @return The bytes of the highLatencyContributionStage at the given index.
     */
    public com.google.protobuf.ByteString
        getHighLatencyContributionStageBytes(int index) {
      return highLatencyContributionStage_.getByteString(index);
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (((bitField0_ & 0x00000001) != 0)) {
        output.writeEnum(1, state_);
      }
      if (((bitField0_ & 0x00000002) != 0)) {
        output.writeEnum(2, reason_);
      }
      if (((bitField0_ & 0x00000004) != 0)) {
        output.writeUInt64(3, frameSource_);
      }
      if (((bitField0_ & 0x00000008) != 0)) {
        output.writeUInt64(4, frameSequence_);
      }
      if (((bitField0_ & 0x00000010) != 0)) {
        output.writeBool(5, affectsSmoothness_);
      }
      if (((bitField0_ & 0x00000020) != 0)) {
        output.writeEnum(6, scrollState_);
      }
      if (((bitField0_ & 0x00000040) != 0)) {
        output.writeBool(7, hasMainAnimation_);
      }
      if (((bitField0_ & 0x00000080) != 0)) {
        output.writeBool(8, hasCompositorAnimation_);
      }
      if (((bitField0_ & 0x00000100) != 0)) {
        output.writeBool(9, hasSmoothInputMain_);
      }
      if (((bitField0_ & 0x00000200) != 0)) {
        output.writeBool(10, hasMissingContent_);
      }
      if (((bitField0_ & 0x00000400) != 0)) {
        output.writeUInt64(11, layerTreeHostId_);
      }
      if (((bitField0_ & 0x00000800) != 0)) {
        output.writeBool(12, hasHighLatency_);
      }
      if (((bitField0_ & 0x00001000) != 0)) {
        output.writeEnum(13, frameType_);
      }
      for (int i = 0; i < highLatencyContributionStage_.size(); i++) {
        com.google.protobuf.GeneratedMessageV3.writeString(output, 14, highLatencyContributionStage_.getRaw(i));
      }
      getUnknownFields().writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) != 0)) {
        size += com.google.protobuf.CodedOutputStream
          .computeEnumSize(1, state_);
      }
      if (((bitField0_ & 0x00000002) != 0)) {
        size += com.google.protobuf.CodedOutputStream
          .computeEnumSize(2, reason_);
      }
      if (((bitField0_ & 0x00000004) != 0)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt64Size(3, frameSource_);
      }
      if (((bitField0_ & 0x00000008) != 0)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt64Size(4, frameSequence_);
      }
      if (((bitField0_ & 0x00000010) != 0)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(5, affectsSmoothness_);
      }
      if (((bitField0_ & 0x00000020) != 0)) {
        size += com.google.protobuf.CodedOutputStream
          .computeEnumSize(6, scrollState_);
      }
      if (((bitField0_ & 0x00000040) != 0)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(7, hasMainAnimation_);
      }
      if (((bitField0_ & 0x00000080) != 0)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(8, hasCompositorAnimation_);
      }
      if (((bitField0_ & 0x00000100) != 0)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(9, hasSmoothInputMain_);
      }
      if (((bitField0_ & 0x00000200) != 0)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(10, hasMissingContent_);
      }
      if (((bitField0_ & 0x00000400) != 0)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt64Size(11, layerTreeHostId_);
      }
      if (((bitField0_ & 0x00000800) != 0)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(12, hasHighLatency_);
      }
      if (((bitField0_ & 0x00001000) != 0)) {
        size += com.google.protobuf.CodedOutputStream
          .computeEnumSize(13, frameType_);
      }
      {
        int dataSize = 0;
        for (int i = 0; i < highLatencyContributionStage_.size(); i++) {
          dataSize += computeStringSizeNoTag(highLatencyContributionStage_.getRaw(i));
        }
        size += dataSize;
        size += 1 * getHighLatencyContributionStageList().size();
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof perfetto.protos.ChromeFrameReporterOuterClass.ChromeFrameReporter)) {
        return super.equals(obj);
      }
      perfetto.protos.ChromeFrameReporterOuterClass.ChromeFrameReporter other = (perfetto.protos.ChromeFrameReporterOuterClass.ChromeFrameReporter) obj;

      if (hasState() != other.hasState()) return false;
      if (hasState()) {
        if (state_ != other.state_) return false;
      }
      if (hasReason() != other.hasReason()) return false;
      if (hasReason()) {
        if (reason_ != other.reason_) return false;
      }
      if (hasFrameSource() != other.hasFrameSource()) return false;
      if (hasFrameSource()) {
        if (getFrameSource()
            != other.getFrameSource()) return false;
      }
      if (hasFrameSequence() != other.hasFrameSequence()) return false;
      if (hasFrameSequence()) {
        if (getFrameSequence()
            != other.getFrameSequence()) return false;
      }
      if (hasAffectsSmoothness() != other.hasAffectsSmoothness()) return false;
      if (hasAffectsSmoothness()) {
        if (getAffectsSmoothness()
            != other.getAffectsSmoothness()) return false;
      }
      if (hasScrollState() != other.hasScrollState()) return false;
      if (hasScrollState()) {
        if (scrollState_ != other.scrollState_) return false;
      }
      if (hasHasMainAnimation() != other.hasHasMainAnimation()) return false;
      if (hasHasMainAnimation()) {
        if (getHasMainAnimation()
            != other.getHasMainAnimation()) return false;
      }
      if (hasHasCompositorAnimation() != other.hasHasCompositorAnimation()) return false;
      if (hasHasCompositorAnimation()) {
        if (getHasCompositorAnimation()
            != other.getHasCompositorAnimation()) return false;
      }
      if (hasHasSmoothInputMain() != other.hasHasSmoothInputMain()) return false;
      if (hasHasSmoothInputMain()) {
        if (getHasSmoothInputMain()
            != other.getHasSmoothInputMain()) return false;
      }
      if (hasHasMissingContent() != other.hasHasMissingContent()) return false;
      if (hasHasMissingContent()) {
        if (getHasMissingContent()
            != other.getHasMissingContent()) return false;
      }
      if (hasLayerTreeHostId() != other.hasLayerTreeHostId()) return false;
      if (hasLayerTreeHostId()) {
        if (getLayerTreeHostId()
            != other.getLayerTreeHostId()) return false;
      }
      if (hasHasHighLatency() != other.hasHasHighLatency()) return false;
      if (hasHasHighLatency()) {
        if (getHasHighLatency()
            != other.getHasHighLatency()) return false;
      }
      if (hasFrameType() != other.hasFrameType()) return false;
      if (hasFrameType()) {
        if (frameType_ != other.frameType_) return false;
      }
      if (!getHighLatencyContributionStageList()
          .equals(other.getHighLatencyContributionStageList())) return false;
      if (!getUnknownFields().equals(other.getUnknownFields())) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      if (hasState()) {
        hash = (37 * hash) + STATE_FIELD_NUMBER;
        hash = (53 * hash) + state_;
      }
      if (hasReason()) {
        hash = (37 * hash) + REASON_FIELD_NUMBER;
        hash = (53 * hash) + reason_;
      }
      if (hasFrameSource()) {
        hash = (37 * hash) + FRAME_SOURCE_FIELD_NUMBER;
        hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
            getFrameSource());
      }
      if (hasFrameSequence()) {
        hash = (37 * hash) + FRAME_SEQUENCE_FIELD_NUMBER;
        hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
            getFrameSequence());
      }
      if (hasAffectsSmoothness()) {
        hash = (37 * hash) + AFFECTS_SMOOTHNESS_FIELD_NUMBER;
        hash = (53 * hash) + com.google.protobuf.Internal.hashBoolean(
            getAffectsSmoothness());
      }
      if (hasScrollState()) {
        hash = (37 * hash) + SCROLL_STATE_FIELD_NUMBER;
        hash = (53 * hash) + scrollState_;
      }
      if (hasHasMainAnimation()) {
        hash = (37 * hash) + HAS_MAIN_ANIMATION_FIELD_NUMBER;
        hash = (53 * hash) + com.google.protobuf.Internal.hashBoolean(
            getHasMainAnimation());
      }
      if (hasHasCompositorAnimation()) {
        hash = (37 * hash) + HAS_COMPOSITOR_ANIMATION_FIELD_NUMBER;
        hash = (53 * hash) + com.google.protobuf.Internal.hashBoolean(
            getHasCompositorAnimation());
      }
      if (hasHasSmoothInputMain()) {
        hash = (37 * hash) + HAS_SMOOTH_INPUT_MAIN_FIELD_NUMBER;
        hash = (53 * hash) + com.google.protobuf.Internal.hashBoolean(
            getHasSmoothInputMain());
      }
      if (hasHasMissingContent()) {
        hash = (37 * hash) + HAS_MISSING_CONTENT_FIELD_NUMBER;
        hash = (53 * hash) + com.google.protobuf.Internal.hashBoolean(
            getHasMissingContent());
      }
      if (hasLayerTreeHostId()) {
        hash = (37 * hash) + LAYER_TREE_HOST_ID_FIELD_NUMBER;
        hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
            getLayerTreeHostId());
      }
      if (hasHasHighLatency()) {
        hash = (37 * hash) + HAS_HIGH_LATENCY_FIELD_NUMBER;
        hash = (53 * hash) + com.google.protobuf.Internal.hashBoolean(
            getHasHighLatency());
      }
      if (hasFrameType()) {
        hash = (37 * hash) + FRAME_TYPE_FIELD_NUMBER;
        hash = (53 * hash) + frameType_;
      }
      if (getHighLatencyContributionStageCount() > 0) {
        hash = (37 * hash) + HIGH_LATENCY_CONTRIBUTION_STAGE_FIELD_NUMBER;
        hash = (53 * hash) + getHighLatencyContributionStageList().hashCode();
      }
      hash = (29 * hash) + getUnknownFields().hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static perfetto.protos.ChromeFrameReporterOuterClass.ChromeFrameReporter parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static perfetto.protos.ChromeFrameReporterOuterClass.ChromeFrameReporter parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static perfetto.protos.ChromeFrameReporterOuterClass.ChromeFrameReporter parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static perfetto.protos.ChromeFrameReporterOuterClass.ChromeFrameReporter parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static perfetto.protos.ChromeFrameReporterOuterClass.ChromeFrameReporter parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static perfetto.protos.ChromeFrameReporterOuterClass.ChromeFrameReporter parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static perfetto.protos.ChromeFrameReporterOuterClass.ChromeFrameReporter parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static perfetto.protos.ChromeFrameReporterOuterClass.ChromeFrameReporter parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static perfetto.protos.ChromeFrameReporterOuterClass.ChromeFrameReporter parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static perfetto.protos.ChromeFrameReporterOuterClass.ChromeFrameReporter parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static perfetto.protos.ChromeFrameReporterOuterClass.ChromeFrameReporter parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static perfetto.protos.ChromeFrameReporterOuterClass.ChromeFrameReporter parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(perfetto.protos.ChromeFrameReporterOuterClass.ChromeFrameReporter prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code perfetto.protos.ChromeFrameReporter}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:perfetto.protos.ChromeFrameReporter)
        perfetto.protos.ChromeFrameReporterOuterClass.ChromeFrameReporterOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return perfetto.protos.ChromeFrameReporterOuterClass.internal_static_perfetto_protos_ChromeFrameReporter_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return perfetto.protos.ChromeFrameReporterOuterClass.internal_static_perfetto_protos_ChromeFrameReporter_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                perfetto.protos.ChromeFrameReporterOuterClass.ChromeFrameReporter.class, perfetto.protos.ChromeFrameReporterOuterClass.ChromeFrameReporter.Builder.class);
      }

      // Construct using perfetto.protos.ChromeFrameReporterOuterClass.ChromeFrameReporter.newBuilder()
      private Builder() {

      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);

      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        bitField0_ = 0;
        state_ = 0;
        reason_ = 0;
        frameSource_ = 0L;
        frameSequence_ = 0L;
        affectsSmoothness_ = false;
        scrollState_ = 0;
        hasMainAnimation_ = false;
        hasCompositorAnimation_ = false;
        hasSmoothInputMain_ = false;
        hasMissingContent_ = false;
        layerTreeHostId_ = 0L;
        hasHighLatency_ = false;
        frameType_ = 0;
        highLatencyContributionStage_ = com.google.protobuf.LazyStringArrayList.EMPTY;
        bitField0_ = (bitField0_ & ~0x00002000);
        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return perfetto.protos.ChromeFrameReporterOuterClass.internal_static_perfetto_protos_ChromeFrameReporter_descriptor;
      }

      @java.lang.Override
      public perfetto.protos.ChromeFrameReporterOuterClass.ChromeFrameReporter getDefaultInstanceForType() {
        return perfetto.protos.ChromeFrameReporterOuterClass.ChromeFrameReporter.getDefaultInstance();
      }

      @java.lang.Override
      public perfetto.protos.ChromeFrameReporterOuterClass.ChromeFrameReporter build() {
        perfetto.protos.ChromeFrameReporterOuterClass.ChromeFrameReporter result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public perfetto.protos.ChromeFrameReporterOuterClass.ChromeFrameReporter buildPartial() {
        perfetto.protos.ChromeFrameReporterOuterClass.ChromeFrameReporter result = new perfetto.protos.ChromeFrameReporterOuterClass.ChromeFrameReporter(this);
        buildPartialRepeatedFields(result);
        if (bitField0_ != 0) { buildPartial0(result); }
        onBuilt();
        return result;
      }

      private void buildPartialRepeatedFields(perfetto.protos.ChromeFrameReporterOuterClass.ChromeFrameReporter result) {
        if (((bitField0_ & 0x00002000) != 0)) {
          highLatencyContributionStage_ = highLatencyContributionStage_.getUnmodifiableView();
          bitField0_ = (bitField0_ & ~0x00002000);
        }
        result.highLatencyContributionStage_ = highLatencyContributionStage_;
      }

      private void buildPartial0(perfetto.protos.ChromeFrameReporterOuterClass.ChromeFrameReporter result) {
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) != 0)) {
          result.state_ = state_;
          to_bitField0_ |= 0x00000001;
        }
        if (((from_bitField0_ & 0x00000002) != 0)) {
          result.reason_ = reason_;
          to_bitField0_ |= 0x00000002;
        }
        if (((from_bitField0_ & 0x00000004) != 0)) {
          result.frameSource_ = frameSource_;
          to_bitField0_ |= 0x00000004;
        }
        if (((from_bitField0_ & 0x00000008) != 0)) {
          result.frameSequence_ = frameSequence_;
          to_bitField0_ |= 0x00000008;
        }
        if (((from_bitField0_ & 0x00000010) != 0)) {
          result.affectsSmoothness_ = affectsSmoothness_;
          to_bitField0_ |= 0x00000010;
        }
        if (((from_bitField0_ & 0x00000020) != 0)) {
          result.scrollState_ = scrollState_;
          to_bitField0_ |= 0x00000020;
        }
        if (((from_bitField0_ & 0x00000040) != 0)) {
          result.hasMainAnimation_ = hasMainAnimation_;
          to_bitField0_ |= 0x00000040;
        }
        if (((from_bitField0_ & 0x00000080) != 0)) {
          result.hasCompositorAnimation_ = hasCompositorAnimation_;
          to_bitField0_ |= 0x00000080;
        }
        if (((from_bitField0_ & 0x00000100) != 0)) {
          result.hasSmoothInputMain_ = hasSmoothInputMain_;
          to_bitField0_ |= 0x00000100;
        }
        if (((from_bitField0_ & 0x00000200) != 0)) {
          result.hasMissingContent_ = hasMissingContent_;
          to_bitField0_ |= 0x00000200;
        }
        if (((from_bitField0_ & 0x00000400) != 0)) {
          result.layerTreeHostId_ = layerTreeHostId_;
          to_bitField0_ |= 0x00000400;
        }
        if (((from_bitField0_ & 0x00000800) != 0)) {
          result.hasHighLatency_ = hasHighLatency_;
          to_bitField0_ |= 0x00000800;
        }
        if (((from_bitField0_ & 0x00001000) != 0)) {
          result.frameType_ = frameType_;
          to_bitField0_ |= 0x00001000;
        }
        result.bitField0_ |= to_bitField0_;
      }

      @java.lang.Override
      public Builder clone() {
        return super.clone();
      }
      @java.lang.Override
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.setField(field, value);
      }
      @java.lang.Override
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return super.clearField(field);
      }
      @java.lang.Override
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return super.clearOneof(oneof);
      }
      @java.lang.Override
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, java.lang.Object value) {
        return super.setRepeatedField(field, index, value);
      }
      @java.lang.Override
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.addRepeatedField(field, value);
      }
      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof perfetto.protos.ChromeFrameReporterOuterClass.ChromeFrameReporter) {
          return mergeFrom((perfetto.protos.ChromeFrameReporterOuterClass.ChromeFrameReporter)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(perfetto.protos.ChromeFrameReporterOuterClass.ChromeFrameReporter other) {
        if (other == perfetto.protos.ChromeFrameReporterOuterClass.ChromeFrameReporter.getDefaultInstance()) return this;
        if (other.hasState()) {
          setState(other.getState());
        }
        if (other.hasReason()) {
          setReason(other.getReason());
        }
        if (other.hasFrameSource()) {
          setFrameSource(other.getFrameSource());
        }
        if (other.hasFrameSequence()) {
          setFrameSequence(other.getFrameSequence());
        }
        if (other.hasAffectsSmoothness()) {
          setAffectsSmoothness(other.getAffectsSmoothness());
        }
        if (other.hasScrollState()) {
          setScrollState(other.getScrollState());
        }
        if (other.hasHasMainAnimation()) {
          setHasMainAnimation(other.getHasMainAnimation());
        }
        if (other.hasHasCompositorAnimation()) {
          setHasCompositorAnimation(other.getHasCompositorAnimation());
        }
        if (other.hasHasSmoothInputMain()) {
          setHasSmoothInputMain(other.getHasSmoothInputMain());
        }
        if (other.hasHasMissingContent()) {
          setHasMissingContent(other.getHasMissingContent());
        }
        if (other.hasLayerTreeHostId()) {
          setLayerTreeHostId(other.getLayerTreeHostId());
        }
        if (other.hasHasHighLatency()) {
          setHasHighLatency(other.getHasHighLatency());
        }
        if (other.hasFrameType()) {
          setFrameType(other.getFrameType());
        }
        if (!other.highLatencyContributionStage_.isEmpty()) {
          if (highLatencyContributionStage_.isEmpty()) {
            highLatencyContributionStage_ = other.highLatencyContributionStage_;
            bitField0_ = (bitField0_ & ~0x00002000);
          } else {
            ensureHighLatencyContributionStageIsMutable();
            highLatencyContributionStage_.addAll(other.highLatencyContributionStage_);
          }
          onChanged();
        }
        this.mergeUnknownFields(other.getUnknownFields());
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        if (extensionRegistry == null) {
          throw new java.lang.NullPointerException();
        }
        try {
          boolean done = false;
          while (!done) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                done = true;
                break;
              case 8: {
                int tmpRaw = input.readEnum();
                perfetto.protos.ChromeFrameReporterOuterClass.ChromeFrameReporter.State tmpValue =
                    perfetto.protos.ChromeFrameReporterOuterClass.ChromeFrameReporter.State.forNumber(tmpRaw);
                if (tmpValue == null) {
                  mergeUnknownVarintField(1, tmpRaw);
                } else {
                  state_ = tmpRaw;
                  bitField0_ |= 0x00000001;
                }
                break;
              } // case 8
              case 16: {
                int tmpRaw = input.readEnum();
                perfetto.protos.ChromeFrameReporterOuterClass.ChromeFrameReporter.FrameDropReason tmpValue =
                    perfetto.protos.ChromeFrameReporterOuterClass.ChromeFrameReporter.FrameDropReason.forNumber(tmpRaw);
                if (tmpValue == null) {
                  mergeUnknownVarintField(2, tmpRaw);
                } else {
                  reason_ = tmpRaw;
                  bitField0_ |= 0x00000002;
                }
                break;
              } // case 16
              case 24: {
                frameSource_ = input.readUInt64();
                bitField0_ |= 0x00000004;
                break;
              } // case 24
              case 32: {
                frameSequence_ = input.readUInt64();
                bitField0_ |= 0x00000008;
                break;
              } // case 32
              case 40: {
                affectsSmoothness_ = input.readBool();
                bitField0_ |= 0x00000010;
                break;
              } // case 40
              case 48: {
                int tmpRaw = input.readEnum();
                perfetto.protos.ChromeFrameReporterOuterClass.ChromeFrameReporter.ScrollState tmpValue =
                    perfetto.protos.ChromeFrameReporterOuterClass.ChromeFrameReporter.ScrollState.forNumber(tmpRaw);
                if (tmpValue == null) {
                  mergeUnknownVarintField(6, tmpRaw);
                } else {
                  scrollState_ = tmpRaw;
                  bitField0_ |= 0x00000020;
                }
                break;
              } // case 48
              case 56: {
                hasMainAnimation_ = input.readBool();
                bitField0_ |= 0x00000040;
                break;
              } // case 56
              case 64: {
                hasCompositorAnimation_ = input.readBool();
                bitField0_ |= 0x00000080;
                break;
              } // case 64
              case 72: {
                hasSmoothInputMain_ = input.readBool();
                bitField0_ |= 0x00000100;
                break;
              } // case 72
              case 80: {
                hasMissingContent_ = input.readBool();
                bitField0_ |= 0x00000200;
                break;
              } // case 80
              case 88: {
                layerTreeHostId_ = input.readUInt64();
                bitField0_ |= 0x00000400;
                break;
              } // case 88
              case 96: {
                hasHighLatency_ = input.readBool();
                bitField0_ |= 0x00000800;
                break;
              } // case 96
              case 104: {
                int tmpRaw = input.readEnum();
                perfetto.protos.ChromeFrameReporterOuterClass.ChromeFrameReporter.FrameType tmpValue =
                    perfetto.protos.ChromeFrameReporterOuterClass.ChromeFrameReporter.FrameType.forNumber(tmpRaw);
                if (tmpValue == null) {
                  mergeUnknownVarintField(13, tmpRaw);
                } else {
                  frameType_ = tmpRaw;
                  bitField0_ |= 0x00001000;
                }
                break;
              } // case 104
              case 114: {
                com.google.protobuf.ByteString bs = input.readBytes();
                ensureHighLatencyContributionStageIsMutable();
                highLatencyContributionStage_.add(bs);
                break;
              } // case 114
              default: {
                if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                  done = true; // was an endgroup tag
                }
                break;
              } // default:
            } // switch (tag)
          } // while (!done)
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.unwrapIOException();
        } finally {
          onChanged();
        } // finally
        return this;
      }
      private int bitField0_;

      private int state_ = 0;
      /**
       * <code>optional .perfetto.protos.ChromeFrameReporter.State state = 1;</code>
       * @return Whether the state field is set.
       */
      @java.lang.Override public boolean hasState() {
        return ((bitField0_ & 0x00000001) != 0);
      }
      /**
       * <code>optional .perfetto.protos.ChromeFrameReporter.State state = 1;</code>
       * @return The state.
       */
      @java.lang.Override
      public perfetto.protos.ChromeFrameReporterOuterClass.ChromeFrameReporter.State getState() {
        perfetto.protos.ChromeFrameReporterOuterClass.ChromeFrameReporter.State result = perfetto.protos.ChromeFrameReporterOuterClass.ChromeFrameReporter.State.forNumber(state_);
        return result == null ? perfetto.protos.ChromeFrameReporterOuterClass.ChromeFrameReporter.State.STATE_NO_UPDATE_DESIRED : result;
      }
      /**
       * <code>optional .perfetto.protos.ChromeFrameReporter.State state = 1;</code>
       * @param value The state to set.
       * @return This builder for chaining.
       */
      public Builder setState(perfetto.protos.ChromeFrameReporterOuterClass.ChromeFrameReporter.State value) {
        if (value == null) {
          throw new NullPointerException();
        }
        bitField0_ |= 0x00000001;
        state_ = value.getNumber();
        onChanged();
        return this;
      }
      /**
       * <code>optional .perfetto.protos.ChromeFrameReporter.State state = 1;</code>
       * @return This builder for chaining.
       */
      public Builder clearState() {
        bitField0_ = (bitField0_ & ~0x00000001);
        state_ = 0;
        onChanged();
        return this;
      }

      private int reason_ = 0;
      /**
       * <pre>
       * The reason is set only if |state| is not |STATE_UPDATED_ALL|.
       * </pre>
       *
       * <code>optional .perfetto.protos.ChromeFrameReporter.FrameDropReason reason = 2;</code>
       * @return Whether the reason field is set.
       */
      @java.lang.Override public boolean hasReason() {
        return ((bitField0_ & 0x00000002) != 0);
      }
      /**
       * <pre>
       * The reason is set only if |state| is not |STATE_UPDATED_ALL|.
       * </pre>
       *
       * <code>optional .perfetto.protos.ChromeFrameReporter.FrameDropReason reason = 2;</code>
       * @return The reason.
       */
      @java.lang.Override
      public perfetto.protos.ChromeFrameReporterOuterClass.ChromeFrameReporter.FrameDropReason getReason() {
        perfetto.protos.ChromeFrameReporterOuterClass.ChromeFrameReporter.FrameDropReason result = perfetto.protos.ChromeFrameReporterOuterClass.ChromeFrameReporter.FrameDropReason.forNumber(reason_);
        return result == null ? perfetto.protos.ChromeFrameReporterOuterClass.ChromeFrameReporter.FrameDropReason.REASON_UNSPECIFIED : result;
      }
      /**
       * <pre>
       * The reason is set only if |state| is not |STATE_UPDATED_ALL|.
       * </pre>
       *
       * <code>optional .perfetto.protos.ChromeFrameReporter.FrameDropReason reason = 2;</code>
       * @param value The reason to set.
       * @return This builder for chaining.
       */
      public Builder setReason(perfetto.protos.ChromeFrameReporterOuterClass.ChromeFrameReporter.FrameDropReason value) {
        if (value == null) {
          throw new NullPointerException();
        }
        bitField0_ |= 0x00000002;
        reason_ = value.getNumber();
        onChanged();
        return this;
      }
      /**
       * <pre>
       * The reason is set only if |state| is not |STATE_UPDATED_ALL|.
       * </pre>
       *
       * <code>optional .perfetto.protos.ChromeFrameReporter.FrameDropReason reason = 2;</code>
       * @return This builder for chaining.
       */
      public Builder clearReason() {
        bitField0_ = (bitField0_ & ~0x00000002);
        reason_ = 0;
        onChanged();
        return this;
      }

      private long frameSource_ ;
      /**
       * <code>optional uint64 frame_source = 3;</code>
       * @return Whether the frameSource field is set.
       */
      @java.lang.Override
      public boolean hasFrameSource() {
        return ((bitField0_ & 0x00000004) != 0);
      }
      /**
       * <code>optional uint64 frame_source = 3;</code>
       * @return The frameSource.
       */
      @java.lang.Override
      public long getFrameSource() {
        return frameSource_;
      }
      /**
       * <code>optional uint64 frame_source = 3;</code>
       * @param value The frameSource to set.
       * @return This builder for chaining.
       */
      public Builder setFrameSource(long value) {
        
        frameSource_ = value;
        bitField0_ |= 0x00000004;
        onChanged();
        return this;
      }
      /**
       * <code>optional uint64 frame_source = 3;</code>
       * @return This builder for chaining.
       */
      public Builder clearFrameSource() {
        bitField0_ = (bitField0_ & ~0x00000004);
        frameSource_ = 0L;
        onChanged();
        return this;
      }

      private long frameSequence_ ;
      /**
       * <code>optional uint64 frame_sequence = 4;</code>
       * @return Whether the frameSequence field is set.
       */
      @java.lang.Override
      public boolean hasFrameSequence() {
        return ((bitField0_ & 0x00000008) != 0);
      }
      /**
       * <code>optional uint64 frame_sequence = 4;</code>
       * @return The frameSequence.
       */
      @java.lang.Override
      public long getFrameSequence() {
        return frameSequence_;
      }
      /**
       * <code>optional uint64 frame_sequence = 4;</code>
       * @param value The frameSequence to set.
       * @return This builder for chaining.
       */
      public Builder setFrameSequence(long value) {
        
        frameSequence_ = value;
        bitField0_ |= 0x00000008;
        onChanged();
        return this;
      }
      /**
       * <code>optional uint64 frame_sequence = 4;</code>
       * @return This builder for chaining.
       */
      public Builder clearFrameSequence() {
        bitField0_ = (bitField0_ & ~0x00000008);
        frameSequence_ = 0L;
        onChanged();
        return this;
      }

      private boolean affectsSmoothness_ ;
      /**
       * <pre>
       * If this is a droped frame (i.e. if |state| is set to |STATE_DROPPED| or
       * |STATE_PRESENTED_PARTIAL|), then indicates whether this frame impacts
       * smoothness.
       * </pre>
       *
       * <code>optional bool affects_smoothness = 5;</code>
       * @return Whether the affectsSmoothness field is set.
       */
      @java.lang.Override
      public boolean hasAffectsSmoothness() {
        return ((bitField0_ & 0x00000010) != 0);
      }
      /**
       * <pre>
       * If this is a droped frame (i.e. if |state| is set to |STATE_DROPPED| or
       * |STATE_PRESENTED_PARTIAL|), then indicates whether this frame impacts
       * smoothness.
       * </pre>
       *
       * <code>optional bool affects_smoothness = 5;</code>
       * @return The affectsSmoothness.
       */
      @java.lang.Override
      public boolean getAffectsSmoothness() {
        return affectsSmoothness_;
      }
      /**
       * <pre>
       * If this is a droped frame (i.e. if |state| is set to |STATE_DROPPED| or
       * |STATE_PRESENTED_PARTIAL|), then indicates whether this frame impacts
       * smoothness.
       * </pre>
       *
       * <code>optional bool affects_smoothness = 5;</code>
       * @param value The affectsSmoothness to set.
       * @return This builder for chaining.
       */
      public Builder setAffectsSmoothness(boolean value) {
        
        affectsSmoothness_ = value;
        bitField0_ |= 0x00000010;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * If this is a droped frame (i.e. if |state| is set to |STATE_DROPPED| or
       * |STATE_PRESENTED_PARTIAL|), then indicates whether this frame impacts
       * smoothness.
       * </pre>
       *
       * <code>optional bool affects_smoothness = 5;</code>
       * @return This builder for chaining.
       */
      public Builder clearAffectsSmoothness() {
        bitField0_ = (bitField0_ & ~0x00000010);
        affectsSmoothness_ = false;
        onChanged();
        return this;
      }

      private int scrollState_ = 0;
      /**
       * <pre>
       * The type of active scroll.
       * </pre>
       *
       * <code>optional .perfetto.protos.ChromeFrameReporter.ScrollState scroll_state = 6;</code>
       * @return Whether the scrollState field is set.
       */
      @java.lang.Override public boolean hasScrollState() {
        return ((bitField0_ & 0x00000020) != 0);
      }
      /**
       * <pre>
       * The type of active scroll.
       * </pre>
       *
       * <code>optional .perfetto.protos.ChromeFrameReporter.ScrollState scroll_state = 6;</code>
       * @return The scrollState.
       */
      @java.lang.Override
      public perfetto.protos.ChromeFrameReporterOuterClass.ChromeFrameReporter.ScrollState getScrollState() {
        perfetto.protos.ChromeFrameReporterOuterClass.ChromeFrameReporter.ScrollState result = perfetto.protos.ChromeFrameReporterOuterClass.ChromeFrameReporter.ScrollState.forNumber(scrollState_);
        return result == null ? perfetto.protos.ChromeFrameReporterOuterClass.ChromeFrameReporter.ScrollState.SCROLL_NONE : result;
      }
      /**
       * <pre>
       * The type of active scroll.
       * </pre>
       *
       * <code>optional .perfetto.protos.ChromeFrameReporter.ScrollState scroll_state = 6;</code>
       * @param value The scrollState to set.
       * @return This builder for chaining.
       */
      public Builder setScrollState(perfetto.protos.ChromeFrameReporterOuterClass.ChromeFrameReporter.ScrollState value) {
        if (value == null) {
          throw new NullPointerException();
        }
        bitField0_ |= 0x00000020;
        scrollState_ = value.getNumber();
        onChanged();
        return this;
      }
      /**
       * <pre>
       * The type of active scroll.
       * </pre>
       *
       * <code>optional .perfetto.protos.ChromeFrameReporter.ScrollState scroll_state = 6;</code>
       * @return This builder for chaining.
       */
      public Builder clearScrollState() {
        bitField0_ = (bitField0_ & ~0x00000020);
        scrollState_ = 0;
        onChanged();
        return this;
      }

      private boolean hasMainAnimation_ ;
      /**
       * <pre>
       * If any main thread animation is active during this frame.
       * </pre>
       *
       * <code>optional bool has_main_animation = 7;</code>
       * @return Whether the hasMainAnimation field is set.
       */
      @java.lang.Override
      public boolean hasHasMainAnimation() {
        return ((bitField0_ & 0x00000040) != 0);
      }
      /**
       * <pre>
       * If any main thread animation is active during this frame.
       * </pre>
       *
       * <code>optional bool has_main_animation = 7;</code>
       * @return The hasMainAnimation.
       */
      @java.lang.Override
      public boolean getHasMainAnimation() {
        return hasMainAnimation_;
      }
      /**
       * <pre>
       * If any main thread animation is active during this frame.
       * </pre>
       *
       * <code>optional bool has_main_animation = 7;</code>
       * @param value The hasMainAnimation to set.
       * @return This builder for chaining.
       */
      public Builder setHasMainAnimation(boolean value) {
        
        hasMainAnimation_ = value;
        bitField0_ |= 0x00000040;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * If any main thread animation is active during this frame.
       * </pre>
       *
       * <code>optional bool has_main_animation = 7;</code>
       * @return This builder for chaining.
       */
      public Builder clearHasMainAnimation() {
        bitField0_ = (bitField0_ & ~0x00000040);
        hasMainAnimation_ = false;
        onChanged();
        return this;
      }

      private boolean hasCompositorAnimation_ ;
      /**
       * <pre>
       * If any compositor thread animation is active during this frame.
       * </pre>
       *
       * <code>optional bool has_compositor_animation = 8;</code>
       * @return Whether the hasCompositorAnimation field is set.
       */
      @java.lang.Override
      public boolean hasHasCompositorAnimation() {
        return ((bitField0_ & 0x00000080) != 0);
      }
      /**
       * <pre>
       * If any compositor thread animation is active during this frame.
       * </pre>
       *
       * <code>optional bool has_compositor_animation = 8;</code>
       * @return The hasCompositorAnimation.
       */
      @java.lang.Override
      public boolean getHasCompositorAnimation() {
        return hasCompositorAnimation_;
      }
      /**
       * <pre>
       * If any compositor thread animation is active during this frame.
       * </pre>
       *
       * <code>optional bool has_compositor_animation = 8;</code>
       * @param value The hasCompositorAnimation to set.
       * @return This builder for chaining.
       */
      public Builder setHasCompositorAnimation(boolean value) {
        
        hasCompositorAnimation_ = value;
        bitField0_ |= 0x00000080;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * If any compositor thread animation is active during this frame.
       * </pre>
       *
       * <code>optional bool has_compositor_animation = 8;</code>
       * @return This builder for chaining.
       */
      public Builder clearHasCompositorAnimation() {
        bitField0_ = (bitField0_ & ~0x00000080);
        hasCompositorAnimation_ = false;
        onChanged();
        return this;
      }

      private boolean hasSmoothInputMain_ ;
      /**
       * <pre>
       * If any touch-driven UX (not scroll) is active during this frame.
       * </pre>
       *
       * <code>optional bool has_smooth_input_main = 9;</code>
       * @return Whether the hasSmoothInputMain field is set.
       */
      @java.lang.Override
      public boolean hasHasSmoothInputMain() {
        return ((bitField0_ & 0x00000100) != 0);
      }
      /**
       * <pre>
       * If any touch-driven UX (not scroll) is active during this frame.
       * </pre>
       *
       * <code>optional bool has_smooth_input_main = 9;</code>
       * @return The hasSmoothInputMain.
       */
      @java.lang.Override
      public boolean getHasSmoothInputMain() {
        return hasSmoothInputMain_;
      }
      /**
       * <pre>
       * If any touch-driven UX (not scroll) is active during this frame.
       * </pre>
       *
       * <code>optional bool has_smooth_input_main = 9;</code>
       * @param value The hasSmoothInputMain to set.
       * @return This builder for chaining.
       */
      public Builder setHasSmoothInputMain(boolean value) {
        
        hasSmoothInputMain_ = value;
        bitField0_ |= 0x00000100;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * If any touch-driven UX (not scroll) is active during this frame.
       * </pre>
       *
       * <code>optional bool has_smooth_input_main = 9;</code>
       * @return This builder for chaining.
       */
      public Builder clearHasSmoothInputMain() {
        bitField0_ = (bitField0_ & ~0x00000100);
        hasSmoothInputMain_ = false;
        onChanged();
        return this;
      }

      private boolean hasMissingContent_ ;
      /**
       * <pre>
       * Whether the frame contained any missing content (i.e. whether there was
       * checkerboarding in the frame).
       * </pre>
       *
       * <code>optional bool has_missing_content = 10;</code>
       * @return Whether the hasMissingContent field is set.
       */
      @java.lang.Override
      public boolean hasHasMissingContent() {
        return ((bitField0_ & 0x00000200) != 0);
      }
      /**
       * <pre>
       * Whether the frame contained any missing content (i.e. whether there was
       * checkerboarding in the frame).
       * </pre>
       *
       * <code>optional bool has_missing_content = 10;</code>
       * @return The hasMissingContent.
       */
      @java.lang.Override
      public boolean getHasMissingContent() {
        return hasMissingContent_;
      }
      /**
       * <pre>
       * Whether the frame contained any missing content (i.e. whether there was
       * checkerboarding in the frame).
       * </pre>
       *
       * <code>optional bool has_missing_content = 10;</code>
       * @param value The hasMissingContent to set.
       * @return This builder for chaining.
       */
      public Builder setHasMissingContent(boolean value) {
        
        hasMissingContent_ = value;
        bitField0_ |= 0x00000200;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Whether the frame contained any missing content (i.e. whether there was
       * checkerboarding in the frame).
       * </pre>
       *
       * <code>optional bool has_missing_content = 10;</code>
       * @return This builder for chaining.
       */
      public Builder clearHasMissingContent() {
        bitField0_ = (bitField0_ & ~0x00000200);
        hasMissingContent_ = false;
        onChanged();
        return this;
      }

      private long layerTreeHostId_ ;
      /**
       * <pre>
       * The id of layer_tree_host that the frame has been produced for.
       * </pre>
       *
       * <code>optional uint64 layer_tree_host_id = 11;</code>
       * @return Whether the layerTreeHostId field is set.
       */
      @java.lang.Override
      public boolean hasLayerTreeHostId() {
        return ((bitField0_ & 0x00000400) != 0);
      }
      /**
       * <pre>
       * The id of layer_tree_host that the frame has been produced for.
       * </pre>
       *
       * <code>optional uint64 layer_tree_host_id = 11;</code>
       * @return The layerTreeHostId.
       */
      @java.lang.Override
      public long getLayerTreeHostId() {
        return layerTreeHostId_;
      }
      /**
       * <pre>
       * The id of layer_tree_host that the frame has been produced for.
       * </pre>
       *
       * <code>optional uint64 layer_tree_host_id = 11;</code>
       * @param value The layerTreeHostId to set.
       * @return This builder for chaining.
       */
      public Builder setLayerTreeHostId(long value) {
        
        layerTreeHostId_ = value;
        bitField0_ |= 0x00000400;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * The id of layer_tree_host that the frame has been produced for.
       * </pre>
       *
       * <code>optional uint64 layer_tree_host_id = 11;</code>
       * @return This builder for chaining.
       */
      public Builder clearLayerTreeHostId() {
        bitField0_ = (bitField0_ & ~0x00000400);
        layerTreeHostId_ = 0L;
        onChanged();
        return this;
      }

      private boolean hasHighLatency_ ;
      /**
       * <pre>
       * If total latency of PipelineReporter exceeds a certain limit.
       * </pre>
       *
       * <code>optional bool has_high_latency = 12;</code>
       * @return Whether the hasHighLatency field is set.
       */
      @java.lang.Override
      public boolean hasHasHighLatency() {
        return ((bitField0_ & 0x00000800) != 0);
      }
      /**
       * <pre>
       * If total latency of PipelineReporter exceeds a certain limit.
       * </pre>
       *
       * <code>optional bool has_high_latency = 12;</code>
       * @return The hasHighLatency.
       */
      @java.lang.Override
      public boolean getHasHighLatency() {
        return hasHighLatency_;
      }
      /**
       * <pre>
       * If total latency of PipelineReporter exceeds a certain limit.
       * </pre>
       *
       * <code>optional bool has_high_latency = 12;</code>
       * @param value The hasHighLatency to set.
       * @return This builder for chaining.
       */
      public Builder setHasHighLatency(boolean value) {
        
        hasHighLatency_ = value;
        bitField0_ |= 0x00000800;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * If total latency of PipelineReporter exceeds a certain limit.
       * </pre>
       *
       * <code>optional bool has_high_latency = 12;</code>
       * @return This builder for chaining.
       */
      public Builder clearHasHighLatency() {
        bitField0_ = (bitField0_ & ~0x00000800);
        hasHighLatency_ = false;
        onChanged();
        return this;
      }

      private int frameType_ = 0;
      /**
       * <pre>
       * Indicate if the frame is "FORKED" (i.e. a PipelineReporter event starts at
       * the same frame sequence as another PipelineReporter) or "BACKFILL"
       * (i.e. dropped frames when there are no partial compositor updates).
       * </pre>
       *
       * <code>optional .perfetto.protos.ChromeFrameReporter.FrameType frame_type = 13;</code>
       * @return Whether the frameType field is set.
       */
      @java.lang.Override public boolean hasFrameType() {
        return ((bitField0_ & 0x00001000) != 0);
      }
      /**
       * <pre>
       * Indicate if the frame is "FORKED" (i.e. a PipelineReporter event starts at
       * the same frame sequence as another PipelineReporter) or "BACKFILL"
       * (i.e. dropped frames when there are no partial compositor updates).
       * </pre>
       *
       * <code>optional .perfetto.protos.ChromeFrameReporter.FrameType frame_type = 13;</code>
       * @return The frameType.
       */
      @java.lang.Override
      public perfetto.protos.ChromeFrameReporterOuterClass.ChromeFrameReporter.FrameType getFrameType() {
        perfetto.protos.ChromeFrameReporterOuterClass.ChromeFrameReporter.FrameType result = perfetto.protos.ChromeFrameReporterOuterClass.ChromeFrameReporter.FrameType.forNumber(frameType_);
        return result == null ? perfetto.protos.ChromeFrameReporterOuterClass.ChromeFrameReporter.FrameType.FORKED : result;
      }
      /**
       * <pre>
       * Indicate if the frame is "FORKED" (i.e. a PipelineReporter event starts at
       * the same frame sequence as another PipelineReporter) or "BACKFILL"
       * (i.e. dropped frames when there are no partial compositor updates).
       * </pre>
       *
       * <code>optional .perfetto.protos.ChromeFrameReporter.FrameType frame_type = 13;</code>
       * @param value The frameType to set.
       * @return This builder for chaining.
       */
      public Builder setFrameType(perfetto.protos.ChromeFrameReporterOuterClass.ChromeFrameReporter.FrameType value) {
        if (value == null) {
          throw new NullPointerException();
        }
        bitField0_ |= 0x00001000;
        frameType_ = value.getNumber();
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Indicate if the frame is "FORKED" (i.e. a PipelineReporter event starts at
       * the same frame sequence as another PipelineReporter) or "BACKFILL"
       * (i.e. dropped frames when there are no partial compositor updates).
       * </pre>
       *
       * <code>optional .perfetto.protos.ChromeFrameReporter.FrameType frame_type = 13;</code>
       * @return This builder for chaining.
       */
      public Builder clearFrameType() {
        bitField0_ = (bitField0_ & ~0x00001000);
        frameType_ = 0;
        onChanged();
        return this;
      }

      private com.google.protobuf.LazyStringList highLatencyContributionStage_ = com.google.protobuf.LazyStringArrayList.EMPTY;
      private void ensureHighLatencyContributionStageIsMutable() {
        if (!((bitField0_ & 0x00002000) != 0)) {
          highLatencyContributionStage_ = new com.google.protobuf.LazyStringArrayList(highLatencyContributionStage_);
          bitField0_ |= 0x00002000;
         }
      }
      /**
       * <pre>
       * The breakdown stage of PipelineReporter that is most likely accountable for
       * high latency.
       * </pre>
       *
       * <code>repeated string high_latency_contribution_stage = 14;</code>
       * @return A list containing the highLatencyContributionStage.
       */
      public com.google.protobuf.ProtocolStringList
          getHighLatencyContributionStageList() {
        return highLatencyContributionStage_.getUnmodifiableView();
      }
      /**
       * <pre>
       * The breakdown stage of PipelineReporter that is most likely accountable for
       * high latency.
       * </pre>
       *
       * <code>repeated string high_latency_contribution_stage = 14;</code>
       * @return The count of highLatencyContributionStage.
       */
      public int getHighLatencyContributionStageCount() {
        return highLatencyContributionStage_.size();
      }
      /**
       * <pre>
       * The breakdown stage of PipelineReporter that is most likely accountable for
       * high latency.
       * </pre>
       *
       * <code>repeated string high_latency_contribution_stage = 14;</code>
       * @param index The index of the element to return.
       * @return The highLatencyContributionStage at the given index.
       */
      public java.lang.String getHighLatencyContributionStage(int index) {
        return highLatencyContributionStage_.get(index);
      }
      /**
       * <pre>
       * The breakdown stage of PipelineReporter that is most likely accountable for
       * high latency.
       * </pre>
       *
       * <code>repeated string high_latency_contribution_stage = 14;</code>
       * @param index The index of the value to return.
       * @return The bytes of the highLatencyContributionStage at the given index.
       */
      public com.google.protobuf.ByteString
          getHighLatencyContributionStageBytes(int index) {
        return highLatencyContributionStage_.getByteString(index);
      }
      /**
       * <pre>
       * The breakdown stage of PipelineReporter that is most likely accountable for
       * high latency.
       * </pre>
       *
       * <code>repeated string high_latency_contribution_stage = 14;</code>
       * @param index The index to set the value at.
       * @param value The highLatencyContributionStage to set.
       * @return This builder for chaining.
       */
      public Builder setHighLatencyContributionStage(
          int index, java.lang.String value) {
        if (value == null) { throw new NullPointerException(); }
        ensureHighLatencyContributionStageIsMutable();
        highLatencyContributionStage_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <pre>
       * The breakdown stage of PipelineReporter that is most likely accountable for
       * high latency.
       * </pre>
       *
       * <code>repeated string high_latency_contribution_stage = 14;</code>
       * @param value The highLatencyContributionStage to add.
       * @return This builder for chaining.
       */
      public Builder addHighLatencyContributionStage(
          java.lang.String value) {
        if (value == null) { throw new NullPointerException(); }
        ensureHighLatencyContributionStageIsMutable();
        highLatencyContributionStage_.add(value);
        onChanged();
        return this;
      }
      /**
       * <pre>
       * The breakdown stage of PipelineReporter that is most likely accountable for
       * high latency.
       * </pre>
       *
       * <code>repeated string high_latency_contribution_stage = 14;</code>
       * @param values The highLatencyContributionStage to add.
       * @return This builder for chaining.
       */
      public Builder addAllHighLatencyContributionStage(
          java.lang.Iterable<java.lang.String> values) {
        ensureHighLatencyContributionStageIsMutable();
        com.google.protobuf.AbstractMessageLite.Builder.addAll(
            values, highLatencyContributionStage_);
        onChanged();
        return this;
      }
      /**
       * <pre>
       * The breakdown stage of PipelineReporter that is most likely accountable for
       * high latency.
       * </pre>
       *
       * <code>repeated string high_latency_contribution_stage = 14;</code>
       * @return This builder for chaining.
       */
      public Builder clearHighLatencyContributionStage() {
        highLatencyContributionStage_ = com.google.protobuf.LazyStringArrayList.EMPTY;
        bitField0_ = (bitField0_ & ~0x00002000);
        onChanged();
        return this;
      }
      /**
       * <pre>
       * The breakdown stage of PipelineReporter that is most likely accountable for
       * high latency.
       * </pre>
       *
       * <code>repeated string high_latency_contribution_stage = 14;</code>
       * @param value The bytes of the highLatencyContributionStage to add.
       * @return This builder for chaining.
       */
      public Builder addHighLatencyContributionStageBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) { throw new NullPointerException(); }
        ensureHighLatencyContributionStageIsMutable();
        highLatencyContributionStage_.add(value);
        onChanged();
        return this;
      }
      @java.lang.Override
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      @java.lang.Override
      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:perfetto.protos.ChromeFrameReporter)
    }

    // @@protoc_insertion_point(class_scope:perfetto.protos.ChromeFrameReporter)
    private static final perfetto.protos.ChromeFrameReporterOuterClass.ChromeFrameReporter DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new perfetto.protos.ChromeFrameReporterOuterClass.ChromeFrameReporter();
    }

    public static perfetto.protos.ChromeFrameReporterOuterClass.ChromeFrameReporter getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    @java.lang.Deprecated public static final com.google.protobuf.Parser<ChromeFrameReporter>
        PARSER = new com.google.protobuf.AbstractParser<ChromeFrameReporter>() {
      @java.lang.Override
      public ChromeFrameReporter parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        Builder builder = newBuilder();
        try {
          builder.mergeFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.setUnfinishedMessage(builder.buildPartial());
        } catch (com.google.protobuf.UninitializedMessageException e) {
          throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
        } catch (java.io.IOException e) {
          throw new com.google.protobuf.InvalidProtocolBufferException(e)
              .setUnfinishedMessage(builder.buildPartial());
        }
        return builder.buildPartial();
      }
    };

    public static com.google.protobuf.Parser<ChromeFrameReporter> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<ChromeFrameReporter> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public perfetto.protos.ChromeFrameReporterOuterClass.ChromeFrameReporter getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_perfetto_protos_ChromeFrameReporter_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_perfetto_protos_ChromeFrameReporter_fieldAccessorTable;

  public static com.google.protobuf.Descriptors.FileDescriptor
      getDescriptor() {
    return descriptor;
  }
  private static  com.google.protobuf.Descriptors.FileDescriptor
      descriptor;
  static {
    java.lang.String[] descriptorData = {
      "\n=protos/perfetto/trace/track_event/chro" +
      "me_frame_reporter.proto\022\017perfetto.protos" +
      "\"\305\007\n\023ChromeFrameReporter\0229\n\005state\030\001 \001(\0162" +
      "*.perfetto.protos.ChromeFrameReporter.St" +
      "ate\022D\n\006reason\030\002 \001(\01624.perfetto.protos.Ch" +
      "romeFrameReporter.FrameDropReason\022\024\n\014fra" +
      "me_source\030\003 \001(\004\022\026\n\016frame_sequence\030\004 \001(\004\022" +
      "\032\n\022affects_smoothness\030\005 \001(\010\022F\n\014scroll_st" +
      "ate\030\006 \001(\01620.perfetto.protos.ChromeFrameR" +
      "eporter.ScrollState\022\032\n\022has_main_animatio" +
      "n\030\007 \001(\010\022 \n\030has_compositor_animation\030\010 \001(" +
      "\010\022\035\n\025has_smooth_input_main\030\t \001(\010\022\033\n\023has_" +
      "missing_content\030\n \001(\010\022\032\n\022layer_tree_host" +
      "_id\030\013 \001(\004\022\030\n\020has_high_latency\030\014 \001(\010\022B\n\nf" +
      "rame_type\030\r \001(\0162..perfetto.protos.Chrome" +
      "FrameReporter.FrameType\022\'\n\037high_latency_" +
      "contribution_stage\030\016 \003(\t\"m\n\005State\022\033\n\027STA" +
      "TE_NO_UPDATE_DESIRED\020\000\022\027\n\023STATE_PRESENTE" +
      "D_ALL\020\001\022\033\n\027STATE_PRESENTED_PARTIAL\020\002\022\021\n\r" +
      "STATE_DROPPED\020\003\"~\n\017FrameDropReason\022\026\n\022RE" +
      "ASON_UNSPECIFIED\020\000\022\035\n\031REASON_DISPLAY_COM" +
      "POSITOR\020\001\022\026\n\022REASON_MAIN_THREAD\020\002\022\034\n\030REA" +
      "SON_CLIENT_COMPOSITOR\020\003\"h\n\013ScrollState\022\017" +
      "\n\013SCROLL_NONE\020\000\022\026\n\022SCROLL_MAIN_THREAD\020\001\022" +
      "\034\n\030SCROLL_COMPOSITOR_THREAD\020\002\022\022\n\016SCROLL_" +
      "UNKNOWN\020\003\"%\n\tFrameType\022\n\n\006FORKED\020\000\022\014\n\010BA" +
      "CKFILL\020\001"
    };
    descriptor = com.google.protobuf.Descriptors.FileDescriptor
      .internalBuildGeneratedFileFrom(descriptorData,
        new com.google.protobuf.Descriptors.FileDescriptor[] {
        });
    internal_static_perfetto_protos_ChromeFrameReporter_descriptor =
      getDescriptor().getMessageTypes().get(0);
    internal_static_perfetto_protos_ChromeFrameReporter_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_perfetto_protos_ChromeFrameReporter_descriptor,
        new java.lang.String[] { "State", "Reason", "FrameSource", "FrameSequence", "AffectsSmoothness", "ScrollState", "HasMainAnimation", "HasCompositorAnimation", "HasSmoothInputMain", "HasMissingContent", "LayerTreeHostId", "HasHighLatency", "FrameType", "HighLatencyContributionStage", });
  }

  // @@protoc_insertion_point(outer_class_scope)
}
