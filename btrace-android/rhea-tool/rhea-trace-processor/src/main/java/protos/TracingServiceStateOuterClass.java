// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: protos/perfetto/common/tracing_service_state.proto

package perfetto.protos;

public final class TracingServiceStateOuterClass {
  private TracingServiceStateOuterClass() {}
  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistryLite registry) {
  }

  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistry registry) {
    registerAllExtensions(
        (com.google.protobuf.ExtensionRegistryLite) registry);
  }
  public interface TracingServiceStateOrBuilder extends
      // @@protoc_insertion_point(interface_extends:perfetto.protos.TracingServiceState)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <pre>
     * Lists all the producers connected.
     * </pre>
     *
     * <code>repeated .perfetto.protos.TracingServiceState.Producer producers = 1;</code>
     */
    java.util.List<perfetto.protos.TracingServiceStateOuterClass.TracingServiceState.Producer> 
        getProducersList();
    /**
     * <pre>
     * Lists all the producers connected.
     * </pre>
     *
     * <code>repeated .perfetto.protos.TracingServiceState.Producer producers = 1;</code>
     */
    perfetto.protos.TracingServiceStateOuterClass.TracingServiceState.Producer getProducers(int index);
    /**
     * <pre>
     * Lists all the producers connected.
     * </pre>
     *
     * <code>repeated .perfetto.protos.TracingServiceState.Producer producers = 1;</code>
     */
    int getProducersCount();
    /**
     * <pre>
     * Lists all the producers connected.
     * </pre>
     *
     * <code>repeated .perfetto.protos.TracingServiceState.Producer producers = 1;</code>
     */
    java.util.List<? extends perfetto.protos.TracingServiceStateOuterClass.TracingServiceState.ProducerOrBuilder> 
        getProducersOrBuilderList();
    /**
     * <pre>
     * Lists all the producers connected.
     * </pre>
     *
     * <code>repeated .perfetto.protos.TracingServiceState.Producer producers = 1;</code>
     */
    perfetto.protos.TracingServiceStateOuterClass.TracingServiceState.ProducerOrBuilder getProducersOrBuilder(
        int index);

    /**
     * <pre>
     * Lists the data sources available.
     * </pre>
     *
     * <code>repeated .perfetto.protos.TracingServiceState.DataSource data_sources = 2;</code>
     */
    java.util.List<perfetto.protos.TracingServiceStateOuterClass.TracingServiceState.DataSource> 
        getDataSourcesList();
    /**
     * <pre>
     * Lists the data sources available.
     * </pre>
     *
     * <code>repeated .perfetto.protos.TracingServiceState.DataSource data_sources = 2;</code>
     */
    perfetto.protos.TracingServiceStateOuterClass.TracingServiceState.DataSource getDataSources(int index);
    /**
     * <pre>
     * Lists the data sources available.
     * </pre>
     *
     * <code>repeated .perfetto.protos.TracingServiceState.DataSource data_sources = 2;</code>
     */
    int getDataSourcesCount();
    /**
     * <pre>
     * Lists the data sources available.
     * </pre>
     *
     * <code>repeated .perfetto.protos.TracingServiceState.DataSource data_sources = 2;</code>
     */
    java.util.List<? extends perfetto.protos.TracingServiceStateOuterClass.TracingServiceState.DataSourceOrBuilder> 
        getDataSourcesOrBuilderList();
    /**
     * <pre>
     * Lists the data sources available.
     * </pre>
     *
     * <code>repeated .perfetto.protos.TracingServiceState.DataSource data_sources = 2;</code>
     */
    perfetto.protos.TracingServiceStateOuterClass.TracingServiceState.DataSourceOrBuilder getDataSourcesOrBuilder(
        int index);

    /**
     * <pre>
     * Lists the tracing sessions active AND owned by a consumer that has the same
     * UID of the caller (or all of them if the caller is root).
     * Introduced in v24 / Android T.
     * </pre>
     *
     * <code>repeated .perfetto.protos.TracingServiceState.TracingSession tracing_sessions = 6;</code>
     */
    java.util.List<perfetto.protos.TracingServiceStateOuterClass.TracingServiceState.TracingSession> 
        getTracingSessionsList();
    /**
     * <pre>
     * Lists the tracing sessions active AND owned by a consumer that has the same
     * UID of the caller (or all of them if the caller is root).
     * Introduced in v24 / Android T.
     * </pre>
     *
     * <code>repeated .perfetto.protos.TracingServiceState.TracingSession tracing_sessions = 6;</code>
     */
    perfetto.protos.TracingServiceStateOuterClass.TracingServiceState.TracingSession getTracingSessions(int index);
    /**
     * <pre>
     * Lists the tracing sessions active AND owned by a consumer that has the same
     * UID of the caller (or all of them if the caller is root).
     * Introduced in v24 / Android T.
     * </pre>
     *
     * <code>repeated .perfetto.protos.TracingServiceState.TracingSession tracing_sessions = 6;</code>
     */
    int getTracingSessionsCount();
    /**
     * <pre>
     * Lists the tracing sessions active AND owned by a consumer that has the same
     * UID of the caller (or all of them if the caller is root).
     * Introduced in v24 / Android T.
     * </pre>
     *
     * <code>repeated .perfetto.protos.TracingServiceState.TracingSession tracing_sessions = 6;</code>
     */
    java.util.List<? extends perfetto.protos.TracingServiceStateOuterClass.TracingServiceState.TracingSessionOrBuilder> 
        getTracingSessionsOrBuilderList();
    /**
     * <pre>
     * Lists the tracing sessions active AND owned by a consumer that has the same
     * UID of the caller (or all of them if the caller is root).
     * Introduced in v24 / Android T.
     * </pre>
     *
     * <code>repeated .perfetto.protos.TracingServiceState.TracingSession tracing_sessions = 6;</code>
     */
    perfetto.protos.TracingServiceStateOuterClass.TracingServiceState.TracingSessionOrBuilder getTracingSessionsOrBuilder(
        int index);

    /**
     * <pre>
     * This is always set to true from v24 and beyond. This flag is only used to
     * tell the difference between: (1) talking to a recent service which happens
     * to have no tracing session active; (2) talking to an older version of the
     * service which will never report any tracing session.
     * </pre>
     *
     * <code>optional bool supports_tracing_sessions = 7;</code>
     * @return Whether the supportsTracingSessions field is set.
     */
    boolean hasSupportsTracingSessions();
    /**
     * <pre>
     * This is always set to true from v24 and beyond. This flag is only used to
     * tell the difference between: (1) talking to a recent service which happens
     * to have no tracing session active; (2) talking to an older version of the
     * service which will never report any tracing session.
     * </pre>
     *
     * <code>optional bool supports_tracing_sessions = 7;</code>
     * @return The supportsTracingSessions.
     */
    boolean getSupportsTracingSessions();

    /**
     * <pre>
     * Total number of tracing sessions.
     * </pre>
     *
     * <code>optional int32 num_sessions = 3;</code>
     * @return Whether the numSessions field is set.
     */
    boolean hasNumSessions();
    /**
     * <pre>
     * Total number of tracing sessions.
     * </pre>
     *
     * <code>optional int32 num_sessions = 3;</code>
     * @return The numSessions.
     */
    int getNumSessions();

    /**
     * <pre>
     * Number of tracing sessions in the started state. Always &lt;= num_sessions.
     * </pre>
     *
     * <code>optional int32 num_sessions_started = 4;</code>
     * @return Whether the numSessionsStarted field is set.
     */
    boolean hasNumSessionsStarted();
    /**
     * <pre>
     * Number of tracing sessions in the started state. Always &lt;= num_sessions.
     * </pre>
     *
     * <code>optional int32 num_sessions_started = 4;</code>
     * @return The numSessionsStarted.
     */
    int getNumSessionsStarted();

    /**
     * <pre>
     * The version of traced (the same returned by `traced --version`).
     * This is a human readable string with and its format varies depending on
     * the build system and the repo (standalone vs AOSP).
     * This is intended for human debugging only.
     * </pre>
     *
     * <code>optional string tracing_service_version = 5;</code>
     * @return Whether the tracingServiceVersion field is set.
     */
    boolean hasTracingServiceVersion();
    /**
     * <pre>
     * The version of traced (the same returned by `traced --version`).
     * This is a human readable string with and its format varies depending on
     * the build system and the repo (standalone vs AOSP).
     * This is intended for human debugging only.
     * </pre>
     *
     * <code>optional string tracing_service_version = 5;</code>
     * @return The tracingServiceVersion.
     */
    java.lang.String getTracingServiceVersion();
    /**
     * <pre>
     * The version of traced (the same returned by `traced --version`).
     * This is a human readable string with and its format varies depending on
     * the build system and the repo (standalone vs AOSP).
     * This is intended for human debugging only.
     * </pre>
     *
     * <code>optional string tracing_service_version = 5;</code>
     * @return The bytes for tracingServiceVersion.
     */
    com.google.protobuf.ByteString
        getTracingServiceVersionBytes();
  }
  /**
   * <pre>
   * Reports the state of the tracing service. Used to gather details about the
   * data sources connected.
   * See ConsumerPort::QueryServiceState().
   * </pre>
   *
   * Protobuf type {@code perfetto.protos.TracingServiceState}
   */
  public static final class TracingServiceState extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:perfetto.protos.TracingServiceState)
      TracingServiceStateOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use TracingServiceState.newBuilder() to construct.
    private TracingServiceState(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private TracingServiceState() {
      producers_ = java.util.Collections.emptyList();
      dataSources_ = java.util.Collections.emptyList();
      tracingSessions_ = java.util.Collections.emptyList();
      tracingServiceVersion_ = "";
    }

    @java.lang.Override
    @SuppressWarnings({"unused"})
    protected java.lang.Object newInstance(
        UnusedPrivateParameter unused) {
      return new TracingServiceState();
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return perfetto.protos.TracingServiceStateOuterClass.internal_static_perfetto_protos_TracingServiceState_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return perfetto.protos.TracingServiceStateOuterClass.internal_static_perfetto_protos_TracingServiceState_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              perfetto.protos.TracingServiceStateOuterClass.TracingServiceState.class, perfetto.protos.TracingServiceStateOuterClass.TracingServiceState.Builder.class);
    }

    public interface ProducerOrBuilder extends
        // @@protoc_insertion_point(interface_extends:perfetto.protos.TracingServiceState.Producer)
        com.google.protobuf.MessageOrBuilder {

      /**
       * <pre>
       * Unique ID of the producer (monotonic counter).
       * </pre>
       *
       * <code>optional int32 id = 1;</code>
       * @return Whether the id field is set.
       */
      boolean hasId();
      /**
       * <pre>
       * Unique ID of the producer (monotonic counter).
       * </pre>
       *
       * <code>optional int32 id = 1;</code>
       * @return The id.
       */
      int getId();

      /**
       * <pre>
       * Typically matches the process name.
       * </pre>
       *
       * <code>optional string name = 2;</code>
       * @return Whether the name field is set.
       */
      boolean hasName();
      /**
       * <pre>
       * Typically matches the process name.
       * </pre>
       *
       * <code>optional string name = 2;</code>
       * @return The name.
       */
      java.lang.String getName();
      /**
       * <pre>
       * Typically matches the process name.
       * </pre>
       *
       * <code>optional string name = 2;</code>
       * @return The bytes for name.
       */
      com.google.protobuf.ByteString
          getNameBytes();

      /**
       * <pre>
       * Unix pid of the remote process. Supported only on Linux-based systems.
       * Introduced in v24 / Android T.
       * </pre>
       *
       * <code>optional int32 pid = 5;</code>
       * @return Whether the pid field is set.
       */
      boolean hasPid();
      /**
       * <pre>
       * Unix pid of the remote process. Supported only on Linux-based systems.
       * Introduced in v24 / Android T.
       * </pre>
       *
       * <code>optional int32 pid = 5;</code>
       * @return The pid.
       */
      int getPid();

      /**
       * <pre>
       * Unix uid of the remote process.
       * </pre>
       *
       * <code>optional int32 uid = 3;</code>
       * @return Whether the uid field is set.
       */
      boolean hasUid();
      /**
       * <pre>
       * Unix uid of the remote process.
       * </pre>
       *
       * <code>optional int32 uid = 3;</code>
       * @return The uid.
       */
      int getUid();

      /**
       * <pre>
       * The version of the client library used by the producer.
       * This is a human readable string with and its format varies depending on
       * the build system and the repo (standalone vs AOSP).
       * This is intended for human debugging only.
       * </pre>
       *
       * <code>optional string sdk_version = 4;</code>
       * @return Whether the sdkVersion field is set.
       */
      boolean hasSdkVersion();
      /**
       * <pre>
       * The version of the client library used by the producer.
       * This is a human readable string with and its format varies depending on
       * the build system and the repo (standalone vs AOSP).
       * This is intended for human debugging only.
       * </pre>
       *
       * <code>optional string sdk_version = 4;</code>
       * @return The sdkVersion.
       */
      java.lang.String getSdkVersion();
      /**
       * <pre>
       * The version of the client library used by the producer.
       * This is a human readable string with and its format varies depending on
       * the build system and the repo (standalone vs AOSP).
       * This is intended for human debugging only.
       * </pre>
       *
       * <code>optional string sdk_version = 4;</code>
       * @return The bytes for sdkVersion.
       */
      com.google.protobuf.ByteString
          getSdkVersionBytes();
    }
    /**
     * <pre>
     * Describes a producer process.
     * </pre>
     *
     * Protobuf type {@code perfetto.protos.TracingServiceState.Producer}
     */
    public static final class Producer extends
        com.google.protobuf.GeneratedMessageV3 implements
        // @@protoc_insertion_point(message_implements:perfetto.protos.TracingServiceState.Producer)
        ProducerOrBuilder {
    private static final long serialVersionUID = 0L;
      // Use Producer.newBuilder() to construct.
      private Producer(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
        super(builder);
      }
      private Producer() {
        name_ = "";
        sdkVersion_ = "";
      }

      @java.lang.Override
      @SuppressWarnings({"unused"})
      protected java.lang.Object newInstance(
          UnusedPrivateParameter unused) {
        return new Producer();
      }

      @java.lang.Override
      public final com.google.protobuf.UnknownFieldSet
      getUnknownFields() {
        return this.unknownFields;
      }
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return perfetto.protos.TracingServiceStateOuterClass.internal_static_perfetto_protos_TracingServiceState_Producer_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return perfetto.protos.TracingServiceStateOuterClass.internal_static_perfetto_protos_TracingServiceState_Producer_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                perfetto.protos.TracingServiceStateOuterClass.TracingServiceState.Producer.class, perfetto.protos.TracingServiceStateOuterClass.TracingServiceState.Producer.Builder.class);
      }

      private int bitField0_;
      public static final int ID_FIELD_NUMBER = 1;
      private int id_ = 0;
      /**
       * <pre>
       * Unique ID of the producer (monotonic counter).
       * </pre>
       *
       * <code>optional int32 id = 1;</code>
       * @return Whether the id field is set.
       */
      @java.lang.Override
      public boolean hasId() {
        return ((bitField0_ & 0x00000001) != 0);
      }
      /**
       * <pre>
       * Unique ID of the producer (monotonic counter).
       * </pre>
       *
       * <code>optional int32 id = 1;</code>
       * @return The id.
       */
      @java.lang.Override
      public int getId() {
        return id_;
      }

      public static final int NAME_FIELD_NUMBER = 2;
      @SuppressWarnings("serial")
      private volatile java.lang.Object name_ = "";
      /**
       * <pre>
       * Typically matches the process name.
       * </pre>
       *
       * <code>optional string name = 2;</code>
       * @return Whether the name field is set.
       */
      @java.lang.Override
      public boolean hasName() {
        return ((bitField0_ & 0x00000002) != 0);
      }
      /**
       * <pre>
       * Typically matches the process name.
       * </pre>
       *
       * <code>optional string name = 2;</code>
       * @return The name.
       */
      @java.lang.Override
      public java.lang.String getName() {
        java.lang.Object ref = name_;
        if (ref instanceof java.lang.String) {
          return (java.lang.String) ref;
        } else {
          com.google.protobuf.ByteString bs = 
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          if (bs.isValidUtf8()) {
            name_ = s;
          }
          return s;
        }
      }
      /**
       * <pre>
       * Typically matches the process name.
       * </pre>
       *
       * <code>optional string name = 2;</code>
       * @return The bytes for name.
       */
      @java.lang.Override
      public com.google.protobuf.ByteString
          getNameBytes() {
        java.lang.Object ref = name_;
        if (ref instanceof java.lang.String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          name_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }

      public static final int PID_FIELD_NUMBER = 5;
      private int pid_ = 0;
      /**
       * <pre>
       * Unix pid of the remote process. Supported only on Linux-based systems.
       * Introduced in v24 / Android T.
       * </pre>
       *
       * <code>optional int32 pid = 5;</code>
       * @return Whether the pid field is set.
       */
      @java.lang.Override
      public boolean hasPid() {
        return ((bitField0_ & 0x00000004) != 0);
      }
      /**
       * <pre>
       * Unix pid of the remote process. Supported only on Linux-based systems.
       * Introduced in v24 / Android T.
       * </pre>
       *
       * <code>optional int32 pid = 5;</code>
       * @return The pid.
       */
      @java.lang.Override
      public int getPid() {
        return pid_;
      }

      public static final int UID_FIELD_NUMBER = 3;
      private int uid_ = 0;
      /**
       * <pre>
       * Unix uid of the remote process.
       * </pre>
       *
       * <code>optional int32 uid = 3;</code>
       * @return Whether the uid field is set.
       */
      @java.lang.Override
      public boolean hasUid() {
        return ((bitField0_ & 0x00000008) != 0);
      }
      /**
       * <pre>
       * Unix uid of the remote process.
       * </pre>
       *
       * <code>optional int32 uid = 3;</code>
       * @return The uid.
       */
      @java.lang.Override
      public int getUid() {
        return uid_;
      }

      public static final int SDK_VERSION_FIELD_NUMBER = 4;
      @SuppressWarnings("serial")
      private volatile java.lang.Object sdkVersion_ = "";
      /**
       * <pre>
       * The version of the client library used by the producer.
       * This is a human readable string with and its format varies depending on
       * the build system and the repo (standalone vs AOSP).
       * This is intended for human debugging only.
       * </pre>
       *
       * <code>optional string sdk_version = 4;</code>
       * @return Whether the sdkVersion field is set.
       */
      @java.lang.Override
      public boolean hasSdkVersion() {
        return ((bitField0_ & 0x00000010) != 0);
      }
      /**
       * <pre>
       * The version of the client library used by the producer.
       * This is a human readable string with and its format varies depending on
       * the build system and the repo (standalone vs AOSP).
       * This is intended for human debugging only.
       * </pre>
       *
       * <code>optional string sdk_version = 4;</code>
       * @return The sdkVersion.
       */
      @java.lang.Override
      public java.lang.String getSdkVersion() {
        java.lang.Object ref = sdkVersion_;
        if (ref instanceof java.lang.String) {
          return (java.lang.String) ref;
        } else {
          com.google.protobuf.ByteString bs = 
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          if (bs.isValidUtf8()) {
            sdkVersion_ = s;
          }
          return s;
        }
      }
      /**
       * <pre>
       * The version of the client library used by the producer.
       * This is a human readable string with and its format varies depending on
       * the build system and the repo (standalone vs AOSP).
       * This is intended for human debugging only.
       * </pre>
       *
       * <code>optional string sdk_version = 4;</code>
       * @return The bytes for sdkVersion.
       */
      @java.lang.Override
      public com.google.protobuf.ByteString
          getSdkVersionBytes() {
        java.lang.Object ref = sdkVersion_;
        if (ref instanceof java.lang.String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          sdkVersion_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }

      private byte memoizedIsInitialized = -1;
      @java.lang.Override
      public final boolean isInitialized() {
        byte isInitialized = memoizedIsInitialized;
        if (isInitialized == 1) return true;
        if (isInitialized == 0) return false;

        memoizedIsInitialized = 1;
        return true;
      }

      @java.lang.Override
      public void writeTo(com.google.protobuf.CodedOutputStream output)
                          throws java.io.IOException {
        if (((bitField0_ & 0x00000001) != 0)) {
          output.writeInt32(1, id_);
        }
        if (((bitField0_ & 0x00000002) != 0)) {
          com.google.protobuf.GeneratedMessageV3.writeString(output, 2, name_);
        }
        if (((bitField0_ & 0x00000008) != 0)) {
          output.writeInt32(3, uid_);
        }
        if (((bitField0_ & 0x00000010) != 0)) {
          com.google.protobuf.GeneratedMessageV3.writeString(output, 4, sdkVersion_);
        }
        if (((bitField0_ & 0x00000004) != 0)) {
          output.writeInt32(5, pid_);
        }
        getUnknownFields().writeTo(output);
      }

      @java.lang.Override
      public int getSerializedSize() {
        int size = memoizedSize;
        if (size != -1) return size;

        size = 0;
        if (((bitField0_ & 0x00000001) != 0)) {
          size += com.google.protobuf.CodedOutputStream
            .computeInt32Size(1, id_);
        }
        if (((bitField0_ & 0x00000002) != 0)) {
          size += com.google.protobuf.GeneratedMessageV3.computeStringSize(2, name_);
        }
        if (((bitField0_ & 0x00000008) != 0)) {
          size += com.google.protobuf.CodedOutputStream
            .computeInt32Size(3, uid_);
        }
        if (((bitField0_ & 0x00000010) != 0)) {
          size += com.google.protobuf.GeneratedMessageV3.computeStringSize(4, sdkVersion_);
        }
        if (((bitField0_ & 0x00000004) != 0)) {
          size += com.google.protobuf.CodedOutputStream
            .computeInt32Size(5, pid_);
        }
        size += getUnknownFields().getSerializedSize();
        memoizedSize = size;
        return size;
      }

      @java.lang.Override
      public boolean equals(final java.lang.Object obj) {
        if (obj == this) {
         return true;
        }
        if (!(obj instanceof perfetto.protos.TracingServiceStateOuterClass.TracingServiceState.Producer)) {
          return super.equals(obj);
        }
        perfetto.protos.TracingServiceStateOuterClass.TracingServiceState.Producer other = (perfetto.protos.TracingServiceStateOuterClass.TracingServiceState.Producer) obj;

        if (hasId() != other.hasId()) return false;
        if (hasId()) {
          if (getId()
              != other.getId()) return false;
        }
        if (hasName() != other.hasName()) return false;
        if (hasName()) {
          if (!getName()
              .equals(other.getName())) return false;
        }
        if (hasPid() != other.hasPid()) return false;
        if (hasPid()) {
          if (getPid()
              != other.getPid()) return false;
        }
        if (hasUid() != other.hasUid()) return false;
        if (hasUid()) {
          if (getUid()
              != other.getUid()) return false;
        }
        if (hasSdkVersion() != other.hasSdkVersion()) return false;
        if (hasSdkVersion()) {
          if (!getSdkVersion()
              .equals(other.getSdkVersion())) return false;
        }
        if (!getUnknownFields().equals(other.getUnknownFields())) return false;
        return true;
      }

      @java.lang.Override
      public int hashCode() {
        if (memoizedHashCode != 0) {
          return memoizedHashCode;
        }
        int hash = 41;
        hash = (19 * hash) + getDescriptor().hashCode();
        if (hasId()) {
          hash = (37 * hash) + ID_FIELD_NUMBER;
          hash = (53 * hash) + getId();
        }
        if (hasName()) {
          hash = (37 * hash) + NAME_FIELD_NUMBER;
          hash = (53 * hash) + getName().hashCode();
        }
        if (hasPid()) {
          hash = (37 * hash) + PID_FIELD_NUMBER;
          hash = (53 * hash) + getPid();
        }
        if (hasUid()) {
          hash = (37 * hash) + UID_FIELD_NUMBER;
          hash = (53 * hash) + getUid();
        }
        if (hasSdkVersion()) {
          hash = (37 * hash) + SDK_VERSION_FIELD_NUMBER;
          hash = (53 * hash) + getSdkVersion().hashCode();
        }
        hash = (29 * hash) + getUnknownFields().hashCode();
        memoizedHashCode = hash;
        return hash;
      }

      public static perfetto.protos.TracingServiceStateOuterClass.TracingServiceState.Producer parseFrom(
          java.nio.ByteBuffer data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static perfetto.protos.TracingServiceStateOuterClass.TracingServiceState.Producer parseFrom(
          java.nio.ByteBuffer data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static perfetto.protos.TracingServiceStateOuterClass.TracingServiceState.Producer parseFrom(
          com.google.protobuf.ByteString data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static perfetto.protos.TracingServiceStateOuterClass.TracingServiceState.Producer parseFrom(
          com.google.protobuf.ByteString data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static perfetto.protos.TracingServiceStateOuterClass.TracingServiceState.Producer parseFrom(byte[] data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static perfetto.protos.TracingServiceStateOuterClass.TracingServiceState.Producer parseFrom(
          byte[] data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static perfetto.protos.TracingServiceStateOuterClass.TracingServiceState.Producer parseFrom(java.io.InputStream input)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseWithIOException(PARSER, input);
      }
      public static perfetto.protos.TracingServiceStateOuterClass.TracingServiceState.Producer parseFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseWithIOException(PARSER, input, extensionRegistry);
      }
      public static perfetto.protos.TracingServiceStateOuterClass.TracingServiceState.Producer parseDelimitedFrom(java.io.InputStream input)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseDelimitedWithIOException(PARSER, input);
      }
      public static perfetto.protos.TracingServiceStateOuterClass.TracingServiceState.Producer parseDelimitedFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
      }
      public static perfetto.protos.TracingServiceStateOuterClass.TracingServiceState.Producer parseFrom(
          com.google.protobuf.CodedInputStream input)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseWithIOException(PARSER, input);
      }
      public static perfetto.protos.TracingServiceStateOuterClass.TracingServiceState.Producer parseFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseWithIOException(PARSER, input, extensionRegistry);
      }

      @java.lang.Override
      public Builder newBuilderForType() { return newBuilder(); }
      public static Builder newBuilder() {
        return DEFAULT_INSTANCE.toBuilder();
      }
      public static Builder newBuilder(perfetto.protos.TracingServiceStateOuterClass.TracingServiceState.Producer prototype) {
        return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
      }
      @java.lang.Override
      public Builder toBuilder() {
        return this == DEFAULT_INSTANCE
            ? new Builder() : new Builder().mergeFrom(this);
      }

      @java.lang.Override
      protected Builder newBuilderForType(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        Builder builder = new Builder(parent);
        return builder;
      }
      /**
       * <pre>
       * Describes a producer process.
       * </pre>
       *
       * Protobuf type {@code perfetto.protos.TracingServiceState.Producer}
       */
      public static final class Builder extends
          com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
          // @@protoc_insertion_point(builder_implements:perfetto.protos.TracingServiceState.Producer)
          perfetto.protos.TracingServiceStateOuterClass.TracingServiceState.ProducerOrBuilder {
        public static final com.google.protobuf.Descriptors.Descriptor
            getDescriptor() {
          return perfetto.protos.TracingServiceStateOuterClass.internal_static_perfetto_protos_TracingServiceState_Producer_descriptor;
        }

        @java.lang.Override
        protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
            internalGetFieldAccessorTable() {
          return perfetto.protos.TracingServiceStateOuterClass.internal_static_perfetto_protos_TracingServiceState_Producer_fieldAccessorTable
              .ensureFieldAccessorsInitialized(
                  perfetto.protos.TracingServiceStateOuterClass.TracingServiceState.Producer.class, perfetto.protos.TracingServiceStateOuterClass.TracingServiceState.Producer.Builder.class);
        }

        // Construct using perfetto.protos.TracingServiceStateOuterClass.TracingServiceState.Producer.newBuilder()
        private Builder() {

        }

        private Builder(
            com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
          super(parent);

        }
        @java.lang.Override
        public Builder clear() {
          super.clear();
          bitField0_ = 0;
          id_ = 0;
          name_ = "";
          pid_ = 0;
          uid_ = 0;
          sdkVersion_ = "";
          return this;
        }

        @java.lang.Override
        public com.google.protobuf.Descriptors.Descriptor
            getDescriptorForType() {
          return perfetto.protos.TracingServiceStateOuterClass.internal_static_perfetto_protos_TracingServiceState_Producer_descriptor;
        }

        @java.lang.Override
        public perfetto.protos.TracingServiceStateOuterClass.TracingServiceState.Producer getDefaultInstanceForType() {
          return perfetto.protos.TracingServiceStateOuterClass.TracingServiceState.Producer.getDefaultInstance();
        }

        @java.lang.Override
        public perfetto.protos.TracingServiceStateOuterClass.TracingServiceState.Producer build() {
          perfetto.protos.TracingServiceStateOuterClass.TracingServiceState.Producer result = buildPartial();
          if (!result.isInitialized()) {
            throw newUninitializedMessageException(result);
          }
          return result;
        }

        @java.lang.Override
        public perfetto.protos.TracingServiceStateOuterClass.TracingServiceState.Producer buildPartial() {
          perfetto.protos.TracingServiceStateOuterClass.TracingServiceState.Producer result = new perfetto.protos.TracingServiceStateOuterClass.TracingServiceState.Producer(this);
          if (bitField0_ != 0) { buildPartial0(result); }
          onBuilt();
          return result;
        }

        private void buildPartial0(perfetto.protos.TracingServiceStateOuterClass.TracingServiceState.Producer result) {
          int from_bitField0_ = bitField0_;
          int to_bitField0_ = 0;
          if (((from_bitField0_ & 0x00000001) != 0)) {
            result.id_ = id_;
            to_bitField0_ |= 0x00000001;
          }
          if (((from_bitField0_ & 0x00000002) != 0)) {
            result.name_ = name_;
            to_bitField0_ |= 0x00000002;
          }
          if (((from_bitField0_ & 0x00000004) != 0)) {
            result.pid_ = pid_;
            to_bitField0_ |= 0x00000004;
          }
          if (((from_bitField0_ & 0x00000008) != 0)) {
            result.uid_ = uid_;
            to_bitField0_ |= 0x00000008;
          }
          if (((from_bitField0_ & 0x00000010) != 0)) {
            result.sdkVersion_ = sdkVersion_;
            to_bitField0_ |= 0x00000010;
          }
          result.bitField0_ |= to_bitField0_;
        }

        @java.lang.Override
        public Builder clone() {
          return super.clone();
        }
        @java.lang.Override
        public Builder setField(
            com.google.protobuf.Descriptors.FieldDescriptor field,
            java.lang.Object value) {
          return super.setField(field, value);
        }
        @java.lang.Override
        public Builder clearField(
            com.google.protobuf.Descriptors.FieldDescriptor field) {
          return super.clearField(field);
        }
        @java.lang.Override
        public Builder clearOneof(
            com.google.protobuf.Descriptors.OneofDescriptor oneof) {
          return super.clearOneof(oneof);
        }
        @java.lang.Override
        public Builder setRepeatedField(
            com.google.protobuf.Descriptors.FieldDescriptor field,
            int index, java.lang.Object value) {
          return super.setRepeatedField(field, index, value);
        }
        @java.lang.Override
        public Builder addRepeatedField(
            com.google.protobuf.Descriptors.FieldDescriptor field,
            java.lang.Object value) {
          return super.addRepeatedField(field, value);
        }
        @java.lang.Override
        public Builder mergeFrom(com.google.protobuf.Message other) {
          if (other instanceof perfetto.protos.TracingServiceStateOuterClass.TracingServiceState.Producer) {
            return mergeFrom((perfetto.protos.TracingServiceStateOuterClass.TracingServiceState.Producer)other);
          } else {
            super.mergeFrom(other);
            return this;
          }
        }

        public Builder mergeFrom(perfetto.protos.TracingServiceStateOuterClass.TracingServiceState.Producer other) {
          if (other == perfetto.protos.TracingServiceStateOuterClass.TracingServiceState.Producer.getDefaultInstance()) return this;
          if (other.hasId()) {
            setId(other.getId());
          }
          if (other.hasName()) {
            name_ = other.name_;
            bitField0_ |= 0x00000002;
            onChanged();
          }
          if (other.hasPid()) {
            setPid(other.getPid());
          }
          if (other.hasUid()) {
            setUid(other.getUid());
          }
          if (other.hasSdkVersion()) {
            sdkVersion_ = other.sdkVersion_;
            bitField0_ |= 0x00000010;
            onChanged();
          }
          this.mergeUnknownFields(other.getUnknownFields());
          onChanged();
          return this;
        }

        @java.lang.Override
        public final boolean isInitialized() {
          return true;
        }

        @java.lang.Override
        public Builder mergeFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws java.io.IOException {
          if (extensionRegistry == null) {
            throw new java.lang.NullPointerException();
          }
          try {
            boolean done = false;
            while (!done) {
              int tag = input.readTag();
              switch (tag) {
                case 0:
                  done = true;
                  break;
                case 8: {
                  id_ = input.readInt32();
                  bitField0_ |= 0x00000001;
                  break;
                } // case 8
                case 18: {
                  name_ = input.readBytes();
                  bitField0_ |= 0x00000002;
                  break;
                } // case 18
                case 24: {
                  uid_ = input.readInt32();
                  bitField0_ |= 0x00000008;
                  break;
                } // case 24
                case 34: {
                  sdkVersion_ = input.readBytes();
                  bitField0_ |= 0x00000010;
                  break;
                } // case 34
                case 40: {
                  pid_ = input.readInt32();
                  bitField0_ |= 0x00000004;
                  break;
                } // case 40
                default: {
                  if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                    done = true; // was an endgroup tag
                  }
                  break;
                } // default:
              } // switch (tag)
            } // while (!done)
          } catch (com.google.protobuf.InvalidProtocolBufferException e) {
            throw e.unwrapIOException();
          } finally {
            onChanged();
          } // finally
          return this;
        }
        private int bitField0_;

        private int id_ ;
        /**
         * <pre>
         * Unique ID of the producer (monotonic counter).
         * </pre>
         *
         * <code>optional int32 id = 1;</code>
         * @return Whether the id field is set.
         */
        @java.lang.Override
        public boolean hasId() {
          return ((bitField0_ & 0x00000001) != 0);
        }
        /**
         * <pre>
         * Unique ID of the producer (monotonic counter).
         * </pre>
         *
         * <code>optional int32 id = 1;</code>
         * @return The id.
         */
        @java.lang.Override
        public int getId() {
          return id_;
        }
        /**
         * <pre>
         * Unique ID of the producer (monotonic counter).
         * </pre>
         *
         * <code>optional int32 id = 1;</code>
         * @param value The id to set.
         * @return This builder for chaining.
         */
        public Builder setId(int value) {
          
          id_ = value;
          bitField0_ |= 0x00000001;
          onChanged();
          return this;
        }
        /**
         * <pre>
         * Unique ID of the producer (monotonic counter).
         * </pre>
         *
         * <code>optional int32 id = 1;</code>
         * @return This builder for chaining.
         */
        public Builder clearId() {
          bitField0_ = (bitField0_ & ~0x00000001);
          id_ = 0;
          onChanged();
          return this;
        }

        private java.lang.Object name_ = "";
        /**
         * <pre>
         * Typically matches the process name.
         * </pre>
         *
         * <code>optional string name = 2;</code>
         * @return Whether the name field is set.
         */
        public boolean hasName() {
          return ((bitField0_ & 0x00000002) != 0);
        }
        /**
         * <pre>
         * Typically matches the process name.
         * </pre>
         *
         * <code>optional string name = 2;</code>
         * @return The name.
         */
        public java.lang.String getName() {
          java.lang.Object ref = name_;
          if (!(ref instanceof java.lang.String)) {
            com.google.protobuf.ByteString bs =
                (com.google.protobuf.ByteString) ref;
            java.lang.String s = bs.toStringUtf8();
            if (bs.isValidUtf8()) {
              name_ = s;
            }
            return s;
          } else {
            return (java.lang.String) ref;
          }
        }
        /**
         * <pre>
         * Typically matches the process name.
         * </pre>
         *
         * <code>optional string name = 2;</code>
         * @return The bytes for name.
         */
        public com.google.protobuf.ByteString
            getNameBytes() {
          java.lang.Object ref = name_;
          if (ref instanceof String) {
            com.google.protobuf.ByteString b = 
                com.google.protobuf.ByteString.copyFromUtf8(
                    (java.lang.String) ref);
            name_ = b;
            return b;
          } else {
            return (com.google.protobuf.ByteString) ref;
          }
        }
        /**
         * <pre>
         * Typically matches the process name.
         * </pre>
         *
         * <code>optional string name = 2;</code>
         * @param value The name to set.
         * @return This builder for chaining.
         */
        public Builder setName(
            java.lang.String value) {
          if (value == null) { throw new NullPointerException(); }
          name_ = value;
          bitField0_ |= 0x00000002;
          onChanged();
          return this;
        }
        /**
         * <pre>
         * Typically matches the process name.
         * </pre>
         *
         * <code>optional string name = 2;</code>
         * @return This builder for chaining.
         */
        public Builder clearName() {
          name_ = getDefaultInstance().getName();
          bitField0_ = (bitField0_ & ~0x00000002);
          onChanged();
          return this;
        }
        /**
         * <pre>
         * Typically matches the process name.
         * </pre>
         *
         * <code>optional string name = 2;</code>
         * @param value The bytes for name to set.
         * @return This builder for chaining.
         */
        public Builder setNameBytes(
            com.google.protobuf.ByteString value) {
          if (value == null) { throw new NullPointerException(); }
          name_ = value;
          bitField0_ |= 0x00000002;
          onChanged();
          return this;
        }

        private int pid_ ;
        /**
         * <pre>
         * Unix pid of the remote process. Supported only on Linux-based systems.
         * Introduced in v24 / Android T.
         * </pre>
         *
         * <code>optional int32 pid = 5;</code>
         * @return Whether the pid field is set.
         */
        @java.lang.Override
        public boolean hasPid() {
          return ((bitField0_ & 0x00000004) != 0);
        }
        /**
         * <pre>
         * Unix pid of the remote process. Supported only on Linux-based systems.
         * Introduced in v24 / Android T.
         * </pre>
         *
         * <code>optional int32 pid = 5;</code>
         * @return The pid.
         */
        @java.lang.Override
        public int getPid() {
          return pid_;
        }
        /**
         * <pre>
         * Unix pid of the remote process. Supported only on Linux-based systems.
         * Introduced in v24 / Android T.
         * </pre>
         *
         * <code>optional int32 pid = 5;</code>
         * @param value The pid to set.
         * @return This builder for chaining.
         */
        public Builder setPid(int value) {
          
          pid_ = value;
          bitField0_ |= 0x00000004;
          onChanged();
          return this;
        }
        /**
         * <pre>
         * Unix pid of the remote process. Supported only on Linux-based systems.
         * Introduced in v24 / Android T.
         * </pre>
         *
         * <code>optional int32 pid = 5;</code>
         * @return This builder for chaining.
         */
        public Builder clearPid() {
          bitField0_ = (bitField0_ & ~0x00000004);
          pid_ = 0;
          onChanged();
          return this;
        }

        private int uid_ ;
        /**
         * <pre>
         * Unix uid of the remote process.
         * </pre>
         *
         * <code>optional int32 uid = 3;</code>
         * @return Whether the uid field is set.
         */
        @java.lang.Override
        public boolean hasUid() {
          return ((bitField0_ & 0x00000008) != 0);
        }
        /**
         * <pre>
         * Unix uid of the remote process.
         * </pre>
         *
         * <code>optional int32 uid = 3;</code>
         * @return The uid.
         */
        @java.lang.Override
        public int getUid() {
          return uid_;
        }
        /**
         * <pre>
         * Unix uid of the remote process.
         * </pre>
         *
         * <code>optional int32 uid = 3;</code>
         * @param value The uid to set.
         * @return This builder for chaining.
         */
        public Builder setUid(int value) {
          
          uid_ = value;
          bitField0_ |= 0x00000008;
          onChanged();
          return this;
        }
        /**
         * <pre>
         * Unix uid of the remote process.
         * </pre>
         *
         * <code>optional int32 uid = 3;</code>
         * @return This builder for chaining.
         */
        public Builder clearUid() {
          bitField0_ = (bitField0_ & ~0x00000008);
          uid_ = 0;
          onChanged();
          return this;
        }

        private java.lang.Object sdkVersion_ = "";
        /**
         * <pre>
         * The version of the client library used by the producer.
         * This is a human readable string with and its format varies depending on
         * the build system and the repo (standalone vs AOSP).
         * This is intended for human debugging only.
         * </pre>
         *
         * <code>optional string sdk_version = 4;</code>
         * @return Whether the sdkVersion field is set.
         */
        public boolean hasSdkVersion() {
          return ((bitField0_ & 0x00000010) != 0);
        }
        /**
         * <pre>
         * The version of the client library used by the producer.
         * This is a human readable string with and its format varies depending on
         * the build system and the repo (standalone vs AOSP).
         * This is intended for human debugging only.
         * </pre>
         *
         * <code>optional string sdk_version = 4;</code>
         * @return The sdkVersion.
         */
        public java.lang.String getSdkVersion() {
          java.lang.Object ref = sdkVersion_;
          if (!(ref instanceof java.lang.String)) {
            com.google.protobuf.ByteString bs =
                (com.google.protobuf.ByteString) ref;
            java.lang.String s = bs.toStringUtf8();
            if (bs.isValidUtf8()) {
              sdkVersion_ = s;
            }
            return s;
          } else {
            return (java.lang.String) ref;
          }
        }
        /**
         * <pre>
         * The version of the client library used by the producer.
         * This is a human readable string with and its format varies depending on
         * the build system and the repo (standalone vs AOSP).
         * This is intended for human debugging only.
         * </pre>
         *
         * <code>optional string sdk_version = 4;</code>
         * @return The bytes for sdkVersion.
         */
        public com.google.protobuf.ByteString
            getSdkVersionBytes() {
          java.lang.Object ref = sdkVersion_;
          if (ref instanceof String) {
            com.google.protobuf.ByteString b = 
                com.google.protobuf.ByteString.copyFromUtf8(
                    (java.lang.String) ref);
            sdkVersion_ = b;
            return b;
          } else {
            return (com.google.protobuf.ByteString) ref;
          }
        }
        /**
         * <pre>
         * The version of the client library used by the producer.
         * This is a human readable string with and its format varies depending on
         * the build system and the repo (standalone vs AOSP).
         * This is intended for human debugging only.
         * </pre>
         *
         * <code>optional string sdk_version = 4;</code>
         * @param value The sdkVersion to set.
         * @return This builder for chaining.
         */
        public Builder setSdkVersion(
            java.lang.String value) {
          if (value == null) { throw new NullPointerException(); }
          sdkVersion_ = value;
          bitField0_ |= 0x00000010;
          onChanged();
          return this;
        }
        /**
         * <pre>
         * The version of the client library used by the producer.
         * This is a human readable string with and its format varies depending on
         * the build system and the repo (standalone vs AOSP).
         * This is intended for human debugging only.
         * </pre>
         *
         * <code>optional string sdk_version = 4;</code>
         * @return This builder for chaining.
         */
        public Builder clearSdkVersion() {
          sdkVersion_ = getDefaultInstance().getSdkVersion();
          bitField0_ = (bitField0_ & ~0x00000010);
          onChanged();
          return this;
        }
        /**
         * <pre>
         * The version of the client library used by the producer.
         * This is a human readable string with and its format varies depending on
         * the build system and the repo (standalone vs AOSP).
         * This is intended for human debugging only.
         * </pre>
         *
         * <code>optional string sdk_version = 4;</code>
         * @param value The bytes for sdkVersion to set.
         * @return This builder for chaining.
         */
        public Builder setSdkVersionBytes(
            com.google.protobuf.ByteString value) {
          if (value == null) { throw new NullPointerException(); }
          sdkVersion_ = value;
          bitField0_ |= 0x00000010;
          onChanged();
          return this;
        }
        @java.lang.Override
        public final Builder setUnknownFields(
            final com.google.protobuf.UnknownFieldSet unknownFields) {
          return super.setUnknownFields(unknownFields);
        }

        @java.lang.Override
        public final Builder mergeUnknownFields(
            final com.google.protobuf.UnknownFieldSet unknownFields) {
          return super.mergeUnknownFields(unknownFields);
        }


        // @@protoc_insertion_point(builder_scope:perfetto.protos.TracingServiceState.Producer)
      }

      // @@protoc_insertion_point(class_scope:perfetto.protos.TracingServiceState.Producer)
      private static final perfetto.protos.TracingServiceStateOuterClass.TracingServiceState.Producer DEFAULT_INSTANCE;
      static {
        DEFAULT_INSTANCE = new perfetto.protos.TracingServiceStateOuterClass.TracingServiceState.Producer();
      }

      public static perfetto.protos.TracingServiceStateOuterClass.TracingServiceState.Producer getDefaultInstance() {
        return DEFAULT_INSTANCE;
      }

      @java.lang.Deprecated public static final com.google.protobuf.Parser<Producer>
          PARSER = new com.google.protobuf.AbstractParser<Producer>() {
        @java.lang.Override
        public Producer parsePartialFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws com.google.protobuf.InvalidProtocolBufferException {
          Builder builder = newBuilder();
          try {
            builder.mergeFrom(input, extensionRegistry);
          } catch (com.google.protobuf.InvalidProtocolBufferException e) {
            throw e.setUnfinishedMessage(builder.buildPartial());
          } catch (com.google.protobuf.UninitializedMessageException e) {
            throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
          } catch (java.io.IOException e) {
            throw new com.google.protobuf.InvalidProtocolBufferException(e)
                .setUnfinishedMessage(builder.buildPartial());
          }
          return builder.buildPartial();
        }
      };

      public static com.google.protobuf.Parser<Producer> parser() {
        return PARSER;
      }

      @java.lang.Override
      public com.google.protobuf.Parser<Producer> getParserForType() {
        return PARSER;
      }

      @java.lang.Override
      public perfetto.protos.TracingServiceStateOuterClass.TracingServiceState.Producer getDefaultInstanceForType() {
        return DEFAULT_INSTANCE;
      }

    }

    public interface DataSourceOrBuilder extends
        // @@protoc_insertion_point(interface_extends:perfetto.protos.TracingServiceState.DataSource)
        com.google.protobuf.MessageOrBuilder {

      /**
       * <pre>
       * Descriptor passed by the data source when calling RegisterDataSource().
       * </pre>
       *
       * <code>optional .perfetto.protos.DataSourceDescriptor ds_descriptor = 1;</code>
       * @return Whether the dsDescriptor field is set.
       */
      boolean hasDsDescriptor();
      /**
       * <pre>
       * Descriptor passed by the data source when calling RegisterDataSource().
       * </pre>
       *
       * <code>optional .perfetto.protos.DataSourceDescriptor ds_descriptor = 1;</code>
       * @return The dsDescriptor.
       */
      perfetto.protos.DataSourceDescriptorOuterClass.DataSourceDescriptor getDsDescriptor();
      /**
       * <pre>
       * Descriptor passed by the data source when calling RegisterDataSource().
       * </pre>
       *
       * <code>optional .perfetto.protos.DataSourceDescriptor ds_descriptor = 1;</code>
       */
      perfetto.protos.DataSourceDescriptorOuterClass.DataSourceDescriptorOrBuilder getDsDescriptorOrBuilder();

      /**
       * <pre>
       * ID of the producer, as per Producer.id.
       * </pre>
       *
       * <code>optional int32 producer_id = 2;</code>
       * @return Whether the producerId field is set.
       */
      boolean hasProducerId();
      /**
       * <pre>
       * ID of the producer, as per Producer.id.
       * </pre>
       *
       * <code>optional int32 producer_id = 2;</code>
       * @return The producerId.
       */
      int getProducerId();
    }
    /**
     * <pre>
     * Describes a data source registered by a producer. Data sources are listed
     * regardless of the fact that they are being used or not.
     * </pre>
     *
     * Protobuf type {@code perfetto.protos.TracingServiceState.DataSource}
     */
    public static final class DataSource extends
        com.google.protobuf.GeneratedMessageV3 implements
        // @@protoc_insertion_point(message_implements:perfetto.protos.TracingServiceState.DataSource)
        DataSourceOrBuilder {
    private static final long serialVersionUID = 0L;
      // Use DataSource.newBuilder() to construct.
      private DataSource(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
        super(builder);
      }
      private DataSource() {
      }

      @java.lang.Override
      @SuppressWarnings({"unused"})
      protected java.lang.Object newInstance(
          UnusedPrivateParameter unused) {
        return new DataSource();
      }

      @java.lang.Override
      public final com.google.protobuf.UnknownFieldSet
      getUnknownFields() {
        return this.unknownFields;
      }
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return perfetto.protos.TracingServiceStateOuterClass.internal_static_perfetto_protos_TracingServiceState_DataSource_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return perfetto.protos.TracingServiceStateOuterClass.internal_static_perfetto_protos_TracingServiceState_DataSource_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                perfetto.protos.TracingServiceStateOuterClass.TracingServiceState.DataSource.class, perfetto.protos.TracingServiceStateOuterClass.TracingServiceState.DataSource.Builder.class);
      }

      private int bitField0_;
      public static final int DS_DESCRIPTOR_FIELD_NUMBER = 1;
      private perfetto.protos.DataSourceDescriptorOuterClass.DataSourceDescriptor dsDescriptor_;
      /**
       * <pre>
       * Descriptor passed by the data source when calling RegisterDataSource().
       * </pre>
       *
       * <code>optional .perfetto.protos.DataSourceDescriptor ds_descriptor = 1;</code>
       * @return Whether the dsDescriptor field is set.
       */
      @java.lang.Override
      public boolean hasDsDescriptor() {
        return ((bitField0_ & 0x00000001) != 0);
      }
      /**
       * <pre>
       * Descriptor passed by the data source when calling RegisterDataSource().
       * </pre>
       *
       * <code>optional .perfetto.protos.DataSourceDescriptor ds_descriptor = 1;</code>
       * @return The dsDescriptor.
       */
      @java.lang.Override
      public perfetto.protos.DataSourceDescriptorOuterClass.DataSourceDescriptor getDsDescriptor() {
        return dsDescriptor_ == null ? perfetto.protos.DataSourceDescriptorOuterClass.DataSourceDescriptor.getDefaultInstance() : dsDescriptor_;
      }
      /**
       * <pre>
       * Descriptor passed by the data source when calling RegisterDataSource().
       * </pre>
       *
       * <code>optional .perfetto.protos.DataSourceDescriptor ds_descriptor = 1;</code>
       */
      @java.lang.Override
      public perfetto.protos.DataSourceDescriptorOuterClass.DataSourceDescriptorOrBuilder getDsDescriptorOrBuilder() {
        return dsDescriptor_ == null ? perfetto.protos.DataSourceDescriptorOuterClass.DataSourceDescriptor.getDefaultInstance() : dsDescriptor_;
      }

      public static final int PRODUCER_ID_FIELD_NUMBER = 2;
      private int producerId_ = 0;
      /**
       * <pre>
       * ID of the producer, as per Producer.id.
       * </pre>
       *
       * <code>optional int32 producer_id = 2;</code>
       * @return Whether the producerId field is set.
       */
      @java.lang.Override
      public boolean hasProducerId() {
        return ((bitField0_ & 0x00000002) != 0);
      }
      /**
       * <pre>
       * ID of the producer, as per Producer.id.
       * </pre>
       *
       * <code>optional int32 producer_id = 2;</code>
       * @return The producerId.
       */
      @java.lang.Override
      public int getProducerId() {
        return producerId_;
      }

      private byte memoizedIsInitialized = -1;
      @java.lang.Override
      public final boolean isInitialized() {
        byte isInitialized = memoizedIsInitialized;
        if (isInitialized == 1) return true;
        if (isInitialized == 0) return false;

        memoizedIsInitialized = 1;
        return true;
      }

      @java.lang.Override
      public void writeTo(com.google.protobuf.CodedOutputStream output)
                          throws java.io.IOException {
        if (((bitField0_ & 0x00000001) != 0)) {
          output.writeMessage(1, getDsDescriptor());
        }
        if (((bitField0_ & 0x00000002) != 0)) {
          output.writeInt32(2, producerId_);
        }
        getUnknownFields().writeTo(output);
      }

      @java.lang.Override
      public int getSerializedSize() {
        int size = memoizedSize;
        if (size != -1) return size;

        size = 0;
        if (((bitField0_ & 0x00000001) != 0)) {
          size += com.google.protobuf.CodedOutputStream
            .computeMessageSize(1, getDsDescriptor());
        }
        if (((bitField0_ & 0x00000002) != 0)) {
          size += com.google.protobuf.CodedOutputStream
            .computeInt32Size(2, producerId_);
        }
        size += getUnknownFields().getSerializedSize();
        memoizedSize = size;
        return size;
      }

      @java.lang.Override
      public boolean equals(final java.lang.Object obj) {
        if (obj == this) {
         return true;
        }
        if (!(obj instanceof perfetto.protos.TracingServiceStateOuterClass.TracingServiceState.DataSource)) {
          return super.equals(obj);
        }
        perfetto.protos.TracingServiceStateOuterClass.TracingServiceState.DataSource other = (perfetto.protos.TracingServiceStateOuterClass.TracingServiceState.DataSource) obj;

        if (hasDsDescriptor() != other.hasDsDescriptor()) return false;
        if (hasDsDescriptor()) {
          if (!getDsDescriptor()
              .equals(other.getDsDescriptor())) return false;
        }
        if (hasProducerId() != other.hasProducerId()) return false;
        if (hasProducerId()) {
          if (getProducerId()
              != other.getProducerId()) return false;
        }
        if (!getUnknownFields().equals(other.getUnknownFields())) return false;
        return true;
      }

      @java.lang.Override
      public int hashCode() {
        if (memoizedHashCode != 0) {
          return memoizedHashCode;
        }
        int hash = 41;
        hash = (19 * hash) + getDescriptor().hashCode();
        if (hasDsDescriptor()) {
          hash = (37 * hash) + DS_DESCRIPTOR_FIELD_NUMBER;
          hash = (53 * hash) + getDsDescriptor().hashCode();
        }
        if (hasProducerId()) {
          hash = (37 * hash) + PRODUCER_ID_FIELD_NUMBER;
          hash = (53 * hash) + getProducerId();
        }
        hash = (29 * hash) + getUnknownFields().hashCode();
        memoizedHashCode = hash;
        return hash;
      }

      public static perfetto.protos.TracingServiceStateOuterClass.TracingServiceState.DataSource parseFrom(
          java.nio.ByteBuffer data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static perfetto.protos.TracingServiceStateOuterClass.TracingServiceState.DataSource parseFrom(
          java.nio.ByteBuffer data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static perfetto.protos.TracingServiceStateOuterClass.TracingServiceState.DataSource parseFrom(
          com.google.protobuf.ByteString data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static perfetto.protos.TracingServiceStateOuterClass.TracingServiceState.DataSource parseFrom(
          com.google.protobuf.ByteString data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static perfetto.protos.TracingServiceStateOuterClass.TracingServiceState.DataSource parseFrom(byte[] data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static perfetto.protos.TracingServiceStateOuterClass.TracingServiceState.DataSource parseFrom(
          byte[] data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static perfetto.protos.TracingServiceStateOuterClass.TracingServiceState.DataSource parseFrom(java.io.InputStream input)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseWithIOException(PARSER, input);
      }
      public static perfetto.protos.TracingServiceStateOuterClass.TracingServiceState.DataSource parseFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseWithIOException(PARSER, input, extensionRegistry);
      }
      public static perfetto.protos.TracingServiceStateOuterClass.TracingServiceState.DataSource parseDelimitedFrom(java.io.InputStream input)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseDelimitedWithIOException(PARSER, input);
      }
      public static perfetto.protos.TracingServiceStateOuterClass.TracingServiceState.DataSource parseDelimitedFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
      }
      public static perfetto.protos.TracingServiceStateOuterClass.TracingServiceState.DataSource parseFrom(
          com.google.protobuf.CodedInputStream input)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseWithIOException(PARSER, input);
      }
      public static perfetto.protos.TracingServiceStateOuterClass.TracingServiceState.DataSource parseFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseWithIOException(PARSER, input, extensionRegistry);
      }

      @java.lang.Override
      public Builder newBuilderForType() { return newBuilder(); }
      public static Builder newBuilder() {
        return DEFAULT_INSTANCE.toBuilder();
      }
      public static Builder newBuilder(perfetto.protos.TracingServiceStateOuterClass.TracingServiceState.DataSource prototype) {
        return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
      }
      @java.lang.Override
      public Builder toBuilder() {
        return this == DEFAULT_INSTANCE
            ? new Builder() : new Builder().mergeFrom(this);
      }

      @java.lang.Override
      protected Builder newBuilderForType(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        Builder builder = new Builder(parent);
        return builder;
      }
      /**
       * <pre>
       * Describes a data source registered by a producer. Data sources are listed
       * regardless of the fact that they are being used or not.
       * </pre>
       *
       * Protobuf type {@code perfetto.protos.TracingServiceState.DataSource}
       */
      public static final class Builder extends
          com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
          // @@protoc_insertion_point(builder_implements:perfetto.protos.TracingServiceState.DataSource)
          perfetto.protos.TracingServiceStateOuterClass.TracingServiceState.DataSourceOrBuilder {
        public static final com.google.protobuf.Descriptors.Descriptor
            getDescriptor() {
          return perfetto.protos.TracingServiceStateOuterClass.internal_static_perfetto_protos_TracingServiceState_DataSource_descriptor;
        }

        @java.lang.Override
        protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
            internalGetFieldAccessorTable() {
          return perfetto.protos.TracingServiceStateOuterClass.internal_static_perfetto_protos_TracingServiceState_DataSource_fieldAccessorTable
              .ensureFieldAccessorsInitialized(
                  perfetto.protos.TracingServiceStateOuterClass.TracingServiceState.DataSource.class, perfetto.protos.TracingServiceStateOuterClass.TracingServiceState.DataSource.Builder.class);
        }

        // Construct using perfetto.protos.TracingServiceStateOuterClass.TracingServiceState.DataSource.newBuilder()
        private Builder() {
          maybeForceBuilderInitialization();
        }

        private Builder(
            com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
          super(parent);
          maybeForceBuilderInitialization();
        }
        private void maybeForceBuilderInitialization() {
          if (com.google.protobuf.GeneratedMessageV3
                  .alwaysUseFieldBuilders) {
            getDsDescriptorFieldBuilder();
          }
        }
        @java.lang.Override
        public Builder clear() {
          super.clear();
          bitField0_ = 0;
          dsDescriptor_ = null;
          if (dsDescriptorBuilder_ != null) {
            dsDescriptorBuilder_.dispose();
            dsDescriptorBuilder_ = null;
          }
          producerId_ = 0;
          return this;
        }

        @java.lang.Override
        public com.google.protobuf.Descriptors.Descriptor
            getDescriptorForType() {
          return perfetto.protos.TracingServiceStateOuterClass.internal_static_perfetto_protos_TracingServiceState_DataSource_descriptor;
        }

        @java.lang.Override
        public perfetto.protos.TracingServiceStateOuterClass.TracingServiceState.DataSource getDefaultInstanceForType() {
          return perfetto.protos.TracingServiceStateOuterClass.TracingServiceState.DataSource.getDefaultInstance();
        }

        @java.lang.Override
        public perfetto.protos.TracingServiceStateOuterClass.TracingServiceState.DataSource build() {
          perfetto.protos.TracingServiceStateOuterClass.TracingServiceState.DataSource result = buildPartial();
          if (!result.isInitialized()) {
            throw newUninitializedMessageException(result);
          }
          return result;
        }

        @java.lang.Override
        public perfetto.protos.TracingServiceStateOuterClass.TracingServiceState.DataSource buildPartial() {
          perfetto.protos.TracingServiceStateOuterClass.TracingServiceState.DataSource result = new perfetto.protos.TracingServiceStateOuterClass.TracingServiceState.DataSource(this);
          if (bitField0_ != 0) { buildPartial0(result); }
          onBuilt();
          return result;
        }

        private void buildPartial0(perfetto.protos.TracingServiceStateOuterClass.TracingServiceState.DataSource result) {
          int from_bitField0_ = bitField0_;
          int to_bitField0_ = 0;
          if (((from_bitField0_ & 0x00000001) != 0)) {
            result.dsDescriptor_ = dsDescriptorBuilder_ == null
                ? dsDescriptor_
                : dsDescriptorBuilder_.build();
            to_bitField0_ |= 0x00000001;
          }
          if (((from_bitField0_ & 0x00000002) != 0)) {
            result.producerId_ = producerId_;
            to_bitField0_ |= 0x00000002;
          }
          result.bitField0_ |= to_bitField0_;
        }

        @java.lang.Override
        public Builder clone() {
          return super.clone();
        }
        @java.lang.Override
        public Builder setField(
            com.google.protobuf.Descriptors.FieldDescriptor field,
            java.lang.Object value) {
          return super.setField(field, value);
        }
        @java.lang.Override
        public Builder clearField(
            com.google.protobuf.Descriptors.FieldDescriptor field) {
          return super.clearField(field);
        }
        @java.lang.Override
        public Builder clearOneof(
            com.google.protobuf.Descriptors.OneofDescriptor oneof) {
          return super.clearOneof(oneof);
        }
        @java.lang.Override
        public Builder setRepeatedField(
            com.google.protobuf.Descriptors.FieldDescriptor field,
            int index, java.lang.Object value) {
          return super.setRepeatedField(field, index, value);
        }
        @java.lang.Override
        public Builder addRepeatedField(
            com.google.protobuf.Descriptors.FieldDescriptor field,
            java.lang.Object value) {
          return super.addRepeatedField(field, value);
        }
        @java.lang.Override
        public Builder mergeFrom(com.google.protobuf.Message other) {
          if (other instanceof perfetto.protos.TracingServiceStateOuterClass.TracingServiceState.DataSource) {
            return mergeFrom((perfetto.protos.TracingServiceStateOuterClass.TracingServiceState.DataSource)other);
          } else {
            super.mergeFrom(other);
            return this;
          }
        }

        public Builder mergeFrom(perfetto.protos.TracingServiceStateOuterClass.TracingServiceState.DataSource other) {
          if (other == perfetto.protos.TracingServiceStateOuterClass.TracingServiceState.DataSource.getDefaultInstance()) return this;
          if (other.hasDsDescriptor()) {
            mergeDsDescriptor(other.getDsDescriptor());
          }
          if (other.hasProducerId()) {
            setProducerId(other.getProducerId());
          }
          this.mergeUnknownFields(other.getUnknownFields());
          onChanged();
          return this;
        }

        @java.lang.Override
        public final boolean isInitialized() {
          return true;
        }

        @java.lang.Override
        public Builder mergeFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws java.io.IOException {
          if (extensionRegistry == null) {
            throw new java.lang.NullPointerException();
          }
          try {
            boolean done = false;
            while (!done) {
              int tag = input.readTag();
              switch (tag) {
                case 0:
                  done = true;
                  break;
                case 10: {
                  input.readMessage(
                      getDsDescriptorFieldBuilder().getBuilder(),
                      extensionRegistry);
                  bitField0_ |= 0x00000001;
                  break;
                } // case 10
                case 16: {
                  producerId_ = input.readInt32();
                  bitField0_ |= 0x00000002;
                  break;
                } // case 16
                default: {
                  if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                    done = true; // was an endgroup tag
                  }
                  break;
                } // default:
              } // switch (tag)
            } // while (!done)
          } catch (com.google.protobuf.InvalidProtocolBufferException e) {
            throw e.unwrapIOException();
          } finally {
            onChanged();
          } // finally
          return this;
        }
        private int bitField0_;

        private perfetto.protos.DataSourceDescriptorOuterClass.DataSourceDescriptor dsDescriptor_;
        private com.google.protobuf.SingleFieldBuilderV3<
            perfetto.protos.DataSourceDescriptorOuterClass.DataSourceDescriptor, perfetto.protos.DataSourceDescriptorOuterClass.DataSourceDescriptor.Builder, perfetto.protos.DataSourceDescriptorOuterClass.DataSourceDescriptorOrBuilder> dsDescriptorBuilder_;
        /**
         * <pre>
         * Descriptor passed by the data source when calling RegisterDataSource().
         * </pre>
         *
         * <code>optional .perfetto.protos.DataSourceDescriptor ds_descriptor = 1;</code>
         * @return Whether the dsDescriptor field is set.
         */
        public boolean hasDsDescriptor() {
          return ((bitField0_ & 0x00000001) != 0);
        }
        /**
         * <pre>
         * Descriptor passed by the data source when calling RegisterDataSource().
         * </pre>
         *
         * <code>optional .perfetto.protos.DataSourceDescriptor ds_descriptor = 1;</code>
         * @return The dsDescriptor.
         */
        public perfetto.protos.DataSourceDescriptorOuterClass.DataSourceDescriptor getDsDescriptor() {
          if (dsDescriptorBuilder_ == null) {
            return dsDescriptor_ == null ? perfetto.protos.DataSourceDescriptorOuterClass.DataSourceDescriptor.getDefaultInstance() : dsDescriptor_;
          } else {
            return dsDescriptorBuilder_.getMessage();
          }
        }
        /**
         * <pre>
         * Descriptor passed by the data source when calling RegisterDataSource().
         * </pre>
         *
         * <code>optional .perfetto.protos.DataSourceDescriptor ds_descriptor = 1;</code>
         */
        public Builder setDsDescriptor(perfetto.protos.DataSourceDescriptorOuterClass.DataSourceDescriptor value) {
          if (dsDescriptorBuilder_ == null) {
            if (value == null) {
              throw new NullPointerException();
            }
            dsDescriptor_ = value;
          } else {
            dsDescriptorBuilder_.setMessage(value);
          }
          bitField0_ |= 0x00000001;
          onChanged();
          return this;
        }
        /**
         * <pre>
         * Descriptor passed by the data source when calling RegisterDataSource().
         * </pre>
         *
         * <code>optional .perfetto.protos.DataSourceDescriptor ds_descriptor = 1;</code>
         */
        public Builder setDsDescriptor(
            perfetto.protos.DataSourceDescriptorOuterClass.DataSourceDescriptor.Builder builderForValue) {
          if (dsDescriptorBuilder_ == null) {
            dsDescriptor_ = builderForValue.build();
          } else {
            dsDescriptorBuilder_.setMessage(builderForValue.build());
          }
          bitField0_ |= 0x00000001;
          onChanged();
          return this;
        }
        /**
         * <pre>
         * Descriptor passed by the data source when calling RegisterDataSource().
         * </pre>
         *
         * <code>optional .perfetto.protos.DataSourceDescriptor ds_descriptor = 1;</code>
         */
        public Builder mergeDsDescriptor(perfetto.protos.DataSourceDescriptorOuterClass.DataSourceDescriptor value) {
          if (dsDescriptorBuilder_ == null) {
            if (((bitField0_ & 0x00000001) != 0) &&
              dsDescriptor_ != null &&
              dsDescriptor_ != perfetto.protos.DataSourceDescriptorOuterClass.DataSourceDescriptor.getDefaultInstance()) {
              getDsDescriptorBuilder().mergeFrom(value);
            } else {
              dsDescriptor_ = value;
            }
          } else {
            dsDescriptorBuilder_.mergeFrom(value);
          }
          bitField0_ |= 0x00000001;
          onChanged();
          return this;
        }
        /**
         * <pre>
         * Descriptor passed by the data source when calling RegisterDataSource().
         * </pre>
         *
         * <code>optional .perfetto.protos.DataSourceDescriptor ds_descriptor = 1;</code>
         */
        public Builder clearDsDescriptor() {
          bitField0_ = (bitField0_ & ~0x00000001);
          dsDescriptor_ = null;
          if (dsDescriptorBuilder_ != null) {
            dsDescriptorBuilder_.dispose();
            dsDescriptorBuilder_ = null;
          }
          onChanged();
          return this;
        }
        /**
         * <pre>
         * Descriptor passed by the data source when calling RegisterDataSource().
         * </pre>
         *
         * <code>optional .perfetto.protos.DataSourceDescriptor ds_descriptor = 1;</code>
         */
        public perfetto.protos.DataSourceDescriptorOuterClass.DataSourceDescriptor.Builder getDsDescriptorBuilder() {
          bitField0_ |= 0x00000001;
          onChanged();
          return getDsDescriptorFieldBuilder().getBuilder();
        }
        /**
         * <pre>
         * Descriptor passed by the data source when calling RegisterDataSource().
         * </pre>
         *
         * <code>optional .perfetto.protos.DataSourceDescriptor ds_descriptor = 1;</code>
         */
        public perfetto.protos.DataSourceDescriptorOuterClass.DataSourceDescriptorOrBuilder getDsDescriptorOrBuilder() {
          if (dsDescriptorBuilder_ != null) {
            return dsDescriptorBuilder_.getMessageOrBuilder();
          } else {
            return dsDescriptor_ == null ?
                perfetto.protos.DataSourceDescriptorOuterClass.DataSourceDescriptor.getDefaultInstance() : dsDescriptor_;
          }
        }
        /**
         * <pre>
         * Descriptor passed by the data source when calling RegisterDataSource().
         * </pre>
         *
         * <code>optional .perfetto.protos.DataSourceDescriptor ds_descriptor = 1;</code>
         */
        private com.google.protobuf.SingleFieldBuilderV3<
            perfetto.protos.DataSourceDescriptorOuterClass.DataSourceDescriptor, perfetto.protos.DataSourceDescriptorOuterClass.DataSourceDescriptor.Builder, perfetto.protos.DataSourceDescriptorOuterClass.DataSourceDescriptorOrBuilder> 
            getDsDescriptorFieldBuilder() {
          if (dsDescriptorBuilder_ == null) {
            dsDescriptorBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
                perfetto.protos.DataSourceDescriptorOuterClass.DataSourceDescriptor, perfetto.protos.DataSourceDescriptorOuterClass.DataSourceDescriptor.Builder, perfetto.protos.DataSourceDescriptorOuterClass.DataSourceDescriptorOrBuilder>(
                    getDsDescriptor(),
                    getParentForChildren(),
                    isClean());
            dsDescriptor_ = null;
          }
          return dsDescriptorBuilder_;
        }

        private int producerId_ ;
        /**
         * <pre>
         * ID of the producer, as per Producer.id.
         * </pre>
         *
         * <code>optional int32 producer_id = 2;</code>
         * @return Whether the producerId field is set.
         */
        @java.lang.Override
        public boolean hasProducerId() {
          return ((bitField0_ & 0x00000002) != 0);
        }
        /**
         * <pre>
         * ID of the producer, as per Producer.id.
         * </pre>
         *
         * <code>optional int32 producer_id = 2;</code>
         * @return The producerId.
         */
        @java.lang.Override
        public int getProducerId() {
          return producerId_;
        }
        /**
         * <pre>
         * ID of the producer, as per Producer.id.
         * </pre>
         *
         * <code>optional int32 producer_id = 2;</code>
         * @param value The producerId to set.
         * @return This builder for chaining.
         */
        public Builder setProducerId(int value) {
          
          producerId_ = value;
          bitField0_ |= 0x00000002;
          onChanged();
          return this;
        }
        /**
         * <pre>
         * ID of the producer, as per Producer.id.
         * </pre>
         *
         * <code>optional int32 producer_id = 2;</code>
         * @return This builder for chaining.
         */
        public Builder clearProducerId() {
          bitField0_ = (bitField0_ & ~0x00000002);
          producerId_ = 0;
          onChanged();
          return this;
        }
        @java.lang.Override
        public final Builder setUnknownFields(
            final com.google.protobuf.UnknownFieldSet unknownFields) {
          return super.setUnknownFields(unknownFields);
        }

        @java.lang.Override
        public final Builder mergeUnknownFields(
            final com.google.protobuf.UnknownFieldSet unknownFields) {
          return super.mergeUnknownFields(unknownFields);
        }


        // @@protoc_insertion_point(builder_scope:perfetto.protos.TracingServiceState.DataSource)
      }

      // @@protoc_insertion_point(class_scope:perfetto.protos.TracingServiceState.DataSource)
      private static final perfetto.protos.TracingServiceStateOuterClass.TracingServiceState.DataSource DEFAULT_INSTANCE;
      static {
        DEFAULT_INSTANCE = new perfetto.protos.TracingServiceStateOuterClass.TracingServiceState.DataSource();
      }

      public static perfetto.protos.TracingServiceStateOuterClass.TracingServiceState.DataSource getDefaultInstance() {
        return DEFAULT_INSTANCE;
      }

      @java.lang.Deprecated public static final com.google.protobuf.Parser<DataSource>
          PARSER = new com.google.protobuf.AbstractParser<DataSource>() {
        @java.lang.Override
        public DataSource parsePartialFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws com.google.protobuf.InvalidProtocolBufferException {
          Builder builder = newBuilder();
          try {
            builder.mergeFrom(input, extensionRegistry);
          } catch (com.google.protobuf.InvalidProtocolBufferException e) {
            throw e.setUnfinishedMessage(builder.buildPartial());
          } catch (com.google.protobuf.UninitializedMessageException e) {
            throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
          } catch (java.io.IOException e) {
            throw new com.google.protobuf.InvalidProtocolBufferException(e)
                .setUnfinishedMessage(builder.buildPartial());
          }
          return builder.buildPartial();
        }
      };

      public static com.google.protobuf.Parser<DataSource> parser() {
        return PARSER;
      }

      @java.lang.Override
      public com.google.protobuf.Parser<DataSource> getParserForType() {
        return PARSER;
      }

      @java.lang.Override
      public perfetto.protos.TracingServiceStateOuterClass.TracingServiceState.DataSource getDefaultInstanceForType() {
        return DEFAULT_INSTANCE;
      }

    }

    public interface TracingSessionOrBuilder extends
        // @@protoc_insertion_point(interface_extends:perfetto.protos.TracingServiceState.TracingSession)
        com.google.protobuf.MessageOrBuilder {

      /**
       * <pre>
       * The TracingSessionID.
       * </pre>
       *
       * <code>optional uint64 id = 1;</code>
       * @return Whether the id field is set.
       */
      boolean hasId();
      /**
       * <pre>
       * The TracingSessionID.
       * </pre>
       *
       * <code>optional uint64 id = 1;</code>
       * @return The id.
       */
      long getId();

      /**
       * <pre>
       * The Unix uid of the consumer that started the session.
       * This is meaningful only if the caller is root. In all other cases only
       * tracing sessions that match the caller UID will be displayed.
       * </pre>
       *
       * <code>optional int32 consumer_uid = 2;</code>
       * @return Whether the consumerUid field is set.
       */
      boolean hasConsumerUid();
      /**
       * <pre>
       * The Unix uid of the consumer that started the session.
       * This is meaningful only if the caller is root. In all other cases only
       * tracing sessions that match the caller UID will be displayed.
       * </pre>
       *
       * <code>optional int32 consumer_uid = 2;</code>
       * @return The consumerUid.
       */
      int getConsumerUid();

      /**
       * <pre>
       * Internal state of the tracing session.
       * These strings are FYI only and subjected to change.
       * </pre>
       *
       * <code>optional string state = 3;</code>
       * @return Whether the state field is set.
       */
      boolean hasState();
      /**
       * <pre>
       * Internal state of the tracing session.
       * These strings are FYI only and subjected to change.
       * </pre>
       *
       * <code>optional string state = 3;</code>
       * @return The state.
       */
      java.lang.String getState();
      /**
       * <pre>
       * Internal state of the tracing session.
       * These strings are FYI only and subjected to change.
       * </pre>
       *
       * <code>optional string state = 3;</code>
       * @return The bytes for state.
       */
      com.google.protobuf.ByteString
          getStateBytes();

      /**
       * <pre>
       * The unique_session_name as set in the trace config (might be empty).
       * </pre>
       *
       * <code>optional string unique_session_name = 4;</code>
       * @return Whether the uniqueSessionName field is set.
       */
      boolean hasUniqueSessionName();
      /**
       * <pre>
       * The unique_session_name as set in the trace config (might be empty).
       * </pre>
       *
       * <code>optional string unique_session_name = 4;</code>
       * @return The uniqueSessionName.
       */
      java.lang.String getUniqueSessionName();
      /**
       * <pre>
       * The unique_session_name as set in the trace config (might be empty).
       * </pre>
       *
       * <code>optional string unique_session_name = 4;</code>
       * @return The bytes for uniqueSessionName.
       */
      com.google.protobuf.ByteString
          getUniqueSessionNameBytes();

      /**
       * <pre>
       * The number and size of each buffer.
       * </pre>
       *
       * <code>repeated uint32 buffer_size_kb = 5;</code>
       * @return A list containing the bufferSizeKb.
       */
      java.util.List<java.lang.Integer> getBufferSizeKbList();
      /**
       * <pre>
       * The number and size of each buffer.
       * </pre>
       *
       * <code>repeated uint32 buffer_size_kb = 5;</code>
       * @return The count of bufferSizeKb.
       */
      int getBufferSizeKbCount();
      /**
       * <pre>
       * The number and size of each buffer.
       * </pre>
       *
       * <code>repeated uint32 buffer_size_kb = 5;</code>
       * @param index The index of the element to return.
       * @return The bufferSizeKb at the given index.
       */
      int getBufferSizeKb(int index);

      /**
       * <pre>
       * Duration, as specified in the TraceConfig.duration_ms.
       * </pre>
       *
       * <code>optional uint32 duration_ms = 6;</code>
       * @return Whether the durationMs field is set.
       */
      boolean hasDurationMs();
      /**
       * <pre>
       * Duration, as specified in the TraceConfig.duration_ms.
       * </pre>
       *
       * <code>optional uint32 duration_ms = 6;</code>
       * @return The durationMs.
       */
      int getDurationMs();

      /**
       * <pre>
       * Number of data sources involved in the session.
       * </pre>
       *
       * <code>optional uint32 num_data_sources = 7;</code>
       * @return Whether the numDataSources field is set.
       */
      boolean hasNumDataSources();
      /**
       * <pre>
       * Number of data sources involved in the session.
       * </pre>
       *
       * <code>optional uint32 num_data_sources = 7;</code>
       * @return The numDataSources.
       */
      int getNumDataSources();

      /**
       * <pre>
       * Time when the session was started, in the CLOCK_REALTIME domain.
       * Available only on Linux-based systems.
       * </pre>
       *
       * <code>optional int64 start_realtime_ns = 8;</code>
       * @return Whether the startRealtimeNs field is set.
       */
      boolean hasStartRealtimeNs();
      /**
       * <pre>
       * Time when the session was started, in the CLOCK_REALTIME domain.
       * Available only on Linux-based systems.
       * </pre>
       *
       * <code>optional int64 start_realtime_ns = 8;</code>
       * @return The startRealtimeNs.
       */
      long getStartRealtimeNs();
    }
    /**
     * Protobuf type {@code perfetto.protos.TracingServiceState.TracingSession}
     */
    public static final class TracingSession extends
        com.google.protobuf.GeneratedMessageV3 implements
        // @@protoc_insertion_point(message_implements:perfetto.protos.TracingServiceState.TracingSession)
        TracingSessionOrBuilder {
    private static final long serialVersionUID = 0L;
      // Use TracingSession.newBuilder() to construct.
      private TracingSession(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
        super(builder);
      }
      private TracingSession() {
        state_ = "";
        uniqueSessionName_ = "";
        bufferSizeKb_ = emptyIntList();
      }

      @java.lang.Override
      @SuppressWarnings({"unused"})
      protected java.lang.Object newInstance(
          UnusedPrivateParameter unused) {
        return new TracingSession();
      }

      @java.lang.Override
      public final com.google.protobuf.UnknownFieldSet
      getUnknownFields() {
        return this.unknownFields;
      }
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return perfetto.protos.TracingServiceStateOuterClass.internal_static_perfetto_protos_TracingServiceState_TracingSession_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return perfetto.protos.TracingServiceStateOuterClass.internal_static_perfetto_protos_TracingServiceState_TracingSession_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                perfetto.protos.TracingServiceStateOuterClass.TracingServiceState.TracingSession.class, perfetto.protos.TracingServiceStateOuterClass.TracingServiceState.TracingSession.Builder.class);
      }

      private int bitField0_;
      public static final int ID_FIELD_NUMBER = 1;
      private long id_ = 0L;
      /**
       * <pre>
       * The TracingSessionID.
       * </pre>
       *
       * <code>optional uint64 id = 1;</code>
       * @return Whether the id field is set.
       */
      @java.lang.Override
      public boolean hasId() {
        return ((bitField0_ & 0x00000001) != 0);
      }
      /**
       * <pre>
       * The TracingSessionID.
       * </pre>
       *
       * <code>optional uint64 id = 1;</code>
       * @return The id.
       */
      @java.lang.Override
      public long getId() {
        return id_;
      }

      public static final int CONSUMER_UID_FIELD_NUMBER = 2;
      private int consumerUid_ = 0;
      /**
       * <pre>
       * The Unix uid of the consumer that started the session.
       * This is meaningful only if the caller is root. In all other cases only
       * tracing sessions that match the caller UID will be displayed.
       * </pre>
       *
       * <code>optional int32 consumer_uid = 2;</code>
       * @return Whether the consumerUid field is set.
       */
      @java.lang.Override
      public boolean hasConsumerUid() {
        return ((bitField0_ & 0x00000002) != 0);
      }
      /**
       * <pre>
       * The Unix uid of the consumer that started the session.
       * This is meaningful only if the caller is root. In all other cases only
       * tracing sessions that match the caller UID will be displayed.
       * </pre>
       *
       * <code>optional int32 consumer_uid = 2;</code>
       * @return The consumerUid.
       */
      @java.lang.Override
      public int getConsumerUid() {
        return consumerUid_;
      }

      public static final int STATE_FIELD_NUMBER = 3;
      @SuppressWarnings("serial")
      private volatile java.lang.Object state_ = "";
      /**
       * <pre>
       * Internal state of the tracing session.
       * These strings are FYI only and subjected to change.
       * </pre>
       *
       * <code>optional string state = 3;</code>
       * @return Whether the state field is set.
       */
      @java.lang.Override
      public boolean hasState() {
        return ((bitField0_ & 0x00000004) != 0);
      }
      /**
       * <pre>
       * Internal state of the tracing session.
       * These strings are FYI only and subjected to change.
       * </pre>
       *
       * <code>optional string state = 3;</code>
       * @return The state.
       */
      @java.lang.Override
      public java.lang.String getState() {
        java.lang.Object ref = state_;
        if (ref instanceof java.lang.String) {
          return (java.lang.String) ref;
        } else {
          com.google.protobuf.ByteString bs = 
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          if (bs.isValidUtf8()) {
            state_ = s;
          }
          return s;
        }
      }
      /**
       * <pre>
       * Internal state of the tracing session.
       * These strings are FYI only and subjected to change.
       * </pre>
       *
       * <code>optional string state = 3;</code>
       * @return The bytes for state.
       */
      @java.lang.Override
      public com.google.protobuf.ByteString
          getStateBytes() {
        java.lang.Object ref = state_;
        if (ref instanceof java.lang.String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          state_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }

      public static final int UNIQUE_SESSION_NAME_FIELD_NUMBER = 4;
      @SuppressWarnings("serial")
      private volatile java.lang.Object uniqueSessionName_ = "";
      /**
       * <pre>
       * The unique_session_name as set in the trace config (might be empty).
       * </pre>
       *
       * <code>optional string unique_session_name = 4;</code>
       * @return Whether the uniqueSessionName field is set.
       */
      @java.lang.Override
      public boolean hasUniqueSessionName() {
        return ((bitField0_ & 0x00000008) != 0);
      }
      /**
       * <pre>
       * The unique_session_name as set in the trace config (might be empty).
       * </pre>
       *
       * <code>optional string unique_session_name = 4;</code>
       * @return The uniqueSessionName.
       */
      @java.lang.Override
      public java.lang.String getUniqueSessionName() {
        java.lang.Object ref = uniqueSessionName_;
        if (ref instanceof java.lang.String) {
          return (java.lang.String) ref;
        } else {
          com.google.protobuf.ByteString bs = 
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          if (bs.isValidUtf8()) {
            uniqueSessionName_ = s;
          }
          return s;
        }
      }
      /**
       * <pre>
       * The unique_session_name as set in the trace config (might be empty).
       * </pre>
       *
       * <code>optional string unique_session_name = 4;</code>
       * @return The bytes for uniqueSessionName.
       */
      @java.lang.Override
      public com.google.protobuf.ByteString
          getUniqueSessionNameBytes() {
        java.lang.Object ref = uniqueSessionName_;
        if (ref instanceof java.lang.String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          uniqueSessionName_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }

      public static final int BUFFER_SIZE_KB_FIELD_NUMBER = 5;
      @SuppressWarnings("serial")
      private com.google.protobuf.Internal.IntList bufferSizeKb_;
      /**
       * <pre>
       * The number and size of each buffer.
       * </pre>
       *
       * <code>repeated uint32 buffer_size_kb = 5;</code>
       * @return A list containing the bufferSizeKb.
       */
      @java.lang.Override
      public java.util.List<java.lang.Integer>
          getBufferSizeKbList() {
        return bufferSizeKb_;
      }
      /**
       * <pre>
       * The number and size of each buffer.
       * </pre>
       *
       * <code>repeated uint32 buffer_size_kb = 5;</code>
       * @return The count of bufferSizeKb.
       */
      public int getBufferSizeKbCount() {
        return bufferSizeKb_.size();
      }
      /**
       * <pre>
       * The number and size of each buffer.
       * </pre>
       *
       * <code>repeated uint32 buffer_size_kb = 5;</code>
       * @param index The index of the element to return.
       * @return The bufferSizeKb at the given index.
       */
      public int getBufferSizeKb(int index) {
        return bufferSizeKb_.getInt(index);
      }

      public static final int DURATION_MS_FIELD_NUMBER = 6;
      private int durationMs_ = 0;
      /**
       * <pre>
       * Duration, as specified in the TraceConfig.duration_ms.
       * </pre>
       *
       * <code>optional uint32 duration_ms = 6;</code>
       * @return Whether the durationMs field is set.
       */
      @java.lang.Override
      public boolean hasDurationMs() {
        return ((bitField0_ & 0x00000010) != 0);
      }
      /**
       * <pre>
       * Duration, as specified in the TraceConfig.duration_ms.
       * </pre>
       *
       * <code>optional uint32 duration_ms = 6;</code>
       * @return The durationMs.
       */
      @java.lang.Override
      public int getDurationMs() {
        return durationMs_;
      }

      public static final int NUM_DATA_SOURCES_FIELD_NUMBER = 7;
      private int numDataSources_ = 0;
      /**
       * <pre>
       * Number of data sources involved in the session.
       * </pre>
       *
       * <code>optional uint32 num_data_sources = 7;</code>
       * @return Whether the numDataSources field is set.
       */
      @java.lang.Override
      public boolean hasNumDataSources() {
        return ((bitField0_ & 0x00000020) != 0);
      }
      /**
       * <pre>
       * Number of data sources involved in the session.
       * </pre>
       *
       * <code>optional uint32 num_data_sources = 7;</code>
       * @return The numDataSources.
       */
      @java.lang.Override
      public int getNumDataSources() {
        return numDataSources_;
      }

      public static final int START_REALTIME_NS_FIELD_NUMBER = 8;
      private long startRealtimeNs_ = 0L;
      /**
       * <pre>
       * Time when the session was started, in the CLOCK_REALTIME domain.
       * Available only on Linux-based systems.
       * </pre>
       *
       * <code>optional int64 start_realtime_ns = 8;</code>
       * @return Whether the startRealtimeNs field is set.
       */
      @java.lang.Override
      public boolean hasStartRealtimeNs() {
        return ((bitField0_ & 0x00000040) != 0);
      }
      /**
       * <pre>
       * Time when the session was started, in the CLOCK_REALTIME domain.
       * Available only on Linux-based systems.
       * </pre>
       *
       * <code>optional int64 start_realtime_ns = 8;</code>
       * @return The startRealtimeNs.
       */
      @java.lang.Override
      public long getStartRealtimeNs() {
        return startRealtimeNs_;
      }

      private byte memoizedIsInitialized = -1;
      @java.lang.Override
      public final boolean isInitialized() {
        byte isInitialized = memoizedIsInitialized;
        if (isInitialized == 1) return true;
        if (isInitialized == 0) return false;

        memoizedIsInitialized = 1;
        return true;
      }

      @java.lang.Override
      public void writeTo(com.google.protobuf.CodedOutputStream output)
                          throws java.io.IOException {
        if (((bitField0_ & 0x00000001) != 0)) {
          output.writeUInt64(1, id_);
        }
        if (((bitField0_ & 0x00000002) != 0)) {
          output.writeInt32(2, consumerUid_);
        }
        if (((bitField0_ & 0x00000004) != 0)) {
          com.google.protobuf.GeneratedMessageV3.writeString(output, 3, state_);
        }
        if (((bitField0_ & 0x00000008) != 0)) {
          com.google.protobuf.GeneratedMessageV3.writeString(output, 4, uniqueSessionName_);
        }
        for (int i = 0; i < bufferSizeKb_.size(); i++) {
          output.writeUInt32(5, bufferSizeKb_.getInt(i));
        }
        if (((bitField0_ & 0x00000010) != 0)) {
          output.writeUInt32(6, durationMs_);
        }
        if (((bitField0_ & 0x00000020) != 0)) {
          output.writeUInt32(7, numDataSources_);
        }
        if (((bitField0_ & 0x00000040) != 0)) {
          output.writeInt64(8, startRealtimeNs_);
        }
        getUnknownFields().writeTo(output);
      }

      @java.lang.Override
      public int getSerializedSize() {
        int size = memoizedSize;
        if (size != -1) return size;

        size = 0;
        if (((bitField0_ & 0x00000001) != 0)) {
          size += com.google.protobuf.CodedOutputStream
            .computeUInt64Size(1, id_);
        }
        if (((bitField0_ & 0x00000002) != 0)) {
          size += com.google.protobuf.CodedOutputStream
            .computeInt32Size(2, consumerUid_);
        }
        if (((bitField0_ & 0x00000004) != 0)) {
          size += com.google.protobuf.GeneratedMessageV3.computeStringSize(3, state_);
        }
        if (((bitField0_ & 0x00000008) != 0)) {
          size += com.google.protobuf.GeneratedMessageV3.computeStringSize(4, uniqueSessionName_);
        }
        {
          int dataSize = 0;
          for (int i = 0; i < bufferSizeKb_.size(); i++) {
            dataSize += com.google.protobuf.CodedOutputStream
              .computeUInt32SizeNoTag(bufferSizeKb_.getInt(i));
          }
          size += dataSize;
          size += 1 * getBufferSizeKbList().size();
        }
        if (((bitField0_ & 0x00000010) != 0)) {
          size += com.google.protobuf.CodedOutputStream
            .computeUInt32Size(6, durationMs_);
        }
        if (((bitField0_ & 0x00000020) != 0)) {
          size += com.google.protobuf.CodedOutputStream
            .computeUInt32Size(7, numDataSources_);
        }
        if (((bitField0_ & 0x00000040) != 0)) {
          size += com.google.protobuf.CodedOutputStream
            .computeInt64Size(8, startRealtimeNs_);
        }
        size += getUnknownFields().getSerializedSize();
        memoizedSize = size;
        return size;
      }

      @java.lang.Override
      public boolean equals(final java.lang.Object obj) {
        if (obj == this) {
         return true;
        }
        if (!(obj instanceof perfetto.protos.TracingServiceStateOuterClass.TracingServiceState.TracingSession)) {
          return super.equals(obj);
        }
        perfetto.protos.TracingServiceStateOuterClass.TracingServiceState.TracingSession other = (perfetto.protos.TracingServiceStateOuterClass.TracingServiceState.TracingSession) obj;

        if (hasId() != other.hasId()) return false;
        if (hasId()) {
          if (getId()
              != other.getId()) return false;
        }
        if (hasConsumerUid() != other.hasConsumerUid()) return false;
        if (hasConsumerUid()) {
          if (getConsumerUid()
              != other.getConsumerUid()) return false;
        }
        if (hasState() != other.hasState()) return false;
        if (hasState()) {
          if (!getState()
              .equals(other.getState())) return false;
        }
        if (hasUniqueSessionName() != other.hasUniqueSessionName()) return false;
        if (hasUniqueSessionName()) {
          if (!getUniqueSessionName()
              .equals(other.getUniqueSessionName())) return false;
        }
        if (!getBufferSizeKbList()
            .equals(other.getBufferSizeKbList())) return false;
        if (hasDurationMs() != other.hasDurationMs()) return false;
        if (hasDurationMs()) {
          if (getDurationMs()
              != other.getDurationMs()) return false;
        }
        if (hasNumDataSources() != other.hasNumDataSources()) return false;
        if (hasNumDataSources()) {
          if (getNumDataSources()
              != other.getNumDataSources()) return false;
        }
        if (hasStartRealtimeNs() != other.hasStartRealtimeNs()) return false;
        if (hasStartRealtimeNs()) {
          if (getStartRealtimeNs()
              != other.getStartRealtimeNs()) return false;
        }
        if (!getUnknownFields().equals(other.getUnknownFields())) return false;
        return true;
      }

      @java.lang.Override
      public int hashCode() {
        if (memoizedHashCode != 0) {
          return memoizedHashCode;
        }
        int hash = 41;
        hash = (19 * hash) + getDescriptor().hashCode();
        if (hasId()) {
          hash = (37 * hash) + ID_FIELD_NUMBER;
          hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
              getId());
        }
        if (hasConsumerUid()) {
          hash = (37 * hash) + CONSUMER_UID_FIELD_NUMBER;
          hash = (53 * hash) + getConsumerUid();
        }
        if (hasState()) {
          hash = (37 * hash) + STATE_FIELD_NUMBER;
          hash = (53 * hash) + getState().hashCode();
        }
        if (hasUniqueSessionName()) {
          hash = (37 * hash) + UNIQUE_SESSION_NAME_FIELD_NUMBER;
          hash = (53 * hash) + getUniqueSessionName().hashCode();
        }
        if (getBufferSizeKbCount() > 0) {
          hash = (37 * hash) + BUFFER_SIZE_KB_FIELD_NUMBER;
          hash = (53 * hash) + getBufferSizeKbList().hashCode();
        }
        if (hasDurationMs()) {
          hash = (37 * hash) + DURATION_MS_FIELD_NUMBER;
          hash = (53 * hash) + getDurationMs();
        }
        if (hasNumDataSources()) {
          hash = (37 * hash) + NUM_DATA_SOURCES_FIELD_NUMBER;
          hash = (53 * hash) + getNumDataSources();
        }
        if (hasStartRealtimeNs()) {
          hash = (37 * hash) + START_REALTIME_NS_FIELD_NUMBER;
          hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
              getStartRealtimeNs());
        }
        hash = (29 * hash) + getUnknownFields().hashCode();
        memoizedHashCode = hash;
        return hash;
      }

      public static perfetto.protos.TracingServiceStateOuterClass.TracingServiceState.TracingSession parseFrom(
          java.nio.ByteBuffer data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static perfetto.protos.TracingServiceStateOuterClass.TracingServiceState.TracingSession parseFrom(
          java.nio.ByteBuffer data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static perfetto.protos.TracingServiceStateOuterClass.TracingServiceState.TracingSession parseFrom(
          com.google.protobuf.ByteString data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static perfetto.protos.TracingServiceStateOuterClass.TracingServiceState.TracingSession parseFrom(
          com.google.protobuf.ByteString data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static perfetto.protos.TracingServiceStateOuterClass.TracingServiceState.TracingSession parseFrom(byte[] data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static perfetto.protos.TracingServiceStateOuterClass.TracingServiceState.TracingSession parseFrom(
          byte[] data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static perfetto.protos.TracingServiceStateOuterClass.TracingServiceState.TracingSession parseFrom(java.io.InputStream input)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseWithIOException(PARSER, input);
      }
      public static perfetto.protos.TracingServiceStateOuterClass.TracingServiceState.TracingSession parseFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseWithIOException(PARSER, input, extensionRegistry);
      }
      public static perfetto.protos.TracingServiceStateOuterClass.TracingServiceState.TracingSession parseDelimitedFrom(java.io.InputStream input)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseDelimitedWithIOException(PARSER, input);
      }
      public static perfetto.protos.TracingServiceStateOuterClass.TracingServiceState.TracingSession parseDelimitedFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
      }
      public static perfetto.protos.TracingServiceStateOuterClass.TracingServiceState.TracingSession parseFrom(
          com.google.protobuf.CodedInputStream input)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseWithIOException(PARSER, input);
      }
      public static perfetto.protos.TracingServiceStateOuterClass.TracingServiceState.TracingSession parseFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseWithIOException(PARSER, input, extensionRegistry);
      }

      @java.lang.Override
      public Builder newBuilderForType() { return newBuilder(); }
      public static Builder newBuilder() {
        return DEFAULT_INSTANCE.toBuilder();
      }
      public static Builder newBuilder(perfetto.protos.TracingServiceStateOuterClass.TracingServiceState.TracingSession prototype) {
        return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
      }
      @java.lang.Override
      public Builder toBuilder() {
        return this == DEFAULT_INSTANCE
            ? new Builder() : new Builder().mergeFrom(this);
      }

      @java.lang.Override
      protected Builder newBuilderForType(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        Builder builder = new Builder(parent);
        return builder;
      }
      /**
       * Protobuf type {@code perfetto.protos.TracingServiceState.TracingSession}
       */
      public static final class Builder extends
          com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
          // @@protoc_insertion_point(builder_implements:perfetto.protos.TracingServiceState.TracingSession)
          perfetto.protos.TracingServiceStateOuterClass.TracingServiceState.TracingSessionOrBuilder {
        public static final com.google.protobuf.Descriptors.Descriptor
            getDescriptor() {
          return perfetto.protos.TracingServiceStateOuterClass.internal_static_perfetto_protos_TracingServiceState_TracingSession_descriptor;
        }

        @java.lang.Override
        protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
            internalGetFieldAccessorTable() {
          return perfetto.protos.TracingServiceStateOuterClass.internal_static_perfetto_protos_TracingServiceState_TracingSession_fieldAccessorTable
              .ensureFieldAccessorsInitialized(
                  perfetto.protos.TracingServiceStateOuterClass.TracingServiceState.TracingSession.class, perfetto.protos.TracingServiceStateOuterClass.TracingServiceState.TracingSession.Builder.class);
        }

        // Construct using perfetto.protos.TracingServiceStateOuterClass.TracingServiceState.TracingSession.newBuilder()
        private Builder() {

        }

        private Builder(
            com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
          super(parent);

        }
        @java.lang.Override
        public Builder clear() {
          super.clear();
          bitField0_ = 0;
          id_ = 0L;
          consumerUid_ = 0;
          state_ = "";
          uniqueSessionName_ = "";
          bufferSizeKb_ = emptyIntList();
          durationMs_ = 0;
          numDataSources_ = 0;
          startRealtimeNs_ = 0L;
          return this;
        }

        @java.lang.Override
        public com.google.protobuf.Descriptors.Descriptor
            getDescriptorForType() {
          return perfetto.protos.TracingServiceStateOuterClass.internal_static_perfetto_protos_TracingServiceState_TracingSession_descriptor;
        }

        @java.lang.Override
        public perfetto.protos.TracingServiceStateOuterClass.TracingServiceState.TracingSession getDefaultInstanceForType() {
          return perfetto.protos.TracingServiceStateOuterClass.TracingServiceState.TracingSession.getDefaultInstance();
        }

        @java.lang.Override
        public perfetto.protos.TracingServiceStateOuterClass.TracingServiceState.TracingSession build() {
          perfetto.protos.TracingServiceStateOuterClass.TracingServiceState.TracingSession result = buildPartial();
          if (!result.isInitialized()) {
            throw newUninitializedMessageException(result);
          }
          return result;
        }

        @java.lang.Override
        public perfetto.protos.TracingServiceStateOuterClass.TracingServiceState.TracingSession buildPartial() {
          perfetto.protos.TracingServiceStateOuterClass.TracingServiceState.TracingSession result = new perfetto.protos.TracingServiceStateOuterClass.TracingServiceState.TracingSession(this);
          buildPartialRepeatedFields(result);
          if (bitField0_ != 0) { buildPartial0(result); }
          onBuilt();
          return result;
        }

        private void buildPartialRepeatedFields(perfetto.protos.TracingServiceStateOuterClass.TracingServiceState.TracingSession result) {
          if (((bitField0_ & 0x00000010) != 0)) {
            bufferSizeKb_.makeImmutable();
            bitField0_ = (bitField0_ & ~0x00000010);
          }
          result.bufferSizeKb_ = bufferSizeKb_;
        }

        private void buildPartial0(perfetto.protos.TracingServiceStateOuterClass.TracingServiceState.TracingSession result) {
          int from_bitField0_ = bitField0_;
          int to_bitField0_ = 0;
          if (((from_bitField0_ & 0x00000001) != 0)) {
            result.id_ = id_;
            to_bitField0_ |= 0x00000001;
          }
          if (((from_bitField0_ & 0x00000002) != 0)) {
            result.consumerUid_ = consumerUid_;
            to_bitField0_ |= 0x00000002;
          }
          if (((from_bitField0_ & 0x00000004) != 0)) {
            result.state_ = state_;
            to_bitField0_ |= 0x00000004;
          }
          if (((from_bitField0_ & 0x00000008) != 0)) {
            result.uniqueSessionName_ = uniqueSessionName_;
            to_bitField0_ |= 0x00000008;
          }
          if (((from_bitField0_ & 0x00000020) != 0)) {
            result.durationMs_ = durationMs_;
            to_bitField0_ |= 0x00000010;
          }
          if (((from_bitField0_ & 0x00000040) != 0)) {
            result.numDataSources_ = numDataSources_;
            to_bitField0_ |= 0x00000020;
          }
          if (((from_bitField0_ & 0x00000080) != 0)) {
            result.startRealtimeNs_ = startRealtimeNs_;
            to_bitField0_ |= 0x00000040;
          }
          result.bitField0_ |= to_bitField0_;
        }

        @java.lang.Override
        public Builder clone() {
          return super.clone();
        }
        @java.lang.Override
        public Builder setField(
            com.google.protobuf.Descriptors.FieldDescriptor field,
            java.lang.Object value) {
          return super.setField(field, value);
        }
        @java.lang.Override
        public Builder clearField(
            com.google.protobuf.Descriptors.FieldDescriptor field) {
          return super.clearField(field);
        }
        @java.lang.Override
        public Builder clearOneof(
            com.google.protobuf.Descriptors.OneofDescriptor oneof) {
          return super.clearOneof(oneof);
        }
        @java.lang.Override
        public Builder setRepeatedField(
            com.google.protobuf.Descriptors.FieldDescriptor field,
            int index, java.lang.Object value) {
          return super.setRepeatedField(field, index, value);
        }
        @java.lang.Override
        public Builder addRepeatedField(
            com.google.protobuf.Descriptors.FieldDescriptor field,
            java.lang.Object value) {
          return super.addRepeatedField(field, value);
        }
        @java.lang.Override
        public Builder mergeFrom(com.google.protobuf.Message other) {
          if (other instanceof perfetto.protos.TracingServiceStateOuterClass.TracingServiceState.TracingSession) {
            return mergeFrom((perfetto.protos.TracingServiceStateOuterClass.TracingServiceState.TracingSession)other);
          } else {
            super.mergeFrom(other);
            return this;
          }
        }

        public Builder mergeFrom(perfetto.protos.TracingServiceStateOuterClass.TracingServiceState.TracingSession other) {
          if (other == perfetto.protos.TracingServiceStateOuterClass.TracingServiceState.TracingSession.getDefaultInstance()) return this;
          if (other.hasId()) {
            setId(other.getId());
          }
          if (other.hasConsumerUid()) {
            setConsumerUid(other.getConsumerUid());
          }
          if (other.hasState()) {
            state_ = other.state_;
            bitField0_ |= 0x00000004;
            onChanged();
          }
          if (other.hasUniqueSessionName()) {
            uniqueSessionName_ = other.uniqueSessionName_;
            bitField0_ |= 0x00000008;
            onChanged();
          }
          if (!other.bufferSizeKb_.isEmpty()) {
            if (bufferSizeKb_.isEmpty()) {
              bufferSizeKb_ = other.bufferSizeKb_;
              bitField0_ = (bitField0_ & ~0x00000010);
            } else {
              ensureBufferSizeKbIsMutable();
              bufferSizeKb_.addAll(other.bufferSizeKb_);
            }
            onChanged();
          }
          if (other.hasDurationMs()) {
            setDurationMs(other.getDurationMs());
          }
          if (other.hasNumDataSources()) {
            setNumDataSources(other.getNumDataSources());
          }
          if (other.hasStartRealtimeNs()) {
            setStartRealtimeNs(other.getStartRealtimeNs());
          }
          this.mergeUnknownFields(other.getUnknownFields());
          onChanged();
          return this;
        }

        @java.lang.Override
        public final boolean isInitialized() {
          return true;
        }

        @java.lang.Override
        public Builder mergeFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws java.io.IOException {
          if (extensionRegistry == null) {
            throw new java.lang.NullPointerException();
          }
          try {
            boolean done = false;
            while (!done) {
              int tag = input.readTag();
              switch (tag) {
                case 0:
                  done = true;
                  break;
                case 8: {
                  id_ = input.readUInt64();
                  bitField0_ |= 0x00000001;
                  break;
                } // case 8
                case 16: {
                  consumerUid_ = input.readInt32();
                  bitField0_ |= 0x00000002;
                  break;
                } // case 16
                case 26: {
                  state_ = input.readBytes();
                  bitField0_ |= 0x00000004;
                  break;
                } // case 26
                case 34: {
                  uniqueSessionName_ = input.readBytes();
                  bitField0_ |= 0x00000008;
                  break;
                } // case 34
                case 40: {
                  int v = input.readUInt32();
                  ensureBufferSizeKbIsMutable();
                  bufferSizeKb_.addInt(v);
                  break;
                } // case 40
                case 42: {
                  int length = input.readRawVarint32();
                  int limit = input.pushLimit(length);
                  ensureBufferSizeKbIsMutable();
                  while (input.getBytesUntilLimit() > 0) {
                    bufferSizeKb_.addInt(input.readUInt32());
                  }
                  input.popLimit(limit);
                  break;
                } // case 42
                case 48: {
                  durationMs_ = input.readUInt32();
                  bitField0_ |= 0x00000020;
                  break;
                } // case 48
                case 56: {
                  numDataSources_ = input.readUInt32();
                  bitField0_ |= 0x00000040;
                  break;
                } // case 56
                case 64: {
                  startRealtimeNs_ = input.readInt64();
                  bitField0_ |= 0x00000080;
                  break;
                } // case 64
                default: {
                  if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                    done = true; // was an endgroup tag
                  }
                  break;
                } // default:
              } // switch (tag)
            } // while (!done)
          } catch (com.google.protobuf.InvalidProtocolBufferException e) {
            throw e.unwrapIOException();
          } finally {
            onChanged();
          } // finally
          return this;
        }
        private int bitField0_;

        private long id_ ;
        /**
         * <pre>
         * The TracingSessionID.
         * </pre>
         *
         * <code>optional uint64 id = 1;</code>
         * @return Whether the id field is set.
         */
        @java.lang.Override
        public boolean hasId() {
          return ((bitField0_ & 0x00000001) != 0);
        }
        /**
         * <pre>
         * The TracingSessionID.
         * </pre>
         *
         * <code>optional uint64 id = 1;</code>
         * @return The id.
         */
        @java.lang.Override
        public long getId() {
          return id_;
        }
        /**
         * <pre>
         * The TracingSessionID.
         * </pre>
         *
         * <code>optional uint64 id = 1;</code>
         * @param value The id to set.
         * @return This builder for chaining.
         */
        public Builder setId(long value) {
          
          id_ = value;
          bitField0_ |= 0x00000001;
          onChanged();
          return this;
        }
        /**
         * <pre>
         * The TracingSessionID.
         * </pre>
         *
         * <code>optional uint64 id = 1;</code>
         * @return This builder for chaining.
         */
        public Builder clearId() {
          bitField0_ = (bitField0_ & ~0x00000001);
          id_ = 0L;
          onChanged();
          return this;
        }

        private int consumerUid_ ;
        /**
         * <pre>
         * The Unix uid of the consumer that started the session.
         * This is meaningful only if the caller is root. In all other cases only
         * tracing sessions that match the caller UID will be displayed.
         * </pre>
         *
         * <code>optional int32 consumer_uid = 2;</code>
         * @return Whether the consumerUid field is set.
         */
        @java.lang.Override
        public boolean hasConsumerUid() {
          return ((bitField0_ & 0x00000002) != 0);
        }
        /**
         * <pre>
         * The Unix uid of the consumer that started the session.
         * This is meaningful only if the caller is root. In all other cases only
         * tracing sessions that match the caller UID will be displayed.
         * </pre>
         *
         * <code>optional int32 consumer_uid = 2;</code>
         * @return The consumerUid.
         */
        @java.lang.Override
        public int getConsumerUid() {
          return consumerUid_;
        }
        /**
         * <pre>
         * The Unix uid of the consumer that started the session.
         * This is meaningful only if the caller is root. In all other cases only
         * tracing sessions that match the caller UID will be displayed.
         * </pre>
         *
         * <code>optional int32 consumer_uid = 2;</code>
         * @param value The consumerUid to set.
         * @return This builder for chaining.
         */
        public Builder setConsumerUid(int value) {
          
          consumerUid_ = value;
          bitField0_ |= 0x00000002;
          onChanged();
          return this;
        }
        /**
         * <pre>
         * The Unix uid of the consumer that started the session.
         * This is meaningful only if the caller is root. In all other cases only
         * tracing sessions that match the caller UID will be displayed.
         * </pre>
         *
         * <code>optional int32 consumer_uid = 2;</code>
         * @return This builder for chaining.
         */
        public Builder clearConsumerUid() {
          bitField0_ = (bitField0_ & ~0x00000002);
          consumerUid_ = 0;
          onChanged();
          return this;
        }

        private java.lang.Object state_ = "";
        /**
         * <pre>
         * Internal state of the tracing session.
         * These strings are FYI only and subjected to change.
         * </pre>
         *
         * <code>optional string state = 3;</code>
         * @return Whether the state field is set.
         */
        public boolean hasState() {
          return ((bitField0_ & 0x00000004) != 0);
        }
        /**
         * <pre>
         * Internal state of the tracing session.
         * These strings are FYI only and subjected to change.
         * </pre>
         *
         * <code>optional string state = 3;</code>
         * @return The state.
         */
        public java.lang.String getState() {
          java.lang.Object ref = state_;
          if (!(ref instanceof java.lang.String)) {
            com.google.protobuf.ByteString bs =
                (com.google.protobuf.ByteString) ref;
            java.lang.String s = bs.toStringUtf8();
            if (bs.isValidUtf8()) {
              state_ = s;
            }
            return s;
          } else {
            return (java.lang.String) ref;
          }
        }
        /**
         * <pre>
         * Internal state of the tracing session.
         * These strings are FYI only and subjected to change.
         * </pre>
         *
         * <code>optional string state = 3;</code>
         * @return The bytes for state.
         */
        public com.google.protobuf.ByteString
            getStateBytes() {
          java.lang.Object ref = state_;
          if (ref instanceof String) {
            com.google.protobuf.ByteString b = 
                com.google.protobuf.ByteString.copyFromUtf8(
                    (java.lang.String) ref);
            state_ = b;
            return b;
          } else {
            return (com.google.protobuf.ByteString) ref;
          }
        }
        /**
         * <pre>
         * Internal state of the tracing session.
         * These strings are FYI only and subjected to change.
         * </pre>
         *
         * <code>optional string state = 3;</code>
         * @param value The state to set.
         * @return This builder for chaining.
         */
        public Builder setState(
            java.lang.String value) {
          if (value == null) { throw new NullPointerException(); }
          state_ = value;
          bitField0_ |= 0x00000004;
          onChanged();
          return this;
        }
        /**
         * <pre>
         * Internal state of the tracing session.
         * These strings are FYI only and subjected to change.
         * </pre>
         *
         * <code>optional string state = 3;</code>
         * @return This builder for chaining.
         */
        public Builder clearState() {
          state_ = getDefaultInstance().getState();
          bitField0_ = (bitField0_ & ~0x00000004);
          onChanged();
          return this;
        }
        /**
         * <pre>
         * Internal state of the tracing session.
         * These strings are FYI only and subjected to change.
         * </pre>
         *
         * <code>optional string state = 3;</code>
         * @param value The bytes for state to set.
         * @return This builder for chaining.
         */
        public Builder setStateBytes(
            com.google.protobuf.ByteString value) {
          if (value == null) { throw new NullPointerException(); }
          state_ = value;
          bitField0_ |= 0x00000004;
          onChanged();
          return this;
        }

        private java.lang.Object uniqueSessionName_ = "";
        /**
         * <pre>
         * The unique_session_name as set in the trace config (might be empty).
         * </pre>
         *
         * <code>optional string unique_session_name = 4;</code>
         * @return Whether the uniqueSessionName field is set.
         */
        public boolean hasUniqueSessionName() {
          return ((bitField0_ & 0x00000008) != 0);
        }
        /**
         * <pre>
         * The unique_session_name as set in the trace config (might be empty).
         * </pre>
         *
         * <code>optional string unique_session_name = 4;</code>
         * @return The uniqueSessionName.
         */
        public java.lang.String getUniqueSessionName() {
          java.lang.Object ref = uniqueSessionName_;
          if (!(ref instanceof java.lang.String)) {
            com.google.protobuf.ByteString bs =
                (com.google.protobuf.ByteString) ref;
            java.lang.String s = bs.toStringUtf8();
            if (bs.isValidUtf8()) {
              uniqueSessionName_ = s;
            }
            return s;
          } else {
            return (java.lang.String) ref;
          }
        }
        /**
         * <pre>
         * The unique_session_name as set in the trace config (might be empty).
         * </pre>
         *
         * <code>optional string unique_session_name = 4;</code>
         * @return The bytes for uniqueSessionName.
         */
        public com.google.protobuf.ByteString
            getUniqueSessionNameBytes() {
          java.lang.Object ref = uniqueSessionName_;
          if (ref instanceof String) {
            com.google.protobuf.ByteString b = 
                com.google.protobuf.ByteString.copyFromUtf8(
                    (java.lang.String) ref);
            uniqueSessionName_ = b;
            return b;
          } else {
            return (com.google.protobuf.ByteString) ref;
          }
        }
        /**
         * <pre>
         * The unique_session_name as set in the trace config (might be empty).
         * </pre>
         *
         * <code>optional string unique_session_name = 4;</code>
         * @param value The uniqueSessionName to set.
         * @return This builder for chaining.
         */
        public Builder setUniqueSessionName(
            java.lang.String value) {
          if (value == null) { throw new NullPointerException(); }
          uniqueSessionName_ = value;
          bitField0_ |= 0x00000008;
          onChanged();
          return this;
        }
        /**
         * <pre>
         * The unique_session_name as set in the trace config (might be empty).
         * </pre>
         *
         * <code>optional string unique_session_name = 4;</code>
         * @return This builder for chaining.
         */
        public Builder clearUniqueSessionName() {
          uniqueSessionName_ = getDefaultInstance().getUniqueSessionName();
          bitField0_ = (bitField0_ & ~0x00000008);
          onChanged();
          return this;
        }
        /**
         * <pre>
         * The unique_session_name as set in the trace config (might be empty).
         * </pre>
         *
         * <code>optional string unique_session_name = 4;</code>
         * @param value The bytes for uniqueSessionName to set.
         * @return This builder for chaining.
         */
        public Builder setUniqueSessionNameBytes(
            com.google.protobuf.ByteString value) {
          if (value == null) { throw new NullPointerException(); }
          uniqueSessionName_ = value;
          bitField0_ |= 0x00000008;
          onChanged();
          return this;
        }

        private com.google.protobuf.Internal.IntList bufferSizeKb_ = emptyIntList();
        private void ensureBufferSizeKbIsMutable() {
          if (!((bitField0_ & 0x00000010) != 0)) {
            bufferSizeKb_ = mutableCopy(bufferSizeKb_);
            bitField0_ |= 0x00000010;
          }
        }
        /**
         * <pre>
         * The number and size of each buffer.
         * </pre>
         *
         * <code>repeated uint32 buffer_size_kb = 5;</code>
         * @return A list containing the bufferSizeKb.
         */
        public java.util.List<java.lang.Integer>
            getBufferSizeKbList() {
          return ((bitField0_ & 0x00000010) != 0) ?
                   java.util.Collections.unmodifiableList(bufferSizeKb_) : bufferSizeKb_;
        }
        /**
         * <pre>
         * The number and size of each buffer.
         * </pre>
         *
         * <code>repeated uint32 buffer_size_kb = 5;</code>
         * @return The count of bufferSizeKb.
         */
        public int getBufferSizeKbCount() {
          return bufferSizeKb_.size();
        }
        /**
         * <pre>
         * The number and size of each buffer.
         * </pre>
         *
         * <code>repeated uint32 buffer_size_kb = 5;</code>
         * @param index The index of the element to return.
         * @return The bufferSizeKb at the given index.
         */
        public int getBufferSizeKb(int index) {
          return bufferSizeKb_.getInt(index);
        }
        /**
         * <pre>
         * The number and size of each buffer.
         * </pre>
         *
         * <code>repeated uint32 buffer_size_kb = 5;</code>
         * @param index The index to set the value at.
         * @param value The bufferSizeKb to set.
         * @return This builder for chaining.
         */
        public Builder setBufferSizeKb(
            int index, int value) {
          
          ensureBufferSizeKbIsMutable();
          bufferSizeKb_.setInt(index, value);
          onChanged();
          return this;
        }
        /**
         * <pre>
         * The number and size of each buffer.
         * </pre>
         *
         * <code>repeated uint32 buffer_size_kb = 5;</code>
         * @param value The bufferSizeKb to add.
         * @return This builder for chaining.
         */
        public Builder addBufferSizeKb(int value) {
          
          ensureBufferSizeKbIsMutable();
          bufferSizeKb_.addInt(value);
          onChanged();
          return this;
        }
        /**
         * <pre>
         * The number and size of each buffer.
         * </pre>
         *
         * <code>repeated uint32 buffer_size_kb = 5;</code>
         * @param values The bufferSizeKb to add.
         * @return This builder for chaining.
         */
        public Builder addAllBufferSizeKb(
            java.lang.Iterable<? extends java.lang.Integer> values) {
          ensureBufferSizeKbIsMutable();
          com.google.protobuf.AbstractMessageLite.Builder.addAll(
              values, bufferSizeKb_);
          onChanged();
          return this;
        }
        /**
         * <pre>
         * The number and size of each buffer.
         * </pre>
         *
         * <code>repeated uint32 buffer_size_kb = 5;</code>
         * @return This builder for chaining.
         */
        public Builder clearBufferSizeKb() {
          bufferSizeKb_ = emptyIntList();
          bitField0_ = (bitField0_ & ~0x00000010);
          onChanged();
          return this;
        }

        private int durationMs_ ;
        /**
         * <pre>
         * Duration, as specified in the TraceConfig.duration_ms.
         * </pre>
         *
         * <code>optional uint32 duration_ms = 6;</code>
         * @return Whether the durationMs field is set.
         */
        @java.lang.Override
        public boolean hasDurationMs() {
          return ((bitField0_ & 0x00000020) != 0);
        }
        /**
         * <pre>
         * Duration, as specified in the TraceConfig.duration_ms.
         * </pre>
         *
         * <code>optional uint32 duration_ms = 6;</code>
         * @return The durationMs.
         */
        @java.lang.Override
        public int getDurationMs() {
          return durationMs_;
        }
        /**
         * <pre>
         * Duration, as specified in the TraceConfig.duration_ms.
         * </pre>
         *
         * <code>optional uint32 duration_ms = 6;</code>
         * @param value The durationMs to set.
         * @return This builder for chaining.
         */
        public Builder setDurationMs(int value) {
          
          durationMs_ = value;
          bitField0_ |= 0x00000020;
          onChanged();
          return this;
        }
        /**
         * <pre>
         * Duration, as specified in the TraceConfig.duration_ms.
         * </pre>
         *
         * <code>optional uint32 duration_ms = 6;</code>
         * @return This builder for chaining.
         */
        public Builder clearDurationMs() {
          bitField0_ = (bitField0_ & ~0x00000020);
          durationMs_ = 0;
          onChanged();
          return this;
        }

        private int numDataSources_ ;
        /**
         * <pre>
         * Number of data sources involved in the session.
         * </pre>
         *
         * <code>optional uint32 num_data_sources = 7;</code>
         * @return Whether the numDataSources field is set.
         */
        @java.lang.Override
        public boolean hasNumDataSources() {
          return ((bitField0_ & 0x00000040) != 0);
        }
        /**
         * <pre>
         * Number of data sources involved in the session.
         * </pre>
         *
         * <code>optional uint32 num_data_sources = 7;</code>
         * @return The numDataSources.
         */
        @java.lang.Override
        public int getNumDataSources() {
          return numDataSources_;
        }
        /**
         * <pre>
         * Number of data sources involved in the session.
         * </pre>
         *
         * <code>optional uint32 num_data_sources = 7;</code>
         * @param value The numDataSources to set.
         * @return This builder for chaining.
         */
        public Builder setNumDataSources(int value) {
          
          numDataSources_ = value;
          bitField0_ |= 0x00000040;
          onChanged();
          return this;
        }
        /**
         * <pre>
         * Number of data sources involved in the session.
         * </pre>
         *
         * <code>optional uint32 num_data_sources = 7;</code>
         * @return This builder for chaining.
         */
        public Builder clearNumDataSources() {
          bitField0_ = (bitField0_ & ~0x00000040);
          numDataSources_ = 0;
          onChanged();
          return this;
        }

        private long startRealtimeNs_ ;
        /**
         * <pre>
         * Time when the session was started, in the CLOCK_REALTIME domain.
         * Available only on Linux-based systems.
         * </pre>
         *
         * <code>optional int64 start_realtime_ns = 8;</code>
         * @return Whether the startRealtimeNs field is set.
         */
        @java.lang.Override
        public boolean hasStartRealtimeNs() {
          return ((bitField0_ & 0x00000080) != 0);
        }
        /**
         * <pre>
         * Time when the session was started, in the CLOCK_REALTIME domain.
         * Available only on Linux-based systems.
         * </pre>
         *
         * <code>optional int64 start_realtime_ns = 8;</code>
         * @return The startRealtimeNs.
         */
        @java.lang.Override
        public long getStartRealtimeNs() {
          return startRealtimeNs_;
        }
        /**
         * <pre>
         * Time when the session was started, in the CLOCK_REALTIME domain.
         * Available only on Linux-based systems.
         * </pre>
         *
         * <code>optional int64 start_realtime_ns = 8;</code>
         * @param value The startRealtimeNs to set.
         * @return This builder for chaining.
         */
        public Builder setStartRealtimeNs(long value) {
          
          startRealtimeNs_ = value;
          bitField0_ |= 0x00000080;
          onChanged();
          return this;
        }
        /**
         * <pre>
         * Time when the session was started, in the CLOCK_REALTIME domain.
         * Available only on Linux-based systems.
         * </pre>
         *
         * <code>optional int64 start_realtime_ns = 8;</code>
         * @return This builder for chaining.
         */
        public Builder clearStartRealtimeNs() {
          bitField0_ = (bitField0_ & ~0x00000080);
          startRealtimeNs_ = 0L;
          onChanged();
          return this;
        }
        @java.lang.Override
        public final Builder setUnknownFields(
            final com.google.protobuf.UnknownFieldSet unknownFields) {
          return super.setUnknownFields(unknownFields);
        }

        @java.lang.Override
        public final Builder mergeUnknownFields(
            final com.google.protobuf.UnknownFieldSet unknownFields) {
          return super.mergeUnknownFields(unknownFields);
        }


        // @@protoc_insertion_point(builder_scope:perfetto.protos.TracingServiceState.TracingSession)
      }

      // @@protoc_insertion_point(class_scope:perfetto.protos.TracingServiceState.TracingSession)
      private static final perfetto.protos.TracingServiceStateOuterClass.TracingServiceState.TracingSession DEFAULT_INSTANCE;
      static {
        DEFAULT_INSTANCE = new perfetto.protos.TracingServiceStateOuterClass.TracingServiceState.TracingSession();
      }

      public static perfetto.protos.TracingServiceStateOuterClass.TracingServiceState.TracingSession getDefaultInstance() {
        return DEFAULT_INSTANCE;
      }

      @java.lang.Deprecated public static final com.google.protobuf.Parser<TracingSession>
          PARSER = new com.google.protobuf.AbstractParser<TracingSession>() {
        @java.lang.Override
        public TracingSession parsePartialFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws com.google.protobuf.InvalidProtocolBufferException {
          Builder builder = newBuilder();
          try {
            builder.mergeFrom(input, extensionRegistry);
          } catch (com.google.protobuf.InvalidProtocolBufferException e) {
            throw e.setUnfinishedMessage(builder.buildPartial());
          } catch (com.google.protobuf.UninitializedMessageException e) {
            throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
          } catch (java.io.IOException e) {
            throw new com.google.protobuf.InvalidProtocolBufferException(e)
                .setUnfinishedMessage(builder.buildPartial());
          }
          return builder.buildPartial();
        }
      };

      public static com.google.protobuf.Parser<TracingSession> parser() {
        return PARSER;
      }

      @java.lang.Override
      public com.google.protobuf.Parser<TracingSession> getParserForType() {
        return PARSER;
      }

      @java.lang.Override
      public perfetto.protos.TracingServiceStateOuterClass.TracingServiceState.TracingSession getDefaultInstanceForType() {
        return DEFAULT_INSTANCE;
      }

    }

    private int bitField0_;
    public static final int PRODUCERS_FIELD_NUMBER = 1;
    @SuppressWarnings("serial")
    private java.util.List<perfetto.protos.TracingServiceStateOuterClass.TracingServiceState.Producer> producers_;
    /**
     * <pre>
     * Lists all the producers connected.
     * </pre>
     *
     * <code>repeated .perfetto.protos.TracingServiceState.Producer producers = 1;</code>
     */
    @java.lang.Override
    public java.util.List<perfetto.protos.TracingServiceStateOuterClass.TracingServiceState.Producer> getProducersList() {
      return producers_;
    }
    /**
     * <pre>
     * Lists all the producers connected.
     * </pre>
     *
     * <code>repeated .perfetto.protos.TracingServiceState.Producer producers = 1;</code>
     */
    @java.lang.Override
    public java.util.List<? extends perfetto.protos.TracingServiceStateOuterClass.TracingServiceState.ProducerOrBuilder> 
        getProducersOrBuilderList() {
      return producers_;
    }
    /**
     * <pre>
     * Lists all the producers connected.
     * </pre>
     *
     * <code>repeated .perfetto.protos.TracingServiceState.Producer producers = 1;</code>
     */
    @java.lang.Override
    public int getProducersCount() {
      return producers_.size();
    }
    /**
     * <pre>
     * Lists all the producers connected.
     * </pre>
     *
     * <code>repeated .perfetto.protos.TracingServiceState.Producer producers = 1;</code>
     */
    @java.lang.Override
    public perfetto.protos.TracingServiceStateOuterClass.TracingServiceState.Producer getProducers(int index) {
      return producers_.get(index);
    }
    /**
     * <pre>
     * Lists all the producers connected.
     * </pre>
     *
     * <code>repeated .perfetto.protos.TracingServiceState.Producer producers = 1;</code>
     */
    @java.lang.Override
    public perfetto.protos.TracingServiceStateOuterClass.TracingServiceState.ProducerOrBuilder getProducersOrBuilder(
        int index) {
      return producers_.get(index);
    }

    public static final int DATA_SOURCES_FIELD_NUMBER = 2;
    @SuppressWarnings("serial")
    private java.util.List<perfetto.protos.TracingServiceStateOuterClass.TracingServiceState.DataSource> dataSources_;
    /**
     * <pre>
     * Lists the data sources available.
     * </pre>
     *
     * <code>repeated .perfetto.protos.TracingServiceState.DataSource data_sources = 2;</code>
     */
    @java.lang.Override
    public java.util.List<perfetto.protos.TracingServiceStateOuterClass.TracingServiceState.DataSource> getDataSourcesList() {
      return dataSources_;
    }
    /**
     * <pre>
     * Lists the data sources available.
     * </pre>
     *
     * <code>repeated .perfetto.protos.TracingServiceState.DataSource data_sources = 2;</code>
     */
    @java.lang.Override
    public java.util.List<? extends perfetto.protos.TracingServiceStateOuterClass.TracingServiceState.DataSourceOrBuilder> 
        getDataSourcesOrBuilderList() {
      return dataSources_;
    }
    /**
     * <pre>
     * Lists the data sources available.
     * </pre>
     *
     * <code>repeated .perfetto.protos.TracingServiceState.DataSource data_sources = 2;</code>
     */
    @java.lang.Override
    public int getDataSourcesCount() {
      return dataSources_.size();
    }
    /**
     * <pre>
     * Lists the data sources available.
     * </pre>
     *
     * <code>repeated .perfetto.protos.TracingServiceState.DataSource data_sources = 2;</code>
     */
    @java.lang.Override
    public perfetto.protos.TracingServiceStateOuterClass.TracingServiceState.DataSource getDataSources(int index) {
      return dataSources_.get(index);
    }
    /**
     * <pre>
     * Lists the data sources available.
     * </pre>
     *
     * <code>repeated .perfetto.protos.TracingServiceState.DataSource data_sources = 2;</code>
     */
    @java.lang.Override
    public perfetto.protos.TracingServiceStateOuterClass.TracingServiceState.DataSourceOrBuilder getDataSourcesOrBuilder(
        int index) {
      return dataSources_.get(index);
    }

    public static final int TRACING_SESSIONS_FIELD_NUMBER = 6;
    @SuppressWarnings("serial")
    private java.util.List<perfetto.protos.TracingServiceStateOuterClass.TracingServiceState.TracingSession> tracingSessions_;
    /**
     * <pre>
     * Lists the tracing sessions active AND owned by a consumer that has the same
     * UID of the caller (or all of them if the caller is root).
     * Introduced in v24 / Android T.
     * </pre>
     *
     * <code>repeated .perfetto.protos.TracingServiceState.TracingSession tracing_sessions = 6;</code>
     */
    @java.lang.Override
    public java.util.List<perfetto.protos.TracingServiceStateOuterClass.TracingServiceState.TracingSession> getTracingSessionsList() {
      return tracingSessions_;
    }
    /**
     * <pre>
     * Lists the tracing sessions active AND owned by a consumer that has the same
     * UID of the caller (or all of them if the caller is root).
     * Introduced in v24 / Android T.
     * </pre>
     *
     * <code>repeated .perfetto.protos.TracingServiceState.TracingSession tracing_sessions = 6;</code>
     */
    @java.lang.Override
    public java.util.List<? extends perfetto.protos.TracingServiceStateOuterClass.TracingServiceState.TracingSessionOrBuilder> 
        getTracingSessionsOrBuilderList() {
      return tracingSessions_;
    }
    /**
     * <pre>
     * Lists the tracing sessions active AND owned by a consumer that has the same
     * UID of the caller (or all of them if the caller is root).
     * Introduced in v24 / Android T.
     * </pre>
     *
     * <code>repeated .perfetto.protos.TracingServiceState.TracingSession tracing_sessions = 6;</code>
     */
    @java.lang.Override
    public int getTracingSessionsCount() {
      return tracingSessions_.size();
    }
    /**
     * <pre>
     * Lists the tracing sessions active AND owned by a consumer that has the same
     * UID of the caller (or all of them if the caller is root).
     * Introduced in v24 / Android T.
     * </pre>
     *
     * <code>repeated .perfetto.protos.TracingServiceState.TracingSession tracing_sessions = 6;</code>
     */
    @java.lang.Override
    public perfetto.protos.TracingServiceStateOuterClass.TracingServiceState.TracingSession getTracingSessions(int index) {
      return tracingSessions_.get(index);
    }
    /**
     * <pre>
     * Lists the tracing sessions active AND owned by a consumer that has the same
     * UID of the caller (or all of them if the caller is root).
     * Introduced in v24 / Android T.
     * </pre>
     *
     * <code>repeated .perfetto.protos.TracingServiceState.TracingSession tracing_sessions = 6;</code>
     */
    @java.lang.Override
    public perfetto.protos.TracingServiceStateOuterClass.TracingServiceState.TracingSessionOrBuilder getTracingSessionsOrBuilder(
        int index) {
      return tracingSessions_.get(index);
    }

    public static final int SUPPORTS_TRACING_SESSIONS_FIELD_NUMBER = 7;
    private boolean supportsTracingSessions_ = false;
    /**
     * <pre>
     * This is always set to true from v24 and beyond. This flag is only used to
     * tell the difference between: (1) talking to a recent service which happens
     * to have no tracing session active; (2) talking to an older version of the
     * service which will never report any tracing session.
     * </pre>
     *
     * <code>optional bool supports_tracing_sessions = 7;</code>
     * @return Whether the supportsTracingSessions field is set.
     */
    @java.lang.Override
    public boolean hasSupportsTracingSessions() {
      return ((bitField0_ & 0x00000001) != 0);
    }
    /**
     * <pre>
     * This is always set to true from v24 and beyond. This flag is only used to
     * tell the difference between: (1) talking to a recent service which happens
     * to have no tracing session active; (2) talking to an older version of the
     * service which will never report any tracing session.
     * </pre>
     *
     * <code>optional bool supports_tracing_sessions = 7;</code>
     * @return The supportsTracingSessions.
     */
    @java.lang.Override
    public boolean getSupportsTracingSessions() {
      return supportsTracingSessions_;
    }

    public static final int NUM_SESSIONS_FIELD_NUMBER = 3;
    private int numSessions_ = 0;
    /**
     * <pre>
     * Total number of tracing sessions.
     * </pre>
     *
     * <code>optional int32 num_sessions = 3;</code>
     * @return Whether the numSessions field is set.
     */
    @java.lang.Override
    public boolean hasNumSessions() {
      return ((bitField0_ & 0x00000002) != 0);
    }
    /**
     * <pre>
     * Total number of tracing sessions.
     * </pre>
     *
     * <code>optional int32 num_sessions = 3;</code>
     * @return The numSessions.
     */
    @java.lang.Override
    public int getNumSessions() {
      return numSessions_;
    }

    public static final int NUM_SESSIONS_STARTED_FIELD_NUMBER = 4;
    private int numSessionsStarted_ = 0;
    /**
     * <pre>
     * Number of tracing sessions in the started state. Always &lt;= num_sessions.
     * </pre>
     *
     * <code>optional int32 num_sessions_started = 4;</code>
     * @return Whether the numSessionsStarted field is set.
     */
    @java.lang.Override
    public boolean hasNumSessionsStarted() {
      return ((bitField0_ & 0x00000004) != 0);
    }
    /**
     * <pre>
     * Number of tracing sessions in the started state. Always &lt;= num_sessions.
     * </pre>
     *
     * <code>optional int32 num_sessions_started = 4;</code>
     * @return The numSessionsStarted.
     */
    @java.lang.Override
    public int getNumSessionsStarted() {
      return numSessionsStarted_;
    }

    public static final int TRACING_SERVICE_VERSION_FIELD_NUMBER = 5;
    @SuppressWarnings("serial")
    private volatile java.lang.Object tracingServiceVersion_ = "";
    /**
     * <pre>
     * The version of traced (the same returned by `traced --version`).
     * This is a human readable string with and its format varies depending on
     * the build system and the repo (standalone vs AOSP).
     * This is intended for human debugging only.
     * </pre>
     *
     * <code>optional string tracing_service_version = 5;</code>
     * @return Whether the tracingServiceVersion field is set.
     */
    @java.lang.Override
    public boolean hasTracingServiceVersion() {
      return ((bitField0_ & 0x00000008) != 0);
    }
    /**
     * <pre>
     * The version of traced (the same returned by `traced --version`).
     * This is a human readable string with and its format varies depending on
     * the build system and the repo (standalone vs AOSP).
     * This is intended for human debugging only.
     * </pre>
     *
     * <code>optional string tracing_service_version = 5;</code>
     * @return The tracingServiceVersion.
     */
    @java.lang.Override
    public java.lang.String getTracingServiceVersion() {
      java.lang.Object ref = tracingServiceVersion_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        if (bs.isValidUtf8()) {
          tracingServiceVersion_ = s;
        }
        return s;
      }
    }
    /**
     * <pre>
     * The version of traced (the same returned by `traced --version`).
     * This is a human readable string with and its format varies depending on
     * the build system and the repo (standalone vs AOSP).
     * This is intended for human debugging only.
     * </pre>
     *
     * <code>optional string tracing_service_version = 5;</code>
     * @return The bytes for tracingServiceVersion.
     */
    @java.lang.Override
    public com.google.protobuf.ByteString
        getTracingServiceVersionBytes() {
      java.lang.Object ref = tracingServiceVersion_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        tracingServiceVersion_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      for (int i = 0; i < producers_.size(); i++) {
        output.writeMessage(1, producers_.get(i));
      }
      for (int i = 0; i < dataSources_.size(); i++) {
        output.writeMessage(2, dataSources_.get(i));
      }
      if (((bitField0_ & 0x00000002) != 0)) {
        output.writeInt32(3, numSessions_);
      }
      if (((bitField0_ & 0x00000004) != 0)) {
        output.writeInt32(4, numSessionsStarted_);
      }
      if (((bitField0_ & 0x00000008) != 0)) {
        com.google.protobuf.GeneratedMessageV3.writeString(output, 5, tracingServiceVersion_);
      }
      for (int i = 0; i < tracingSessions_.size(); i++) {
        output.writeMessage(6, tracingSessions_.get(i));
      }
      if (((bitField0_ & 0x00000001) != 0)) {
        output.writeBool(7, supportsTracingSessions_);
      }
      getUnknownFields().writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      for (int i = 0; i < producers_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(1, producers_.get(i));
      }
      for (int i = 0; i < dataSources_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(2, dataSources_.get(i));
      }
      if (((bitField0_ & 0x00000002) != 0)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(3, numSessions_);
      }
      if (((bitField0_ & 0x00000004) != 0)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(4, numSessionsStarted_);
      }
      if (((bitField0_ & 0x00000008) != 0)) {
        size += com.google.protobuf.GeneratedMessageV3.computeStringSize(5, tracingServiceVersion_);
      }
      for (int i = 0; i < tracingSessions_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(6, tracingSessions_.get(i));
      }
      if (((bitField0_ & 0x00000001) != 0)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(7, supportsTracingSessions_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof perfetto.protos.TracingServiceStateOuterClass.TracingServiceState)) {
        return super.equals(obj);
      }
      perfetto.protos.TracingServiceStateOuterClass.TracingServiceState other = (perfetto.protos.TracingServiceStateOuterClass.TracingServiceState) obj;

      if (!getProducersList()
          .equals(other.getProducersList())) return false;
      if (!getDataSourcesList()
          .equals(other.getDataSourcesList())) return false;
      if (!getTracingSessionsList()
          .equals(other.getTracingSessionsList())) return false;
      if (hasSupportsTracingSessions() != other.hasSupportsTracingSessions()) return false;
      if (hasSupportsTracingSessions()) {
        if (getSupportsTracingSessions()
            != other.getSupportsTracingSessions()) return false;
      }
      if (hasNumSessions() != other.hasNumSessions()) return false;
      if (hasNumSessions()) {
        if (getNumSessions()
            != other.getNumSessions()) return false;
      }
      if (hasNumSessionsStarted() != other.hasNumSessionsStarted()) return false;
      if (hasNumSessionsStarted()) {
        if (getNumSessionsStarted()
            != other.getNumSessionsStarted()) return false;
      }
      if (hasTracingServiceVersion() != other.hasTracingServiceVersion()) return false;
      if (hasTracingServiceVersion()) {
        if (!getTracingServiceVersion()
            .equals(other.getTracingServiceVersion())) return false;
      }
      if (!getUnknownFields().equals(other.getUnknownFields())) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      if (getProducersCount() > 0) {
        hash = (37 * hash) + PRODUCERS_FIELD_NUMBER;
        hash = (53 * hash) + getProducersList().hashCode();
      }
      if (getDataSourcesCount() > 0) {
        hash = (37 * hash) + DATA_SOURCES_FIELD_NUMBER;
        hash = (53 * hash) + getDataSourcesList().hashCode();
      }
      if (getTracingSessionsCount() > 0) {
        hash = (37 * hash) + TRACING_SESSIONS_FIELD_NUMBER;
        hash = (53 * hash) + getTracingSessionsList().hashCode();
      }
      if (hasSupportsTracingSessions()) {
        hash = (37 * hash) + SUPPORTS_TRACING_SESSIONS_FIELD_NUMBER;
        hash = (53 * hash) + com.google.protobuf.Internal.hashBoolean(
            getSupportsTracingSessions());
      }
      if (hasNumSessions()) {
        hash = (37 * hash) + NUM_SESSIONS_FIELD_NUMBER;
        hash = (53 * hash) + getNumSessions();
      }
      if (hasNumSessionsStarted()) {
        hash = (37 * hash) + NUM_SESSIONS_STARTED_FIELD_NUMBER;
        hash = (53 * hash) + getNumSessionsStarted();
      }
      if (hasTracingServiceVersion()) {
        hash = (37 * hash) + TRACING_SERVICE_VERSION_FIELD_NUMBER;
        hash = (53 * hash) + getTracingServiceVersion().hashCode();
      }
      hash = (29 * hash) + getUnknownFields().hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static perfetto.protos.TracingServiceStateOuterClass.TracingServiceState parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static perfetto.protos.TracingServiceStateOuterClass.TracingServiceState parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static perfetto.protos.TracingServiceStateOuterClass.TracingServiceState parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static perfetto.protos.TracingServiceStateOuterClass.TracingServiceState parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static perfetto.protos.TracingServiceStateOuterClass.TracingServiceState parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static perfetto.protos.TracingServiceStateOuterClass.TracingServiceState parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static perfetto.protos.TracingServiceStateOuterClass.TracingServiceState parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static perfetto.protos.TracingServiceStateOuterClass.TracingServiceState parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static perfetto.protos.TracingServiceStateOuterClass.TracingServiceState parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static perfetto.protos.TracingServiceStateOuterClass.TracingServiceState parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static perfetto.protos.TracingServiceStateOuterClass.TracingServiceState parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static perfetto.protos.TracingServiceStateOuterClass.TracingServiceState parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(perfetto.protos.TracingServiceStateOuterClass.TracingServiceState prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * <pre>
     * Reports the state of the tracing service. Used to gather details about the
     * data sources connected.
     * See ConsumerPort::QueryServiceState().
     * </pre>
     *
     * Protobuf type {@code perfetto.protos.TracingServiceState}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:perfetto.protos.TracingServiceState)
        perfetto.protos.TracingServiceStateOuterClass.TracingServiceStateOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return perfetto.protos.TracingServiceStateOuterClass.internal_static_perfetto_protos_TracingServiceState_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return perfetto.protos.TracingServiceStateOuterClass.internal_static_perfetto_protos_TracingServiceState_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                perfetto.protos.TracingServiceStateOuterClass.TracingServiceState.class, perfetto.protos.TracingServiceStateOuterClass.TracingServiceState.Builder.class);
      }

      // Construct using perfetto.protos.TracingServiceStateOuterClass.TracingServiceState.newBuilder()
      private Builder() {

      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);

      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        bitField0_ = 0;
        if (producersBuilder_ == null) {
          producers_ = java.util.Collections.emptyList();
        } else {
          producers_ = null;
          producersBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000001);
        if (dataSourcesBuilder_ == null) {
          dataSources_ = java.util.Collections.emptyList();
        } else {
          dataSources_ = null;
          dataSourcesBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000002);
        if (tracingSessionsBuilder_ == null) {
          tracingSessions_ = java.util.Collections.emptyList();
        } else {
          tracingSessions_ = null;
          tracingSessionsBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000004);
        supportsTracingSessions_ = false;
        numSessions_ = 0;
        numSessionsStarted_ = 0;
        tracingServiceVersion_ = "";
        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return perfetto.protos.TracingServiceStateOuterClass.internal_static_perfetto_protos_TracingServiceState_descriptor;
      }

      @java.lang.Override
      public perfetto.protos.TracingServiceStateOuterClass.TracingServiceState getDefaultInstanceForType() {
        return perfetto.protos.TracingServiceStateOuterClass.TracingServiceState.getDefaultInstance();
      }

      @java.lang.Override
      public perfetto.protos.TracingServiceStateOuterClass.TracingServiceState build() {
        perfetto.protos.TracingServiceStateOuterClass.TracingServiceState result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public perfetto.protos.TracingServiceStateOuterClass.TracingServiceState buildPartial() {
        perfetto.protos.TracingServiceStateOuterClass.TracingServiceState result = new perfetto.protos.TracingServiceStateOuterClass.TracingServiceState(this);
        buildPartialRepeatedFields(result);
        if (bitField0_ != 0) { buildPartial0(result); }
        onBuilt();
        return result;
      }

      private void buildPartialRepeatedFields(perfetto.protos.TracingServiceStateOuterClass.TracingServiceState result) {
        if (producersBuilder_ == null) {
          if (((bitField0_ & 0x00000001) != 0)) {
            producers_ = java.util.Collections.unmodifiableList(producers_);
            bitField0_ = (bitField0_ & ~0x00000001);
          }
          result.producers_ = producers_;
        } else {
          result.producers_ = producersBuilder_.build();
        }
        if (dataSourcesBuilder_ == null) {
          if (((bitField0_ & 0x00000002) != 0)) {
            dataSources_ = java.util.Collections.unmodifiableList(dataSources_);
            bitField0_ = (bitField0_ & ~0x00000002);
          }
          result.dataSources_ = dataSources_;
        } else {
          result.dataSources_ = dataSourcesBuilder_.build();
        }
        if (tracingSessionsBuilder_ == null) {
          if (((bitField0_ & 0x00000004) != 0)) {
            tracingSessions_ = java.util.Collections.unmodifiableList(tracingSessions_);
            bitField0_ = (bitField0_ & ~0x00000004);
          }
          result.tracingSessions_ = tracingSessions_;
        } else {
          result.tracingSessions_ = tracingSessionsBuilder_.build();
        }
      }

      private void buildPartial0(perfetto.protos.TracingServiceStateOuterClass.TracingServiceState result) {
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000008) != 0)) {
          result.supportsTracingSessions_ = supportsTracingSessions_;
          to_bitField0_ |= 0x00000001;
        }
        if (((from_bitField0_ & 0x00000010) != 0)) {
          result.numSessions_ = numSessions_;
          to_bitField0_ |= 0x00000002;
        }
        if (((from_bitField0_ & 0x00000020) != 0)) {
          result.numSessionsStarted_ = numSessionsStarted_;
          to_bitField0_ |= 0x00000004;
        }
        if (((from_bitField0_ & 0x00000040) != 0)) {
          result.tracingServiceVersion_ = tracingServiceVersion_;
          to_bitField0_ |= 0x00000008;
        }
        result.bitField0_ |= to_bitField0_;
      }

      @java.lang.Override
      public Builder clone() {
        return super.clone();
      }
      @java.lang.Override
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.setField(field, value);
      }
      @java.lang.Override
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return super.clearField(field);
      }
      @java.lang.Override
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return super.clearOneof(oneof);
      }
      @java.lang.Override
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, java.lang.Object value) {
        return super.setRepeatedField(field, index, value);
      }
      @java.lang.Override
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.addRepeatedField(field, value);
      }
      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof perfetto.protos.TracingServiceStateOuterClass.TracingServiceState) {
          return mergeFrom((perfetto.protos.TracingServiceStateOuterClass.TracingServiceState)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(perfetto.protos.TracingServiceStateOuterClass.TracingServiceState other) {
        if (other == perfetto.protos.TracingServiceStateOuterClass.TracingServiceState.getDefaultInstance()) return this;
        if (producersBuilder_ == null) {
          if (!other.producers_.isEmpty()) {
            if (producers_.isEmpty()) {
              producers_ = other.producers_;
              bitField0_ = (bitField0_ & ~0x00000001);
            } else {
              ensureProducersIsMutable();
              producers_.addAll(other.producers_);
            }
            onChanged();
          }
        } else {
          if (!other.producers_.isEmpty()) {
            if (producersBuilder_.isEmpty()) {
              producersBuilder_.dispose();
              producersBuilder_ = null;
              producers_ = other.producers_;
              bitField0_ = (bitField0_ & ~0x00000001);
              producersBuilder_ = 
                com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders ?
                   getProducersFieldBuilder() : null;
            } else {
              producersBuilder_.addAllMessages(other.producers_);
            }
          }
        }
        if (dataSourcesBuilder_ == null) {
          if (!other.dataSources_.isEmpty()) {
            if (dataSources_.isEmpty()) {
              dataSources_ = other.dataSources_;
              bitField0_ = (bitField0_ & ~0x00000002);
            } else {
              ensureDataSourcesIsMutable();
              dataSources_.addAll(other.dataSources_);
            }
            onChanged();
          }
        } else {
          if (!other.dataSources_.isEmpty()) {
            if (dataSourcesBuilder_.isEmpty()) {
              dataSourcesBuilder_.dispose();
              dataSourcesBuilder_ = null;
              dataSources_ = other.dataSources_;
              bitField0_ = (bitField0_ & ~0x00000002);
              dataSourcesBuilder_ = 
                com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders ?
                   getDataSourcesFieldBuilder() : null;
            } else {
              dataSourcesBuilder_.addAllMessages(other.dataSources_);
            }
          }
        }
        if (tracingSessionsBuilder_ == null) {
          if (!other.tracingSessions_.isEmpty()) {
            if (tracingSessions_.isEmpty()) {
              tracingSessions_ = other.tracingSessions_;
              bitField0_ = (bitField0_ & ~0x00000004);
            } else {
              ensureTracingSessionsIsMutable();
              tracingSessions_.addAll(other.tracingSessions_);
            }
            onChanged();
          }
        } else {
          if (!other.tracingSessions_.isEmpty()) {
            if (tracingSessionsBuilder_.isEmpty()) {
              tracingSessionsBuilder_.dispose();
              tracingSessionsBuilder_ = null;
              tracingSessions_ = other.tracingSessions_;
              bitField0_ = (bitField0_ & ~0x00000004);
              tracingSessionsBuilder_ = 
                com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders ?
                   getTracingSessionsFieldBuilder() : null;
            } else {
              tracingSessionsBuilder_.addAllMessages(other.tracingSessions_);
            }
          }
        }
        if (other.hasSupportsTracingSessions()) {
          setSupportsTracingSessions(other.getSupportsTracingSessions());
        }
        if (other.hasNumSessions()) {
          setNumSessions(other.getNumSessions());
        }
        if (other.hasNumSessionsStarted()) {
          setNumSessionsStarted(other.getNumSessionsStarted());
        }
        if (other.hasTracingServiceVersion()) {
          tracingServiceVersion_ = other.tracingServiceVersion_;
          bitField0_ |= 0x00000040;
          onChanged();
        }
        this.mergeUnknownFields(other.getUnknownFields());
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        if (extensionRegistry == null) {
          throw new java.lang.NullPointerException();
        }
        try {
          boolean done = false;
          while (!done) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                done = true;
                break;
              case 10: {
                perfetto.protos.TracingServiceStateOuterClass.TracingServiceState.Producer m =
                    input.readMessage(
                        perfetto.protos.TracingServiceStateOuterClass.TracingServiceState.Producer.PARSER,
                        extensionRegistry);
                if (producersBuilder_ == null) {
                  ensureProducersIsMutable();
                  producers_.add(m);
                } else {
                  producersBuilder_.addMessage(m);
                }
                break;
              } // case 10
              case 18: {
                perfetto.protos.TracingServiceStateOuterClass.TracingServiceState.DataSource m =
                    input.readMessage(
                        perfetto.protos.TracingServiceStateOuterClass.TracingServiceState.DataSource.PARSER,
                        extensionRegistry);
                if (dataSourcesBuilder_ == null) {
                  ensureDataSourcesIsMutable();
                  dataSources_.add(m);
                } else {
                  dataSourcesBuilder_.addMessage(m);
                }
                break;
              } // case 18
              case 24: {
                numSessions_ = input.readInt32();
                bitField0_ |= 0x00000010;
                break;
              } // case 24
              case 32: {
                numSessionsStarted_ = input.readInt32();
                bitField0_ |= 0x00000020;
                break;
              } // case 32
              case 42: {
                tracingServiceVersion_ = input.readBytes();
                bitField0_ |= 0x00000040;
                break;
              } // case 42
              case 50: {
                perfetto.protos.TracingServiceStateOuterClass.TracingServiceState.TracingSession m =
                    input.readMessage(
                        perfetto.protos.TracingServiceStateOuterClass.TracingServiceState.TracingSession.PARSER,
                        extensionRegistry);
                if (tracingSessionsBuilder_ == null) {
                  ensureTracingSessionsIsMutable();
                  tracingSessions_.add(m);
                } else {
                  tracingSessionsBuilder_.addMessage(m);
                }
                break;
              } // case 50
              case 56: {
                supportsTracingSessions_ = input.readBool();
                bitField0_ |= 0x00000008;
                break;
              } // case 56
              default: {
                if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                  done = true; // was an endgroup tag
                }
                break;
              } // default:
            } // switch (tag)
          } // while (!done)
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.unwrapIOException();
        } finally {
          onChanged();
        } // finally
        return this;
      }
      private int bitField0_;

      private java.util.List<perfetto.protos.TracingServiceStateOuterClass.TracingServiceState.Producer> producers_ =
        java.util.Collections.emptyList();
      private void ensureProducersIsMutable() {
        if (!((bitField0_ & 0x00000001) != 0)) {
          producers_ = new java.util.ArrayList<perfetto.protos.TracingServiceStateOuterClass.TracingServiceState.Producer>(producers_);
          bitField0_ |= 0x00000001;
         }
      }

      private com.google.protobuf.RepeatedFieldBuilderV3<
          perfetto.protos.TracingServiceStateOuterClass.TracingServiceState.Producer, perfetto.protos.TracingServiceStateOuterClass.TracingServiceState.Producer.Builder, perfetto.protos.TracingServiceStateOuterClass.TracingServiceState.ProducerOrBuilder> producersBuilder_;

      /**
       * <pre>
       * Lists all the producers connected.
       * </pre>
       *
       * <code>repeated .perfetto.protos.TracingServiceState.Producer producers = 1;</code>
       */
      public java.util.List<perfetto.protos.TracingServiceStateOuterClass.TracingServiceState.Producer> getProducersList() {
        if (producersBuilder_ == null) {
          return java.util.Collections.unmodifiableList(producers_);
        } else {
          return producersBuilder_.getMessageList();
        }
      }
      /**
       * <pre>
       * Lists all the producers connected.
       * </pre>
       *
       * <code>repeated .perfetto.protos.TracingServiceState.Producer producers = 1;</code>
       */
      public int getProducersCount() {
        if (producersBuilder_ == null) {
          return producers_.size();
        } else {
          return producersBuilder_.getCount();
        }
      }
      /**
       * <pre>
       * Lists all the producers connected.
       * </pre>
       *
       * <code>repeated .perfetto.protos.TracingServiceState.Producer producers = 1;</code>
       */
      public perfetto.protos.TracingServiceStateOuterClass.TracingServiceState.Producer getProducers(int index) {
        if (producersBuilder_ == null) {
          return producers_.get(index);
        } else {
          return producersBuilder_.getMessage(index);
        }
      }
      /**
       * <pre>
       * Lists all the producers connected.
       * </pre>
       *
       * <code>repeated .perfetto.protos.TracingServiceState.Producer producers = 1;</code>
       */
      public Builder setProducers(
          int index, perfetto.protos.TracingServiceStateOuterClass.TracingServiceState.Producer value) {
        if (producersBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureProducersIsMutable();
          producers_.set(index, value);
          onChanged();
        } else {
          producersBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <pre>
       * Lists all the producers connected.
       * </pre>
       *
       * <code>repeated .perfetto.protos.TracingServiceState.Producer producers = 1;</code>
       */
      public Builder setProducers(
          int index, perfetto.protos.TracingServiceStateOuterClass.TracingServiceState.Producer.Builder builderForValue) {
        if (producersBuilder_ == null) {
          ensureProducersIsMutable();
          producers_.set(index, builderForValue.build());
          onChanged();
        } else {
          producersBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * Lists all the producers connected.
       * </pre>
       *
       * <code>repeated .perfetto.protos.TracingServiceState.Producer producers = 1;</code>
       */
      public Builder addProducers(perfetto.protos.TracingServiceStateOuterClass.TracingServiceState.Producer value) {
        if (producersBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureProducersIsMutable();
          producers_.add(value);
          onChanged();
        } else {
          producersBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <pre>
       * Lists all the producers connected.
       * </pre>
       *
       * <code>repeated .perfetto.protos.TracingServiceState.Producer producers = 1;</code>
       */
      public Builder addProducers(
          int index, perfetto.protos.TracingServiceStateOuterClass.TracingServiceState.Producer value) {
        if (producersBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureProducersIsMutable();
          producers_.add(index, value);
          onChanged();
        } else {
          producersBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <pre>
       * Lists all the producers connected.
       * </pre>
       *
       * <code>repeated .perfetto.protos.TracingServiceState.Producer producers = 1;</code>
       */
      public Builder addProducers(
          perfetto.protos.TracingServiceStateOuterClass.TracingServiceState.Producer.Builder builderForValue) {
        if (producersBuilder_ == null) {
          ensureProducersIsMutable();
          producers_.add(builderForValue.build());
          onChanged();
        } else {
          producersBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * Lists all the producers connected.
       * </pre>
       *
       * <code>repeated .perfetto.protos.TracingServiceState.Producer producers = 1;</code>
       */
      public Builder addProducers(
          int index, perfetto.protos.TracingServiceStateOuterClass.TracingServiceState.Producer.Builder builderForValue) {
        if (producersBuilder_ == null) {
          ensureProducersIsMutable();
          producers_.add(index, builderForValue.build());
          onChanged();
        } else {
          producersBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * Lists all the producers connected.
       * </pre>
       *
       * <code>repeated .perfetto.protos.TracingServiceState.Producer producers = 1;</code>
       */
      public Builder addAllProducers(
          java.lang.Iterable<? extends perfetto.protos.TracingServiceStateOuterClass.TracingServiceState.Producer> values) {
        if (producersBuilder_ == null) {
          ensureProducersIsMutable();
          com.google.protobuf.AbstractMessageLite.Builder.addAll(
              values, producers_);
          onChanged();
        } else {
          producersBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <pre>
       * Lists all the producers connected.
       * </pre>
       *
       * <code>repeated .perfetto.protos.TracingServiceState.Producer producers = 1;</code>
       */
      public Builder clearProducers() {
        if (producersBuilder_ == null) {
          producers_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000001);
          onChanged();
        } else {
          producersBuilder_.clear();
        }
        return this;
      }
      /**
       * <pre>
       * Lists all the producers connected.
       * </pre>
       *
       * <code>repeated .perfetto.protos.TracingServiceState.Producer producers = 1;</code>
       */
      public Builder removeProducers(int index) {
        if (producersBuilder_ == null) {
          ensureProducersIsMutable();
          producers_.remove(index);
          onChanged();
        } else {
          producersBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <pre>
       * Lists all the producers connected.
       * </pre>
       *
       * <code>repeated .perfetto.protos.TracingServiceState.Producer producers = 1;</code>
       */
      public perfetto.protos.TracingServiceStateOuterClass.TracingServiceState.Producer.Builder getProducersBuilder(
          int index) {
        return getProducersFieldBuilder().getBuilder(index);
      }
      /**
       * <pre>
       * Lists all the producers connected.
       * </pre>
       *
       * <code>repeated .perfetto.protos.TracingServiceState.Producer producers = 1;</code>
       */
      public perfetto.protos.TracingServiceStateOuterClass.TracingServiceState.ProducerOrBuilder getProducersOrBuilder(
          int index) {
        if (producersBuilder_ == null) {
          return producers_.get(index);  } else {
          return producersBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <pre>
       * Lists all the producers connected.
       * </pre>
       *
       * <code>repeated .perfetto.protos.TracingServiceState.Producer producers = 1;</code>
       */
      public java.util.List<? extends perfetto.protos.TracingServiceStateOuterClass.TracingServiceState.ProducerOrBuilder> 
           getProducersOrBuilderList() {
        if (producersBuilder_ != null) {
          return producersBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(producers_);
        }
      }
      /**
       * <pre>
       * Lists all the producers connected.
       * </pre>
       *
       * <code>repeated .perfetto.protos.TracingServiceState.Producer producers = 1;</code>
       */
      public perfetto.protos.TracingServiceStateOuterClass.TracingServiceState.Producer.Builder addProducersBuilder() {
        return getProducersFieldBuilder().addBuilder(
            perfetto.protos.TracingServiceStateOuterClass.TracingServiceState.Producer.getDefaultInstance());
      }
      /**
       * <pre>
       * Lists all the producers connected.
       * </pre>
       *
       * <code>repeated .perfetto.protos.TracingServiceState.Producer producers = 1;</code>
       */
      public perfetto.protos.TracingServiceStateOuterClass.TracingServiceState.Producer.Builder addProducersBuilder(
          int index) {
        return getProducersFieldBuilder().addBuilder(
            index, perfetto.protos.TracingServiceStateOuterClass.TracingServiceState.Producer.getDefaultInstance());
      }
      /**
       * <pre>
       * Lists all the producers connected.
       * </pre>
       *
       * <code>repeated .perfetto.protos.TracingServiceState.Producer producers = 1;</code>
       */
      public java.util.List<perfetto.protos.TracingServiceStateOuterClass.TracingServiceState.Producer.Builder> 
           getProducersBuilderList() {
        return getProducersFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilderV3<
          perfetto.protos.TracingServiceStateOuterClass.TracingServiceState.Producer, perfetto.protos.TracingServiceStateOuterClass.TracingServiceState.Producer.Builder, perfetto.protos.TracingServiceStateOuterClass.TracingServiceState.ProducerOrBuilder> 
          getProducersFieldBuilder() {
        if (producersBuilder_ == null) {
          producersBuilder_ = new com.google.protobuf.RepeatedFieldBuilderV3<
              perfetto.protos.TracingServiceStateOuterClass.TracingServiceState.Producer, perfetto.protos.TracingServiceStateOuterClass.TracingServiceState.Producer.Builder, perfetto.protos.TracingServiceStateOuterClass.TracingServiceState.ProducerOrBuilder>(
                  producers_,
                  ((bitField0_ & 0x00000001) != 0),
                  getParentForChildren(),
                  isClean());
          producers_ = null;
        }
        return producersBuilder_;
      }

      private java.util.List<perfetto.protos.TracingServiceStateOuterClass.TracingServiceState.DataSource> dataSources_ =
        java.util.Collections.emptyList();
      private void ensureDataSourcesIsMutable() {
        if (!((bitField0_ & 0x00000002) != 0)) {
          dataSources_ = new java.util.ArrayList<perfetto.protos.TracingServiceStateOuterClass.TracingServiceState.DataSource>(dataSources_);
          bitField0_ |= 0x00000002;
         }
      }

      private com.google.protobuf.RepeatedFieldBuilderV3<
          perfetto.protos.TracingServiceStateOuterClass.TracingServiceState.DataSource, perfetto.protos.TracingServiceStateOuterClass.TracingServiceState.DataSource.Builder, perfetto.protos.TracingServiceStateOuterClass.TracingServiceState.DataSourceOrBuilder> dataSourcesBuilder_;

      /**
       * <pre>
       * Lists the data sources available.
       * </pre>
       *
       * <code>repeated .perfetto.protos.TracingServiceState.DataSource data_sources = 2;</code>
       */
      public java.util.List<perfetto.protos.TracingServiceStateOuterClass.TracingServiceState.DataSource> getDataSourcesList() {
        if (dataSourcesBuilder_ == null) {
          return java.util.Collections.unmodifiableList(dataSources_);
        } else {
          return dataSourcesBuilder_.getMessageList();
        }
      }
      /**
       * <pre>
       * Lists the data sources available.
       * </pre>
       *
       * <code>repeated .perfetto.protos.TracingServiceState.DataSource data_sources = 2;</code>
       */
      public int getDataSourcesCount() {
        if (dataSourcesBuilder_ == null) {
          return dataSources_.size();
        } else {
          return dataSourcesBuilder_.getCount();
        }
      }
      /**
       * <pre>
       * Lists the data sources available.
       * </pre>
       *
       * <code>repeated .perfetto.protos.TracingServiceState.DataSource data_sources = 2;</code>
       */
      public perfetto.protos.TracingServiceStateOuterClass.TracingServiceState.DataSource getDataSources(int index) {
        if (dataSourcesBuilder_ == null) {
          return dataSources_.get(index);
        } else {
          return dataSourcesBuilder_.getMessage(index);
        }
      }
      /**
       * <pre>
       * Lists the data sources available.
       * </pre>
       *
       * <code>repeated .perfetto.protos.TracingServiceState.DataSource data_sources = 2;</code>
       */
      public Builder setDataSources(
          int index, perfetto.protos.TracingServiceStateOuterClass.TracingServiceState.DataSource value) {
        if (dataSourcesBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureDataSourcesIsMutable();
          dataSources_.set(index, value);
          onChanged();
        } else {
          dataSourcesBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <pre>
       * Lists the data sources available.
       * </pre>
       *
       * <code>repeated .perfetto.protos.TracingServiceState.DataSource data_sources = 2;</code>
       */
      public Builder setDataSources(
          int index, perfetto.protos.TracingServiceStateOuterClass.TracingServiceState.DataSource.Builder builderForValue) {
        if (dataSourcesBuilder_ == null) {
          ensureDataSourcesIsMutable();
          dataSources_.set(index, builderForValue.build());
          onChanged();
        } else {
          dataSourcesBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * Lists the data sources available.
       * </pre>
       *
       * <code>repeated .perfetto.protos.TracingServiceState.DataSource data_sources = 2;</code>
       */
      public Builder addDataSources(perfetto.protos.TracingServiceStateOuterClass.TracingServiceState.DataSource value) {
        if (dataSourcesBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureDataSourcesIsMutable();
          dataSources_.add(value);
          onChanged();
        } else {
          dataSourcesBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <pre>
       * Lists the data sources available.
       * </pre>
       *
       * <code>repeated .perfetto.protos.TracingServiceState.DataSource data_sources = 2;</code>
       */
      public Builder addDataSources(
          int index, perfetto.protos.TracingServiceStateOuterClass.TracingServiceState.DataSource value) {
        if (dataSourcesBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureDataSourcesIsMutable();
          dataSources_.add(index, value);
          onChanged();
        } else {
          dataSourcesBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <pre>
       * Lists the data sources available.
       * </pre>
       *
       * <code>repeated .perfetto.protos.TracingServiceState.DataSource data_sources = 2;</code>
       */
      public Builder addDataSources(
          perfetto.protos.TracingServiceStateOuterClass.TracingServiceState.DataSource.Builder builderForValue) {
        if (dataSourcesBuilder_ == null) {
          ensureDataSourcesIsMutable();
          dataSources_.add(builderForValue.build());
          onChanged();
        } else {
          dataSourcesBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * Lists the data sources available.
       * </pre>
       *
       * <code>repeated .perfetto.protos.TracingServiceState.DataSource data_sources = 2;</code>
       */
      public Builder addDataSources(
          int index, perfetto.protos.TracingServiceStateOuterClass.TracingServiceState.DataSource.Builder builderForValue) {
        if (dataSourcesBuilder_ == null) {
          ensureDataSourcesIsMutable();
          dataSources_.add(index, builderForValue.build());
          onChanged();
        } else {
          dataSourcesBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * Lists the data sources available.
       * </pre>
       *
       * <code>repeated .perfetto.protos.TracingServiceState.DataSource data_sources = 2;</code>
       */
      public Builder addAllDataSources(
          java.lang.Iterable<? extends perfetto.protos.TracingServiceStateOuterClass.TracingServiceState.DataSource> values) {
        if (dataSourcesBuilder_ == null) {
          ensureDataSourcesIsMutable();
          com.google.protobuf.AbstractMessageLite.Builder.addAll(
              values, dataSources_);
          onChanged();
        } else {
          dataSourcesBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <pre>
       * Lists the data sources available.
       * </pre>
       *
       * <code>repeated .perfetto.protos.TracingServiceState.DataSource data_sources = 2;</code>
       */
      public Builder clearDataSources() {
        if (dataSourcesBuilder_ == null) {
          dataSources_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000002);
          onChanged();
        } else {
          dataSourcesBuilder_.clear();
        }
        return this;
      }
      /**
       * <pre>
       * Lists the data sources available.
       * </pre>
       *
       * <code>repeated .perfetto.protos.TracingServiceState.DataSource data_sources = 2;</code>
       */
      public Builder removeDataSources(int index) {
        if (dataSourcesBuilder_ == null) {
          ensureDataSourcesIsMutable();
          dataSources_.remove(index);
          onChanged();
        } else {
          dataSourcesBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <pre>
       * Lists the data sources available.
       * </pre>
       *
       * <code>repeated .perfetto.protos.TracingServiceState.DataSource data_sources = 2;</code>
       */
      public perfetto.protos.TracingServiceStateOuterClass.TracingServiceState.DataSource.Builder getDataSourcesBuilder(
          int index) {
        return getDataSourcesFieldBuilder().getBuilder(index);
      }
      /**
       * <pre>
       * Lists the data sources available.
       * </pre>
       *
       * <code>repeated .perfetto.protos.TracingServiceState.DataSource data_sources = 2;</code>
       */
      public perfetto.protos.TracingServiceStateOuterClass.TracingServiceState.DataSourceOrBuilder getDataSourcesOrBuilder(
          int index) {
        if (dataSourcesBuilder_ == null) {
          return dataSources_.get(index);  } else {
          return dataSourcesBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <pre>
       * Lists the data sources available.
       * </pre>
       *
       * <code>repeated .perfetto.protos.TracingServiceState.DataSource data_sources = 2;</code>
       */
      public java.util.List<? extends perfetto.protos.TracingServiceStateOuterClass.TracingServiceState.DataSourceOrBuilder> 
           getDataSourcesOrBuilderList() {
        if (dataSourcesBuilder_ != null) {
          return dataSourcesBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(dataSources_);
        }
      }
      /**
       * <pre>
       * Lists the data sources available.
       * </pre>
       *
       * <code>repeated .perfetto.protos.TracingServiceState.DataSource data_sources = 2;</code>
       */
      public perfetto.protos.TracingServiceStateOuterClass.TracingServiceState.DataSource.Builder addDataSourcesBuilder() {
        return getDataSourcesFieldBuilder().addBuilder(
            perfetto.protos.TracingServiceStateOuterClass.TracingServiceState.DataSource.getDefaultInstance());
      }
      /**
       * <pre>
       * Lists the data sources available.
       * </pre>
       *
       * <code>repeated .perfetto.protos.TracingServiceState.DataSource data_sources = 2;</code>
       */
      public perfetto.protos.TracingServiceStateOuterClass.TracingServiceState.DataSource.Builder addDataSourcesBuilder(
          int index) {
        return getDataSourcesFieldBuilder().addBuilder(
            index, perfetto.protos.TracingServiceStateOuterClass.TracingServiceState.DataSource.getDefaultInstance());
      }
      /**
       * <pre>
       * Lists the data sources available.
       * </pre>
       *
       * <code>repeated .perfetto.protos.TracingServiceState.DataSource data_sources = 2;</code>
       */
      public java.util.List<perfetto.protos.TracingServiceStateOuterClass.TracingServiceState.DataSource.Builder> 
           getDataSourcesBuilderList() {
        return getDataSourcesFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilderV3<
          perfetto.protos.TracingServiceStateOuterClass.TracingServiceState.DataSource, perfetto.protos.TracingServiceStateOuterClass.TracingServiceState.DataSource.Builder, perfetto.protos.TracingServiceStateOuterClass.TracingServiceState.DataSourceOrBuilder> 
          getDataSourcesFieldBuilder() {
        if (dataSourcesBuilder_ == null) {
          dataSourcesBuilder_ = new com.google.protobuf.RepeatedFieldBuilderV3<
              perfetto.protos.TracingServiceStateOuterClass.TracingServiceState.DataSource, perfetto.protos.TracingServiceStateOuterClass.TracingServiceState.DataSource.Builder, perfetto.protos.TracingServiceStateOuterClass.TracingServiceState.DataSourceOrBuilder>(
                  dataSources_,
                  ((bitField0_ & 0x00000002) != 0),
                  getParentForChildren(),
                  isClean());
          dataSources_ = null;
        }
        return dataSourcesBuilder_;
      }

      private java.util.List<perfetto.protos.TracingServiceStateOuterClass.TracingServiceState.TracingSession> tracingSessions_ =
        java.util.Collections.emptyList();
      private void ensureTracingSessionsIsMutable() {
        if (!((bitField0_ & 0x00000004) != 0)) {
          tracingSessions_ = new java.util.ArrayList<perfetto.protos.TracingServiceStateOuterClass.TracingServiceState.TracingSession>(tracingSessions_);
          bitField0_ |= 0x00000004;
         }
      }

      private com.google.protobuf.RepeatedFieldBuilderV3<
          perfetto.protos.TracingServiceStateOuterClass.TracingServiceState.TracingSession, perfetto.protos.TracingServiceStateOuterClass.TracingServiceState.TracingSession.Builder, perfetto.protos.TracingServiceStateOuterClass.TracingServiceState.TracingSessionOrBuilder> tracingSessionsBuilder_;

      /**
       * <pre>
       * Lists the tracing sessions active AND owned by a consumer that has the same
       * UID of the caller (or all of them if the caller is root).
       * Introduced in v24 / Android T.
       * </pre>
       *
       * <code>repeated .perfetto.protos.TracingServiceState.TracingSession tracing_sessions = 6;</code>
       */
      public java.util.List<perfetto.protos.TracingServiceStateOuterClass.TracingServiceState.TracingSession> getTracingSessionsList() {
        if (tracingSessionsBuilder_ == null) {
          return java.util.Collections.unmodifiableList(tracingSessions_);
        } else {
          return tracingSessionsBuilder_.getMessageList();
        }
      }
      /**
       * <pre>
       * Lists the tracing sessions active AND owned by a consumer that has the same
       * UID of the caller (or all of them if the caller is root).
       * Introduced in v24 / Android T.
       * </pre>
       *
       * <code>repeated .perfetto.protos.TracingServiceState.TracingSession tracing_sessions = 6;</code>
       */
      public int getTracingSessionsCount() {
        if (tracingSessionsBuilder_ == null) {
          return tracingSessions_.size();
        } else {
          return tracingSessionsBuilder_.getCount();
        }
      }
      /**
       * <pre>
       * Lists the tracing sessions active AND owned by a consumer that has the same
       * UID of the caller (or all of them if the caller is root).
       * Introduced in v24 / Android T.
       * </pre>
       *
       * <code>repeated .perfetto.protos.TracingServiceState.TracingSession tracing_sessions = 6;</code>
       */
      public perfetto.protos.TracingServiceStateOuterClass.TracingServiceState.TracingSession getTracingSessions(int index) {
        if (tracingSessionsBuilder_ == null) {
          return tracingSessions_.get(index);
        } else {
          return tracingSessionsBuilder_.getMessage(index);
        }
      }
      /**
       * <pre>
       * Lists the tracing sessions active AND owned by a consumer that has the same
       * UID of the caller (or all of them if the caller is root).
       * Introduced in v24 / Android T.
       * </pre>
       *
       * <code>repeated .perfetto.protos.TracingServiceState.TracingSession tracing_sessions = 6;</code>
       */
      public Builder setTracingSessions(
          int index, perfetto.protos.TracingServiceStateOuterClass.TracingServiceState.TracingSession value) {
        if (tracingSessionsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureTracingSessionsIsMutable();
          tracingSessions_.set(index, value);
          onChanged();
        } else {
          tracingSessionsBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <pre>
       * Lists the tracing sessions active AND owned by a consumer that has the same
       * UID of the caller (or all of them if the caller is root).
       * Introduced in v24 / Android T.
       * </pre>
       *
       * <code>repeated .perfetto.protos.TracingServiceState.TracingSession tracing_sessions = 6;</code>
       */
      public Builder setTracingSessions(
          int index, perfetto.protos.TracingServiceStateOuterClass.TracingServiceState.TracingSession.Builder builderForValue) {
        if (tracingSessionsBuilder_ == null) {
          ensureTracingSessionsIsMutable();
          tracingSessions_.set(index, builderForValue.build());
          onChanged();
        } else {
          tracingSessionsBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * Lists the tracing sessions active AND owned by a consumer that has the same
       * UID of the caller (or all of them if the caller is root).
       * Introduced in v24 / Android T.
       * </pre>
       *
       * <code>repeated .perfetto.protos.TracingServiceState.TracingSession tracing_sessions = 6;</code>
       */
      public Builder addTracingSessions(perfetto.protos.TracingServiceStateOuterClass.TracingServiceState.TracingSession value) {
        if (tracingSessionsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureTracingSessionsIsMutable();
          tracingSessions_.add(value);
          onChanged();
        } else {
          tracingSessionsBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <pre>
       * Lists the tracing sessions active AND owned by a consumer that has the same
       * UID of the caller (or all of them if the caller is root).
       * Introduced in v24 / Android T.
       * </pre>
       *
       * <code>repeated .perfetto.protos.TracingServiceState.TracingSession tracing_sessions = 6;</code>
       */
      public Builder addTracingSessions(
          int index, perfetto.protos.TracingServiceStateOuterClass.TracingServiceState.TracingSession value) {
        if (tracingSessionsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureTracingSessionsIsMutable();
          tracingSessions_.add(index, value);
          onChanged();
        } else {
          tracingSessionsBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <pre>
       * Lists the tracing sessions active AND owned by a consumer that has the same
       * UID of the caller (or all of them if the caller is root).
       * Introduced in v24 / Android T.
       * </pre>
       *
       * <code>repeated .perfetto.protos.TracingServiceState.TracingSession tracing_sessions = 6;</code>
       */
      public Builder addTracingSessions(
          perfetto.protos.TracingServiceStateOuterClass.TracingServiceState.TracingSession.Builder builderForValue) {
        if (tracingSessionsBuilder_ == null) {
          ensureTracingSessionsIsMutable();
          tracingSessions_.add(builderForValue.build());
          onChanged();
        } else {
          tracingSessionsBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * Lists the tracing sessions active AND owned by a consumer that has the same
       * UID of the caller (or all of them if the caller is root).
       * Introduced in v24 / Android T.
       * </pre>
       *
       * <code>repeated .perfetto.protos.TracingServiceState.TracingSession tracing_sessions = 6;</code>
       */
      public Builder addTracingSessions(
          int index, perfetto.protos.TracingServiceStateOuterClass.TracingServiceState.TracingSession.Builder builderForValue) {
        if (tracingSessionsBuilder_ == null) {
          ensureTracingSessionsIsMutable();
          tracingSessions_.add(index, builderForValue.build());
          onChanged();
        } else {
          tracingSessionsBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * Lists the tracing sessions active AND owned by a consumer that has the same
       * UID of the caller (or all of them if the caller is root).
       * Introduced in v24 / Android T.
       * </pre>
       *
       * <code>repeated .perfetto.protos.TracingServiceState.TracingSession tracing_sessions = 6;</code>
       */
      public Builder addAllTracingSessions(
          java.lang.Iterable<? extends perfetto.protos.TracingServiceStateOuterClass.TracingServiceState.TracingSession> values) {
        if (tracingSessionsBuilder_ == null) {
          ensureTracingSessionsIsMutable();
          com.google.protobuf.AbstractMessageLite.Builder.addAll(
              values, tracingSessions_);
          onChanged();
        } else {
          tracingSessionsBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <pre>
       * Lists the tracing sessions active AND owned by a consumer that has the same
       * UID of the caller (or all of them if the caller is root).
       * Introduced in v24 / Android T.
       * </pre>
       *
       * <code>repeated .perfetto.protos.TracingServiceState.TracingSession tracing_sessions = 6;</code>
       */
      public Builder clearTracingSessions() {
        if (tracingSessionsBuilder_ == null) {
          tracingSessions_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000004);
          onChanged();
        } else {
          tracingSessionsBuilder_.clear();
        }
        return this;
      }
      /**
       * <pre>
       * Lists the tracing sessions active AND owned by a consumer that has the same
       * UID of the caller (or all of them if the caller is root).
       * Introduced in v24 / Android T.
       * </pre>
       *
       * <code>repeated .perfetto.protos.TracingServiceState.TracingSession tracing_sessions = 6;</code>
       */
      public Builder removeTracingSessions(int index) {
        if (tracingSessionsBuilder_ == null) {
          ensureTracingSessionsIsMutable();
          tracingSessions_.remove(index);
          onChanged();
        } else {
          tracingSessionsBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <pre>
       * Lists the tracing sessions active AND owned by a consumer that has the same
       * UID of the caller (or all of them if the caller is root).
       * Introduced in v24 / Android T.
       * </pre>
       *
       * <code>repeated .perfetto.protos.TracingServiceState.TracingSession tracing_sessions = 6;</code>
       */
      public perfetto.protos.TracingServiceStateOuterClass.TracingServiceState.TracingSession.Builder getTracingSessionsBuilder(
          int index) {
        return getTracingSessionsFieldBuilder().getBuilder(index);
      }
      /**
       * <pre>
       * Lists the tracing sessions active AND owned by a consumer that has the same
       * UID of the caller (or all of them if the caller is root).
       * Introduced in v24 / Android T.
       * </pre>
       *
       * <code>repeated .perfetto.protos.TracingServiceState.TracingSession tracing_sessions = 6;</code>
       */
      public perfetto.protos.TracingServiceStateOuterClass.TracingServiceState.TracingSessionOrBuilder getTracingSessionsOrBuilder(
          int index) {
        if (tracingSessionsBuilder_ == null) {
          return tracingSessions_.get(index);  } else {
          return tracingSessionsBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <pre>
       * Lists the tracing sessions active AND owned by a consumer that has the same
       * UID of the caller (or all of them if the caller is root).
       * Introduced in v24 / Android T.
       * </pre>
       *
       * <code>repeated .perfetto.protos.TracingServiceState.TracingSession tracing_sessions = 6;</code>
       */
      public java.util.List<? extends perfetto.protos.TracingServiceStateOuterClass.TracingServiceState.TracingSessionOrBuilder> 
           getTracingSessionsOrBuilderList() {
        if (tracingSessionsBuilder_ != null) {
          return tracingSessionsBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(tracingSessions_);
        }
      }
      /**
       * <pre>
       * Lists the tracing sessions active AND owned by a consumer that has the same
       * UID of the caller (or all of them if the caller is root).
       * Introduced in v24 / Android T.
       * </pre>
       *
       * <code>repeated .perfetto.protos.TracingServiceState.TracingSession tracing_sessions = 6;</code>
       */
      public perfetto.protos.TracingServiceStateOuterClass.TracingServiceState.TracingSession.Builder addTracingSessionsBuilder() {
        return getTracingSessionsFieldBuilder().addBuilder(
            perfetto.protos.TracingServiceStateOuterClass.TracingServiceState.TracingSession.getDefaultInstance());
      }
      /**
       * <pre>
       * Lists the tracing sessions active AND owned by a consumer that has the same
       * UID of the caller (or all of them if the caller is root).
       * Introduced in v24 / Android T.
       * </pre>
       *
       * <code>repeated .perfetto.protos.TracingServiceState.TracingSession tracing_sessions = 6;</code>
       */
      public perfetto.protos.TracingServiceStateOuterClass.TracingServiceState.TracingSession.Builder addTracingSessionsBuilder(
          int index) {
        return getTracingSessionsFieldBuilder().addBuilder(
            index, perfetto.protos.TracingServiceStateOuterClass.TracingServiceState.TracingSession.getDefaultInstance());
      }
      /**
       * <pre>
       * Lists the tracing sessions active AND owned by a consumer that has the same
       * UID of the caller (or all of them if the caller is root).
       * Introduced in v24 / Android T.
       * </pre>
       *
       * <code>repeated .perfetto.protos.TracingServiceState.TracingSession tracing_sessions = 6;</code>
       */
      public java.util.List<perfetto.protos.TracingServiceStateOuterClass.TracingServiceState.TracingSession.Builder> 
           getTracingSessionsBuilderList() {
        return getTracingSessionsFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilderV3<
          perfetto.protos.TracingServiceStateOuterClass.TracingServiceState.TracingSession, perfetto.protos.TracingServiceStateOuterClass.TracingServiceState.TracingSession.Builder, perfetto.protos.TracingServiceStateOuterClass.TracingServiceState.TracingSessionOrBuilder> 
          getTracingSessionsFieldBuilder() {
        if (tracingSessionsBuilder_ == null) {
          tracingSessionsBuilder_ = new com.google.protobuf.RepeatedFieldBuilderV3<
              perfetto.protos.TracingServiceStateOuterClass.TracingServiceState.TracingSession, perfetto.protos.TracingServiceStateOuterClass.TracingServiceState.TracingSession.Builder, perfetto.protos.TracingServiceStateOuterClass.TracingServiceState.TracingSessionOrBuilder>(
                  tracingSessions_,
                  ((bitField0_ & 0x00000004) != 0),
                  getParentForChildren(),
                  isClean());
          tracingSessions_ = null;
        }
        return tracingSessionsBuilder_;
      }

      private boolean supportsTracingSessions_ ;
      /**
       * <pre>
       * This is always set to true from v24 and beyond. This flag is only used to
       * tell the difference between: (1) talking to a recent service which happens
       * to have no tracing session active; (2) talking to an older version of the
       * service which will never report any tracing session.
       * </pre>
       *
       * <code>optional bool supports_tracing_sessions = 7;</code>
       * @return Whether the supportsTracingSessions field is set.
       */
      @java.lang.Override
      public boolean hasSupportsTracingSessions() {
        return ((bitField0_ & 0x00000008) != 0);
      }
      /**
       * <pre>
       * This is always set to true from v24 and beyond. This flag is only used to
       * tell the difference between: (1) talking to a recent service which happens
       * to have no tracing session active; (2) talking to an older version of the
       * service which will never report any tracing session.
       * </pre>
       *
       * <code>optional bool supports_tracing_sessions = 7;</code>
       * @return The supportsTracingSessions.
       */
      @java.lang.Override
      public boolean getSupportsTracingSessions() {
        return supportsTracingSessions_;
      }
      /**
       * <pre>
       * This is always set to true from v24 and beyond. This flag is only used to
       * tell the difference between: (1) talking to a recent service which happens
       * to have no tracing session active; (2) talking to an older version of the
       * service which will never report any tracing session.
       * </pre>
       *
       * <code>optional bool supports_tracing_sessions = 7;</code>
       * @param value The supportsTracingSessions to set.
       * @return This builder for chaining.
       */
      public Builder setSupportsTracingSessions(boolean value) {
        
        supportsTracingSessions_ = value;
        bitField0_ |= 0x00000008;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * This is always set to true from v24 and beyond. This flag is only used to
       * tell the difference between: (1) talking to a recent service which happens
       * to have no tracing session active; (2) talking to an older version of the
       * service which will never report any tracing session.
       * </pre>
       *
       * <code>optional bool supports_tracing_sessions = 7;</code>
       * @return This builder for chaining.
       */
      public Builder clearSupportsTracingSessions() {
        bitField0_ = (bitField0_ & ~0x00000008);
        supportsTracingSessions_ = false;
        onChanged();
        return this;
      }

      private int numSessions_ ;
      /**
       * <pre>
       * Total number of tracing sessions.
       * </pre>
       *
       * <code>optional int32 num_sessions = 3;</code>
       * @return Whether the numSessions field is set.
       */
      @java.lang.Override
      public boolean hasNumSessions() {
        return ((bitField0_ & 0x00000010) != 0);
      }
      /**
       * <pre>
       * Total number of tracing sessions.
       * </pre>
       *
       * <code>optional int32 num_sessions = 3;</code>
       * @return The numSessions.
       */
      @java.lang.Override
      public int getNumSessions() {
        return numSessions_;
      }
      /**
       * <pre>
       * Total number of tracing sessions.
       * </pre>
       *
       * <code>optional int32 num_sessions = 3;</code>
       * @param value The numSessions to set.
       * @return This builder for chaining.
       */
      public Builder setNumSessions(int value) {
        
        numSessions_ = value;
        bitField0_ |= 0x00000010;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Total number of tracing sessions.
       * </pre>
       *
       * <code>optional int32 num_sessions = 3;</code>
       * @return This builder for chaining.
       */
      public Builder clearNumSessions() {
        bitField0_ = (bitField0_ & ~0x00000010);
        numSessions_ = 0;
        onChanged();
        return this;
      }

      private int numSessionsStarted_ ;
      /**
       * <pre>
       * Number of tracing sessions in the started state. Always &lt;= num_sessions.
       * </pre>
       *
       * <code>optional int32 num_sessions_started = 4;</code>
       * @return Whether the numSessionsStarted field is set.
       */
      @java.lang.Override
      public boolean hasNumSessionsStarted() {
        return ((bitField0_ & 0x00000020) != 0);
      }
      /**
       * <pre>
       * Number of tracing sessions in the started state. Always &lt;= num_sessions.
       * </pre>
       *
       * <code>optional int32 num_sessions_started = 4;</code>
       * @return The numSessionsStarted.
       */
      @java.lang.Override
      public int getNumSessionsStarted() {
        return numSessionsStarted_;
      }
      /**
       * <pre>
       * Number of tracing sessions in the started state. Always &lt;= num_sessions.
       * </pre>
       *
       * <code>optional int32 num_sessions_started = 4;</code>
       * @param value The numSessionsStarted to set.
       * @return This builder for chaining.
       */
      public Builder setNumSessionsStarted(int value) {
        
        numSessionsStarted_ = value;
        bitField0_ |= 0x00000020;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Number of tracing sessions in the started state. Always &lt;= num_sessions.
       * </pre>
       *
       * <code>optional int32 num_sessions_started = 4;</code>
       * @return This builder for chaining.
       */
      public Builder clearNumSessionsStarted() {
        bitField0_ = (bitField0_ & ~0x00000020);
        numSessionsStarted_ = 0;
        onChanged();
        return this;
      }

      private java.lang.Object tracingServiceVersion_ = "";
      /**
       * <pre>
       * The version of traced (the same returned by `traced --version`).
       * This is a human readable string with and its format varies depending on
       * the build system and the repo (standalone vs AOSP).
       * This is intended for human debugging only.
       * </pre>
       *
       * <code>optional string tracing_service_version = 5;</code>
       * @return Whether the tracingServiceVersion field is set.
       */
      public boolean hasTracingServiceVersion() {
        return ((bitField0_ & 0x00000040) != 0);
      }
      /**
       * <pre>
       * The version of traced (the same returned by `traced --version`).
       * This is a human readable string with and its format varies depending on
       * the build system and the repo (standalone vs AOSP).
       * This is intended for human debugging only.
       * </pre>
       *
       * <code>optional string tracing_service_version = 5;</code>
       * @return The tracingServiceVersion.
       */
      public java.lang.String getTracingServiceVersion() {
        java.lang.Object ref = tracingServiceVersion_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          if (bs.isValidUtf8()) {
            tracingServiceVersion_ = s;
          }
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <pre>
       * The version of traced (the same returned by `traced --version`).
       * This is a human readable string with and its format varies depending on
       * the build system and the repo (standalone vs AOSP).
       * This is intended for human debugging only.
       * </pre>
       *
       * <code>optional string tracing_service_version = 5;</code>
       * @return The bytes for tracingServiceVersion.
       */
      public com.google.protobuf.ByteString
          getTracingServiceVersionBytes() {
        java.lang.Object ref = tracingServiceVersion_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          tracingServiceVersion_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <pre>
       * The version of traced (the same returned by `traced --version`).
       * This is a human readable string with and its format varies depending on
       * the build system and the repo (standalone vs AOSP).
       * This is intended for human debugging only.
       * </pre>
       *
       * <code>optional string tracing_service_version = 5;</code>
       * @param value The tracingServiceVersion to set.
       * @return This builder for chaining.
       */
      public Builder setTracingServiceVersion(
          java.lang.String value) {
        if (value == null) { throw new NullPointerException(); }
        tracingServiceVersion_ = value;
        bitField0_ |= 0x00000040;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * The version of traced (the same returned by `traced --version`).
       * This is a human readable string with and its format varies depending on
       * the build system and the repo (standalone vs AOSP).
       * This is intended for human debugging only.
       * </pre>
       *
       * <code>optional string tracing_service_version = 5;</code>
       * @return This builder for chaining.
       */
      public Builder clearTracingServiceVersion() {
        tracingServiceVersion_ = getDefaultInstance().getTracingServiceVersion();
        bitField0_ = (bitField0_ & ~0x00000040);
        onChanged();
        return this;
      }
      /**
       * <pre>
       * The version of traced (the same returned by `traced --version`).
       * This is a human readable string with and its format varies depending on
       * the build system and the repo (standalone vs AOSP).
       * This is intended for human debugging only.
       * </pre>
       *
       * <code>optional string tracing_service_version = 5;</code>
       * @param value The bytes for tracingServiceVersion to set.
       * @return This builder for chaining.
       */
      public Builder setTracingServiceVersionBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) { throw new NullPointerException(); }
        tracingServiceVersion_ = value;
        bitField0_ |= 0x00000040;
        onChanged();
        return this;
      }
      @java.lang.Override
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      @java.lang.Override
      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:perfetto.protos.TracingServiceState)
    }

    // @@protoc_insertion_point(class_scope:perfetto.protos.TracingServiceState)
    private static final perfetto.protos.TracingServiceStateOuterClass.TracingServiceState DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new perfetto.protos.TracingServiceStateOuterClass.TracingServiceState();
    }

    public static perfetto.protos.TracingServiceStateOuterClass.TracingServiceState getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    @java.lang.Deprecated public static final com.google.protobuf.Parser<TracingServiceState>
        PARSER = new com.google.protobuf.AbstractParser<TracingServiceState>() {
      @java.lang.Override
      public TracingServiceState parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        Builder builder = newBuilder();
        try {
          builder.mergeFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.setUnfinishedMessage(builder.buildPartial());
        } catch (com.google.protobuf.UninitializedMessageException e) {
          throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
        } catch (java.io.IOException e) {
          throw new com.google.protobuf.InvalidProtocolBufferException(e)
              .setUnfinishedMessage(builder.buildPartial());
        }
        return builder.buildPartial();
      }
    };

    public static com.google.protobuf.Parser<TracingServiceState> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<TracingServiceState> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public perfetto.protos.TracingServiceStateOuterClass.TracingServiceState getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_perfetto_protos_TracingServiceState_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_perfetto_protos_TracingServiceState_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_perfetto_protos_TracingServiceState_Producer_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_perfetto_protos_TracingServiceState_Producer_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_perfetto_protos_TracingServiceState_DataSource_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_perfetto_protos_TracingServiceState_DataSource_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_perfetto_protos_TracingServiceState_TracingSession_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_perfetto_protos_TracingServiceState_TracingSession_fieldAccessorTable;

  public static com.google.protobuf.Descriptors.FileDescriptor
      getDescriptor() {
    return descriptor;
  }
  private static  com.google.protobuf.Descriptors.FileDescriptor
      descriptor;
  static {
    java.lang.String[] descriptorData = {
      "\n2protos/perfetto/common/tracing_service" +
      "_state.proto\022\017perfetto.protos\0323protos/pe" +
      "rfetto/common/data_source_descriptor.pro" +
      "to\"\336\005\n\023TracingServiceState\022@\n\tproducers\030" +
      "\001 \003(\0132-.perfetto.protos.TracingServiceSt" +
      "ate.Producer\022E\n\014data_sources\030\002 \003(\0132/.per" +
      "fetto.protos.TracingServiceState.DataSou" +
      "rce\022M\n\020tracing_sessions\030\006 \003(\01323.perfetto" +
      ".protos.TracingServiceState.TracingSessi" +
      "on\022!\n\031supports_tracing_sessions\030\007 \001(\010\022\024\n" +
      "\014num_sessions\030\003 \001(\005\022\034\n\024num_sessions_star" +
      "ted\030\004 \001(\005\022\037\n\027tracing_service_version\030\005 \001" +
      "(\t\032S\n\010Producer\022\n\n\002id\030\001 \001(\005\022\014\n\004name\030\002 \001(\t" +
      "\022\013\n\003pid\030\005 \001(\005\022\013\n\003uid\030\003 \001(\005\022\023\n\013sdk_versio" +
      "n\030\004 \001(\t\032_\n\nDataSource\022<\n\rds_descriptor\030\001" +
      " \001(\0132%.perfetto.protos.DataSourceDescrip" +
      "tor\022\023\n\013producer_id\030\002 \001(\005\032\300\001\n\016TracingSess" +
      "ion\022\n\n\002id\030\001 \001(\004\022\024\n\014consumer_uid\030\002 \001(\005\022\r\n" +
      "\005state\030\003 \001(\t\022\033\n\023unique_session_name\030\004 \001(" +
      "\t\022\026\n\016buffer_size_kb\030\005 \003(\r\022\023\n\013duration_ms" +
      "\030\006 \001(\r\022\030\n\020num_data_sources\030\007 \001(\r\022\031\n\021star" +
      "t_realtime_ns\030\010 \001(\003"
    };
    descriptor = com.google.protobuf.Descriptors.FileDescriptor
      .internalBuildGeneratedFileFrom(descriptorData,
        new com.google.protobuf.Descriptors.FileDescriptor[] {
          perfetto.protos.DataSourceDescriptorOuterClass.getDescriptor(),
        });
    internal_static_perfetto_protos_TracingServiceState_descriptor =
      getDescriptor().getMessageTypes().get(0);
    internal_static_perfetto_protos_TracingServiceState_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_perfetto_protos_TracingServiceState_descriptor,
        new java.lang.String[] { "Producers", "DataSources", "TracingSessions", "SupportsTracingSessions", "NumSessions", "NumSessionsStarted", "TracingServiceVersion", });
    internal_static_perfetto_protos_TracingServiceState_Producer_descriptor =
      internal_static_perfetto_protos_TracingServiceState_descriptor.getNestedTypes().get(0);
    internal_static_perfetto_protos_TracingServiceState_Producer_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_perfetto_protos_TracingServiceState_Producer_descriptor,
        new java.lang.String[] { "Id", "Name", "Pid", "Uid", "SdkVersion", });
    internal_static_perfetto_protos_TracingServiceState_DataSource_descriptor =
      internal_static_perfetto_protos_TracingServiceState_descriptor.getNestedTypes().get(1);
    internal_static_perfetto_protos_TracingServiceState_DataSource_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_perfetto_protos_TracingServiceState_DataSource_descriptor,
        new java.lang.String[] { "DsDescriptor", "ProducerId", });
    internal_static_perfetto_protos_TracingServiceState_TracingSession_descriptor =
      internal_static_perfetto_protos_TracingServiceState_descriptor.getNestedTypes().get(2);
    internal_static_perfetto_protos_TracingServiceState_TracingSession_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_perfetto_protos_TracingServiceState_TracingSession_descriptor,
        new java.lang.String[] { "Id", "ConsumerUid", "State", "UniqueSessionName", "BufferSizeKb", "DurationMs", "NumDataSources", "StartRealtimeNs", });
    perfetto.protos.DataSourceDescriptorOuterClass.getDescriptor();
  }

  // @@protoc_insertion_point(outer_class_scope)
}
