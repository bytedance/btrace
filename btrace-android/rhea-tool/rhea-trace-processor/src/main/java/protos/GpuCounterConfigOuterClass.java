// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: protos/perfetto/config/gpu/gpu_counter_config.proto

package perfetto.protos;

public final class GpuCounterConfigOuterClass {
  private GpuCounterConfigOuterClass() {}
  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistryLite registry) {
  }

  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistry registry) {
    registerAllExtensions(
        (com.google.protobuf.ExtensionRegistryLite) registry);
  }
  public interface GpuCounterConfigOrBuilder extends
      // @@protoc_insertion_point(interface_extends:perfetto.protos.GpuCounterConfig)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <pre>
     * Desired sampling interval for counters.
     * </pre>
     *
     * <code>optional uint64 counter_period_ns = 1;</code>
     * @return Whether the counterPeriodNs field is set.
     */
    boolean hasCounterPeriodNs();
    /**
     * <pre>
     * Desired sampling interval for counters.
     * </pre>
     *
     * <code>optional uint64 counter_period_ns = 1;</code>
     * @return The counterPeriodNs.
     */
    long getCounterPeriodNs();

    /**
     * <pre>
     * List of counters to be sampled. Counter IDs correspond to the ones
     * described in GpuCounterSpec in the data source descriptor.
     * </pre>
     *
     * <code>repeated uint32 counter_ids = 2;</code>
     * @return A list containing the counterIds.
     */
    java.util.List<java.lang.Integer> getCounterIdsList();
    /**
     * <pre>
     * List of counters to be sampled. Counter IDs correspond to the ones
     * described in GpuCounterSpec in the data source descriptor.
     * </pre>
     *
     * <code>repeated uint32 counter_ids = 2;</code>
     * @return The count of counterIds.
     */
    int getCounterIdsCount();
    /**
     * <pre>
     * List of counters to be sampled. Counter IDs correspond to the ones
     * described in GpuCounterSpec in the data source descriptor.
     * </pre>
     *
     * <code>repeated uint32 counter_ids = 2;</code>
     * @param index The index of the element to return.
     * @return The counterIds at the given index.
     */
    int getCounterIds(int index);

    /**
     * <pre>
     * Sample counters by instrumenting command buffers.
     * </pre>
     *
     * <code>optional bool instrumented_sampling = 3;</code>
     * @return Whether the instrumentedSampling field is set.
     */
    boolean hasInstrumentedSampling();
    /**
     * <pre>
     * Sample counters by instrumenting command buffers.
     * </pre>
     *
     * <code>optional bool instrumented_sampling = 3;</code>
     * @return The instrumentedSampling.
     */
    boolean getInstrumentedSampling();

    /**
     * <pre>
     * Fix gpu clock rate during trace session.
     * </pre>
     *
     * <code>optional bool fix_gpu_clock = 4;</code>
     * @return Whether the fixGpuClock field is set.
     */
    boolean hasFixGpuClock();
    /**
     * <pre>
     * Fix gpu clock rate during trace session.
     * </pre>
     *
     * <code>optional bool fix_gpu_clock = 4;</code>
     * @return The fixGpuClock.
     */
    boolean getFixGpuClock();
  }
  /**
   * Protobuf type {@code perfetto.protos.GpuCounterConfig}
   */
  public static final class GpuCounterConfig extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:perfetto.protos.GpuCounterConfig)
      GpuCounterConfigOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use GpuCounterConfig.newBuilder() to construct.
    private GpuCounterConfig(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private GpuCounterConfig() {
      counterIds_ = emptyIntList();
    }

    @java.lang.Override
    @SuppressWarnings({"unused"})
    protected java.lang.Object newInstance(
        UnusedPrivateParameter unused) {
      return new GpuCounterConfig();
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return perfetto.protos.GpuCounterConfigOuterClass.internal_static_perfetto_protos_GpuCounterConfig_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return perfetto.protos.GpuCounterConfigOuterClass.internal_static_perfetto_protos_GpuCounterConfig_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              perfetto.protos.GpuCounterConfigOuterClass.GpuCounterConfig.class, perfetto.protos.GpuCounterConfigOuterClass.GpuCounterConfig.Builder.class);
    }

    private int bitField0_;
    public static final int COUNTER_PERIOD_NS_FIELD_NUMBER = 1;
    private long counterPeriodNs_ = 0L;
    /**
     * <pre>
     * Desired sampling interval for counters.
     * </pre>
     *
     * <code>optional uint64 counter_period_ns = 1;</code>
     * @return Whether the counterPeriodNs field is set.
     */
    @java.lang.Override
    public boolean hasCounterPeriodNs() {
      return ((bitField0_ & 0x00000001) != 0);
    }
    /**
     * <pre>
     * Desired sampling interval for counters.
     * </pre>
     *
     * <code>optional uint64 counter_period_ns = 1;</code>
     * @return The counterPeriodNs.
     */
    @java.lang.Override
    public long getCounterPeriodNs() {
      return counterPeriodNs_;
    }

    public static final int COUNTER_IDS_FIELD_NUMBER = 2;
    @SuppressWarnings("serial")
    private com.google.protobuf.Internal.IntList counterIds_;
    /**
     * <pre>
     * List of counters to be sampled. Counter IDs correspond to the ones
     * described in GpuCounterSpec in the data source descriptor.
     * </pre>
     *
     * <code>repeated uint32 counter_ids = 2;</code>
     * @return A list containing the counterIds.
     */
    @java.lang.Override
    public java.util.List<java.lang.Integer>
        getCounterIdsList() {
      return counterIds_;
    }
    /**
     * <pre>
     * List of counters to be sampled. Counter IDs correspond to the ones
     * described in GpuCounterSpec in the data source descriptor.
     * </pre>
     *
     * <code>repeated uint32 counter_ids = 2;</code>
     * @return The count of counterIds.
     */
    public int getCounterIdsCount() {
      return counterIds_.size();
    }
    /**
     * <pre>
     * List of counters to be sampled. Counter IDs correspond to the ones
     * described in GpuCounterSpec in the data source descriptor.
     * </pre>
     *
     * <code>repeated uint32 counter_ids = 2;</code>
     * @param index The index of the element to return.
     * @return The counterIds at the given index.
     */
    public int getCounterIds(int index) {
      return counterIds_.getInt(index);
    }

    public static final int INSTRUMENTED_SAMPLING_FIELD_NUMBER = 3;
    private boolean instrumentedSampling_ = false;
    /**
     * <pre>
     * Sample counters by instrumenting command buffers.
     * </pre>
     *
     * <code>optional bool instrumented_sampling = 3;</code>
     * @return Whether the instrumentedSampling field is set.
     */
    @java.lang.Override
    public boolean hasInstrumentedSampling() {
      return ((bitField0_ & 0x00000002) != 0);
    }
    /**
     * <pre>
     * Sample counters by instrumenting command buffers.
     * </pre>
     *
     * <code>optional bool instrumented_sampling = 3;</code>
     * @return The instrumentedSampling.
     */
    @java.lang.Override
    public boolean getInstrumentedSampling() {
      return instrumentedSampling_;
    }

    public static final int FIX_GPU_CLOCK_FIELD_NUMBER = 4;
    private boolean fixGpuClock_ = false;
    /**
     * <pre>
     * Fix gpu clock rate during trace session.
     * </pre>
     *
     * <code>optional bool fix_gpu_clock = 4;</code>
     * @return Whether the fixGpuClock field is set.
     */
    @java.lang.Override
    public boolean hasFixGpuClock() {
      return ((bitField0_ & 0x00000004) != 0);
    }
    /**
     * <pre>
     * Fix gpu clock rate during trace session.
     * </pre>
     *
     * <code>optional bool fix_gpu_clock = 4;</code>
     * @return The fixGpuClock.
     */
    @java.lang.Override
    public boolean getFixGpuClock() {
      return fixGpuClock_;
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (((bitField0_ & 0x00000001) != 0)) {
        output.writeUInt64(1, counterPeriodNs_);
      }
      for (int i = 0; i < counterIds_.size(); i++) {
        output.writeUInt32(2, counterIds_.getInt(i));
      }
      if (((bitField0_ & 0x00000002) != 0)) {
        output.writeBool(3, instrumentedSampling_);
      }
      if (((bitField0_ & 0x00000004) != 0)) {
        output.writeBool(4, fixGpuClock_);
      }
      getUnknownFields().writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) != 0)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt64Size(1, counterPeriodNs_);
      }
      {
        int dataSize = 0;
        for (int i = 0; i < counterIds_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeUInt32SizeNoTag(counterIds_.getInt(i));
        }
        size += dataSize;
        size += 1 * getCounterIdsList().size();
      }
      if (((bitField0_ & 0x00000002) != 0)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(3, instrumentedSampling_);
      }
      if (((bitField0_ & 0x00000004) != 0)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(4, fixGpuClock_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof perfetto.protos.GpuCounterConfigOuterClass.GpuCounterConfig)) {
        return super.equals(obj);
      }
      perfetto.protos.GpuCounterConfigOuterClass.GpuCounterConfig other = (perfetto.protos.GpuCounterConfigOuterClass.GpuCounterConfig) obj;

      if (hasCounterPeriodNs() != other.hasCounterPeriodNs()) return false;
      if (hasCounterPeriodNs()) {
        if (getCounterPeriodNs()
            != other.getCounterPeriodNs()) return false;
      }
      if (!getCounterIdsList()
          .equals(other.getCounterIdsList())) return false;
      if (hasInstrumentedSampling() != other.hasInstrumentedSampling()) return false;
      if (hasInstrumentedSampling()) {
        if (getInstrumentedSampling()
            != other.getInstrumentedSampling()) return false;
      }
      if (hasFixGpuClock() != other.hasFixGpuClock()) return false;
      if (hasFixGpuClock()) {
        if (getFixGpuClock()
            != other.getFixGpuClock()) return false;
      }
      if (!getUnknownFields().equals(other.getUnknownFields())) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      if (hasCounterPeriodNs()) {
        hash = (37 * hash) + COUNTER_PERIOD_NS_FIELD_NUMBER;
        hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
            getCounterPeriodNs());
      }
      if (getCounterIdsCount() > 0) {
        hash = (37 * hash) + COUNTER_IDS_FIELD_NUMBER;
        hash = (53 * hash) + getCounterIdsList().hashCode();
      }
      if (hasInstrumentedSampling()) {
        hash = (37 * hash) + INSTRUMENTED_SAMPLING_FIELD_NUMBER;
        hash = (53 * hash) + com.google.protobuf.Internal.hashBoolean(
            getInstrumentedSampling());
      }
      if (hasFixGpuClock()) {
        hash = (37 * hash) + FIX_GPU_CLOCK_FIELD_NUMBER;
        hash = (53 * hash) + com.google.protobuf.Internal.hashBoolean(
            getFixGpuClock());
      }
      hash = (29 * hash) + getUnknownFields().hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static perfetto.protos.GpuCounterConfigOuterClass.GpuCounterConfig parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static perfetto.protos.GpuCounterConfigOuterClass.GpuCounterConfig parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static perfetto.protos.GpuCounterConfigOuterClass.GpuCounterConfig parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static perfetto.protos.GpuCounterConfigOuterClass.GpuCounterConfig parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static perfetto.protos.GpuCounterConfigOuterClass.GpuCounterConfig parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static perfetto.protos.GpuCounterConfigOuterClass.GpuCounterConfig parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static perfetto.protos.GpuCounterConfigOuterClass.GpuCounterConfig parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static perfetto.protos.GpuCounterConfigOuterClass.GpuCounterConfig parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static perfetto.protos.GpuCounterConfigOuterClass.GpuCounterConfig parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static perfetto.protos.GpuCounterConfigOuterClass.GpuCounterConfig parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static perfetto.protos.GpuCounterConfigOuterClass.GpuCounterConfig parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static perfetto.protos.GpuCounterConfigOuterClass.GpuCounterConfig parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(perfetto.protos.GpuCounterConfigOuterClass.GpuCounterConfig prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code perfetto.protos.GpuCounterConfig}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:perfetto.protos.GpuCounterConfig)
        perfetto.protos.GpuCounterConfigOuterClass.GpuCounterConfigOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return perfetto.protos.GpuCounterConfigOuterClass.internal_static_perfetto_protos_GpuCounterConfig_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return perfetto.protos.GpuCounterConfigOuterClass.internal_static_perfetto_protos_GpuCounterConfig_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                perfetto.protos.GpuCounterConfigOuterClass.GpuCounterConfig.class, perfetto.protos.GpuCounterConfigOuterClass.GpuCounterConfig.Builder.class);
      }

      // Construct using perfetto.protos.GpuCounterConfigOuterClass.GpuCounterConfig.newBuilder()
      private Builder() {

      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);

      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        bitField0_ = 0;
        counterPeriodNs_ = 0L;
        counterIds_ = emptyIntList();
        instrumentedSampling_ = false;
        fixGpuClock_ = false;
        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return perfetto.protos.GpuCounterConfigOuterClass.internal_static_perfetto_protos_GpuCounterConfig_descriptor;
      }

      @java.lang.Override
      public perfetto.protos.GpuCounterConfigOuterClass.GpuCounterConfig getDefaultInstanceForType() {
        return perfetto.protos.GpuCounterConfigOuterClass.GpuCounterConfig.getDefaultInstance();
      }

      @java.lang.Override
      public perfetto.protos.GpuCounterConfigOuterClass.GpuCounterConfig build() {
        perfetto.protos.GpuCounterConfigOuterClass.GpuCounterConfig result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public perfetto.protos.GpuCounterConfigOuterClass.GpuCounterConfig buildPartial() {
        perfetto.protos.GpuCounterConfigOuterClass.GpuCounterConfig result = new perfetto.protos.GpuCounterConfigOuterClass.GpuCounterConfig(this);
        buildPartialRepeatedFields(result);
        if (bitField0_ != 0) { buildPartial0(result); }
        onBuilt();
        return result;
      }

      private void buildPartialRepeatedFields(perfetto.protos.GpuCounterConfigOuterClass.GpuCounterConfig result) {
        if (((bitField0_ & 0x00000002) != 0)) {
          counterIds_.makeImmutable();
          bitField0_ = (bitField0_ & ~0x00000002);
        }
        result.counterIds_ = counterIds_;
      }

      private void buildPartial0(perfetto.protos.GpuCounterConfigOuterClass.GpuCounterConfig result) {
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) != 0)) {
          result.counterPeriodNs_ = counterPeriodNs_;
          to_bitField0_ |= 0x00000001;
        }
        if (((from_bitField0_ & 0x00000004) != 0)) {
          result.instrumentedSampling_ = instrumentedSampling_;
          to_bitField0_ |= 0x00000002;
        }
        if (((from_bitField0_ & 0x00000008) != 0)) {
          result.fixGpuClock_ = fixGpuClock_;
          to_bitField0_ |= 0x00000004;
        }
        result.bitField0_ |= to_bitField0_;
      }

      @java.lang.Override
      public Builder clone() {
        return super.clone();
      }
      @java.lang.Override
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.setField(field, value);
      }
      @java.lang.Override
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return super.clearField(field);
      }
      @java.lang.Override
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return super.clearOneof(oneof);
      }
      @java.lang.Override
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, java.lang.Object value) {
        return super.setRepeatedField(field, index, value);
      }
      @java.lang.Override
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.addRepeatedField(field, value);
      }
      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof perfetto.protos.GpuCounterConfigOuterClass.GpuCounterConfig) {
          return mergeFrom((perfetto.protos.GpuCounterConfigOuterClass.GpuCounterConfig)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(perfetto.protos.GpuCounterConfigOuterClass.GpuCounterConfig other) {
        if (other == perfetto.protos.GpuCounterConfigOuterClass.GpuCounterConfig.getDefaultInstance()) return this;
        if (other.hasCounterPeriodNs()) {
          setCounterPeriodNs(other.getCounterPeriodNs());
        }
        if (!other.counterIds_.isEmpty()) {
          if (counterIds_.isEmpty()) {
            counterIds_ = other.counterIds_;
            bitField0_ = (bitField0_ & ~0x00000002);
          } else {
            ensureCounterIdsIsMutable();
            counterIds_.addAll(other.counterIds_);
          }
          onChanged();
        }
        if (other.hasInstrumentedSampling()) {
          setInstrumentedSampling(other.getInstrumentedSampling());
        }
        if (other.hasFixGpuClock()) {
          setFixGpuClock(other.getFixGpuClock());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        if (extensionRegistry == null) {
          throw new java.lang.NullPointerException();
        }
        try {
          boolean done = false;
          while (!done) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                done = true;
                break;
              case 8: {
                counterPeriodNs_ = input.readUInt64();
                bitField0_ |= 0x00000001;
                break;
              } // case 8
              case 16: {
                int v = input.readUInt32();
                ensureCounterIdsIsMutable();
                counterIds_.addInt(v);
                break;
              } // case 16
              case 18: {
                int length = input.readRawVarint32();
                int limit = input.pushLimit(length);
                ensureCounterIdsIsMutable();
                while (input.getBytesUntilLimit() > 0) {
                  counterIds_.addInt(input.readUInt32());
                }
                input.popLimit(limit);
                break;
              } // case 18
              case 24: {
                instrumentedSampling_ = input.readBool();
                bitField0_ |= 0x00000004;
                break;
              } // case 24
              case 32: {
                fixGpuClock_ = input.readBool();
                bitField0_ |= 0x00000008;
                break;
              } // case 32
              default: {
                if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                  done = true; // was an endgroup tag
                }
                break;
              } // default:
            } // switch (tag)
          } // while (!done)
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.unwrapIOException();
        } finally {
          onChanged();
        } // finally
        return this;
      }
      private int bitField0_;

      private long counterPeriodNs_ ;
      /**
       * <pre>
       * Desired sampling interval for counters.
       * </pre>
       *
       * <code>optional uint64 counter_period_ns = 1;</code>
       * @return Whether the counterPeriodNs field is set.
       */
      @java.lang.Override
      public boolean hasCounterPeriodNs() {
        return ((bitField0_ & 0x00000001) != 0);
      }
      /**
       * <pre>
       * Desired sampling interval for counters.
       * </pre>
       *
       * <code>optional uint64 counter_period_ns = 1;</code>
       * @return The counterPeriodNs.
       */
      @java.lang.Override
      public long getCounterPeriodNs() {
        return counterPeriodNs_;
      }
      /**
       * <pre>
       * Desired sampling interval for counters.
       * </pre>
       *
       * <code>optional uint64 counter_period_ns = 1;</code>
       * @param value The counterPeriodNs to set.
       * @return This builder for chaining.
       */
      public Builder setCounterPeriodNs(long value) {
        
        counterPeriodNs_ = value;
        bitField0_ |= 0x00000001;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Desired sampling interval for counters.
       * </pre>
       *
       * <code>optional uint64 counter_period_ns = 1;</code>
       * @return This builder for chaining.
       */
      public Builder clearCounterPeriodNs() {
        bitField0_ = (bitField0_ & ~0x00000001);
        counterPeriodNs_ = 0L;
        onChanged();
        return this;
      }

      private com.google.protobuf.Internal.IntList counterIds_ = emptyIntList();
      private void ensureCounterIdsIsMutable() {
        if (!((bitField0_ & 0x00000002) != 0)) {
          counterIds_ = mutableCopy(counterIds_);
          bitField0_ |= 0x00000002;
        }
      }
      /**
       * <pre>
       * List of counters to be sampled. Counter IDs correspond to the ones
       * described in GpuCounterSpec in the data source descriptor.
       * </pre>
       *
       * <code>repeated uint32 counter_ids = 2;</code>
       * @return A list containing the counterIds.
       */
      public java.util.List<java.lang.Integer>
          getCounterIdsList() {
        return ((bitField0_ & 0x00000002) != 0) ?
                 java.util.Collections.unmodifiableList(counterIds_) : counterIds_;
      }
      /**
       * <pre>
       * List of counters to be sampled. Counter IDs correspond to the ones
       * described in GpuCounterSpec in the data source descriptor.
       * </pre>
       *
       * <code>repeated uint32 counter_ids = 2;</code>
       * @return The count of counterIds.
       */
      public int getCounterIdsCount() {
        return counterIds_.size();
      }
      /**
       * <pre>
       * List of counters to be sampled. Counter IDs correspond to the ones
       * described in GpuCounterSpec in the data source descriptor.
       * </pre>
       *
       * <code>repeated uint32 counter_ids = 2;</code>
       * @param index The index of the element to return.
       * @return The counterIds at the given index.
       */
      public int getCounterIds(int index) {
        return counterIds_.getInt(index);
      }
      /**
       * <pre>
       * List of counters to be sampled. Counter IDs correspond to the ones
       * described in GpuCounterSpec in the data source descriptor.
       * </pre>
       *
       * <code>repeated uint32 counter_ids = 2;</code>
       * @param index The index to set the value at.
       * @param value The counterIds to set.
       * @return This builder for chaining.
       */
      public Builder setCounterIds(
          int index, int value) {
        
        ensureCounterIdsIsMutable();
        counterIds_.setInt(index, value);
        onChanged();
        return this;
      }
      /**
       * <pre>
       * List of counters to be sampled. Counter IDs correspond to the ones
       * described in GpuCounterSpec in the data source descriptor.
       * </pre>
       *
       * <code>repeated uint32 counter_ids = 2;</code>
       * @param value The counterIds to add.
       * @return This builder for chaining.
       */
      public Builder addCounterIds(int value) {
        
        ensureCounterIdsIsMutable();
        counterIds_.addInt(value);
        onChanged();
        return this;
      }
      /**
       * <pre>
       * List of counters to be sampled. Counter IDs correspond to the ones
       * described in GpuCounterSpec in the data source descriptor.
       * </pre>
       *
       * <code>repeated uint32 counter_ids = 2;</code>
       * @param values The counterIds to add.
       * @return This builder for chaining.
       */
      public Builder addAllCounterIds(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        ensureCounterIdsIsMutable();
        com.google.protobuf.AbstractMessageLite.Builder.addAll(
            values, counterIds_);
        onChanged();
        return this;
      }
      /**
       * <pre>
       * List of counters to be sampled. Counter IDs correspond to the ones
       * described in GpuCounterSpec in the data source descriptor.
       * </pre>
       *
       * <code>repeated uint32 counter_ids = 2;</code>
       * @return This builder for chaining.
       */
      public Builder clearCounterIds() {
        counterIds_ = emptyIntList();
        bitField0_ = (bitField0_ & ~0x00000002);
        onChanged();
        return this;
      }

      private boolean instrumentedSampling_ ;
      /**
       * <pre>
       * Sample counters by instrumenting command buffers.
       * </pre>
       *
       * <code>optional bool instrumented_sampling = 3;</code>
       * @return Whether the instrumentedSampling field is set.
       */
      @java.lang.Override
      public boolean hasInstrumentedSampling() {
        return ((bitField0_ & 0x00000004) != 0);
      }
      /**
       * <pre>
       * Sample counters by instrumenting command buffers.
       * </pre>
       *
       * <code>optional bool instrumented_sampling = 3;</code>
       * @return The instrumentedSampling.
       */
      @java.lang.Override
      public boolean getInstrumentedSampling() {
        return instrumentedSampling_;
      }
      /**
       * <pre>
       * Sample counters by instrumenting command buffers.
       * </pre>
       *
       * <code>optional bool instrumented_sampling = 3;</code>
       * @param value The instrumentedSampling to set.
       * @return This builder for chaining.
       */
      public Builder setInstrumentedSampling(boolean value) {
        
        instrumentedSampling_ = value;
        bitField0_ |= 0x00000004;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Sample counters by instrumenting command buffers.
       * </pre>
       *
       * <code>optional bool instrumented_sampling = 3;</code>
       * @return This builder for chaining.
       */
      public Builder clearInstrumentedSampling() {
        bitField0_ = (bitField0_ & ~0x00000004);
        instrumentedSampling_ = false;
        onChanged();
        return this;
      }

      private boolean fixGpuClock_ ;
      /**
       * <pre>
       * Fix gpu clock rate during trace session.
       * </pre>
       *
       * <code>optional bool fix_gpu_clock = 4;</code>
       * @return Whether the fixGpuClock field is set.
       */
      @java.lang.Override
      public boolean hasFixGpuClock() {
        return ((bitField0_ & 0x00000008) != 0);
      }
      /**
       * <pre>
       * Fix gpu clock rate during trace session.
       * </pre>
       *
       * <code>optional bool fix_gpu_clock = 4;</code>
       * @return The fixGpuClock.
       */
      @java.lang.Override
      public boolean getFixGpuClock() {
        return fixGpuClock_;
      }
      /**
       * <pre>
       * Fix gpu clock rate during trace session.
       * </pre>
       *
       * <code>optional bool fix_gpu_clock = 4;</code>
       * @param value The fixGpuClock to set.
       * @return This builder for chaining.
       */
      public Builder setFixGpuClock(boolean value) {
        
        fixGpuClock_ = value;
        bitField0_ |= 0x00000008;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Fix gpu clock rate during trace session.
       * </pre>
       *
       * <code>optional bool fix_gpu_clock = 4;</code>
       * @return This builder for chaining.
       */
      public Builder clearFixGpuClock() {
        bitField0_ = (bitField0_ & ~0x00000008);
        fixGpuClock_ = false;
        onChanged();
        return this;
      }
      @java.lang.Override
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      @java.lang.Override
      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:perfetto.protos.GpuCounterConfig)
    }

    // @@protoc_insertion_point(class_scope:perfetto.protos.GpuCounterConfig)
    private static final perfetto.protos.GpuCounterConfigOuterClass.GpuCounterConfig DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new perfetto.protos.GpuCounterConfigOuterClass.GpuCounterConfig();
    }

    public static perfetto.protos.GpuCounterConfigOuterClass.GpuCounterConfig getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    @java.lang.Deprecated public static final com.google.protobuf.Parser<GpuCounterConfig>
        PARSER = new com.google.protobuf.AbstractParser<GpuCounterConfig>() {
      @java.lang.Override
      public GpuCounterConfig parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        Builder builder = newBuilder();
        try {
          builder.mergeFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.setUnfinishedMessage(builder.buildPartial());
        } catch (com.google.protobuf.UninitializedMessageException e) {
          throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
        } catch (java.io.IOException e) {
          throw new com.google.protobuf.InvalidProtocolBufferException(e)
              .setUnfinishedMessage(builder.buildPartial());
        }
        return builder.buildPartial();
      }
    };

    public static com.google.protobuf.Parser<GpuCounterConfig> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<GpuCounterConfig> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public perfetto.protos.GpuCounterConfigOuterClass.GpuCounterConfig getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_perfetto_protos_GpuCounterConfig_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_perfetto_protos_GpuCounterConfig_fieldAccessorTable;

  public static com.google.protobuf.Descriptors.FileDescriptor
      getDescriptor() {
    return descriptor;
  }
  private static  com.google.protobuf.Descriptors.FileDescriptor
      descriptor;
  static {
    java.lang.String[] descriptorData = {
      "\n3protos/perfetto/config/gpu/gpu_counter" +
      "_config.proto\022\017perfetto.protos\"x\n\020GpuCou" +
      "nterConfig\022\031\n\021counter_period_ns\030\001 \001(\004\022\023\n" +
      "\013counter_ids\030\002 \003(\r\022\035\n\025instrumented_sampl" +
      "ing\030\003 \001(\010\022\025\n\rfix_gpu_clock\030\004 \001(\010"
    };
    descriptor = com.google.protobuf.Descriptors.FileDescriptor
      .internalBuildGeneratedFileFrom(descriptorData,
        new com.google.protobuf.Descriptors.FileDescriptor[] {
        });
    internal_static_perfetto_protos_GpuCounterConfig_descriptor =
      getDescriptor().getMessageTypes().get(0);
    internal_static_perfetto_protos_GpuCounterConfig_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_perfetto_protos_GpuCounterConfig_descriptor,
        new java.lang.String[] { "CounterPeriodNs", "CounterIds", "InstrumentedSampling", "FixGpuClock", });
  }

  // @@protoc_insertion_point(outer_class_scope)
}
