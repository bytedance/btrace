// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: protos/perfetto/trace/track_event/thread_descriptor.proto

package perfetto.protos;

public final class ThreadDescriptorOuterClass {
  private ThreadDescriptorOuterClass() {}
  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistryLite registry) {
  }

  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistry registry) {
    registerAllExtensions(
        (com.google.protobuf.ExtensionRegistryLite) registry);
  }
  public interface ThreadDescriptorOrBuilder extends
      // @@protoc_insertion_point(interface_extends:perfetto.protos.ThreadDescriptor)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <code>optional int32 pid = 1;</code>
     * @return Whether the pid field is set.
     */
    boolean hasPid();
    /**
     * <code>optional int32 pid = 1;</code>
     * @return The pid.
     */
    int getPid();

    /**
     * <code>optional int32 tid = 2;</code>
     * @return Whether the tid field is set.
     */
    boolean hasTid();
    /**
     * <code>optional int32 tid = 2;</code>
     * @return The tid.
     */
    int getTid();

    /**
     * <code>optional string thread_name = 5;</code>
     * @return Whether the threadName field is set.
     */
    boolean hasThreadName();
    /**
     * <code>optional string thread_name = 5;</code>
     * @return The threadName.
     */
    java.lang.String getThreadName();
    /**
     * <code>optional string thread_name = 5;</code>
     * @return The bytes for threadName.
     */
    com.google.protobuf.ByteString
        getThreadNameBytes();

    /**
     * <code>optional .perfetto.protos.ThreadDescriptor.ChromeThreadType chrome_thread_type = 4;</code>
     * @return Whether the chromeThreadType field is set.
     */
    boolean hasChromeThreadType();
    /**
     * <code>optional .perfetto.protos.ThreadDescriptor.ChromeThreadType chrome_thread_type = 4;</code>
     * @return The chromeThreadType.
     */
    perfetto.protos.ThreadDescriptorOuterClass.ThreadDescriptor.ChromeThreadType getChromeThreadType();

    /**
     * <pre>
     * Deprecated. Use ClockSnapshot in combination with TracePacket's timestamp
     * and timestamp_clock_id fields instead.
     * </pre>
     *
     * <code>optional int64 reference_timestamp_us = 6;</code>
     * @return Whether the referenceTimestampUs field is set.
     */
    boolean hasReferenceTimestampUs();
    /**
     * <pre>
     * Deprecated. Use ClockSnapshot in combination with TracePacket's timestamp
     * and timestamp_clock_id fields instead.
     * </pre>
     *
     * <code>optional int64 reference_timestamp_us = 6;</code>
     * @return The referenceTimestampUs.
     */
    long getReferenceTimestampUs();

    /**
     * <pre>
     * Absolute reference values. Clock values in subsequent TrackEvents can be
     * encoded accumulatively and relative to these. This reduces their var-int
     * encoding size.
     * TODO(eseckler): Deprecated. Replace these with ClockSnapshot encoding.
     * </pre>
     *
     * <code>optional int64 reference_thread_time_us = 7;</code>
     * @return Whether the referenceThreadTimeUs field is set.
     */
    boolean hasReferenceThreadTimeUs();
    /**
     * <pre>
     * Absolute reference values. Clock values in subsequent TrackEvents can be
     * encoded accumulatively and relative to these. This reduces their var-int
     * encoding size.
     * TODO(eseckler): Deprecated. Replace these with ClockSnapshot encoding.
     * </pre>
     *
     * <code>optional int64 reference_thread_time_us = 7;</code>
     * @return The referenceThreadTimeUs.
     */
    long getReferenceThreadTimeUs();

    /**
     * <code>optional int64 reference_thread_instruction_count = 8;</code>
     * @return Whether the referenceThreadInstructionCount field is set.
     */
    boolean hasReferenceThreadInstructionCount();
    /**
     * <code>optional int64 reference_thread_instruction_count = 8;</code>
     * @return The referenceThreadInstructionCount.
     */
    long getReferenceThreadInstructionCount();

    /**
     * <pre>
     * To support old UI. New UI should determine default sorting by thread_type.
     * </pre>
     *
     * <code>optional int32 legacy_sort_index = 3;</code>
     * @return Whether the legacySortIndex field is set.
     */
    boolean hasLegacySortIndex();
    /**
     * <pre>
     * To support old UI. New UI should determine default sorting by thread_type.
     * </pre>
     *
     * <code>optional int32 legacy_sort_index = 3;</code>
     * @return The legacySortIndex.
     */
    int getLegacySortIndex();
  }
  /**
   * <pre>
   * Describes a thread's attributes. Emitted as part of a TrackDescriptor,
   * usually by the thread's trace writer.
   * Next id: 9.
   * </pre>
   *
   * Protobuf type {@code perfetto.protos.ThreadDescriptor}
   */
  public static final class ThreadDescriptor extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:perfetto.protos.ThreadDescriptor)
      ThreadDescriptorOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use ThreadDescriptor.newBuilder() to construct.
    private ThreadDescriptor(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private ThreadDescriptor() {
      threadName_ = "";
      chromeThreadType_ = 0;
    }

    @java.lang.Override
    @SuppressWarnings({"unused"})
    protected java.lang.Object newInstance(
        UnusedPrivateParameter unused) {
      return new ThreadDescriptor();
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return perfetto.protos.ThreadDescriptorOuterClass.internal_static_perfetto_protos_ThreadDescriptor_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return perfetto.protos.ThreadDescriptorOuterClass.internal_static_perfetto_protos_ThreadDescriptor_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              perfetto.protos.ThreadDescriptorOuterClass.ThreadDescriptor.class, perfetto.protos.ThreadDescriptorOuterClass.ThreadDescriptor.Builder.class);
    }

    /**
     * Protobuf enum {@code perfetto.protos.ThreadDescriptor.ChromeThreadType}
     */
    public enum ChromeThreadType
        implements com.google.protobuf.ProtocolMessageEnum {
      /**
       * <code>CHROME_THREAD_UNSPECIFIED = 0;</code>
       */
      CHROME_THREAD_UNSPECIFIED(0),
      /**
       * <code>CHROME_THREAD_MAIN = 1;</code>
       */
      CHROME_THREAD_MAIN(1),
      /**
       * <code>CHROME_THREAD_IO = 2;</code>
       */
      CHROME_THREAD_IO(2),
      /**
       * <pre>
       * Scheduler:
       * </pre>
       *
       * <code>CHROME_THREAD_POOL_BG_WORKER = 3;</code>
       */
      CHROME_THREAD_POOL_BG_WORKER(3),
      /**
       * <code>CHROME_THREAD_POOL_FG_WORKER = 4;</code>
       */
      CHROME_THREAD_POOL_FG_WORKER(4),
      /**
       * <code>CHROME_THREAD_POOL_FB_BLOCKING = 5;</code>
       */
      CHROME_THREAD_POOL_FB_BLOCKING(5),
      /**
       * <code>CHROME_THREAD_POOL_BG_BLOCKING = 6;</code>
       */
      CHROME_THREAD_POOL_BG_BLOCKING(6),
      /**
       * <code>CHROME_THREAD_POOL_SERVICE = 7;</code>
       */
      CHROME_THREAD_POOL_SERVICE(7),
      /**
       * <pre>
       * Compositor:
       * </pre>
       *
       * <code>CHROME_THREAD_COMPOSITOR = 8;</code>
       */
      CHROME_THREAD_COMPOSITOR(8),
      /**
       * <code>CHROME_THREAD_VIZ_COMPOSITOR = 9;</code>
       */
      CHROME_THREAD_VIZ_COMPOSITOR(9),
      /**
       * <code>CHROME_THREAD_COMPOSITOR_WORKER = 10;</code>
       */
      CHROME_THREAD_COMPOSITOR_WORKER(10),
      /**
       * <pre>
       * Renderer:
       * </pre>
       *
       * <code>CHROME_THREAD_SERVICE_WORKER = 11;</code>
       */
      CHROME_THREAD_SERVICE_WORKER(11),
      /**
       * <pre>
       * Tracing related threads:
       * </pre>
       *
       * <code>CHROME_THREAD_MEMORY_INFRA = 50;</code>
       */
      CHROME_THREAD_MEMORY_INFRA(50),
      /**
       * <code>CHROME_THREAD_SAMPLING_PROFILER = 51;</code>
       */
      CHROME_THREAD_SAMPLING_PROFILER(51),
      ;

      /**
       * <code>CHROME_THREAD_UNSPECIFIED = 0;</code>
       */
      public static final int CHROME_THREAD_UNSPECIFIED_VALUE = 0;
      /**
       * <code>CHROME_THREAD_MAIN = 1;</code>
       */
      public static final int CHROME_THREAD_MAIN_VALUE = 1;
      /**
       * <code>CHROME_THREAD_IO = 2;</code>
       */
      public static final int CHROME_THREAD_IO_VALUE = 2;
      /**
       * <pre>
       * Scheduler:
       * </pre>
       *
       * <code>CHROME_THREAD_POOL_BG_WORKER = 3;</code>
       */
      public static final int CHROME_THREAD_POOL_BG_WORKER_VALUE = 3;
      /**
       * <code>CHROME_THREAD_POOL_FG_WORKER = 4;</code>
       */
      public static final int CHROME_THREAD_POOL_FG_WORKER_VALUE = 4;
      /**
       * <code>CHROME_THREAD_POOL_FB_BLOCKING = 5;</code>
       */
      public static final int CHROME_THREAD_POOL_FB_BLOCKING_VALUE = 5;
      /**
       * <code>CHROME_THREAD_POOL_BG_BLOCKING = 6;</code>
       */
      public static final int CHROME_THREAD_POOL_BG_BLOCKING_VALUE = 6;
      /**
       * <code>CHROME_THREAD_POOL_SERVICE = 7;</code>
       */
      public static final int CHROME_THREAD_POOL_SERVICE_VALUE = 7;
      /**
       * <pre>
       * Compositor:
       * </pre>
       *
       * <code>CHROME_THREAD_COMPOSITOR = 8;</code>
       */
      public static final int CHROME_THREAD_COMPOSITOR_VALUE = 8;
      /**
       * <code>CHROME_THREAD_VIZ_COMPOSITOR = 9;</code>
       */
      public static final int CHROME_THREAD_VIZ_COMPOSITOR_VALUE = 9;
      /**
       * <code>CHROME_THREAD_COMPOSITOR_WORKER = 10;</code>
       */
      public static final int CHROME_THREAD_COMPOSITOR_WORKER_VALUE = 10;
      /**
       * <pre>
       * Renderer:
       * </pre>
       *
       * <code>CHROME_THREAD_SERVICE_WORKER = 11;</code>
       */
      public static final int CHROME_THREAD_SERVICE_WORKER_VALUE = 11;
      /**
       * <pre>
       * Tracing related threads:
       * </pre>
       *
       * <code>CHROME_THREAD_MEMORY_INFRA = 50;</code>
       */
      public static final int CHROME_THREAD_MEMORY_INFRA_VALUE = 50;
      /**
       * <code>CHROME_THREAD_SAMPLING_PROFILER = 51;</code>
       */
      public static final int CHROME_THREAD_SAMPLING_PROFILER_VALUE = 51;


      public final int getNumber() {
        return value;
      }

      /**
       * @param value The numeric wire value of the corresponding enum entry.
       * @return The enum associated with the given numeric wire value.
       * @deprecated Use {@link #forNumber(int)} instead.
       */
      @java.lang.Deprecated
      public static ChromeThreadType valueOf(int value) {
        return forNumber(value);
      }

      /**
       * @param value The numeric wire value of the corresponding enum entry.
       * @return The enum associated with the given numeric wire value.
       */
      public static ChromeThreadType forNumber(int value) {
        switch (value) {
          case 0: return CHROME_THREAD_UNSPECIFIED;
          case 1: return CHROME_THREAD_MAIN;
          case 2: return CHROME_THREAD_IO;
          case 3: return CHROME_THREAD_POOL_BG_WORKER;
          case 4: return CHROME_THREAD_POOL_FG_WORKER;
          case 5: return CHROME_THREAD_POOL_FB_BLOCKING;
          case 6: return CHROME_THREAD_POOL_BG_BLOCKING;
          case 7: return CHROME_THREAD_POOL_SERVICE;
          case 8: return CHROME_THREAD_COMPOSITOR;
          case 9: return CHROME_THREAD_VIZ_COMPOSITOR;
          case 10: return CHROME_THREAD_COMPOSITOR_WORKER;
          case 11: return CHROME_THREAD_SERVICE_WORKER;
          case 50: return CHROME_THREAD_MEMORY_INFRA;
          case 51: return CHROME_THREAD_SAMPLING_PROFILER;
          default: return null;
        }
      }

      public static com.google.protobuf.Internal.EnumLiteMap<ChromeThreadType>
          internalGetValueMap() {
        return internalValueMap;
      }
      private static final com.google.protobuf.Internal.EnumLiteMap<
          ChromeThreadType> internalValueMap =
            new com.google.protobuf.Internal.EnumLiteMap<ChromeThreadType>() {
              public ChromeThreadType findValueByNumber(int number) {
                return ChromeThreadType.forNumber(number);
              }
            };

      public final com.google.protobuf.Descriptors.EnumValueDescriptor
          getValueDescriptor() {
        return getDescriptor().getValues().get(ordinal());
      }
      public final com.google.protobuf.Descriptors.EnumDescriptor
          getDescriptorForType() {
        return getDescriptor();
      }
      public static final com.google.protobuf.Descriptors.EnumDescriptor
          getDescriptor() {
        return perfetto.protos.ThreadDescriptorOuterClass.ThreadDescriptor.getDescriptor().getEnumTypes().get(0);
      }

      private static final ChromeThreadType[] VALUES = values();

      public static ChromeThreadType valueOf(
          com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
        if (desc.getType() != getDescriptor()) {
          throw new java.lang.IllegalArgumentException(
            "EnumValueDescriptor is not for this type.");
        }
        return VALUES[desc.getIndex()];
      }

      private final int value;

      private ChromeThreadType(int value) {
        this.value = value;
      }

      // @@protoc_insertion_point(enum_scope:perfetto.protos.ThreadDescriptor.ChromeThreadType)
    }

    private int bitField0_;
    public static final int PID_FIELD_NUMBER = 1;
    private int pid_ = 0;
    /**
     * <code>optional int32 pid = 1;</code>
     * @return Whether the pid field is set.
     */
    @java.lang.Override
    public boolean hasPid() {
      return ((bitField0_ & 0x00000001) != 0);
    }
    /**
     * <code>optional int32 pid = 1;</code>
     * @return The pid.
     */
    @java.lang.Override
    public int getPid() {
      return pid_;
    }

    public static final int TID_FIELD_NUMBER = 2;
    private int tid_ = 0;
    /**
     * <code>optional int32 tid = 2;</code>
     * @return Whether the tid field is set.
     */
    @java.lang.Override
    public boolean hasTid() {
      return ((bitField0_ & 0x00000002) != 0);
    }
    /**
     * <code>optional int32 tid = 2;</code>
     * @return The tid.
     */
    @java.lang.Override
    public int getTid() {
      return tid_;
    }

    public static final int THREAD_NAME_FIELD_NUMBER = 5;
    @SuppressWarnings("serial")
    private volatile java.lang.Object threadName_ = "";
    /**
     * <code>optional string thread_name = 5;</code>
     * @return Whether the threadName field is set.
     */
    @java.lang.Override
    public boolean hasThreadName() {
      return ((bitField0_ & 0x00000004) != 0);
    }
    /**
     * <code>optional string thread_name = 5;</code>
     * @return The threadName.
     */
    @java.lang.Override
    public java.lang.String getThreadName() {
      java.lang.Object ref = threadName_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        if (bs.isValidUtf8()) {
          threadName_ = s;
        }
        return s;
      }
    }
    /**
     * <code>optional string thread_name = 5;</code>
     * @return The bytes for threadName.
     */
    @java.lang.Override
    public com.google.protobuf.ByteString
        getThreadNameBytes() {
      java.lang.Object ref = threadName_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        threadName_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    public static final int CHROME_THREAD_TYPE_FIELD_NUMBER = 4;
    private int chromeThreadType_ = 0;
    /**
     * <code>optional .perfetto.protos.ThreadDescriptor.ChromeThreadType chrome_thread_type = 4;</code>
     * @return Whether the chromeThreadType field is set.
     */
    @java.lang.Override public boolean hasChromeThreadType() {
      return ((bitField0_ & 0x00000008) != 0);
    }
    /**
     * <code>optional .perfetto.protos.ThreadDescriptor.ChromeThreadType chrome_thread_type = 4;</code>
     * @return The chromeThreadType.
     */
    @java.lang.Override public perfetto.protos.ThreadDescriptorOuterClass.ThreadDescriptor.ChromeThreadType getChromeThreadType() {
      perfetto.protos.ThreadDescriptorOuterClass.ThreadDescriptor.ChromeThreadType result = perfetto.protos.ThreadDescriptorOuterClass.ThreadDescriptor.ChromeThreadType.forNumber(chromeThreadType_);
      return result == null ? perfetto.protos.ThreadDescriptorOuterClass.ThreadDescriptor.ChromeThreadType.CHROME_THREAD_UNSPECIFIED : result;
    }

    public static final int REFERENCE_TIMESTAMP_US_FIELD_NUMBER = 6;
    private long referenceTimestampUs_ = 0L;
    /**
     * <pre>
     * Deprecated. Use ClockSnapshot in combination with TracePacket's timestamp
     * and timestamp_clock_id fields instead.
     * </pre>
     *
     * <code>optional int64 reference_timestamp_us = 6;</code>
     * @return Whether the referenceTimestampUs field is set.
     */
    @java.lang.Override
    public boolean hasReferenceTimestampUs() {
      return ((bitField0_ & 0x00000010) != 0);
    }
    /**
     * <pre>
     * Deprecated. Use ClockSnapshot in combination with TracePacket's timestamp
     * and timestamp_clock_id fields instead.
     * </pre>
     *
     * <code>optional int64 reference_timestamp_us = 6;</code>
     * @return The referenceTimestampUs.
     */
    @java.lang.Override
    public long getReferenceTimestampUs() {
      return referenceTimestampUs_;
    }

    public static final int REFERENCE_THREAD_TIME_US_FIELD_NUMBER = 7;
    private long referenceThreadTimeUs_ = 0L;
    /**
     * <pre>
     * Absolute reference values. Clock values in subsequent TrackEvents can be
     * encoded accumulatively and relative to these. This reduces their var-int
     * encoding size.
     * TODO(eseckler): Deprecated. Replace these with ClockSnapshot encoding.
     * </pre>
     *
     * <code>optional int64 reference_thread_time_us = 7;</code>
     * @return Whether the referenceThreadTimeUs field is set.
     */
    @java.lang.Override
    public boolean hasReferenceThreadTimeUs() {
      return ((bitField0_ & 0x00000020) != 0);
    }
    /**
     * <pre>
     * Absolute reference values. Clock values in subsequent TrackEvents can be
     * encoded accumulatively and relative to these. This reduces their var-int
     * encoding size.
     * TODO(eseckler): Deprecated. Replace these with ClockSnapshot encoding.
     * </pre>
     *
     * <code>optional int64 reference_thread_time_us = 7;</code>
     * @return The referenceThreadTimeUs.
     */
    @java.lang.Override
    public long getReferenceThreadTimeUs() {
      return referenceThreadTimeUs_;
    }

    public static final int REFERENCE_THREAD_INSTRUCTION_COUNT_FIELD_NUMBER = 8;
    private long referenceThreadInstructionCount_ = 0L;
    /**
     * <code>optional int64 reference_thread_instruction_count = 8;</code>
     * @return Whether the referenceThreadInstructionCount field is set.
     */
    @java.lang.Override
    public boolean hasReferenceThreadInstructionCount() {
      return ((bitField0_ & 0x00000040) != 0);
    }
    /**
     * <code>optional int64 reference_thread_instruction_count = 8;</code>
     * @return The referenceThreadInstructionCount.
     */
    @java.lang.Override
    public long getReferenceThreadInstructionCount() {
      return referenceThreadInstructionCount_;
    }

    public static final int LEGACY_SORT_INDEX_FIELD_NUMBER = 3;
    private int legacySortIndex_ = 0;
    /**
     * <pre>
     * To support old UI. New UI should determine default sorting by thread_type.
     * </pre>
     *
     * <code>optional int32 legacy_sort_index = 3;</code>
     * @return Whether the legacySortIndex field is set.
     */
    @java.lang.Override
    public boolean hasLegacySortIndex() {
      return ((bitField0_ & 0x00000080) != 0);
    }
    /**
     * <pre>
     * To support old UI. New UI should determine default sorting by thread_type.
     * </pre>
     *
     * <code>optional int32 legacy_sort_index = 3;</code>
     * @return The legacySortIndex.
     */
    @java.lang.Override
    public int getLegacySortIndex() {
      return legacySortIndex_;
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (((bitField0_ & 0x00000001) != 0)) {
        output.writeInt32(1, pid_);
      }
      if (((bitField0_ & 0x00000002) != 0)) {
        output.writeInt32(2, tid_);
      }
      if (((bitField0_ & 0x00000080) != 0)) {
        output.writeInt32(3, legacySortIndex_);
      }
      if (((bitField0_ & 0x00000008) != 0)) {
        output.writeEnum(4, chromeThreadType_);
      }
      if (((bitField0_ & 0x00000004) != 0)) {
        com.google.protobuf.GeneratedMessageV3.writeString(output, 5, threadName_);
      }
      if (((bitField0_ & 0x00000010) != 0)) {
        output.writeInt64(6, referenceTimestampUs_);
      }
      if (((bitField0_ & 0x00000020) != 0)) {
        output.writeInt64(7, referenceThreadTimeUs_);
      }
      if (((bitField0_ & 0x00000040) != 0)) {
        output.writeInt64(8, referenceThreadInstructionCount_);
      }
      getUnknownFields().writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) != 0)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(1, pid_);
      }
      if (((bitField0_ & 0x00000002) != 0)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(2, tid_);
      }
      if (((bitField0_ & 0x00000080) != 0)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(3, legacySortIndex_);
      }
      if (((bitField0_ & 0x00000008) != 0)) {
        size += com.google.protobuf.CodedOutputStream
          .computeEnumSize(4, chromeThreadType_);
      }
      if (((bitField0_ & 0x00000004) != 0)) {
        size += com.google.protobuf.GeneratedMessageV3.computeStringSize(5, threadName_);
      }
      if (((bitField0_ & 0x00000010) != 0)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt64Size(6, referenceTimestampUs_);
      }
      if (((bitField0_ & 0x00000020) != 0)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt64Size(7, referenceThreadTimeUs_);
      }
      if (((bitField0_ & 0x00000040) != 0)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt64Size(8, referenceThreadInstructionCount_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof perfetto.protos.ThreadDescriptorOuterClass.ThreadDescriptor)) {
        return super.equals(obj);
      }
      perfetto.protos.ThreadDescriptorOuterClass.ThreadDescriptor other = (perfetto.protos.ThreadDescriptorOuterClass.ThreadDescriptor) obj;

      if (hasPid() != other.hasPid()) return false;
      if (hasPid()) {
        if (getPid()
            != other.getPid()) return false;
      }
      if (hasTid() != other.hasTid()) return false;
      if (hasTid()) {
        if (getTid()
            != other.getTid()) return false;
      }
      if (hasThreadName() != other.hasThreadName()) return false;
      if (hasThreadName()) {
        if (!getThreadName()
            .equals(other.getThreadName())) return false;
      }
      if (hasChromeThreadType() != other.hasChromeThreadType()) return false;
      if (hasChromeThreadType()) {
        if (chromeThreadType_ != other.chromeThreadType_) return false;
      }
      if (hasReferenceTimestampUs() != other.hasReferenceTimestampUs()) return false;
      if (hasReferenceTimestampUs()) {
        if (getReferenceTimestampUs()
            != other.getReferenceTimestampUs()) return false;
      }
      if (hasReferenceThreadTimeUs() != other.hasReferenceThreadTimeUs()) return false;
      if (hasReferenceThreadTimeUs()) {
        if (getReferenceThreadTimeUs()
            != other.getReferenceThreadTimeUs()) return false;
      }
      if (hasReferenceThreadInstructionCount() != other.hasReferenceThreadInstructionCount()) return false;
      if (hasReferenceThreadInstructionCount()) {
        if (getReferenceThreadInstructionCount()
            != other.getReferenceThreadInstructionCount()) return false;
      }
      if (hasLegacySortIndex() != other.hasLegacySortIndex()) return false;
      if (hasLegacySortIndex()) {
        if (getLegacySortIndex()
            != other.getLegacySortIndex()) return false;
      }
      if (!getUnknownFields().equals(other.getUnknownFields())) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      if (hasPid()) {
        hash = (37 * hash) + PID_FIELD_NUMBER;
        hash = (53 * hash) + getPid();
      }
      if (hasTid()) {
        hash = (37 * hash) + TID_FIELD_NUMBER;
        hash = (53 * hash) + getTid();
      }
      if (hasThreadName()) {
        hash = (37 * hash) + THREAD_NAME_FIELD_NUMBER;
        hash = (53 * hash) + getThreadName().hashCode();
      }
      if (hasChromeThreadType()) {
        hash = (37 * hash) + CHROME_THREAD_TYPE_FIELD_NUMBER;
        hash = (53 * hash) + chromeThreadType_;
      }
      if (hasReferenceTimestampUs()) {
        hash = (37 * hash) + REFERENCE_TIMESTAMP_US_FIELD_NUMBER;
        hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
            getReferenceTimestampUs());
      }
      if (hasReferenceThreadTimeUs()) {
        hash = (37 * hash) + REFERENCE_THREAD_TIME_US_FIELD_NUMBER;
        hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
            getReferenceThreadTimeUs());
      }
      if (hasReferenceThreadInstructionCount()) {
        hash = (37 * hash) + REFERENCE_THREAD_INSTRUCTION_COUNT_FIELD_NUMBER;
        hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
            getReferenceThreadInstructionCount());
      }
      if (hasLegacySortIndex()) {
        hash = (37 * hash) + LEGACY_SORT_INDEX_FIELD_NUMBER;
        hash = (53 * hash) + getLegacySortIndex();
      }
      hash = (29 * hash) + getUnknownFields().hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static perfetto.protos.ThreadDescriptorOuterClass.ThreadDescriptor parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static perfetto.protos.ThreadDescriptorOuterClass.ThreadDescriptor parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static perfetto.protos.ThreadDescriptorOuterClass.ThreadDescriptor parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static perfetto.protos.ThreadDescriptorOuterClass.ThreadDescriptor parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static perfetto.protos.ThreadDescriptorOuterClass.ThreadDescriptor parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static perfetto.protos.ThreadDescriptorOuterClass.ThreadDescriptor parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static perfetto.protos.ThreadDescriptorOuterClass.ThreadDescriptor parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static perfetto.protos.ThreadDescriptorOuterClass.ThreadDescriptor parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static perfetto.protos.ThreadDescriptorOuterClass.ThreadDescriptor parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static perfetto.protos.ThreadDescriptorOuterClass.ThreadDescriptor parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static perfetto.protos.ThreadDescriptorOuterClass.ThreadDescriptor parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static perfetto.protos.ThreadDescriptorOuterClass.ThreadDescriptor parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(perfetto.protos.ThreadDescriptorOuterClass.ThreadDescriptor prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * <pre>
     * Describes a thread's attributes. Emitted as part of a TrackDescriptor,
     * usually by the thread's trace writer.
     * Next id: 9.
     * </pre>
     *
     * Protobuf type {@code perfetto.protos.ThreadDescriptor}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:perfetto.protos.ThreadDescriptor)
        perfetto.protos.ThreadDescriptorOuterClass.ThreadDescriptorOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return perfetto.protos.ThreadDescriptorOuterClass.internal_static_perfetto_protos_ThreadDescriptor_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return perfetto.protos.ThreadDescriptorOuterClass.internal_static_perfetto_protos_ThreadDescriptor_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                perfetto.protos.ThreadDescriptorOuterClass.ThreadDescriptor.class, perfetto.protos.ThreadDescriptorOuterClass.ThreadDescriptor.Builder.class);
      }

      // Construct using perfetto.protos.ThreadDescriptorOuterClass.ThreadDescriptor.newBuilder()
      private Builder() {

      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);

      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        bitField0_ = 0;
        pid_ = 0;
        tid_ = 0;
        threadName_ = "";
        chromeThreadType_ = 0;
        referenceTimestampUs_ = 0L;
        referenceThreadTimeUs_ = 0L;
        referenceThreadInstructionCount_ = 0L;
        legacySortIndex_ = 0;
        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return perfetto.protos.ThreadDescriptorOuterClass.internal_static_perfetto_protos_ThreadDescriptor_descriptor;
      }

      @java.lang.Override
      public perfetto.protos.ThreadDescriptorOuterClass.ThreadDescriptor getDefaultInstanceForType() {
        return perfetto.protos.ThreadDescriptorOuterClass.ThreadDescriptor.getDefaultInstance();
      }

      @java.lang.Override
      public perfetto.protos.ThreadDescriptorOuterClass.ThreadDescriptor build() {
        perfetto.protos.ThreadDescriptorOuterClass.ThreadDescriptor result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public perfetto.protos.ThreadDescriptorOuterClass.ThreadDescriptor buildPartial() {
        perfetto.protos.ThreadDescriptorOuterClass.ThreadDescriptor result = new perfetto.protos.ThreadDescriptorOuterClass.ThreadDescriptor(this);
        if (bitField0_ != 0) { buildPartial0(result); }
        onBuilt();
        return result;
      }

      private void buildPartial0(perfetto.protos.ThreadDescriptorOuterClass.ThreadDescriptor result) {
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) != 0)) {
          result.pid_ = pid_;
          to_bitField0_ |= 0x00000001;
        }
        if (((from_bitField0_ & 0x00000002) != 0)) {
          result.tid_ = tid_;
          to_bitField0_ |= 0x00000002;
        }
        if (((from_bitField0_ & 0x00000004) != 0)) {
          result.threadName_ = threadName_;
          to_bitField0_ |= 0x00000004;
        }
        if (((from_bitField0_ & 0x00000008) != 0)) {
          result.chromeThreadType_ = chromeThreadType_;
          to_bitField0_ |= 0x00000008;
        }
        if (((from_bitField0_ & 0x00000010) != 0)) {
          result.referenceTimestampUs_ = referenceTimestampUs_;
          to_bitField0_ |= 0x00000010;
        }
        if (((from_bitField0_ & 0x00000020) != 0)) {
          result.referenceThreadTimeUs_ = referenceThreadTimeUs_;
          to_bitField0_ |= 0x00000020;
        }
        if (((from_bitField0_ & 0x00000040) != 0)) {
          result.referenceThreadInstructionCount_ = referenceThreadInstructionCount_;
          to_bitField0_ |= 0x00000040;
        }
        if (((from_bitField0_ & 0x00000080) != 0)) {
          result.legacySortIndex_ = legacySortIndex_;
          to_bitField0_ |= 0x00000080;
        }
        result.bitField0_ |= to_bitField0_;
      }

      @java.lang.Override
      public Builder clone() {
        return super.clone();
      }
      @java.lang.Override
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.setField(field, value);
      }
      @java.lang.Override
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return super.clearField(field);
      }
      @java.lang.Override
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return super.clearOneof(oneof);
      }
      @java.lang.Override
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, java.lang.Object value) {
        return super.setRepeatedField(field, index, value);
      }
      @java.lang.Override
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.addRepeatedField(field, value);
      }
      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof perfetto.protos.ThreadDescriptorOuterClass.ThreadDescriptor) {
          return mergeFrom((perfetto.protos.ThreadDescriptorOuterClass.ThreadDescriptor)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(perfetto.protos.ThreadDescriptorOuterClass.ThreadDescriptor other) {
        if (other == perfetto.protos.ThreadDescriptorOuterClass.ThreadDescriptor.getDefaultInstance()) return this;
        if (other.hasPid()) {
          setPid(other.getPid());
        }
        if (other.hasTid()) {
          setTid(other.getTid());
        }
        if (other.hasThreadName()) {
          threadName_ = other.threadName_;
          bitField0_ |= 0x00000004;
          onChanged();
        }
        if (other.hasChromeThreadType()) {
          setChromeThreadType(other.getChromeThreadType());
        }
        if (other.hasReferenceTimestampUs()) {
          setReferenceTimestampUs(other.getReferenceTimestampUs());
        }
        if (other.hasReferenceThreadTimeUs()) {
          setReferenceThreadTimeUs(other.getReferenceThreadTimeUs());
        }
        if (other.hasReferenceThreadInstructionCount()) {
          setReferenceThreadInstructionCount(other.getReferenceThreadInstructionCount());
        }
        if (other.hasLegacySortIndex()) {
          setLegacySortIndex(other.getLegacySortIndex());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        if (extensionRegistry == null) {
          throw new java.lang.NullPointerException();
        }
        try {
          boolean done = false;
          while (!done) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                done = true;
                break;
              case 8: {
                pid_ = input.readInt32();
                bitField0_ |= 0x00000001;
                break;
              } // case 8
              case 16: {
                tid_ = input.readInt32();
                bitField0_ |= 0x00000002;
                break;
              } // case 16
              case 24: {
                legacySortIndex_ = input.readInt32();
                bitField0_ |= 0x00000080;
                break;
              } // case 24
              case 32: {
                int tmpRaw = input.readEnum();
                perfetto.protos.ThreadDescriptorOuterClass.ThreadDescriptor.ChromeThreadType tmpValue =
                    perfetto.protos.ThreadDescriptorOuterClass.ThreadDescriptor.ChromeThreadType.forNumber(tmpRaw);
                if (tmpValue == null) {
                  mergeUnknownVarintField(4, tmpRaw);
                } else {
                  chromeThreadType_ = tmpRaw;
                  bitField0_ |= 0x00000008;
                }
                break;
              } // case 32
              case 42: {
                threadName_ = input.readBytes();
                bitField0_ |= 0x00000004;
                break;
              } // case 42
              case 48: {
                referenceTimestampUs_ = input.readInt64();
                bitField0_ |= 0x00000010;
                break;
              } // case 48
              case 56: {
                referenceThreadTimeUs_ = input.readInt64();
                bitField0_ |= 0x00000020;
                break;
              } // case 56
              case 64: {
                referenceThreadInstructionCount_ = input.readInt64();
                bitField0_ |= 0x00000040;
                break;
              } // case 64
              default: {
                if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                  done = true; // was an endgroup tag
                }
                break;
              } // default:
            } // switch (tag)
          } // while (!done)
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.unwrapIOException();
        } finally {
          onChanged();
        } // finally
        return this;
      }
      private int bitField0_;

      private int pid_ ;
      /**
       * <code>optional int32 pid = 1;</code>
       * @return Whether the pid field is set.
       */
      @java.lang.Override
      public boolean hasPid() {
        return ((bitField0_ & 0x00000001) != 0);
      }
      /**
       * <code>optional int32 pid = 1;</code>
       * @return The pid.
       */
      @java.lang.Override
      public int getPid() {
        return pid_;
      }
      /**
       * <code>optional int32 pid = 1;</code>
       * @param value The pid to set.
       * @return This builder for chaining.
       */
      public Builder setPid(int value) {
        
        pid_ = value;
        bitField0_ |= 0x00000001;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 pid = 1;</code>
       * @return This builder for chaining.
       */
      public Builder clearPid() {
        bitField0_ = (bitField0_ & ~0x00000001);
        pid_ = 0;
        onChanged();
        return this;
      }

      private int tid_ ;
      /**
       * <code>optional int32 tid = 2;</code>
       * @return Whether the tid field is set.
       */
      @java.lang.Override
      public boolean hasTid() {
        return ((bitField0_ & 0x00000002) != 0);
      }
      /**
       * <code>optional int32 tid = 2;</code>
       * @return The tid.
       */
      @java.lang.Override
      public int getTid() {
        return tid_;
      }
      /**
       * <code>optional int32 tid = 2;</code>
       * @param value The tid to set.
       * @return This builder for chaining.
       */
      public Builder setTid(int value) {
        
        tid_ = value;
        bitField0_ |= 0x00000002;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 tid = 2;</code>
       * @return This builder for chaining.
       */
      public Builder clearTid() {
        bitField0_ = (bitField0_ & ~0x00000002);
        tid_ = 0;
        onChanged();
        return this;
      }

      private java.lang.Object threadName_ = "";
      /**
       * <code>optional string thread_name = 5;</code>
       * @return Whether the threadName field is set.
       */
      public boolean hasThreadName() {
        return ((bitField0_ & 0x00000004) != 0);
      }
      /**
       * <code>optional string thread_name = 5;</code>
       * @return The threadName.
       */
      public java.lang.String getThreadName() {
        java.lang.Object ref = threadName_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          if (bs.isValidUtf8()) {
            threadName_ = s;
          }
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <code>optional string thread_name = 5;</code>
       * @return The bytes for threadName.
       */
      public com.google.protobuf.ByteString
          getThreadNameBytes() {
        java.lang.Object ref = threadName_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          threadName_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <code>optional string thread_name = 5;</code>
       * @param value The threadName to set.
       * @return This builder for chaining.
       */
      public Builder setThreadName(
          java.lang.String value) {
        if (value == null) { throw new NullPointerException(); }
        threadName_ = value;
        bitField0_ |= 0x00000004;
        onChanged();
        return this;
      }
      /**
       * <code>optional string thread_name = 5;</code>
       * @return This builder for chaining.
       */
      public Builder clearThreadName() {
        threadName_ = getDefaultInstance().getThreadName();
        bitField0_ = (bitField0_ & ~0x00000004);
        onChanged();
        return this;
      }
      /**
       * <code>optional string thread_name = 5;</code>
       * @param value The bytes for threadName to set.
       * @return This builder for chaining.
       */
      public Builder setThreadNameBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) { throw new NullPointerException(); }
        threadName_ = value;
        bitField0_ |= 0x00000004;
        onChanged();
        return this;
      }

      private int chromeThreadType_ = 0;
      /**
       * <code>optional .perfetto.protos.ThreadDescriptor.ChromeThreadType chrome_thread_type = 4;</code>
       * @return Whether the chromeThreadType field is set.
       */
      @java.lang.Override public boolean hasChromeThreadType() {
        return ((bitField0_ & 0x00000008) != 0);
      }
      /**
       * <code>optional .perfetto.protos.ThreadDescriptor.ChromeThreadType chrome_thread_type = 4;</code>
       * @return The chromeThreadType.
       */
      @java.lang.Override
      public perfetto.protos.ThreadDescriptorOuterClass.ThreadDescriptor.ChromeThreadType getChromeThreadType() {
        perfetto.protos.ThreadDescriptorOuterClass.ThreadDescriptor.ChromeThreadType result = perfetto.protos.ThreadDescriptorOuterClass.ThreadDescriptor.ChromeThreadType.forNumber(chromeThreadType_);
        return result == null ? perfetto.protos.ThreadDescriptorOuterClass.ThreadDescriptor.ChromeThreadType.CHROME_THREAD_UNSPECIFIED : result;
      }
      /**
       * <code>optional .perfetto.protos.ThreadDescriptor.ChromeThreadType chrome_thread_type = 4;</code>
       * @param value The chromeThreadType to set.
       * @return This builder for chaining.
       */
      public Builder setChromeThreadType(perfetto.protos.ThreadDescriptorOuterClass.ThreadDescriptor.ChromeThreadType value) {
        if (value == null) {
          throw new NullPointerException();
        }
        bitField0_ |= 0x00000008;
        chromeThreadType_ = value.getNumber();
        onChanged();
        return this;
      }
      /**
       * <code>optional .perfetto.protos.ThreadDescriptor.ChromeThreadType chrome_thread_type = 4;</code>
       * @return This builder for chaining.
       */
      public Builder clearChromeThreadType() {
        bitField0_ = (bitField0_ & ~0x00000008);
        chromeThreadType_ = 0;
        onChanged();
        return this;
      }

      private long referenceTimestampUs_ ;
      /**
       * <pre>
       * Deprecated. Use ClockSnapshot in combination with TracePacket's timestamp
       * and timestamp_clock_id fields instead.
       * </pre>
       *
       * <code>optional int64 reference_timestamp_us = 6;</code>
       * @return Whether the referenceTimestampUs field is set.
       */
      @java.lang.Override
      public boolean hasReferenceTimestampUs() {
        return ((bitField0_ & 0x00000010) != 0);
      }
      /**
       * <pre>
       * Deprecated. Use ClockSnapshot in combination with TracePacket's timestamp
       * and timestamp_clock_id fields instead.
       * </pre>
       *
       * <code>optional int64 reference_timestamp_us = 6;</code>
       * @return The referenceTimestampUs.
       */
      @java.lang.Override
      public long getReferenceTimestampUs() {
        return referenceTimestampUs_;
      }
      /**
       * <pre>
       * Deprecated. Use ClockSnapshot in combination with TracePacket's timestamp
       * and timestamp_clock_id fields instead.
       * </pre>
       *
       * <code>optional int64 reference_timestamp_us = 6;</code>
       * @param value The referenceTimestampUs to set.
       * @return This builder for chaining.
       */
      public Builder setReferenceTimestampUs(long value) {
        
        referenceTimestampUs_ = value;
        bitField0_ |= 0x00000010;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Deprecated. Use ClockSnapshot in combination with TracePacket's timestamp
       * and timestamp_clock_id fields instead.
       * </pre>
       *
       * <code>optional int64 reference_timestamp_us = 6;</code>
       * @return This builder for chaining.
       */
      public Builder clearReferenceTimestampUs() {
        bitField0_ = (bitField0_ & ~0x00000010);
        referenceTimestampUs_ = 0L;
        onChanged();
        return this;
      }

      private long referenceThreadTimeUs_ ;
      /**
       * <pre>
       * Absolute reference values. Clock values in subsequent TrackEvents can be
       * encoded accumulatively and relative to these. This reduces their var-int
       * encoding size.
       * TODO(eseckler): Deprecated. Replace these with ClockSnapshot encoding.
       * </pre>
       *
       * <code>optional int64 reference_thread_time_us = 7;</code>
       * @return Whether the referenceThreadTimeUs field is set.
       */
      @java.lang.Override
      public boolean hasReferenceThreadTimeUs() {
        return ((bitField0_ & 0x00000020) != 0);
      }
      /**
       * <pre>
       * Absolute reference values. Clock values in subsequent TrackEvents can be
       * encoded accumulatively and relative to these. This reduces their var-int
       * encoding size.
       * TODO(eseckler): Deprecated. Replace these with ClockSnapshot encoding.
       * </pre>
       *
       * <code>optional int64 reference_thread_time_us = 7;</code>
       * @return The referenceThreadTimeUs.
       */
      @java.lang.Override
      public long getReferenceThreadTimeUs() {
        return referenceThreadTimeUs_;
      }
      /**
       * <pre>
       * Absolute reference values. Clock values in subsequent TrackEvents can be
       * encoded accumulatively and relative to these. This reduces their var-int
       * encoding size.
       * TODO(eseckler): Deprecated. Replace these with ClockSnapshot encoding.
       * </pre>
       *
       * <code>optional int64 reference_thread_time_us = 7;</code>
       * @param value The referenceThreadTimeUs to set.
       * @return This builder for chaining.
       */
      public Builder setReferenceThreadTimeUs(long value) {
        
        referenceThreadTimeUs_ = value;
        bitField0_ |= 0x00000020;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Absolute reference values. Clock values in subsequent TrackEvents can be
       * encoded accumulatively and relative to these. This reduces their var-int
       * encoding size.
       * TODO(eseckler): Deprecated. Replace these with ClockSnapshot encoding.
       * </pre>
       *
       * <code>optional int64 reference_thread_time_us = 7;</code>
       * @return This builder for chaining.
       */
      public Builder clearReferenceThreadTimeUs() {
        bitField0_ = (bitField0_ & ~0x00000020);
        referenceThreadTimeUs_ = 0L;
        onChanged();
        return this;
      }

      private long referenceThreadInstructionCount_ ;
      /**
       * <code>optional int64 reference_thread_instruction_count = 8;</code>
       * @return Whether the referenceThreadInstructionCount field is set.
       */
      @java.lang.Override
      public boolean hasReferenceThreadInstructionCount() {
        return ((bitField0_ & 0x00000040) != 0);
      }
      /**
       * <code>optional int64 reference_thread_instruction_count = 8;</code>
       * @return The referenceThreadInstructionCount.
       */
      @java.lang.Override
      public long getReferenceThreadInstructionCount() {
        return referenceThreadInstructionCount_;
      }
      /**
       * <code>optional int64 reference_thread_instruction_count = 8;</code>
       * @param value The referenceThreadInstructionCount to set.
       * @return This builder for chaining.
       */
      public Builder setReferenceThreadInstructionCount(long value) {
        
        referenceThreadInstructionCount_ = value;
        bitField0_ |= 0x00000040;
        onChanged();
        return this;
      }
      /**
       * <code>optional int64 reference_thread_instruction_count = 8;</code>
       * @return This builder for chaining.
       */
      public Builder clearReferenceThreadInstructionCount() {
        bitField0_ = (bitField0_ & ~0x00000040);
        referenceThreadInstructionCount_ = 0L;
        onChanged();
        return this;
      }

      private int legacySortIndex_ ;
      /**
       * <pre>
       * To support old UI. New UI should determine default sorting by thread_type.
       * </pre>
       *
       * <code>optional int32 legacy_sort_index = 3;</code>
       * @return Whether the legacySortIndex field is set.
       */
      @java.lang.Override
      public boolean hasLegacySortIndex() {
        return ((bitField0_ & 0x00000080) != 0);
      }
      /**
       * <pre>
       * To support old UI. New UI should determine default sorting by thread_type.
       * </pre>
       *
       * <code>optional int32 legacy_sort_index = 3;</code>
       * @return The legacySortIndex.
       */
      @java.lang.Override
      public int getLegacySortIndex() {
        return legacySortIndex_;
      }
      /**
       * <pre>
       * To support old UI. New UI should determine default sorting by thread_type.
       * </pre>
       *
       * <code>optional int32 legacy_sort_index = 3;</code>
       * @param value The legacySortIndex to set.
       * @return This builder for chaining.
       */
      public Builder setLegacySortIndex(int value) {
        
        legacySortIndex_ = value;
        bitField0_ |= 0x00000080;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * To support old UI. New UI should determine default sorting by thread_type.
       * </pre>
       *
       * <code>optional int32 legacy_sort_index = 3;</code>
       * @return This builder for chaining.
       */
      public Builder clearLegacySortIndex() {
        bitField0_ = (bitField0_ & ~0x00000080);
        legacySortIndex_ = 0;
        onChanged();
        return this;
      }
      @java.lang.Override
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      @java.lang.Override
      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:perfetto.protos.ThreadDescriptor)
    }

    // @@protoc_insertion_point(class_scope:perfetto.protos.ThreadDescriptor)
    private static final perfetto.protos.ThreadDescriptorOuterClass.ThreadDescriptor DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new perfetto.protos.ThreadDescriptorOuterClass.ThreadDescriptor();
    }

    public static perfetto.protos.ThreadDescriptorOuterClass.ThreadDescriptor getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    @java.lang.Deprecated public static final com.google.protobuf.Parser<ThreadDescriptor>
        PARSER = new com.google.protobuf.AbstractParser<ThreadDescriptor>() {
      @java.lang.Override
      public ThreadDescriptor parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        Builder builder = newBuilder();
        try {
          builder.mergeFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.setUnfinishedMessage(builder.buildPartial());
        } catch (com.google.protobuf.UninitializedMessageException e) {
          throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
        } catch (java.io.IOException e) {
          throw new com.google.protobuf.InvalidProtocolBufferException(e)
              .setUnfinishedMessage(builder.buildPartial());
        }
        return builder.buildPartial();
      }
    };

    public static com.google.protobuf.Parser<ThreadDescriptor> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<ThreadDescriptor> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public perfetto.protos.ThreadDescriptorOuterClass.ThreadDescriptor getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_perfetto_protos_ThreadDescriptor_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_perfetto_protos_ThreadDescriptor_fieldAccessorTable;

  public static com.google.protobuf.Descriptors.FileDescriptor
      getDescriptor() {
    return descriptor;
  }
  private static  com.google.protobuf.Descriptors.FileDescriptor
      descriptor;
  static {
    java.lang.String[] descriptorData = {
      "\n9protos/perfetto/trace/track_event/thre" +
      "ad_descriptor.proto\022\017perfetto.protos\"\364\005\n" +
      "\020ThreadDescriptor\022\013\n\003pid\030\001 \001(\005\022\013\n\003tid\030\002 " +
      "\001(\005\022\023\n\013thread_name\030\005 \001(\t\022N\n\022chrome_threa" +
      "d_type\030\004 \001(\01622.perfetto.protos.ThreadDes" +
      "criptor.ChromeThreadType\022\036\n\026reference_ti" +
      "mestamp_us\030\006 \001(\003\022 \n\030reference_thread_tim" +
      "e_us\030\007 \001(\003\022*\n\"reference_thread_instructi" +
      "on_count\030\010 \001(\003\022\031\n\021legacy_sort_index\030\003 \001(" +
      "\005\"\327\003\n\020ChromeThreadType\022\035\n\031CHROME_THREAD_" +
      "UNSPECIFIED\020\000\022\026\n\022CHROME_THREAD_MAIN\020\001\022\024\n" +
      "\020CHROME_THREAD_IO\020\002\022 \n\034CHROME_THREAD_POO" +
      "L_BG_WORKER\020\003\022 \n\034CHROME_THREAD_POOL_FG_W" +
      "ORKER\020\004\022\"\n\036CHROME_THREAD_POOL_FB_BLOCKIN" +
      "G\020\005\022\"\n\036CHROME_THREAD_POOL_BG_BLOCKING\020\006\022" +
      "\036\n\032CHROME_THREAD_POOL_SERVICE\020\007\022\034\n\030CHROM" +
      "E_THREAD_COMPOSITOR\020\010\022 \n\034CHROME_THREAD_V" +
      "IZ_COMPOSITOR\020\t\022#\n\037CHROME_THREAD_COMPOSI" +
      "TOR_WORKER\020\n\022 \n\034CHROME_THREAD_SERVICE_WO" +
      "RKER\020\013\022\036\n\032CHROME_THREAD_MEMORY_INFRA\0202\022#" +
      "\n\037CHROME_THREAD_SAMPLING_PROFILER\0203"
    };
    descriptor = com.google.protobuf.Descriptors.FileDescriptor
      .internalBuildGeneratedFileFrom(descriptorData,
        new com.google.protobuf.Descriptors.FileDescriptor[] {
        });
    internal_static_perfetto_protos_ThreadDescriptor_descriptor =
      getDescriptor().getMessageTypes().get(0);
    internal_static_perfetto_protos_ThreadDescriptor_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_perfetto_protos_ThreadDescriptor_descriptor,
        new java.lang.String[] { "Pid", "Tid", "ThreadName", "ChromeThreadType", "ReferenceTimestampUs", "ReferenceThreadTimeUs", "ReferenceThreadInstructionCount", "LegacySortIndex", });
  }

  // @@protoc_insertion_point(outer_class_scope)
}
