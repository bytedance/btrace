// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: protos/perfetto/metrics/android/camera_metric.proto

package perfetto.protos;

public final class CameraMetric {
  private CameraMetric() {}
  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistryLite registry) {
  }

  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistry registry) {
    registerAllExtensions(
        (com.google.protobuf.ExtensionRegistryLite) registry);
  }
  public interface AndroidCameraMetricOrBuilder extends
      // @@protoc_insertion_point(interface_extends:perfetto.protos.AndroidCameraMetric)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <pre>
     * Counter for the sum of DMA and RSS across GCA, cameraserver
     * and HAL. This provides a single number for the memory
     * pressure using the camera is putting on the rest of the
     * system.
     * Note: this number assumes that all DMA pressure is coming
     * from the camera as this is usually a pretty good
     * approximation. Being more accurate here would increase the
     * complexity of the metric significantly.
     * Note: if there are multiple GCA/cameraserver/HAL processes
     * in the trace, this metric will simply take the latest
     * one in the trace and ignore the others.
     * </pre>
     *
     * <code>optional .perfetto.protos.AndroidCameraMetric.Counter gc_rss_and_dma = 1;</code>
     * @return Whether the gcRssAndDma field is set.
     */
    boolean hasGcRssAndDma();
    /**
     * <pre>
     * Counter for the sum of DMA and RSS across GCA, cameraserver
     * and HAL. This provides a single number for the memory
     * pressure using the camera is putting on the rest of the
     * system.
     * Note: this number assumes that all DMA pressure is coming
     * from the camera as this is usually a pretty good
     * approximation. Being more accurate here would increase the
     * complexity of the metric significantly.
     * Note: if there are multiple GCA/cameraserver/HAL processes
     * in the trace, this metric will simply take the latest
     * one in the trace and ignore the others.
     * </pre>
     *
     * <code>optional .perfetto.protos.AndroidCameraMetric.Counter gc_rss_and_dma = 1;</code>
     * @return The gcRssAndDma.
     */
    perfetto.protos.CameraMetric.AndroidCameraMetric.Counter getGcRssAndDma();
    /**
     * <pre>
     * Counter for the sum of DMA and RSS across GCA, cameraserver
     * and HAL. This provides a single number for the memory
     * pressure using the camera is putting on the rest of the
     * system.
     * Note: this number assumes that all DMA pressure is coming
     * from the camera as this is usually a pretty good
     * approximation. Being more accurate here would increase the
     * complexity of the metric significantly.
     * Note: if there are multiple GCA/cameraserver/HAL processes
     * in the trace, this metric will simply take the latest
     * one in the trace and ignore the others.
     * </pre>
     *
     * <code>optional .perfetto.protos.AndroidCameraMetric.Counter gc_rss_and_dma = 1;</code>
     */
    perfetto.protos.CameraMetric.AndroidCameraMetric.CounterOrBuilder getGcRssAndDmaOrBuilder();
  }
  /**
   * Protobuf type {@code perfetto.protos.AndroidCameraMetric}
   */
  public static final class AndroidCameraMetric extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:perfetto.protos.AndroidCameraMetric)
      AndroidCameraMetricOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use AndroidCameraMetric.newBuilder() to construct.
    private AndroidCameraMetric(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private AndroidCameraMetric() {
    }

    @java.lang.Override
    @SuppressWarnings({"unused"})
    protected java.lang.Object newInstance(
        UnusedPrivateParameter unused) {
      return new AndroidCameraMetric();
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return perfetto.protos.CameraMetric.internal_static_perfetto_protos_AndroidCameraMetric_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return perfetto.protos.CameraMetric.internal_static_perfetto_protos_AndroidCameraMetric_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              perfetto.protos.CameraMetric.AndroidCameraMetric.class, perfetto.protos.CameraMetric.AndroidCameraMetric.Builder.class);
    }

    public interface CounterOrBuilder extends
        // @@protoc_insertion_point(interface_extends:perfetto.protos.AndroidCameraMetric.Counter)
        com.google.protobuf.MessageOrBuilder {

      /**
       * <code>optional double min = 1;</code>
       * @return Whether the min field is set.
       */
      boolean hasMin();
      /**
       * <code>optional double min = 1;</code>
       * @return The min.
       */
      double getMin();

      /**
       * <code>optional double max = 2;</code>
       * @return Whether the max field is set.
       */
      boolean hasMax();
      /**
       * <code>optional double max = 2;</code>
       * @return The max.
       */
      double getMax();

      /**
       * <code>optional double avg = 3;</code>
       * @return Whether the avg field is set.
       */
      boolean hasAvg();
      /**
       * <code>optional double avg = 3;</code>
       * @return The avg.
       */
      double getAvg();
    }
    /**
     * Protobuf type {@code perfetto.protos.AndroidCameraMetric.Counter}
     */
    public static final class Counter extends
        com.google.protobuf.GeneratedMessageV3 implements
        // @@protoc_insertion_point(message_implements:perfetto.protos.AndroidCameraMetric.Counter)
        CounterOrBuilder {
    private static final long serialVersionUID = 0L;
      // Use Counter.newBuilder() to construct.
      private Counter(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
        super(builder);
      }
      private Counter() {
      }

      @java.lang.Override
      @SuppressWarnings({"unused"})
      protected java.lang.Object newInstance(
          UnusedPrivateParameter unused) {
        return new Counter();
      }

      @java.lang.Override
      public final com.google.protobuf.UnknownFieldSet
      getUnknownFields() {
        return this.unknownFields;
      }
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return perfetto.protos.CameraMetric.internal_static_perfetto_protos_AndroidCameraMetric_Counter_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return perfetto.protos.CameraMetric.internal_static_perfetto_protos_AndroidCameraMetric_Counter_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                perfetto.protos.CameraMetric.AndroidCameraMetric.Counter.class, perfetto.protos.CameraMetric.AndroidCameraMetric.Counter.Builder.class);
      }

      private int bitField0_;
      public static final int MIN_FIELD_NUMBER = 1;
      private double min_ = 0D;
      /**
       * <code>optional double min = 1;</code>
       * @return Whether the min field is set.
       */
      @java.lang.Override
      public boolean hasMin() {
        return ((bitField0_ & 0x00000001) != 0);
      }
      /**
       * <code>optional double min = 1;</code>
       * @return The min.
       */
      @java.lang.Override
      public double getMin() {
        return min_;
      }

      public static final int MAX_FIELD_NUMBER = 2;
      private double max_ = 0D;
      /**
       * <code>optional double max = 2;</code>
       * @return Whether the max field is set.
       */
      @java.lang.Override
      public boolean hasMax() {
        return ((bitField0_ & 0x00000002) != 0);
      }
      /**
       * <code>optional double max = 2;</code>
       * @return The max.
       */
      @java.lang.Override
      public double getMax() {
        return max_;
      }

      public static final int AVG_FIELD_NUMBER = 3;
      private double avg_ = 0D;
      /**
       * <code>optional double avg = 3;</code>
       * @return Whether the avg field is set.
       */
      @java.lang.Override
      public boolean hasAvg() {
        return ((bitField0_ & 0x00000004) != 0);
      }
      /**
       * <code>optional double avg = 3;</code>
       * @return The avg.
       */
      @java.lang.Override
      public double getAvg() {
        return avg_;
      }

      private byte memoizedIsInitialized = -1;
      @java.lang.Override
      public final boolean isInitialized() {
        byte isInitialized = memoizedIsInitialized;
        if (isInitialized == 1) return true;
        if (isInitialized == 0) return false;

        memoizedIsInitialized = 1;
        return true;
      }

      @java.lang.Override
      public void writeTo(com.google.protobuf.CodedOutputStream output)
                          throws java.io.IOException {
        if (((bitField0_ & 0x00000001) != 0)) {
          output.writeDouble(1, min_);
        }
        if (((bitField0_ & 0x00000002) != 0)) {
          output.writeDouble(2, max_);
        }
        if (((bitField0_ & 0x00000004) != 0)) {
          output.writeDouble(3, avg_);
        }
        getUnknownFields().writeTo(output);
      }

      @java.lang.Override
      public int getSerializedSize() {
        int size = memoizedSize;
        if (size != -1) return size;

        size = 0;
        if (((bitField0_ & 0x00000001) != 0)) {
          size += com.google.protobuf.CodedOutputStream
            .computeDoubleSize(1, min_);
        }
        if (((bitField0_ & 0x00000002) != 0)) {
          size += com.google.protobuf.CodedOutputStream
            .computeDoubleSize(2, max_);
        }
        if (((bitField0_ & 0x00000004) != 0)) {
          size += com.google.protobuf.CodedOutputStream
            .computeDoubleSize(3, avg_);
        }
        size += getUnknownFields().getSerializedSize();
        memoizedSize = size;
        return size;
      }

      @java.lang.Override
      public boolean equals(final java.lang.Object obj) {
        if (obj == this) {
         return true;
        }
        if (!(obj instanceof perfetto.protos.CameraMetric.AndroidCameraMetric.Counter)) {
          return super.equals(obj);
        }
        perfetto.protos.CameraMetric.AndroidCameraMetric.Counter other = (perfetto.protos.CameraMetric.AndroidCameraMetric.Counter) obj;

        if (hasMin() != other.hasMin()) return false;
        if (hasMin()) {
          if (java.lang.Double.doubleToLongBits(getMin())
              != java.lang.Double.doubleToLongBits(
                  other.getMin())) return false;
        }
        if (hasMax() != other.hasMax()) return false;
        if (hasMax()) {
          if (java.lang.Double.doubleToLongBits(getMax())
              != java.lang.Double.doubleToLongBits(
                  other.getMax())) return false;
        }
        if (hasAvg() != other.hasAvg()) return false;
        if (hasAvg()) {
          if (java.lang.Double.doubleToLongBits(getAvg())
              != java.lang.Double.doubleToLongBits(
                  other.getAvg())) return false;
        }
        if (!getUnknownFields().equals(other.getUnknownFields())) return false;
        return true;
      }

      @java.lang.Override
      public int hashCode() {
        if (memoizedHashCode != 0) {
          return memoizedHashCode;
        }
        int hash = 41;
        hash = (19 * hash) + getDescriptor().hashCode();
        if (hasMin()) {
          hash = (37 * hash) + MIN_FIELD_NUMBER;
          hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
              java.lang.Double.doubleToLongBits(getMin()));
        }
        if (hasMax()) {
          hash = (37 * hash) + MAX_FIELD_NUMBER;
          hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
              java.lang.Double.doubleToLongBits(getMax()));
        }
        if (hasAvg()) {
          hash = (37 * hash) + AVG_FIELD_NUMBER;
          hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
              java.lang.Double.doubleToLongBits(getAvg()));
        }
        hash = (29 * hash) + getUnknownFields().hashCode();
        memoizedHashCode = hash;
        return hash;
      }

      public static perfetto.protos.CameraMetric.AndroidCameraMetric.Counter parseFrom(
          java.nio.ByteBuffer data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static perfetto.protos.CameraMetric.AndroidCameraMetric.Counter parseFrom(
          java.nio.ByteBuffer data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static perfetto.protos.CameraMetric.AndroidCameraMetric.Counter parseFrom(
          com.google.protobuf.ByteString data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static perfetto.protos.CameraMetric.AndroidCameraMetric.Counter parseFrom(
          com.google.protobuf.ByteString data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static perfetto.protos.CameraMetric.AndroidCameraMetric.Counter parseFrom(byte[] data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static perfetto.protos.CameraMetric.AndroidCameraMetric.Counter parseFrom(
          byte[] data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static perfetto.protos.CameraMetric.AndroidCameraMetric.Counter parseFrom(java.io.InputStream input)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseWithIOException(PARSER, input);
      }
      public static perfetto.protos.CameraMetric.AndroidCameraMetric.Counter parseFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseWithIOException(PARSER, input, extensionRegistry);
      }
      public static perfetto.protos.CameraMetric.AndroidCameraMetric.Counter parseDelimitedFrom(java.io.InputStream input)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseDelimitedWithIOException(PARSER, input);
      }
      public static perfetto.protos.CameraMetric.AndroidCameraMetric.Counter parseDelimitedFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
      }
      public static perfetto.protos.CameraMetric.AndroidCameraMetric.Counter parseFrom(
          com.google.protobuf.CodedInputStream input)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseWithIOException(PARSER, input);
      }
      public static perfetto.protos.CameraMetric.AndroidCameraMetric.Counter parseFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseWithIOException(PARSER, input, extensionRegistry);
      }

      @java.lang.Override
      public Builder newBuilderForType() { return newBuilder(); }
      public static Builder newBuilder() {
        return DEFAULT_INSTANCE.toBuilder();
      }
      public static Builder newBuilder(perfetto.protos.CameraMetric.AndroidCameraMetric.Counter prototype) {
        return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
      }
      @java.lang.Override
      public Builder toBuilder() {
        return this == DEFAULT_INSTANCE
            ? new Builder() : new Builder().mergeFrom(this);
      }

      @java.lang.Override
      protected Builder newBuilderForType(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        Builder builder = new Builder(parent);
        return builder;
      }
      /**
       * Protobuf type {@code perfetto.protos.AndroidCameraMetric.Counter}
       */
      public static final class Builder extends
          com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
          // @@protoc_insertion_point(builder_implements:perfetto.protos.AndroidCameraMetric.Counter)
          perfetto.protos.CameraMetric.AndroidCameraMetric.CounterOrBuilder {
        public static final com.google.protobuf.Descriptors.Descriptor
            getDescriptor() {
          return perfetto.protos.CameraMetric.internal_static_perfetto_protos_AndroidCameraMetric_Counter_descriptor;
        }

        @java.lang.Override
        protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
            internalGetFieldAccessorTable() {
          return perfetto.protos.CameraMetric.internal_static_perfetto_protos_AndroidCameraMetric_Counter_fieldAccessorTable
              .ensureFieldAccessorsInitialized(
                  perfetto.protos.CameraMetric.AndroidCameraMetric.Counter.class, perfetto.protos.CameraMetric.AndroidCameraMetric.Counter.Builder.class);
        }

        // Construct using perfetto.protos.CameraMetric.AndroidCameraMetric.Counter.newBuilder()
        private Builder() {

        }

        private Builder(
            com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
          super(parent);

        }
        @java.lang.Override
        public Builder clear() {
          super.clear();
          bitField0_ = 0;
          min_ = 0D;
          max_ = 0D;
          avg_ = 0D;
          return this;
        }

        @java.lang.Override
        public com.google.protobuf.Descriptors.Descriptor
            getDescriptorForType() {
          return perfetto.protos.CameraMetric.internal_static_perfetto_protos_AndroidCameraMetric_Counter_descriptor;
        }

        @java.lang.Override
        public perfetto.protos.CameraMetric.AndroidCameraMetric.Counter getDefaultInstanceForType() {
          return perfetto.protos.CameraMetric.AndroidCameraMetric.Counter.getDefaultInstance();
        }

        @java.lang.Override
        public perfetto.protos.CameraMetric.AndroidCameraMetric.Counter build() {
          perfetto.protos.CameraMetric.AndroidCameraMetric.Counter result = buildPartial();
          if (!result.isInitialized()) {
            throw newUninitializedMessageException(result);
          }
          return result;
        }

        @java.lang.Override
        public perfetto.protos.CameraMetric.AndroidCameraMetric.Counter buildPartial() {
          perfetto.protos.CameraMetric.AndroidCameraMetric.Counter result = new perfetto.protos.CameraMetric.AndroidCameraMetric.Counter(this);
          if (bitField0_ != 0) { buildPartial0(result); }
          onBuilt();
          return result;
        }

        private void buildPartial0(perfetto.protos.CameraMetric.AndroidCameraMetric.Counter result) {
          int from_bitField0_ = bitField0_;
          int to_bitField0_ = 0;
          if (((from_bitField0_ & 0x00000001) != 0)) {
            result.min_ = min_;
            to_bitField0_ |= 0x00000001;
          }
          if (((from_bitField0_ & 0x00000002) != 0)) {
            result.max_ = max_;
            to_bitField0_ |= 0x00000002;
          }
          if (((from_bitField0_ & 0x00000004) != 0)) {
            result.avg_ = avg_;
            to_bitField0_ |= 0x00000004;
          }
          result.bitField0_ |= to_bitField0_;
        }

        @java.lang.Override
        public Builder clone() {
          return super.clone();
        }
        @java.lang.Override
        public Builder setField(
            com.google.protobuf.Descriptors.FieldDescriptor field,
            java.lang.Object value) {
          return super.setField(field, value);
        }
        @java.lang.Override
        public Builder clearField(
            com.google.protobuf.Descriptors.FieldDescriptor field) {
          return super.clearField(field);
        }
        @java.lang.Override
        public Builder clearOneof(
            com.google.protobuf.Descriptors.OneofDescriptor oneof) {
          return super.clearOneof(oneof);
        }
        @java.lang.Override
        public Builder setRepeatedField(
            com.google.protobuf.Descriptors.FieldDescriptor field,
            int index, java.lang.Object value) {
          return super.setRepeatedField(field, index, value);
        }
        @java.lang.Override
        public Builder addRepeatedField(
            com.google.protobuf.Descriptors.FieldDescriptor field,
            java.lang.Object value) {
          return super.addRepeatedField(field, value);
        }
        @java.lang.Override
        public Builder mergeFrom(com.google.protobuf.Message other) {
          if (other instanceof perfetto.protos.CameraMetric.AndroidCameraMetric.Counter) {
            return mergeFrom((perfetto.protos.CameraMetric.AndroidCameraMetric.Counter)other);
          } else {
            super.mergeFrom(other);
            return this;
          }
        }

        public Builder mergeFrom(perfetto.protos.CameraMetric.AndroidCameraMetric.Counter other) {
          if (other == perfetto.protos.CameraMetric.AndroidCameraMetric.Counter.getDefaultInstance()) return this;
          if (other.hasMin()) {
            setMin(other.getMin());
          }
          if (other.hasMax()) {
            setMax(other.getMax());
          }
          if (other.hasAvg()) {
            setAvg(other.getAvg());
          }
          this.mergeUnknownFields(other.getUnknownFields());
          onChanged();
          return this;
        }

        @java.lang.Override
        public final boolean isInitialized() {
          return true;
        }

        @java.lang.Override
        public Builder mergeFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws java.io.IOException {
          if (extensionRegistry == null) {
            throw new java.lang.NullPointerException();
          }
          try {
            boolean done = false;
            while (!done) {
              int tag = input.readTag();
              switch (tag) {
                case 0:
                  done = true;
                  break;
                case 9: {
                  min_ = input.readDouble();
                  bitField0_ |= 0x00000001;
                  break;
                } // case 9
                case 17: {
                  max_ = input.readDouble();
                  bitField0_ |= 0x00000002;
                  break;
                } // case 17
                case 25: {
                  avg_ = input.readDouble();
                  bitField0_ |= 0x00000004;
                  break;
                } // case 25
                default: {
                  if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                    done = true; // was an endgroup tag
                  }
                  break;
                } // default:
              } // switch (tag)
            } // while (!done)
          } catch (com.google.protobuf.InvalidProtocolBufferException e) {
            throw e.unwrapIOException();
          } finally {
            onChanged();
          } // finally
          return this;
        }
        private int bitField0_;

        private double min_ ;
        /**
         * <code>optional double min = 1;</code>
         * @return Whether the min field is set.
         */
        @java.lang.Override
        public boolean hasMin() {
          return ((bitField0_ & 0x00000001) != 0);
        }
        /**
         * <code>optional double min = 1;</code>
         * @return The min.
         */
        @java.lang.Override
        public double getMin() {
          return min_;
        }
        /**
         * <code>optional double min = 1;</code>
         * @param value The min to set.
         * @return This builder for chaining.
         */
        public Builder setMin(double value) {
          
          min_ = value;
          bitField0_ |= 0x00000001;
          onChanged();
          return this;
        }
        /**
         * <code>optional double min = 1;</code>
         * @return This builder for chaining.
         */
        public Builder clearMin() {
          bitField0_ = (bitField0_ & ~0x00000001);
          min_ = 0D;
          onChanged();
          return this;
        }

        private double max_ ;
        /**
         * <code>optional double max = 2;</code>
         * @return Whether the max field is set.
         */
        @java.lang.Override
        public boolean hasMax() {
          return ((bitField0_ & 0x00000002) != 0);
        }
        /**
         * <code>optional double max = 2;</code>
         * @return The max.
         */
        @java.lang.Override
        public double getMax() {
          return max_;
        }
        /**
         * <code>optional double max = 2;</code>
         * @param value The max to set.
         * @return This builder for chaining.
         */
        public Builder setMax(double value) {
          
          max_ = value;
          bitField0_ |= 0x00000002;
          onChanged();
          return this;
        }
        /**
         * <code>optional double max = 2;</code>
         * @return This builder for chaining.
         */
        public Builder clearMax() {
          bitField0_ = (bitField0_ & ~0x00000002);
          max_ = 0D;
          onChanged();
          return this;
        }

        private double avg_ ;
        /**
         * <code>optional double avg = 3;</code>
         * @return Whether the avg field is set.
         */
        @java.lang.Override
        public boolean hasAvg() {
          return ((bitField0_ & 0x00000004) != 0);
        }
        /**
         * <code>optional double avg = 3;</code>
         * @return The avg.
         */
        @java.lang.Override
        public double getAvg() {
          return avg_;
        }
        /**
         * <code>optional double avg = 3;</code>
         * @param value The avg to set.
         * @return This builder for chaining.
         */
        public Builder setAvg(double value) {
          
          avg_ = value;
          bitField0_ |= 0x00000004;
          onChanged();
          return this;
        }
        /**
         * <code>optional double avg = 3;</code>
         * @return This builder for chaining.
         */
        public Builder clearAvg() {
          bitField0_ = (bitField0_ & ~0x00000004);
          avg_ = 0D;
          onChanged();
          return this;
        }
        @java.lang.Override
        public final Builder setUnknownFields(
            final com.google.protobuf.UnknownFieldSet unknownFields) {
          return super.setUnknownFields(unknownFields);
        }

        @java.lang.Override
        public final Builder mergeUnknownFields(
            final com.google.protobuf.UnknownFieldSet unknownFields) {
          return super.mergeUnknownFields(unknownFields);
        }


        // @@protoc_insertion_point(builder_scope:perfetto.protos.AndroidCameraMetric.Counter)
      }

      // @@protoc_insertion_point(class_scope:perfetto.protos.AndroidCameraMetric.Counter)
      private static final perfetto.protos.CameraMetric.AndroidCameraMetric.Counter DEFAULT_INSTANCE;
      static {
        DEFAULT_INSTANCE = new perfetto.protos.CameraMetric.AndroidCameraMetric.Counter();
      }

      public static perfetto.protos.CameraMetric.AndroidCameraMetric.Counter getDefaultInstance() {
        return DEFAULT_INSTANCE;
      }

      @java.lang.Deprecated public static final com.google.protobuf.Parser<Counter>
          PARSER = new com.google.protobuf.AbstractParser<Counter>() {
        @java.lang.Override
        public Counter parsePartialFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws com.google.protobuf.InvalidProtocolBufferException {
          Builder builder = newBuilder();
          try {
            builder.mergeFrom(input, extensionRegistry);
          } catch (com.google.protobuf.InvalidProtocolBufferException e) {
            throw e.setUnfinishedMessage(builder.buildPartial());
          } catch (com.google.protobuf.UninitializedMessageException e) {
            throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
          } catch (java.io.IOException e) {
            throw new com.google.protobuf.InvalidProtocolBufferException(e)
                .setUnfinishedMessage(builder.buildPartial());
          }
          return builder.buildPartial();
        }
      };

      public static com.google.protobuf.Parser<Counter> parser() {
        return PARSER;
      }

      @java.lang.Override
      public com.google.protobuf.Parser<Counter> getParserForType() {
        return PARSER;
      }

      @java.lang.Override
      public perfetto.protos.CameraMetric.AndroidCameraMetric.Counter getDefaultInstanceForType() {
        return DEFAULT_INSTANCE;
      }

    }

    private int bitField0_;
    public static final int GC_RSS_AND_DMA_FIELD_NUMBER = 1;
    private perfetto.protos.CameraMetric.AndroidCameraMetric.Counter gcRssAndDma_;
    /**
     * <pre>
     * Counter for the sum of DMA and RSS across GCA, cameraserver
     * and HAL. This provides a single number for the memory
     * pressure using the camera is putting on the rest of the
     * system.
     * Note: this number assumes that all DMA pressure is coming
     * from the camera as this is usually a pretty good
     * approximation. Being more accurate here would increase the
     * complexity of the metric significantly.
     * Note: if there are multiple GCA/cameraserver/HAL processes
     * in the trace, this metric will simply take the latest
     * one in the trace and ignore the others.
     * </pre>
     *
     * <code>optional .perfetto.protos.AndroidCameraMetric.Counter gc_rss_and_dma = 1;</code>
     * @return Whether the gcRssAndDma field is set.
     */
    @java.lang.Override
    public boolean hasGcRssAndDma() {
      return ((bitField0_ & 0x00000001) != 0);
    }
    /**
     * <pre>
     * Counter for the sum of DMA and RSS across GCA, cameraserver
     * and HAL. This provides a single number for the memory
     * pressure using the camera is putting on the rest of the
     * system.
     * Note: this number assumes that all DMA pressure is coming
     * from the camera as this is usually a pretty good
     * approximation. Being more accurate here would increase the
     * complexity of the metric significantly.
     * Note: if there are multiple GCA/cameraserver/HAL processes
     * in the trace, this metric will simply take the latest
     * one in the trace and ignore the others.
     * </pre>
     *
     * <code>optional .perfetto.protos.AndroidCameraMetric.Counter gc_rss_and_dma = 1;</code>
     * @return The gcRssAndDma.
     */
    @java.lang.Override
    public perfetto.protos.CameraMetric.AndroidCameraMetric.Counter getGcRssAndDma() {
      return gcRssAndDma_ == null ? perfetto.protos.CameraMetric.AndroidCameraMetric.Counter.getDefaultInstance() : gcRssAndDma_;
    }
    /**
     * <pre>
     * Counter for the sum of DMA and RSS across GCA, cameraserver
     * and HAL. This provides a single number for the memory
     * pressure using the camera is putting on the rest of the
     * system.
     * Note: this number assumes that all DMA pressure is coming
     * from the camera as this is usually a pretty good
     * approximation. Being more accurate here would increase the
     * complexity of the metric significantly.
     * Note: if there are multiple GCA/cameraserver/HAL processes
     * in the trace, this metric will simply take the latest
     * one in the trace and ignore the others.
     * </pre>
     *
     * <code>optional .perfetto.protos.AndroidCameraMetric.Counter gc_rss_and_dma = 1;</code>
     */
    @java.lang.Override
    public perfetto.protos.CameraMetric.AndroidCameraMetric.CounterOrBuilder getGcRssAndDmaOrBuilder() {
      return gcRssAndDma_ == null ? perfetto.protos.CameraMetric.AndroidCameraMetric.Counter.getDefaultInstance() : gcRssAndDma_;
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (((bitField0_ & 0x00000001) != 0)) {
        output.writeMessage(1, getGcRssAndDma());
      }
      getUnknownFields().writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) != 0)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(1, getGcRssAndDma());
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof perfetto.protos.CameraMetric.AndroidCameraMetric)) {
        return super.equals(obj);
      }
      perfetto.protos.CameraMetric.AndroidCameraMetric other = (perfetto.protos.CameraMetric.AndroidCameraMetric) obj;

      if (hasGcRssAndDma() != other.hasGcRssAndDma()) return false;
      if (hasGcRssAndDma()) {
        if (!getGcRssAndDma()
            .equals(other.getGcRssAndDma())) return false;
      }
      if (!getUnknownFields().equals(other.getUnknownFields())) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      if (hasGcRssAndDma()) {
        hash = (37 * hash) + GC_RSS_AND_DMA_FIELD_NUMBER;
        hash = (53 * hash) + getGcRssAndDma().hashCode();
      }
      hash = (29 * hash) + getUnknownFields().hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static perfetto.protos.CameraMetric.AndroidCameraMetric parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static perfetto.protos.CameraMetric.AndroidCameraMetric parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static perfetto.protos.CameraMetric.AndroidCameraMetric parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static perfetto.protos.CameraMetric.AndroidCameraMetric parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static perfetto.protos.CameraMetric.AndroidCameraMetric parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static perfetto.protos.CameraMetric.AndroidCameraMetric parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static perfetto.protos.CameraMetric.AndroidCameraMetric parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static perfetto.protos.CameraMetric.AndroidCameraMetric parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static perfetto.protos.CameraMetric.AndroidCameraMetric parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static perfetto.protos.CameraMetric.AndroidCameraMetric parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static perfetto.protos.CameraMetric.AndroidCameraMetric parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static perfetto.protos.CameraMetric.AndroidCameraMetric parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(perfetto.protos.CameraMetric.AndroidCameraMetric prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code perfetto.protos.AndroidCameraMetric}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:perfetto.protos.AndroidCameraMetric)
        perfetto.protos.CameraMetric.AndroidCameraMetricOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return perfetto.protos.CameraMetric.internal_static_perfetto_protos_AndroidCameraMetric_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return perfetto.protos.CameraMetric.internal_static_perfetto_protos_AndroidCameraMetric_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                perfetto.protos.CameraMetric.AndroidCameraMetric.class, perfetto.protos.CameraMetric.AndroidCameraMetric.Builder.class);
      }

      // Construct using perfetto.protos.CameraMetric.AndroidCameraMetric.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
          getGcRssAndDmaFieldBuilder();
        }
      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        bitField0_ = 0;
        gcRssAndDma_ = null;
        if (gcRssAndDmaBuilder_ != null) {
          gcRssAndDmaBuilder_.dispose();
          gcRssAndDmaBuilder_ = null;
        }
        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return perfetto.protos.CameraMetric.internal_static_perfetto_protos_AndroidCameraMetric_descriptor;
      }

      @java.lang.Override
      public perfetto.protos.CameraMetric.AndroidCameraMetric getDefaultInstanceForType() {
        return perfetto.protos.CameraMetric.AndroidCameraMetric.getDefaultInstance();
      }

      @java.lang.Override
      public perfetto.protos.CameraMetric.AndroidCameraMetric build() {
        perfetto.protos.CameraMetric.AndroidCameraMetric result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public perfetto.protos.CameraMetric.AndroidCameraMetric buildPartial() {
        perfetto.protos.CameraMetric.AndroidCameraMetric result = new perfetto.protos.CameraMetric.AndroidCameraMetric(this);
        if (bitField0_ != 0) { buildPartial0(result); }
        onBuilt();
        return result;
      }

      private void buildPartial0(perfetto.protos.CameraMetric.AndroidCameraMetric result) {
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) != 0)) {
          result.gcRssAndDma_ = gcRssAndDmaBuilder_ == null
              ? gcRssAndDma_
              : gcRssAndDmaBuilder_.build();
          to_bitField0_ |= 0x00000001;
        }
        result.bitField0_ |= to_bitField0_;
      }

      @java.lang.Override
      public Builder clone() {
        return super.clone();
      }
      @java.lang.Override
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.setField(field, value);
      }
      @java.lang.Override
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return super.clearField(field);
      }
      @java.lang.Override
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return super.clearOneof(oneof);
      }
      @java.lang.Override
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, java.lang.Object value) {
        return super.setRepeatedField(field, index, value);
      }
      @java.lang.Override
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.addRepeatedField(field, value);
      }
      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof perfetto.protos.CameraMetric.AndroidCameraMetric) {
          return mergeFrom((perfetto.protos.CameraMetric.AndroidCameraMetric)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(perfetto.protos.CameraMetric.AndroidCameraMetric other) {
        if (other == perfetto.protos.CameraMetric.AndroidCameraMetric.getDefaultInstance()) return this;
        if (other.hasGcRssAndDma()) {
          mergeGcRssAndDma(other.getGcRssAndDma());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        if (extensionRegistry == null) {
          throw new java.lang.NullPointerException();
        }
        try {
          boolean done = false;
          while (!done) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                done = true;
                break;
              case 10: {
                input.readMessage(
                    getGcRssAndDmaFieldBuilder().getBuilder(),
                    extensionRegistry);
                bitField0_ |= 0x00000001;
                break;
              } // case 10
              default: {
                if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                  done = true; // was an endgroup tag
                }
                break;
              } // default:
            } // switch (tag)
          } // while (!done)
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.unwrapIOException();
        } finally {
          onChanged();
        } // finally
        return this;
      }
      private int bitField0_;

      private perfetto.protos.CameraMetric.AndroidCameraMetric.Counter gcRssAndDma_;
      private com.google.protobuf.SingleFieldBuilderV3<
          perfetto.protos.CameraMetric.AndroidCameraMetric.Counter, perfetto.protos.CameraMetric.AndroidCameraMetric.Counter.Builder, perfetto.protos.CameraMetric.AndroidCameraMetric.CounterOrBuilder> gcRssAndDmaBuilder_;
      /**
       * <pre>
       * Counter for the sum of DMA and RSS across GCA, cameraserver
       * and HAL. This provides a single number for the memory
       * pressure using the camera is putting on the rest of the
       * system.
       * Note: this number assumes that all DMA pressure is coming
       * from the camera as this is usually a pretty good
       * approximation. Being more accurate here would increase the
       * complexity of the metric significantly.
       * Note: if there are multiple GCA/cameraserver/HAL processes
       * in the trace, this metric will simply take the latest
       * one in the trace and ignore the others.
       * </pre>
       *
       * <code>optional .perfetto.protos.AndroidCameraMetric.Counter gc_rss_and_dma = 1;</code>
       * @return Whether the gcRssAndDma field is set.
       */
      public boolean hasGcRssAndDma() {
        return ((bitField0_ & 0x00000001) != 0);
      }
      /**
       * <pre>
       * Counter for the sum of DMA and RSS across GCA, cameraserver
       * and HAL. This provides a single number for the memory
       * pressure using the camera is putting on the rest of the
       * system.
       * Note: this number assumes that all DMA pressure is coming
       * from the camera as this is usually a pretty good
       * approximation. Being more accurate here would increase the
       * complexity of the metric significantly.
       * Note: if there are multiple GCA/cameraserver/HAL processes
       * in the trace, this metric will simply take the latest
       * one in the trace and ignore the others.
       * </pre>
       *
       * <code>optional .perfetto.protos.AndroidCameraMetric.Counter gc_rss_and_dma = 1;</code>
       * @return The gcRssAndDma.
       */
      public perfetto.protos.CameraMetric.AndroidCameraMetric.Counter getGcRssAndDma() {
        if (gcRssAndDmaBuilder_ == null) {
          return gcRssAndDma_ == null ? perfetto.protos.CameraMetric.AndroidCameraMetric.Counter.getDefaultInstance() : gcRssAndDma_;
        } else {
          return gcRssAndDmaBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       * Counter for the sum of DMA and RSS across GCA, cameraserver
       * and HAL. This provides a single number for the memory
       * pressure using the camera is putting on the rest of the
       * system.
       * Note: this number assumes that all DMA pressure is coming
       * from the camera as this is usually a pretty good
       * approximation. Being more accurate here would increase the
       * complexity of the metric significantly.
       * Note: if there are multiple GCA/cameraserver/HAL processes
       * in the trace, this metric will simply take the latest
       * one in the trace and ignore the others.
       * </pre>
       *
       * <code>optional .perfetto.protos.AndroidCameraMetric.Counter gc_rss_and_dma = 1;</code>
       */
      public Builder setGcRssAndDma(perfetto.protos.CameraMetric.AndroidCameraMetric.Counter value) {
        if (gcRssAndDmaBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          gcRssAndDma_ = value;
        } else {
          gcRssAndDmaBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000001;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Counter for the sum of DMA and RSS across GCA, cameraserver
       * and HAL. This provides a single number for the memory
       * pressure using the camera is putting on the rest of the
       * system.
       * Note: this number assumes that all DMA pressure is coming
       * from the camera as this is usually a pretty good
       * approximation. Being more accurate here would increase the
       * complexity of the metric significantly.
       * Note: if there are multiple GCA/cameraserver/HAL processes
       * in the trace, this metric will simply take the latest
       * one in the trace and ignore the others.
       * </pre>
       *
       * <code>optional .perfetto.protos.AndroidCameraMetric.Counter gc_rss_and_dma = 1;</code>
       */
      public Builder setGcRssAndDma(
          perfetto.protos.CameraMetric.AndroidCameraMetric.Counter.Builder builderForValue) {
        if (gcRssAndDmaBuilder_ == null) {
          gcRssAndDma_ = builderForValue.build();
        } else {
          gcRssAndDmaBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000001;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Counter for the sum of DMA and RSS across GCA, cameraserver
       * and HAL. This provides a single number for the memory
       * pressure using the camera is putting on the rest of the
       * system.
       * Note: this number assumes that all DMA pressure is coming
       * from the camera as this is usually a pretty good
       * approximation. Being more accurate here would increase the
       * complexity of the metric significantly.
       * Note: if there are multiple GCA/cameraserver/HAL processes
       * in the trace, this metric will simply take the latest
       * one in the trace and ignore the others.
       * </pre>
       *
       * <code>optional .perfetto.protos.AndroidCameraMetric.Counter gc_rss_and_dma = 1;</code>
       */
      public Builder mergeGcRssAndDma(perfetto.protos.CameraMetric.AndroidCameraMetric.Counter value) {
        if (gcRssAndDmaBuilder_ == null) {
          if (((bitField0_ & 0x00000001) != 0) &&
            gcRssAndDma_ != null &&
            gcRssAndDma_ != perfetto.protos.CameraMetric.AndroidCameraMetric.Counter.getDefaultInstance()) {
            getGcRssAndDmaBuilder().mergeFrom(value);
          } else {
            gcRssAndDma_ = value;
          }
        } else {
          gcRssAndDmaBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00000001;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Counter for the sum of DMA and RSS across GCA, cameraserver
       * and HAL. This provides a single number for the memory
       * pressure using the camera is putting on the rest of the
       * system.
       * Note: this number assumes that all DMA pressure is coming
       * from the camera as this is usually a pretty good
       * approximation. Being more accurate here would increase the
       * complexity of the metric significantly.
       * Note: if there are multiple GCA/cameraserver/HAL processes
       * in the trace, this metric will simply take the latest
       * one in the trace and ignore the others.
       * </pre>
       *
       * <code>optional .perfetto.protos.AndroidCameraMetric.Counter gc_rss_and_dma = 1;</code>
       */
      public Builder clearGcRssAndDma() {
        bitField0_ = (bitField0_ & ~0x00000001);
        gcRssAndDma_ = null;
        if (gcRssAndDmaBuilder_ != null) {
          gcRssAndDmaBuilder_.dispose();
          gcRssAndDmaBuilder_ = null;
        }
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Counter for the sum of DMA and RSS across GCA, cameraserver
       * and HAL. This provides a single number for the memory
       * pressure using the camera is putting on the rest of the
       * system.
       * Note: this number assumes that all DMA pressure is coming
       * from the camera as this is usually a pretty good
       * approximation. Being more accurate here would increase the
       * complexity of the metric significantly.
       * Note: if there are multiple GCA/cameraserver/HAL processes
       * in the trace, this metric will simply take the latest
       * one in the trace and ignore the others.
       * </pre>
       *
       * <code>optional .perfetto.protos.AndroidCameraMetric.Counter gc_rss_and_dma = 1;</code>
       */
      public perfetto.protos.CameraMetric.AndroidCameraMetric.Counter.Builder getGcRssAndDmaBuilder() {
        bitField0_ |= 0x00000001;
        onChanged();
        return getGcRssAndDmaFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       * Counter for the sum of DMA and RSS across GCA, cameraserver
       * and HAL. This provides a single number for the memory
       * pressure using the camera is putting on the rest of the
       * system.
       * Note: this number assumes that all DMA pressure is coming
       * from the camera as this is usually a pretty good
       * approximation. Being more accurate here would increase the
       * complexity of the metric significantly.
       * Note: if there are multiple GCA/cameraserver/HAL processes
       * in the trace, this metric will simply take the latest
       * one in the trace and ignore the others.
       * </pre>
       *
       * <code>optional .perfetto.protos.AndroidCameraMetric.Counter gc_rss_and_dma = 1;</code>
       */
      public perfetto.protos.CameraMetric.AndroidCameraMetric.CounterOrBuilder getGcRssAndDmaOrBuilder() {
        if (gcRssAndDmaBuilder_ != null) {
          return gcRssAndDmaBuilder_.getMessageOrBuilder();
        } else {
          return gcRssAndDma_ == null ?
              perfetto.protos.CameraMetric.AndroidCameraMetric.Counter.getDefaultInstance() : gcRssAndDma_;
        }
      }
      /**
       * <pre>
       * Counter for the sum of DMA and RSS across GCA, cameraserver
       * and HAL. This provides a single number for the memory
       * pressure using the camera is putting on the rest of the
       * system.
       * Note: this number assumes that all DMA pressure is coming
       * from the camera as this is usually a pretty good
       * approximation. Being more accurate here would increase the
       * complexity of the metric significantly.
       * Note: if there are multiple GCA/cameraserver/HAL processes
       * in the trace, this metric will simply take the latest
       * one in the trace and ignore the others.
       * </pre>
       *
       * <code>optional .perfetto.protos.AndroidCameraMetric.Counter gc_rss_and_dma = 1;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          perfetto.protos.CameraMetric.AndroidCameraMetric.Counter, perfetto.protos.CameraMetric.AndroidCameraMetric.Counter.Builder, perfetto.protos.CameraMetric.AndroidCameraMetric.CounterOrBuilder> 
          getGcRssAndDmaFieldBuilder() {
        if (gcRssAndDmaBuilder_ == null) {
          gcRssAndDmaBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              perfetto.protos.CameraMetric.AndroidCameraMetric.Counter, perfetto.protos.CameraMetric.AndroidCameraMetric.Counter.Builder, perfetto.protos.CameraMetric.AndroidCameraMetric.CounterOrBuilder>(
                  getGcRssAndDma(),
                  getParentForChildren(),
                  isClean());
          gcRssAndDma_ = null;
        }
        return gcRssAndDmaBuilder_;
      }
      @java.lang.Override
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      @java.lang.Override
      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:perfetto.protos.AndroidCameraMetric)
    }

    // @@protoc_insertion_point(class_scope:perfetto.protos.AndroidCameraMetric)
    private static final perfetto.protos.CameraMetric.AndroidCameraMetric DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new perfetto.protos.CameraMetric.AndroidCameraMetric();
    }

    public static perfetto.protos.CameraMetric.AndroidCameraMetric getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    @java.lang.Deprecated public static final com.google.protobuf.Parser<AndroidCameraMetric>
        PARSER = new com.google.protobuf.AbstractParser<AndroidCameraMetric>() {
      @java.lang.Override
      public AndroidCameraMetric parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        Builder builder = newBuilder();
        try {
          builder.mergeFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.setUnfinishedMessage(builder.buildPartial());
        } catch (com.google.protobuf.UninitializedMessageException e) {
          throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
        } catch (java.io.IOException e) {
          throw new com.google.protobuf.InvalidProtocolBufferException(e)
              .setUnfinishedMessage(builder.buildPartial());
        }
        return builder.buildPartial();
      }
    };

    public static com.google.protobuf.Parser<AndroidCameraMetric> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<AndroidCameraMetric> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public perfetto.protos.CameraMetric.AndroidCameraMetric getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_perfetto_protos_AndroidCameraMetric_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_perfetto_protos_AndroidCameraMetric_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_perfetto_protos_AndroidCameraMetric_Counter_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_perfetto_protos_AndroidCameraMetric_Counter_fieldAccessorTable;

  public static com.google.protobuf.Descriptors.FileDescriptor
      getDescriptor() {
    return descriptor;
  }
  private static  com.google.protobuf.Descriptors.FileDescriptor
      descriptor;
  static {
    java.lang.String[] descriptorData = {
      "\n3protos/perfetto/metrics/android/camera" +
      "_metric.proto\022\017perfetto.protos\"\215\001\n\023Andro" +
      "idCameraMetric\022D\n\016gc_rss_and_dma\030\001 \001(\0132," +
      ".perfetto.protos.AndroidCameraMetric.Cou" +
      "nter\0320\n\007Counter\022\013\n\003min\030\001 \001(\001\022\013\n\003max\030\002 \001(" +
      "\001\022\013\n\003avg\030\003 \001(\001"
    };
    descriptor = com.google.protobuf.Descriptors.FileDescriptor
      .internalBuildGeneratedFileFrom(descriptorData,
        new com.google.protobuf.Descriptors.FileDescriptor[] {
        });
    internal_static_perfetto_protos_AndroidCameraMetric_descriptor =
      getDescriptor().getMessageTypes().get(0);
    internal_static_perfetto_protos_AndroidCameraMetric_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_perfetto_protos_AndroidCameraMetric_descriptor,
        new java.lang.String[] { "GcRssAndDma", });
    internal_static_perfetto_protos_AndroidCameraMetric_Counter_descriptor =
      internal_static_perfetto_protos_AndroidCameraMetric_descriptor.getNestedTypes().get(0);
    internal_static_perfetto_protos_AndroidCameraMetric_Counter_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_perfetto_protos_AndroidCameraMetric_Counter_descriptor,
        new java.lang.String[] { "Min", "Max", "Avg", });
  }

  // @@protoc_insertion_point(outer_class_scope)
}
