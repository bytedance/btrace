// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: protos/perfetto/common/perf_events.proto

package perfetto.protos;

public final class PerfEventsOuterClass {
  private PerfEventsOuterClass() {}
  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistryLite registry) {
  }

  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistry registry) {
    registerAllExtensions(
        (com.google.protobuf.ExtensionRegistryLite) registry);
  }
  public interface PerfEventsOrBuilder extends
      // @@protoc_insertion_point(interface_extends:perfetto.protos.PerfEvents)
      com.google.protobuf.MessageOrBuilder {
  }
  /**
   * <pre>
   * Next id: 12
   * </pre>
   *
   * Protobuf type {@code perfetto.protos.PerfEvents}
   */
  public static final class PerfEvents extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:perfetto.protos.PerfEvents)
      PerfEventsOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use PerfEvents.newBuilder() to construct.
    private PerfEvents(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private PerfEvents() {
    }

    @java.lang.Override
    @SuppressWarnings({"unused"})
    protected java.lang.Object newInstance(
        UnusedPrivateParameter unused) {
      return new PerfEvents();
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return perfetto.protos.PerfEventsOuterClass.internal_static_perfetto_protos_PerfEvents_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return perfetto.protos.PerfEventsOuterClass.internal_static_perfetto_protos_PerfEvents_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              perfetto.protos.PerfEventsOuterClass.PerfEvents.class, perfetto.protos.PerfEventsOuterClass.PerfEvents.Builder.class);
    }

    /**
     * <pre>
     * Builtin counter names from the uapi header. Commented with their perf tool
     * aliases.
     * TODO(rsavitski): consider generating enums for cache events (should be
     * finite), and generally make this list as extensive as possible. Excluding
     * things like dynamic PMUs since those don't fit into a static enum.
     * Next id: 21
     * </pre>
     *
     * Protobuf enum {@code perfetto.protos.PerfEvents.Counter}
     */
    public enum Counter
        implements com.google.protobuf.ProtocolMessageEnum {
      /**
       * <code>UNKNOWN_COUNTER = 0;</code>
       */
      UNKNOWN_COUNTER(0),
      /**
       * <pre>
       * cpu-clock
       * </pre>
       *
       * <code>SW_CPU_CLOCK = 1;</code>
       */
      SW_CPU_CLOCK(1),
      /**
       * <pre>
       * page-faults, faults
       * </pre>
       *
       * <code>SW_PAGE_FAULTS = 2;</code>
       */
      SW_PAGE_FAULTS(2),
      /**
       * <pre>
       * task-clock
       * </pre>
       *
       * <code>SW_TASK_CLOCK = 3;</code>
       */
      SW_TASK_CLOCK(3),
      /**
       * <pre>
       * context-switches, cs
       * </pre>
       *
       * <code>SW_CONTEXT_SWITCHES = 4;</code>
       */
      SW_CONTEXT_SWITCHES(4),
      /**
       * <pre>
       * cpu-migrations, migrations
       * </pre>
       *
       * <code>SW_CPU_MIGRATIONS = 5;</code>
       */
      SW_CPU_MIGRATIONS(5),
      /**
       * <pre>
       * minor-faults
       * </pre>
       *
       * <code>SW_PAGE_FAULTS_MIN = 6;</code>
       */
      SW_PAGE_FAULTS_MIN(6),
      /**
       * <pre>
       * major-faults
       * </pre>
       *
       * <code>SW_PAGE_FAULTS_MAJ = 7;</code>
       */
      SW_PAGE_FAULTS_MAJ(7),
      /**
       * <pre>
       * alignment-faults
       * </pre>
       *
       * <code>SW_ALIGNMENT_FAULTS = 8;</code>
       */
      SW_ALIGNMENT_FAULTS(8),
      /**
       * <pre>
       * emulation-faults
       * </pre>
       *
       * <code>SW_EMULATION_FAULTS = 9;</code>
       */
      SW_EMULATION_FAULTS(9),
      /**
       * <pre>
       * dummy
       * </pre>
       *
       * <code>SW_DUMMY = 20;</code>
       */
      SW_DUMMY(20),
      /**
       * <pre>
       * cpu-cycles, cycles
       * </pre>
       *
       * <code>HW_CPU_CYCLES = 10;</code>
       */
      HW_CPU_CYCLES(10),
      /**
       * <pre>
       * instructions
       * </pre>
       *
       * <code>HW_INSTRUCTIONS = 11;</code>
       */
      HW_INSTRUCTIONS(11),
      /**
       * <pre>
       * cache-references
       * </pre>
       *
       * <code>HW_CACHE_REFERENCES = 12;</code>
       */
      HW_CACHE_REFERENCES(12),
      /**
       * <pre>
       * cache-misses
       * </pre>
       *
       * <code>HW_CACHE_MISSES = 13;</code>
       */
      HW_CACHE_MISSES(13),
      /**
       * <pre>
       * branch-instructions, branches
       * </pre>
       *
       * <code>HW_BRANCH_INSTRUCTIONS = 14;</code>
       */
      HW_BRANCH_INSTRUCTIONS(14),
      /**
       * <pre>
       * branch-misses
       * </pre>
       *
       * <code>HW_BRANCH_MISSES = 15;</code>
       */
      HW_BRANCH_MISSES(15),
      /**
       * <pre>
       * bus-cycles
       * </pre>
       *
       * <code>HW_BUS_CYCLES = 16;</code>
       */
      HW_BUS_CYCLES(16),
      /**
       * <pre>
       * stalled-cycles-frontend, idle-cycles-frontend
       * </pre>
       *
       * <code>HW_STALLED_CYCLES_FRONTEND = 17;</code>
       */
      HW_STALLED_CYCLES_FRONTEND(17),
      /**
       * <pre>
       * stalled-cycles-backend, idle-cycles-backend
       * </pre>
       *
       * <code>HW_STALLED_CYCLES_BACKEND = 18;</code>
       */
      HW_STALLED_CYCLES_BACKEND(18),
      /**
       * <pre>
       * ref-cycles
       * </pre>
       *
       * <code>HW_REF_CPU_CYCLES = 19;</code>
       */
      HW_REF_CPU_CYCLES(19),
      ;

      /**
       * <code>UNKNOWN_COUNTER = 0;</code>
       */
      public static final int UNKNOWN_COUNTER_VALUE = 0;
      /**
       * <pre>
       * cpu-clock
       * </pre>
       *
       * <code>SW_CPU_CLOCK = 1;</code>
       */
      public static final int SW_CPU_CLOCK_VALUE = 1;
      /**
       * <pre>
       * page-faults, faults
       * </pre>
       *
       * <code>SW_PAGE_FAULTS = 2;</code>
       */
      public static final int SW_PAGE_FAULTS_VALUE = 2;
      /**
       * <pre>
       * task-clock
       * </pre>
       *
       * <code>SW_TASK_CLOCK = 3;</code>
       */
      public static final int SW_TASK_CLOCK_VALUE = 3;
      /**
       * <pre>
       * context-switches, cs
       * </pre>
       *
       * <code>SW_CONTEXT_SWITCHES = 4;</code>
       */
      public static final int SW_CONTEXT_SWITCHES_VALUE = 4;
      /**
       * <pre>
       * cpu-migrations, migrations
       * </pre>
       *
       * <code>SW_CPU_MIGRATIONS = 5;</code>
       */
      public static final int SW_CPU_MIGRATIONS_VALUE = 5;
      /**
       * <pre>
       * minor-faults
       * </pre>
       *
       * <code>SW_PAGE_FAULTS_MIN = 6;</code>
       */
      public static final int SW_PAGE_FAULTS_MIN_VALUE = 6;
      /**
       * <pre>
       * major-faults
       * </pre>
       *
       * <code>SW_PAGE_FAULTS_MAJ = 7;</code>
       */
      public static final int SW_PAGE_FAULTS_MAJ_VALUE = 7;
      /**
       * <pre>
       * alignment-faults
       * </pre>
       *
       * <code>SW_ALIGNMENT_FAULTS = 8;</code>
       */
      public static final int SW_ALIGNMENT_FAULTS_VALUE = 8;
      /**
       * <pre>
       * emulation-faults
       * </pre>
       *
       * <code>SW_EMULATION_FAULTS = 9;</code>
       */
      public static final int SW_EMULATION_FAULTS_VALUE = 9;
      /**
       * <pre>
       * dummy
       * </pre>
       *
       * <code>SW_DUMMY = 20;</code>
       */
      public static final int SW_DUMMY_VALUE = 20;
      /**
       * <pre>
       * cpu-cycles, cycles
       * </pre>
       *
       * <code>HW_CPU_CYCLES = 10;</code>
       */
      public static final int HW_CPU_CYCLES_VALUE = 10;
      /**
       * <pre>
       * instructions
       * </pre>
       *
       * <code>HW_INSTRUCTIONS = 11;</code>
       */
      public static final int HW_INSTRUCTIONS_VALUE = 11;
      /**
       * <pre>
       * cache-references
       * </pre>
       *
       * <code>HW_CACHE_REFERENCES = 12;</code>
       */
      public static final int HW_CACHE_REFERENCES_VALUE = 12;
      /**
       * <pre>
       * cache-misses
       * </pre>
       *
       * <code>HW_CACHE_MISSES = 13;</code>
       */
      public static final int HW_CACHE_MISSES_VALUE = 13;
      /**
       * <pre>
       * branch-instructions, branches
       * </pre>
       *
       * <code>HW_BRANCH_INSTRUCTIONS = 14;</code>
       */
      public static final int HW_BRANCH_INSTRUCTIONS_VALUE = 14;
      /**
       * <pre>
       * branch-misses
       * </pre>
       *
       * <code>HW_BRANCH_MISSES = 15;</code>
       */
      public static final int HW_BRANCH_MISSES_VALUE = 15;
      /**
       * <pre>
       * bus-cycles
       * </pre>
       *
       * <code>HW_BUS_CYCLES = 16;</code>
       */
      public static final int HW_BUS_CYCLES_VALUE = 16;
      /**
       * <pre>
       * stalled-cycles-frontend, idle-cycles-frontend
       * </pre>
       *
       * <code>HW_STALLED_CYCLES_FRONTEND = 17;</code>
       */
      public static final int HW_STALLED_CYCLES_FRONTEND_VALUE = 17;
      /**
       * <pre>
       * stalled-cycles-backend, idle-cycles-backend
       * </pre>
       *
       * <code>HW_STALLED_CYCLES_BACKEND = 18;</code>
       */
      public static final int HW_STALLED_CYCLES_BACKEND_VALUE = 18;
      /**
       * <pre>
       * ref-cycles
       * </pre>
       *
       * <code>HW_REF_CPU_CYCLES = 19;</code>
       */
      public static final int HW_REF_CPU_CYCLES_VALUE = 19;


      public final int getNumber() {
        return value;
      }

      /**
       * @param value The numeric wire value of the corresponding enum entry.
       * @return The enum associated with the given numeric wire value.
       * @deprecated Use {@link #forNumber(int)} instead.
       */
      @java.lang.Deprecated
      public static Counter valueOf(int value) {
        return forNumber(value);
      }

      /**
       * @param value The numeric wire value of the corresponding enum entry.
       * @return The enum associated with the given numeric wire value.
       */
      public static Counter forNumber(int value) {
        switch (value) {
          case 0: return UNKNOWN_COUNTER;
          case 1: return SW_CPU_CLOCK;
          case 2: return SW_PAGE_FAULTS;
          case 3: return SW_TASK_CLOCK;
          case 4: return SW_CONTEXT_SWITCHES;
          case 5: return SW_CPU_MIGRATIONS;
          case 6: return SW_PAGE_FAULTS_MIN;
          case 7: return SW_PAGE_FAULTS_MAJ;
          case 8: return SW_ALIGNMENT_FAULTS;
          case 9: return SW_EMULATION_FAULTS;
          case 20: return SW_DUMMY;
          case 10: return HW_CPU_CYCLES;
          case 11: return HW_INSTRUCTIONS;
          case 12: return HW_CACHE_REFERENCES;
          case 13: return HW_CACHE_MISSES;
          case 14: return HW_BRANCH_INSTRUCTIONS;
          case 15: return HW_BRANCH_MISSES;
          case 16: return HW_BUS_CYCLES;
          case 17: return HW_STALLED_CYCLES_FRONTEND;
          case 18: return HW_STALLED_CYCLES_BACKEND;
          case 19: return HW_REF_CPU_CYCLES;
          default: return null;
        }
      }

      public static com.google.protobuf.Internal.EnumLiteMap<Counter>
          internalGetValueMap() {
        return internalValueMap;
      }
      private static final com.google.protobuf.Internal.EnumLiteMap<
          Counter> internalValueMap =
            new com.google.protobuf.Internal.EnumLiteMap<Counter>() {
              public Counter findValueByNumber(int number) {
                return Counter.forNumber(number);
              }
            };

      public final com.google.protobuf.Descriptors.EnumValueDescriptor
          getValueDescriptor() {
        return getDescriptor().getValues().get(ordinal());
      }
      public final com.google.protobuf.Descriptors.EnumDescriptor
          getDescriptorForType() {
        return getDescriptor();
      }
      public static final com.google.protobuf.Descriptors.EnumDescriptor
          getDescriptor() {
        return perfetto.protos.PerfEventsOuterClass.PerfEvents.getDescriptor().getEnumTypes().get(0);
      }

      private static final Counter[] VALUES = values();

      public static Counter valueOf(
          com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
        if (desc.getType() != getDescriptor()) {
          throw new java.lang.IllegalArgumentException(
            "EnumValueDescriptor is not for this type.");
        }
        return VALUES[desc.getIndex()];
      }

      private final int value;

      private Counter(int value) {
        this.value = value;
      }

      // @@protoc_insertion_point(enum_scope:perfetto.protos.PerfEvents.Counter)
    }

    /**
     * <pre>
     * Subset of clocks that is supported by perf timestamping.
     * CLOCK_TAI is excluded since it's not expected to be used in practice, but
     * would require additions to the trace clock synchronisation logic.
     * </pre>
     *
     * Protobuf enum {@code perfetto.protos.PerfEvents.PerfClock}
     */
    public enum PerfClock
        implements com.google.protobuf.ProtocolMessageEnum {
      /**
       * <code>UNKNOWN_PERF_CLOCK = 0;</code>
       */
      UNKNOWN_PERF_CLOCK(0),
      /**
       * <code>PERF_CLOCK_REALTIME = 1;</code>
       */
      PERF_CLOCK_REALTIME(1),
      /**
       * <code>PERF_CLOCK_MONOTONIC = 2;</code>
       */
      PERF_CLOCK_MONOTONIC(2),
      /**
       * <code>PERF_CLOCK_MONOTONIC_RAW = 3;</code>
       */
      PERF_CLOCK_MONOTONIC_RAW(3),
      /**
       * <code>PERF_CLOCK_BOOTTIME = 4;</code>
       */
      PERF_CLOCK_BOOTTIME(4),
      ;

      /**
       * <code>UNKNOWN_PERF_CLOCK = 0;</code>
       */
      public static final int UNKNOWN_PERF_CLOCK_VALUE = 0;
      /**
       * <code>PERF_CLOCK_REALTIME = 1;</code>
       */
      public static final int PERF_CLOCK_REALTIME_VALUE = 1;
      /**
       * <code>PERF_CLOCK_MONOTONIC = 2;</code>
       */
      public static final int PERF_CLOCK_MONOTONIC_VALUE = 2;
      /**
       * <code>PERF_CLOCK_MONOTONIC_RAW = 3;</code>
       */
      public static final int PERF_CLOCK_MONOTONIC_RAW_VALUE = 3;
      /**
       * <code>PERF_CLOCK_BOOTTIME = 4;</code>
       */
      public static final int PERF_CLOCK_BOOTTIME_VALUE = 4;


      public final int getNumber() {
        return value;
      }

      /**
       * @param value The numeric wire value of the corresponding enum entry.
       * @return The enum associated with the given numeric wire value.
       * @deprecated Use {@link #forNumber(int)} instead.
       */
      @java.lang.Deprecated
      public static PerfClock valueOf(int value) {
        return forNumber(value);
      }

      /**
       * @param value The numeric wire value of the corresponding enum entry.
       * @return The enum associated with the given numeric wire value.
       */
      public static PerfClock forNumber(int value) {
        switch (value) {
          case 0: return UNKNOWN_PERF_CLOCK;
          case 1: return PERF_CLOCK_REALTIME;
          case 2: return PERF_CLOCK_MONOTONIC;
          case 3: return PERF_CLOCK_MONOTONIC_RAW;
          case 4: return PERF_CLOCK_BOOTTIME;
          default: return null;
        }
      }

      public static com.google.protobuf.Internal.EnumLiteMap<PerfClock>
          internalGetValueMap() {
        return internalValueMap;
      }
      private static final com.google.protobuf.Internal.EnumLiteMap<
          PerfClock> internalValueMap =
            new com.google.protobuf.Internal.EnumLiteMap<PerfClock>() {
              public PerfClock findValueByNumber(int number) {
                return PerfClock.forNumber(number);
              }
            };

      public final com.google.protobuf.Descriptors.EnumValueDescriptor
          getValueDescriptor() {
        return getDescriptor().getValues().get(ordinal());
      }
      public final com.google.protobuf.Descriptors.EnumDescriptor
          getDescriptorForType() {
        return getDescriptor();
      }
      public static final com.google.protobuf.Descriptors.EnumDescriptor
          getDescriptor() {
        return perfetto.protos.PerfEventsOuterClass.PerfEvents.getDescriptor().getEnumTypes().get(1);
      }

      private static final PerfClock[] VALUES = values();

      public static PerfClock valueOf(
          com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
        if (desc.getType() != getDescriptor()) {
          throw new java.lang.IllegalArgumentException(
            "EnumValueDescriptor is not for this type.");
        }
        return VALUES[desc.getIndex()];
      }

      private final int value;

      private PerfClock(int value) {
        this.value = value;
      }

      // @@protoc_insertion_point(enum_scope:perfetto.protos.PerfEvents.PerfClock)
    }

    public interface TimebaseOrBuilder extends
        // @@protoc_insertion_point(interface_extends:perfetto.protos.PerfEvents.Timebase)
        com.google.protobuf.MessageOrBuilder {

      /**
       * <pre>
       * Per-cpu sampling frequency in Hz, as requested from the kernel. Not the
       * same as 1/period.
       * Details: the actual sampling will still be based on a period, but the
       * kernel will dynamically adjust it based on the observed event rate, to
       * approximate this frequency. Works best with steady-rate events like
       * timers.
       * </pre>
       *
       * <code>uint64 frequency = 2;</code>
       * @return Whether the frequency field is set.
       */
      boolean hasFrequency();
      /**
       * <pre>
       * Per-cpu sampling frequency in Hz, as requested from the kernel. Not the
       * same as 1/period.
       * Details: the actual sampling will still be based on a period, but the
       * kernel will dynamically adjust it based on the observed event rate, to
       * approximate this frequency. Works best with steady-rate events like
       * timers.
       * </pre>
       *
       * <code>uint64 frequency = 2;</code>
       * @return The frequency.
       */
      long getFrequency();

      /**
       * <pre>
       * Per-cpu sampling will occur every |period| counts of |event|.
       * Prefer |frequency| by default, as it's easier to oversample with a
       * fixed period.
       * </pre>
       *
       * <code>uint64 period = 1;</code>
       * @return Whether the period field is set.
       */
      boolean hasPeriod();
      /**
       * <pre>
       * Per-cpu sampling will occur every |period| counts of |event|.
       * Prefer |frequency| by default, as it's easier to oversample with a
       * fixed period.
       * </pre>
       *
       * <code>uint64 period = 1;</code>
       * @return The period.
       */
      long getPeriod();

      /**
       * <code>.perfetto.protos.PerfEvents.Counter counter = 4;</code>
       * @return Whether the counter field is set.
       */
      boolean hasCounter();
      /**
       * <code>.perfetto.protos.PerfEvents.Counter counter = 4;</code>
       * @return The counter.
       */
      perfetto.protos.PerfEventsOuterClass.PerfEvents.Counter getCounter();

      /**
       * <code>.perfetto.protos.PerfEvents.Tracepoint tracepoint = 3;</code>
       * @return Whether the tracepoint field is set.
       */
      boolean hasTracepoint();
      /**
       * <code>.perfetto.protos.PerfEvents.Tracepoint tracepoint = 3;</code>
       * @return The tracepoint.
       */
      perfetto.protos.PerfEventsOuterClass.PerfEvents.Tracepoint getTracepoint();
      /**
       * <code>.perfetto.protos.PerfEvents.Tracepoint tracepoint = 3;</code>
       */
      perfetto.protos.PerfEventsOuterClass.PerfEvents.TracepointOrBuilder getTracepointOrBuilder();

      /**
       * <code>.perfetto.protos.PerfEvents.RawEvent raw_event = 5;</code>
       * @return Whether the rawEvent field is set.
       */
      boolean hasRawEvent();
      /**
       * <code>.perfetto.protos.PerfEvents.RawEvent raw_event = 5;</code>
       * @return The rawEvent.
       */
      perfetto.protos.PerfEventsOuterClass.PerfEvents.RawEvent getRawEvent();
      /**
       * <code>.perfetto.protos.PerfEvents.RawEvent raw_event = 5;</code>
       */
      perfetto.protos.PerfEventsOuterClass.PerfEvents.RawEventOrBuilder getRawEventOrBuilder();

      /**
       * <pre>
       * If set, samples will be timestamped with the given clock.
       * If unset, the clock is chosen by the implementation.
       * For software events, prefer PERF_CLOCK_BOOTTIME. However it cannot be
       * used for hardware events (due to interrupt safety), for which the
       * recommendation is to use one of the monotonic clocks.
       * </pre>
       *
       * <code>optional .perfetto.protos.PerfEvents.PerfClock timestamp_clock = 11;</code>
       * @return Whether the timestampClock field is set.
       */
      boolean hasTimestampClock();
      /**
       * <pre>
       * If set, samples will be timestamped with the given clock.
       * If unset, the clock is chosen by the implementation.
       * For software events, prefer PERF_CLOCK_BOOTTIME. However it cannot be
       * used for hardware events (due to interrupt safety), for which the
       * recommendation is to use one of the monotonic clocks.
       * </pre>
       *
       * <code>optional .perfetto.protos.PerfEvents.PerfClock timestamp_clock = 11;</code>
       * @return The timestampClock.
       */
      perfetto.protos.PerfEventsOuterClass.PerfEvents.PerfClock getTimestampClock();

      /**
       * <pre>
       * Optional arbitrary name for the event, to identify it in the parsed
       * trace. Does *not* affect the profiling itself. If unset, the trace
       * parser will choose a suitable name.
       * </pre>
       *
       * <code>optional string name = 10;</code>
       * @return Whether the name field is set.
       */
      boolean hasName();
      /**
       * <pre>
       * Optional arbitrary name for the event, to identify it in the parsed
       * trace. Does *not* affect the profiling itself. If unset, the trace
       * parser will choose a suitable name.
       * </pre>
       *
       * <code>optional string name = 10;</code>
       * @return The name.
       */
      java.lang.String getName();
      /**
       * <pre>
       * Optional arbitrary name for the event, to identify it in the parsed
       * trace. Does *not* affect the profiling itself. If unset, the trace
       * parser will choose a suitable name.
       * </pre>
       *
       * <code>optional string name = 10;</code>
       * @return The bytes for name.
       */
      com.google.protobuf.ByteString
          getNameBytes();

      public perfetto.protos.PerfEventsOuterClass.PerfEvents.Timebase.IntervalCase getIntervalCase();

      public perfetto.protos.PerfEventsOuterClass.PerfEvents.Timebase.EventCase getEventCase();
    }
    /**
     * <pre>
     * What event to sample on, and how often. Commented from the perspective of
     * its use in |PerfEventConfig|.
     * </pre>
     *
     * Protobuf type {@code perfetto.protos.PerfEvents.Timebase}
     */
    public static final class Timebase extends
        com.google.protobuf.GeneratedMessageV3 implements
        // @@protoc_insertion_point(message_implements:perfetto.protos.PerfEvents.Timebase)
        TimebaseOrBuilder {
    private static final long serialVersionUID = 0L;
      // Use Timebase.newBuilder() to construct.
      private Timebase(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
        super(builder);
      }
      private Timebase() {
        timestampClock_ = 0;
        name_ = "";
      }

      @java.lang.Override
      @SuppressWarnings({"unused"})
      protected java.lang.Object newInstance(
          UnusedPrivateParameter unused) {
        return new Timebase();
      }

      @java.lang.Override
      public final com.google.protobuf.UnknownFieldSet
      getUnknownFields() {
        return this.unknownFields;
      }
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return perfetto.protos.PerfEventsOuterClass.internal_static_perfetto_protos_PerfEvents_Timebase_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return perfetto.protos.PerfEventsOuterClass.internal_static_perfetto_protos_PerfEvents_Timebase_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                perfetto.protos.PerfEventsOuterClass.PerfEvents.Timebase.class, perfetto.protos.PerfEventsOuterClass.PerfEvents.Timebase.Builder.class);
      }

      private int bitField0_;
      private int intervalCase_ = 0;
      private java.lang.Object interval_;
      public enum IntervalCase
          implements com.google.protobuf.Internal.EnumLite,
              com.google.protobuf.AbstractMessage.InternalOneOfEnum {
        FREQUENCY(2),
        PERIOD(1),
        INTERVAL_NOT_SET(0);
        private final int value;
        private IntervalCase(int value) {
          this.value = value;
        }
        /**
         * @param value The number of the enum to look for.
         * @return The enum associated with the given number.
         * @deprecated Use {@link #forNumber(int)} instead.
         */
        @java.lang.Deprecated
        public static IntervalCase valueOf(int value) {
          return forNumber(value);
        }

        public static IntervalCase forNumber(int value) {
          switch (value) {
            case 2: return FREQUENCY;
            case 1: return PERIOD;
            case 0: return INTERVAL_NOT_SET;
            default: return null;
          }
        }
        public int getNumber() {
          return this.value;
        }
      };

      public IntervalCase
      getIntervalCase() {
        return IntervalCase.forNumber(
            intervalCase_);
      }

      private int eventCase_ = 0;
      private java.lang.Object event_;
      public enum EventCase
          implements com.google.protobuf.Internal.EnumLite,
              com.google.protobuf.AbstractMessage.InternalOneOfEnum {
        COUNTER(4),
        TRACEPOINT(3),
        RAW_EVENT(5),
        EVENT_NOT_SET(0);
        private final int value;
        private EventCase(int value) {
          this.value = value;
        }
        /**
         * @param value The number of the enum to look for.
         * @return The enum associated with the given number.
         * @deprecated Use {@link #forNumber(int)} instead.
         */
        @java.lang.Deprecated
        public static EventCase valueOf(int value) {
          return forNumber(value);
        }

        public static EventCase forNumber(int value) {
          switch (value) {
            case 4: return COUNTER;
            case 3: return TRACEPOINT;
            case 5: return RAW_EVENT;
            case 0: return EVENT_NOT_SET;
            default: return null;
          }
        }
        public int getNumber() {
          return this.value;
        }
      };

      public EventCase
      getEventCase() {
        return EventCase.forNumber(
            eventCase_);
      }

      public static final int FREQUENCY_FIELD_NUMBER = 2;
      /**
       * <pre>
       * Per-cpu sampling frequency in Hz, as requested from the kernel. Not the
       * same as 1/period.
       * Details: the actual sampling will still be based on a period, but the
       * kernel will dynamically adjust it based on the observed event rate, to
       * approximate this frequency. Works best with steady-rate events like
       * timers.
       * </pre>
       *
       * <code>uint64 frequency = 2;</code>
       * @return Whether the frequency field is set.
       */
      @java.lang.Override
      public boolean hasFrequency() {
        return intervalCase_ == 2;
      }
      /**
       * <pre>
       * Per-cpu sampling frequency in Hz, as requested from the kernel. Not the
       * same as 1/period.
       * Details: the actual sampling will still be based on a period, but the
       * kernel will dynamically adjust it based on the observed event rate, to
       * approximate this frequency. Works best with steady-rate events like
       * timers.
       * </pre>
       *
       * <code>uint64 frequency = 2;</code>
       * @return The frequency.
       */
      @java.lang.Override
      public long getFrequency() {
        if (intervalCase_ == 2) {
          return (java.lang.Long) interval_;
        }
        return 0L;
      }

      public static final int PERIOD_FIELD_NUMBER = 1;
      /**
       * <pre>
       * Per-cpu sampling will occur every |period| counts of |event|.
       * Prefer |frequency| by default, as it's easier to oversample with a
       * fixed period.
       * </pre>
       *
       * <code>uint64 period = 1;</code>
       * @return Whether the period field is set.
       */
      @java.lang.Override
      public boolean hasPeriod() {
        return intervalCase_ == 1;
      }
      /**
       * <pre>
       * Per-cpu sampling will occur every |period| counts of |event|.
       * Prefer |frequency| by default, as it's easier to oversample with a
       * fixed period.
       * </pre>
       *
       * <code>uint64 period = 1;</code>
       * @return The period.
       */
      @java.lang.Override
      public long getPeriod() {
        if (intervalCase_ == 1) {
          return (java.lang.Long) interval_;
        }
        return 0L;
      }

      public static final int COUNTER_FIELD_NUMBER = 4;
      /**
       * <code>.perfetto.protos.PerfEvents.Counter counter = 4;</code>
       * @return Whether the counter field is set.
       */
      public boolean hasCounter() {
        return eventCase_ == 4;
      }
      /**
       * <code>.perfetto.protos.PerfEvents.Counter counter = 4;</code>
       * @return The counter.
       */
      public perfetto.protos.PerfEventsOuterClass.PerfEvents.Counter getCounter() {
        if (eventCase_ == 4) {
          perfetto.protos.PerfEventsOuterClass.PerfEvents.Counter result = perfetto.protos.PerfEventsOuterClass.PerfEvents.Counter.forNumber(
              (java.lang.Integer) event_);
          return result == null ? perfetto.protos.PerfEventsOuterClass.PerfEvents.Counter.UNKNOWN_COUNTER : result;
        }
        return perfetto.protos.PerfEventsOuterClass.PerfEvents.Counter.UNKNOWN_COUNTER;
      }

      public static final int TRACEPOINT_FIELD_NUMBER = 3;
      /**
       * <code>.perfetto.protos.PerfEvents.Tracepoint tracepoint = 3;</code>
       * @return Whether the tracepoint field is set.
       */
      @java.lang.Override
      public boolean hasTracepoint() {
        return eventCase_ == 3;
      }
      /**
       * <code>.perfetto.protos.PerfEvents.Tracepoint tracepoint = 3;</code>
       * @return The tracepoint.
       */
      @java.lang.Override
      public perfetto.protos.PerfEventsOuterClass.PerfEvents.Tracepoint getTracepoint() {
        if (eventCase_ == 3) {
           return (perfetto.protos.PerfEventsOuterClass.PerfEvents.Tracepoint) event_;
        }
        return perfetto.protos.PerfEventsOuterClass.PerfEvents.Tracepoint.getDefaultInstance();
      }
      /**
       * <code>.perfetto.protos.PerfEvents.Tracepoint tracepoint = 3;</code>
       */
      @java.lang.Override
      public perfetto.protos.PerfEventsOuterClass.PerfEvents.TracepointOrBuilder getTracepointOrBuilder() {
        if (eventCase_ == 3) {
           return (perfetto.protos.PerfEventsOuterClass.PerfEvents.Tracepoint) event_;
        }
        return perfetto.protos.PerfEventsOuterClass.PerfEvents.Tracepoint.getDefaultInstance();
      }

      public static final int RAW_EVENT_FIELD_NUMBER = 5;
      /**
       * <code>.perfetto.protos.PerfEvents.RawEvent raw_event = 5;</code>
       * @return Whether the rawEvent field is set.
       */
      @java.lang.Override
      public boolean hasRawEvent() {
        return eventCase_ == 5;
      }
      /**
       * <code>.perfetto.protos.PerfEvents.RawEvent raw_event = 5;</code>
       * @return The rawEvent.
       */
      @java.lang.Override
      public perfetto.protos.PerfEventsOuterClass.PerfEvents.RawEvent getRawEvent() {
        if (eventCase_ == 5) {
           return (perfetto.protos.PerfEventsOuterClass.PerfEvents.RawEvent) event_;
        }
        return perfetto.protos.PerfEventsOuterClass.PerfEvents.RawEvent.getDefaultInstance();
      }
      /**
       * <code>.perfetto.protos.PerfEvents.RawEvent raw_event = 5;</code>
       */
      @java.lang.Override
      public perfetto.protos.PerfEventsOuterClass.PerfEvents.RawEventOrBuilder getRawEventOrBuilder() {
        if (eventCase_ == 5) {
           return (perfetto.protos.PerfEventsOuterClass.PerfEvents.RawEvent) event_;
        }
        return perfetto.protos.PerfEventsOuterClass.PerfEvents.RawEvent.getDefaultInstance();
      }

      public static final int TIMESTAMP_CLOCK_FIELD_NUMBER = 11;
      private int timestampClock_ = 0;
      /**
       * <pre>
       * If set, samples will be timestamped with the given clock.
       * If unset, the clock is chosen by the implementation.
       * For software events, prefer PERF_CLOCK_BOOTTIME. However it cannot be
       * used for hardware events (due to interrupt safety), for which the
       * recommendation is to use one of the monotonic clocks.
       * </pre>
       *
       * <code>optional .perfetto.protos.PerfEvents.PerfClock timestamp_clock = 11;</code>
       * @return Whether the timestampClock field is set.
       */
      @java.lang.Override public boolean hasTimestampClock() {
        return ((bitField0_ & 0x00000020) != 0);
      }
      /**
       * <pre>
       * If set, samples will be timestamped with the given clock.
       * If unset, the clock is chosen by the implementation.
       * For software events, prefer PERF_CLOCK_BOOTTIME. However it cannot be
       * used for hardware events (due to interrupt safety), for which the
       * recommendation is to use one of the monotonic clocks.
       * </pre>
       *
       * <code>optional .perfetto.protos.PerfEvents.PerfClock timestamp_clock = 11;</code>
       * @return The timestampClock.
       */
      @java.lang.Override public perfetto.protos.PerfEventsOuterClass.PerfEvents.PerfClock getTimestampClock() {
        perfetto.protos.PerfEventsOuterClass.PerfEvents.PerfClock result = perfetto.protos.PerfEventsOuterClass.PerfEvents.PerfClock.forNumber(timestampClock_);
        return result == null ? perfetto.protos.PerfEventsOuterClass.PerfEvents.PerfClock.UNKNOWN_PERF_CLOCK : result;
      }

      public static final int NAME_FIELD_NUMBER = 10;
      @SuppressWarnings("serial")
      private volatile java.lang.Object name_ = "";
      /**
       * <pre>
       * Optional arbitrary name for the event, to identify it in the parsed
       * trace. Does *not* affect the profiling itself. If unset, the trace
       * parser will choose a suitable name.
       * </pre>
       *
       * <code>optional string name = 10;</code>
       * @return Whether the name field is set.
       */
      @java.lang.Override
      public boolean hasName() {
        return ((bitField0_ & 0x00000040) != 0);
      }
      /**
       * <pre>
       * Optional arbitrary name for the event, to identify it in the parsed
       * trace. Does *not* affect the profiling itself. If unset, the trace
       * parser will choose a suitable name.
       * </pre>
       *
       * <code>optional string name = 10;</code>
       * @return The name.
       */
      @java.lang.Override
      public java.lang.String getName() {
        java.lang.Object ref = name_;
        if (ref instanceof java.lang.String) {
          return (java.lang.String) ref;
        } else {
          com.google.protobuf.ByteString bs = 
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          if (bs.isValidUtf8()) {
            name_ = s;
          }
          return s;
        }
      }
      /**
       * <pre>
       * Optional arbitrary name for the event, to identify it in the parsed
       * trace. Does *not* affect the profiling itself. If unset, the trace
       * parser will choose a suitable name.
       * </pre>
       *
       * <code>optional string name = 10;</code>
       * @return The bytes for name.
       */
      @java.lang.Override
      public com.google.protobuf.ByteString
          getNameBytes() {
        java.lang.Object ref = name_;
        if (ref instanceof java.lang.String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          name_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }

      private byte memoizedIsInitialized = -1;
      @java.lang.Override
      public final boolean isInitialized() {
        byte isInitialized = memoizedIsInitialized;
        if (isInitialized == 1) return true;
        if (isInitialized == 0) return false;

        memoizedIsInitialized = 1;
        return true;
      }

      @java.lang.Override
      public void writeTo(com.google.protobuf.CodedOutputStream output)
                          throws java.io.IOException {
        if (intervalCase_ == 1) {
          output.writeUInt64(
              1, (long)((java.lang.Long) interval_));
        }
        if (intervalCase_ == 2) {
          output.writeUInt64(
              2, (long)((java.lang.Long) interval_));
        }
        if (eventCase_ == 3) {
          output.writeMessage(3, (perfetto.protos.PerfEventsOuterClass.PerfEvents.Tracepoint) event_);
        }
        if (eventCase_ == 4) {
          output.writeEnum(4, ((java.lang.Integer) event_));
        }
        if (eventCase_ == 5) {
          output.writeMessage(5, (perfetto.protos.PerfEventsOuterClass.PerfEvents.RawEvent) event_);
        }
        if (((bitField0_ & 0x00000040) != 0)) {
          com.google.protobuf.GeneratedMessageV3.writeString(output, 10, name_);
        }
        if (((bitField0_ & 0x00000020) != 0)) {
          output.writeEnum(11, timestampClock_);
        }
        getUnknownFields().writeTo(output);
      }

      @java.lang.Override
      public int getSerializedSize() {
        int size = memoizedSize;
        if (size != -1) return size;

        size = 0;
        if (intervalCase_ == 1) {
          size += com.google.protobuf.CodedOutputStream
            .computeUInt64Size(
                1, (long)((java.lang.Long) interval_));
        }
        if (intervalCase_ == 2) {
          size += com.google.protobuf.CodedOutputStream
            .computeUInt64Size(
                2, (long)((java.lang.Long) interval_));
        }
        if (eventCase_ == 3) {
          size += com.google.protobuf.CodedOutputStream
            .computeMessageSize(3, (perfetto.protos.PerfEventsOuterClass.PerfEvents.Tracepoint) event_);
        }
        if (eventCase_ == 4) {
          size += com.google.protobuf.CodedOutputStream
            .computeEnumSize(4, ((java.lang.Integer) event_));
        }
        if (eventCase_ == 5) {
          size += com.google.protobuf.CodedOutputStream
            .computeMessageSize(5, (perfetto.protos.PerfEventsOuterClass.PerfEvents.RawEvent) event_);
        }
        if (((bitField0_ & 0x00000040) != 0)) {
          size += com.google.protobuf.GeneratedMessageV3.computeStringSize(10, name_);
        }
        if (((bitField0_ & 0x00000020) != 0)) {
          size += com.google.protobuf.CodedOutputStream
            .computeEnumSize(11, timestampClock_);
        }
        size += getUnknownFields().getSerializedSize();
        memoizedSize = size;
        return size;
      }

      @java.lang.Override
      public boolean equals(final java.lang.Object obj) {
        if (obj == this) {
         return true;
        }
        if (!(obj instanceof perfetto.protos.PerfEventsOuterClass.PerfEvents.Timebase)) {
          return super.equals(obj);
        }
        perfetto.protos.PerfEventsOuterClass.PerfEvents.Timebase other = (perfetto.protos.PerfEventsOuterClass.PerfEvents.Timebase) obj;

        if (hasTimestampClock() != other.hasTimestampClock()) return false;
        if (hasTimestampClock()) {
          if (timestampClock_ != other.timestampClock_) return false;
        }
        if (hasName() != other.hasName()) return false;
        if (hasName()) {
          if (!getName()
              .equals(other.getName())) return false;
        }
        if (!getIntervalCase().equals(other.getIntervalCase())) return false;
        switch (intervalCase_) {
          case 2:
            if (getFrequency()
                != other.getFrequency()) return false;
            break;
          case 1:
            if (getPeriod()
                != other.getPeriod()) return false;
            break;
          case 0:
          default:
        }
        if (!getEventCase().equals(other.getEventCase())) return false;
        switch (eventCase_) {
          case 4:
            if (!getCounter()
                .equals(other.getCounter())) return false;
            break;
          case 3:
            if (!getTracepoint()
                .equals(other.getTracepoint())) return false;
            break;
          case 5:
            if (!getRawEvent()
                .equals(other.getRawEvent())) return false;
            break;
          case 0:
          default:
        }
        if (!getUnknownFields().equals(other.getUnknownFields())) return false;
        return true;
      }

      @java.lang.Override
      public int hashCode() {
        if (memoizedHashCode != 0) {
          return memoizedHashCode;
        }
        int hash = 41;
        hash = (19 * hash) + getDescriptor().hashCode();
        if (hasTimestampClock()) {
          hash = (37 * hash) + TIMESTAMP_CLOCK_FIELD_NUMBER;
          hash = (53 * hash) + timestampClock_;
        }
        if (hasName()) {
          hash = (37 * hash) + NAME_FIELD_NUMBER;
          hash = (53 * hash) + getName().hashCode();
        }
        switch (intervalCase_) {
          case 2:
            hash = (37 * hash) + FREQUENCY_FIELD_NUMBER;
            hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
                getFrequency());
            break;
          case 1:
            hash = (37 * hash) + PERIOD_FIELD_NUMBER;
            hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
                getPeriod());
            break;
          case 0:
          default:
        }
        switch (eventCase_) {
          case 4:
            hash = (37 * hash) + COUNTER_FIELD_NUMBER;
            hash = (53 * hash) + getCounter().getNumber();
            break;
          case 3:
            hash = (37 * hash) + TRACEPOINT_FIELD_NUMBER;
            hash = (53 * hash) + getTracepoint().hashCode();
            break;
          case 5:
            hash = (37 * hash) + RAW_EVENT_FIELD_NUMBER;
            hash = (53 * hash) + getRawEvent().hashCode();
            break;
          case 0:
          default:
        }
        hash = (29 * hash) + getUnknownFields().hashCode();
        memoizedHashCode = hash;
        return hash;
      }

      public static perfetto.protos.PerfEventsOuterClass.PerfEvents.Timebase parseFrom(
          java.nio.ByteBuffer data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static perfetto.protos.PerfEventsOuterClass.PerfEvents.Timebase parseFrom(
          java.nio.ByteBuffer data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static perfetto.protos.PerfEventsOuterClass.PerfEvents.Timebase parseFrom(
          com.google.protobuf.ByteString data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static perfetto.protos.PerfEventsOuterClass.PerfEvents.Timebase parseFrom(
          com.google.protobuf.ByteString data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static perfetto.protos.PerfEventsOuterClass.PerfEvents.Timebase parseFrom(byte[] data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static perfetto.protos.PerfEventsOuterClass.PerfEvents.Timebase parseFrom(
          byte[] data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static perfetto.protos.PerfEventsOuterClass.PerfEvents.Timebase parseFrom(java.io.InputStream input)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseWithIOException(PARSER, input);
      }
      public static perfetto.protos.PerfEventsOuterClass.PerfEvents.Timebase parseFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseWithIOException(PARSER, input, extensionRegistry);
      }
      public static perfetto.protos.PerfEventsOuterClass.PerfEvents.Timebase parseDelimitedFrom(java.io.InputStream input)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseDelimitedWithIOException(PARSER, input);
      }
      public static perfetto.protos.PerfEventsOuterClass.PerfEvents.Timebase parseDelimitedFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
      }
      public static perfetto.protos.PerfEventsOuterClass.PerfEvents.Timebase parseFrom(
          com.google.protobuf.CodedInputStream input)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseWithIOException(PARSER, input);
      }
      public static perfetto.protos.PerfEventsOuterClass.PerfEvents.Timebase parseFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseWithIOException(PARSER, input, extensionRegistry);
      }

      @java.lang.Override
      public Builder newBuilderForType() { return newBuilder(); }
      public static Builder newBuilder() {
        return DEFAULT_INSTANCE.toBuilder();
      }
      public static Builder newBuilder(perfetto.protos.PerfEventsOuterClass.PerfEvents.Timebase prototype) {
        return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
      }
      @java.lang.Override
      public Builder toBuilder() {
        return this == DEFAULT_INSTANCE
            ? new Builder() : new Builder().mergeFrom(this);
      }

      @java.lang.Override
      protected Builder newBuilderForType(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        Builder builder = new Builder(parent);
        return builder;
      }
      /**
       * <pre>
       * What event to sample on, and how often. Commented from the perspective of
       * its use in |PerfEventConfig|.
       * </pre>
       *
       * Protobuf type {@code perfetto.protos.PerfEvents.Timebase}
       */
      public static final class Builder extends
          com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
          // @@protoc_insertion_point(builder_implements:perfetto.protos.PerfEvents.Timebase)
          perfetto.protos.PerfEventsOuterClass.PerfEvents.TimebaseOrBuilder {
        public static final com.google.protobuf.Descriptors.Descriptor
            getDescriptor() {
          return perfetto.protos.PerfEventsOuterClass.internal_static_perfetto_protos_PerfEvents_Timebase_descriptor;
        }

        @java.lang.Override
        protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
            internalGetFieldAccessorTable() {
          return perfetto.protos.PerfEventsOuterClass.internal_static_perfetto_protos_PerfEvents_Timebase_fieldAccessorTable
              .ensureFieldAccessorsInitialized(
                  perfetto.protos.PerfEventsOuterClass.PerfEvents.Timebase.class, perfetto.protos.PerfEventsOuterClass.PerfEvents.Timebase.Builder.class);
        }

        // Construct using perfetto.protos.PerfEventsOuterClass.PerfEvents.Timebase.newBuilder()
        private Builder() {

        }

        private Builder(
            com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
          super(parent);

        }
        @java.lang.Override
        public Builder clear() {
          super.clear();
          bitField0_ = 0;
          if (tracepointBuilder_ != null) {
            tracepointBuilder_.clear();
          }
          if (rawEventBuilder_ != null) {
            rawEventBuilder_.clear();
          }
          timestampClock_ = 0;
          name_ = "";
          intervalCase_ = 0;
          interval_ = null;
          eventCase_ = 0;
          event_ = null;
          return this;
        }

        @java.lang.Override
        public com.google.protobuf.Descriptors.Descriptor
            getDescriptorForType() {
          return perfetto.protos.PerfEventsOuterClass.internal_static_perfetto_protos_PerfEvents_Timebase_descriptor;
        }

        @java.lang.Override
        public perfetto.protos.PerfEventsOuterClass.PerfEvents.Timebase getDefaultInstanceForType() {
          return perfetto.protos.PerfEventsOuterClass.PerfEvents.Timebase.getDefaultInstance();
        }

        @java.lang.Override
        public perfetto.protos.PerfEventsOuterClass.PerfEvents.Timebase build() {
          perfetto.protos.PerfEventsOuterClass.PerfEvents.Timebase result = buildPartial();
          if (!result.isInitialized()) {
            throw newUninitializedMessageException(result);
          }
          return result;
        }

        @java.lang.Override
        public perfetto.protos.PerfEventsOuterClass.PerfEvents.Timebase buildPartial() {
          perfetto.protos.PerfEventsOuterClass.PerfEvents.Timebase result = new perfetto.protos.PerfEventsOuterClass.PerfEvents.Timebase(this);
          if (bitField0_ != 0) { buildPartial0(result); }
          buildPartialOneofs(result);
          onBuilt();
          return result;
        }

        private void buildPartial0(perfetto.protos.PerfEventsOuterClass.PerfEvents.Timebase result) {
          int from_bitField0_ = bitField0_;
          int to_bitField0_ = 0;
          if (((from_bitField0_ & 0x00000020) != 0)) {
            result.timestampClock_ = timestampClock_;
            to_bitField0_ |= 0x00000020;
          }
          if (((from_bitField0_ & 0x00000040) != 0)) {
            result.name_ = name_;
            to_bitField0_ |= 0x00000040;
          }
          result.bitField0_ |= to_bitField0_;
        }

        private void buildPartialOneofs(perfetto.protos.PerfEventsOuterClass.PerfEvents.Timebase result) {
          result.intervalCase_ = intervalCase_;
          result.interval_ = this.interval_;
          result.eventCase_ = eventCase_;
          result.event_ = this.event_;
          if (eventCase_ == 3 &&
              tracepointBuilder_ != null) {
            result.event_ = tracepointBuilder_.build();
          }
          if (eventCase_ == 5 &&
              rawEventBuilder_ != null) {
            result.event_ = rawEventBuilder_.build();
          }
        }

        @java.lang.Override
        public Builder clone() {
          return super.clone();
        }
        @java.lang.Override
        public Builder setField(
            com.google.protobuf.Descriptors.FieldDescriptor field,
            java.lang.Object value) {
          return super.setField(field, value);
        }
        @java.lang.Override
        public Builder clearField(
            com.google.protobuf.Descriptors.FieldDescriptor field) {
          return super.clearField(field);
        }
        @java.lang.Override
        public Builder clearOneof(
            com.google.protobuf.Descriptors.OneofDescriptor oneof) {
          return super.clearOneof(oneof);
        }
        @java.lang.Override
        public Builder setRepeatedField(
            com.google.protobuf.Descriptors.FieldDescriptor field,
            int index, java.lang.Object value) {
          return super.setRepeatedField(field, index, value);
        }
        @java.lang.Override
        public Builder addRepeatedField(
            com.google.protobuf.Descriptors.FieldDescriptor field,
            java.lang.Object value) {
          return super.addRepeatedField(field, value);
        }
        @java.lang.Override
        public Builder mergeFrom(com.google.protobuf.Message other) {
          if (other instanceof perfetto.protos.PerfEventsOuterClass.PerfEvents.Timebase) {
            return mergeFrom((perfetto.protos.PerfEventsOuterClass.PerfEvents.Timebase)other);
          } else {
            super.mergeFrom(other);
            return this;
          }
        }

        public Builder mergeFrom(perfetto.protos.PerfEventsOuterClass.PerfEvents.Timebase other) {
          if (other == perfetto.protos.PerfEventsOuterClass.PerfEvents.Timebase.getDefaultInstance()) return this;
          if (other.hasTimestampClock()) {
            setTimestampClock(other.getTimestampClock());
          }
          if (other.hasName()) {
            name_ = other.name_;
            bitField0_ |= 0x00000040;
            onChanged();
          }
          switch (other.getIntervalCase()) {
            case FREQUENCY: {
              setFrequency(other.getFrequency());
              break;
            }
            case PERIOD: {
              setPeriod(other.getPeriod());
              break;
            }
            case INTERVAL_NOT_SET: {
              break;
            }
          }
          switch (other.getEventCase()) {
            case COUNTER: {
              setCounter(other.getCounter());
              break;
            }
            case TRACEPOINT: {
              mergeTracepoint(other.getTracepoint());
              break;
            }
            case RAW_EVENT: {
              mergeRawEvent(other.getRawEvent());
              break;
            }
            case EVENT_NOT_SET: {
              break;
            }
          }
          this.mergeUnknownFields(other.getUnknownFields());
          onChanged();
          return this;
        }

        @java.lang.Override
        public final boolean isInitialized() {
          return true;
        }

        @java.lang.Override
        public Builder mergeFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws java.io.IOException {
          if (extensionRegistry == null) {
            throw new java.lang.NullPointerException();
          }
          try {
            boolean done = false;
            while (!done) {
              int tag = input.readTag();
              switch (tag) {
                case 0:
                  done = true;
                  break;
                case 8: {
                  interval_ = input.readUInt64();
                  intervalCase_ = 1;
                  break;
                } // case 8
                case 16: {
                  interval_ = input.readUInt64();
                  intervalCase_ = 2;
                  break;
                } // case 16
                case 26: {
                  input.readMessage(
                      getTracepointFieldBuilder().getBuilder(),
                      extensionRegistry);
                  eventCase_ = 3;
                  break;
                } // case 26
                case 32: {
                  int rawValue = input.readEnum();
                  perfetto.protos.PerfEventsOuterClass.PerfEvents.Counter value =
                      perfetto.protos.PerfEventsOuterClass.PerfEvents.Counter.forNumber(rawValue);
                  if (value == null) {
                    mergeUnknownVarintField(4, rawValue);
                  } else {
                    eventCase_ = 4;
                    event_ = rawValue;
                  }
                  break;
                } // case 32
                case 42: {
                  input.readMessage(
                      getRawEventFieldBuilder().getBuilder(),
                      extensionRegistry);
                  eventCase_ = 5;
                  break;
                } // case 42
                case 82: {
                  name_ = input.readBytes();
                  bitField0_ |= 0x00000040;
                  break;
                } // case 82
                case 88: {
                  int tmpRaw = input.readEnum();
                  perfetto.protos.PerfEventsOuterClass.PerfEvents.PerfClock tmpValue =
                      perfetto.protos.PerfEventsOuterClass.PerfEvents.PerfClock.forNumber(tmpRaw);
                  if (tmpValue == null) {
                    mergeUnknownVarintField(11, tmpRaw);
                  } else {
                    timestampClock_ = tmpRaw;
                    bitField0_ |= 0x00000020;
                  }
                  break;
                } // case 88
                default: {
                  if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                    done = true; // was an endgroup tag
                  }
                  break;
                } // default:
              } // switch (tag)
            } // while (!done)
          } catch (com.google.protobuf.InvalidProtocolBufferException e) {
            throw e.unwrapIOException();
          } finally {
            onChanged();
          } // finally
          return this;
        }
        private int intervalCase_ = 0;
        private java.lang.Object interval_;
        public IntervalCase
            getIntervalCase() {
          return IntervalCase.forNumber(
              intervalCase_);
        }

        public Builder clearInterval() {
          intervalCase_ = 0;
          interval_ = null;
          onChanged();
          return this;
        }

        private int eventCase_ = 0;
        private java.lang.Object event_;
        public EventCase
            getEventCase() {
          return EventCase.forNumber(
              eventCase_);
        }

        public Builder clearEvent() {
          eventCase_ = 0;
          event_ = null;
          onChanged();
          return this;
        }

        private int bitField0_;

        /**
         * <pre>
         * Per-cpu sampling frequency in Hz, as requested from the kernel. Not the
         * same as 1/period.
         * Details: the actual sampling will still be based on a period, but the
         * kernel will dynamically adjust it based on the observed event rate, to
         * approximate this frequency. Works best with steady-rate events like
         * timers.
         * </pre>
         *
         * <code>uint64 frequency = 2;</code>
         * @return Whether the frequency field is set.
         */
        public boolean hasFrequency() {
          return intervalCase_ == 2;
        }
        /**
         * <pre>
         * Per-cpu sampling frequency in Hz, as requested from the kernel. Not the
         * same as 1/period.
         * Details: the actual sampling will still be based on a period, but the
         * kernel will dynamically adjust it based on the observed event rate, to
         * approximate this frequency. Works best with steady-rate events like
         * timers.
         * </pre>
         *
         * <code>uint64 frequency = 2;</code>
         * @return The frequency.
         */
        public long getFrequency() {
          if (intervalCase_ == 2) {
            return (java.lang.Long) interval_;
          }
          return 0L;
        }
        /**
         * <pre>
         * Per-cpu sampling frequency in Hz, as requested from the kernel. Not the
         * same as 1/period.
         * Details: the actual sampling will still be based on a period, but the
         * kernel will dynamically adjust it based on the observed event rate, to
         * approximate this frequency. Works best with steady-rate events like
         * timers.
         * </pre>
         *
         * <code>uint64 frequency = 2;</code>
         * @param value The frequency to set.
         * @return This builder for chaining.
         */
        public Builder setFrequency(long value) {
          
          intervalCase_ = 2;
          interval_ = value;
          onChanged();
          return this;
        }
        /**
         * <pre>
         * Per-cpu sampling frequency in Hz, as requested from the kernel. Not the
         * same as 1/period.
         * Details: the actual sampling will still be based on a period, but the
         * kernel will dynamically adjust it based on the observed event rate, to
         * approximate this frequency. Works best with steady-rate events like
         * timers.
         * </pre>
         *
         * <code>uint64 frequency = 2;</code>
         * @return This builder for chaining.
         */
        public Builder clearFrequency() {
          if (intervalCase_ == 2) {
            intervalCase_ = 0;
            interval_ = null;
            onChanged();
          }
          return this;
        }

        /**
         * <pre>
         * Per-cpu sampling will occur every |period| counts of |event|.
         * Prefer |frequency| by default, as it's easier to oversample with a
         * fixed period.
         * </pre>
         *
         * <code>uint64 period = 1;</code>
         * @return Whether the period field is set.
         */
        public boolean hasPeriod() {
          return intervalCase_ == 1;
        }
        /**
         * <pre>
         * Per-cpu sampling will occur every |period| counts of |event|.
         * Prefer |frequency| by default, as it's easier to oversample with a
         * fixed period.
         * </pre>
         *
         * <code>uint64 period = 1;</code>
         * @return The period.
         */
        public long getPeriod() {
          if (intervalCase_ == 1) {
            return (java.lang.Long) interval_;
          }
          return 0L;
        }
        /**
         * <pre>
         * Per-cpu sampling will occur every |period| counts of |event|.
         * Prefer |frequency| by default, as it's easier to oversample with a
         * fixed period.
         * </pre>
         *
         * <code>uint64 period = 1;</code>
         * @param value The period to set.
         * @return This builder for chaining.
         */
        public Builder setPeriod(long value) {
          
          intervalCase_ = 1;
          interval_ = value;
          onChanged();
          return this;
        }
        /**
         * <pre>
         * Per-cpu sampling will occur every |period| counts of |event|.
         * Prefer |frequency| by default, as it's easier to oversample with a
         * fixed period.
         * </pre>
         *
         * <code>uint64 period = 1;</code>
         * @return This builder for chaining.
         */
        public Builder clearPeriod() {
          if (intervalCase_ == 1) {
            intervalCase_ = 0;
            interval_ = null;
            onChanged();
          }
          return this;
        }

        /**
         * <code>.perfetto.protos.PerfEvents.Counter counter = 4;</code>
         * @return Whether the counter field is set.
         */
        @java.lang.Override
        public boolean hasCounter() {
          return eventCase_ == 4;
        }
        /**
         * <code>.perfetto.protos.PerfEvents.Counter counter = 4;</code>
         * @return The counter.
         */
        @java.lang.Override
        public perfetto.protos.PerfEventsOuterClass.PerfEvents.Counter getCounter() {
          if (eventCase_ == 4) {
            perfetto.protos.PerfEventsOuterClass.PerfEvents.Counter result = perfetto.protos.PerfEventsOuterClass.PerfEvents.Counter.forNumber(
                (java.lang.Integer) event_);
            return result == null ? perfetto.protos.PerfEventsOuterClass.PerfEvents.Counter.UNKNOWN_COUNTER : result;
          }
          return perfetto.protos.PerfEventsOuterClass.PerfEvents.Counter.UNKNOWN_COUNTER;
        }
        /**
         * <code>.perfetto.protos.PerfEvents.Counter counter = 4;</code>
         * @param value The counter to set.
         * @return This builder for chaining.
         */
        public Builder setCounter(perfetto.protos.PerfEventsOuterClass.PerfEvents.Counter value) {
          if (value == null) {
            throw new NullPointerException();
          }
          eventCase_ = 4;
          event_ = value.getNumber();
          onChanged();
          return this;
        }
        /**
         * <code>.perfetto.protos.PerfEvents.Counter counter = 4;</code>
         * @return This builder for chaining.
         */
        public Builder clearCounter() {
          if (eventCase_ == 4) {
            eventCase_ = 0;
            event_ = null;
            onChanged();
          }
          return this;
        }

        private com.google.protobuf.SingleFieldBuilderV3<
            perfetto.protos.PerfEventsOuterClass.PerfEvents.Tracepoint, perfetto.protos.PerfEventsOuterClass.PerfEvents.Tracepoint.Builder, perfetto.protos.PerfEventsOuterClass.PerfEvents.TracepointOrBuilder> tracepointBuilder_;
        /**
         * <code>.perfetto.protos.PerfEvents.Tracepoint tracepoint = 3;</code>
         * @return Whether the tracepoint field is set.
         */
        @java.lang.Override
        public boolean hasTracepoint() {
          return eventCase_ == 3;
        }
        /**
         * <code>.perfetto.protos.PerfEvents.Tracepoint tracepoint = 3;</code>
         * @return The tracepoint.
         */
        @java.lang.Override
        public perfetto.protos.PerfEventsOuterClass.PerfEvents.Tracepoint getTracepoint() {
          if (tracepointBuilder_ == null) {
            if (eventCase_ == 3) {
              return (perfetto.protos.PerfEventsOuterClass.PerfEvents.Tracepoint) event_;
            }
            return perfetto.protos.PerfEventsOuterClass.PerfEvents.Tracepoint.getDefaultInstance();
          } else {
            if (eventCase_ == 3) {
              return tracepointBuilder_.getMessage();
            }
            return perfetto.protos.PerfEventsOuterClass.PerfEvents.Tracepoint.getDefaultInstance();
          }
        }
        /**
         * <code>.perfetto.protos.PerfEvents.Tracepoint tracepoint = 3;</code>
         */
        public Builder setTracepoint(perfetto.protos.PerfEventsOuterClass.PerfEvents.Tracepoint value) {
          if (tracepointBuilder_ == null) {
            if (value == null) {
              throw new NullPointerException();
            }
            event_ = value;
            onChanged();
          } else {
            tracepointBuilder_.setMessage(value);
          }
          eventCase_ = 3;
          return this;
        }
        /**
         * <code>.perfetto.protos.PerfEvents.Tracepoint tracepoint = 3;</code>
         */
        public Builder setTracepoint(
            perfetto.protos.PerfEventsOuterClass.PerfEvents.Tracepoint.Builder builderForValue) {
          if (tracepointBuilder_ == null) {
            event_ = builderForValue.build();
            onChanged();
          } else {
            tracepointBuilder_.setMessage(builderForValue.build());
          }
          eventCase_ = 3;
          return this;
        }
        /**
         * <code>.perfetto.protos.PerfEvents.Tracepoint tracepoint = 3;</code>
         */
        public Builder mergeTracepoint(perfetto.protos.PerfEventsOuterClass.PerfEvents.Tracepoint value) {
          if (tracepointBuilder_ == null) {
            if (eventCase_ == 3 &&
                event_ != perfetto.protos.PerfEventsOuterClass.PerfEvents.Tracepoint.getDefaultInstance()) {
              event_ = perfetto.protos.PerfEventsOuterClass.PerfEvents.Tracepoint.newBuilder((perfetto.protos.PerfEventsOuterClass.PerfEvents.Tracepoint) event_)
                  .mergeFrom(value).buildPartial();
            } else {
              event_ = value;
            }
            onChanged();
          } else {
            if (eventCase_ == 3) {
              tracepointBuilder_.mergeFrom(value);
            } else {
              tracepointBuilder_.setMessage(value);
            }
          }
          eventCase_ = 3;
          return this;
        }
        /**
         * <code>.perfetto.protos.PerfEvents.Tracepoint tracepoint = 3;</code>
         */
        public Builder clearTracepoint() {
          if (tracepointBuilder_ == null) {
            if (eventCase_ == 3) {
              eventCase_ = 0;
              event_ = null;
              onChanged();
            }
          } else {
            if (eventCase_ == 3) {
              eventCase_ = 0;
              event_ = null;
            }
            tracepointBuilder_.clear();
          }
          return this;
        }
        /**
         * <code>.perfetto.protos.PerfEvents.Tracepoint tracepoint = 3;</code>
         */
        public perfetto.protos.PerfEventsOuterClass.PerfEvents.Tracepoint.Builder getTracepointBuilder() {
          return getTracepointFieldBuilder().getBuilder();
        }
        /**
         * <code>.perfetto.protos.PerfEvents.Tracepoint tracepoint = 3;</code>
         */
        @java.lang.Override
        public perfetto.protos.PerfEventsOuterClass.PerfEvents.TracepointOrBuilder getTracepointOrBuilder() {
          if ((eventCase_ == 3) && (tracepointBuilder_ != null)) {
            return tracepointBuilder_.getMessageOrBuilder();
          } else {
            if (eventCase_ == 3) {
              return (perfetto.protos.PerfEventsOuterClass.PerfEvents.Tracepoint) event_;
            }
            return perfetto.protos.PerfEventsOuterClass.PerfEvents.Tracepoint.getDefaultInstance();
          }
        }
        /**
         * <code>.perfetto.protos.PerfEvents.Tracepoint tracepoint = 3;</code>
         */
        private com.google.protobuf.SingleFieldBuilderV3<
            perfetto.protos.PerfEventsOuterClass.PerfEvents.Tracepoint, perfetto.protos.PerfEventsOuterClass.PerfEvents.Tracepoint.Builder, perfetto.protos.PerfEventsOuterClass.PerfEvents.TracepointOrBuilder> 
            getTracepointFieldBuilder() {
          if (tracepointBuilder_ == null) {
            if (!(eventCase_ == 3)) {
              event_ = perfetto.protos.PerfEventsOuterClass.PerfEvents.Tracepoint.getDefaultInstance();
            }
            tracepointBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
                perfetto.protos.PerfEventsOuterClass.PerfEvents.Tracepoint, perfetto.protos.PerfEventsOuterClass.PerfEvents.Tracepoint.Builder, perfetto.protos.PerfEventsOuterClass.PerfEvents.TracepointOrBuilder>(
                    (perfetto.protos.PerfEventsOuterClass.PerfEvents.Tracepoint) event_,
                    getParentForChildren(),
                    isClean());
            event_ = null;
          }
          eventCase_ = 3;
          onChanged();
          return tracepointBuilder_;
        }

        private com.google.protobuf.SingleFieldBuilderV3<
            perfetto.protos.PerfEventsOuterClass.PerfEvents.RawEvent, perfetto.protos.PerfEventsOuterClass.PerfEvents.RawEvent.Builder, perfetto.protos.PerfEventsOuterClass.PerfEvents.RawEventOrBuilder> rawEventBuilder_;
        /**
         * <code>.perfetto.protos.PerfEvents.RawEvent raw_event = 5;</code>
         * @return Whether the rawEvent field is set.
         */
        @java.lang.Override
        public boolean hasRawEvent() {
          return eventCase_ == 5;
        }
        /**
         * <code>.perfetto.protos.PerfEvents.RawEvent raw_event = 5;</code>
         * @return The rawEvent.
         */
        @java.lang.Override
        public perfetto.protos.PerfEventsOuterClass.PerfEvents.RawEvent getRawEvent() {
          if (rawEventBuilder_ == null) {
            if (eventCase_ == 5) {
              return (perfetto.protos.PerfEventsOuterClass.PerfEvents.RawEvent) event_;
            }
            return perfetto.protos.PerfEventsOuterClass.PerfEvents.RawEvent.getDefaultInstance();
          } else {
            if (eventCase_ == 5) {
              return rawEventBuilder_.getMessage();
            }
            return perfetto.protos.PerfEventsOuterClass.PerfEvents.RawEvent.getDefaultInstance();
          }
        }
        /**
         * <code>.perfetto.protos.PerfEvents.RawEvent raw_event = 5;</code>
         */
        public Builder setRawEvent(perfetto.protos.PerfEventsOuterClass.PerfEvents.RawEvent value) {
          if (rawEventBuilder_ == null) {
            if (value == null) {
              throw new NullPointerException();
            }
            event_ = value;
            onChanged();
          } else {
            rawEventBuilder_.setMessage(value);
          }
          eventCase_ = 5;
          return this;
        }
        /**
         * <code>.perfetto.protos.PerfEvents.RawEvent raw_event = 5;</code>
         */
        public Builder setRawEvent(
            perfetto.protos.PerfEventsOuterClass.PerfEvents.RawEvent.Builder builderForValue) {
          if (rawEventBuilder_ == null) {
            event_ = builderForValue.build();
            onChanged();
          } else {
            rawEventBuilder_.setMessage(builderForValue.build());
          }
          eventCase_ = 5;
          return this;
        }
        /**
         * <code>.perfetto.protos.PerfEvents.RawEvent raw_event = 5;</code>
         */
        public Builder mergeRawEvent(perfetto.protos.PerfEventsOuterClass.PerfEvents.RawEvent value) {
          if (rawEventBuilder_ == null) {
            if (eventCase_ == 5 &&
                event_ != perfetto.protos.PerfEventsOuterClass.PerfEvents.RawEvent.getDefaultInstance()) {
              event_ = perfetto.protos.PerfEventsOuterClass.PerfEvents.RawEvent.newBuilder((perfetto.protos.PerfEventsOuterClass.PerfEvents.RawEvent) event_)
                  .mergeFrom(value).buildPartial();
            } else {
              event_ = value;
            }
            onChanged();
          } else {
            if (eventCase_ == 5) {
              rawEventBuilder_.mergeFrom(value);
            } else {
              rawEventBuilder_.setMessage(value);
            }
          }
          eventCase_ = 5;
          return this;
        }
        /**
         * <code>.perfetto.protos.PerfEvents.RawEvent raw_event = 5;</code>
         */
        public Builder clearRawEvent() {
          if (rawEventBuilder_ == null) {
            if (eventCase_ == 5) {
              eventCase_ = 0;
              event_ = null;
              onChanged();
            }
          } else {
            if (eventCase_ == 5) {
              eventCase_ = 0;
              event_ = null;
            }
            rawEventBuilder_.clear();
          }
          return this;
        }
        /**
         * <code>.perfetto.protos.PerfEvents.RawEvent raw_event = 5;</code>
         */
        public perfetto.protos.PerfEventsOuterClass.PerfEvents.RawEvent.Builder getRawEventBuilder() {
          return getRawEventFieldBuilder().getBuilder();
        }
        /**
         * <code>.perfetto.protos.PerfEvents.RawEvent raw_event = 5;</code>
         */
        @java.lang.Override
        public perfetto.protos.PerfEventsOuterClass.PerfEvents.RawEventOrBuilder getRawEventOrBuilder() {
          if ((eventCase_ == 5) && (rawEventBuilder_ != null)) {
            return rawEventBuilder_.getMessageOrBuilder();
          } else {
            if (eventCase_ == 5) {
              return (perfetto.protos.PerfEventsOuterClass.PerfEvents.RawEvent) event_;
            }
            return perfetto.protos.PerfEventsOuterClass.PerfEvents.RawEvent.getDefaultInstance();
          }
        }
        /**
         * <code>.perfetto.protos.PerfEvents.RawEvent raw_event = 5;</code>
         */
        private com.google.protobuf.SingleFieldBuilderV3<
            perfetto.protos.PerfEventsOuterClass.PerfEvents.RawEvent, perfetto.protos.PerfEventsOuterClass.PerfEvents.RawEvent.Builder, perfetto.protos.PerfEventsOuterClass.PerfEvents.RawEventOrBuilder> 
            getRawEventFieldBuilder() {
          if (rawEventBuilder_ == null) {
            if (!(eventCase_ == 5)) {
              event_ = perfetto.protos.PerfEventsOuterClass.PerfEvents.RawEvent.getDefaultInstance();
            }
            rawEventBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
                perfetto.protos.PerfEventsOuterClass.PerfEvents.RawEvent, perfetto.protos.PerfEventsOuterClass.PerfEvents.RawEvent.Builder, perfetto.protos.PerfEventsOuterClass.PerfEvents.RawEventOrBuilder>(
                    (perfetto.protos.PerfEventsOuterClass.PerfEvents.RawEvent) event_,
                    getParentForChildren(),
                    isClean());
            event_ = null;
          }
          eventCase_ = 5;
          onChanged();
          return rawEventBuilder_;
        }

        private int timestampClock_ = 0;
        /**
         * <pre>
         * If set, samples will be timestamped with the given clock.
         * If unset, the clock is chosen by the implementation.
         * For software events, prefer PERF_CLOCK_BOOTTIME. However it cannot be
         * used for hardware events (due to interrupt safety), for which the
         * recommendation is to use one of the monotonic clocks.
         * </pre>
         *
         * <code>optional .perfetto.protos.PerfEvents.PerfClock timestamp_clock = 11;</code>
         * @return Whether the timestampClock field is set.
         */
        @java.lang.Override public boolean hasTimestampClock() {
          return ((bitField0_ & 0x00000020) != 0);
        }
        /**
         * <pre>
         * If set, samples will be timestamped with the given clock.
         * If unset, the clock is chosen by the implementation.
         * For software events, prefer PERF_CLOCK_BOOTTIME. However it cannot be
         * used for hardware events (due to interrupt safety), for which the
         * recommendation is to use one of the monotonic clocks.
         * </pre>
         *
         * <code>optional .perfetto.protos.PerfEvents.PerfClock timestamp_clock = 11;</code>
         * @return The timestampClock.
         */
        @java.lang.Override
        public perfetto.protos.PerfEventsOuterClass.PerfEvents.PerfClock getTimestampClock() {
          perfetto.protos.PerfEventsOuterClass.PerfEvents.PerfClock result = perfetto.protos.PerfEventsOuterClass.PerfEvents.PerfClock.forNumber(timestampClock_);
          return result == null ? perfetto.protos.PerfEventsOuterClass.PerfEvents.PerfClock.UNKNOWN_PERF_CLOCK : result;
        }
        /**
         * <pre>
         * If set, samples will be timestamped with the given clock.
         * If unset, the clock is chosen by the implementation.
         * For software events, prefer PERF_CLOCK_BOOTTIME. However it cannot be
         * used for hardware events (due to interrupt safety), for which the
         * recommendation is to use one of the monotonic clocks.
         * </pre>
         *
         * <code>optional .perfetto.protos.PerfEvents.PerfClock timestamp_clock = 11;</code>
         * @param value The timestampClock to set.
         * @return This builder for chaining.
         */
        public Builder setTimestampClock(perfetto.protos.PerfEventsOuterClass.PerfEvents.PerfClock value) {
          if (value == null) {
            throw new NullPointerException();
          }
          bitField0_ |= 0x00000020;
          timestampClock_ = value.getNumber();
          onChanged();
          return this;
        }
        /**
         * <pre>
         * If set, samples will be timestamped with the given clock.
         * If unset, the clock is chosen by the implementation.
         * For software events, prefer PERF_CLOCK_BOOTTIME. However it cannot be
         * used for hardware events (due to interrupt safety), for which the
         * recommendation is to use one of the monotonic clocks.
         * </pre>
         *
         * <code>optional .perfetto.protos.PerfEvents.PerfClock timestamp_clock = 11;</code>
         * @return This builder for chaining.
         */
        public Builder clearTimestampClock() {
          bitField0_ = (bitField0_ & ~0x00000020);
          timestampClock_ = 0;
          onChanged();
          return this;
        }

        private java.lang.Object name_ = "";
        /**
         * <pre>
         * Optional arbitrary name for the event, to identify it in the parsed
         * trace. Does *not* affect the profiling itself. If unset, the trace
         * parser will choose a suitable name.
         * </pre>
         *
         * <code>optional string name = 10;</code>
         * @return Whether the name field is set.
         */
        public boolean hasName() {
          return ((bitField0_ & 0x00000040) != 0);
        }
        /**
         * <pre>
         * Optional arbitrary name for the event, to identify it in the parsed
         * trace. Does *not* affect the profiling itself. If unset, the trace
         * parser will choose a suitable name.
         * </pre>
         *
         * <code>optional string name = 10;</code>
         * @return The name.
         */
        public java.lang.String getName() {
          java.lang.Object ref = name_;
          if (!(ref instanceof java.lang.String)) {
            com.google.protobuf.ByteString bs =
                (com.google.protobuf.ByteString) ref;
            java.lang.String s = bs.toStringUtf8();
            if (bs.isValidUtf8()) {
              name_ = s;
            }
            return s;
          } else {
            return (java.lang.String) ref;
          }
        }
        /**
         * <pre>
         * Optional arbitrary name for the event, to identify it in the parsed
         * trace. Does *not* affect the profiling itself. If unset, the trace
         * parser will choose a suitable name.
         * </pre>
         *
         * <code>optional string name = 10;</code>
         * @return The bytes for name.
         */
        public com.google.protobuf.ByteString
            getNameBytes() {
          java.lang.Object ref = name_;
          if (ref instanceof String) {
            com.google.protobuf.ByteString b = 
                com.google.protobuf.ByteString.copyFromUtf8(
                    (java.lang.String) ref);
            name_ = b;
            return b;
          } else {
            return (com.google.protobuf.ByteString) ref;
          }
        }
        /**
         * <pre>
         * Optional arbitrary name for the event, to identify it in the parsed
         * trace. Does *not* affect the profiling itself. If unset, the trace
         * parser will choose a suitable name.
         * </pre>
         *
         * <code>optional string name = 10;</code>
         * @param value The name to set.
         * @return This builder for chaining.
         */
        public Builder setName(
            java.lang.String value) {
          if (value == null) { throw new NullPointerException(); }
          name_ = value;
          bitField0_ |= 0x00000040;
          onChanged();
          return this;
        }
        /**
         * <pre>
         * Optional arbitrary name for the event, to identify it in the parsed
         * trace. Does *not* affect the profiling itself. If unset, the trace
         * parser will choose a suitable name.
         * </pre>
         *
         * <code>optional string name = 10;</code>
         * @return This builder for chaining.
         */
        public Builder clearName() {
          name_ = getDefaultInstance().getName();
          bitField0_ = (bitField0_ & ~0x00000040);
          onChanged();
          return this;
        }
        /**
         * <pre>
         * Optional arbitrary name for the event, to identify it in the parsed
         * trace. Does *not* affect the profiling itself. If unset, the trace
         * parser will choose a suitable name.
         * </pre>
         *
         * <code>optional string name = 10;</code>
         * @param value The bytes for name to set.
         * @return This builder for chaining.
         */
        public Builder setNameBytes(
            com.google.protobuf.ByteString value) {
          if (value == null) { throw new NullPointerException(); }
          name_ = value;
          bitField0_ |= 0x00000040;
          onChanged();
          return this;
        }
        @java.lang.Override
        public final Builder setUnknownFields(
            final com.google.protobuf.UnknownFieldSet unknownFields) {
          return super.setUnknownFields(unknownFields);
        }

        @java.lang.Override
        public final Builder mergeUnknownFields(
            final com.google.protobuf.UnknownFieldSet unknownFields) {
          return super.mergeUnknownFields(unknownFields);
        }


        // @@protoc_insertion_point(builder_scope:perfetto.protos.PerfEvents.Timebase)
      }

      // @@protoc_insertion_point(class_scope:perfetto.protos.PerfEvents.Timebase)
      private static final perfetto.protos.PerfEventsOuterClass.PerfEvents.Timebase DEFAULT_INSTANCE;
      static {
        DEFAULT_INSTANCE = new perfetto.protos.PerfEventsOuterClass.PerfEvents.Timebase();
      }

      public static perfetto.protos.PerfEventsOuterClass.PerfEvents.Timebase getDefaultInstance() {
        return DEFAULT_INSTANCE;
      }

      @java.lang.Deprecated public static final com.google.protobuf.Parser<Timebase>
          PARSER = new com.google.protobuf.AbstractParser<Timebase>() {
        @java.lang.Override
        public Timebase parsePartialFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws com.google.protobuf.InvalidProtocolBufferException {
          Builder builder = newBuilder();
          try {
            builder.mergeFrom(input, extensionRegistry);
          } catch (com.google.protobuf.InvalidProtocolBufferException e) {
            throw e.setUnfinishedMessage(builder.buildPartial());
          } catch (com.google.protobuf.UninitializedMessageException e) {
            throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
          } catch (java.io.IOException e) {
            throw new com.google.protobuf.InvalidProtocolBufferException(e)
                .setUnfinishedMessage(builder.buildPartial());
          }
          return builder.buildPartial();
        }
      };

      public static com.google.protobuf.Parser<Timebase> parser() {
        return PARSER;
      }

      @java.lang.Override
      public com.google.protobuf.Parser<Timebase> getParserForType() {
        return PARSER;
      }

      @java.lang.Override
      public perfetto.protos.PerfEventsOuterClass.PerfEvents.Timebase getDefaultInstanceForType() {
        return DEFAULT_INSTANCE;
      }

    }

    public interface TracepointOrBuilder extends
        // @@protoc_insertion_point(interface_extends:perfetto.protos.PerfEvents.Tracepoint)
        com.google.protobuf.MessageOrBuilder {

      /**
       * <pre>
       * Group and name for the tracepoint, acceptable forms:
       * * "sched/sched_switch"
       * * "sched:sched_switch"
       * </pre>
       *
       * <code>optional string name = 1;</code>
       * @return Whether the name field is set.
       */
      boolean hasName();
      /**
       * <pre>
       * Group and name for the tracepoint, acceptable forms:
       * * "sched/sched_switch"
       * * "sched:sched_switch"
       * </pre>
       *
       * <code>optional string name = 1;</code>
       * @return The name.
       */
      java.lang.String getName();
      /**
       * <pre>
       * Group and name for the tracepoint, acceptable forms:
       * * "sched/sched_switch"
       * * "sched:sched_switch"
       * </pre>
       *
       * <code>optional string name = 1;</code>
       * @return The bytes for name.
       */
      com.google.protobuf.ByteString
          getNameBytes();

      /**
       * <pre>
       * Optional field-level filter for the tracepoint. Only events matching this
       * filter will be counted (and therefore contribute to the sampling period).
       * Example: "prev_pid &gt;= 42 &amp;&amp; next_pid == 0".
       * For full syntax, see kernel documentation on "Event filtering":
       * https://www.kernel.org/doc/Documentation/trace/events.txt
       * </pre>
       *
       * <code>optional string filter = 2;</code>
       * @return Whether the filter field is set.
       */
      boolean hasFilter();
      /**
       * <pre>
       * Optional field-level filter for the tracepoint. Only events matching this
       * filter will be counted (and therefore contribute to the sampling period).
       * Example: "prev_pid &gt;= 42 &amp;&amp; next_pid == 0".
       * For full syntax, see kernel documentation on "Event filtering":
       * https://www.kernel.org/doc/Documentation/trace/events.txt
       * </pre>
       *
       * <code>optional string filter = 2;</code>
       * @return The filter.
       */
      java.lang.String getFilter();
      /**
       * <pre>
       * Optional field-level filter for the tracepoint. Only events matching this
       * filter will be counted (and therefore contribute to the sampling period).
       * Example: "prev_pid &gt;= 42 &amp;&amp; next_pid == 0".
       * For full syntax, see kernel documentation on "Event filtering":
       * https://www.kernel.org/doc/Documentation/trace/events.txt
       * </pre>
       *
       * <code>optional string filter = 2;</code>
       * @return The bytes for filter.
       */
      com.google.protobuf.ByteString
          getFilterBytes();
    }
    /**
     * Protobuf type {@code perfetto.protos.PerfEvents.Tracepoint}
     */
    public static final class Tracepoint extends
        com.google.protobuf.GeneratedMessageV3 implements
        // @@protoc_insertion_point(message_implements:perfetto.protos.PerfEvents.Tracepoint)
        TracepointOrBuilder {
    private static final long serialVersionUID = 0L;
      // Use Tracepoint.newBuilder() to construct.
      private Tracepoint(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
        super(builder);
      }
      private Tracepoint() {
        name_ = "";
        filter_ = "";
      }

      @java.lang.Override
      @SuppressWarnings({"unused"})
      protected java.lang.Object newInstance(
          UnusedPrivateParameter unused) {
        return new Tracepoint();
      }

      @java.lang.Override
      public final com.google.protobuf.UnknownFieldSet
      getUnknownFields() {
        return this.unknownFields;
      }
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return perfetto.protos.PerfEventsOuterClass.internal_static_perfetto_protos_PerfEvents_Tracepoint_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return perfetto.protos.PerfEventsOuterClass.internal_static_perfetto_protos_PerfEvents_Tracepoint_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                perfetto.protos.PerfEventsOuterClass.PerfEvents.Tracepoint.class, perfetto.protos.PerfEventsOuterClass.PerfEvents.Tracepoint.Builder.class);
      }

      private int bitField0_;
      public static final int NAME_FIELD_NUMBER = 1;
      @SuppressWarnings("serial")
      private volatile java.lang.Object name_ = "";
      /**
       * <pre>
       * Group and name for the tracepoint, acceptable forms:
       * * "sched/sched_switch"
       * * "sched:sched_switch"
       * </pre>
       *
       * <code>optional string name = 1;</code>
       * @return Whether the name field is set.
       */
      @java.lang.Override
      public boolean hasName() {
        return ((bitField0_ & 0x00000001) != 0);
      }
      /**
       * <pre>
       * Group and name for the tracepoint, acceptable forms:
       * * "sched/sched_switch"
       * * "sched:sched_switch"
       * </pre>
       *
       * <code>optional string name = 1;</code>
       * @return The name.
       */
      @java.lang.Override
      public java.lang.String getName() {
        java.lang.Object ref = name_;
        if (ref instanceof java.lang.String) {
          return (java.lang.String) ref;
        } else {
          com.google.protobuf.ByteString bs = 
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          if (bs.isValidUtf8()) {
            name_ = s;
          }
          return s;
        }
      }
      /**
       * <pre>
       * Group and name for the tracepoint, acceptable forms:
       * * "sched/sched_switch"
       * * "sched:sched_switch"
       * </pre>
       *
       * <code>optional string name = 1;</code>
       * @return The bytes for name.
       */
      @java.lang.Override
      public com.google.protobuf.ByteString
          getNameBytes() {
        java.lang.Object ref = name_;
        if (ref instanceof java.lang.String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          name_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }

      public static final int FILTER_FIELD_NUMBER = 2;
      @SuppressWarnings("serial")
      private volatile java.lang.Object filter_ = "";
      /**
       * <pre>
       * Optional field-level filter for the tracepoint. Only events matching this
       * filter will be counted (and therefore contribute to the sampling period).
       * Example: "prev_pid &gt;= 42 &amp;&amp; next_pid == 0".
       * For full syntax, see kernel documentation on "Event filtering":
       * https://www.kernel.org/doc/Documentation/trace/events.txt
       * </pre>
       *
       * <code>optional string filter = 2;</code>
       * @return Whether the filter field is set.
       */
      @java.lang.Override
      public boolean hasFilter() {
        return ((bitField0_ & 0x00000002) != 0);
      }
      /**
       * <pre>
       * Optional field-level filter for the tracepoint. Only events matching this
       * filter will be counted (and therefore contribute to the sampling period).
       * Example: "prev_pid &gt;= 42 &amp;&amp; next_pid == 0".
       * For full syntax, see kernel documentation on "Event filtering":
       * https://www.kernel.org/doc/Documentation/trace/events.txt
       * </pre>
       *
       * <code>optional string filter = 2;</code>
       * @return The filter.
       */
      @java.lang.Override
      public java.lang.String getFilter() {
        java.lang.Object ref = filter_;
        if (ref instanceof java.lang.String) {
          return (java.lang.String) ref;
        } else {
          com.google.protobuf.ByteString bs = 
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          if (bs.isValidUtf8()) {
            filter_ = s;
          }
          return s;
        }
      }
      /**
       * <pre>
       * Optional field-level filter for the tracepoint. Only events matching this
       * filter will be counted (and therefore contribute to the sampling period).
       * Example: "prev_pid &gt;= 42 &amp;&amp; next_pid == 0".
       * For full syntax, see kernel documentation on "Event filtering":
       * https://www.kernel.org/doc/Documentation/trace/events.txt
       * </pre>
       *
       * <code>optional string filter = 2;</code>
       * @return The bytes for filter.
       */
      @java.lang.Override
      public com.google.protobuf.ByteString
          getFilterBytes() {
        java.lang.Object ref = filter_;
        if (ref instanceof java.lang.String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          filter_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }

      private byte memoizedIsInitialized = -1;
      @java.lang.Override
      public final boolean isInitialized() {
        byte isInitialized = memoizedIsInitialized;
        if (isInitialized == 1) return true;
        if (isInitialized == 0) return false;

        memoizedIsInitialized = 1;
        return true;
      }

      @java.lang.Override
      public void writeTo(com.google.protobuf.CodedOutputStream output)
                          throws java.io.IOException {
        if (((bitField0_ & 0x00000001) != 0)) {
          com.google.protobuf.GeneratedMessageV3.writeString(output, 1, name_);
        }
        if (((bitField0_ & 0x00000002) != 0)) {
          com.google.protobuf.GeneratedMessageV3.writeString(output, 2, filter_);
        }
        getUnknownFields().writeTo(output);
      }

      @java.lang.Override
      public int getSerializedSize() {
        int size = memoizedSize;
        if (size != -1) return size;

        size = 0;
        if (((bitField0_ & 0x00000001) != 0)) {
          size += com.google.protobuf.GeneratedMessageV3.computeStringSize(1, name_);
        }
        if (((bitField0_ & 0x00000002) != 0)) {
          size += com.google.protobuf.GeneratedMessageV3.computeStringSize(2, filter_);
        }
        size += getUnknownFields().getSerializedSize();
        memoizedSize = size;
        return size;
      }

      @java.lang.Override
      public boolean equals(final java.lang.Object obj) {
        if (obj == this) {
         return true;
        }
        if (!(obj instanceof perfetto.protos.PerfEventsOuterClass.PerfEvents.Tracepoint)) {
          return super.equals(obj);
        }
        perfetto.protos.PerfEventsOuterClass.PerfEvents.Tracepoint other = (perfetto.protos.PerfEventsOuterClass.PerfEvents.Tracepoint) obj;

        if (hasName() != other.hasName()) return false;
        if (hasName()) {
          if (!getName()
              .equals(other.getName())) return false;
        }
        if (hasFilter() != other.hasFilter()) return false;
        if (hasFilter()) {
          if (!getFilter()
              .equals(other.getFilter())) return false;
        }
        if (!getUnknownFields().equals(other.getUnknownFields())) return false;
        return true;
      }

      @java.lang.Override
      public int hashCode() {
        if (memoizedHashCode != 0) {
          return memoizedHashCode;
        }
        int hash = 41;
        hash = (19 * hash) + getDescriptor().hashCode();
        if (hasName()) {
          hash = (37 * hash) + NAME_FIELD_NUMBER;
          hash = (53 * hash) + getName().hashCode();
        }
        if (hasFilter()) {
          hash = (37 * hash) + FILTER_FIELD_NUMBER;
          hash = (53 * hash) + getFilter().hashCode();
        }
        hash = (29 * hash) + getUnknownFields().hashCode();
        memoizedHashCode = hash;
        return hash;
      }

      public static perfetto.protos.PerfEventsOuterClass.PerfEvents.Tracepoint parseFrom(
          java.nio.ByteBuffer data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static perfetto.protos.PerfEventsOuterClass.PerfEvents.Tracepoint parseFrom(
          java.nio.ByteBuffer data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static perfetto.protos.PerfEventsOuterClass.PerfEvents.Tracepoint parseFrom(
          com.google.protobuf.ByteString data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static perfetto.protos.PerfEventsOuterClass.PerfEvents.Tracepoint parseFrom(
          com.google.protobuf.ByteString data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static perfetto.protos.PerfEventsOuterClass.PerfEvents.Tracepoint parseFrom(byte[] data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static perfetto.protos.PerfEventsOuterClass.PerfEvents.Tracepoint parseFrom(
          byte[] data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static perfetto.protos.PerfEventsOuterClass.PerfEvents.Tracepoint parseFrom(java.io.InputStream input)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseWithIOException(PARSER, input);
      }
      public static perfetto.protos.PerfEventsOuterClass.PerfEvents.Tracepoint parseFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseWithIOException(PARSER, input, extensionRegistry);
      }
      public static perfetto.protos.PerfEventsOuterClass.PerfEvents.Tracepoint parseDelimitedFrom(java.io.InputStream input)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseDelimitedWithIOException(PARSER, input);
      }
      public static perfetto.protos.PerfEventsOuterClass.PerfEvents.Tracepoint parseDelimitedFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
      }
      public static perfetto.protos.PerfEventsOuterClass.PerfEvents.Tracepoint parseFrom(
          com.google.protobuf.CodedInputStream input)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseWithIOException(PARSER, input);
      }
      public static perfetto.protos.PerfEventsOuterClass.PerfEvents.Tracepoint parseFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseWithIOException(PARSER, input, extensionRegistry);
      }

      @java.lang.Override
      public Builder newBuilderForType() { return newBuilder(); }
      public static Builder newBuilder() {
        return DEFAULT_INSTANCE.toBuilder();
      }
      public static Builder newBuilder(perfetto.protos.PerfEventsOuterClass.PerfEvents.Tracepoint prototype) {
        return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
      }
      @java.lang.Override
      public Builder toBuilder() {
        return this == DEFAULT_INSTANCE
            ? new Builder() : new Builder().mergeFrom(this);
      }

      @java.lang.Override
      protected Builder newBuilderForType(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        Builder builder = new Builder(parent);
        return builder;
      }
      /**
       * Protobuf type {@code perfetto.protos.PerfEvents.Tracepoint}
       */
      public static final class Builder extends
          com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
          // @@protoc_insertion_point(builder_implements:perfetto.protos.PerfEvents.Tracepoint)
          perfetto.protos.PerfEventsOuterClass.PerfEvents.TracepointOrBuilder {
        public static final com.google.protobuf.Descriptors.Descriptor
            getDescriptor() {
          return perfetto.protos.PerfEventsOuterClass.internal_static_perfetto_protos_PerfEvents_Tracepoint_descriptor;
        }

        @java.lang.Override
        protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
            internalGetFieldAccessorTable() {
          return perfetto.protos.PerfEventsOuterClass.internal_static_perfetto_protos_PerfEvents_Tracepoint_fieldAccessorTable
              .ensureFieldAccessorsInitialized(
                  perfetto.protos.PerfEventsOuterClass.PerfEvents.Tracepoint.class, perfetto.protos.PerfEventsOuterClass.PerfEvents.Tracepoint.Builder.class);
        }

        // Construct using perfetto.protos.PerfEventsOuterClass.PerfEvents.Tracepoint.newBuilder()
        private Builder() {

        }

        private Builder(
            com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
          super(parent);

        }
        @java.lang.Override
        public Builder clear() {
          super.clear();
          bitField0_ = 0;
          name_ = "";
          filter_ = "";
          return this;
        }

        @java.lang.Override
        public com.google.protobuf.Descriptors.Descriptor
            getDescriptorForType() {
          return perfetto.protos.PerfEventsOuterClass.internal_static_perfetto_protos_PerfEvents_Tracepoint_descriptor;
        }

        @java.lang.Override
        public perfetto.protos.PerfEventsOuterClass.PerfEvents.Tracepoint getDefaultInstanceForType() {
          return perfetto.protos.PerfEventsOuterClass.PerfEvents.Tracepoint.getDefaultInstance();
        }

        @java.lang.Override
        public perfetto.protos.PerfEventsOuterClass.PerfEvents.Tracepoint build() {
          perfetto.protos.PerfEventsOuterClass.PerfEvents.Tracepoint result = buildPartial();
          if (!result.isInitialized()) {
            throw newUninitializedMessageException(result);
          }
          return result;
        }

        @java.lang.Override
        public perfetto.protos.PerfEventsOuterClass.PerfEvents.Tracepoint buildPartial() {
          perfetto.protos.PerfEventsOuterClass.PerfEvents.Tracepoint result = new perfetto.protos.PerfEventsOuterClass.PerfEvents.Tracepoint(this);
          if (bitField0_ != 0) { buildPartial0(result); }
          onBuilt();
          return result;
        }

        private void buildPartial0(perfetto.protos.PerfEventsOuterClass.PerfEvents.Tracepoint result) {
          int from_bitField0_ = bitField0_;
          int to_bitField0_ = 0;
          if (((from_bitField0_ & 0x00000001) != 0)) {
            result.name_ = name_;
            to_bitField0_ |= 0x00000001;
          }
          if (((from_bitField0_ & 0x00000002) != 0)) {
            result.filter_ = filter_;
            to_bitField0_ |= 0x00000002;
          }
          result.bitField0_ |= to_bitField0_;
        }

        @java.lang.Override
        public Builder clone() {
          return super.clone();
        }
        @java.lang.Override
        public Builder setField(
            com.google.protobuf.Descriptors.FieldDescriptor field,
            java.lang.Object value) {
          return super.setField(field, value);
        }
        @java.lang.Override
        public Builder clearField(
            com.google.protobuf.Descriptors.FieldDescriptor field) {
          return super.clearField(field);
        }
        @java.lang.Override
        public Builder clearOneof(
            com.google.protobuf.Descriptors.OneofDescriptor oneof) {
          return super.clearOneof(oneof);
        }
        @java.lang.Override
        public Builder setRepeatedField(
            com.google.protobuf.Descriptors.FieldDescriptor field,
            int index, java.lang.Object value) {
          return super.setRepeatedField(field, index, value);
        }
        @java.lang.Override
        public Builder addRepeatedField(
            com.google.protobuf.Descriptors.FieldDescriptor field,
            java.lang.Object value) {
          return super.addRepeatedField(field, value);
        }
        @java.lang.Override
        public Builder mergeFrom(com.google.protobuf.Message other) {
          if (other instanceof perfetto.protos.PerfEventsOuterClass.PerfEvents.Tracepoint) {
            return mergeFrom((perfetto.protos.PerfEventsOuterClass.PerfEvents.Tracepoint)other);
          } else {
            super.mergeFrom(other);
            return this;
          }
        }

        public Builder mergeFrom(perfetto.protos.PerfEventsOuterClass.PerfEvents.Tracepoint other) {
          if (other == perfetto.protos.PerfEventsOuterClass.PerfEvents.Tracepoint.getDefaultInstance()) return this;
          if (other.hasName()) {
            name_ = other.name_;
            bitField0_ |= 0x00000001;
            onChanged();
          }
          if (other.hasFilter()) {
            filter_ = other.filter_;
            bitField0_ |= 0x00000002;
            onChanged();
          }
          this.mergeUnknownFields(other.getUnknownFields());
          onChanged();
          return this;
        }

        @java.lang.Override
        public final boolean isInitialized() {
          return true;
        }

        @java.lang.Override
        public Builder mergeFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws java.io.IOException {
          if (extensionRegistry == null) {
            throw new java.lang.NullPointerException();
          }
          try {
            boolean done = false;
            while (!done) {
              int tag = input.readTag();
              switch (tag) {
                case 0:
                  done = true;
                  break;
                case 10: {
                  name_ = input.readBytes();
                  bitField0_ |= 0x00000001;
                  break;
                } // case 10
                case 18: {
                  filter_ = input.readBytes();
                  bitField0_ |= 0x00000002;
                  break;
                } // case 18
                default: {
                  if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                    done = true; // was an endgroup tag
                  }
                  break;
                } // default:
              } // switch (tag)
            } // while (!done)
          } catch (com.google.protobuf.InvalidProtocolBufferException e) {
            throw e.unwrapIOException();
          } finally {
            onChanged();
          } // finally
          return this;
        }
        private int bitField0_;

        private java.lang.Object name_ = "";
        /**
         * <pre>
         * Group and name for the tracepoint, acceptable forms:
         * * "sched/sched_switch"
         * * "sched:sched_switch"
         * </pre>
         *
         * <code>optional string name = 1;</code>
         * @return Whether the name field is set.
         */
        public boolean hasName() {
          return ((bitField0_ & 0x00000001) != 0);
        }
        /**
         * <pre>
         * Group and name for the tracepoint, acceptable forms:
         * * "sched/sched_switch"
         * * "sched:sched_switch"
         * </pre>
         *
         * <code>optional string name = 1;</code>
         * @return The name.
         */
        public java.lang.String getName() {
          java.lang.Object ref = name_;
          if (!(ref instanceof java.lang.String)) {
            com.google.protobuf.ByteString bs =
                (com.google.protobuf.ByteString) ref;
            java.lang.String s = bs.toStringUtf8();
            if (bs.isValidUtf8()) {
              name_ = s;
            }
            return s;
          } else {
            return (java.lang.String) ref;
          }
        }
        /**
         * <pre>
         * Group and name for the tracepoint, acceptable forms:
         * * "sched/sched_switch"
         * * "sched:sched_switch"
         * </pre>
         *
         * <code>optional string name = 1;</code>
         * @return The bytes for name.
         */
        public com.google.protobuf.ByteString
            getNameBytes() {
          java.lang.Object ref = name_;
          if (ref instanceof String) {
            com.google.protobuf.ByteString b = 
                com.google.protobuf.ByteString.copyFromUtf8(
                    (java.lang.String) ref);
            name_ = b;
            return b;
          } else {
            return (com.google.protobuf.ByteString) ref;
          }
        }
        /**
         * <pre>
         * Group and name for the tracepoint, acceptable forms:
         * * "sched/sched_switch"
         * * "sched:sched_switch"
         * </pre>
         *
         * <code>optional string name = 1;</code>
         * @param value The name to set.
         * @return This builder for chaining.
         */
        public Builder setName(
            java.lang.String value) {
          if (value == null) { throw new NullPointerException(); }
          name_ = value;
          bitField0_ |= 0x00000001;
          onChanged();
          return this;
        }
        /**
         * <pre>
         * Group and name for the tracepoint, acceptable forms:
         * * "sched/sched_switch"
         * * "sched:sched_switch"
         * </pre>
         *
         * <code>optional string name = 1;</code>
         * @return This builder for chaining.
         */
        public Builder clearName() {
          name_ = getDefaultInstance().getName();
          bitField0_ = (bitField0_ & ~0x00000001);
          onChanged();
          return this;
        }
        /**
         * <pre>
         * Group and name for the tracepoint, acceptable forms:
         * * "sched/sched_switch"
         * * "sched:sched_switch"
         * </pre>
         *
         * <code>optional string name = 1;</code>
         * @param value The bytes for name to set.
         * @return This builder for chaining.
         */
        public Builder setNameBytes(
            com.google.protobuf.ByteString value) {
          if (value == null) { throw new NullPointerException(); }
          name_ = value;
          bitField0_ |= 0x00000001;
          onChanged();
          return this;
        }

        private java.lang.Object filter_ = "";
        /**
         * <pre>
         * Optional field-level filter for the tracepoint. Only events matching this
         * filter will be counted (and therefore contribute to the sampling period).
         * Example: "prev_pid &gt;= 42 &amp;&amp; next_pid == 0".
         * For full syntax, see kernel documentation on "Event filtering":
         * https://www.kernel.org/doc/Documentation/trace/events.txt
         * </pre>
         *
         * <code>optional string filter = 2;</code>
         * @return Whether the filter field is set.
         */
        public boolean hasFilter() {
          return ((bitField0_ & 0x00000002) != 0);
        }
        /**
         * <pre>
         * Optional field-level filter for the tracepoint. Only events matching this
         * filter will be counted (and therefore contribute to the sampling period).
         * Example: "prev_pid &gt;= 42 &amp;&amp; next_pid == 0".
         * For full syntax, see kernel documentation on "Event filtering":
         * https://www.kernel.org/doc/Documentation/trace/events.txt
         * </pre>
         *
         * <code>optional string filter = 2;</code>
         * @return The filter.
         */
        public java.lang.String getFilter() {
          java.lang.Object ref = filter_;
          if (!(ref instanceof java.lang.String)) {
            com.google.protobuf.ByteString bs =
                (com.google.protobuf.ByteString) ref;
            java.lang.String s = bs.toStringUtf8();
            if (bs.isValidUtf8()) {
              filter_ = s;
            }
            return s;
          } else {
            return (java.lang.String) ref;
          }
        }
        /**
         * <pre>
         * Optional field-level filter for the tracepoint. Only events matching this
         * filter will be counted (and therefore contribute to the sampling period).
         * Example: "prev_pid &gt;= 42 &amp;&amp; next_pid == 0".
         * For full syntax, see kernel documentation on "Event filtering":
         * https://www.kernel.org/doc/Documentation/trace/events.txt
         * </pre>
         *
         * <code>optional string filter = 2;</code>
         * @return The bytes for filter.
         */
        public com.google.protobuf.ByteString
            getFilterBytes() {
          java.lang.Object ref = filter_;
          if (ref instanceof String) {
            com.google.protobuf.ByteString b = 
                com.google.protobuf.ByteString.copyFromUtf8(
                    (java.lang.String) ref);
            filter_ = b;
            return b;
          } else {
            return (com.google.protobuf.ByteString) ref;
          }
        }
        /**
         * <pre>
         * Optional field-level filter for the tracepoint. Only events matching this
         * filter will be counted (and therefore contribute to the sampling period).
         * Example: "prev_pid &gt;= 42 &amp;&amp; next_pid == 0".
         * For full syntax, see kernel documentation on "Event filtering":
         * https://www.kernel.org/doc/Documentation/trace/events.txt
         * </pre>
         *
         * <code>optional string filter = 2;</code>
         * @param value The filter to set.
         * @return This builder for chaining.
         */
        public Builder setFilter(
            java.lang.String value) {
          if (value == null) { throw new NullPointerException(); }
          filter_ = value;
          bitField0_ |= 0x00000002;
          onChanged();
          return this;
        }
        /**
         * <pre>
         * Optional field-level filter for the tracepoint. Only events matching this
         * filter will be counted (and therefore contribute to the sampling period).
         * Example: "prev_pid &gt;= 42 &amp;&amp; next_pid == 0".
         * For full syntax, see kernel documentation on "Event filtering":
         * https://www.kernel.org/doc/Documentation/trace/events.txt
         * </pre>
         *
         * <code>optional string filter = 2;</code>
         * @return This builder for chaining.
         */
        public Builder clearFilter() {
          filter_ = getDefaultInstance().getFilter();
          bitField0_ = (bitField0_ & ~0x00000002);
          onChanged();
          return this;
        }
        /**
         * <pre>
         * Optional field-level filter for the tracepoint. Only events matching this
         * filter will be counted (and therefore contribute to the sampling period).
         * Example: "prev_pid &gt;= 42 &amp;&amp; next_pid == 0".
         * For full syntax, see kernel documentation on "Event filtering":
         * https://www.kernel.org/doc/Documentation/trace/events.txt
         * </pre>
         *
         * <code>optional string filter = 2;</code>
         * @param value The bytes for filter to set.
         * @return This builder for chaining.
         */
        public Builder setFilterBytes(
            com.google.protobuf.ByteString value) {
          if (value == null) { throw new NullPointerException(); }
          filter_ = value;
          bitField0_ |= 0x00000002;
          onChanged();
          return this;
        }
        @java.lang.Override
        public final Builder setUnknownFields(
            final com.google.protobuf.UnknownFieldSet unknownFields) {
          return super.setUnknownFields(unknownFields);
        }

        @java.lang.Override
        public final Builder mergeUnknownFields(
            final com.google.protobuf.UnknownFieldSet unknownFields) {
          return super.mergeUnknownFields(unknownFields);
        }


        // @@protoc_insertion_point(builder_scope:perfetto.protos.PerfEvents.Tracepoint)
      }

      // @@protoc_insertion_point(class_scope:perfetto.protos.PerfEvents.Tracepoint)
      private static final perfetto.protos.PerfEventsOuterClass.PerfEvents.Tracepoint DEFAULT_INSTANCE;
      static {
        DEFAULT_INSTANCE = new perfetto.protos.PerfEventsOuterClass.PerfEvents.Tracepoint();
      }

      public static perfetto.protos.PerfEventsOuterClass.PerfEvents.Tracepoint getDefaultInstance() {
        return DEFAULT_INSTANCE;
      }

      @java.lang.Deprecated public static final com.google.protobuf.Parser<Tracepoint>
          PARSER = new com.google.protobuf.AbstractParser<Tracepoint>() {
        @java.lang.Override
        public Tracepoint parsePartialFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws com.google.protobuf.InvalidProtocolBufferException {
          Builder builder = newBuilder();
          try {
            builder.mergeFrom(input, extensionRegistry);
          } catch (com.google.protobuf.InvalidProtocolBufferException e) {
            throw e.setUnfinishedMessage(builder.buildPartial());
          } catch (com.google.protobuf.UninitializedMessageException e) {
            throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
          } catch (java.io.IOException e) {
            throw new com.google.protobuf.InvalidProtocolBufferException(e)
                .setUnfinishedMessage(builder.buildPartial());
          }
          return builder.buildPartial();
        }
      };

      public static com.google.protobuf.Parser<Tracepoint> parser() {
        return PARSER;
      }

      @java.lang.Override
      public com.google.protobuf.Parser<Tracepoint> getParserForType() {
        return PARSER;
      }

      @java.lang.Override
      public perfetto.protos.PerfEventsOuterClass.PerfEvents.Tracepoint getDefaultInstanceForType() {
        return DEFAULT_INSTANCE;
      }

    }

    public interface RawEventOrBuilder extends
        // @@protoc_insertion_point(interface_extends:perfetto.protos.PerfEvents.RawEvent)
        com.google.protobuf.MessageOrBuilder {

      /**
       * <code>optional uint32 type = 1;</code>
       * @return Whether the type field is set.
       */
      boolean hasType();
      /**
       * <code>optional uint32 type = 1;</code>
       * @return The type.
       */
      int getType();

      /**
       * <code>optional uint64 config = 2;</code>
       * @return Whether the config field is set.
       */
      boolean hasConfig();
      /**
       * <code>optional uint64 config = 2;</code>
       * @return The config.
       */
      long getConfig();

      /**
       * <code>optional uint64 config1 = 3;</code>
       * @return Whether the config1 field is set.
       */
      boolean hasConfig1();
      /**
       * <code>optional uint64 config1 = 3;</code>
       * @return The config1.
       */
      long getConfig1();

      /**
       * <code>optional uint64 config2 = 4;</code>
       * @return Whether the config2 field is set.
       */
      boolean hasConfig2();
      /**
       * <code>optional uint64 config2 = 4;</code>
       * @return The config2.
       */
      long getConfig2();
    }
    /**
     * <pre>
     * Syscall-level description of the event, propagated to the perf_event_attr
     * struct. Primarily for local use-cases, since the event availability and
     * encoding is hardware-specific.
     * </pre>
     *
     * Protobuf type {@code perfetto.protos.PerfEvents.RawEvent}
     */
    public static final class RawEvent extends
        com.google.protobuf.GeneratedMessageV3 implements
        // @@protoc_insertion_point(message_implements:perfetto.protos.PerfEvents.RawEvent)
        RawEventOrBuilder {
    private static final long serialVersionUID = 0L;
      // Use RawEvent.newBuilder() to construct.
      private RawEvent(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
        super(builder);
      }
      private RawEvent() {
      }

      @java.lang.Override
      @SuppressWarnings({"unused"})
      protected java.lang.Object newInstance(
          UnusedPrivateParameter unused) {
        return new RawEvent();
      }

      @java.lang.Override
      public final com.google.protobuf.UnknownFieldSet
      getUnknownFields() {
        return this.unknownFields;
      }
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return perfetto.protos.PerfEventsOuterClass.internal_static_perfetto_protos_PerfEvents_RawEvent_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return perfetto.protos.PerfEventsOuterClass.internal_static_perfetto_protos_PerfEvents_RawEvent_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                perfetto.protos.PerfEventsOuterClass.PerfEvents.RawEvent.class, perfetto.protos.PerfEventsOuterClass.PerfEvents.RawEvent.Builder.class);
      }

      private int bitField0_;
      public static final int TYPE_FIELD_NUMBER = 1;
      private int type_ = 0;
      /**
       * <code>optional uint32 type = 1;</code>
       * @return Whether the type field is set.
       */
      @java.lang.Override
      public boolean hasType() {
        return ((bitField0_ & 0x00000001) != 0);
      }
      /**
       * <code>optional uint32 type = 1;</code>
       * @return The type.
       */
      @java.lang.Override
      public int getType() {
        return type_;
      }

      public static final int CONFIG_FIELD_NUMBER = 2;
      private long config_ = 0L;
      /**
       * <code>optional uint64 config = 2;</code>
       * @return Whether the config field is set.
       */
      @java.lang.Override
      public boolean hasConfig() {
        return ((bitField0_ & 0x00000002) != 0);
      }
      /**
       * <code>optional uint64 config = 2;</code>
       * @return The config.
       */
      @java.lang.Override
      public long getConfig() {
        return config_;
      }

      public static final int CONFIG1_FIELD_NUMBER = 3;
      private long config1_ = 0L;
      /**
       * <code>optional uint64 config1 = 3;</code>
       * @return Whether the config1 field is set.
       */
      @java.lang.Override
      public boolean hasConfig1() {
        return ((bitField0_ & 0x00000004) != 0);
      }
      /**
       * <code>optional uint64 config1 = 3;</code>
       * @return The config1.
       */
      @java.lang.Override
      public long getConfig1() {
        return config1_;
      }

      public static final int CONFIG2_FIELD_NUMBER = 4;
      private long config2_ = 0L;
      /**
       * <code>optional uint64 config2 = 4;</code>
       * @return Whether the config2 field is set.
       */
      @java.lang.Override
      public boolean hasConfig2() {
        return ((bitField0_ & 0x00000008) != 0);
      }
      /**
       * <code>optional uint64 config2 = 4;</code>
       * @return The config2.
       */
      @java.lang.Override
      public long getConfig2() {
        return config2_;
      }

      private byte memoizedIsInitialized = -1;
      @java.lang.Override
      public final boolean isInitialized() {
        byte isInitialized = memoizedIsInitialized;
        if (isInitialized == 1) return true;
        if (isInitialized == 0) return false;

        memoizedIsInitialized = 1;
        return true;
      }

      @java.lang.Override
      public void writeTo(com.google.protobuf.CodedOutputStream output)
                          throws java.io.IOException {
        if (((bitField0_ & 0x00000001) != 0)) {
          output.writeUInt32(1, type_);
        }
        if (((bitField0_ & 0x00000002) != 0)) {
          output.writeUInt64(2, config_);
        }
        if (((bitField0_ & 0x00000004) != 0)) {
          output.writeUInt64(3, config1_);
        }
        if (((bitField0_ & 0x00000008) != 0)) {
          output.writeUInt64(4, config2_);
        }
        getUnknownFields().writeTo(output);
      }

      @java.lang.Override
      public int getSerializedSize() {
        int size = memoizedSize;
        if (size != -1) return size;

        size = 0;
        if (((bitField0_ & 0x00000001) != 0)) {
          size += com.google.protobuf.CodedOutputStream
            .computeUInt32Size(1, type_);
        }
        if (((bitField0_ & 0x00000002) != 0)) {
          size += com.google.protobuf.CodedOutputStream
            .computeUInt64Size(2, config_);
        }
        if (((bitField0_ & 0x00000004) != 0)) {
          size += com.google.protobuf.CodedOutputStream
            .computeUInt64Size(3, config1_);
        }
        if (((bitField0_ & 0x00000008) != 0)) {
          size += com.google.protobuf.CodedOutputStream
            .computeUInt64Size(4, config2_);
        }
        size += getUnknownFields().getSerializedSize();
        memoizedSize = size;
        return size;
      }

      @java.lang.Override
      public boolean equals(final java.lang.Object obj) {
        if (obj == this) {
         return true;
        }
        if (!(obj instanceof perfetto.protos.PerfEventsOuterClass.PerfEvents.RawEvent)) {
          return super.equals(obj);
        }
        perfetto.protos.PerfEventsOuterClass.PerfEvents.RawEvent other = (perfetto.protos.PerfEventsOuterClass.PerfEvents.RawEvent) obj;

        if (hasType() != other.hasType()) return false;
        if (hasType()) {
          if (getType()
              != other.getType()) return false;
        }
        if (hasConfig() != other.hasConfig()) return false;
        if (hasConfig()) {
          if (getConfig()
              != other.getConfig()) return false;
        }
        if (hasConfig1() != other.hasConfig1()) return false;
        if (hasConfig1()) {
          if (getConfig1()
              != other.getConfig1()) return false;
        }
        if (hasConfig2() != other.hasConfig2()) return false;
        if (hasConfig2()) {
          if (getConfig2()
              != other.getConfig2()) return false;
        }
        if (!getUnknownFields().equals(other.getUnknownFields())) return false;
        return true;
      }

      @java.lang.Override
      public int hashCode() {
        if (memoizedHashCode != 0) {
          return memoizedHashCode;
        }
        int hash = 41;
        hash = (19 * hash) + getDescriptor().hashCode();
        if (hasType()) {
          hash = (37 * hash) + TYPE_FIELD_NUMBER;
          hash = (53 * hash) + getType();
        }
        if (hasConfig()) {
          hash = (37 * hash) + CONFIG_FIELD_NUMBER;
          hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
              getConfig());
        }
        if (hasConfig1()) {
          hash = (37 * hash) + CONFIG1_FIELD_NUMBER;
          hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
              getConfig1());
        }
        if (hasConfig2()) {
          hash = (37 * hash) + CONFIG2_FIELD_NUMBER;
          hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
              getConfig2());
        }
        hash = (29 * hash) + getUnknownFields().hashCode();
        memoizedHashCode = hash;
        return hash;
      }

      public static perfetto.protos.PerfEventsOuterClass.PerfEvents.RawEvent parseFrom(
          java.nio.ByteBuffer data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static perfetto.protos.PerfEventsOuterClass.PerfEvents.RawEvent parseFrom(
          java.nio.ByteBuffer data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static perfetto.protos.PerfEventsOuterClass.PerfEvents.RawEvent parseFrom(
          com.google.protobuf.ByteString data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static perfetto.protos.PerfEventsOuterClass.PerfEvents.RawEvent parseFrom(
          com.google.protobuf.ByteString data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static perfetto.protos.PerfEventsOuterClass.PerfEvents.RawEvent parseFrom(byte[] data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static perfetto.protos.PerfEventsOuterClass.PerfEvents.RawEvent parseFrom(
          byte[] data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static perfetto.protos.PerfEventsOuterClass.PerfEvents.RawEvent parseFrom(java.io.InputStream input)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseWithIOException(PARSER, input);
      }
      public static perfetto.protos.PerfEventsOuterClass.PerfEvents.RawEvent parseFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseWithIOException(PARSER, input, extensionRegistry);
      }
      public static perfetto.protos.PerfEventsOuterClass.PerfEvents.RawEvent parseDelimitedFrom(java.io.InputStream input)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseDelimitedWithIOException(PARSER, input);
      }
      public static perfetto.protos.PerfEventsOuterClass.PerfEvents.RawEvent parseDelimitedFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
      }
      public static perfetto.protos.PerfEventsOuterClass.PerfEvents.RawEvent parseFrom(
          com.google.protobuf.CodedInputStream input)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseWithIOException(PARSER, input);
      }
      public static perfetto.protos.PerfEventsOuterClass.PerfEvents.RawEvent parseFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseWithIOException(PARSER, input, extensionRegistry);
      }

      @java.lang.Override
      public Builder newBuilderForType() { return newBuilder(); }
      public static Builder newBuilder() {
        return DEFAULT_INSTANCE.toBuilder();
      }
      public static Builder newBuilder(perfetto.protos.PerfEventsOuterClass.PerfEvents.RawEvent prototype) {
        return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
      }
      @java.lang.Override
      public Builder toBuilder() {
        return this == DEFAULT_INSTANCE
            ? new Builder() : new Builder().mergeFrom(this);
      }

      @java.lang.Override
      protected Builder newBuilderForType(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        Builder builder = new Builder(parent);
        return builder;
      }
      /**
       * <pre>
       * Syscall-level description of the event, propagated to the perf_event_attr
       * struct. Primarily for local use-cases, since the event availability and
       * encoding is hardware-specific.
       * </pre>
       *
       * Protobuf type {@code perfetto.protos.PerfEvents.RawEvent}
       */
      public static final class Builder extends
          com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
          // @@protoc_insertion_point(builder_implements:perfetto.protos.PerfEvents.RawEvent)
          perfetto.protos.PerfEventsOuterClass.PerfEvents.RawEventOrBuilder {
        public static final com.google.protobuf.Descriptors.Descriptor
            getDescriptor() {
          return perfetto.protos.PerfEventsOuterClass.internal_static_perfetto_protos_PerfEvents_RawEvent_descriptor;
        }

        @java.lang.Override
        protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
            internalGetFieldAccessorTable() {
          return perfetto.protos.PerfEventsOuterClass.internal_static_perfetto_protos_PerfEvents_RawEvent_fieldAccessorTable
              .ensureFieldAccessorsInitialized(
                  perfetto.protos.PerfEventsOuterClass.PerfEvents.RawEvent.class, perfetto.protos.PerfEventsOuterClass.PerfEvents.RawEvent.Builder.class);
        }

        // Construct using perfetto.protos.PerfEventsOuterClass.PerfEvents.RawEvent.newBuilder()
        private Builder() {

        }

        private Builder(
            com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
          super(parent);

        }
        @java.lang.Override
        public Builder clear() {
          super.clear();
          bitField0_ = 0;
          type_ = 0;
          config_ = 0L;
          config1_ = 0L;
          config2_ = 0L;
          return this;
        }

        @java.lang.Override
        public com.google.protobuf.Descriptors.Descriptor
            getDescriptorForType() {
          return perfetto.protos.PerfEventsOuterClass.internal_static_perfetto_protos_PerfEvents_RawEvent_descriptor;
        }

        @java.lang.Override
        public perfetto.protos.PerfEventsOuterClass.PerfEvents.RawEvent getDefaultInstanceForType() {
          return perfetto.protos.PerfEventsOuterClass.PerfEvents.RawEvent.getDefaultInstance();
        }

        @java.lang.Override
        public perfetto.protos.PerfEventsOuterClass.PerfEvents.RawEvent build() {
          perfetto.protos.PerfEventsOuterClass.PerfEvents.RawEvent result = buildPartial();
          if (!result.isInitialized()) {
            throw newUninitializedMessageException(result);
          }
          return result;
        }

        @java.lang.Override
        public perfetto.protos.PerfEventsOuterClass.PerfEvents.RawEvent buildPartial() {
          perfetto.protos.PerfEventsOuterClass.PerfEvents.RawEvent result = new perfetto.protos.PerfEventsOuterClass.PerfEvents.RawEvent(this);
          if (bitField0_ != 0) { buildPartial0(result); }
          onBuilt();
          return result;
        }

        private void buildPartial0(perfetto.protos.PerfEventsOuterClass.PerfEvents.RawEvent result) {
          int from_bitField0_ = bitField0_;
          int to_bitField0_ = 0;
          if (((from_bitField0_ & 0x00000001) != 0)) {
            result.type_ = type_;
            to_bitField0_ |= 0x00000001;
          }
          if (((from_bitField0_ & 0x00000002) != 0)) {
            result.config_ = config_;
            to_bitField0_ |= 0x00000002;
          }
          if (((from_bitField0_ & 0x00000004) != 0)) {
            result.config1_ = config1_;
            to_bitField0_ |= 0x00000004;
          }
          if (((from_bitField0_ & 0x00000008) != 0)) {
            result.config2_ = config2_;
            to_bitField0_ |= 0x00000008;
          }
          result.bitField0_ |= to_bitField0_;
        }

        @java.lang.Override
        public Builder clone() {
          return super.clone();
        }
        @java.lang.Override
        public Builder setField(
            com.google.protobuf.Descriptors.FieldDescriptor field,
            java.lang.Object value) {
          return super.setField(field, value);
        }
        @java.lang.Override
        public Builder clearField(
            com.google.protobuf.Descriptors.FieldDescriptor field) {
          return super.clearField(field);
        }
        @java.lang.Override
        public Builder clearOneof(
            com.google.protobuf.Descriptors.OneofDescriptor oneof) {
          return super.clearOneof(oneof);
        }
        @java.lang.Override
        public Builder setRepeatedField(
            com.google.protobuf.Descriptors.FieldDescriptor field,
            int index, java.lang.Object value) {
          return super.setRepeatedField(field, index, value);
        }
        @java.lang.Override
        public Builder addRepeatedField(
            com.google.protobuf.Descriptors.FieldDescriptor field,
            java.lang.Object value) {
          return super.addRepeatedField(field, value);
        }
        @java.lang.Override
        public Builder mergeFrom(com.google.protobuf.Message other) {
          if (other instanceof perfetto.protos.PerfEventsOuterClass.PerfEvents.RawEvent) {
            return mergeFrom((perfetto.protos.PerfEventsOuterClass.PerfEvents.RawEvent)other);
          } else {
            super.mergeFrom(other);
            return this;
          }
        }

        public Builder mergeFrom(perfetto.protos.PerfEventsOuterClass.PerfEvents.RawEvent other) {
          if (other == perfetto.protos.PerfEventsOuterClass.PerfEvents.RawEvent.getDefaultInstance()) return this;
          if (other.hasType()) {
            setType(other.getType());
          }
          if (other.hasConfig()) {
            setConfig(other.getConfig());
          }
          if (other.hasConfig1()) {
            setConfig1(other.getConfig1());
          }
          if (other.hasConfig2()) {
            setConfig2(other.getConfig2());
          }
          this.mergeUnknownFields(other.getUnknownFields());
          onChanged();
          return this;
        }

        @java.lang.Override
        public final boolean isInitialized() {
          return true;
        }

        @java.lang.Override
        public Builder mergeFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws java.io.IOException {
          if (extensionRegistry == null) {
            throw new java.lang.NullPointerException();
          }
          try {
            boolean done = false;
            while (!done) {
              int tag = input.readTag();
              switch (tag) {
                case 0:
                  done = true;
                  break;
                case 8: {
                  type_ = input.readUInt32();
                  bitField0_ |= 0x00000001;
                  break;
                } // case 8
                case 16: {
                  config_ = input.readUInt64();
                  bitField0_ |= 0x00000002;
                  break;
                } // case 16
                case 24: {
                  config1_ = input.readUInt64();
                  bitField0_ |= 0x00000004;
                  break;
                } // case 24
                case 32: {
                  config2_ = input.readUInt64();
                  bitField0_ |= 0x00000008;
                  break;
                } // case 32
                default: {
                  if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                    done = true; // was an endgroup tag
                  }
                  break;
                } // default:
              } // switch (tag)
            } // while (!done)
          } catch (com.google.protobuf.InvalidProtocolBufferException e) {
            throw e.unwrapIOException();
          } finally {
            onChanged();
          } // finally
          return this;
        }
        private int bitField0_;

        private int type_ ;
        /**
         * <code>optional uint32 type = 1;</code>
         * @return Whether the type field is set.
         */
        @java.lang.Override
        public boolean hasType() {
          return ((bitField0_ & 0x00000001) != 0);
        }
        /**
         * <code>optional uint32 type = 1;</code>
         * @return The type.
         */
        @java.lang.Override
        public int getType() {
          return type_;
        }
        /**
         * <code>optional uint32 type = 1;</code>
         * @param value The type to set.
         * @return This builder for chaining.
         */
        public Builder setType(int value) {
          
          type_ = value;
          bitField0_ |= 0x00000001;
          onChanged();
          return this;
        }
        /**
         * <code>optional uint32 type = 1;</code>
         * @return This builder for chaining.
         */
        public Builder clearType() {
          bitField0_ = (bitField0_ & ~0x00000001);
          type_ = 0;
          onChanged();
          return this;
        }

        private long config_ ;
        /**
         * <code>optional uint64 config = 2;</code>
         * @return Whether the config field is set.
         */
        @java.lang.Override
        public boolean hasConfig() {
          return ((bitField0_ & 0x00000002) != 0);
        }
        /**
         * <code>optional uint64 config = 2;</code>
         * @return The config.
         */
        @java.lang.Override
        public long getConfig() {
          return config_;
        }
        /**
         * <code>optional uint64 config = 2;</code>
         * @param value The config to set.
         * @return This builder for chaining.
         */
        public Builder setConfig(long value) {
          
          config_ = value;
          bitField0_ |= 0x00000002;
          onChanged();
          return this;
        }
        /**
         * <code>optional uint64 config = 2;</code>
         * @return This builder for chaining.
         */
        public Builder clearConfig() {
          bitField0_ = (bitField0_ & ~0x00000002);
          config_ = 0L;
          onChanged();
          return this;
        }

        private long config1_ ;
        /**
         * <code>optional uint64 config1 = 3;</code>
         * @return Whether the config1 field is set.
         */
        @java.lang.Override
        public boolean hasConfig1() {
          return ((bitField0_ & 0x00000004) != 0);
        }
        /**
         * <code>optional uint64 config1 = 3;</code>
         * @return The config1.
         */
        @java.lang.Override
        public long getConfig1() {
          return config1_;
        }
        /**
         * <code>optional uint64 config1 = 3;</code>
         * @param value The config1 to set.
         * @return This builder for chaining.
         */
        public Builder setConfig1(long value) {
          
          config1_ = value;
          bitField0_ |= 0x00000004;
          onChanged();
          return this;
        }
        /**
         * <code>optional uint64 config1 = 3;</code>
         * @return This builder for chaining.
         */
        public Builder clearConfig1() {
          bitField0_ = (bitField0_ & ~0x00000004);
          config1_ = 0L;
          onChanged();
          return this;
        }

        private long config2_ ;
        /**
         * <code>optional uint64 config2 = 4;</code>
         * @return Whether the config2 field is set.
         */
        @java.lang.Override
        public boolean hasConfig2() {
          return ((bitField0_ & 0x00000008) != 0);
        }
        /**
         * <code>optional uint64 config2 = 4;</code>
         * @return The config2.
         */
        @java.lang.Override
        public long getConfig2() {
          return config2_;
        }
        /**
         * <code>optional uint64 config2 = 4;</code>
         * @param value The config2 to set.
         * @return This builder for chaining.
         */
        public Builder setConfig2(long value) {
          
          config2_ = value;
          bitField0_ |= 0x00000008;
          onChanged();
          return this;
        }
        /**
         * <code>optional uint64 config2 = 4;</code>
         * @return This builder for chaining.
         */
        public Builder clearConfig2() {
          bitField0_ = (bitField0_ & ~0x00000008);
          config2_ = 0L;
          onChanged();
          return this;
        }
        @java.lang.Override
        public final Builder setUnknownFields(
            final com.google.protobuf.UnknownFieldSet unknownFields) {
          return super.setUnknownFields(unknownFields);
        }

        @java.lang.Override
        public final Builder mergeUnknownFields(
            final com.google.protobuf.UnknownFieldSet unknownFields) {
          return super.mergeUnknownFields(unknownFields);
        }


        // @@protoc_insertion_point(builder_scope:perfetto.protos.PerfEvents.RawEvent)
      }

      // @@protoc_insertion_point(class_scope:perfetto.protos.PerfEvents.RawEvent)
      private static final perfetto.protos.PerfEventsOuterClass.PerfEvents.RawEvent DEFAULT_INSTANCE;
      static {
        DEFAULT_INSTANCE = new perfetto.protos.PerfEventsOuterClass.PerfEvents.RawEvent();
      }

      public static perfetto.protos.PerfEventsOuterClass.PerfEvents.RawEvent getDefaultInstance() {
        return DEFAULT_INSTANCE;
      }

      @java.lang.Deprecated public static final com.google.protobuf.Parser<RawEvent>
          PARSER = new com.google.protobuf.AbstractParser<RawEvent>() {
        @java.lang.Override
        public RawEvent parsePartialFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws com.google.protobuf.InvalidProtocolBufferException {
          Builder builder = newBuilder();
          try {
            builder.mergeFrom(input, extensionRegistry);
          } catch (com.google.protobuf.InvalidProtocolBufferException e) {
            throw e.setUnfinishedMessage(builder.buildPartial());
          } catch (com.google.protobuf.UninitializedMessageException e) {
            throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
          } catch (java.io.IOException e) {
            throw new com.google.protobuf.InvalidProtocolBufferException(e)
                .setUnfinishedMessage(builder.buildPartial());
          }
          return builder.buildPartial();
        }
      };

      public static com.google.protobuf.Parser<RawEvent> parser() {
        return PARSER;
      }

      @java.lang.Override
      public com.google.protobuf.Parser<RawEvent> getParserForType() {
        return PARSER;
      }

      @java.lang.Override
      public perfetto.protos.PerfEventsOuterClass.PerfEvents.RawEvent getDefaultInstanceForType() {
        return DEFAULT_INSTANCE;
      }

    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getUnknownFields().writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      size += getUnknownFields().getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof perfetto.protos.PerfEventsOuterClass.PerfEvents)) {
        return super.equals(obj);
      }
      perfetto.protos.PerfEventsOuterClass.PerfEvents other = (perfetto.protos.PerfEventsOuterClass.PerfEvents) obj;

      if (!getUnknownFields().equals(other.getUnknownFields())) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      hash = (29 * hash) + getUnknownFields().hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static perfetto.protos.PerfEventsOuterClass.PerfEvents parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static perfetto.protos.PerfEventsOuterClass.PerfEvents parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static perfetto.protos.PerfEventsOuterClass.PerfEvents parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static perfetto.protos.PerfEventsOuterClass.PerfEvents parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static perfetto.protos.PerfEventsOuterClass.PerfEvents parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static perfetto.protos.PerfEventsOuterClass.PerfEvents parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static perfetto.protos.PerfEventsOuterClass.PerfEvents parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static perfetto.protos.PerfEventsOuterClass.PerfEvents parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static perfetto.protos.PerfEventsOuterClass.PerfEvents parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static perfetto.protos.PerfEventsOuterClass.PerfEvents parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static perfetto.protos.PerfEventsOuterClass.PerfEvents parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static perfetto.protos.PerfEventsOuterClass.PerfEvents parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(perfetto.protos.PerfEventsOuterClass.PerfEvents prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * <pre>
     * Next id: 12
     * </pre>
     *
     * Protobuf type {@code perfetto.protos.PerfEvents}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:perfetto.protos.PerfEvents)
        perfetto.protos.PerfEventsOuterClass.PerfEventsOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return perfetto.protos.PerfEventsOuterClass.internal_static_perfetto_protos_PerfEvents_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return perfetto.protos.PerfEventsOuterClass.internal_static_perfetto_protos_PerfEvents_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                perfetto.protos.PerfEventsOuterClass.PerfEvents.class, perfetto.protos.PerfEventsOuterClass.PerfEvents.Builder.class);
      }

      // Construct using perfetto.protos.PerfEventsOuterClass.PerfEvents.newBuilder()
      private Builder() {

      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);

      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return perfetto.protos.PerfEventsOuterClass.internal_static_perfetto_protos_PerfEvents_descriptor;
      }

      @java.lang.Override
      public perfetto.protos.PerfEventsOuterClass.PerfEvents getDefaultInstanceForType() {
        return perfetto.protos.PerfEventsOuterClass.PerfEvents.getDefaultInstance();
      }

      @java.lang.Override
      public perfetto.protos.PerfEventsOuterClass.PerfEvents build() {
        perfetto.protos.PerfEventsOuterClass.PerfEvents result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public perfetto.protos.PerfEventsOuterClass.PerfEvents buildPartial() {
        perfetto.protos.PerfEventsOuterClass.PerfEvents result = new perfetto.protos.PerfEventsOuterClass.PerfEvents(this);
        onBuilt();
        return result;
      }

      @java.lang.Override
      public Builder clone() {
        return super.clone();
      }
      @java.lang.Override
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.setField(field, value);
      }
      @java.lang.Override
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return super.clearField(field);
      }
      @java.lang.Override
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return super.clearOneof(oneof);
      }
      @java.lang.Override
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, java.lang.Object value) {
        return super.setRepeatedField(field, index, value);
      }
      @java.lang.Override
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.addRepeatedField(field, value);
      }
      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof perfetto.protos.PerfEventsOuterClass.PerfEvents) {
          return mergeFrom((perfetto.protos.PerfEventsOuterClass.PerfEvents)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(perfetto.protos.PerfEventsOuterClass.PerfEvents other) {
        if (other == perfetto.protos.PerfEventsOuterClass.PerfEvents.getDefaultInstance()) return this;
        this.mergeUnknownFields(other.getUnknownFields());
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        if (extensionRegistry == null) {
          throw new java.lang.NullPointerException();
        }
        try {
          boolean done = false;
          while (!done) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                done = true;
                break;
              default: {
                if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                  done = true; // was an endgroup tag
                }
                break;
              } // default:
            } // switch (tag)
          } // while (!done)
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.unwrapIOException();
        } finally {
          onChanged();
        } // finally
        return this;
      }
      @java.lang.Override
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      @java.lang.Override
      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:perfetto.protos.PerfEvents)
    }

    // @@protoc_insertion_point(class_scope:perfetto.protos.PerfEvents)
    private static final perfetto.protos.PerfEventsOuterClass.PerfEvents DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new perfetto.protos.PerfEventsOuterClass.PerfEvents();
    }

    public static perfetto.protos.PerfEventsOuterClass.PerfEvents getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    @java.lang.Deprecated public static final com.google.protobuf.Parser<PerfEvents>
        PARSER = new com.google.protobuf.AbstractParser<PerfEvents>() {
      @java.lang.Override
      public PerfEvents parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        Builder builder = newBuilder();
        try {
          builder.mergeFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.setUnfinishedMessage(builder.buildPartial());
        } catch (com.google.protobuf.UninitializedMessageException e) {
          throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
        } catch (java.io.IOException e) {
          throw new com.google.protobuf.InvalidProtocolBufferException(e)
              .setUnfinishedMessage(builder.buildPartial());
        }
        return builder.buildPartial();
      }
    };

    public static com.google.protobuf.Parser<PerfEvents> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<PerfEvents> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public perfetto.protos.PerfEventsOuterClass.PerfEvents getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_perfetto_protos_PerfEvents_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_perfetto_protos_PerfEvents_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_perfetto_protos_PerfEvents_Timebase_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_perfetto_protos_PerfEvents_Timebase_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_perfetto_protos_PerfEvents_Tracepoint_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_perfetto_protos_PerfEvents_Tracepoint_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_perfetto_protos_PerfEvents_RawEvent_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_perfetto_protos_PerfEvents_RawEvent_fieldAccessorTable;

  public static com.google.protobuf.Descriptors.FileDescriptor
      getDescriptor() {
    return descriptor;
  }
  private static  com.google.protobuf.Descriptors.FileDescriptor
      descriptor;
  static {
    java.lang.String[] descriptorData = {
      "\n(protos/perfetto/common/perf_events.pro" +
      "to\022\017perfetto.protos\"\307\010\n\nPerfEvents\032\305\002\n\010T" +
      "imebase\022\023\n\tfrequency\030\002 \001(\004H\000\022\020\n\006period\030\001" +
      " \001(\004H\000\0226\n\007counter\030\004 \001(\0162#.perfetto.proto" +
      "s.PerfEvents.CounterH\001\022<\n\ntracepoint\030\003 \001" +
      "(\0132&.perfetto.protos.PerfEvents.Tracepoi" +
      "ntH\001\0229\n\traw_event\030\005 \001(\0132$.perfetto.proto" +
      "s.PerfEvents.RawEventH\001\022>\n\017timestamp_clo" +
      "ck\030\013 \001(\0162%.perfetto.protos.PerfEvents.Pe" +
      "rfClock\022\014\n\004name\030\n \001(\tB\n\n\010intervalB\007\n\005eve" +
      "nt\032*\n\nTracepoint\022\014\n\004name\030\001 \001(\t\022\016\n\006filter" +
      "\030\002 \001(\t\032J\n\010RawEvent\022\014\n\004type\030\001 \001(\r\022\016\n\006conf" +
      "ig\030\002 \001(\004\022\017\n\007config1\030\003 \001(\004\022\017\n\007config2\030\004 \001" +
      "(\004\"\350\003\n\007Counter\022\023\n\017UNKNOWN_COUNTER\020\000\022\020\n\014S" +
      "W_CPU_CLOCK\020\001\022\022\n\016SW_PAGE_FAULTS\020\002\022\021\n\rSW_" +
      "TASK_CLOCK\020\003\022\027\n\023SW_CONTEXT_SWITCHES\020\004\022\025\n" +
      "\021SW_CPU_MIGRATIONS\020\005\022\026\n\022SW_PAGE_FAULTS_M" +
      "IN\020\006\022\026\n\022SW_PAGE_FAULTS_MAJ\020\007\022\027\n\023SW_ALIGN" +
      "MENT_FAULTS\020\010\022\027\n\023SW_EMULATION_FAULTS\020\t\022\014" +
      "\n\010SW_DUMMY\020\024\022\021\n\rHW_CPU_CYCLES\020\n\022\023\n\017HW_IN" +
      "STRUCTIONS\020\013\022\027\n\023HW_CACHE_REFERENCES\020\014\022\023\n" +
      "\017HW_CACHE_MISSES\020\r\022\032\n\026HW_BRANCH_INSTRUCT" +
      "IONS\020\016\022\024\n\020HW_BRANCH_MISSES\020\017\022\021\n\rHW_BUS_C" +
      "YCLES\020\020\022\036\n\032HW_STALLED_CYCLES_FRONTEND\020\021\022" +
      "\035\n\031HW_STALLED_CYCLES_BACKEND\020\022\022\025\n\021HW_REF" +
      "_CPU_CYCLES\020\023\"\215\001\n\tPerfClock\022\026\n\022UNKNOWN_P" +
      "ERF_CLOCK\020\000\022\027\n\023PERF_CLOCK_REALTIME\020\001\022\030\n\024" +
      "PERF_CLOCK_MONOTONIC\020\002\022\034\n\030PERF_CLOCK_MON" +
      "OTONIC_RAW\020\003\022\027\n\023PERF_CLOCK_BOOTTIME\020\004"
    };
    descriptor = com.google.protobuf.Descriptors.FileDescriptor
      .internalBuildGeneratedFileFrom(descriptorData,
        new com.google.protobuf.Descriptors.FileDescriptor[] {
        });
    internal_static_perfetto_protos_PerfEvents_descriptor =
      getDescriptor().getMessageTypes().get(0);
    internal_static_perfetto_protos_PerfEvents_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_perfetto_protos_PerfEvents_descriptor,
        new java.lang.String[] { });
    internal_static_perfetto_protos_PerfEvents_Timebase_descriptor =
      internal_static_perfetto_protos_PerfEvents_descriptor.getNestedTypes().get(0);
    internal_static_perfetto_protos_PerfEvents_Timebase_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_perfetto_protos_PerfEvents_Timebase_descriptor,
        new java.lang.String[] { "Frequency", "Period", "Counter", "Tracepoint", "RawEvent", "TimestampClock", "Name", "Interval", "Event", });
    internal_static_perfetto_protos_PerfEvents_Tracepoint_descriptor =
      internal_static_perfetto_protos_PerfEvents_descriptor.getNestedTypes().get(1);
    internal_static_perfetto_protos_PerfEvents_Tracepoint_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_perfetto_protos_PerfEvents_Tracepoint_descriptor,
        new java.lang.String[] { "Name", "Filter", });
    internal_static_perfetto_protos_PerfEvents_RawEvent_descriptor =
      internal_static_perfetto_protos_PerfEvents_descriptor.getNestedTypes().get(2);
    internal_static_perfetto_protos_PerfEvents_RawEvent_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_perfetto_protos_PerfEvents_RawEvent_descriptor,
        new java.lang.String[] { "Type", "Config", "Config1", "Config2", });
  }

  // @@protoc_insertion_point(outer_class_scope)
}
