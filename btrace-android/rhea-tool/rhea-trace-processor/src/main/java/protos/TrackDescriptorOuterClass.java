// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: protos/perfetto/trace/track_event/track_descriptor.proto

package perfetto.protos;

public final class TrackDescriptorOuterClass {
  private TrackDescriptorOuterClass() {}
  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistryLite registry) {
  }

  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistry registry) {
    registerAllExtensions(
        (com.google.protobuf.ExtensionRegistryLite) registry);
  }
  public interface TrackDescriptorOrBuilder extends
      // @@protoc_insertion_point(interface_extends:perfetto.protos.TrackDescriptor)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <pre>
     * Unique ID that identifies this track. This ID is global to the whole trace.
     * Producers should ensure that it is unlikely to clash with IDs emitted by
     * other producers. A value of 0 denotes the implicit trace-global track.
     * For example, legacy TRACE_EVENT macros may use a hash involving the async
     * event id + id_scope, pid, and/or tid to compute this ID.
     * </pre>
     *
     * <code>optional uint64 uuid = 1;</code>
     * @return Whether the uuid field is set.
     */
    boolean hasUuid();
    /**
     * <pre>
     * Unique ID that identifies this track. This ID is global to the whole trace.
     * Producers should ensure that it is unlikely to clash with IDs emitted by
     * other producers. A value of 0 denotes the implicit trace-global track.
     * For example, legacy TRACE_EVENT macros may use a hash involving the async
     * event id + id_scope, pid, and/or tid to compute this ID.
     * </pre>
     *
     * <code>optional uint64 uuid = 1;</code>
     * @return The uuid.
     */
    long getUuid();

    /**
     * <pre>
     * A parent track reference can be used to describe relationships between
     * tracks. For example, to define an asynchronous track which is scoped to a
     * specific process, specify the uuid for that process's process track here.
     * Similarly, to associate a COUNTER_THREAD_TIME_NS counter track with a
     * thread, specify the uuid for that thread's thread track here.
     * </pre>
     *
     * <code>optional uint64 parent_uuid = 5;</code>
     * @return Whether the parentUuid field is set.
     */
    boolean hasParentUuid();
    /**
     * <pre>
     * A parent track reference can be used to describe relationships between
     * tracks. For example, to define an asynchronous track which is scoped to a
     * specific process, specify the uuid for that process's process track here.
     * Similarly, to associate a COUNTER_THREAD_TIME_NS counter track with a
     * thread, specify the uuid for that thread's thread track here.
     * </pre>
     *
     * <code>optional uint64 parent_uuid = 5;</code>
     * @return The parentUuid.
     */
    long getParentUuid();

    /**
     * <pre>
     * Name of the track. Optional - if unspecified, it may be derived from the
     * process/thread name (process/thread tracks), the first event's name (async
     * tracks), or counter name (counter tracks).
     * </pre>
     *
     * <code>optional string name = 2;</code>
     * @return Whether the name field is set.
     */
    boolean hasName();
    /**
     * <pre>
     * Name of the track. Optional - if unspecified, it may be derived from the
     * process/thread name (process/thread tracks), the first event's name (async
     * tracks), or counter name (counter tracks).
     * </pre>
     *
     * <code>optional string name = 2;</code>
     * @return The name.
     */
    java.lang.String getName();
    /**
     * <pre>
     * Name of the track. Optional - if unspecified, it may be derived from the
     * process/thread name (process/thread tracks), the first event's name (async
     * tracks), or counter name (counter tracks).
     * </pre>
     *
     * <code>optional string name = 2;</code>
     * @return The bytes for name.
     */
    com.google.protobuf.ByteString
        getNameBytes();

    /**
     * <pre>
     * Associate the track with a process, making it the process-global track.
     * There should only be one such track per process (usually for instant
     * events; trace processor uses this fact to detect pid reuse). If you need
     * more (e.g. for asynchronous events), create child tracks using parent_uuid.
     * Trace processor will merge events on a process track with slice-type events
     * from other sources (e.g. ftrace) for the same process into a single
     * timeline view.
     * </pre>
     *
     * <code>optional .perfetto.protos.ProcessDescriptor process = 3;</code>
     * @return Whether the process field is set.
     */
    boolean hasProcess();
    /**
     * <pre>
     * Associate the track with a process, making it the process-global track.
     * There should only be one such track per process (usually for instant
     * events; trace processor uses this fact to detect pid reuse). If you need
     * more (e.g. for asynchronous events), create child tracks using parent_uuid.
     * Trace processor will merge events on a process track with slice-type events
     * from other sources (e.g. ftrace) for the same process into a single
     * timeline view.
     * </pre>
     *
     * <code>optional .perfetto.protos.ProcessDescriptor process = 3;</code>
     * @return The process.
     */
    perfetto.protos.ProcessDescriptorOuterClass.ProcessDescriptor getProcess();
    /**
     * <pre>
     * Associate the track with a process, making it the process-global track.
     * There should only be one such track per process (usually for instant
     * events; trace processor uses this fact to detect pid reuse). If you need
     * more (e.g. for asynchronous events), create child tracks using parent_uuid.
     * Trace processor will merge events on a process track with slice-type events
     * from other sources (e.g. ftrace) for the same process into a single
     * timeline view.
     * </pre>
     *
     * <code>optional .perfetto.protos.ProcessDescriptor process = 3;</code>
     */
    perfetto.protos.ProcessDescriptorOuterClass.ProcessDescriptorOrBuilder getProcessOrBuilder();

    /**
     * <code>optional .perfetto.protos.ChromeProcessDescriptor chrome_process = 6;</code>
     * @return Whether the chromeProcess field is set.
     */
    boolean hasChromeProcess();
    /**
     * <code>optional .perfetto.protos.ChromeProcessDescriptor chrome_process = 6;</code>
     * @return The chromeProcess.
     */
    perfetto.protos.ChromeProcessDescriptorOuterClass.ChromeProcessDescriptor getChromeProcess();
    /**
     * <code>optional .perfetto.protos.ChromeProcessDescriptor chrome_process = 6;</code>
     */
    perfetto.protos.ChromeProcessDescriptorOuterClass.ChromeProcessDescriptorOrBuilder getChromeProcessOrBuilder();

    /**
     * <pre>
     * Associate the track with a thread, indicating that the track's events
     * describe synchronous code execution on the thread. There should only be one
     * such track per thread (trace processor uses this fact to detect tid reuse).
     * Trace processor will merge events on a thread track with slice-type events
     * from other sources (e.g. ftrace) for the same thread into a single timeline
     * view.
     * </pre>
     *
     * <code>optional .perfetto.protos.ThreadDescriptor thread = 4;</code>
     * @return Whether the thread field is set.
     */
    boolean hasThread();
    /**
     * <pre>
     * Associate the track with a thread, indicating that the track's events
     * describe synchronous code execution on the thread. There should only be one
     * such track per thread (trace processor uses this fact to detect tid reuse).
     * Trace processor will merge events on a thread track with slice-type events
     * from other sources (e.g. ftrace) for the same thread into a single timeline
     * view.
     * </pre>
     *
     * <code>optional .perfetto.protos.ThreadDescriptor thread = 4;</code>
     * @return The thread.
     */
    perfetto.protos.ThreadDescriptorOuterClass.ThreadDescriptor getThread();
    /**
     * <pre>
     * Associate the track with a thread, indicating that the track's events
     * describe synchronous code execution on the thread. There should only be one
     * such track per thread (trace processor uses this fact to detect tid reuse).
     * Trace processor will merge events on a thread track with slice-type events
     * from other sources (e.g. ftrace) for the same thread into a single timeline
     * view.
     * </pre>
     *
     * <code>optional .perfetto.protos.ThreadDescriptor thread = 4;</code>
     */
    perfetto.protos.ThreadDescriptorOuterClass.ThreadDescriptorOrBuilder getThreadOrBuilder();

    /**
     * <code>optional .perfetto.protos.ChromeThreadDescriptor chrome_thread = 7;</code>
     * @return Whether the chromeThread field is set.
     */
    boolean hasChromeThread();
    /**
     * <code>optional .perfetto.protos.ChromeThreadDescriptor chrome_thread = 7;</code>
     * @return The chromeThread.
     */
    perfetto.protos.ChromeThreadDescriptorOuterClass.ChromeThreadDescriptor getChromeThread();
    /**
     * <code>optional .perfetto.protos.ChromeThreadDescriptor chrome_thread = 7;</code>
     */
    perfetto.protos.ChromeThreadDescriptorOuterClass.ChromeThreadDescriptorOrBuilder getChromeThreadOrBuilder();

    /**
     * <pre>
     * Descriptor for a counter track. If set, the track will only support
     * TYPE_COUNTER TrackEvents (and values provided via TrackEvent's
     * |extra_counter_values|).
     * </pre>
     *
     * <code>optional .perfetto.protos.CounterDescriptor counter = 8;</code>
     * @return Whether the counter field is set.
     */
    boolean hasCounter();
    /**
     * <pre>
     * Descriptor for a counter track. If set, the track will only support
     * TYPE_COUNTER TrackEvents (and values provided via TrackEvent's
     * |extra_counter_values|).
     * </pre>
     *
     * <code>optional .perfetto.protos.CounterDescriptor counter = 8;</code>
     * @return The counter.
     */
    perfetto.protos.CounterDescriptorOuterClass.CounterDescriptor getCounter();
    /**
     * <pre>
     * Descriptor for a counter track. If set, the track will only support
     * TYPE_COUNTER TrackEvents (and values provided via TrackEvent's
     * |extra_counter_values|).
     * </pre>
     *
     * <code>optional .perfetto.protos.CounterDescriptor counter = 8;</code>
     */
    perfetto.protos.CounterDescriptorOuterClass.CounterDescriptorOrBuilder getCounterOrBuilder();
  }
  /**
   * <pre>
   * Defines a track for TrackEvents. Slices and instant events on the same track
   * will be nested based on their timestamps, see TrackEvent::Type.
   * A TrackDescriptor only needs to be emitted by one trace writer / producer and
   * is valid for the entirety of the trace. To ensure the descriptor isn't lost
   * when the ring buffer wraps, it should be reemitted whenever incremental state
   * is cleared.
   * As a fallback, TrackEvents emitted without an explicit track association will
   * be associated with an implicit trace-global track (uuid = 0), see also
   * |TrackEvent::track_uuid|. It is possible but not necessary to emit a
   * TrackDescriptor for this implicit track.
   * Next id: 9.
   * </pre>
   *
   * Protobuf type {@code perfetto.protos.TrackDescriptor}
   */
  public static final class TrackDescriptor extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:perfetto.protos.TrackDescriptor)
      TrackDescriptorOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use TrackDescriptor.newBuilder() to construct.
    private TrackDescriptor(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private TrackDescriptor() {
      name_ = "";
    }

    @java.lang.Override
    @SuppressWarnings({"unused"})
    protected java.lang.Object newInstance(
        UnusedPrivateParameter unused) {
      return new TrackDescriptor();
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return perfetto.protos.TrackDescriptorOuterClass.internal_static_perfetto_protos_TrackDescriptor_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return perfetto.protos.TrackDescriptorOuterClass.internal_static_perfetto_protos_TrackDescriptor_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              perfetto.protos.TrackDescriptorOuterClass.TrackDescriptor.class, perfetto.protos.TrackDescriptorOuterClass.TrackDescriptor.Builder.class);
    }

    private int bitField0_;
    public static final int UUID_FIELD_NUMBER = 1;
    private long uuid_ = 0L;
    /**
     * <pre>
     * Unique ID that identifies this track. This ID is global to the whole trace.
     * Producers should ensure that it is unlikely to clash with IDs emitted by
     * other producers. A value of 0 denotes the implicit trace-global track.
     * For example, legacy TRACE_EVENT macros may use a hash involving the async
     * event id + id_scope, pid, and/or tid to compute this ID.
     * </pre>
     *
     * <code>optional uint64 uuid = 1;</code>
     * @return Whether the uuid field is set.
     */
    @java.lang.Override
    public boolean hasUuid() {
      return ((bitField0_ & 0x00000001) != 0);
    }
    /**
     * <pre>
     * Unique ID that identifies this track. This ID is global to the whole trace.
     * Producers should ensure that it is unlikely to clash with IDs emitted by
     * other producers. A value of 0 denotes the implicit trace-global track.
     * For example, legacy TRACE_EVENT macros may use a hash involving the async
     * event id + id_scope, pid, and/or tid to compute this ID.
     * </pre>
     *
     * <code>optional uint64 uuid = 1;</code>
     * @return The uuid.
     */
    @java.lang.Override
    public long getUuid() {
      return uuid_;
    }

    public static final int PARENT_UUID_FIELD_NUMBER = 5;
    private long parentUuid_ = 0L;
    /**
     * <pre>
     * A parent track reference can be used to describe relationships between
     * tracks. For example, to define an asynchronous track which is scoped to a
     * specific process, specify the uuid for that process's process track here.
     * Similarly, to associate a COUNTER_THREAD_TIME_NS counter track with a
     * thread, specify the uuid for that thread's thread track here.
     * </pre>
     *
     * <code>optional uint64 parent_uuid = 5;</code>
     * @return Whether the parentUuid field is set.
     */
    @java.lang.Override
    public boolean hasParentUuid() {
      return ((bitField0_ & 0x00000002) != 0);
    }
    /**
     * <pre>
     * A parent track reference can be used to describe relationships between
     * tracks. For example, to define an asynchronous track which is scoped to a
     * specific process, specify the uuid for that process's process track here.
     * Similarly, to associate a COUNTER_THREAD_TIME_NS counter track with a
     * thread, specify the uuid for that thread's thread track here.
     * </pre>
     *
     * <code>optional uint64 parent_uuid = 5;</code>
     * @return The parentUuid.
     */
    @java.lang.Override
    public long getParentUuid() {
      return parentUuid_;
    }

    public static final int NAME_FIELD_NUMBER = 2;
    @SuppressWarnings("serial")
    private volatile java.lang.Object name_ = "";
    /**
     * <pre>
     * Name of the track. Optional - if unspecified, it may be derived from the
     * process/thread name (process/thread tracks), the first event's name (async
     * tracks), or counter name (counter tracks).
     * </pre>
     *
     * <code>optional string name = 2;</code>
     * @return Whether the name field is set.
     */
    @java.lang.Override
    public boolean hasName() {
      return ((bitField0_ & 0x00000004) != 0);
    }
    /**
     * <pre>
     * Name of the track. Optional - if unspecified, it may be derived from the
     * process/thread name (process/thread tracks), the first event's name (async
     * tracks), or counter name (counter tracks).
     * </pre>
     *
     * <code>optional string name = 2;</code>
     * @return The name.
     */
    @java.lang.Override
    public java.lang.String getName() {
      java.lang.Object ref = name_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        if (bs.isValidUtf8()) {
          name_ = s;
        }
        return s;
      }
    }
    /**
     * <pre>
     * Name of the track. Optional - if unspecified, it may be derived from the
     * process/thread name (process/thread tracks), the first event's name (async
     * tracks), or counter name (counter tracks).
     * </pre>
     *
     * <code>optional string name = 2;</code>
     * @return The bytes for name.
     */
    @java.lang.Override
    public com.google.protobuf.ByteString
        getNameBytes() {
      java.lang.Object ref = name_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        name_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    public static final int PROCESS_FIELD_NUMBER = 3;
    private perfetto.protos.ProcessDescriptorOuterClass.ProcessDescriptor process_;
    /**
     * <pre>
     * Associate the track with a process, making it the process-global track.
     * There should only be one such track per process (usually for instant
     * events; trace processor uses this fact to detect pid reuse). If you need
     * more (e.g. for asynchronous events), create child tracks using parent_uuid.
     * Trace processor will merge events on a process track with slice-type events
     * from other sources (e.g. ftrace) for the same process into a single
     * timeline view.
     * </pre>
     *
     * <code>optional .perfetto.protos.ProcessDescriptor process = 3;</code>
     * @return Whether the process field is set.
     */
    @java.lang.Override
    public boolean hasProcess() {
      return ((bitField0_ & 0x00000008) != 0);
    }
    /**
     * <pre>
     * Associate the track with a process, making it the process-global track.
     * There should only be one such track per process (usually for instant
     * events; trace processor uses this fact to detect pid reuse). If you need
     * more (e.g. for asynchronous events), create child tracks using parent_uuid.
     * Trace processor will merge events on a process track with slice-type events
     * from other sources (e.g. ftrace) for the same process into a single
     * timeline view.
     * </pre>
     *
     * <code>optional .perfetto.protos.ProcessDescriptor process = 3;</code>
     * @return The process.
     */
    @java.lang.Override
    public perfetto.protos.ProcessDescriptorOuterClass.ProcessDescriptor getProcess() {
      return process_ == null ? perfetto.protos.ProcessDescriptorOuterClass.ProcessDescriptor.getDefaultInstance() : process_;
    }
    /**
     * <pre>
     * Associate the track with a process, making it the process-global track.
     * There should only be one such track per process (usually for instant
     * events; trace processor uses this fact to detect pid reuse). If you need
     * more (e.g. for asynchronous events), create child tracks using parent_uuid.
     * Trace processor will merge events on a process track with slice-type events
     * from other sources (e.g. ftrace) for the same process into a single
     * timeline view.
     * </pre>
     *
     * <code>optional .perfetto.protos.ProcessDescriptor process = 3;</code>
     */
    @java.lang.Override
    public perfetto.protos.ProcessDescriptorOuterClass.ProcessDescriptorOrBuilder getProcessOrBuilder() {
      return process_ == null ? perfetto.protos.ProcessDescriptorOuterClass.ProcessDescriptor.getDefaultInstance() : process_;
    }

    public static final int CHROME_PROCESS_FIELD_NUMBER = 6;
    private perfetto.protos.ChromeProcessDescriptorOuterClass.ChromeProcessDescriptor chromeProcess_;
    /**
     * <code>optional .perfetto.protos.ChromeProcessDescriptor chrome_process = 6;</code>
     * @return Whether the chromeProcess field is set.
     */
    @java.lang.Override
    public boolean hasChromeProcess() {
      return ((bitField0_ & 0x00000010) != 0);
    }
    /**
     * <code>optional .perfetto.protos.ChromeProcessDescriptor chrome_process = 6;</code>
     * @return The chromeProcess.
     */
    @java.lang.Override
    public perfetto.protos.ChromeProcessDescriptorOuterClass.ChromeProcessDescriptor getChromeProcess() {
      return chromeProcess_ == null ? perfetto.protos.ChromeProcessDescriptorOuterClass.ChromeProcessDescriptor.getDefaultInstance() : chromeProcess_;
    }
    /**
     * <code>optional .perfetto.protos.ChromeProcessDescriptor chrome_process = 6;</code>
     */
    @java.lang.Override
    public perfetto.protos.ChromeProcessDescriptorOuterClass.ChromeProcessDescriptorOrBuilder getChromeProcessOrBuilder() {
      return chromeProcess_ == null ? perfetto.protos.ChromeProcessDescriptorOuterClass.ChromeProcessDescriptor.getDefaultInstance() : chromeProcess_;
    }

    public static final int THREAD_FIELD_NUMBER = 4;
    private perfetto.protos.ThreadDescriptorOuterClass.ThreadDescriptor thread_;
    /**
     * <pre>
     * Associate the track with a thread, indicating that the track's events
     * describe synchronous code execution on the thread. There should only be one
     * such track per thread (trace processor uses this fact to detect tid reuse).
     * Trace processor will merge events on a thread track with slice-type events
     * from other sources (e.g. ftrace) for the same thread into a single timeline
     * view.
     * </pre>
     *
     * <code>optional .perfetto.protos.ThreadDescriptor thread = 4;</code>
     * @return Whether the thread field is set.
     */
    @java.lang.Override
    public boolean hasThread() {
      return ((bitField0_ & 0x00000020) != 0);
    }
    /**
     * <pre>
     * Associate the track with a thread, indicating that the track's events
     * describe synchronous code execution on the thread. There should only be one
     * such track per thread (trace processor uses this fact to detect tid reuse).
     * Trace processor will merge events on a thread track with slice-type events
     * from other sources (e.g. ftrace) for the same thread into a single timeline
     * view.
     * </pre>
     *
     * <code>optional .perfetto.protos.ThreadDescriptor thread = 4;</code>
     * @return The thread.
     */
    @java.lang.Override
    public perfetto.protos.ThreadDescriptorOuterClass.ThreadDescriptor getThread() {
      return thread_ == null ? perfetto.protos.ThreadDescriptorOuterClass.ThreadDescriptor.getDefaultInstance() : thread_;
    }
    /**
     * <pre>
     * Associate the track with a thread, indicating that the track's events
     * describe synchronous code execution on the thread. There should only be one
     * such track per thread (trace processor uses this fact to detect tid reuse).
     * Trace processor will merge events on a thread track with slice-type events
     * from other sources (e.g. ftrace) for the same thread into a single timeline
     * view.
     * </pre>
     *
     * <code>optional .perfetto.protos.ThreadDescriptor thread = 4;</code>
     */
    @java.lang.Override
    public perfetto.protos.ThreadDescriptorOuterClass.ThreadDescriptorOrBuilder getThreadOrBuilder() {
      return thread_ == null ? perfetto.protos.ThreadDescriptorOuterClass.ThreadDescriptor.getDefaultInstance() : thread_;
    }

    public static final int CHROME_THREAD_FIELD_NUMBER = 7;
    private perfetto.protos.ChromeThreadDescriptorOuterClass.ChromeThreadDescriptor chromeThread_;
    /**
     * <code>optional .perfetto.protos.ChromeThreadDescriptor chrome_thread = 7;</code>
     * @return Whether the chromeThread field is set.
     */
    @java.lang.Override
    public boolean hasChromeThread() {
      return ((bitField0_ & 0x00000040) != 0);
    }
    /**
     * <code>optional .perfetto.protos.ChromeThreadDescriptor chrome_thread = 7;</code>
     * @return The chromeThread.
     */
    @java.lang.Override
    public perfetto.protos.ChromeThreadDescriptorOuterClass.ChromeThreadDescriptor getChromeThread() {
      return chromeThread_ == null ? perfetto.protos.ChromeThreadDescriptorOuterClass.ChromeThreadDescriptor.getDefaultInstance() : chromeThread_;
    }
    /**
     * <code>optional .perfetto.protos.ChromeThreadDescriptor chrome_thread = 7;</code>
     */
    @java.lang.Override
    public perfetto.protos.ChromeThreadDescriptorOuterClass.ChromeThreadDescriptorOrBuilder getChromeThreadOrBuilder() {
      return chromeThread_ == null ? perfetto.protos.ChromeThreadDescriptorOuterClass.ChromeThreadDescriptor.getDefaultInstance() : chromeThread_;
    }

    public static final int COUNTER_FIELD_NUMBER = 8;
    private perfetto.protos.CounterDescriptorOuterClass.CounterDescriptor counter_;
    /**
     * <pre>
     * Descriptor for a counter track. If set, the track will only support
     * TYPE_COUNTER TrackEvents (and values provided via TrackEvent's
     * |extra_counter_values|).
     * </pre>
     *
     * <code>optional .perfetto.protos.CounterDescriptor counter = 8;</code>
     * @return Whether the counter field is set.
     */
    @java.lang.Override
    public boolean hasCounter() {
      return ((bitField0_ & 0x00000080) != 0);
    }
    /**
     * <pre>
     * Descriptor for a counter track. If set, the track will only support
     * TYPE_COUNTER TrackEvents (and values provided via TrackEvent's
     * |extra_counter_values|).
     * </pre>
     *
     * <code>optional .perfetto.protos.CounterDescriptor counter = 8;</code>
     * @return The counter.
     */
    @java.lang.Override
    public perfetto.protos.CounterDescriptorOuterClass.CounterDescriptor getCounter() {
      return counter_ == null ? perfetto.protos.CounterDescriptorOuterClass.CounterDescriptor.getDefaultInstance() : counter_;
    }
    /**
     * <pre>
     * Descriptor for a counter track. If set, the track will only support
     * TYPE_COUNTER TrackEvents (and values provided via TrackEvent's
     * |extra_counter_values|).
     * </pre>
     *
     * <code>optional .perfetto.protos.CounterDescriptor counter = 8;</code>
     */
    @java.lang.Override
    public perfetto.protos.CounterDescriptorOuterClass.CounterDescriptorOrBuilder getCounterOrBuilder() {
      return counter_ == null ? perfetto.protos.CounterDescriptorOuterClass.CounterDescriptor.getDefaultInstance() : counter_;
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (((bitField0_ & 0x00000001) != 0)) {
        output.writeUInt64(1, uuid_);
      }
      if (((bitField0_ & 0x00000004) != 0)) {
        com.google.protobuf.GeneratedMessageV3.writeString(output, 2, name_);
      }
      if (((bitField0_ & 0x00000008) != 0)) {
        output.writeMessage(3, getProcess());
      }
      if (((bitField0_ & 0x00000020) != 0)) {
        output.writeMessage(4, getThread());
      }
      if (((bitField0_ & 0x00000002) != 0)) {
        output.writeUInt64(5, parentUuid_);
      }
      if (((bitField0_ & 0x00000010) != 0)) {
        output.writeMessage(6, getChromeProcess());
      }
      if (((bitField0_ & 0x00000040) != 0)) {
        output.writeMessage(7, getChromeThread());
      }
      if (((bitField0_ & 0x00000080) != 0)) {
        output.writeMessage(8, getCounter());
      }
      getUnknownFields().writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) != 0)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt64Size(1, uuid_);
      }
      if (((bitField0_ & 0x00000004) != 0)) {
        size += com.google.protobuf.GeneratedMessageV3.computeStringSize(2, name_);
      }
      if (((bitField0_ & 0x00000008) != 0)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(3, getProcess());
      }
      if (((bitField0_ & 0x00000020) != 0)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(4, getThread());
      }
      if (((bitField0_ & 0x00000002) != 0)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt64Size(5, parentUuid_);
      }
      if (((bitField0_ & 0x00000010) != 0)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(6, getChromeProcess());
      }
      if (((bitField0_ & 0x00000040) != 0)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(7, getChromeThread());
      }
      if (((bitField0_ & 0x00000080) != 0)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(8, getCounter());
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof perfetto.protos.TrackDescriptorOuterClass.TrackDescriptor)) {
        return super.equals(obj);
      }
      perfetto.protos.TrackDescriptorOuterClass.TrackDescriptor other = (perfetto.protos.TrackDescriptorOuterClass.TrackDescriptor) obj;

      if (hasUuid() != other.hasUuid()) return false;
      if (hasUuid()) {
        if (getUuid()
            != other.getUuid()) return false;
      }
      if (hasParentUuid() != other.hasParentUuid()) return false;
      if (hasParentUuid()) {
        if (getParentUuid()
            != other.getParentUuid()) return false;
      }
      if (hasName() != other.hasName()) return false;
      if (hasName()) {
        if (!getName()
            .equals(other.getName())) return false;
      }
      if (hasProcess() != other.hasProcess()) return false;
      if (hasProcess()) {
        if (!getProcess()
            .equals(other.getProcess())) return false;
      }
      if (hasChromeProcess() != other.hasChromeProcess()) return false;
      if (hasChromeProcess()) {
        if (!getChromeProcess()
            .equals(other.getChromeProcess())) return false;
      }
      if (hasThread() != other.hasThread()) return false;
      if (hasThread()) {
        if (!getThread()
            .equals(other.getThread())) return false;
      }
      if (hasChromeThread() != other.hasChromeThread()) return false;
      if (hasChromeThread()) {
        if (!getChromeThread()
            .equals(other.getChromeThread())) return false;
      }
      if (hasCounter() != other.hasCounter()) return false;
      if (hasCounter()) {
        if (!getCounter()
            .equals(other.getCounter())) return false;
      }
      if (!getUnknownFields().equals(other.getUnknownFields())) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      if (hasUuid()) {
        hash = (37 * hash) + UUID_FIELD_NUMBER;
        hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
            getUuid());
      }
      if (hasParentUuid()) {
        hash = (37 * hash) + PARENT_UUID_FIELD_NUMBER;
        hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
            getParentUuid());
      }
      if (hasName()) {
        hash = (37 * hash) + NAME_FIELD_NUMBER;
        hash = (53 * hash) + getName().hashCode();
      }
      if (hasProcess()) {
        hash = (37 * hash) + PROCESS_FIELD_NUMBER;
        hash = (53 * hash) + getProcess().hashCode();
      }
      if (hasChromeProcess()) {
        hash = (37 * hash) + CHROME_PROCESS_FIELD_NUMBER;
        hash = (53 * hash) + getChromeProcess().hashCode();
      }
      if (hasThread()) {
        hash = (37 * hash) + THREAD_FIELD_NUMBER;
        hash = (53 * hash) + getThread().hashCode();
      }
      if (hasChromeThread()) {
        hash = (37 * hash) + CHROME_THREAD_FIELD_NUMBER;
        hash = (53 * hash) + getChromeThread().hashCode();
      }
      if (hasCounter()) {
        hash = (37 * hash) + COUNTER_FIELD_NUMBER;
        hash = (53 * hash) + getCounter().hashCode();
      }
      hash = (29 * hash) + getUnknownFields().hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static perfetto.protos.TrackDescriptorOuterClass.TrackDescriptor parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static perfetto.protos.TrackDescriptorOuterClass.TrackDescriptor parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static perfetto.protos.TrackDescriptorOuterClass.TrackDescriptor parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static perfetto.protos.TrackDescriptorOuterClass.TrackDescriptor parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static perfetto.protos.TrackDescriptorOuterClass.TrackDescriptor parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static perfetto.protos.TrackDescriptorOuterClass.TrackDescriptor parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static perfetto.protos.TrackDescriptorOuterClass.TrackDescriptor parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static perfetto.protos.TrackDescriptorOuterClass.TrackDescriptor parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static perfetto.protos.TrackDescriptorOuterClass.TrackDescriptor parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static perfetto.protos.TrackDescriptorOuterClass.TrackDescriptor parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static perfetto.protos.TrackDescriptorOuterClass.TrackDescriptor parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static perfetto.protos.TrackDescriptorOuterClass.TrackDescriptor parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(perfetto.protos.TrackDescriptorOuterClass.TrackDescriptor prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * <pre>
     * Defines a track for TrackEvents. Slices and instant events on the same track
     * will be nested based on their timestamps, see TrackEvent::Type.
     * A TrackDescriptor only needs to be emitted by one trace writer / producer and
     * is valid for the entirety of the trace. To ensure the descriptor isn't lost
     * when the ring buffer wraps, it should be reemitted whenever incremental state
     * is cleared.
     * As a fallback, TrackEvents emitted without an explicit track association will
     * be associated with an implicit trace-global track (uuid = 0), see also
     * |TrackEvent::track_uuid|. It is possible but not necessary to emit a
     * TrackDescriptor for this implicit track.
     * Next id: 9.
     * </pre>
     *
     * Protobuf type {@code perfetto.protos.TrackDescriptor}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:perfetto.protos.TrackDescriptor)
        perfetto.protos.TrackDescriptorOuterClass.TrackDescriptorOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return perfetto.protos.TrackDescriptorOuterClass.internal_static_perfetto_protos_TrackDescriptor_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return perfetto.protos.TrackDescriptorOuterClass.internal_static_perfetto_protos_TrackDescriptor_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                perfetto.protos.TrackDescriptorOuterClass.TrackDescriptor.class, perfetto.protos.TrackDescriptorOuterClass.TrackDescriptor.Builder.class);
      }

      // Construct using perfetto.protos.TrackDescriptorOuterClass.TrackDescriptor.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
          getProcessFieldBuilder();
          getChromeProcessFieldBuilder();
          getThreadFieldBuilder();
          getChromeThreadFieldBuilder();
          getCounterFieldBuilder();
        }
      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        bitField0_ = 0;
        uuid_ = 0L;
        parentUuid_ = 0L;
        name_ = "";
        process_ = null;
        if (processBuilder_ != null) {
          processBuilder_.dispose();
          processBuilder_ = null;
        }
        chromeProcess_ = null;
        if (chromeProcessBuilder_ != null) {
          chromeProcessBuilder_.dispose();
          chromeProcessBuilder_ = null;
        }
        thread_ = null;
        if (threadBuilder_ != null) {
          threadBuilder_.dispose();
          threadBuilder_ = null;
        }
        chromeThread_ = null;
        if (chromeThreadBuilder_ != null) {
          chromeThreadBuilder_.dispose();
          chromeThreadBuilder_ = null;
        }
        counter_ = null;
        if (counterBuilder_ != null) {
          counterBuilder_.dispose();
          counterBuilder_ = null;
        }
        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return perfetto.protos.TrackDescriptorOuterClass.internal_static_perfetto_protos_TrackDescriptor_descriptor;
      }

      @java.lang.Override
      public perfetto.protos.TrackDescriptorOuterClass.TrackDescriptor getDefaultInstanceForType() {
        return perfetto.protos.TrackDescriptorOuterClass.TrackDescriptor.getDefaultInstance();
      }

      @java.lang.Override
      public perfetto.protos.TrackDescriptorOuterClass.TrackDescriptor build() {
        perfetto.protos.TrackDescriptorOuterClass.TrackDescriptor result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public perfetto.protos.TrackDescriptorOuterClass.TrackDescriptor buildPartial() {
        perfetto.protos.TrackDescriptorOuterClass.TrackDescriptor result = new perfetto.protos.TrackDescriptorOuterClass.TrackDescriptor(this);
        if (bitField0_ != 0) { buildPartial0(result); }
        onBuilt();
        return result;
      }

      private void buildPartial0(perfetto.protos.TrackDescriptorOuterClass.TrackDescriptor result) {
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) != 0)) {
          result.uuid_ = uuid_;
          to_bitField0_ |= 0x00000001;
        }
        if (((from_bitField0_ & 0x00000002) != 0)) {
          result.parentUuid_ = parentUuid_;
          to_bitField0_ |= 0x00000002;
        }
        if (((from_bitField0_ & 0x00000004) != 0)) {
          result.name_ = name_;
          to_bitField0_ |= 0x00000004;
        }
        if (((from_bitField0_ & 0x00000008) != 0)) {
          result.process_ = processBuilder_ == null
              ? process_
              : processBuilder_.build();
          to_bitField0_ |= 0x00000008;
        }
        if (((from_bitField0_ & 0x00000010) != 0)) {
          result.chromeProcess_ = chromeProcessBuilder_ == null
              ? chromeProcess_
              : chromeProcessBuilder_.build();
          to_bitField0_ |= 0x00000010;
        }
        if (((from_bitField0_ & 0x00000020) != 0)) {
          result.thread_ = threadBuilder_ == null
              ? thread_
              : threadBuilder_.build();
          to_bitField0_ |= 0x00000020;
        }
        if (((from_bitField0_ & 0x00000040) != 0)) {
          result.chromeThread_ = chromeThreadBuilder_ == null
              ? chromeThread_
              : chromeThreadBuilder_.build();
          to_bitField0_ |= 0x00000040;
        }
        if (((from_bitField0_ & 0x00000080) != 0)) {
          result.counter_ = counterBuilder_ == null
              ? counter_
              : counterBuilder_.build();
          to_bitField0_ |= 0x00000080;
        }
        result.bitField0_ |= to_bitField0_;
      }

      @java.lang.Override
      public Builder clone() {
        return super.clone();
      }
      @java.lang.Override
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.setField(field, value);
      }
      @java.lang.Override
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return super.clearField(field);
      }
      @java.lang.Override
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return super.clearOneof(oneof);
      }
      @java.lang.Override
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, java.lang.Object value) {
        return super.setRepeatedField(field, index, value);
      }
      @java.lang.Override
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.addRepeatedField(field, value);
      }
      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof perfetto.protos.TrackDescriptorOuterClass.TrackDescriptor) {
          return mergeFrom((perfetto.protos.TrackDescriptorOuterClass.TrackDescriptor)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(perfetto.protos.TrackDescriptorOuterClass.TrackDescriptor other) {
        if (other == perfetto.protos.TrackDescriptorOuterClass.TrackDescriptor.getDefaultInstance()) return this;
        if (other.hasUuid()) {
          setUuid(other.getUuid());
        }
        if (other.hasParentUuid()) {
          setParentUuid(other.getParentUuid());
        }
        if (other.hasName()) {
          name_ = other.name_;
          bitField0_ |= 0x00000004;
          onChanged();
        }
        if (other.hasProcess()) {
          mergeProcess(other.getProcess());
        }
        if (other.hasChromeProcess()) {
          mergeChromeProcess(other.getChromeProcess());
        }
        if (other.hasThread()) {
          mergeThread(other.getThread());
        }
        if (other.hasChromeThread()) {
          mergeChromeThread(other.getChromeThread());
        }
        if (other.hasCounter()) {
          mergeCounter(other.getCounter());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        if (extensionRegistry == null) {
          throw new java.lang.NullPointerException();
        }
        try {
          boolean done = false;
          while (!done) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                done = true;
                break;
              case 8: {
                uuid_ = input.readUInt64();
                bitField0_ |= 0x00000001;
                break;
              } // case 8
              case 18: {
                name_ = input.readBytes();
                bitField0_ |= 0x00000004;
                break;
              } // case 18
              case 26: {
                input.readMessage(
                    getProcessFieldBuilder().getBuilder(),
                    extensionRegistry);
                bitField0_ |= 0x00000008;
                break;
              } // case 26
              case 34: {
                input.readMessage(
                    getThreadFieldBuilder().getBuilder(),
                    extensionRegistry);
                bitField0_ |= 0x00000020;
                break;
              } // case 34
              case 40: {
                parentUuid_ = input.readUInt64();
                bitField0_ |= 0x00000002;
                break;
              } // case 40
              case 50: {
                input.readMessage(
                    getChromeProcessFieldBuilder().getBuilder(),
                    extensionRegistry);
                bitField0_ |= 0x00000010;
                break;
              } // case 50
              case 58: {
                input.readMessage(
                    getChromeThreadFieldBuilder().getBuilder(),
                    extensionRegistry);
                bitField0_ |= 0x00000040;
                break;
              } // case 58
              case 66: {
                input.readMessage(
                    getCounterFieldBuilder().getBuilder(),
                    extensionRegistry);
                bitField0_ |= 0x00000080;
                break;
              } // case 66
              default: {
                if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                  done = true; // was an endgroup tag
                }
                break;
              } // default:
            } // switch (tag)
          } // while (!done)
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.unwrapIOException();
        } finally {
          onChanged();
        } // finally
        return this;
      }
      private int bitField0_;

      private long uuid_ ;
      /**
       * <pre>
       * Unique ID that identifies this track. This ID is global to the whole trace.
       * Producers should ensure that it is unlikely to clash with IDs emitted by
       * other producers. A value of 0 denotes the implicit trace-global track.
       * For example, legacy TRACE_EVENT macros may use a hash involving the async
       * event id + id_scope, pid, and/or tid to compute this ID.
       * </pre>
       *
       * <code>optional uint64 uuid = 1;</code>
       * @return Whether the uuid field is set.
       */
      @java.lang.Override
      public boolean hasUuid() {
        return ((bitField0_ & 0x00000001) != 0);
      }
      /**
       * <pre>
       * Unique ID that identifies this track. This ID is global to the whole trace.
       * Producers should ensure that it is unlikely to clash with IDs emitted by
       * other producers. A value of 0 denotes the implicit trace-global track.
       * For example, legacy TRACE_EVENT macros may use a hash involving the async
       * event id + id_scope, pid, and/or tid to compute this ID.
       * </pre>
       *
       * <code>optional uint64 uuid = 1;</code>
       * @return The uuid.
       */
      @java.lang.Override
      public long getUuid() {
        return uuid_;
      }
      /**
       * <pre>
       * Unique ID that identifies this track. This ID is global to the whole trace.
       * Producers should ensure that it is unlikely to clash with IDs emitted by
       * other producers. A value of 0 denotes the implicit trace-global track.
       * For example, legacy TRACE_EVENT macros may use a hash involving the async
       * event id + id_scope, pid, and/or tid to compute this ID.
       * </pre>
       *
       * <code>optional uint64 uuid = 1;</code>
       * @param value The uuid to set.
       * @return This builder for chaining.
       */
      public Builder setUuid(long value) {
        
        uuid_ = value;
        bitField0_ |= 0x00000001;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Unique ID that identifies this track. This ID is global to the whole trace.
       * Producers should ensure that it is unlikely to clash with IDs emitted by
       * other producers. A value of 0 denotes the implicit trace-global track.
       * For example, legacy TRACE_EVENT macros may use a hash involving the async
       * event id + id_scope, pid, and/or tid to compute this ID.
       * </pre>
       *
       * <code>optional uint64 uuid = 1;</code>
       * @return This builder for chaining.
       */
      public Builder clearUuid() {
        bitField0_ = (bitField0_ & ~0x00000001);
        uuid_ = 0L;
        onChanged();
        return this;
      }

      private long parentUuid_ ;
      /**
       * <pre>
       * A parent track reference can be used to describe relationships between
       * tracks. For example, to define an asynchronous track which is scoped to a
       * specific process, specify the uuid for that process's process track here.
       * Similarly, to associate a COUNTER_THREAD_TIME_NS counter track with a
       * thread, specify the uuid for that thread's thread track here.
       * </pre>
       *
       * <code>optional uint64 parent_uuid = 5;</code>
       * @return Whether the parentUuid field is set.
       */
      @java.lang.Override
      public boolean hasParentUuid() {
        return ((bitField0_ & 0x00000002) != 0);
      }
      /**
       * <pre>
       * A parent track reference can be used to describe relationships between
       * tracks. For example, to define an asynchronous track which is scoped to a
       * specific process, specify the uuid for that process's process track here.
       * Similarly, to associate a COUNTER_THREAD_TIME_NS counter track with a
       * thread, specify the uuid for that thread's thread track here.
       * </pre>
       *
       * <code>optional uint64 parent_uuid = 5;</code>
       * @return The parentUuid.
       */
      @java.lang.Override
      public long getParentUuid() {
        return parentUuid_;
      }
      /**
       * <pre>
       * A parent track reference can be used to describe relationships between
       * tracks. For example, to define an asynchronous track which is scoped to a
       * specific process, specify the uuid for that process's process track here.
       * Similarly, to associate a COUNTER_THREAD_TIME_NS counter track with a
       * thread, specify the uuid for that thread's thread track here.
       * </pre>
       *
       * <code>optional uint64 parent_uuid = 5;</code>
       * @param value The parentUuid to set.
       * @return This builder for chaining.
       */
      public Builder setParentUuid(long value) {
        
        parentUuid_ = value;
        bitField0_ |= 0x00000002;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * A parent track reference can be used to describe relationships between
       * tracks. For example, to define an asynchronous track which is scoped to a
       * specific process, specify the uuid for that process's process track here.
       * Similarly, to associate a COUNTER_THREAD_TIME_NS counter track with a
       * thread, specify the uuid for that thread's thread track here.
       * </pre>
       *
       * <code>optional uint64 parent_uuid = 5;</code>
       * @return This builder for chaining.
       */
      public Builder clearParentUuid() {
        bitField0_ = (bitField0_ & ~0x00000002);
        parentUuid_ = 0L;
        onChanged();
        return this;
      }

      private java.lang.Object name_ = "";
      /**
       * <pre>
       * Name of the track. Optional - if unspecified, it may be derived from the
       * process/thread name (process/thread tracks), the first event's name (async
       * tracks), or counter name (counter tracks).
       * </pre>
       *
       * <code>optional string name = 2;</code>
       * @return Whether the name field is set.
       */
      public boolean hasName() {
        return ((bitField0_ & 0x00000004) != 0);
      }
      /**
       * <pre>
       * Name of the track. Optional - if unspecified, it may be derived from the
       * process/thread name (process/thread tracks), the first event's name (async
       * tracks), or counter name (counter tracks).
       * </pre>
       *
       * <code>optional string name = 2;</code>
       * @return The name.
       */
      public java.lang.String getName() {
        java.lang.Object ref = name_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          if (bs.isValidUtf8()) {
            name_ = s;
          }
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <pre>
       * Name of the track. Optional - if unspecified, it may be derived from the
       * process/thread name (process/thread tracks), the first event's name (async
       * tracks), or counter name (counter tracks).
       * </pre>
       *
       * <code>optional string name = 2;</code>
       * @return The bytes for name.
       */
      public com.google.protobuf.ByteString
          getNameBytes() {
        java.lang.Object ref = name_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          name_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <pre>
       * Name of the track. Optional - if unspecified, it may be derived from the
       * process/thread name (process/thread tracks), the first event's name (async
       * tracks), or counter name (counter tracks).
       * </pre>
       *
       * <code>optional string name = 2;</code>
       * @param value The name to set.
       * @return This builder for chaining.
       */
      public Builder setName(
          java.lang.String value) {
        if (value == null) { throw new NullPointerException(); }
        name_ = value;
        bitField0_ |= 0x00000004;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Name of the track. Optional - if unspecified, it may be derived from the
       * process/thread name (process/thread tracks), the first event's name (async
       * tracks), or counter name (counter tracks).
       * </pre>
       *
       * <code>optional string name = 2;</code>
       * @return This builder for chaining.
       */
      public Builder clearName() {
        name_ = getDefaultInstance().getName();
        bitField0_ = (bitField0_ & ~0x00000004);
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Name of the track. Optional - if unspecified, it may be derived from the
       * process/thread name (process/thread tracks), the first event's name (async
       * tracks), or counter name (counter tracks).
       * </pre>
       *
       * <code>optional string name = 2;</code>
       * @param value The bytes for name to set.
       * @return This builder for chaining.
       */
      public Builder setNameBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) { throw new NullPointerException(); }
        name_ = value;
        bitField0_ |= 0x00000004;
        onChanged();
        return this;
      }

      private perfetto.protos.ProcessDescriptorOuterClass.ProcessDescriptor process_;
      private com.google.protobuf.SingleFieldBuilderV3<
          perfetto.protos.ProcessDescriptorOuterClass.ProcessDescriptor, perfetto.protos.ProcessDescriptorOuterClass.ProcessDescriptor.Builder, perfetto.protos.ProcessDescriptorOuterClass.ProcessDescriptorOrBuilder> processBuilder_;
      /**
       * <pre>
       * Associate the track with a process, making it the process-global track.
       * There should only be one such track per process (usually for instant
       * events; trace processor uses this fact to detect pid reuse). If you need
       * more (e.g. for asynchronous events), create child tracks using parent_uuid.
       * Trace processor will merge events on a process track with slice-type events
       * from other sources (e.g. ftrace) for the same process into a single
       * timeline view.
       * </pre>
       *
       * <code>optional .perfetto.protos.ProcessDescriptor process = 3;</code>
       * @return Whether the process field is set.
       */
      public boolean hasProcess() {
        return ((bitField0_ & 0x00000008) != 0);
      }
      /**
       * <pre>
       * Associate the track with a process, making it the process-global track.
       * There should only be one such track per process (usually for instant
       * events; trace processor uses this fact to detect pid reuse). If you need
       * more (e.g. for asynchronous events), create child tracks using parent_uuid.
       * Trace processor will merge events on a process track with slice-type events
       * from other sources (e.g. ftrace) for the same process into a single
       * timeline view.
       * </pre>
       *
       * <code>optional .perfetto.protos.ProcessDescriptor process = 3;</code>
       * @return The process.
       */
      public perfetto.protos.ProcessDescriptorOuterClass.ProcessDescriptor getProcess() {
        if (processBuilder_ == null) {
          return process_ == null ? perfetto.protos.ProcessDescriptorOuterClass.ProcessDescriptor.getDefaultInstance() : process_;
        } else {
          return processBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       * Associate the track with a process, making it the process-global track.
       * There should only be one such track per process (usually for instant
       * events; trace processor uses this fact to detect pid reuse). If you need
       * more (e.g. for asynchronous events), create child tracks using parent_uuid.
       * Trace processor will merge events on a process track with slice-type events
       * from other sources (e.g. ftrace) for the same process into a single
       * timeline view.
       * </pre>
       *
       * <code>optional .perfetto.protos.ProcessDescriptor process = 3;</code>
       */
      public Builder setProcess(perfetto.protos.ProcessDescriptorOuterClass.ProcessDescriptor value) {
        if (processBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          process_ = value;
        } else {
          processBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000008;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Associate the track with a process, making it the process-global track.
       * There should only be one such track per process (usually for instant
       * events; trace processor uses this fact to detect pid reuse). If you need
       * more (e.g. for asynchronous events), create child tracks using parent_uuid.
       * Trace processor will merge events on a process track with slice-type events
       * from other sources (e.g. ftrace) for the same process into a single
       * timeline view.
       * </pre>
       *
       * <code>optional .perfetto.protos.ProcessDescriptor process = 3;</code>
       */
      public Builder setProcess(
          perfetto.protos.ProcessDescriptorOuterClass.ProcessDescriptor.Builder builderForValue) {
        if (processBuilder_ == null) {
          process_ = builderForValue.build();
        } else {
          processBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000008;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Associate the track with a process, making it the process-global track.
       * There should only be one such track per process (usually for instant
       * events; trace processor uses this fact to detect pid reuse). If you need
       * more (e.g. for asynchronous events), create child tracks using parent_uuid.
       * Trace processor will merge events on a process track with slice-type events
       * from other sources (e.g. ftrace) for the same process into a single
       * timeline view.
       * </pre>
       *
       * <code>optional .perfetto.protos.ProcessDescriptor process = 3;</code>
       */
      public Builder mergeProcess(perfetto.protos.ProcessDescriptorOuterClass.ProcessDescriptor value) {
        if (processBuilder_ == null) {
          if (((bitField0_ & 0x00000008) != 0) &&
            process_ != null &&
            process_ != perfetto.protos.ProcessDescriptorOuterClass.ProcessDescriptor.getDefaultInstance()) {
            getProcessBuilder().mergeFrom(value);
          } else {
            process_ = value;
          }
        } else {
          processBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00000008;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Associate the track with a process, making it the process-global track.
       * There should only be one such track per process (usually for instant
       * events; trace processor uses this fact to detect pid reuse). If you need
       * more (e.g. for asynchronous events), create child tracks using parent_uuid.
       * Trace processor will merge events on a process track with slice-type events
       * from other sources (e.g. ftrace) for the same process into a single
       * timeline view.
       * </pre>
       *
       * <code>optional .perfetto.protos.ProcessDescriptor process = 3;</code>
       */
      public Builder clearProcess() {
        bitField0_ = (bitField0_ & ~0x00000008);
        process_ = null;
        if (processBuilder_ != null) {
          processBuilder_.dispose();
          processBuilder_ = null;
        }
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Associate the track with a process, making it the process-global track.
       * There should only be one such track per process (usually for instant
       * events; trace processor uses this fact to detect pid reuse). If you need
       * more (e.g. for asynchronous events), create child tracks using parent_uuid.
       * Trace processor will merge events on a process track with slice-type events
       * from other sources (e.g. ftrace) for the same process into a single
       * timeline view.
       * </pre>
       *
       * <code>optional .perfetto.protos.ProcessDescriptor process = 3;</code>
       */
      public perfetto.protos.ProcessDescriptorOuterClass.ProcessDescriptor.Builder getProcessBuilder() {
        bitField0_ |= 0x00000008;
        onChanged();
        return getProcessFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       * Associate the track with a process, making it the process-global track.
       * There should only be one such track per process (usually for instant
       * events; trace processor uses this fact to detect pid reuse). If you need
       * more (e.g. for asynchronous events), create child tracks using parent_uuid.
       * Trace processor will merge events on a process track with slice-type events
       * from other sources (e.g. ftrace) for the same process into a single
       * timeline view.
       * </pre>
       *
       * <code>optional .perfetto.protos.ProcessDescriptor process = 3;</code>
       */
      public perfetto.protos.ProcessDescriptorOuterClass.ProcessDescriptorOrBuilder getProcessOrBuilder() {
        if (processBuilder_ != null) {
          return processBuilder_.getMessageOrBuilder();
        } else {
          return process_ == null ?
              perfetto.protos.ProcessDescriptorOuterClass.ProcessDescriptor.getDefaultInstance() : process_;
        }
      }
      /**
       * <pre>
       * Associate the track with a process, making it the process-global track.
       * There should only be one such track per process (usually for instant
       * events; trace processor uses this fact to detect pid reuse). If you need
       * more (e.g. for asynchronous events), create child tracks using parent_uuid.
       * Trace processor will merge events on a process track with slice-type events
       * from other sources (e.g. ftrace) for the same process into a single
       * timeline view.
       * </pre>
       *
       * <code>optional .perfetto.protos.ProcessDescriptor process = 3;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          perfetto.protos.ProcessDescriptorOuterClass.ProcessDescriptor, perfetto.protos.ProcessDescriptorOuterClass.ProcessDescriptor.Builder, perfetto.protos.ProcessDescriptorOuterClass.ProcessDescriptorOrBuilder> 
          getProcessFieldBuilder() {
        if (processBuilder_ == null) {
          processBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              perfetto.protos.ProcessDescriptorOuterClass.ProcessDescriptor, perfetto.protos.ProcessDescriptorOuterClass.ProcessDescriptor.Builder, perfetto.protos.ProcessDescriptorOuterClass.ProcessDescriptorOrBuilder>(
                  getProcess(),
                  getParentForChildren(),
                  isClean());
          process_ = null;
        }
        return processBuilder_;
      }

      private perfetto.protos.ChromeProcessDescriptorOuterClass.ChromeProcessDescriptor chromeProcess_;
      private com.google.protobuf.SingleFieldBuilderV3<
          perfetto.protos.ChromeProcessDescriptorOuterClass.ChromeProcessDescriptor, perfetto.protos.ChromeProcessDescriptorOuterClass.ChromeProcessDescriptor.Builder, perfetto.protos.ChromeProcessDescriptorOuterClass.ChromeProcessDescriptorOrBuilder> chromeProcessBuilder_;
      /**
       * <code>optional .perfetto.protos.ChromeProcessDescriptor chrome_process = 6;</code>
       * @return Whether the chromeProcess field is set.
       */
      public boolean hasChromeProcess() {
        return ((bitField0_ & 0x00000010) != 0);
      }
      /**
       * <code>optional .perfetto.protos.ChromeProcessDescriptor chrome_process = 6;</code>
       * @return The chromeProcess.
       */
      public perfetto.protos.ChromeProcessDescriptorOuterClass.ChromeProcessDescriptor getChromeProcess() {
        if (chromeProcessBuilder_ == null) {
          return chromeProcess_ == null ? perfetto.protos.ChromeProcessDescriptorOuterClass.ChromeProcessDescriptor.getDefaultInstance() : chromeProcess_;
        } else {
          return chromeProcessBuilder_.getMessage();
        }
      }
      /**
       * <code>optional .perfetto.protos.ChromeProcessDescriptor chrome_process = 6;</code>
       */
      public Builder setChromeProcess(perfetto.protos.ChromeProcessDescriptorOuterClass.ChromeProcessDescriptor value) {
        if (chromeProcessBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          chromeProcess_ = value;
        } else {
          chromeProcessBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000010;
        onChanged();
        return this;
      }
      /**
       * <code>optional .perfetto.protos.ChromeProcessDescriptor chrome_process = 6;</code>
       */
      public Builder setChromeProcess(
          perfetto.protos.ChromeProcessDescriptorOuterClass.ChromeProcessDescriptor.Builder builderForValue) {
        if (chromeProcessBuilder_ == null) {
          chromeProcess_ = builderForValue.build();
        } else {
          chromeProcessBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000010;
        onChanged();
        return this;
      }
      /**
       * <code>optional .perfetto.protos.ChromeProcessDescriptor chrome_process = 6;</code>
       */
      public Builder mergeChromeProcess(perfetto.protos.ChromeProcessDescriptorOuterClass.ChromeProcessDescriptor value) {
        if (chromeProcessBuilder_ == null) {
          if (((bitField0_ & 0x00000010) != 0) &&
            chromeProcess_ != null &&
            chromeProcess_ != perfetto.protos.ChromeProcessDescriptorOuterClass.ChromeProcessDescriptor.getDefaultInstance()) {
            getChromeProcessBuilder().mergeFrom(value);
          } else {
            chromeProcess_ = value;
          }
        } else {
          chromeProcessBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00000010;
        onChanged();
        return this;
      }
      /**
       * <code>optional .perfetto.protos.ChromeProcessDescriptor chrome_process = 6;</code>
       */
      public Builder clearChromeProcess() {
        bitField0_ = (bitField0_ & ~0x00000010);
        chromeProcess_ = null;
        if (chromeProcessBuilder_ != null) {
          chromeProcessBuilder_.dispose();
          chromeProcessBuilder_ = null;
        }
        onChanged();
        return this;
      }
      /**
       * <code>optional .perfetto.protos.ChromeProcessDescriptor chrome_process = 6;</code>
       */
      public perfetto.protos.ChromeProcessDescriptorOuterClass.ChromeProcessDescriptor.Builder getChromeProcessBuilder() {
        bitField0_ |= 0x00000010;
        onChanged();
        return getChromeProcessFieldBuilder().getBuilder();
      }
      /**
       * <code>optional .perfetto.protos.ChromeProcessDescriptor chrome_process = 6;</code>
       */
      public perfetto.protos.ChromeProcessDescriptorOuterClass.ChromeProcessDescriptorOrBuilder getChromeProcessOrBuilder() {
        if (chromeProcessBuilder_ != null) {
          return chromeProcessBuilder_.getMessageOrBuilder();
        } else {
          return chromeProcess_ == null ?
              perfetto.protos.ChromeProcessDescriptorOuterClass.ChromeProcessDescriptor.getDefaultInstance() : chromeProcess_;
        }
      }
      /**
       * <code>optional .perfetto.protos.ChromeProcessDescriptor chrome_process = 6;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          perfetto.protos.ChromeProcessDescriptorOuterClass.ChromeProcessDescriptor, perfetto.protos.ChromeProcessDescriptorOuterClass.ChromeProcessDescriptor.Builder, perfetto.protos.ChromeProcessDescriptorOuterClass.ChromeProcessDescriptorOrBuilder> 
          getChromeProcessFieldBuilder() {
        if (chromeProcessBuilder_ == null) {
          chromeProcessBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              perfetto.protos.ChromeProcessDescriptorOuterClass.ChromeProcessDescriptor, perfetto.protos.ChromeProcessDescriptorOuterClass.ChromeProcessDescriptor.Builder, perfetto.protos.ChromeProcessDescriptorOuterClass.ChromeProcessDescriptorOrBuilder>(
                  getChromeProcess(),
                  getParentForChildren(),
                  isClean());
          chromeProcess_ = null;
        }
        return chromeProcessBuilder_;
      }

      private perfetto.protos.ThreadDescriptorOuterClass.ThreadDescriptor thread_;
      private com.google.protobuf.SingleFieldBuilderV3<
          perfetto.protos.ThreadDescriptorOuterClass.ThreadDescriptor, perfetto.protos.ThreadDescriptorOuterClass.ThreadDescriptor.Builder, perfetto.protos.ThreadDescriptorOuterClass.ThreadDescriptorOrBuilder> threadBuilder_;
      /**
       * <pre>
       * Associate the track with a thread, indicating that the track's events
       * describe synchronous code execution on the thread. There should only be one
       * such track per thread (trace processor uses this fact to detect tid reuse).
       * Trace processor will merge events on a thread track with slice-type events
       * from other sources (e.g. ftrace) for the same thread into a single timeline
       * view.
       * </pre>
       *
       * <code>optional .perfetto.protos.ThreadDescriptor thread = 4;</code>
       * @return Whether the thread field is set.
       */
      public boolean hasThread() {
        return ((bitField0_ & 0x00000020) != 0);
      }
      /**
       * <pre>
       * Associate the track with a thread, indicating that the track's events
       * describe synchronous code execution on the thread. There should only be one
       * such track per thread (trace processor uses this fact to detect tid reuse).
       * Trace processor will merge events on a thread track with slice-type events
       * from other sources (e.g. ftrace) for the same thread into a single timeline
       * view.
       * </pre>
       *
       * <code>optional .perfetto.protos.ThreadDescriptor thread = 4;</code>
       * @return The thread.
       */
      public perfetto.protos.ThreadDescriptorOuterClass.ThreadDescriptor getThread() {
        if (threadBuilder_ == null) {
          return thread_ == null ? perfetto.protos.ThreadDescriptorOuterClass.ThreadDescriptor.getDefaultInstance() : thread_;
        } else {
          return threadBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       * Associate the track with a thread, indicating that the track's events
       * describe synchronous code execution on the thread. There should only be one
       * such track per thread (trace processor uses this fact to detect tid reuse).
       * Trace processor will merge events on a thread track with slice-type events
       * from other sources (e.g. ftrace) for the same thread into a single timeline
       * view.
       * </pre>
       *
       * <code>optional .perfetto.protos.ThreadDescriptor thread = 4;</code>
       */
      public Builder setThread(perfetto.protos.ThreadDescriptorOuterClass.ThreadDescriptor value) {
        if (threadBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          thread_ = value;
        } else {
          threadBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000020;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Associate the track with a thread, indicating that the track's events
       * describe synchronous code execution on the thread. There should only be one
       * such track per thread (trace processor uses this fact to detect tid reuse).
       * Trace processor will merge events on a thread track with slice-type events
       * from other sources (e.g. ftrace) for the same thread into a single timeline
       * view.
       * </pre>
       *
       * <code>optional .perfetto.protos.ThreadDescriptor thread = 4;</code>
       */
      public Builder setThread(
          perfetto.protos.ThreadDescriptorOuterClass.ThreadDescriptor.Builder builderForValue) {
        if (threadBuilder_ == null) {
          thread_ = builderForValue.build();
        } else {
          threadBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000020;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Associate the track with a thread, indicating that the track's events
       * describe synchronous code execution on the thread. There should only be one
       * such track per thread (trace processor uses this fact to detect tid reuse).
       * Trace processor will merge events on a thread track with slice-type events
       * from other sources (e.g. ftrace) for the same thread into a single timeline
       * view.
       * </pre>
       *
       * <code>optional .perfetto.protos.ThreadDescriptor thread = 4;</code>
       */
      public Builder mergeThread(perfetto.protos.ThreadDescriptorOuterClass.ThreadDescriptor value) {
        if (threadBuilder_ == null) {
          if (((bitField0_ & 0x00000020) != 0) &&
            thread_ != null &&
            thread_ != perfetto.protos.ThreadDescriptorOuterClass.ThreadDescriptor.getDefaultInstance()) {
            getThreadBuilder().mergeFrom(value);
          } else {
            thread_ = value;
          }
        } else {
          threadBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00000020;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Associate the track with a thread, indicating that the track's events
       * describe synchronous code execution on the thread. There should only be one
       * such track per thread (trace processor uses this fact to detect tid reuse).
       * Trace processor will merge events on a thread track with slice-type events
       * from other sources (e.g. ftrace) for the same thread into a single timeline
       * view.
       * </pre>
       *
       * <code>optional .perfetto.protos.ThreadDescriptor thread = 4;</code>
       */
      public Builder clearThread() {
        bitField0_ = (bitField0_ & ~0x00000020);
        thread_ = null;
        if (threadBuilder_ != null) {
          threadBuilder_.dispose();
          threadBuilder_ = null;
        }
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Associate the track with a thread, indicating that the track's events
       * describe synchronous code execution on the thread. There should only be one
       * such track per thread (trace processor uses this fact to detect tid reuse).
       * Trace processor will merge events on a thread track with slice-type events
       * from other sources (e.g. ftrace) for the same thread into a single timeline
       * view.
       * </pre>
       *
       * <code>optional .perfetto.protos.ThreadDescriptor thread = 4;</code>
       */
      public perfetto.protos.ThreadDescriptorOuterClass.ThreadDescriptor.Builder getThreadBuilder() {
        bitField0_ |= 0x00000020;
        onChanged();
        return getThreadFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       * Associate the track with a thread, indicating that the track's events
       * describe synchronous code execution on the thread. There should only be one
       * such track per thread (trace processor uses this fact to detect tid reuse).
       * Trace processor will merge events on a thread track with slice-type events
       * from other sources (e.g. ftrace) for the same thread into a single timeline
       * view.
       * </pre>
       *
       * <code>optional .perfetto.protos.ThreadDescriptor thread = 4;</code>
       */
      public perfetto.protos.ThreadDescriptorOuterClass.ThreadDescriptorOrBuilder getThreadOrBuilder() {
        if (threadBuilder_ != null) {
          return threadBuilder_.getMessageOrBuilder();
        } else {
          return thread_ == null ?
              perfetto.protos.ThreadDescriptorOuterClass.ThreadDescriptor.getDefaultInstance() : thread_;
        }
      }
      /**
       * <pre>
       * Associate the track with a thread, indicating that the track's events
       * describe synchronous code execution on the thread. There should only be one
       * such track per thread (trace processor uses this fact to detect tid reuse).
       * Trace processor will merge events on a thread track with slice-type events
       * from other sources (e.g. ftrace) for the same thread into a single timeline
       * view.
       * </pre>
       *
       * <code>optional .perfetto.protos.ThreadDescriptor thread = 4;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          perfetto.protos.ThreadDescriptorOuterClass.ThreadDescriptor, perfetto.protos.ThreadDescriptorOuterClass.ThreadDescriptor.Builder, perfetto.protos.ThreadDescriptorOuterClass.ThreadDescriptorOrBuilder> 
          getThreadFieldBuilder() {
        if (threadBuilder_ == null) {
          threadBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              perfetto.protos.ThreadDescriptorOuterClass.ThreadDescriptor, perfetto.protos.ThreadDescriptorOuterClass.ThreadDescriptor.Builder, perfetto.protos.ThreadDescriptorOuterClass.ThreadDescriptorOrBuilder>(
                  getThread(),
                  getParentForChildren(),
                  isClean());
          thread_ = null;
        }
        return threadBuilder_;
      }

      private perfetto.protos.ChromeThreadDescriptorOuterClass.ChromeThreadDescriptor chromeThread_;
      private com.google.protobuf.SingleFieldBuilderV3<
          perfetto.protos.ChromeThreadDescriptorOuterClass.ChromeThreadDescriptor, perfetto.protos.ChromeThreadDescriptorOuterClass.ChromeThreadDescriptor.Builder, perfetto.protos.ChromeThreadDescriptorOuterClass.ChromeThreadDescriptorOrBuilder> chromeThreadBuilder_;
      /**
       * <code>optional .perfetto.protos.ChromeThreadDescriptor chrome_thread = 7;</code>
       * @return Whether the chromeThread field is set.
       */
      public boolean hasChromeThread() {
        return ((bitField0_ & 0x00000040) != 0);
      }
      /**
       * <code>optional .perfetto.protos.ChromeThreadDescriptor chrome_thread = 7;</code>
       * @return The chromeThread.
       */
      public perfetto.protos.ChromeThreadDescriptorOuterClass.ChromeThreadDescriptor getChromeThread() {
        if (chromeThreadBuilder_ == null) {
          return chromeThread_ == null ? perfetto.protos.ChromeThreadDescriptorOuterClass.ChromeThreadDescriptor.getDefaultInstance() : chromeThread_;
        } else {
          return chromeThreadBuilder_.getMessage();
        }
      }
      /**
       * <code>optional .perfetto.protos.ChromeThreadDescriptor chrome_thread = 7;</code>
       */
      public Builder setChromeThread(perfetto.protos.ChromeThreadDescriptorOuterClass.ChromeThreadDescriptor value) {
        if (chromeThreadBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          chromeThread_ = value;
        } else {
          chromeThreadBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000040;
        onChanged();
        return this;
      }
      /**
       * <code>optional .perfetto.protos.ChromeThreadDescriptor chrome_thread = 7;</code>
       */
      public Builder setChromeThread(
          perfetto.protos.ChromeThreadDescriptorOuterClass.ChromeThreadDescriptor.Builder builderForValue) {
        if (chromeThreadBuilder_ == null) {
          chromeThread_ = builderForValue.build();
        } else {
          chromeThreadBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000040;
        onChanged();
        return this;
      }
      /**
       * <code>optional .perfetto.protos.ChromeThreadDescriptor chrome_thread = 7;</code>
       */
      public Builder mergeChromeThread(perfetto.protos.ChromeThreadDescriptorOuterClass.ChromeThreadDescriptor value) {
        if (chromeThreadBuilder_ == null) {
          if (((bitField0_ & 0x00000040) != 0) &&
            chromeThread_ != null &&
            chromeThread_ != perfetto.protos.ChromeThreadDescriptorOuterClass.ChromeThreadDescriptor.getDefaultInstance()) {
            getChromeThreadBuilder().mergeFrom(value);
          } else {
            chromeThread_ = value;
          }
        } else {
          chromeThreadBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00000040;
        onChanged();
        return this;
      }
      /**
       * <code>optional .perfetto.protos.ChromeThreadDescriptor chrome_thread = 7;</code>
       */
      public Builder clearChromeThread() {
        bitField0_ = (bitField0_ & ~0x00000040);
        chromeThread_ = null;
        if (chromeThreadBuilder_ != null) {
          chromeThreadBuilder_.dispose();
          chromeThreadBuilder_ = null;
        }
        onChanged();
        return this;
      }
      /**
       * <code>optional .perfetto.protos.ChromeThreadDescriptor chrome_thread = 7;</code>
       */
      public perfetto.protos.ChromeThreadDescriptorOuterClass.ChromeThreadDescriptor.Builder getChromeThreadBuilder() {
        bitField0_ |= 0x00000040;
        onChanged();
        return getChromeThreadFieldBuilder().getBuilder();
      }
      /**
       * <code>optional .perfetto.protos.ChromeThreadDescriptor chrome_thread = 7;</code>
       */
      public perfetto.protos.ChromeThreadDescriptorOuterClass.ChromeThreadDescriptorOrBuilder getChromeThreadOrBuilder() {
        if (chromeThreadBuilder_ != null) {
          return chromeThreadBuilder_.getMessageOrBuilder();
        } else {
          return chromeThread_ == null ?
              perfetto.protos.ChromeThreadDescriptorOuterClass.ChromeThreadDescriptor.getDefaultInstance() : chromeThread_;
        }
      }
      /**
       * <code>optional .perfetto.protos.ChromeThreadDescriptor chrome_thread = 7;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          perfetto.protos.ChromeThreadDescriptorOuterClass.ChromeThreadDescriptor, perfetto.protos.ChromeThreadDescriptorOuterClass.ChromeThreadDescriptor.Builder, perfetto.protos.ChromeThreadDescriptorOuterClass.ChromeThreadDescriptorOrBuilder> 
          getChromeThreadFieldBuilder() {
        if (chromeThreadBuilder_ == null) {
          chromeThreadBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              perfetto.protos.ChromeThreadDescriptorOuterClass.ChromeThreadDescriptor, perfetto.protos.ChromeThreadDescriptorOuterClass.ChromeThreadDescriptor.Builder, perfetto.protos.ChromeThreadDescriptorOuterClass.ChromeThreadDescriptorOrBuilder>(
                  getChromeThread(),
                  getParentForChildren(),
                  isClean());
          chromeThread_ = null;
        }
        return chromeThreadBuilder_;
      }

      private perfetto.protos.CounterDescriptorOuterClass.CounterDescriptor counter_;
      private com.google.protobuf.SingleFieldBuilderV3<
          perfetto.protos.CounterDescriptorOuterClass.CounterDescriptor, perfetto.protos.CounterDescriptorOuterClass.CounterDescriptor.Builder, perfetto.protos.CounterDescriptorOuterClass.CounterDescriptorOrBuilder> counterBuilder_;
      /**
       * <pre>
       * Descriptor for a counter track. If set, the track will only support
       * TYPE_COUNTER TrackEvents (and values provided via TrackEvent's
       * |extra_counter_values|).
       * </pre>
       *
       * <code>optional .perfetto.protos.CounterDescriptor counter = 8;</code>
       * @return Whether the counter field is set.
       */
      public boolean hasCounter() {
        return ((bitField0_ & 0x00000080) != 0);
      }
      /**
       * <pre>
       * Descriptor for a counter track. If set, the track will only support
       * TYPE_COUNTER TrackEvents (and values provided via TrackEvent's
       * |extra_counter_values|).
       * </pre>
       *
       * <code>optional .perfetto.protos.CounterDescriptor counter = 8;</code>
       * @return The counter.
       */
      public perfetto.protos.CounterDescriptorOuterClass.CounterDescriptor getCounter() {
        if (counterBuilder_ == null) {
          return counter_ == null ? perfetto.protos.CounterDescriptorOuterClass.CounterDescriptor.getDefaultInstance() : counter_;
        } else {
          return counterBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       * Descriptor for a counter track. If set, the track will only support
       * TYPE_COUNTER TrackEvents (and values provided via TrackEvent's
       * |extra_counter_values|).
       * </pre>
       *
       * <code>optional .perfetto.protos.CounterDescriptor counter = 8;</code>
       */
      public Builder setCounter(perfetto.protos.CounterDescriptorOuterClass.CounterDescriptor value) {
        if (counterBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          counter_ = value;
        } else {
          counterBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000080;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Descriptor for a counter track. If set, the track will only support
       * TYPE_COUNTER TrackEvents (and values provided via TrackEvent's
       * |extra_counter_values|).
       * </pre>
       *
       * <code>optional .perfetto.protos.CounterDescriptor counter = 8;</code>
       */
      public Builder setCounter(
          perfetto.protos.CounterDescriptorOuterClass.CounterDescriptor.Builder builderForValue) {
        if (counterBuilder_ == null) {
          counter_ = builderForValue.build();
        } else {
          counterBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000080;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Descriptor for a counter track. If set, the track will only support
       * TYPE_COUNTER TrackEvents (and values provided via TrackEvent's
       * |extra_counter_values|).
       * </pre>
       *
       * <code>optional .perfetto.protos.CounterDescriptor counter = 8;</code>
       */
      public Builder mergeCounter(perfetto.protos.CounterDescriptorOuterClass.CounterDescriptor value) {
        if (counterBuilder_ == null) {
          if (((bitField0_ & 0x00000080) != 0) &&
            counter_ != null &&
            counter_ != perfetto.protos.CounterDescriptorOuterClass.CounterDescriptor.getDefaultInstance()) {
            getCounterBuilder().mergeFrom(value);
          } else {
            counter_ = value;
          }
        } else {
          counterBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00000080;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Descriptor for a counter track. If set, the track will only support
       * TYPE_COUNTER TrackEvents (and values provided via TrackEvent's
       * |extra_counter_values|).
       * </pre>
       *
       * <code>optional .perfetto.protos.CounterDescriptor counter = 8;</code>
       */
      public Builder clearCounter() {
        bitField0_ = (bitField0_ & ~0x00000080);
        counter_ = null;
        if (counterBuilder_ != null) {
          counterBuilder_.dispose();
          counterBuilder_ = null;
        }
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Descriptor for a counter track. If set, the track will only support
       * TYPE_COUNTER TrackEvents (and values provided via TrackEvent's
       * |extra_counter_values|).
       * </pre>
       *
       * <code>optional .perfetto.protos.CounterDescriptor counter = 8;</code>
       */
      public perfetto.protos.CounterDescriptorOuterClass.CounterDescriptor.Builder getCounterBuilder() {
        bitField0_ |= 0x00000080;
        onChanged();
        return getCounterFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       * Descriptor for a counter track. If set, the track will only support
       * TYPE_COUNTER TrackEvents (and values provided via TrackEvent's
       * |extra_counter_values|).
       * </pre>
       *
       * <code>optional .perfetto.protos.CounterDescriptor counter = 8;</code>
       */
      public perfetto.protos.CounterDescriptorOuterClass.CounterDescriptorOrBuilder getCounterOrBuilder() {
        if (counterBuilder_ != null) {
          return counterBuilder_.getMessageOrBuilder();
        } else {
          return counter_ == null ?
              perfetto.protos.CounterDescriptorOuterClass.CounterDescriptor.getDefaultInstance() : counter_;
        }
      }
      /**
       * <pre>
       * Descriptor for a counter track. If set, the track will only support
       * TYPE_COUNTER TrackEvents (and values provided via TrackEvent's
       * |extra_counter_values|).
       * </pre>
       *
       * <code>optional .perfetto.protos.CounterDescriptor counter = 8;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          perfetto.protos.CounterDescriptorOuterClass.CounterDescriptor, perfetto.protos.CounterDescriptorOuterClass.CounterDescriptor.Builder, perfetto.protos.CounterDescriptorOuterClass.CounterDescriptorOrBuilder> 
          getCounterFieldBuilder() {
        if (counterBuilder_ == null) {
          counterBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              perfetto.protos.CounterDescriptorOuterClass.CounterDescriptor, perfetto.protos.CounterDescriptorOuterClass.CounterDescriptor.Builder, perfetto.protos.CounterDescriptorOuterClass.CounterDescriptorOrBuilder>(
                  getCounter(),
                  getParentForChildren(),
                  isClean());
          counter_ = null;
        }
        return counterBuilder_;
      }
      @java.lang.Override
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      @java.lang.Override
      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:perfetto.protos.TrackDescriptor)
    }

    // @@protoc_insertion_point(class_scope:perfetto.protos.TrackDescriptor)
    private static final perfetto.protos.TrackDescriptorOuterClass.TrackDescriptor DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new perfetto.protos.TrackDescriptorOuterClass.TrackDescriptor();
    }

    public static perfetto.protos.TrackDescriptorOuterClass.TrackDescriptor getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    @java.lang.Deprecated public static final com.google.protobuf.Parser<TrackDescriptor>
        PARSER = new com.google.protobuf.AbstractParser<TrackDescriptor>() {
      @java.lang.Override
      public TrackDescriptor parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        Builder builder = newBuilder();
        try {
          builder.mergeFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.setUnfinishedMessage(builder.buildPartial());
        } catch (com.google.protobuf.UninitializedMessageException e) {
          throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
        } catch (java.io.IOException e) {
          throw new com.google.protobuf.InvalidProtocolBufferException(e)
              .setUnfinishedMessage(builder.buildPartial());
        }
        return builder.buildPartial();
      }
    };

    public static com.google.protobuf.Parser<TrackDescriptor> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<TrackDescriptor> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public perfetto.protos.TrackDescriptorOuterClass.TrackDescriptor getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_perfetto_protos_TrackDescriptor_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_perfetto_protos_TrackDescriptor_fieldAccessorTable;

  public static com.google.protobuf.Descriptors.FileDescriptor
      getDescriptor() {
    return descriptor;
  }
  private static  com.google.protobuf.Descriptors.FileDescriptor
      descriptor;
  static {
    java.lang.String[] descriptorData = {
      "\n8protos/perfetto/trace/track_event/trac" +
      "k_descriptor.proto\022\017perfetto.protos\032Apro" +
      "tos/perfetto/trace/track_event/chrome_pr" +
      "ocess_descriptor.proto\032@protos/perfetto/" +
      "trace/track_event/chrome_thread_descript" +
      "or.proto\032:protos/perfetto/trace/track_ev" +
      "ent/process_descriptor.proto\0329protos/per" +
      "fetto/trace/track_event/thread_descripto" +
      "r.proto\032:protos/perfetto/trace/track_eve" +
      "nt/counter_descriptor.proto\"\341\002\n\017TrackDes" +
      "criptor\022\014\n\004uuid\030\001 \001(\004\022\023\n\013parent_uuid\030\005 \001" +
      "(\004\022\014\n\004name\030\002 \001(\t\0223\n\007process\030\003 \001(\0132\".perf" +
      "etto.protos.ProcessDescriptor\022@\n\016chrome_" +
      "process\030\006 \001(\0132(.perfetto.protos.ChromePr" +
      "ocessDescriptor\0221\n\006thread\030\004 \001(\0132!.perfet" +
      "to.protos.ThreadDescriptor\022>\n\rchrome_thr" +
      "ead\030\007 \001(\0132\'.perfetto.protos.ChromeThread" +
      "Descriptor\0223\n\007counter\030\010 \001(\0132\".perfetto.p" +
      "rotos.CounterDescriptor"
    };
    descriptor = com.google.protobuf.Descriptors.FileDescriptor
      .internalBuildGeneratedFileFrom(descriptorData,
        new com.google.protobuf.Descriptors.FileDescriptor[] {
          perfetto.protos.ChromeProcessDescriptorOuterClass.getDescriptor(),
          perfetto.protos.ChromeThreadDescriptorOuterClass.getDescriptor(),
          perfetto.protos.ProcessDescriptorOuterClass.getDescriptor(),
          perfetto.protos.ThreadDescriptorOuterClass.getDescriptor(),
          perfetto.protos.CounterDescriptorOuterClass.getDescriptor(),
        });
    internal_static_perfetto_protos_TrackDescriptor_descriptor =
      getDescriptor().getMessageTypes().get(0);
    internal_static_perfetto_protos_TrackDescriptor_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_perfetto_protos_TrackDescriptor_descriptor,
        new java.lang.String[] { "Uuid", "ParentUuid", "Name", "Process", "ChromeProcess", "Thread", "ChromeThread", "Counter", });
    perfetto.protos.ChromeProcessDescriptorOuterClass.getDescriptor();
    perfetto.protos.ChromeThreadDescriptorOuterClass.getDescriptor();
    perfetto.protos.ProcessDescriptorOuterClass.getDescriptor();
    perfetto.protos.ThreadDescriptorOuterClass.getDescriptor();
    perfetto.protos.CounterDescriptorOuterClass.getDescriptor();
  }

  // @@protoc_insertion_point(outer_class_scope)
}
