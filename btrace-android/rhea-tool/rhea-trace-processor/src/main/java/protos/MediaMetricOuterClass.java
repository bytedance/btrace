// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: protos/perfetto/metrics/chrome/media_metric.proto

package perfetto.protos;

public final class MediaMetricOuterClass {
  private MediaMetricOuterClass() {}
  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistryLite registry) {
  }

  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistry registry) {
    registerAllExtensions(
        (com.google.protobuf.ExtensionRegistryLite) registry);
  }
  public interface MediaMetricOrBuilder extends
      // @@protoc_insertion_point(interface_extends:perfetto.protos.MediaMetric)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <code>repeated double time_to_video_play = 1 [(.perfetto.protos.unit) = "ms_smallerIsBetter"];</code>
     * @return A list containing the timeToVideoPlay.
     */
    java.util.List<java.lang.Double> getTimeToVideoPlayList();
    /**
     * <code>repeated double time_to_video_play = 1 [(.perfetto.protos.unit) = "ms_smallerIsBetter"];</code>
     * @return The count of timeToVideoPlay.
     */
    int getTimeToVideoPlayCount();
    /**
     * <code>repeated double time_to_video_play = 1 [(.perfetto.protos.unit) = "ms_smallerIsBetter"];</code>
     * @param index The index of the element to return.
     * @return The timeToVideoPlay at the given index.
     */
    double getTimeToVideoPlay(int index);

    /**
     * <code>repeated double time_to_audio_play = 2 [(.perfetto.protos.unit) = "ms_smallerIsBetter"];</code>
     * @return A list containing the timeToAudioPlay.
     */
    java.util.List<java.lang.Double> getTimeToAudioPlayList();
    /**
     * <code>repeated double time_to_audio_play = 2 [(.perfetto.protos.unit) = "ms_smallerIsBetter"];</code>
     * @return The count of timeToAudioPlay.
     */
    int getTimeToAudioPlayCount();
    /**
     * <code>repeated double time_to_audio_play = 2 [(.perfetto.protos.unit) = "ms_smallerIsBetter"];</code>
     * @param index The index of the element to return.
     * @return The timeToAudioPlay at the given index.
     */
    double getTimeToAudioPlay(int index);

    /**
     * <code>repeated int64 dropped_frame_count = 3 [(.perfetto.protos.unit) = "count_smallerIsBetter"];</code>
     * @return A list containing the droppedFrameCount.
     */
    java.util.List<java.lang.Long> getDroppedFrameCountList();
    /**
     * <code>repeated int64 dropped_frame_count = 3 [(.perfetto.protos.unit) = "count_smallerIsBetter"];</code>
     * @return The count of droppedFrameCount.
     */
    int getDroppedFrameCountCount();
    /**
     * <code>repeated int64 dropped_frame_count = 3 [(.perfetto.protos.unit) = "count_smallerIsBetter"];</code>
     * @param index The index of the element to return.
     * @return The droppedFrameCount at the given index.
     */
    long getDroppedFrameCount(int index);

    /**
     * <code>repeated double buffering_time = 4 [(.perfetto.protos.unit) = "ms_smallerIsBetter"];</code>
     * @return A list containing the bufferingTime.
     */
    java.util.List<java.lang.Double> getBufferingTimeList();
    /**
     * <code>repeated double buffering_time = 4 [(.perfetto.protos.unit) = "ms_smallerIsBetter"];</code>
     * @return The count of bufferingTime.
     */
    int getBufferingTimeCount();
    /**
     * <code>repeated double buffering_time = 4 [(.perfetto.protos.unit) = "ms_smallerIsBetter"];</code>
     * @param index The index of the element to return.
     * @return The bufferingTime at the given index.
     */
    double getBufferingTime(int index);

    /**
     * <code>repeated double roughness = 5 [(.perfetto.protos.unit) = "count_smallerIsBetter"];</code>
     * @return A list containing the roughness.
     */
    java.util.List<java.lang.Double> getRoughnessList();
    /**
     * <code>repeated double roughness = 5 [(.perfetto.protos.unit) = "count_smallerIsBetter"];</code>
     * @return The count of roughness.
     */
    int getRoughnessCount();
    /**
     * <code>repeated double roughness = 5 [(.perfetto.protos.unit) = "count_smallerIsBetter"];</code>
     * @param index The index of the element to return.
     * @return The roughness at the given index.
     */
    double getRoughness(int index);

    /**
     * <code>repeated double freezing = 6 [(.perfetto.protos.unit) = "ms_smallerIsBetter"];</code>
     * @return A list containing the freezing.
     */
    java.util.List<java.lang.Double> getFreezingList();
    /**
     * <code>repeated double freezing = 6 [(.perfetto.protos.unit) = "ms_smallerIsBetter"];</code>
     * @return The count of freezing.
     */
    int getFreezingCount();
    /**
     * <code>repeated double freezing = 6 [(.perfetto.protos.unit) = "ms_smallerIsBetter"];</code>
     * @param index The index of the element to return.
     * @return The freezing at the given index.
     */
    double getFreezing(int index);

    /**
     * <pre>
     * These have multiple dynamic histogram names in the TBMv2 version. Because
     * TBMv3 doesn't support dynamic names, we report one value per seek into each
     * of these two combined histograms.
     * </pre>
     *
     * <code>repeated double seek_time = 8 [(.perfetto.protos.unit) = "ms_smallerIsBetter"];</code>
     * @return A list containing the seekTime.
     */
    java.util.List<java.lang.Double> getSeekTimeList();
    /**
     * <pre>
     * These have multiple dynamic histogram names in the TBMv2 version. Because
     * TBMv3 doesn't support dynamic names, we report one value per seek into each
     * of these two combined histograms.
     * </pre>
     *
     * <code>repeated double seek_time = 8 [(.perfetto.protos.unit) = "ms_smallerIsBetter"];</code>
     * @return The count of seekTime.
     */
    int getSeekTimeCount();
    /**
     * <pre>
     * These have multiple dynamic histogram names in the TBMv2 version. Because
     * TBMv3 doesn't support dynamic names, we report one value per seek into each
     * of these two combined histograms.
     * </pre>
     *
     * <code>repeated double seek_time = 8 [(.perfetto.protos.unit) = "ms_smallerIsBetter"];</code>
     * @param index The index of the element to return.
     * @return The seekTime at the given index.
     */
    double getSeekTime(int index);

    /**
     * <code>repeated double pipeline_seek_time = 9 [(.perfetto.protos.unit) = "ms_smallerIsBetter"];</code>
     * @return A list containing the pipelineSeekTime.
     */
    java.util.List<java.lang.Double> getPipelineSeekTimeList();
    /**
     * <code>repeated double pipeline_seek_time = 9 [(.perfetto.protos.unit) = "ms_smallerIsBetter"];</code>
     * @return The count of pipelineSeekTime.
     */
    int getPipelineSeekTimeCount();
    /**
     * <code>repeated double pipeline_seek_time = 9 [(.perfetto.protos.unit) = "ms_smallerIsBetter"];</code>
     * @param index The index of the element to return.
     * @return The pipelineSeekTime at the given index.
     */
    double getPipelineSeekTime(int index);
  }
  /**
   * <pre>
   * Ported from catapult's media_metric.html.
   * </pre>
   *
   * Protobuf type {@code perfetto.protos.MediaMetric}
   */
  public static final class MediaMetric extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:perfetto.protos.MediaMetric)
      MediaMetricOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use MediaMetric.newBuilder() to construct.
    private MediaMetric(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private MediaMetric() {
      timeToVideoPlay_ = emptyDoubleList();
      timeToAudioPlay_ = emptyDoubleList();
      droppedFrameCount_ = emptyLongList();
      bufferingTime_ = emptyDoubleList();
      roughness_ = emptyDoubleList();
      freezing_ = emptyDoubleList();
      seekTime_ = emptyDoubleList();
      pipelineSeekTime_ = emptyDoubleList();
    }

    @java.lang.Override
    @SuppressWarnings({"unused"})
    protected java.lang.Object newInstance(
        UnusedPrivateParameter unused) {
      return new MediaMetric();
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return perfetto.protos.MediaMetricOuterClass.internal_static_perfetto_protos_MediaMetric_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return perfetto.protos.MediaMetricOuterClass.internal_static_perfetto_protos_MediaMetric_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              perfetto.protos.MediaMetricOuterClass.MediaMetric.class, perfetto.protos.MediaMetricOuterClass.MediaMetric.Builder.class);
    }

    public static final int TIME_TO_VIDEO_PLAY_FIELD_NUMBER = 1;
    @SuppressWarnings("serial")
    private com.google.protobuf.Internal.DoubleList timeToVideoPlay_;
    /**
     * <code>repeated double time_to_video_play = 1 [(.perfetto.protos.unit) = "ms_smallerIsBetter"];</code>
     * @return A list containing the timeToVideoPlay.
     */
    @java.lang.Override
    public java.util.List<java.lang.Double>
        getTimeToVideoPlayList() {
      return timeToVideoPlay_;
    }
    /**
     * <code>repeated double time_to_video_play = 1 [(.perfetto.protos.unit) = "ms_smallerIsBetter"];</code>
     * @return The count of timeToVideoPlay.
     */
    public int getTimeToVideoPlayCount() {
      return timeToVideoPlay_.size();
    }
    /**
     * <code>repeated double time_to_video_play = 1 [(.perfetto.protos.unit) = "ms_smallerIsBetter"];</code>
     * @param index The index of the element to return.
     * @return The timeToVideoPlay at the given index.
     */
    public double getTimeToVideoPlay(int index) {
      return timeToVideoPlay_.getDouble(index);
    }

    public static final int TIME_TO_AUDIO_PLAY_FIELD_NUMBER = 2;
    @SuppressWarnings("serial")
    private com.google.protobuf.Internal.DoubleList timeToAudioPlay_;
    /**
     * <code>repeated double time_to_audio_play = 2 [(.perfetto.protos.unit) = "ms_smallerIsBetter"];</code>
     * @return A list containing the timeToAudioPlay.
     */
    @java.lang.Override
    public java.util.List<java.lang.Double>
        getTimeToAudioPlayList() {
      return timeToAudioPlay_;
    }
    /**
     * <code>repeated double time_to_audio_play = 2 [(.perfetto.protos.unit) = "ms_smallerIsBetter"];</code>
     * @return The count of timeToAudioPlay.
     */
    public int getTimeToAudioPlayCount() {
      return timeToAudioPlay_.size();
    }
    /**
     * <code>repeated double time_to_audio_play = 2 [(.perfetto.protos.unit) = "ms_smallerIsBetter"];</code>
     * @param index The index of the element to return.
     * @return The timeToAudioPlay at the given index.
     */
    public double getTimeToAudioPlay(int index) {
      return timeToAudioPlay_.getDouble(index);
    }

    public static final int DROPPED_FRAME_COUNT_FIELD_NUMBER = 3;
    @SuppressWarnings("serial")
    private com.google.protobuf.Internal.LongList droppedFrameCount_;
    /**
     * <code>repeated int64 dropped_frame_count = 3 [(.perfetto.protos.unit) = "count_smallerIsBetter"];</code>
     * @return A list containing the droppedFrameCount.
     */
    @java.lang.Override
    public java.util.List<java.lang.Long>
        getDroppedFrameCountList() {
      return droppedFrameCount_;
    }
    /**
     * <code>repeated int64 dropped_frame_count = 3 [(.perfetto.protos.unit) = "count_smallerIsBetter"];</code>
     * @return The count of droppedFrameCount.
     */
    public int getDroppedFrameCountCount() {
      return droppedFrameCount_.size();
    }
    /**
     * <code>repeated int64 dropped_frame_count = 3 [(.perfetto.protos.unit) = "count_smallerIsBetter"];</code>
     * @param index The index of the element to return.
     * @return The droppedFrameCount at the given index.
     */
    public long getDroppedFrameCount(int index) {
      return droppedFrameCount_.getLong(index);
    }

    public static final int BUFFERING_TIME_FIELD_NUMBER = 4;
    @SuppressWarnings("serial")
    private com.google.protobuf.Internal.DoubleList bufferingTime_;
    /**
     * <code>repeated double buffering_time = 4 [(.perfetto.protos.unit) = "ms_smallerIsBetter"];</code>
     * @return A list containing the bufferingTime.
     */
    @java.lang.Override
    public java.util.List<java.lang.Double>
        getBufferingTimeList() {
      return bufferingTime_;
    }
    /**
     * <code>repeated double buffering_time = 4 [(.perfetto.protos.unit) = "ms_smallerIsBetter"];</code>
     * @return The count of bufferingTime.
     */
    public int getBufferingTimeCount() {
      return bufferingTime_.size();
    }
    /**
     * <code>repeated double buffering_time = 4 [(.perfetto.protos.unit) = "ms_smallerIsBetter"];</code>
     * @param index The index of the element to return.
     * @return The bufferingTime at the given index.
     */
    public double getBufferingTime(int index) {
      return bufferingTime_.getDouble(index);
    }

    public static final int ROUGHNESS_FIELD_NUMBER = 5;
    @SuppressWarnings("serial")
    private com.google.protobuf.Internal.DoubleList roughness_;
    /**
     * <code>repeated double roughness = 5 [(.perfetto.protos.unit) = "count_smallerIsBetter"];</code>
     * @return A list containing the roughness.
     */
    @java.lang.Override
    public java.util.List<java.lang.Double>
        getRoughnessList() {
      return roughness_;
    }
    /**
     * <code>repeated double roughness = 5 [(.perfetto.protos.unit) = "count_smallerIsBetter"];</code>
     * @return The count of roughness.
     */
    public int getRoughnessCount() {
      return roughness_.size();
    }
    /**
     * <code>repeated double roughness = 5 [(.perfetto.protos.unit) = "count_smallerIsBetter"];</code>
     * @param index The index of the element to return.
     * @return The roughness at the given index.
     */
    public double getRoughness(int index) {
      return roughness_.getDouble(index);
    }

    public static final int FREEZING_FIELD_NUMBER = 6;
    @SuppressWarnings("serial")
    private com.google.protobuf.Internal.DoubleList freezing_;
    /**
     * <code>repeated double freezing = 6 [(.perfetto.protos.unit) = "ms_smallerIsBetter"];</code>
     * @return A list containing the freezing.
     */
    @java.lang.Override
    public java.util.List<java.lang.Double>
        getFreezingList() {
      return freezing_;
    }
    /**
     * <code>repeated double freezing = 6 [(.perfetto.protos.unit) = "ms_smallerIsBetter"];</code>
     * @return The count of freezing.
     */
    public int getFreezingCount() {
      return freezing_.size();
    }
    /**
     * <code>repeated double freezing = 6 [(.perfetto.protos.unit) = "ms_smallerIsBetter"];</code>
     * @param index The index of the element to return.
     * @return The freezing at the given index.
     */
    public double getFreezing(int index) {
      return freezing_.getDouble(index);
    }

    public static final int SEEK_TIME_FIELD_NUMBER = 8;
    @SuppressWarnings("serial")
    private com.google.protobuf.Internal.DoubleList seekTime_;
    /**
     * <pre>
     * These have multiple dynamic histogram names in the TBMv2 version. Because
     * TBMv3 doesn't support dynamic names, we report one value per seek into each
     * of these two combined histograms.
     * </pre>
     *
     * <code>repeated double seek_time = 8 [(.perfetto.protos.unit) = "ms_smallerIsBetter"];</code>
     * @return A list containing the seekTime.
     */
    @java.lang.Override
    public java.util.List<java.lang.Double>
        getSeekTimeList() {
      return seekTime_;
    }
    /**
     * <pre>
     * These have multiple dynamic histogram names in the TBMv2 version. Because
     * TBMv3 doesn't support dynamic names, we report one value per seek into each
     * of these two combined histograms.
     * </pre>
     *
     * <code>repeated double seek_time = 8 [(.perfetto.protos.unit) = "ms_smallerIsBetter"];</code>
     * @return The count of seekTime.
     */
    public int getSeekTimeCount() {
      return seekTime_.size();
    }
    /**
     * <pre>
     * These have multiple dynamic histogram names in the TBMv2 version. Because
     * TBMv3 doesn't support dynamic names, we report one value per seek into each
     * of these two combined histograms.
     * </pre>
     *
     * <code>repeated double seek_time = 8 [(.perfetto.protos.unit) = "ms_smallerIsBetter"];</code>
     * @param index The index of the element to return.
     * @return The seekTime at the given index.
     */
    public double getSeekTime(int index) {
      return seekTime_.getDouble(index);
    }

    public static final int PIPELINE_SEEK_TIME_FIELD_NUMBER = 9;
    @SuppressWarnings("serial")
    private com.google.protobuf.Internal.DoubleList pipelineSeekTime_;
    /**
     * <code>repeated double pipeline_seek_time = 9 [(.perfetto.protos.unit) = "ms_smallerIsBetter"];</code>
     * @return A list containing the pipelineSeekTime.
     */
    @java.lang.Override
    public java.util.List<java.lang.Double>
        getPipelineSeekTimeList() {
      return pipelineSeekTime_;
    }
    /**
     * <code>repeated double pipeline_seek_time = 9 [(.perfetto.protos.unit) = "ms_smallerIsBetter"];</code>
     * @return The count of pipelineSeekTime.
     */
    public int getPipelineSeekTimeCount() {
      return pipelineSeekTime_.size();
    }
    /**
     * <code>repeated double pipeline_seek_time = 9 [(.perfetto.protos.unit) = "ms_smallerIsBetter"];</code>
     * @param index The index of the element to return.
     * @return The pipelineSeekTime at the given index.
     */
    public double getPipelineSeekTime(int index) {
      return pipelineSeekTime_.getDouble(index);
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      for (int i = 0; i < timeToVideoPlay_.size(); i++) {
        output.writeDouble(1, timeToVideoPlay_.getDouble(i));
      }
      for (int i = 0; i < timeToAudioPlay_.size(); i++) {
        output.writeDouble(2, timeToAudioPlay_.getDouble(i));
      }
      for (int i = 0; i < droppedFrameCount_.size(); i++) {
        output.writeInt64(3, droppedFrameCount_.getLong(i));
      }
      for (int i = 0; i < bufferingTime_.size(); i++) {
        output.writeDouble(4, bufferingTime_.getDouble(i));
      }
      for (int i = 0; i < roughness_.size(); i++) {
        output.writeDouble(5, roughness_.getDouble(i));
      }
      for (int i = 0; i < freezing_.size(); i++) {
        output.writeDouble(6, freezing_.getDouble(i));
      }
      for (int i = 0; i < seekTime_.size(); i++) {
        output.writeDouble(8, seekTime_.getDouble(i));
      }
      for (int i = 0; i < pipelineSeekTime_.size(); i++) {
        output.writeDouble(9, pipelineSeekTime_.getDouble(i));
      }
      getUnknownFields().writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      {
        int dataSize = 0;
        dataSize = 8 * getTimeToVideoPlayList().size();
        size += dataSize;
        size += 1 * getTimeToVideoPlayList().size();
      }
      {
        int dataSize = 0;
        dataSize = 8 * getTimeToAudioPlayList().size();
        size += dataSize;
        size += 1 * getTimeToAudioPlayList().size();
      }
      {
        int dataSize = 0;
        for (int i = 0; i < droppedFrameCount_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeInt64SizeNoTag(droppedFrameCount_.getLong(i));
        }
        size += dataSize;
        size += 1 * getDroppedFrameCountList().size();
      }
      {
        int dataSize = 0;
        dataSize = 8 * getBufferingTimeList().size();
        size += dataSize;
        size += 1 * getBufferingTimeList().size();
      }
      {
        int dataSize = 0;
        dataSize = 8 * getRoughnessList().size();
        size += dataSize;
        size += 1 * getRoughnessList().size();
      }
      {
        int dataSize = 0;
        dataSize = 8 * getFreezingList().size();
        size += dataSize;
        size += 1 * getFreezingList().size();
      }
      {
        int dataSize = 0;
        dataSize = 8 * getSeekTimeList().size();
        size += dataSize;
        size += 1 * getSeekTimeList().size();
      }
      {
        int dataSize = 0;
        dataSize = 8 * getPipelineSeekTimeList().size();
        size += dataSize;
        size += 1 * getPipelineSeekTimeList().size();
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof perfetto.protos.MediaMetricOuterClass.MediaMetric)) {
        return super.equals(obj);
      }
      perfetto.protos.MediaMetricOuterClass.MediaMetric other = (perfetto.protos.MediaMetricOuterClass.MediaMetric) obj;

      if (!getTimeToVideoPlayList()
          .equals(other.getTimeToVideoPlayList())) return false;
      if (!getTimeToAudioPlayList()
          .equals(other.getTimeToAudioPlayList())) return false;
      if (!getDroppedFrameCountList()
          .equals(other.getDroppedFrameCountList())) return false;
      if (!getBufferingTimeList()
          .equals(other.getBufferingTimeList())) return false;
      if (!getRoughnessList()
          .equals(other.getRoughnessList())) return false;
      if (!getFreezingList()
          .equals(other.getFreezingList())) return false;
      if (!getSeekTimeList()
          .equals(other.getSeekTimeList())) return false;
      if (!getPipelineSeekTimeList()
          .equals(other.getPipelineSeekTimeList())) return false;
      if (!getUnknownFields().equals(other.getUnknownFields())) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      if (getTimeToVideoPlayCount() > 0) {
        hash = (37 * hash) + TIME_TO_VIDEO_PLAY_FIELD_NUMBER;
        hash = (53 * hash) + getTimeToVideoPlayList().hashCode();
      }
      if (getTimeToAudioPlayCount() > 0) {
        hash = (37 * hash) + TIME_TO_AUDIO_PLAY_FIELD_NUMBER;
        hash = (53 * hash) + getTimeToAudioPlayList().hashCode();
      }
      if (getDroppedFrameCountCount() > 0) {
        hash = (37 * hash) + DROPPED_FRAME_COUNT_FIELD_NUMBER;
        hash = (53 * hash) + getDroppedFrameCountList().hashCode();
      }
      if (getBufferingTimeCount() > 0) {
        hash = (37 * hash) + BUFFERING_TIME_FIELD_NUMBER;
        hash = (53 * hash) + getBufferingTimeList().hashCode();
      }
      if (getRoughnessCount() > 0) {
        hash = (37 * hash) + ROUGHNESS_FIELD_NUMBER;
        hash = (53 * hash) + getRoughnessList().hashCode();
      }
      if (getFreezingCount() > 0) {
        hash = (37 * hash) + FREEZING_FIELD_NUMBER;
        hash = (53 * hash) + getFreezingList().hashCode();
      }
      if (getSeekTimeCount() > 0) {
        hash = (37 * hash) + SEEK_TIME_FIELD_NUMBER;
        hash = (53 * hash) + getSeekTimeList().hashCode();
      }
      if (getPipelineSeekTimeCount() > 0) {
        hash = (37 * hash) + PIPELINE_SEEK_TIME_FIELD_NUMBER;
        hash = (53 * hash) + getPipelineSeekTimeList().hashCode();
      }
      hash = (29 * hash) + getUnknownFields().hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static perfetto.protos.MediaMetricOuterClass.MediaMetric parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static perfetto.protos.MediaMetricOuterClass.MediaMetric parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static perfetto.protos.MediaMetricOuterClass.MediaMetric parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static perfetto.protos.MediaMetricOuterClass.MediaMetric parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static perfetto.protos.MediaMetricOuterClass.MediaMetric parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static perfetto.protos.MediaMetricOuterClass.MediaMetric parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static perfetto.protos.MediaMetricOuterClass.MediaMetric parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static perfetto.protos.MediaMetricOuterClass.MediaMetric parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static perfetto.protos.MediaMetricOuterClass.MediaMetric parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static perfetto.protos.MediaMetricOuterClass.MediaMetric parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static perfetto.protos.MediaMetricOuterClass.MediaMetric parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static perfetto.protos.MediaMetricOuterClass.MediaMetric parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(perfetto.protos.MediaMetricOuterClass.MediaMetric prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * <pre>
     * Ported from catapult's media_metric.html.
     * </pre>
     *
     * Protobuf type {@code perfetto.protos.MediaMetric}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:perfetto.protos.MediaMetric)
        perfetto.protos.MediaMetricOuterClass.MediaMetricOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return perfetto.protos.MediaMetricOuterClass.internal_static_perfetto_protos_MediaMetric_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return perfetto.protos.MediaMetricOuterClass.internal_static_perfetto_protos_MediaMetric_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                perfetto.protos.MediaMetricOuterClass.MediaMetric.class, perfetto.protos.MediaMetricOuterClass.MediaMetric.Builder.class);
      }

      // Construct using perfetto.protos.MediaMetricOuterClass.MediaMetric.newBuilder()
      private Builder() {

      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);

      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        bitField0_ = 0;
        timeToVideoPlay_ = emptyDoubleList();
        timeToAudioPlay_ = emptyDoubleList();
        droppedFrameCount_ = emptyLongList();
        bufferingTime_ = emptyDoubleList();
        roughness_ = emptyDoubleList();
        freezing_ = emptyDoubleList();
        seekTime_ = emptyDoubleList();
        pipelineSeekTime_ = emptyDoubleList();
        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return perfetto.protos.MediaMetricOuterClass.internal_static_perfetto_protos_MediaMetric_descriptor;
      }

      @java.lang.Override
      public perfetto.protos.MediaMetricOuterClass.MediaMetric getDefaultInstanceForType() {
        return perfetto.protos.MediaMetricOuterClass.MediaMetric.getDefaultInstance();
      }

      @java.lang.Override
      public perfetto.protos.MediaMetricOuterClass.MediaMetric build() {
        perfetto.protos.MediaMetricOuterClass.MediaMetric result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public perfetto.protos.MediaMetricOuterClass.MediaMetric buildPartial() {
        perfetto.protos.MediaMetricOuterClass.MediaMetric result = new perfetto.protos.MediaMetricOuterClass.MediaMetric(this);
        buildPartialRepeatedFields(result);
        if (bitField0_ != 0) { buildPartial0(result); }
        onBuilt();
        return result;
      }

      private void buildPartialRepeatedFields(perfetto.protos.MediaMetricOuterClass.MediaMetric result) {
        if (((bitField0_ & 0x00000001) != 0)) {
          timeToVideoPlay_.makeImmutable();
          bitField0_ = (bitField0_ & ~0x00000001);
        }
        result.timeToVideoPlay_ = timeToVideoPlay_;
        if (((bitField0_ & 0x00000002) != 0)) {
          timeToAudioPlay_.makeImmutable();
          bitField0_ = (bitField0_ & ~0x00000002);
        }
        result.timeToAudioPlay_ = timeToAudioPlay_;
        if (((bitField0_ & 0x00000004) != 0)) {
          droppedFrameCount_.makeImmutable();
          bitField0_ = (bitField0_ & ~0x00000004);
        }
        result.droppedFrameCount_ = droppedFrameCount_;
        if (((bitField0_ & 0x00000008) != 0)) {
          bufferingTime_.makeImmutable();
          bitField0_ = (bitField0_ & ~0x00000008);
        }
        result.bufferingTime_ = bufferingTime_;
        if (((bitField0_ & 0x00000010) != 0)) {
          roughness_.makeImmutable();
          bitField0_ = (bitField0_ & ~0x00000010);
        }
        result.roughness_ = roughness_;
        if (((bitField0_ & 0x00000020) != 0)) {
          freezing_.makeImmutable();
          bitField0_ = (bitField0_ & ~0x00000020);
        }
        result.freezing_ = freezing_;
        if (((bitField0_ & 0x00000040) != 0)) {
          seekTime_.makeImmutable();
          bitField0_ = (bitField0_ & ~0x00000040);
        }
        result.seekTime_ = seekTime_;
        if (((bitField0_ & 0x00000080) != 0)) {
          pipelineSeekTime_.makeImmutable();
          bitField0_ = (bitField0_ & ~0x00000080);
        }
        result.pipelineSeekTime_ = pipelineSeekTime_;
      }

      private void buildPartial0(perfetto.protos.MediaMetricOuterClass.MediaMetric result) {
        int from_bitField0_ = bitField0_;
      }

      @java.lang.Override
      public Builder clone() {
        return super.clone();
      }
      @java.lang.Override
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.setField(field, value);
      }
      @java.lang.Override
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return super.clearField(field);
      }
      @java.lang.Override
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return super.clearOneof(oneof);
      }
      @java.lang.Override
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, java.lang.Object value) {
        return super.setRepeatedField(field, index, value);
      }
      @java.lang.Override
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.addRepeatedField(field, value);
      }
      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof perfetto.protos.MediaMetricOuterClass.MediaMetric) {
          return mergeFrom((perfetto.protos.MediaMetricOuterClass.MediaMetric)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(perfetto.protos.MediaMetricOuterClass.MediaMetric other) {
        if (other == perfetto.protos.MediaMetricOuterClass.MediaMetric.getDefaultInstance()) return this;
        if (!other.timeToVideoPlay_.isEmpty()) {
          if (timeToVideoPlay_.isEmpty()) {
            timeToVideoPlay_ = other.timeToVideoPlay_;
            bitField0_ = (bitField0_ & ~0x00000001);
          } else {
            ensureTimeToVideoPlayIsMutable();
            timeToVideoPlay_.addAll(other.timeToVideoPlay_);
          }
          onChanged();
        }
        if (!other.timeToAudioPlay_.isEmpty()) {
          if (timeToAudioPlay_.isEmpty()) {
            timeToAudioPlay_ = other.timeToAudioPlay_;
            bitField0_ = (bitField0_ & ~0x00000002);
          } else {
            ensureTimeToAudioPlayIsMutable();
            timeToAudioPlay_.addAll(other.timeToAudioPlay_);
          }
          onChanged();
        }
        if (!other.droppedFrameCount_.isEmpty()) {
          if (droppedFrameCount_.isEmpty()) {
            droppedFrameCount_ = other.droppedFrameCount_;
            bitField0_ = (bitField0_ & ~0x00000004);
          } else {
            ensureDroppedFrameCountIsMutable();
            droppedFrameCount_.addAll(other.droppedFrameCount_);
          }
          onChanged();
        }
        if (!other.bufferingTime_.isEmpty()) {
          if (bufferingTime_.isEmpty()) {
            bufferingTime_ = other.bufferingTime_;
            bitField0_ = (bitField0_ & ~0x00000008);
          } else {
            ensureBufferingTimeIsMutable();
            bufferingTime_.addAll(other.bufferingTime_);
          }
          onChanged();
        }
        if (!other.roughness_.isEmpty()) {
          if (roughness_.isEmpty()) {
            roughness_ = other.roughness_;
            bitField0_ = (bitField0_ & ~0x00000010);
          } else {
            ensureRoughnessIsMutable();
            roughness_.addAll(other.roughness_);
          }
          onChanged();
        }
        if (!other.freezing_.isEmpty()) {
          if (freezing_.isEmpty()) {
            freezing_ = other.freezing_;
            bitField0_ = (bitField0_ & ~0x00000020);
          } else {
            ensureFreezingIsMutable();
            freezing_.addAll(other.freezing_);
          }
          onChanged();
        }
        if (!other.seekTime_.isEmpty()) {
          if (seekTime_.isEmpty()) {
            seekTime_ = other.seekTime_;
            bitField0_ = (bitField0_ & ~0x00000040);
          } else {
            ensureSeekTimeIsMutable();
            seekTime_.addAll(other.seekTime_);
          }
          onChanged();
        }
        if (!other.pipelineSeekTime_.isEmpty()) {
          if (pipelineSeekTime_.isEmpty()) {
            pipelineSeekTime_ = other.pipelineSeekTime_;
            bitField0_ = (bitField0_ & ~0x00000080);
          } else {
            ensurePipelineSeekTimeIsMutable();
            pipelineSeekTime_.addAll(other.pipelineSeekTime_);
          }
          onChanged();
        }
        this.mergeUnknownFields(other.getUnknownFields());
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        if (extensionRegistry == null) {
          throw new java.lang.NullPointerException();
        }
        try {
          boolean done = false;
          while (!done) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                done = true;
                break;
              case 9: {
                double v = input.readDouble();
                ensureTimeToVideoPlayIsMutable();
                timeToVideoPlay_.addDouble(v);
                break;
              } // case 9
              case 10: {
                int length = input.readRawVarint32();
                int limit = input.pushLimit(length);
                ensureTimeToVideoPlayIsMutable();
                while (input.getBytesUntilLimit() > 0) {
                  timeToVideoPlay_.addDouble(input.readDouble());
                }
                input.popLimit(limit);
                break;
              } // case 10
              case 17: {
                double v = input.readDouble();
                ensureTimeToAudioPlayIsMutable();
                timeToAudioPlay_.addDouble(v);
                break;
              } // case 17
              case 18: {
                int length = input.readRawVarint32();
                int limit = input.pushLimit(length);
                ensureTimeToAudioPlayIsMutable();
                while (input.getBytesUntilLimit() > 0) {
                  timeToAudioPlay_.addDouble(input.readDouble());
                }
                input.popLimit(limit);
                break;
              } // case 18
              case 24: {
                long v = input.readInt64();
                ensureDroppedFrameCountIsMutable();
                droppedFrameCount_.addLong(v);
                break;
              } // case 24
              case 26: {
                int length = input.readRawVarint32();
                int limit = input.pushLimit(length);
                ensureDroppedFrameCountIsMutable();
                while (input.getBytesUntilLimit() > 0) {
                  droppedFrameCount_.addLong(input.readInt64());
                }
                input.popLimit(limit);
                break;
              } // case 26
              case 33: {
                double v = input.readDouble();
                ensureBufferingTimeIsMutable();
                bufferingTime_.addDouble(v);
                break;
              } // case 33
              case 34: {
                int length = input.readRawVarint32();
                int limit = input.pushLimit(length);
                ensureBufferingTimeIsMutable();
                while (input.getBytesUntilLimit() > 0) {
                  bufferingTime_.addDouble(input.readDouble());
                }
                input.popLimit(limit);
                break;
              } // case 34
              case 41: {
                double v = input.readDouble();
                ensureRoughnessIsMutable();
                roughness_.addDouble(v);
                break;
              } // case 41
              case 42: {
                int length = input.readRawVarint32();
                int limit = input.pushLimit(length);
                ensureRoughnessIsMutable();
                while (input.getBytesUntilLimit() > 0) {
                  roughness_.addDouble(input.readDouble());
                }
                input.popLimit(limit);
                break;
              } // case 42
              case 49: {
                double v = input.readDouble();
                ensureFreezingIsMutable();
                freezing_.addDouble(v);
                break;
              } // case 49
              case 50: {
                int length = input.readRawVarint32();
                int limit = input.pushLimit(length);
                ensureFreezingIsMutable();
                while (input.getBytesUntilLimit() > 0) {
                  freezing_.addDouble(input.readDouble());
                }
                input.popLimit(limit);
                break;
              } // case 50
              case 65: {
                double v = input.readDouble();
                ensureSeekTimeIsMutable();
                seekTime_.addDouble(v);
                break;
              } // case 65
              case 66: {
                int length = input.readRawVarint32();
                int limit = input.pushLimit(length);
                ensureSeekTimeIsMutable();
                while (input.getBytesUntilLimit() > 0) {
                  seekTime_.addDouble(input.readDouble());
                }
                input.popLimit(limit);
                break;
              } // case 66
              case 73: {
                double v = input.readDouble();
                ensurePipelineSeekTimeIsMutable();
                pipelineSeekTime_.addDouble(v);
                break;
              } // case 73
              case 74: {
                int length = input.readRawVarint32();
                int limit = input.pushLimit(length);
                ensurePipelineSeekTimeIsMutable();
                while (input.getBytesUntilLimit() > 0) {
                  pipelineSeekTime_.addDouble(input.readDouble());
                }
                input.popLimit(limit);
                break;
              } // case 74
              default: {
                if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                  done = true; // was an endgroup tag
                }
                break;
              } // default:
            } // switch (tag)
          } // while (!done)
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.unwrapIOException();
        } finally {
          onChanged();
        } // finally
        return this;
      }
      private int bitField0_;

      private com.google.protobuf.Internal.DoubleList timeToVideoPlay_ = emptyDoubleList();
      private void ensureTimeToVideoPlayIsMutable() {
        if (!((bitField0_ & 0x00000001) != 0)) {
          timeToVideoPlay_ = mutableCopy(timeToVideoPlay_);
          bitField0_ |= 0x00000001;
        }
      }
      /**
       * <code>repeated double time_to_video_play = 1 [(.perfetto.protos.unit) = "ms_smallerIsBetter"];</code>
       * @return A list containing the timeToVideoPlay.
       */
      public java.util.List<java.lang.Double>
          getTimeToVideoPlayList() {
        return ((bitField0_ & 0x00000001) != 0) ?
                 java.util.Collections.unmodifiableList(timeToVideoPlay_) : timeToVideoPlay_;
      }
      /**
       * <code>repeated double time_to_video_play = 1 [(.perfetto.protos.unit) = "ms_smallerIsBetter"];</code>
       * @return The count of timeToVideoPlay.
       */
      public int getTimeToVideoPlayCount() {
        return timeToVideoPlay_.size();
      }
      /**
       * <code>repeated double time_to_video_play = 1 [(.perfetto.protos.unit) = "ms_smallerIsBetter"];</code>
       * @param index The index of the element to return.
       * @return The timeToVideoPlay at the given index.
       */
      public double getTimeToVideoPlay(int index) {
        return timeToVideoPlay_.getDouble(index);
      }
      /**
       * <code>repeated double time_to_video_play = 1 [(.perfetto.protos.unit) = "ms_smallerIsBetter"];</code>
       * @param index The index to set the value at.
       * @param value The timeToVideoPlay to set.
       * @return This builder for chaining.
       */
      public Builder setTimeToVideoPlay(
          int index, double value) {
        
        ensureTimeToVideoPlayIsMutable();
        timeToVideoPlay_.setDouble(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated double time_to_video_play = 1 [(.perfetto.protos.unit) = "ms_smallerIsBetter"];</code>
       * @param value The timeToVideoPlay to add.
       * @return This builder for chaining.
       */
      public Builder addTimeToVideoPlay(double value) {
        
        ensureTimeToVideoPlayIsMutable();
        timeToVideoPlay_.addDouble(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated double time_to_video_play = 1 [(.perfetto.protos.unit) = "ms_smallerIsBetter"];</code>
       * @param values The timeToVideoPlay to add.
       * @return This builder for chaining.
       */
      public Builder addAllTimeToVideoPlay(
          java.lang.Iterable<? extends java.lang.Double> values) {
        ensureTimeToVideoPlayIsMutable();
        com.google.protobuf.AbstractMessageLite.Builder.addAll(
            values, timeToVideoPlay_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated double time_to_video_play = 1 [(.perfetto.protos.unit) = "ms_smallerIsBetter"];</code>
       * @return This builder for chaining.
       */
      public Builder clearTimeToVideoPlay() {
        timeToVideoPlay_ = emptyDoubleList();
        bitField0_ = (bitField0_ & ~0x00000001);
        onChanged();
        return this;
      }

      private com.google.protobuf.Internal.DoubleList timeToAudioPlay_ = emptyDoubleList();
      private void ensureTimeToAudioPlayIsMutable() {
        if (!((bitField0_ & 0x00000002) != 0)) {
          timeToAudioPlay_ = mutableCopy(timeToAudioPlay_);
          bitField0_ |= 0x00000002;
        }
      }
      /**
       * <code>repeated double time_to_audio_play = 2 [(.perfetto.protos.unit) = "ms_smallerIsBetter"];</code>
       * @return A list containing the timeToAudioPlay.
       */
      public java.util.List<java.lang.Double>
          getTimeToAudioPlayList() {
        return ((bitField0_ & 0x00000002) != 0) ?
                 java.util.Collections.unmodifiableList(timeToAudioPlay_) : timeToAudioPlay_;
      }
      /**
       * <code>repeated double time_to_audio_play = 2 [(.perfetto.protos.unit) = "ms_smallerIsBetter"];</code>
       * @return The count of timeToAudioPlay.
       */
      public int getTimeToAudioPlayCount() {
        return timeToAudioPlay_.size();
      }
      /**
       * <code>repeated double time_to_audio_play = 2 [(.perfetto.protos.unit) = "ms_smallerIsBetter"];</code>
       * @param index The index of the element to return.
       * @return The timeToAudioPlay at the given index.
       */
      public double getTimeToAudioPlay(int index) {
        return timeToAudioPlay_.getDouble(index);
      }
      /**
       * <code>repeated double time_to_audio_play = 2 [(.perfetto.protos.unit) = "ms_smallerIsBetter"];</code>
       * @param index The index to set the value at.
       * @param value The timeToAudioPlay to set.
       * @return This builder for chaining.
       */
      public Builder setTimeToAudioPlay(
          int index, double value) {
        
        ensureTimeToAudioPlayIsMutable();
        timeToAudioPlay_.setDouble(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated double time_to_audio_play = 2 [(.perfetto.protos.unit) = "ms_smallerIsBetter"];</code>
       * @param value The timeToAudioPlay to add.
       * @return This builder for chaining.
       */
      public Builder addTimeToAudioPlay(double value) {
        
        ensureTimeToAudioPlayIsMutable();
        timeToAudioPlay_.addDouble(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated double time_to_audio_play = 2 [(.perfetto.protos.unit) = "ms_smallerIsBetter"];</code>
       * @param values The timeToAudioPlay to add.
       * @return This builder for chaining.
       */
      public Builder addAllTimeToAudioPlay(
          java.lang.Iterable<? extends java.lang.Double> values) {
        ensureTimeToAudioPlayIsMutable();
        com.google.protobuf.AbstractMessageLite.Builder.addAll(
            values, timeToAudioPlay_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated double time_to_audio_play = 2 [(.perfetto.protos.unit) = "ms_smallerIsBetter"];</code>
       * @return This builder for chaining.
       */
      public Builder clearTimeToAudioPlay() {
        timeToAudioPlay_ = emptyDoubleList();
        bitField0_ = (bitField0_ & ~0x00000002);
        onChanged();
        return this;
      }

      private com.google.protobuf.Internal.LongList droppedFrameCount_ = emptyLongList();
      private void ensureDroppedFrameCountIsMutable() {
        if (!((bitField0_ & 0x00000004) != 0)) {
          droppedFrameCount_ = mutableCopy(droppedFrameCount_);
          bitField0_ |= 0x00000004;
        }
      }
      /**
       * <code>repeated int64 dropped_frame_count = 3 [(.perfetto.protos.unit) = "count_smallerIsBetter"];</code>
       * @return A list containing the droppedFrameCount.
       */
      public java.util.List<java.lang.Long>
          getDroppedFrameCountList() {
        return ((bitField0_ & 0x00000004) != 0) ?
                 java.util.Collections.unmodifiableList(droppedFrameCount_) : droppedFrameCount_;
      }
      /**
       * <code>repeated int64 dropped_frame_count = 3 [(.perfetto.protos.unit) = "count_smallerIsBetter"];</code>
       * @return The count of droppedFrameCount.
       */
      public int getDroppedFrameCountCount() {
        return droppedFrameCount_.size();
      }
      /**
       * <code>repeated int64 dropped_frame_count = 3 [(.perfetto.protos.unit) = "count_smallerIsBetter"];</code>
       * @param index The index of the element to return.
       * @return The droppedFrameCount at the given index.
       */
      public long getDroppedFrameCount(int index) {
        return droppedFrameCount_.getLong(index);
      }
      /**
       * <code>repeated int64 dropped_frame_count = 3 [(.perfetto.protos.unit) = "count_smallerIsBetter"];</code>
       * @param index The index to set the value at.
       * @param value The droppedFrameCount to set.
       * @return This builder for chaining.
       */
      public Builder setDroppedFrameCount(
          int index, long value) {
        
        ensureDroppedFrameCountIsMutable();
        droppedFrameCount_.setLong(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int64 dropped_frame_count = 3 [(.perfetto.protos.unit) = "count_smallerIsBetter"];</code>
       * @param value The droppedFrameCount to add.
       * @return This builder for chaining.
       */
      public Builder addDroppedFrameCount(long value) {
        
        ensureDroppedFrameCountIsMutable();
        droppedFrameCount_.addLong(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int64 dropped_frame_count = 3 [(.perfetto.protos.unit) = "count_smallerIsBetter"];</code>
       * @param values The droppedFrameCount to add.
       * @return This builder for chaining.
       */
      public Builder addAllDroppedFrameCount(
          java.lang.Iterable<? extends java.lang.Long> values) {
        ensureDroppedFrameCountIsMutable();
        com.google.protobuf.AbstractMessageLite.Builder.addAll(
            values, droppedFrameCount_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int64 dropped_frame_count = 3 [(.perfetto.protos.unit) = "count_smallerIsBetter"];</code>
       * @return This builder for chaining.
       */
      public Builder clearDroppedFrameCount() {
        droppedFrameCount_ = emptyLongList();
        bitField0_ = (bitField0_ & ~0x00000004);
        onChanged();
        return this;
      }

      private com.google.protobuf.Internal.DoubleList bufferingTime_ = emptyDoubleList();
      private void ensureBufferingTimeIsMutable() {
        if (!((bitField0_ & 0x00000008) != 0)) {
          bufferingTime_ = mutableCopy(bufferingTime_);
          bitField0_ |= 0x00000008;
        }
      }
      /**
       * <code>repeated double buffering_time = 4 [(.perfetto.protos.unit) = "ms_smallerIsBetter"];</code>
       * @return A list containing the bufferingTime.
       */
      public java.util.List<java.lang.Double>
          getBufferingTimeList() {
        return ((bitField0_ & 0x00000008) != 0) ?
                 java.util.Collections.unmodifiableList(bufferingTime_) : bufferingTime_;
      }
      /**
       * <code>repeated double buffering_time = 4 [(.perfetto.protos.unit) = "ms_smallerIsBetter"];</code>
       * @return The count of bufferingTime.
       */
      public int getBufferingTimeCount() {
        return bufferingTime_.size();
      }
      /**
       * <code>repeated double buffering_time = 4 [(.perfetto.protos.unit) = "ms_smallerIsBetter"];</code>
       * @param index The index of the element to return.
       * @return The bufferingTime at the given index.
       */
      public double getBufferingTime(int index) {
        return bufferingTime_.getDouble(index);
      }
      /**
       * <code>repeated double buffering_time = 4 [(.perfetto.protos.unit) = "ms_smallerIsBetter"];</code>
       * @param index The index to set the value at.
       * @param value The bufferingTime to set.
       * @return This builder for chaining.
       */
      public Builder setBufferingTime(
          int index, double value) {
        
        ensureBufferingTimeIsMutable();
        bufferingTime_.setDouble(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated double buffering_time = 4 [(.perfetto.protos.unit) = "ms_smallerIsBetter"];</code>
       * @param value The bufferingTime to add.
       * @return This builder for chaining.
       */
      public Builder addBufferingTime(double value) {
        
        ensureBufferingTimeIsMutable();
        bufferingTime_.addDouble(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated double buffering_time = 4 [(.perfetto.protos.unit) = "ms_smallerIsBetter"];</code>
       * @param values The bufferingTime to add.
       * @return This builder for chaining.
       */
      public Builder addAllBufferingTime(
          java.lang.Iterable<? extends java.lang.Double> values) {
        ensureBufferingTimeIsMutable();
        com.google.protobuf.AbstractMessageLite.Builder.addAll(
            values, bufferingTime_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated double buffering_time = 4 [(.perfetto.protos.unit) = "ms_smallerIsBetter"];</code>
       * @return This builder for chaining.
       */
      public Builder clearBufferingTime() {
        bufferingTime_ = emptyDoubleList();
        bitField0_ = (bitField0_ & ~0x00000008);
        onChanged();
        return this;
      }

      private com.google.protobuf.Internal.DoubleList roughness_ = emptyDoubleList();
      private void ensureRoughnessIsMutable() {
        if (!((bitField0_ & 0x00000010) != 0)) {
          roughness_ = mutableCopy(roughness_);
          bitField0_ |= 0x00000010;
        }
      }
      /**
       * <code>repeated double roughness = 5 [(.perfetto.protos.unit) = "count_smallerIsBetter"];</code>
       * @return A list containing the roughness.
       */
      public java.util.List<java.lang.Double>
          getRoughnessList() {
        return ((bitField0_ & 0x00000010) != 0) ?
                 java.util.Collections.unmodifiableList(roughness_) : roughness_;
      }
      /**
       * <code>repeated double roughness = 5 [(.perfetto.protos.unit) = "count_smallerIsBetter"];</code>
       * @return The count of roughness.
       */
      public int getRoughnessCount() {
        return roughness_.size();
      }
      /**
       * <code>repeated double roughness = 5 [(.perfetto.protos.unit) = "count_smallerIsBetter"];</code>
       * @param index The index of the element to return.
       * @return The roughness at the given index.
       */
      public double getRoughness(int index) {
        return roughness_.getDouble(index);
      }
      /**
       * <code>repeated double roughness = 5 [(.perfetto.protos.unit) = "count_smallerIsBetter"];</code>
       * @param index The index to set the value at.
       * @param value The roughness to set.
       * @return This builder for chaining.
       */
      public Builder setRoughness(
          int index, double value) {
        
        ensureRoughnessIsMutable();
        roughness_.setDouble(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated double roughness = 5 [(.perfetto.protos.unit) = "count_smallerIsBetter"];</code>
       * @param value The roughness to add.
       * @return This builder for chaining.
       */
      public Builder addRoughness(double value) {
        
        ensureRoughnessIsMutable();
        roughness_.addDouble(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated double roughness = 5 [(.perfetto.protos.unit) = "count_smallerIsBetter"];</code>
       * @param values The roughness to add.
       * @return This builder for chaining.
       */
      public Builder addAllRoughness(
          java.lang.Iterable<? extends java.lang.Double> values) {
        ensureRoughnessIsMutable();
        com.google.protobuf.AbstractMessageLite.Builder.addAll(
            values, roughness_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated double roughness = 5 [(.perfetto.protos.unit) = "count_smallerIsBetter"];</code>
       * @return This builder for chaining.
       */
      public Builder clearRoughness() {
        roughness_ = emptyDoubleList();
        bitField0_ = (bitField0_ & ~0x00000010);
        onChanged();
        return this;
      }

      private com.google.protobuf.Internal.DoubleList freezing_ = emptyDoubleList();
      private void ensureFreezingIsMutable() {
        if (!((bitField0_ & 0x00000020) != 0)) {
          freezing_ = mutableCopy(freezing_);
          bitField0_ |= 0x00000020;
        }
      }
      /**
       * <code>repeated double freezing = 6 [(.perfetto.protos.unit) = "ms_smallerIsBetter"];</code>
       * @return A list containing the freezing.
       */
      public java.util.List<java.lang.Double>
          getFreezingList() {
        return ((bitField0_ & 0x00000020) != 0) ?
                 java.util.Collections.unmodifiableList(freezing_) : freezing_;
      }
      /**
       * <code>repeated double freezing = 6 [(.perfetto.protos.unit) = "ms_smallerIsBetter"];</code>
       * @return The count of freezing.
       */
      public int getFreezingCount() {
        return freezing_.size();
      }
      /**
       * <code>repeated double freezing = 6 [(.perfetto.protos.unit) = "ms_smallerIsBetter"];</code>
       * @param index The index of the element to return.
       * @return The freezing at the given index.
       */
      public double getFreezing(int index) {
        return freezing_.getDouble(index);
      }
      /**
       * <code>repeated double freezing = 6 [(.perfetto.protos.unit) = "ms_smallerIsBetter"];</code>
       * @param index The index to set the value at.
       * @param value The freezing to set.
       * @return This builder for chaining.
       */
      public Builder setFreezing(
          int index, double value) {
        
        ensureFreezingIsMutable();
        freezing_.setDouble(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated double freezing = 6 [(.perfetto.protos.unit) = "ms_smallerIsBetter"];</code>
       * @param value The freezing to add.
       * @return This builder for chaining.
       */
      public Builder addFreezing(double value) {
        
        ensureFreezingIsMutable();
        freezing_.addDouble(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated double freezing = 6 [(.perfetto.protos.unit) = "ms_smallerIsBetter"];</code>
       * @param values The freezing to add.
       * @return This builder for chaining.
       */
      public Builder addAllFreezing(
          java.lang.Iterable<? extends java.lang.Double> values) {
        ensureFreezingIsMutable();
        com.google.protobuf.AbstractMessageLite.Builder.addAll(
            values, freezing_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated double freezing = 6 [(.perfetto.protos.unit) = "ms_smallerIsBetter"];</code>
       * @return This builder for chaining.
       */
      public Builder clearFreezing() {
        freezing_ = emptyDoubleList();
        bitField0_ = (bitField0_ & ~0x00000020);
        onChanged();
        return this;
      }

      private com.google.protobuf.Internal.DoubleList seekTime_ = emptyDoubleList();
      private void ensureSeekTimeIsMutable() {
        if (!((bitField0_ & 0x00000040) != 0)) {
          seekTime_ = mutableCopy(seekTime_);
          bitField0_ |= 0x00000040;
        }
      }
      /**
       * <pre>
       * These have multiple dynamic histogram names in the TBMv2 version. Because
       * TBMv3 doesn't support dynamic names, we report one value per seek into each
       * of these two combined histograms.
       * </pre>
       *
       * <code>repeated double seek_time = 8 [(.perfetto.protos.unit) = "ms_smallerIsBetter"];</code>
       * @return A list containing the seekTime.
       */
      public java.util.List<java.lang.Double>
          getSeekTimeList() {
        return ((bitField0_ & 0x00000040) != 0) ?
                 java.util.Collections.unmodifiableList(seekTime_) : seekTime_;
      }
      /**
       * <pre>
       * These have multiple dynamic histogram names in the TBMv2 version. Because
       * TBMv3 doesn't support dynamic names, we report one value per seek into each
       * of these two combined histograms.
       * </pre>
       *
       * <code>repeated double seek_time = 8 [(.perfetto.protos.unit) = "ms_smallerIsBetter"];</code>
       * @return The count of seekTime.
       */
      public int getSeekTimeCount() {
        return seekTime_.size();
      }
      /**
       * <pre>
       * These have multiple dynamic histogram names in the TBMv2 version. Because
       * TBMv3 doesn't support dynamic names, we report one value per seek into each
       * of these two combined histograms.
       * </pre>
       *
       * <code>repeated double seek_time = 8 [(.perfetto.protos.unit) = "ms_smallerIsBetter"];</code>
       * @param index The index of the element to return.
       * @return The seekTime at the given index.
       */
      public double getSeekTime(int index) {
        return seekTime_.getDouble(index);
      }
      /**
       * <pre>
       * These have multiple dynamic histogram names in the TBMv2 version. Because
       * TBMv3 doesn't support dynamic names, we report one value per seek into each
       * of these two combined histograms.
       * </pre>
       *
       * <code>repeated double seek_time = 8 [(.perfetto.protos.unit) = "ms_smallerIsBetter"];</code>
       * @param index The index to set the value at.
       * @param value The seekTime to set.
       * @return This builder for chaining.
       */
      public Builder setSeekTime(
          int index, double value) {
        
        ensureSeekTimeIsMutable();
        seekTime_.setDouble(index, value);
        onChanged();
        return this;
      }
      /**
       * <pre>
       * These have multiple dynamic histogram names in the TBMv2 version. Because
       * TBMv3 doesn't support dynamic names, we report one value per seek into each
       * of these two combined histograms.
       * </pre>
       *
       * <code>repeated double seek_time = 8 [(.perfetto.protos.unit) = "ms_smallerIsBetter"];</code>
       * @param value The seekTime to add.
       * @return This builder for chaining.
       */
      public Builder addSeekTime(double value) {
        
        ensureSeekTimeIsMutable();
        seekTime_.addDouble(value);
        onChanged();
        return this;
      }
      /**
       * <pre>
       * These have multiple dynamic histogram names in the TBMv2 version. Because
       * TBMv3 doesn't support dynamic names, we report one value per seek into each
       * of these two combined histograms.
       * </pre>
       *
       * <code>repeated double seek_time = 8 [(.perfetto.protos.unit) = "ms_smallerIsBetter"];</code>
       * @param values The seekTime to add.
       * @return This builder for chaining.
       */
      public Builder addAllSeekTime(
          java.lang.Iterable<? extends java.lang.Double> values) {
        ensureSeekTimeIsMutable();
        com.google.protobuf.AbstractMessageLite.Builder.addAll(
            values, seekTime_);
        onChanged();
        return this;
      }
      /**
       * <pre>
       * These have multiple dynamic histogram names in the TBMv2 version. Because
       * TBMv3 doesn't support dynamic names, we report one value per seek into each
       * of these two combined histograms.
       * </pre>
       *
       * <code>repeated double seek_time = 8 [(.perfetto.protos.unit) = "ms_smallerIsBetter"];</code>
       * @return This builder for chaining.
       */
      public Builder clearSeekTime() {
        seekTime_ = emptyDoubleList();
        bitField0_ = (bitField0_ & ~0x00000040);
        onChanged();
        return this;
      }

      private com.google.protobuf.Internal.DoubleList pipelineSeekTime_ = emptyDoubleList();
      private void ensurePipelineSeekTimeIsMutable() {
        if (!((bitField0_ & 0x00000080) != 0)) {
          pipelineSeekTime_ = mutableCopy(pipelineSeekTime_);
          bitField0_ |= 0x00000080;
        }
      }
      /**
       * <code>repeated double pipeline_seek_time = 9 [(.perfetto.protos.unit) = "ms_smallerIsBetter"];</code>
       * @return A list containing the pipelineSeekTime.
       */
      public java.util.List<java.lang.Double>
          getPipelineSeekTimeList() {
        return ((bitField0_ & 0x00000080) != 0) ?
                 java.util.Collections.unmodifiableList(pipelineSeekTime_) : pipelineSeekTime_;
      }
      /**
       * <code>repeated double pipeline_seek_time = 9 [(.perfetto.protos.unit) = "ms_smallerIsBetter"];</code>
       * @return The count of pipelineSeekTime.
       */
      public int getPipelineSeekTimeCount() {
        return pipelineSeekTime_.size();
      }
      /**
       * <code>repeated double pipeline_seek_time = 9 [(.perfetto.protos.unit) = "ms_smallerIsBetter"];</code>
       * @param index The index of the element to return.
       * @return The pipelineSeekTime at the given index.
       */
      public double getPipelineSeekTime(int index) {
        return pipelineSeekTime_.getDouble(index);
      }
      /**
       * <code>repeated double pipeline_seek_time = 9 [(.perfetto.protos.unit) = "ms_smallerIsBetter"];</code>
       * @param index The index to set the value at.
       * @param value The pipelineSeekTime to set.
       * @return This builder for chaining.
       */
      public Builder setPipelineSeekTime(
          int index, double value) {
        
        ensurePipelineSeekTimeIsMutable();
        pipelineSeekTime_.setDouble(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated double pipeline_seek_time = 9 [(.perfetto.protos.unit) = "ms_smallerIsBetter"];</code>
       * @param value The pipelineSeekTime to add.
       * @return This builder for chaining.
       */
      public Builder addPipelineSeekTime(double value) {
        
        ensurePipelineSeekTimeIsMutable();
        pipelineSeekTime_.addDouble(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated double pipeline_seek_time = 9 [(.perfetto.protos.unit) = "ms_smallerIsBetter"];</code>
       * @param values The pipelineSeekTime to add.
       * @return This builder for chaining.
       */
      public Builder addAllPipelineSeekTime(
          java.lang.Iterable<? extends java.lang.Double> values) {
        ensurePipelineSeekTimeIsMutable();
        com.google.protobuf.AbstractMessageLite.Builder.addAll(
            values, pipelineSeekTime_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated double pipeline_seek_time = 9 [(.perfetto.protos.unit) = "ms_smallerIsBetter"];</code>
       * @return This builder for chaining.
       */
      public Builder clearPipelineSeekTime() {
        pipelineSeekTime_ = emptyDoubleList();
        bitField0_ = (bitField0_ & ~0x00000080);
        onChanged();
        return this;
      }
      @java.lang.Override
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      @java.lang.Override
      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:perfetto.protos.MediaMetric)
    }

    // @@protoc_insertion_point(class_scope:perfetto.protos.MediaMetric)
    private static final perfetto.protos.MediaMetricOuterClass.MediaMetric DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new perfetto.protos.MediaMetricOuterClass.MediaMetric();
    }

    public static perfetto.protos.MediaMetricOuterClass.MediaMetric getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    @java.lang.Deprecated public static final com.google.protobuf.Parser<MediaMetric>
        PARSER = new com.google.protobuf.AbstractParser<MediaMetric>() {
      @java.lang.Override
      public MediaMetric parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        Builder builder = newBuilder();
        try {
          builder.mergeFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.setUnfinishedMessage(builder.buildPartial());
        } catch (com.google.protobuf.UninitializedMessageException e) {
          throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
        } catch (java.io.IOException e) {
          throw new com.google.protobuf.InvalidProtocolBufferException(e)
              .setUnfinishedMessage(builder.buildPartial());
        }
        return builder.buildPartial();
      }
    };

    public static com.google.protobuf.Parser<MediaMetric> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<MediaMetric> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public perfetto.protos.MediaMetricOuterClass.MediaMetric getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_perfetto_protos_MediaMetric_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_perfetto_protos_MediaMetric_fieldAccessorTable;

  public static com.google.protobuf.Descriptors.FileDescriptor
      getDescriptor() {
    return descriptor;
  }
  private static  com.google.protobuf.Descriptors.FileDescriptor
      descriptor;
  static {
    java.lang.String[] descriptorData = {
      "\n1protos/perfetto/metrics/chrome/media_m" +
      "etric.proto\022\017perfetto.protos\032,protos/per" +
      "fetto/metrics/custom_options.proto\"\224\003\n\013M" +
      "ediaMetric\0222\n\022time_to_video_play\030\001 \003(\001B\026" +
      "\212\265\030\022ms_smallerIsBetter\0222\n\022time_to_audio_" +
      "play\030\002 \003(\001B\026\212\265\030\022ms_smallerIsBetter\0226\n\023dr" +
      "opped_frame_count\030\003 \003(\003B\031\212\265\030\025count_small" +
      "erIsBetter\022.\n\016buffering_time\030\004 \003(\001B\026\212\265\030\022" +
      "ms_smallerIsBetter\022,\n\troughness\030\005 \003(\001B\031\212" +
      "\265\030\025count_smallerIsBetter\022(\n\010freezing\030\006 \003" +
      "(\001B\026\212\265\030\022ms_smallerIsBetter\022)\n\tseek_time\030" +
      "\010 \003(\001B\026\212\265\030\022ms_smallerIsBetter\0222\n\022pipelin" +
      "e_seek_time\030\t \003(\001B\026\212\265\030\022ms_smallerIsBette" +
      "r"
    };
    descriptor = com.google.protobuf.Descriptors.FileDescriptor
      .internalBuildGeneratedFileFrom(descriptorData,
        new com.google.protobuf.Descriptors.FileDescriptor[] {
          perfetto.protos.CustomOptions.getDescriptor(),
        });
    internal_static_perfetto_protos_MediaMetric_descriptor =
      getDescriptor().getMessageTypes().get(0);
    internal_static_perfetto_protos_MediaMetric_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_perfetto_protos_MediaMetric_descriptor,
        new java.lang.String[] { "TimeToVideoPlay", "TimeToAudioPlay", "DroppedFrameCount", "BufferingTime", "Roughness", "Freezing", "SeekTime", "PipelineSeekTime", });
    com.google.protobuf.ExtensionRegistry registry =
        com.google.protobuf.ExtensionRegistry.newInstance();
    registry.add(perfetto.protos.CustomOptions.unit);
    com.google.protobuf.Descriptors.FileDescriptor
        .internalUpdateFileDescriptor(descriptor, registry);
    perfetto.protos.CustomOptions.getDescriptor();
  }

  // @@protoc_insertion_point(outer_class_scope)
}
