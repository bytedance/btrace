// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: protos/perfetto/metrics/chrome/blink_gc_metric.proto

package perfetto.protos;

public final class BlinkGcMetricOuterClass {
  private BlinkGcMetricOuterClass() {}
  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistryLite registry) {
  }

  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistry registry) {
    registerAllExtensions(
        (com.google.protobuf.ExtensionRegistryLite) registry);
  }
  public interface BlinkGcMetricOrBuilder extends
      // @@protoc_insertion_point(interface_extends:perfetto.protos.BlinkGcMetric)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <code>repeated double blink_gc_atomic_pause_mark_epilogue = 1 [(.perfetto.protos.unit) = "ms_smallerIsBetter"];</code>
     * @return A list containing the blinkGcAtomicPauseMarkEpilogue.
     */
    java.util.List<java.lang.Double> getBlinkGcAtomicPauseMarkEpilogueList();
    /**
     * <code>repeated double blink_gc_atomic_pause_mark_epilogue = 1 [(.perfetto.protos.unit) = "ms_smallerIsBetter"];</code>
     * @return The count of blinkGcAtomicPauseMarkEpilogue.
     */
    int getBlinkGcAtomicPauseMarkEpilogueCount();
    /**
     * <code>repeated double blink_gc_atomic_pause_mark_epilogue = 1 [(.perfetto.protos.unit) = "ms_smallerIsBetter"];</code>
     * @param index The index of the element to return.
     * @return The blinkGcAtomicPauseMarkEpilogue at the given index.
     */
    double getBlinkGcAtomicPauseMarkEpilogue(int index);

    /**
     * <code>repeated double blink_gc_main_thread_cycle_full_atomic_mark_epilogue = 2 [(.perfetto.protos.unit) = "ms_smallerIsBetter"];</code>
     * @return A list containing the blinkGcMainThreadCycleFullAtomicMarkEpilogue.
     */
    java.util.List<java.lang.Double> getBlinkGcMainThreadCycleFullAtomicMarkEpilogueList();
    /**
     * <code>repeated double blink_gc_main_thread_cycle_full_atomic_mark_epilogue = 2 [(.perfetto.protos.unit) = "ms_smallerIsBetter"];</code>
     * @return The count of blinkGcMainThreadCycleFullAtomicMarkEpilogue.
     */
    int getBlinkGcMainThreadCycleFullAtomicMarkEpilogueCount();
    /**
     * <code>repeated double blink_gc_main_thread_cycle_full_atomic_mark_epilogue = 2 [(.perfetto.protos.unit) = "ms_smallerIsBetter"];</code>
     * @param index The index of the element to return.
     * @return The blinkGcMainThreadCycleFullAtomicMarkEpilogue at the given index.
     */
    double getBlinkGcMainThreadCycleFullAtomicMarkEpilogue(int index);

    /**
     * <code>repeated double blink_gc_atomic_pause_mark_prologue = 3 [(.perfetto.protos.unit) = "ms_smallerIsBetter"];</code>
     * @return A list containing the blinkGcAtomicPauseMarkPrologue.
     */
    java.util.List<java.lang.Double> getBlinkGcAtomicPauseMarkPrologueList();
    /**
     * <code>repeated double blink_gc_atomic_pause_mark_prologue = 3 [(.perfetto.protos.unit) = "ms_smallerIsBetter"];</code>
     * @return The count of blinkGcAtomicPauseMarkPrologue.
     */
    int getBlinkGcAtomicPauseMarkPrologueCount();
    /**
     * <code>repeated double blink_gc_atomic_pause_mark_prologue = 3 [(.perfetto.protos.unit) = "ms_smallerIsBetter"];</code>
     * @param index The index of the element to return.
     * @return The blinkGcAtomicPauseMarkPrologue at the given index.
     */
    double getBlinkGcAtomicPauseMarkPrologue(int index);

    /**
     * <code>repeated double blink_gc_main_thread_cycle_full_atomic_mark_prologue = 4 [(.perfetto.protos.unit) = "ms_smallerIsBetter"];</code>
     * @return A list containing the blinkGcMainThreadCycleFullAtomicMarkPrologue.
     */
    java.util.List<java.lang.Double> getBlinkGcMainThreadCycleFullAtomicMarkPrologueList();
    /**
     * <code>repeated double blink_gc_main_thread_cycle_full_atomic_mark_prologue = 4 [(.perfetto.protos.unit) = "ms_smallerIsBetter"];</code>
     * @return The count of blinkGcMainThreadCycleFullAtomicMarkPrologue.
     */
    int getBlinkGcMainThreadCycleFullAtomicMarkPrologueCount();
    /**
     * <code>repeated double blink_gc_main_thread_cycle_full_atomic_mark_prologue = 4 [(.perfetto.protos.unit) = "ms_smallerIsBetter"];</code>
     * @param index The index of the element to return.
     * @return The blinkGcMainThreadCycleFullAtomicMarkPrologue at the given index.
     */
    double getBlinkGcMainThreadCycleFullAtomicMarkPrologue(int index);

    /**
     * <code>repeated double blink_gc_atomic_pause_mark_roots = 5 [(.perfetto.protos.unit) = "ms_smallerIsBetter"];</code>
     * @return A list containing the blinkGcAtomicPauseMarkRoots.
     */
    java.util.List<java.lang.Double> getBlinkGcAtomicPauseMarkRootsList();
    /**
     * <code>repeated double blink_gc_atomic_pause_mark_roots = 5 [(.perfetto.protos.unit) = "ms_smallerIsBetter"];</code>
     * @return The count of blinkGcAtomicPauseMarkRoots.
     */
    int getBlinkGcAtomicPauseMarkRootsCount();
    /**
     * <code>repeated double blink_gc_atomic_pause_mark_roots = 5 [(.perfetto.protos.unit) = "ms_smallerIsBetter"];</code>
     * @param index The index of the element to return.
     * @return The blinkGcAtomicPauseMarkRoots at the given index.
     */
    double getBlinkGcAtomicPauseMarkRoots(int index);

    /**
     * <code>repeated double blink_gc_main_thread_cycle_full_atomic_mark_roots = 6 [(.perfetto.protos.unit) = "ms_smallerIsBetter"];</code>
     * @return A list containing the blinkGcMainThreadCycleFullAtomicMarkRoots.
     */
    java.util.List<java.lang.Double> getBlinkGcMainThreadCycleFullAtomicMarkRootsList();
    /**
     * <code>repeated double blink_gc_main_thread_cycle_full_atomic_mark_roots = 6 [(.perfetto.protos.unit) = "ms_smallerIsBetter"];</code>
     * @return The count of blinkGcMainThreadCycleFullAtomicMarkRoots.
     */
    int getBlinkGcMainThreadCycleFullAtomicMarkRootsCount();
    /**
     * <code>repeated double blink_gc_main_thread_cycle_full_atomic_mark_roots = 6 [(.perfetto.protos.unit) = "ms_smallerIsBetter"];</code>
     * @param index The index of the element to return.
     * @return The blinkGcMainThreadCycleFullAtomicMarkRoots at the given index.
     */
    double getBlinkGcMainThreadCycleFullAtomicMarkRoots(int index);

    /**
     * <code>repeated double blink_gc_atomic_pause_sweep_and_compact = 7 [(.perfetto.protos.unit) = "ms_smallerIsBetter"];</code>
     * @return A list containing the blinkGcAtomicPauseSweepAndCompact.
     */
    java.util.List<java.lang.Double> getBlinkGcAtomicPauseSweepAndCompactList();
    /**
     * <code>repeated double blink_gc_atomic_pause_sweep_and_compact = 7 [(.perfetto.protos.unit) = "ms_smallerIsBetter"];</code>
     * @return The count of blinkGcAtomicPauseSweepAndCompact.
     */
    int getBlinkGcAtomicPauseSweepAndCompactCount();
    /**
     * <code>repeated double blink_gc_atomic_pause_sweep_and_compact = 7 [(.perfetto.protos.unit) = "ms_smallerIsBetter"];</code>
     * @param index The index of the element to return.
     * @return The blinkGcAtomicPauseSweepAndCompact at the given index.
     */
    double getBlinkGcAtomicPauseSweepAndCompact(int index);

    /**
     * <code>repeated double blink_gc_main_thread_cycle_full_atomic_sweep_compact = 8 [(.perfetto.protos.unit) = "ms_smallerIsBetter"];</code>
     * @return A list containing the blinkGcMainThreadCycleFullAtomicSweepCompact.
     */
    java.util.List<java.lang.Double> getBlinkGcMainThreadCycleFullAtomicSweepCompactList();
    /**
     * <code>repeated double blink_gc_main_thread_cycle_full_atomic_sweep_compact = 8 [(.perfetto.protos.unit) = "ms_smallerIsBetter"];</code>
     * @return The count of blinkGcMainThreadCycleFullAtomicSweepCompact.
     */
    int getBlinkGcMainThreadCycleFullAtomicSweepCompactCount();
    /**
     * <code>repeated double blink_gc_main_thread_cycle_full_atomic_sweep_compact = 8 [(.perfetto.protos.unit) = "ms_smallerIsBetter"];</code>
     * @param index The index of the element to return.
     * @return The blinkGcMainThreadCycleFullAtomicSweepCompact at the given index.
     */
    double getBlinkGcMainThreadCycleFullAtomicSweepCompact(int index);

    /**
     * <code>repeated double blink_gc_complete_sweep = 9 [(.perfetto.protos.unit) = "ms_smallerIsBetter"];</code>
     * @return A list containing the blinkGcCompleteSweep.
     */
    java.util.List<java.lang.Double> getBlinkGcCompleteSweepList();
    /**
     * <code>repeated double blink_gc_complete_sweep = 9 [(.perfetto.protos.unit) = "ms_smallerIsBetter"];</code>
     * @return The count of blinkGcCompleteSweep.
     */
    int getBlinkGcCompleteSweepCount();
    /**
     * <code>repeated double blink_gc_complete_sweep = 9 [(.perfetto.protos.unit) = "ms_smallerIsBetter"];</code>
     * @param index The index of the element to return.
     * @return The blinkGcCompleteSweep at the given index.
     */
    double getBlinkGcCompleteSweep(int index);

    /**
     * <code>repeated double blink_gc_main_thread_cycle_full_sweep_complete = 10 [(.perfetto.protos.unit) = "ms_smallerIsBetter"];</code>
     * @return A list containing the blinkGcMainThreadCycleFullSweepComplete.
     */
    java.util.List<java.lang.Double> getBlinkGcMainThreadCycleFullSweepCompleteList();
    /**
     * <code>repeated double blink_gc_main_thread_cycle_full_sweep_complete = 10 [(.perfetto.protos.unit) = "ms_smallerIsBetter"];</code>
     * @return The count of blinkGcMainThreadCycleFullSweepComplete.
     */
    int getBlinkGcMainThreadCycleFullSweepCompleteCount();
    /**
     * <code>repeated double blink_gc_main_thread_cycle_full_sweep_complete = 10 [(.perfetto.protos.unit) = "ms_smallerIsBetter"];</code>
     * @param index The index of the element to return.
     * @return The blinkGcMainThreadCycleFullSweepComplete at the given index.
     */
    double getBlinkGcMainThreadCycleFullSweepComplete(int index);

    /**
     * <code>repeated double blink_gc_incremental_start = 11 [(.perfetto.protos.unit) = "ms_smallerIsBetter"];</code>
     * @return A list containing the blinkGcIncrementalStart.
     */
    java.util.List<java.lang.Double> getBlinkGcIncrementalStartList();
    /**
     * <code>repeated double blink_gc_incremental_start = 11 [(.perfetto.protos.unit) = "ms_smallerIsBetter"];</code>
     * @return The count of blinkGcIncrementalStart.
     */
    int getBlinkGcIncrementalStartCount();
    /**
     * <code>repeated double blink_gc_incremental_start = 11 [(.perfetto.protos.unit) = "ms_smallerIsBetter"];</code>
     * @param index The index of the element to return.
     * @return The blinkGcIncrementalStart at the given index.
     */
    double getBlinkGcIncrementalStart(int index);

    /**
     * <code>repeated double blink_gc_main_thread_cycle_full_incremental_mark_start = 12 [(.perfetto.protos.unit) = "ms_smallerIsBetter"];</code>
     * @return A list containing the blinkGcMainThreadCycleFullIncrementalMarkStart.
     */
    java.util.List<java.lang.Double> getBlinkGcMainThreadCycleFullIncrementalMarkStartList();
    /**
     * <code>repeated double blink_gc_main_thread_cycle_full_incremental_mark_start = 12 [(.perfetto.protos.unit) = "ms_smallerIsBetter"];</code>
     * @return The count of blinkGcMainThreadCycleFullIncrementalMarkStart.
     */
    int getBlinkGcMainThreadCycleFullIncrementalMarkStartCount();
    /**
     * <code>repeated double blink_gc_main_thread_cycle_full_incremental_mark_start = 12 [(.perfetto.protos.unit) = "ms_smallerIsBetter"];</code>
     * @param index The index of the element to return.
     * @return The blinkGcMainThreadCycleFullIncrementalMarkStart at the given index.
     */
    double getBlinkGcMainThreadCycleFullIncrementalMarkStart(int index);

    /**
     * <code>repeated double blink_gc_incremental_step = 13 [(.perfetto.protos.unit) = "ms_smallerIsBetter"];</code>
     * @return A list containing the blinkGcIncrementalStep.
     */
    java.util.List<java.lang.Double> getBlinkGcIncrementalStepList();
    /**
     * <code>repeated double blink_gc_incremental_step = 13 [(.perfetto.protos.unit) = "ms_smallerIsBetter"];</code>
     * @return The count of blinkGcIncrementalStep.
     */
    int getBlinkGcIncrementalStepCount();
    /**
     * <code>repeated double blink_gc_incremental_step = 13 [(.perfetto.protos.unit) = "ms_smallerIsBetter"];</code>
     * @param index The index of the element to return.
     * @return The blinkGcIncrementalStep at the given index.
     */
    double getBlinkGcIncrementalStep(int index);

    /**
     * <code>repeated double blink_gc_main_thread_cycle_full_incremental_mark_step = 14 [(.perfetto.protos.unit) = "ms_smallerIsBetter"];</code>
     * @return A list containing the blinkGcMainThreadCycleFullIncrementalMarkStep.
     */
    java.util.List<java.lang.Double> getBlinkGcMainThreadCycleFullIncrementalMarkStepList();
    /**
     * <code>repeated double blink_gc_main_thread_cycle_full_incremental_mark_step = 14 [(.perfetto.protos.unit) = "ms_smallerIsBetter"];</code>
     * @return The count of blinkGcMainThreadCycleFullIncrementalMarkStep.
     */
    int getBlinkGcMainThreadCycleFullIncrementalMarkStepCount();
    /**
     * <code>repeated double blink_gc_main_thread_cycle_full_incremental_mark_step = 14 [(.perfetto.protos.unit) = "ms_smallerIsBetter"];</code>
     * @param index The index of the element to return.
     * @return The blinkGcMainThreadCycleFullIncrementalMarkStep at the given index.
     */
    double getBlinkGcMainThreadCycleFullIncrementalMarkStep(int index);

    /**
     * <code>repeated double blink_gc_sweep_allocation = 15 [(.perfetto.protos.unit) = "ms_smallerIsBetter"];</code>
     * @return A list containing the blinkGcSweepAllocation.
     */
    java.util.List<java.lang.Double> getBlinkGcSweepAllocationList();
    /**
     * <code>repeated double blink_gc_sweep_allocation = 15 [(.perfetto.protos.unit) = "ms_smallerIsBetter"];</code>
     * @return The count of blinkGcSweepAllocation.
     */
    int getBlinkGcSweepAllocationCount();
    /**
     * <code>repeated double blink_gc_sweep_allocation = 15 [(.perfetto.protos.unit) = "ms_smallerIsBetter"];</code>
     * @param index The index of the element to return.
     * @return The blinkGcSweepAllocation at the given index.
     */
    double getBlinkGcSweepAllocation(int index);

    /**
     * <code>repeated double blink_gc_main_thread_cycle_full_sweep_on_allocation = 16 [(.perfetto.protos.unit) = "ms_smallerIsBetter"];</code>
     * @return A list containing the blinkGcMainThreadCycleFullSweepOnAllocation.
     */
    java.util.List<java.lang.Double> getBlinkGcMainThreadCycleFullSweepOnAllocationList();
    /**
     * <code>repeated double blink_gc_main_thread_cycle_full_sweep_on_allocation = 16 [(.perfetto.protos.unit) = "ms_smallerIsBetter"];</code>
     * @return The count of blinkGcMainThreadCycleFullSweepOnAllocation.
     */
    int getBlinkGcMainThreadCycleFullSweepOnAllocationCount();
    /**
     * <code>repeated double blink_gc_main_thread_cycle_full_sweep_on_allocation = 16 [(.perfetto.protos.unit) = "ms_smallerIsBetter"];</code>
     * @param index The index of the element to return.
     * @return The blinkGcMainThreadCycleFullSweepOnAllocation at the given index.
     */
    double getBlinkGcMainThreadCycleFullSweepOnAllocation(int index);

    /**
     * <code>repeated double blink_gc_sweep_task_foreground = 17 [(.perfetto.protos.unit) = "ms_smallerIsBetter"];</code>
     * @return A list containing the blinkGcSweepTaskForeground.
     */
    java.util.List<java.lang.Double> getBlinkGcSweepTaskForegroundList();
    /**
     * <code>repeated double blink_gc_sweep_task_foreground = 17 [(.perfetto.protos.unit) = "ms_smallerIsBetter"];</code>
     * @return The count of blinkGcSweepTaskForeground.
     */
    int getBlinkGcSweepTaskForegroundCount();
    /**
     * <code>repeated double blink_gc_sweep_task_foreground = 17 [(.perfetto.protos.unit) = "ms_smallerIsBetter"];</code>
     * @param index The index of the element to return.
     * @return The blinkGcSweepTaskForeground at the given index.
     */
    double getBlinkGcSweepTaskForeground(int index);

    /**
     * <code>repeated double blink_gc_main_thread_cycle_full_sweep_idle = 18 [(.perfetto.protos.unit) = "ms_smallerIsBetter"];</code>
     * @return A list containing the blinkGcMainThreadCycleFullSweepIdle.
     */
    java.util.List<java.lang.Double> getBlinkGcMainThreadCycleFullSweepIdleList();
    /**
     * <code>repeated double blink_gc_main_thread_cycle_full_sweep_idle = 18 [(.perfetto.protos.unit) = "ms_smallerIsBetter"];</code>
     * @return The count of blinkGcMainThreadCycleFullSweepIdle.
     */
    int getBlinkGcMainThreadCycleFullSweepIdleCount();
    /**
     * <code>repeated double blink_gc_main_thread_cycle_full_sweep_idle = 18 [(.perfetto.protos.unit) = "ms_smallerIsBetter"];</code>
     * @param index The index of the element to return.
     * @return The blinkGcMainThreadCycleFullSweepIdle at the given index.
     */
    double getBlinkGcMainThreadCycleFullSweepIdle(int index);

    /**
     * <code>repeated double blink_gc_unified_marking_by_v8 = 19 [(.perfetto.protos.unit) = "ms_smallerIsBetter"];</code>
     * @return A list containing the blinkGcUnifiedMarkingByV8.
     */
    java.util.List<java.lang.Double> getBlinkGcUnifiedMarkingByV8List();
    /**
     * <code>repeated double blink_gc_unified_marking_by_v8 = 19 [(.perfetto.protos.unit) = "ms_smallerIsBetter"];</code>
     * @return The count of blinkGcUnifiedMarkingByV8.
     */
    int getBlinkGcUnifiedMarkingByV8Count();
    /**
     * <code>repeated double blink_gc_unified_marking_by_v8 = 19 [(.perfetto.protos.unit) = "ms_smallerIsBetter"];</code>
     * @param index The index of the element to return.
     * @return The blinkGcUnifiedMarkingByV8 at the given index.
     */
    double getBlinkGcUnifiedMarkingByV8(int index);

    /**
     * <code>repeated double unified_gc_main_thread_cycle_full_mark_step = 20 [(.perfetto.protos.unit) = "ms_smallerIsBetter"];</code>
     * @return A list containing the unifiedGcMainThreadCycleFullMarkStep.
     */
    java.util.List<java.lang.Double> getUnifiedGcMainThreadCycleFullMarkStepList();
    /**
     * <code>repeated double unified_gc_main_thread_cycle_full_mark_step = 20 [(.perfetto.protos.unit) = "ms_smallerIsBetter"];</code>
     * @return The count of unifiedGcMainThreadCycleFullMarkStep.
     */
    int getUnifiedGcMainThreadCycleFullMarkStepCount();
    /**
     * <code>repeated double unified_gc_main_thread_cycle_full_mark_step = 20 [(.perfetto.protos.unit) = "ms_smallerIsBetter"];</code>
     * @param index The index of the element to return.
     * @return The unifiedGcMainThreadCycleFullMarkStep at the given index.
     */
    double getUnifiedGcMainThreadCycleFullMarkStep(int index);

    /**
     * <code>repeated double blink_gc_atomic_pause = 21 [(.perfetto.protos.unit) = "ms_smallerIsBetter"];</code>
     * @return A list containing the blinkGcAtomicPause.
     */
    java.util.List<java.lang.Double> getBlinkGcAtomicPauseList();
    /**
     * <code>repeated double blink_gc_atomic_pause = 21 [(.perfetto.protos.unit) = "ms_smallerIsBetter"];</code>
     * @return The count of blinkGcAtomicPause.
     */
    int getBlinkGcAtomicPauseCount();
    /**
     * <code>repeated double blink_gc_atomic_pause = 21 [(.perfetto.protos.unit) = "ms_smallerIsBetter"];</code>
     * @param index The index of the element to return.
     * @return The blinkGcAtomicPause at the given index.
     */
    double getBlinkGcAtomicPause(int index);

    /**
     * <code>repeated double blink_gc_main_thread_cycle_full_atomic = 22 [(.perfetto.protos.unit) = "ms_smallerIsBetter"];</code>
     * @return A list containing the blinkGcMainThreadCycleFullAtomic.
     */
    java.util.List<java.lang.Double> getBlinkGcMainThreadCycleFullAtomicList();
    /**
     * <code>repeated double blink_gc_main_thread_cycle_full_atomic = 22 [(.perfetto.protos.unit) = "ms_smallerIsBetter"];</code>
     * @return The count of blinkGcMainThreadCycleFullAtomic.
     */
    int getBlinkGcMainThreadCycleFullAtomicCount();
    /**
     * <code>repeated double blink_gc_main_thread_cycle_full_atomic = 22 [(.perfetto.protos.unit) = "ms_smallerIsBetter"];</code>
     * @param index The index of the element to return.
     * @return The blinkGcMainThreadCycleFullAtomic at the given index.
     */
    double getBlinkGcMainThreadCycleFullAtomic(int index);

    /**
     * <code>repeated double blink_gc_atomic_pause_mark_transitive_closure = 23 [(.perfetto.protos.unit) = "ms_smallerIsBetter"];</code>
     * @return A list containing the blinkGcAtomicPauseMarkTransitiveClosure.
     */
    java.util.List<java.lang.Double> getBlinkGcAtomicPauseMarkTransitiveClosureList();
    /**
     * <code>repeated double blink_gc_atomic_pause_mark_transitive_closure = 23 [(.perfetto.protos.unit) = "ms_smallerIsBetter"];</code>
     * @return The count of blinkGcAtomicPauseMarkTransitiveClosure.
     */
    int getBlinkGcAtomicPauseMarkTransitiveClosureCount();
    /**
     * <code>repeated double blink_gc_atomic_pause_mark_transitive_closure = 23 [(.perfetto.protos.unit) = "ms_smallerIsBetter"];</code>
     * @param index The index of the element to return.
     * @return The blinkGcAtomicPauseMarkTransitiveClosure at the given index.
     */
    double getBlinkGcAtomicPauseMarkTransitiveClosure(int index);

    /**
     * <code>repeated double blink_gc_main_thread_cycle_full_atomic_mark_transitive_closure = 24 [(.perfetto.protos.unit) = "ms_smallerIsBetter"];</code>
     * @return A list containing the blinkGcMainThreadCycleFullAtomicMarkTransitiveClosure.
     */
    java.util.List<java.lang.Double> getBlinkGcMainThreadCycleFullAtomicMarkTransitiveClosureList();
    /**
     * <code>repeated double blink_gc_main_thread_cycle_full_atomic_mark_transitive_closure = 24 [(.perfetto.protos.unit) = "ms_smallerIsBetter"];</code>
     * @return The count of blinkGcMainThreadCycleFullAtomicMarkTransitiveClosure.
     */
    int getBlinkGcMainThreadCycleFullAtomicMarkTransitiveClosureCount();
    /**
     * <code>repeated double blink_gc_main_thread_cycle_full_atomic_mark_transitive_closure = 24 [(.perfetto.protos.unit) = "ms_smallerIsBetter"];</code>
     * @param index The index of the element to return.
     * @return The blinkGcMainThreadCycleFullAtomicMarkTransitiveClosure at the given index.
     */
    double getBlinkGcMainThreadCycleFullAtomicMarkTransitiveClosure(int index);

    /**
     * <code>repeated double blink_gc_total = 25 [(.perfetto.protos.unit) = "ms_smallerIsBetter"];</code>
     * @return A list containing the blinkGcTotal.
     */
    java.util.List<java.lang.Double> getBlinkGcTotalList();
    /**
     * <code>repeated double blink_gc_total = 25 [(.perfetto.protos.unit) = "ms_smallerIsBetter"];</code>
     * @return The count of blinkGcTotal.
     */
    int getBlinkGcTotalCount();
    /**
     * <code>repeated double blink_gc_total = 25 [(.perfetto.protos.unit) = "ms_smallerIsBetter"];</code>
     * @param index The index of the element to return.
     * @return The blinkGcTotal at the given index.
     */
    double getBlinkGcTotal(int index);

    /**
     * <code>repeated double blink_gc_main_thread_cycle_full = 26 [(.perfetto.protos.unit) = "ms_smallerIsBetter"];</code>
     * @return A list containing the blinkGcMainThreadCycleFull.
     */
    java.util.List<java.lang.Double> getBlinkGcMainThreadCycleFullList();
    /**
     * <code>repeated double blink_gc_main_thread_cycle_full = 26 [(.perfetto.protos.unit) = "ms_smallerIsBetter"];</code>
     * @return The count of blinkGcMainThreadCycleFull.
     */
    int getBlinkGcMainThreadCycleFullCount();
    /**
     * <code>repeated double blink_gc_main_thread_cycle_full = 26 [(.perfetto.protos.unit) = "ms_smallerIsBetter"];</code>
     * @param index The index of the element to return.
     * @return The blinkGcMainThreadCycleFull at the given index.
     */
    double getBlinkGcMainThreadCycleFull(int index);

    /**
     * <code>repeated double blink_gc_mark_roots = 27 [(.perfetto.protos.unit) = "ms_smallerIsBetter"];</code>
     * @return A list containing the blinkGcMarkRoots.
     */
    java.util.List<java.lang.Double> getBlinkGcMarkRootsList();
    /**
     * <code>repeated double blink_gc_mark_roots = 27 [(.perfetto.protos.unit) = "ms_smallerIsBetter"];</code>
     * @return The count of blinkGcMarkRoots.
     */
    int getBlinkGcMarkRootsCount();
    /**
     * <code>repeated double blink_gc_mark_roots = 27 [(.perfetto.protos.unit) = "ms_smallerIsBetter"];</code>
     * @param index The index of the element to return.
     * @return The blinkGcMarkRoots at the given index.
     */
    double getBlinkGcMarkRoots(int index);

    /**
     * <code>repeated double blink_gc_main_thread_cycle_full_mark_roots = 28 [(.perfetto.protos.unit) = "ms_smallerIsBetter"];</code>
     * @return A list containing the blinkGcMainThreadCycleFullMarkRoots.
     */
    java.util.List<java.lang.Double> getBlinkGcMainThreadCycleFullMarkRootsList();
    /**
     * <code>repeated double blink_gc_main_thread_cycle_full_mark_roots = 28 [(.perfetto.protos.unit) = "ms_smallerIsBetter"];</code>
     * @return The count of blinkGcMainThreadCycleFullMarkRoots.
     */
    int getBlinkGcMainThreadCycleFullMarkRootsCount();
    /**
     * <code>repeated double blink_gc_main_thread_cycle_full_mark_roots = 28 [(.perfetto.protos.unit) = "ms_smallerIsBetter"];</code>
     * @param index The index of the element to return.
     * @return The blinkGcMainThreadCycleFullMarkRoots at the given index.
     */
    double getBlinkGcMainThreadCycleFullMarkRoots(int index);

    /**
     * <code>repeated double blink_gc_mark_transitive_closure = 29 [(.perfetto.protos.unit) = "ms_smallerIsBetter"];</code>
     * @return A list containing the blinkGcMarkTransitiveClosure.
     */
    java.util.List<java.lang.Double> getBlinkGcMarkTransitiveClosureList();
    /**
     * <code>repeated double blink_gc_mark_transitive_closure = 29 [(.perfetto.protos.unit) = "ms_smallerIsBetter"];</code>
     * @return The count of blinkGcMarkTransitiveClosure.
     */
    int getBlinkGcMarkTransitiveClosureCount();
    /**
     * <code>repeated double blink_gc_mark_transitive_closure = 29 [(.perfetto.protos.unit) = "ms_smallerIsBetter"];</code>
     * @param index The index of the element to return.
     * @return The blinkGcMarkTransitiveClosure at the given index.
     */
    double getBlinkGcMarkTransitiveClosure(int index);

    /**
     * <code>repeated double blink_gc_main_thread_cycle_full_mark_transitive_closure = 30 [(.perfetto.protos.unit) = "ms_smallerIsBetter"];</code>
     * @return A list containing the blinkGcMainThreadCycleFullMarkTransitiveClosure.
     */
    java.util.List<java.lang.Double> getBlinkGcMainThreadCycleFullMarkTransitiveClosureList();
    /**
     * <code>repeated double blink_gc_main_thread_cycle_full_mark_transitive_closure = 30 [(.perfetto.protos.unit) = "ms_smallerIsBetter"];</code>
     * @return The count of blinkGcMainThreadCycleFullMarkTransitiveClosure.
     */
    int getBlinkGcMainThreadCycleFullMarkTransitiveClosureCount();
    /**
     * <code>repeated double blink_gc_main_thread_cycle_full_mark_transitive_closure = 30 [(.perfetto.protos.unit) = "ms_smallerIsBetter"];</code>
     * @param index The index of the element to return.
     * @return The blinkGcMainThreadCycleFullMarkTransitiveClosure at the given index.
     */
    double getBlinkGcMainThreadCycleFullMarkTransitiveClosure(int index);

    /**
     * <code>repeated double blink_gc_mark_foreground = 31 [(.perfetto.protos.unit) = "ms_smallerIsBetter"];</code>
     * @return A list containing the blinkGcMarkForeground.
     */
    java.util.List<java.lang.Double> getBlinkGcMarkForegroundList();
    /**
     * <code>repeated double blink_gc_mark_foreground = 31 [(.perfetto.protos.unit) = "ms_smallerIsBetter"];</code>
     * @return The count of blinkGcMarkForeground.
     */
    int getBlinkGcMarkForegroundCount();
    /**
     * <code>repeated double blink_gc_mark_foreground = 31 [(.perfetto.protos.unit) = "ms_smallerIsBetter"];</code>
     * @param index The index of the element to return.
     * @return The blinkGcMarkForeground at the given index.
     */
    double getBlinkGcMarkForeground(int index);

    /**
     * <code>repeated double blink_gc_main_thread_cycle_full_mark = 32 [(.perfetto.protos.unit) = "ms_smallerIsBetter"];</code>
     * @return A list containing the blinkGcMainThreadCycleFullMark.
     */
    java.util.List<java.lang.Double> getBlinkGcMainThreadCycleFullMarkList();
    /**
     * <code>repeated double blink_gc_main_thread_cycle_full_mark = 32 [(.perfetto.protos.unit) = "ms_smallerIsBetter"];</code>
     * @return The count of blinkGcMainThreadCycleFullMark.
     */
    int getBlinkGcMainThreadCycleFullMarkCount();
    /**
     * <code>repeated double blink_gc_main_thread_cycle_full_mark = 32 [(.perfetto.protos.unit) = "ms_smallerIsBetter"];</code>
     * @param index The index of the element to return.
     * @return The blinkGcMainThreadCycleFullMark at the given index.
     */
    double getBlinkGcMainThreadCycleFullMark(int index);

    /**
     * <code>repeated double blink_gc_mark_foreground_forced = 33 [(.perfetto.protos.unit) = "ms_smallerIsBetter"];</code>
     * @return A list containing the blinkGcMarkForegroundForced.
     */
    java.util.List<java.lang.Double> getBlinkGcMarkForegroundForcedList();
    /**
     * <code>repeated double blink_gc_mark_foreground_forced = 33 [(.perfetto.protos.unit) = "ms_smallerIsBetter"];</code>
     * @return The count of blinkGcMarkForegroundForced.
     */
    int getBlinkGcMarkForegroundForcedCount();
    /**
     * <code>repeated double blink_gc_mark_foreground_forced = 33 [(.perfetto.protos.unit) = "ms_smallerIsBetter"];</code>
     * @param index The index of the element to return.
     * @return The blinkGcMarkForegroundForced at the given index.
     */
    double getBlinkGcMarkForegroundForced(int index);

    /**
     * <code>repeated double blink_gc_main_thread_cycle_full_mark_forced = 34 [(.perfetto.protos.unit) = "ms_smallerIsBetter"];</code>
     * @return A list containing the blinkGcMainThreadCycleFullMarkForced.
     */
    java.util.List<java.lang.Double> getBlinkGcMainThreadCycleFullMarkForcedList();
    /**
     * <code>repeated double blink_gc_main_thread_cycle_full_mark_forced = 34 [(.perfetto.protos.unit) = "ms_smallerIsBetter"];</code>
     * @return The count of blinkGcMainThreadCycleFullMarkForced.
     */
    int getBlinkGcMainThreadCycleFullMarkForcedCount();
    /**
     * <code>repeated double blink_gc_main_thread_cycle_full_mark_forced = 34 [(.perfetto.protos.unit) = "ms_smallerIsBetter"];</code>
     * @param index The index of the element to return.
     * @return The blinkGcMainThreadCycleFullMarkForced at the given index.
     */
    double getBlinkGcMainThreadCycleFullMarkForced(int index);

    /**
     * <code>repeated double blink_gc_mark_background = 35 [(.perfetto.protos.unit) = "ms_smallerIsBetter"];</code>
     * @return A list containing the blinkGcMarkBackground.
     */
    java.util.List<java.lang.Double> getBlinkGcMarkBackgroundList();
    /**
     * <code>repeated double blink_gc_mark_background = 35 [(.perfetto.protos.unit) = "ms_smallerIsBetter"];</code>
     * @return The count of blinkGcMarkBackground.
     */
    int getBlinkGcMarkBackgroundCount();
    /**
     * <code>repeated double blink_gc_mark_background = 35 [(.perfetto.protos.unit) = "ms_smallerIsBetter"];</code>
     * @param index The index of the element to return.
     * @return The blinkGcMarkBackground at the given index.
     */
    double getBlinkGcMarkBackground(int index);

    /**
     * <code>repeated double blink_gc_concurrent_thread_cycle_full_mark = 36 [(.perfetto.protos.unit) = "ms_smallerIsBetter"];</code>
     * @return A list containing the blinkGcConcurrentThreadCycleFullMark.
     */
    java.util.List<java.lang.Double> getBlinkGcConcurrentThreadCycleFullMarkList();
    /**
     * <code>repeated double blink_gc_concurrent_thread_cycle_full_mark = 36 [(.perfetto.protos.unit) = "ms_smallerIsBetter"];</code>
     * @return The count of blinkGcConcurrentThreadCycleFullMark.
     */
    int getBlinkGcConcurrentThreadCycleFullMarkCount();
    /**
     * <code>repeated double blink_gc_concurrent_thread_cycle_full_mark = 36 [(.perfetto.protos.unit) = "ms_smallerIsBetter"];</code>
     * @param index The index of the element to return.
     * @return The blinkGcConcurrentThreadCycleFullMark at the given index.
     */
    double getBlinkGcConcurrentThreadCycleFullMark(int index);

    /**
     * <code>repeated double blink_gc_sweep_foreground = 37 [(.perfetto.protos.unit) = "ms_smallerIsBetter"];</code>
     * @return A list containing the blinkGcSweepForeground.
     */
    java.util.List<java.lang.Double> getBlinkGcSweepForegroundList();
    /**
     * <code>repeated double blink_gc_sweep_foreground = 37 [(.perfetto.protos.unit) = "ms_smallerIsBetter"];</code>
     * @return The count of blinkGcSweepForeground.
     */
    int getBlinkGcSweepForegroundCount();
    /**
     * <code>repeated double blink_gc_sweep_foreground = 37 [(.perfetto.protos.unit) = "ms_smallerIsBetter"];</code>
     * @param index The index of the element to return.
     * @return The blinkGcSweepForeground at the given index.
     */
    double getBlinkGcSweepForeground(int index);

    /**
     * <code>repeated double blink_gc_main_thread_cycle_full_sweep = 38 [(.perfetto.protos.unit) = "ms_smallerIsBetter"];</code>
     * @return A list containing the blinkGcMainThreadCycleFullSweep.
     */
    java.util.List<java.lang.Double> getBlinkGcMainThreadCycleFullSweepList();
    /**
     * <code>repeated double blink_gc_main_thread_cycle_full_sweep = 38 [(.perfetto.protos.unit) = "ms_smallerIsBetter"];</code>
     * @return The count of blinkGcMainThreadCycleFullSweep.
     */
    int getBlinkGcMainThreadCycleFullSweepCount();
    /**
     * <code>repeated double blink_gc_main_thread_cycle_full_sweep = 38 [(.perfetto.protos.unit) = "ms_smallerIsBetter"];</code>
     * @param index The index of the element to return.
     * @return The blinkGcMainThreadCycleFullSweep at the given index.
     */
    double getBlinkGcMainThreadCycleFullSweep(int index);

    /**
     * <code>repeated double blink_gc_sweep_background = 39 [(.perfetto.protos.unit) = "ms_smallerIsBetter"];</code>
     * @return A list containing the blinkGcSweepBackground.
     */
    java.util.List<java.lang.Double> getBlinkGcSweepBackgroundList();
    /**
     * <code>repeated double blink_gc_sweep_background = 39 [(.perfetto.protos.unit) = "ms_smallerIsBetter"];</code>
     * @return The count of blinkGcSweepBackground.
     */
    int getBlinkGcSweepBackgroundCount();
    /**
     * <code>repeated double blink_gc_sweep_background = 39 [(.perfetto.protos.unit) = "ms_smallerIsBetter"];</code>
     * @param index The index of the element to return.
     * @return The blinkGcSweepBackground at the given index.
     */
    double getBlinkGcSweepBackground(int index);

    /**
     * <code>repeated double blink_gc_concurrent_thread_cycle_full_sweep = 40 [(.perfetto.protos.unit) = "ms_smallerIsBetter"];</code>
     * @return A list containing the blinkGcConcurrentThreadCycleFullSweep.
     */
    java.util.List<java.lang.Double> getBlinkGcConcurrentThreadCycleFullSweepList();
    /**
     * <code>repeated double blink_gc_concurrent_thread_cycle_full_sweep = 40 [(.perfetto.protos.unit) = "ms_smallerIsBetter"];</code>
     * @return The count of blinkGcConcurrentThreadCycleFullSweep.
     */
    int getBlinkGcConcurrentThreadCycleFullSweepCount();
    /**
     * <code>repeated double blink_gc_concurrent_thread_cycle_full_sweep = 40 [(.perfetto.protos.unit) = "ms_smallerIsBetter"];</code>
     * @param index The index of the element to return.
     * @return The blinkGcConcurrentThreadCycleFullSweep at the given index.
     */
    double getBlinkGcConcurrentThreadCycleFullSweep(int index);

    /**
     * <code>repeated double unified_gc_total = 41 [(.perfetto.protos.unit) = "ms_smallerIsBetter"];</code>
     * @return A list containing the unifiedGcTotal.
     */
    java.util.List<java.lang.Double> getUnifiedGcTotalList();
    /**
     * <code>repeated double unified_gc_total = 41 [(.perfetto.protos.unit) = "ms_smallerIsBetter"];</code>
     * @return The count of unifiedGcTotal.
     */
    int getUnifiedGcTotalCount();
    /**
     * <code>repeated double unified_gc_total = 41 [(.perfetto.protos.unit) = "ms_smallerIsBetter"];</code>
     * @param index The index of the element to return.
     * @return The unifiedGcTotal at the given index.
     */
    double getUnifiedGcTotal(int index);
  }
  /**
   * Protobuf type {@code perfetto.protos.BlinkGcMetric}
   */
  public static final class BlinkGcMetric extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:perfetto.protos.BlinkGcMetric)
      BlinkGcMetricOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use BlinkGcMetric.newBuilder() to construct.
    private BlinkGcMetric(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private BlinkGcMetric() {
      blinkGcAtomicPauseMarkEpilogue_ = emptyDoubleList();
      blinkGcMainThreadCycleFullAtomicMarkEpilogue_ = emptyDoubleList();
      blinkGcAtomicPauseMarkPrologue_ = emptyDoubleList();
      blinkGcMainThreadCycleFullAtomicMarkPrologue_ = emptyDoubleList();
      blinkGcAtomicPauseMarkRoots_ = emptyDoubleList();
      blinkGcMainThreadCycleFullAtomicMarkRoots_ = emptyDoubleList();
      blinkGcAtomicPauseSweepAndCompact_ = emptyDoubleList();
      blinkGcMainThreadCycleFullAtomicSweepCompact_ = emptyDoubleList();
      blinkGcCompleteSweep_ = emptyDoubleList();
      blinkGcMainThreadCycleFullSweepComplete_ = emptyDoubleList();
      blinkGcIncrementalStart_ = emptyDoubleList();
      blinkGcMainThreadCycleFullIncrementalMarkStart_ = emptyDoubleList();
      blinkGcIncrementalStep_ = emptyDoubleList();
      blinkGcMainThreadCycleFullIncrementalMarkStep_ = emptyDoubleList();
      blinkGcSweepAllocation_ = emptyDoubleList();
      blinkGcMainThreadCycleFullSweepOnAllocation_ = emptyDoubleList();
      blinkGcSweepTaskForeground_ = emptyDoubleList();
      blinkGcMainThreadCycleFullSweepIdle_ = emptyDoubleList();
      blinkGcUnifiedMarkingByV8_ = emptyDoubleList();
      unifiedGcMainThreadCycleFullMarkStep_ = emptyDoubleList();
      blinkGcAtomicPause_ = emptyDoubleList();
      blinkGcMainThreadCycleFullAtomic_ = emptyDoubleList();
      blinkGcAtomicPauseMarkTransitiveClosure_ = emptyDoubleList();
      blinkGcMainThreadCycleFullAtomicMarkTransitiveClosure_ = emptyDoubleList();
      blinkGcTotal_ = emptyDoubleList();
      blinkGcMainThreadCycleFull_ = emptyDoubleList();
      blinkGcMarkRoots_ = emptyDoubleList();
      blinkGcMainThreadCycleFullMarkRoots_ = emptyDoubleList();
      blinkGcMarkTransitiveClosure_ = emptyDoubleList();
      blinkGcMainThreadCycleFullMarkTransitiveClosure_ = emptyDoubleList();
      blinkGcMarkForeground_ = emptyDoubleList();
      blinkGcMainThreadCycleFullMark_ = emptyDoubleList();
      blinkGcMarkForegroundForced_ = emptyDoubleList();
      blinkGcMainThreadCycleFullMarkForced_ = emptyDoubleList();
      blinkGcMarkBackground_ = emptyDoubleList();
      blinkGcConcurrentThreadCycleFullMark_ = emptyDoubleList();
      blinkGcSweepForeground_ = emptyDoubleList();
      blinkGcMainThreadCycleFullSweep_ = emptyDoubleList();
      blinkGcSweepBackground_ = emptyDoubleList();
      blinkGcConcurrentThreadCycleFullSweep_ = emptyDoubleList();
      unifiedGcTotal_ = emptyDoubleList();
    }

    @java.lang.Override
    @SuppressWarnings({"unused"})
    protected java.lang.Object newInstance(
        UnusedPrivateParameter unused) {
      return new BlinkGcMetric();
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return perfetto.protos.BlinkGcMetricOuterClass.internal_static_perfetto_protos_BlinkGcMetric_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return perfetto.protos.BlinkGcMetricOuterClass.internal_static_perfetto_protos_BlinkGcMetric_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              perfetto.protos.BlinkGcMetricOuterClass.BlinkGcMetric.class, perfetto.protos.BlinkGcMetricOuterClass.BlinkGcMetric.Builder.class);
    }

    public static final int BLINK_GC_ATOMIC_PAUSE_MARK_EPILOGUE_FIELD_NUMBER = 1;
    @SuppressWarnings("serial")
    private com.google.protobuf.Internal.DoubleList blinkGcAtomicPauseMarkEpilogue_;
    /**
     * <code>repeated double blink_gc_atomic_pause_mark_epilogue = 1 [(.perfetto.protos.unit) = "ms_smallerIsBetter"];</code>
     * @return A list containing the blinkGcAtomicPauseMarkEpilogue.
     */
    @java.lang.Override
    public java.util.List<java.lang.Double>
        getBlinkGcAtomicPauseMarkEpilogueList() {
      return blinkGcAtomicPauseMarkEpilogue_;
    }
    /**
     * <code>repeated double blink_gc_atomic_pause_mark_epilogue = 1 [(.perfetto.protos.unit) = "ms_smallerIsBetter"];</code>
     * @return The count of blinkGcAtomicPauseMarkEpilogue.
     */
    public int getBlinkGcAtomicPauseMarkEpilogueCount() {
      return blinkGcAtomicPauseMarkEpilogue_.size();
    }
    /**
     * <code>repeated double blink_gc_atomic_pause_mark_epilogue = 1 [(.perfetto.protos.unit) = "ms_smallerIsBetter"];</code>
     * @param index The index of the element to return.
     * @return The blinkGcAtomicPauseMarkEpilogue at the given index.
     */
    public double getBlinkGcAtomicPauseMarkEpilogue(int index) {
      return blinkGcAtomicPauseMarkEpilogue_.getDouble(index);
    }

    public static final int BLINK_GC_MAIN_THREAD_CYCLE_FULL_ATOMIC_MARK_EPILOGUE_FIELD_NUMBER = 2;
    @SuppressWarnings("serial")
    private com.google.protobuf.Internal.DoubleList blinkGcMainThreadCycleFullAtomicMarkEpilogue_;
    /**
     * <code>repeated double blink_gc_main_thread_cycle_full_atomic_mark_epilogue = 2 [(.perfetto.protos.unit) = "ms_smallerIsBetter"];</code>
     * @return A list containing the blinkGcMainThreadCycleFullAtomicMarkEpilogue.
     */
    @java.lang.Override
    public java.util.List<java.lang.Double>
        getBlinkGcMainThreadCycleFullAtomicMarkEpilogueList() {
      return blinkGcMainThreadCycleFullAtomicMarkEpilogue_;
    }
    /**
     * <code>repeated double blink_gc_main_thread_cycle_full_atomic_mark_epilogue = 2 [(.perfetto.protos.unit) = "ms_smallerIsBetter"];</code>
     * @return The count of blinkGcMainThreadCycleFullAtomicMarkEpilogue.
     */
    public int getBlinkGcMainThreadCycleFullAtomicMarkEpilogueCount() {
      return blinkGcMainThreadCycleFullAtomicMarkEpilogue_.size();
    }
    /**
     * <code>repeated double blink_gc_main_thread_cycle_full_atomic_mark_epilogue = 2 [(.perfetto.protos.unit) = "ms_smallerIsBetter"];</code>
     * @param index The index of the element to return.
     * @return The blinkGcMainThreadCycleFullAtomicMarkEpilogue at the given index.
     */
    public double getBlinkGcMainThreadCycleFullAtomicMarkEpilogue(int index) {
      return blinkGcMainThreadCycleFullAtomicMarkEpilogue_.getDouble(index);
    }

    public static final int BLINK_GC_ATOMIC_PAUSE_MARK_PROLOGUE_FIELD_NUMBER = 3;
    @SuppressWarnings("serial")
    private com.google.protobuf.Internal.DoubleList blinkGcAtomicPauseMarkPrologue_;
    /**
     * <code>repeated double blink_gc_atomic_pause_mark_prologue = 3 [(.perfetto.protos.unit) = "ms_smallerIsBetter"];</code>
     * @return A list containing the blinkGcAtomicPauseMarkPrologue.
     */
    @java.lang.Override
    public java.util.List<java.lang.Double>
        getBlinkGcAtomicPauseMarkPrologueList() {
      return blinkGcAtomicPauseMarkPrologue_;
    }
    /**
     * <code>repeated double blink_gc_atomic_pause_mark_prologue = 3 [(.perfetto.protos.unit) = "ms_smallerIsBetter"];</code>
     * @return The count of blinkGcAtomicPauseMarkPrologue.
     */
    public int getBlinkGcAtomicPauseMarkPrologueCount() {
      return blinkGcAtomicPauseMarkPrologue_.size();
    }
    /**
     * <code>repeated double blink_gc_atomic_pause_mark_prologue = 3 [(.perfetto.protos.unit) = "ms_smallerIsBetter"];</code>
     * @param index The index of the element to return.
     * @return The blinkGcAtomicPauseMarkPrologue at the given index.
     */
    public double getBlinkGcAtomicPauseMarkPrologue(int index) {
      return blinkGcAtomicPauseMarkPrologue_.getDouble(index);
    }

    public static final int BLINK_GC_MAIN_THREAD_CYCLE_FULL_ATOMIC_MARK_PROLOGUE_FIELD_NUMBER = 4;
    @SuppressWarnings("serial")
    private com.google.protobuf.Internal.DoubleList blinkGcMainThreadCycleFullAtomicMarkPrologue_;
    /**
     * <code>repeated double blink_gc_main_thread_cycle_full_atomic_mark_prologue = 4 [(.perfetto.protos.unit) = "ms_smallerIsBetter"];</code>
     * @return A list containing the blinkGcMainThreadCycleFullAtomicMarkPrologue.
     */
    @java.lang.Override
    public java.util.List<java.lang.Double>
        getBlinkGcMainThreadCycleFullAtomicMarkPrologueList() {
      return blinkGcMainThreadCycleFullAtomicMarkPrologue_;
    }
    /**
     * <code>repeated double blink_gc_main_thread_cycle_full_atomic_mark_prologue = 4 [(.perfetto.protos.unit) = "ms_smallerIsBetter"];</code>
     * @return The count of blinkGcMainThreadCycleFullAtomicMarkPrologue.
     */
    public int getBlinkGcMainThreadCycleFullAtomicMarkPrologueCount() {
      return blinkGcMainThreadCycleFullAtomicMarkPrologue_.size();
    }
    /**
     * <code>repeated double blink_gc_main_thread_cycle_full_atomic_mark_prologue = 4 [(.perfetto.protos.unit) = "ms_smallerIsBetter"];</code>
     * @param index The index of the element to return.
     * @return The blinkGcMainThreadCycleFullAtomicMarkPrologue at the given index.
     */
    public double getBlinkGcMainThreadCycleFullAtomicMarkPrologue(int index) {
      return blinkGcMainThreadCycleFullAtomicMarkPrologue_.getDouble(index);
    }

    public static final int BLINK_GC_ATOMIC_PAUSE_MARK_ROOTS_FIELD_NUMBER = 5;
    @SuppressWarnings("serial")
    private com.google.protobuf.Internal.DoubleList blinkGcAtomicPauseMarkRoots_;
    /**
     * <code>repeated double blink_gc_atomic_pause_mark_roots = 5 [(.perfetto.protos.unit) = "ms_smallerIsBetter"];</code>
     * @return A list containing the blinkGcAtomicPauseMarkRoots.
     */
    @java.lang.Override
    public java.util.List<java.lang.Double>
        getBlinkGcAtomicPauseMarkRootsList() {
      return blinkGcAtomicPauseMarkRoots_;
    }
    /**
     * <code>repeated double blink_gc_atomic_pause_mark_roots = 5 [(.perfetto.protos.unit) = "ms_smallerIsBetter"];</code>
     * @return The count of blinkGcAtomicPauseMarkRoots.
     */
    public int getBlinkGcAtomicPauseMarkRootsCount() {
      return blinkGcAtomicPauseMarkRoots_.size();
    }
    /**
     * <code>repeated double blink_gc_atomic_pause_mark_roots = 5 [(.perfetto.protos.unit) = "ms_smallerIsBetter"];</code>
     * @param index The index of the element to return.
     * @return The blinkGcAtomicPauseMarkRoots at the given index.
     */
    public double getBlinkGcAtomicPauseMarkRoots(int index) {
      return blinkGcAtomicPauseMarkRoots_.getDouble(index);
    }

    public static final int BLINK_GC_MAIN_THREAD_CYCLE_FULL_ATOMIC_MARK_ROOTS_FIELD_NUMBER = 6;
    @SuppressWarnings("serial")
    private com.google.protobuf.Internal.DoubleList blinkGcMainThreadCycleFullAtomicMarkRoots_;
    /**
     * <code>repeated double blink_gc_main_thread_cycle_full_atomic_mark_roots = 6 [(.perfetto.protos.unit) = "ms_smallerIsBetter"];</code>
     * @return A list containing the blinkGcMainThreadCycleFullAtomicMarkRoots.
     */
    @java.lang.Override
    public java.util.List<java.lang.Double>
        getBlinkGcMainThreadCycleFullAtomicMarkRootsList() {
      return blinkGcMainThreadCycleFullAtomicMarkRoots_;
    }
    /**
     * <code>repeated double blink_gc_main_thread_cycle_full_atomic_mark_roots = 6 [(.perfetto.protos.unit) = "ms_smallerIsBetter"];</code>
     * @return The count of blinkGcMainThreadCycleFullAtomicMarkRoots.
     */
    public int getBlinkGcMainThreadCycleFullAtomicMarkRootsCount() {
      return blinkGcMainThreadCycleFullAtomicMarkRoots_.size();
    }
    /**
     * <code>repeated double blink_gc_main_thread_cycle_full_atomic_mark_roots = 6 [(.perfetto.protos.unit) = "ms_smallerIsBetter"];</code>
     * @param index The index of the element to return.
     * @return The blinkGcMainThreadCycleFullAtomicMarkRoots at the given index.
     */
    public double getBlinkGcMainThreadCycleFullAtomicMarkRoots(int index) {
      return blinkGcMainThreadCycleFullAtomicMarkRoots_.getDouble(index);
    }

    public static final int BLINK_GC_ATOMIC_PAUSE_SWEEP_AND_COMPACT_FIELD_NUMBER = 7;
    @SuppressWarnings("serial")
    private com.google.protobuf.Internal.DoubleList blinkGcAtomicPauseSweepAndCompact_;
    /**
     * <code>repeated double blink_gc_atomic_pause_sweep_and_compact = 7 [(.perfetto.protos.unit) = "ms_smallerIsBetter"];</code>
     * @return A list containing the blinkGcAtomicPauseSweepAndCompact.
     */
    @java.lang.Override
    public java.util.List<java.lang.Double>
        getBlinkGcAtomicPauseSweepAndCompactList() {
      return blinkGcAtomicPauseSweepAndCompact_;
    }
    /**
     * <code>repeated double blink_gc_atomic_pause_sweep_and_compact = 7 [(.perfetto.protos.unit) = "ms_smallerIsBetter"];</code>
     * @return The count of blinkGcAtomicPauseSweepAndCompact.
     */
    public int getBlinkGcAtomicPauseSweepAndCompactCount() {
      return blinkGcAtomicPauseSweepAndCompact_.size();
    }
    /**
     * <code>repeated double blink_gc_atomic_pause_sweep_and_compact = 7 [(.perfetto.protos.unit) = "ms_smallerIsBetter"];</code>
     * @param index The index of the element to return.
     * @return The blinkGcAtomicPauseSweepAndCompact at the given index.
     */
    public double getBlinkGcAtomicPauseSweepAndCompact(int index) {
      return blinkGcAtomicPauseSweepAndCompact_.getDouble(index);
    }

    public static final int BLINK_GC_MAIN_THREAD_CYCLE_FULL_ATOMIC_SWEEP_COMPACT_FIELD_NUMBER = 8;
    @SuppressWarnings("serial")
    private com.google.protobuf.Internal.DoubleList blinkGcMainThreadCycleFullAtomicSweepCompact_;
    /**
     * <code>repeated double blink_gc_main_thread_cycle_full_atomic_sweep_compact = 8 [(.perfetto.protos.unit) = "ms_smallerIsBetter"];</code>
     * @return A list containing the blinkGcMainThreadCycleFullAtomicSweepCompact.
     */
    @java.lang.Override
    public java.util.List<java.lang.Double>
        getBlinkGcMainThreadCycleFullAtomicSweepCompactList() {
      return blinkGcMainThreadCycleFullAtomicSweepCompact_;
    }
    /**
     * <code>repeated double blink_gc_main_thread_cycle_full_atomic_sweep_compact = 8 [(.perfetto.protos.unit) = "ms_smallerIsBetter"];</code>
     * @return The count of blinkGcMainThreadCycleFullAtomicSweepCompact.
     */
    public int getBlinkGcMainThreadCycleFullAtomicSweepCompactCount() {
      return blinkGcMainThreadCycleFullAtomicSweepCompact_.size();
    }
    /**
     * <code>repeated double blink_gc_main_thread_cycle_full_atomic_sweep_compact = 8 [(.perfetto.protos.unit) = "ms_smallerIsBetter"];</code>
     * @param index The index of the element to return.
     * @return The blinkGcMainThreadCycleFullAtomicSweepCompact at the given index.
     */
    public double getBlinkGcMainThreadCycleFullAtomicSweepCompact(int index) {
      return blinkGcMainThreadCycleFullAtomicSweepCompact_.getDouble(index);
    }

    public static final int BLINK_GC_COMPLETE_SWEEP_FIELD_NUMBER = 9;
    @SuppressWarnings("serial")
    private com.google.protobuf.Internal.DoubleList blinkGcCompleteSweep_;
    /**
     * <code>repeated double blink_gc_complete_sweep = 9 [(.perfetto.protos.unit) = "ms_smallerIsBetter"];</code>
     * @return A list containing the blinkGcCompleteSweep.
     */
    @java.lang.Override
    public java.util.List<java.lang.Double>
        getBlinkGcCompleteSweepList() {
      return blinkGcCompleteSweep_;
    }
    /**
     * <code>repeated double blink_gc_complete_sweep = 9 [(.perfetto.protos.unit) = "ms_smallerIsBetter"];</code>
     * @return The count of blinkGcCompleteSweep.
     */
    public int getBlinkGcCompleteSweepCount() {
      return blinkGcCompleteSweep_.size();
    }
    /**
     * <code>repeated double blink_gc_complete_sweep = 9 [(.perfetto.protos.unit) = "ms_smallerIsBetter"];</code>
     * @param index The index of the element to return.
     * @return The blinkGcCompleteSweep at the given index.
     */
    public double getBlinkGcCompleteSweep(int index) {
      return blinkGcCompleteSweep_.getDouble(index);
    }

    public static final int BLINK_GC_MAIN_THREAD_CYCLE_FULL_SWEEP_COMPLETE_FIELD_NUMBER = 10;
    @SuppressWarnings("serial")
    private com.google.protobuf.Internal.DoubleList blinkGcMainThreadCycleFullSweepComplete_;
    /**
     * <code>repeated double blink_gc_main_thread_cycle_full_sweep_complete = 10 [(.perfetto.protos.unit) = "ms_smallerIsBetter"];</code>
     * @return A list containing the blinkGcMainThreadCycleFullSweepComplete.
     */
    @java.lang.Override
    public java.util.List<java.lang.Double>
        getBlinkGcMainThreadCycleFullSweepCompleteList() {
      return blinkGcMainThreadCycleFullSweepComplete_;
    }
    /**
     * <code>repeated double blink_gc_main_thread_cycle_full_sweep_complete = 10 [(.perfetto.protos.unit) = "ms_smallerIsBetter"];</code>
     * @return The count of blinkGcMainThreadCycleFullSweepComplete.
     */
    public int getBlinkGcMainThreadCycleFullSweepCompleteCount() {
      return blinkGcMainThreadCycleFullSweepComplete_.size();
    }
    /**
     * <code>repeated double blink_gc_main_thread_cycle_full_sweep_complete = 10 [(.perfetto.protos.unit) = "ms_smallerIsBetter"];</code>
     * @param index The index of the element to return.
     * @return The blinkGcMainThreadCycleFullSweepComplete at the given index.
     */
    public double getBlinkGcMainThreadCycleFullSweepComplete(int index) {
      return blinkGcMainThreadCycleFullSweepComplete_.getDouble(index);
    }

    public static final int BLINK_GC_INCREMENTAL_START_FIELD_NUMBER = 11;
    @SuppressWarnings("serial")
    private com.google.protobuf.Internal.DoubleList blinkGcIncrementalStart_;
    /**
     * <code>repeated double blink_gc_incremental_start = 11 [(.perfetto.protos.unit) = "ms_smallerIsBetter"];</code>
     * @return A list containing the blinkGcIncrementalStart.
     */
    @java.lang.Override
    public java.util.List<java.lang.Double>
        getBlinkGcIncrementalStartList() {
      return blinkGcIncrementalStart_;
    }
    /**
     * <code>repeated double blink_gc_incremental_start = 11 [(.perfetto.protos.unit) = "ms_smallerIsBetter"];</code>
     * @return The count of blinkGcIncrementalStart.
     */
    public int getBlinkGcIncrementalStartCount() {
      return blinkGcIncrementalStart_.size();
    }
    /**
     * <code>repeated double blink_gc_incremental_start = 11 [(.perfetto.protos.unit) = "ms_smallerIsBetter"];</code>
     * @param index The index of the element to return.
     * @return The blinkGcIncrementalStart at the given index.
     */
    public double getBlinkGcIncrementalStart(int index) {
      return blinkGcIncrementalStart_.getDouble(index);
    }

    public static final int BLINK_GC_MAIN_THREAD_CYCLE_FULL_INCREMENTAL_MARK_START_FIELD_NUMBER = 12;
    @SuppressWarnings("serial")
    private com.google.protobuf.Internal.DoubleList blinkGcMainThreadCycleFullIncrementalMarkStart_;
    /**
     * <code>repeated double blink_gc_main_thread_cycle_full_incremental_mark_start = 12 [(.perfetto.protos.unit) = "ms_smallerIsBetter"];</code>
     * @return A list containing the blinkGcMainThreadCycleFullIncrementalMarkStart.
     */
    @java.lang.Override
    public java.util.List<java.lang.Double>
        getBlinkGcMainThreadCycleFullIncrementalMarkStartList() {
      return blinkGcMainThreadCycleFullIncrementalMarkStart_;
    }
    /**
     * <code>repeated double blink_gc_main_thread_cycle_full_incremental_mark_start = 12 [(.perfetto.protos.unit) = "ms_smallerIsBetter"];</code>
     * @return The count of blinkGcMainThreadCycleFullIncrementalMarkStart.
     */
    public int getBlinkGcMainThreadCycleFullIncrementalMarkStartCount() {
      return blinkGcMainThreadCycleFullIncrementalMarkStart_.size();
    }
    /**
     * <code>repeated double blink_gc_main_thread_cycle_full_incremental_mark_start = 12 [(.perfetto.protos.unit) = "ms_smallerIsBetter"];</code>
     * @param index The index of the element to return.
     * @return The blinkGcMainThreadCycleFullIncrementalMarkStart at the given index.
     */
    public double getBlinkGcMainThreadCycleFullIncrementalMarkStart(int index) {
      return blinkGcMainThreadCycleFullIncrementalMarkStart_.getDouble(index);
    }

    public static final int BLINK_GC_INCREMENTAL_STEP_FIELD_NUMBER = 13;
    @SuppressWarnings("serial")
    private com.google.protobuf.Internal.DoubleList blinkGcIncrementalStep_;
    /**
     * <code>repeated double blink_gc_incremental_step = 13 [(.perfetto.protos.unit) = "ms_smallerIsBetter"];</code>
     * @return A list containing the blinkGcIncrementalStep.
     */
    @java.lang.Override
    public java.util.List<java.lang.Double>
        getBlinkGcIncrementalStepList() {
      return blinkGcIncrementalStep_;
    }
    /**
     * <code>repeated double blink_gc_incremental_step = 13 [(.perfetto.protos.unit) = "ms_smallerIsBetter"];</code>
     * @return The count of blinkGcIncrementalStep.
     */
    public int getBlinkGcIncrementalStepCount() {
      return blinkGcIncrementalStep_.size();
    }
    /**
     * <code>repeated double blink_gc_incremental_step = 13 [(.perfetto.protos.unit) = "ms_smallerIsBetter"];</code>
     * @param index The index of the element to return.
     * @return The blinkGcIncrementalStep at the given index.
     */
    public double getBlinkGcIncrementalStep(int index) {
      return blinkGcIncrementalStep_.getDouble(index);
    }

    public static final int BLINK_GC_MAIN_THREAD_CYCLE_FULL_INCREMENTAL_MARK_STEP_FIELD_NUMBER = 14;
    @SuppressWarnings("serial")
    private com.google.protobuf.Internal.DoubleList blinkGcMainThreadCycleFullIncrementalMarkStep_;
    /**
     * <code>repeated double blink_gc_main_thread_cycle_full_incremental_mark_step = 14 [(.perfetto.protos.unit) = "ms_smallerIsBetter"];</code>
     * @return A list containing the blinkGcMainThreadCycleFullIncrementalMarkStep.
     */
    @java.lang.Override
    public java.util.List<java.lang.Double>
        getBlinkGcMainThreadCycleFullIncrementalMarkStepList() {
      return blinkGcMainThreadCycleFullIncrementalMarkStep_;
    }
    /**
     * <code>repeated double blink_gc_main_thread_cycle_full_incremental_mark_step = 14 [(.perfetto.protos.unit) = "ms_smallerIsBetter"];</code>
     * @return The count of blinkGcMainThreadCycleFullIncrementalMarkStep.
     */
    public int getBlinkGcMainThreadCycleFullIncrementalMarkStepCount() {
      return blinkGcMainThreadCycleFullIncrementalMarkStep_.size();
    }
    /**
     * <code>repeated double blink_gc_main_thread_cycle_full_incremental_mark_step = 14 [(.perfetto.protos.unit) = "ms_smallerIsBetter"];</code>
     * @param index The index of the element to return.
     * @return The blinkGcMainThreadCycleFullIncrementalMarkStep at the given index.
     */
    public double getBlinkGcMainThreadCycleFullIncrementalMarkStep(int index) {
      return blinkGcMainThreadCycleFullIncrementalMarkStep_.getDouble(index);
    }

    public static final int BLINK_GC_SWEEP_ALLOCATION_FIELD_NUMBER = 15;
    @SuppressWarnings("serial")
    private com.google.protobuf.Internal.DoubleList blinkGcSweepAllocation_;
    /**
     * <code>repeated double blink_gc_sweep_allocation = 15 [(.perfetto.protos.unit) = "ms_smallerIsBetter"];</code>
     * @return A list containing the blinkGcSweepAllocation.
     */
    @java.lang.Override
    public java.util.List<java.lang.Double>
        getBlinkGcSweepAllocationList() {
      return blinkGcSweepAllocation_;
    }
    /**
     * <code>repeated double blink_gc_sweep_allocation = 15 [(.perfetto.protos.unit) = "ms_smallerIsBetter"];</code>
     * @return The count of blinkGcSweepAllocation.
     */
    public int getBlinkGcSweepAllocationCount() {
      return blinkGcSweepAllocation_.size();
    }
    /**
     * <code>repeated double blink_gc_sweep_allocation = 15 [(.perfetto.protos.unit) = "ms_smallerIsBetter"];</code>
     * @param index The index of the element to return.
     * @return The blinkGcSweepAllocation at the given index.
     */
    public double getBlinkGcSweepAllocation(int index) {
      return blinkGcSweepAllocation_.getDouble(index);
    }

    public static final int BLINK_GC_MAIN_THREAD_CYCLE_FULL_SWEEP_ON_ALLOCATION_FIELD_NUMBER = 16;
    @SuppressWarnings("serial")
    private com.google.protobuf.Internal.DoubleList blinkGcMainThreadCycleFullSweepOnAllocation_;
    /**
     * <code>repeated double blink_gc_main_thread_cycle_full_sweep_on_allocation = 16 [(.perfetto.protos.unit) = "ms_smallerIsBetter"];</code>
     * @return A list containing the blinkGcMainThreadCycleFullSweepOnAllocation.
     */
    @java.lang.Override
    public java.util.List<java.lang.Double>
        getBlinkGcMainThreadCycleFullSweepOnAllocationList() {
      return blinkGcMainThreadCycleFullSweepOnAllocation_;
    }
    /**
     * <code>repeated double blink_gc_main_thread_cycle_full_sweep_on_allocation = 16 [(.perfetto.protos.unit) = "ms_smallerIsBetter"];</code>
     * @return The count of blinkGcMainThreadCycleFullSweepOnAllocation.
     */
    public int getBlinkGcMainThreadCycleFullSweepOnAllocationCount() {
      return blinkGcMainThreadCycleFullSweepOnAllocation_.size();
    }
    /**
     * <code>repeated double blink_gc_main_thread_cycle_full_sweep_on_allocation = 16 [(.perfetto.protos.unit) = "ms_smallerIsBetter"];</code>
     * @param index The index of the element to return.
     * @return The blinkGcMainThreadCycleFullSweepOnAllocation at the given index.
     */
    public double getBlinkGcMainThreadCycleFullSweepOnAllocation(int index) {
      return blinkGcMainThreadCycleFullSweepOnAllocation_.getDouble(index);
    }

    public static final int BLINK_GC_SWEEP_TASK_FOREGROUND_FIELD_NUMBER = 17;
    @SuppressWarnings("serial")
    private com.google.protobuf.Internal.DoubleList blinkGcSweepTaskForeground_;
    /**
     * <code>repeated double blink_gc_sweep_task_foreground = 17 [(.perfetto.protos.unit) = "ms_smallerIsBetter"];</code>
     * @return A list containing the blinkGcSweepTaskForeground.
     */
    @java.lang.Override
    public java.util.List<java.lang.Double>
        getBlinkGcSweepTaskForegroundList() {
      return blinkGcSweepTaskForeground_;
    }
    /**
     * <code>repeated double blink_gc_sweep_task_foreground = 17 [(.perfetto.protos.unit) = "ms_smallerIsBetter"];</code>
     * @return The count of blinkGcSweepTaskForeground.
     */
    public int getBlinkGcSweepTaskForegroundCount() {
      return blinkGcSweepTaskForeground_.size();
    }
    /**
     * <code>repeated double blink_gc_sweep_task_foreground = 17 [(.perfetto.protos.unit) = "ms_smallerIsBetter"];</code>
     * @param index The index of the element to return.
     * @return The blinkGcSweepTaskForeground at the given index.
     */
    public double getBlinkGcSweepTaskForeground(int index) {
      return blinkGcSweepTaskForeground_.getDouble(index);
    }

    public static final int BLINK_GC_MAIN_THREAD_CYCLE_FULL_SWEEP_IDLE_FIELD_NUMBER = 18;
    @SuppressWarnings("serial")
    private com.google.protobuf.Internal.DoubleList blinkGcMainThreadCycleFullSweepIdle_;
    /**
     * <code>repeated double blink_gc_main_thread_cycle_full_sweep_idle = 18 [(.perfetto.protos.unit) = "ms_smallerIsBetter"];</code>
     * @return A list containing the blinkGcMainThreadCycleFullSweepIdle.
     */
    @java.lang.Override
    public java.util.List<java.lang.Double>
        getBlinkGcMainThreadCycleFullSweepIdleList() {
      return blinkGcMainThreadCycleFullSweepIdle_;
    }
    /**
     * <code>repeated double blink_gc_main_thread_cycle_full_sweep_idle = 18 [(.perfetto.protos.unit) = "ms_smallerIsBetter"];</code>
     * @return The count of blinkGcMainThreadCycleFullSweepIdle.
     */
    public int getBlinkGcMainThreadCycleFullSweepIdleCount() {
      return blinkGcMainThreadCycleFullSweepIdle_.size();
    }
    /**
     * <code>repeated double blink_gc_main_thread_cycle_full_sweep_idle = 18 [(.perfetto.protos.unit) = "ms_smallerIsBetter"];</code>
     * @param index The index of the element to return.
     * @return The blinkGcMainThreadCycleFullSweepIdle at the given index.
     */
    public double getBlinkGcMainThreadCycleFullSweepIdle(int index) {
      return blinkGcMainThreadCycleFullSweepIdle_.getDouble(index);
    }

    public static final int BLINK_GC_UNIFIED_MARKING_BY_V8_FIELD_NUMBER = 19;
    @SuppressWarnings("serial")
    private com.google.protobuf.Internal.DoubleList blinkGcUnifiedMarkingByV8_;
    /**
     * <code>repeated double blink_gc_unified_marking_by_v8 = 19 [(.perfetto.protos.unit) = "ms_smallerIsBetter"];</code>
     * @return A list containing the blinkGcUnifiedMarkingByV8.
     */
    @java.lang.Override
    public java.util.List<java.lang.Double>
        getBlinkGcUnifiedMarkingByV8List() {
      return blinkGcUnifiedMarkingByV8_;
    }
    /**
     * <code>repeated double blink_gc_unified_marking_by_v8 = 19 [(.perfetto.protos.unit) = "ms_smallerIsBetter"];</code>
     * @return The count of blinkGcUnifiedMarkingByV8.
     */
    public int getBlinkGcUnifiedMarkingByV8Count() {
      return blinkGcUnifiedMarkingByV8_.size();
    }
    /**
     * <code>repeated double blink_gc_unified_marking_by_v8 = 19 [(.perfetto.protos.unit) = "ms_smallerIsBetter"];</code>
     * @param index The index of the element to return.
     * @return The blinkGcUnifiedMarkingByV8 at the given index.
     */
    public double getBlinkGcUnifiedMarkingByV8(int index) {
      return blinkGcUnifiedMarkingByV8_.getDouble(index);
    }

    public static final int UNIFIED_GC_MAIN_THREAD_CYCLE_FULL_MARK_STEP_FIELD_NUMBER = 20;
    @SuppressWarnings("serial")
    private com.google.protobuf.Internal.DoubleList unifiedGcMainThreadCycleFullMarkStep_;
    /**
     * <code>repeated double unified_gc_main_thread_cycle_full_mark_step = 20 [(.perfetto.protos.unit) = "ms_smallerIsBetter"];</code>
     * @return A list containing the unifiedGcMainThreadCycleFullMarkStep.
     */
    @java.lang.Override
    public java.util.List<java.lang.Double>
        getUnifiedGcMainThreadCycleFullMarkStepList() {
      return unifiedGcMainThreadCycleFullMarkStep_;
    }
    /**
     * <code>repeated double unified_gc_main_thread_cycle_full_mark_step = 20 [(.perfetto.protos.unit) = "ms_smallerIsBetter"];</code>
     * @return The count of unifiedGcMainThreadCycleFullMarkStep.
     */
    public int getUnifiedGcMainThreadCycleFullMarkStepCount() {
      return unifiedGcMainThreadCycleFullMarkStep_.size();
    }
    /**
     * <code>repeated double unified_gc_main_thread_cycle_full_mark_step = 20 [(.perfetto.protos.unit) = "ms_smallerIsBetter"];</code>
     * @param index The index of the element to return.
     * @return The unifiedGcMainThreadCycleFullMarkStep at the given index.
     */
    public double getUnifiedGcMainThreadCycleFullMarkStep(int index) {
      return unifiedGcMainThreadCycleFullMarkStep_.getDouble(index);
    }

    public static final int BLINK_GC_ATOMIC_PAUSE_FIELD_NUMBER = 21;
    @SuppressWarnings("serial")
    private com.google.protobuf.Internal.DoubleList blinkGcAtomicPause_;
    /**
     * <code>repeated double blink_gc_atomic_pause = 21 [(.perfetto.protos.unit) = "ms_smallerIsBetter"];</code>
     * @return A list containing the blinkGcAtomicPause.
     */
    @java.lang.Override
    public java.util.List<java.lang.Double>
        getBlinkGcAtomicPauseList() {
      return blinkGcAtomicPause_;
    }
    /**
     * <code>repeated double blink_gc_atomic_pause = 21 [(.perfetto.protos.unit) = "ms_smallerIsBetter"];</code>
     * @return The count of blinkGcAtomicPause.
     */
    public int getBlinkGcAtomicPauseCount() {
      return blinkGcAtomicPause_.size();
    }
    /**
     * <code>repeated double blink_gc_atomic_pause = 21 [(.perfetto.protos.unit) = "ms_smallerIsBetter"];</code>
     * @param index The index of the element to return.
     * @return The blinkGcAtomicPause at the given index.
     */
    public double getBlinkGcAtomicPause(int index) {
      return blinkGcAtomicPause_.getDouble(index);
    }

    public static final int BLINK_GC_MAIN_THREAD_CYCLE_FULL_ATOMIC_FIELD_NUMBER = 22;
    @SuppressWarnings("serial")
    private com.google.protobuf.Internal.DoubleList blinkGcMainThreadCycleFullAtomic_;
    /**
     * <code>repeated double blink_gc_main_thread_cycle_full_atomic = 22 [(.perfetto.protos.unit) = "ms_smallerIsBetter"];</code>
     * @return A list containing the blinkGcMainThreadCycleFullAtomic.
     */
    @java.lang.Override
    public java.util.List<java.lang.Double>
        getBlinkGcMainThreadCycleFullAtomicList() {
      return blinkGcMainThreadCycleFullAtomic_;
    }
    /**
     * <code>repeated double blink_gc_main_thread_cycle_full_atomic = 22 [(.perfetto.protos.unit) = "ms_smallerIsBetter"];</code>
     * @return The count of blinkGcMainThreadCycleFullAtomic.
     */
    public int getBlinkGcMainThreadCycleFullAtomicCount() {
      return blinkGcMainThreadCycleFullAtomic_.size();
    }
    /**
     * <code>repeated double blink_gc_main_thread_cycle_full_atomic = 22 [(.perfetto.protos.unit) = "ms_smallerIsBetter"];</code>
     * @param index The index of the element to return.
     * @return The blinkGcMainThreadCycleFullAtomic at the given index.
     */
    public double getBlinkGcMainThreadCycleFullAtomic(int index) {
      return blinkGcMainThreadCycleFullAtomic_.getDouble(index);
    }

    public static final int BLINK_GC_ATOMIC_PAUSE_MARK_TRANSITIVE_CLOSURE_FIELD_NUMBER = 23;
    @SuppressWarnings("serial")
    private com.google.protobuf.Internal.DoubleList blinkGcAtomicPauseMarkTransitiveClosure_;
    /**
     * <code>repeated double blink_gc_atomic_pause_mark_transitive_closure = 23 [(.perfetto.protos.unit) = "ms_smallerIsBetter"];</code>
     * @return A list containing the blinkGcAtomicPauseMarkTransitiveClosure.
     */
    @java.lang.Override
    public java.util.List<java.lang.Double>
        getBlinkGcAtomicPauseMarkTransitiveClosureList() {
      return blinkGcAtomicPauseMarkTransitiveClosure_;
    }
    /**
     * <code>repeated double blink_gc_atomic_pause_mark_transitive_closure = 23 [(.perfetto.protos.unit) = "ms_smallerIsBetter"];</code>
     * @return The count of blinkGcAtomicPauseMarkTransitiveClosure.
     */
    public int getBlinkGcAtomicPauseMarkTransitiveClosureCount() {
      return blinkGcAtomicPauseMarkTransitiveClosure_.size();
    }
    /**
     * <code>repeated double blink_gc_atomic_pause_mark_transitive_closure = 23 [(.perfetto.protos.unit) = "ms_smallerIsBetter"];</code>
     * @param index The index of the element to return.
     * @return The blinkGcAtomicPauseMarkTransitiveClosure at the given index.
     */
    public double getBlinkGcAtomicPauseMarkTransitiveClosure(int index) {
      return blinkGcAtomicPauseMarkTransitiveClosure_.getDouble(index);
    }

    public static final int BLINK_GC_MAIN_THREAD_CYCLE_FULL_ATOMIC_MARK_TRANSITIVE_CLOSURE_FIELD_NUMBER = 24;
    @SuppressWarnings("serial")
    private com.google.protobuf.Internal.DoubleList blinkGcMainThreadCycleFullAtomicMarkTransitiveClosure_;
    /**
     * <code>repeated double blink_gc_main_thread_cycle_full_atomic_mark_transitive_closure = 24 [(.perfetto.protos.unit) = "ms_smallerIsBetter"];</code>
     * @return A list containing the blinkGcMainThreadCycleFullAtomicMarkTransitiveClosure.
     */
    @java.lang.Override
    public java.util.List<java.lang.Double>
        getBlinkGcMainThreadCycleFullAtomicMarkTransitiveClosureList() {
      return blinkGcMainThreadCycleFullAtomicMarkTransitiveClosure_;
    }
    /**
     * <code>repeated double blink_gc_main_thread_cycle_full_atomic_mark_transitive_closure = 24 [(.perfetto.protos.unit) = "ms_smallerIsBetter"];</code>
     * @return The count of blinkGcMainThreadCycleFullAtomicMarkTransitiveClosure.
     */
    public int getBlinkGcMainThreadCycleFullAtomicMarkTransitiveClosureCount() {
      return blinkGcMainThreadCycleFullAtomicMarkTransitiveClosure_.size();
    }
    /**
     * <code>repeated double blink_gc_main_thread_cycle_full_atomic_mark_transitive_closure = 24 [(.perfetto.protos.unit) = "ms_smallerIsBetter"];</code>
     * @param index The index of the element to return.
     * @return The blinkGcMainThreadCycleFullAtomicMarkTransitiveClosure at the given index.
     */
    public double getBlinkGcMainThreadCycleFullAtomicMarkTransitiveClosure(int index) {
      return blinkGcMainThreadCycleFullAtomicMarkTransitiveClosure_.getDouble(index);
    }

    public static final int BLINK_GC_TOTAL_FIELD_NUMBER = 25;
    @SuppressWarnings("serial")
    private com.google.protobuf.Internal.DoubleList blinkGcTotal_;
    /**
     * <code>repeated double blink_gc_total = 25 [(.perfetto.protos.unit) = "ms_smallerIsBetter"];</code>
     * @return A list containing the blinkGcTotal.
     */
    @java.lang.Override
    public java.util.List<java.lang.Double>
        getBlinkGcTotalList() {
      return blinkGcTotal_;
    }
    /**
     * <code>repeated double blink_gc_total = 25 [(.perfetto.protos.unit) = "ms_smallerIsBetter"];</code>
     * @return The count of blinkGcTotal.
     */
    public int getBlinkGcTotalCount() {
      return blinkGcTotal_.size();
    }
    /**
     * <code>repeated double blink_gc_total = 25 [(.perfetto.protos.unit) = "ms_smallerIsBetter"];</code>
     * @param index The index of the element to return.
     * @return The blinkGcTotal at the given index.
     */
    public double getBlinkGcTotal(int index) {
      return blinkGcTotal_.getDouble(index);
    }

    public static final int BLINK_GC_MAIN_THREAD_CYCLE_FULL_FIELD_NUMBER = 26;
    @SuppressWarnings("serial")
    private com.google.protobuf.Internal.DoubleList blinkGcMainThreadCycleFull_;
    /**
     * <code>repeated double blink_gc_main_thread_cycle_full = 26 [(.perfetto.protos.unit) = "ms_smallerIsBetter"];</code>
     * @return A list containing the blinkGcMainThreadCycleFull.
     */
    @java.lang.Override
    public java.util.List<java.lang.Double>
        getBlinkGcMainThreadCycleFullList() {
      return blinkGcMainThreadCycleFull_;
    }
    /**
     * <code>repeated double blink_gc_main_thread_cycle_full = 26 [(.perfetto.protos.unit) = "ms_smallerIsBetter"];</code>
     * @return The count of blinkGcMainThreadCycleFull.
     */
    public int getBlinkGcMainThreadCycleFullCount() {
      return blinkGcMainThreadCycleFull_.size();
    }
    /**
     * <code>repeated double blink_gc_main_thread_cycle_full = 26 [(.perfetto.protos.unit) = "ms_smallerIsBetter"];</code>
     * @param index The index of the element to return.
     * @return The blinkGcMainThreadCycleFull at the given index.
     */
    public double getBlinkGcMainThreadCycleFull(int index) {
      return blinkGcMainThreadCycleFull_.getDouble(index);
    }

    public static final int BLINK_GC_MARK_ROOTS_FIELD_NUMBER = 27;
    @SuppressWarnings("serial")
    private com.google.protobuf.Internal.DoubleList blinkGcMarkRoots_;
    /**
     * <code>repeated double blink_gc_mark_roots = 27 [(.perfetto.protos.unit) = "ms_smallerIsBetter"];</code>
     * @return A list containing the blinkGcMarkRoots.
     */
    @java.lang.Override
    public java.util.List<java.lang.Double>
        getBlinkGcMarkRootsList() {
      return blinkGcMarkRoots_;
    }
    /**
     * <code>repeated double blink_gc_mark_roots = 27 [(.perfetto.protos.unit) = "ms_smallerIsBetter"];</code>
     * @return The count of blinkGcMarkRoots.
     */
    public int getBlinkGcMarkRootsCount() {
      return blinkGcMarkRoots_.size();
    }
    /**
     * <code>repeated double blink_gc_mark_roots = 27 [(.perfetto.protos.unit) = "ms_smallerIsBetter"];</code>
     * @param index The index of the element to return.
     * @return The blinkGcMarkRoots at the given index.
     */
    public double getBlinkGcMarkRoots(int index) {
      return blinkGcMarkRoots_.getDouble(index);
    }

    public static final int BLINK_GC_MAIN_THREAD_CYCLE_FULL_MARK_ROOTS_FIELD_NUMBER = 28;
    @SuppressWarnings("serial")
    private com.google.protobuf.Internal.DoubleList blinkGcMainThreadCycleFullMarkRoots_;
    /**
     * <code>repeated double blink_gc_main_thread_cycle_full_mark_roots = 28 [(.perfetto.protos.unit) = "ms_smallerIsBetter"];</code>
     * @return A list containing the blinkGcMainThreadCycleFullMarkRoots.
     */
    @java.lang.Override
    public java.util.List<java.lang.Double>
        getBlinkGcMainThreadCycleFullMarkRootsList() {
      return blinkGcMainThreadCycleFullMarkRoots_;
    }
    /**
     * <code>repeated double blink_gc_main_thread_cycle_full_mark_roots = 28 [(.perfetto.protos.unit) = "ms_smallerIsBetter"];</code>
     * @return The count of blinkGcMainThreadCycleFullMarkRoots.
     */
    public int getBlinkGcMainThreadCycleFullMarkRootsCount() {
      return blinkGcMainThreadCycleFullMarkRoots_.size();
    }
    /**
     * <code>repeated double blink_gc_main_thread_cycle_full_mark_roots = 28 [(.perfetto.protos.unit) = "ms_smallerIsBetter"];</code>
     * @param index The index of the element to return.
     * @return The blinkGcMainThreadCycleFullMarkRoots at the given index.
     */
    public double getBlinkGcMainThreadCycleFullMarkRoots(int index) {
      return blinkGcMainThreadCycleFullMarkRoots_.getDouble(index);
    }

    public static final int BLINK_GC_MARK_TRANSITIVE_CLOSURE_FIELD_NUMBER = 29;
    @SuppressWarnings("serial")
    private com.google.protobuf.Internal.DoubleList blinkGcMarkTransitiveClosure_;
    /**
     * <code>repeated double blink_gc_mark_transitive_closure = 29 [(.perfetto.protos.unit) = "ms_smallerIsBetter"];</code>
     * @return A list containing the blinkGcMarkTransitiveClosure.
     */
    @java.lang.Override
    public java.util.List<java.lang.Double>
        getBlinkGcMarkTransitiveClosureList() {
      return blinkGcMarkTransitiveClosure_;
    }
    /**
     * <code>repeated double blink_gc_mark_transitive_closure = 29 [(.perfetto.protos.unit) = "ms_smallerIsBetter"];</code>
     * @return The count of blinkGcMarkTransitiveClosure.
     */
    public int getBlinkGcMarkTransitiveClosureCount() {
      return blinkGcMarkTransitiveClosure_.size();
    }
    /**
     * <code>repeated double blink_gc_mark_transitive_closure = 29 [(.perfetto.protos.unit) = "ms_smallerIsBetter"];</code>
     * @param index The index of the element to return.
     * @return The blinkGcMarkTransitiveClosure at the given index.
     */
    public double getBlinkGcMarkTransitiveClosure(int index) {
      return blinkGcMarkTransitiveClosure_.getDouble(index);
    }

    public static final int BLINK_GC_MAIN_THREAD_CYCLE_FULL_MARK_TRANSITIVE_CLOSURE_FIELD_NUMBER = 30;
    @SuppressWarnings("serial")
    private com.google.protobuf.Internal.DoubleList blinkGcMainThreadCycleFullMarkTransitiveClosure_;
    /**
     * <code>repeated double blink_gc_main_thread_cycle_full_mark_transitive_closure = 30 [(.perfetto.protos.unit) = "ms_smallerIsBetter"];</code>
     * @return A list containing the blinkGcMainThreadCycleFullMarkTransitiveClosure.
     */
    @java.lang.Override
    public java.util.List<java.lang.Double>
        getBlinkGcMainThreadCycleFullMarkTransitiveClosureList() {
      return blinkGcMainThreadCycleFullMarkTransitiveClosure_;
    }
    /**
     * <code>repeated double blink_gc_main_thread_cycle_full_mark_transitive_closure = 30 [(.perfetto.protos.unit) = "ms_smallerIsBetter"];</code>
     * @return The count of blinkGcMainThreadCycleFullMarkTransitiveClosure.
     */
    public int getBlinkGcMainThreadCycleFullMarkTransitiveClosureCount() {
      return blinkGcMainThreadCycleFullMarkTransitiveClosure_.size();
    }
    /**
     * <code>repeated double blink_gc_main_thread_cycle_full_mark_transitive_closure = 30 [(.perfetto.protos.unit) = "ms_smallerIsBetter"];</code>
     * @param index The index of the element to return.
     * @return The blinkGcMainThreadCycleFullMarkTransitiveClosure at the given index.
     */
    public double getBlinkGcMainThreadCycleFullMarkTransitiveClosure(int index) {
      return blinkGcMainThreadCycleFullMarkTransitiveClosure_.getDouble(index);
    }

    public static final int BLINK_GC_MARK_FOREGROUND_FIELD_NUMBER = 31;
    @SuppressWarnings("serial")
    private com.google.protobuf.Internal.DoubleList blinkGcMarkForeground_;
    /**
     * <code>repeated double blink_gc_mark_foreground = 31 [(.perfetto.protos.unit) = "ms_smallerIsBetter"];</code>
     * @return A list containing the blinkGcMarkForeground.
     */
    @java.lang.Override
    public java.util.List<java.lang.Double>
        getBlinkGcMarkForegroundList() {
      return blinkGcMarkForeground_;
    }
    /**
     * <code>repeated double blink_gc_mark_foreground = 31 [(.perfetto.protos.unit) = "ms_smallerIsBetter"];</code>
     * @return The count of blinkGcMarkForeground.
     */
    public int getBlinkGcMarkForegroundCount() {
      return blinkGcMarkForeground_.size();
    }
    /**
     * <code>repeated double blink_gc_mark_foreground = 31 [(.perfetto.protos.unit) = "ms_smallerIsBetter"];</code>
     * @param index The index of the element to return.
     * @return The blinkGcMarkForeground at the given index.
     */
    public double getBlinkGcMarkForeground(int index) {
      return blinkGcMarkForeground_.getDouble(index);
    }

    public static final int BLINK_GC_MAIN_THREAD_CYCLE_FULL_MARK_FIELD_NUMBER = 32;
    @SuppressWarnings("serial")
    private com.google.protobuf.Internal.DoubleList blinkGcMainThreadCycleFullMark_;
    /**
     * <code>repeated double blink_gc_main_thread_cycle_full_mark = 32 [(.perfetto.protos.unit) = "ms_smallerIsBetter"];</code>
     * @return A list containing the blinkGcMainThreadCycleFullMark.
     */
    @java.lang.Override
    public java.util.List<java.lang.Double>
        getBlinkGcMainThreadCycleFullMarkList() {
      return blinkGcMainThreadCycleFullMark_;
    }
    /**
     * <code>repeated double blink_gc_main_thread_cycle_full_mark = 32 [(.perfetto.protos.unit) = "ms_smallerIsBetter"];</code>
     * @return The count of blinkGcMainThreadCycleFullMark.
     */
    public int getBlinkGcMainThreadCycleFullMarkCount() {
      return blinkGcMainThreadCycleFullMark_.size();
    }
    /**
     * <code>repeated double blink_gc_main_thread_cycle_full_mark = 32 [(.perfetto.protos.unit) = "ms_smallerIsBetter"];</code>
     * @param index The index of the element to return.
     * @return The blinkGcMainThreadCycleFullMark at the given index.
     */
    public double getBlinkGcMainThreadCycleFullMark(int index) {
      return blinkGcMainThreadCycleFullMark_.getDouble(index);
    }

    public static final int BLINK_GC_MARK_FOREGROUND_FORCED_FIELD_NUMBER = 33;
    @SuppressWarnings("serial")
    private com.google.protobuf.Internal.DoubleList blinkGcMarkForegroundForced_;
    /**
     * <code>repeated double blink_gc_mark_foreground_forced = 33 [(.perfetto.protos.unit) = "ms_smallerIsBetter"];</code>
     * @return A list containing the blinkGcMarkForegroundForced.
     */
    @java.lang.Override
    public java.util.List<java.lang.Double>
        getBlinkGcMarkForegroundForcedList() {
      return blinkGcMarkForegroundForced_;
    }
    /**
     * <code>repeated double blink_gc_mark_foreground_forced = 33 [(.perfetto.protos.unit) = "ms_smallerIsBetter"];</code>
     * @return The count of blinkGcMarkForegroundForced.
     */
    public int getBlinkGcMarkForegroundForcedCount() {
      return blinkGcMarkForegroundForced_.size();
    }
    /**
     * <code>repeated double blink_gc_mark_foreground_forced = 33 [(.perfetto.protos.unit) = "ms_smallerIsBetter"];</code>
     * @param index The index of the element to return.
     * @return The blinkGcMarkForegroundForced at the given index.
     */
    public double getBlinkGcMarkForegroundForced(int index) {
      return blinkGcMarkForegroundForced_.getDouble(index);
    }

    public static final int BLINK_GC_MAIN_THREAD_CYCLE_FULL_MARK_FORCED_FIELD_NUMBER = 34;
    @SuppressWarnings("serial")
    private com.google.protobuf.Internal.DoubleList blinkGcMainThreadCycleFullMarkForced_;
    /**
     * <code>repeated double blink_gc_main_thread_cycle_full_mark_forced = 34 [(.perfetto.protos.unit) = "ms_smallerIsBetter"];</code>
     * @return A list containing the blinkGcMainThreadCycleFullMarkForced.
     */
    @java.lang.Override
    public java.util.List<java.lang.Double>
        getBlinkGcMainThreadCycleFullMarkForcedList() {
      return blinkGcMainThreadCycleFullMarkForced_;
    }
    /**
     * <code>repeated double blink_gc_main_thread_cycle_full_mark_forced = 34 [(.perfetto.protos.unit) = "ms_smallerIsBetter"];</code>
     * @return The count of blinkGcMainThreadCycleFullMarkForced.
     */
    public int getBlinkGcMainThreadCycleFullMarkForcedCount() {
      return blinkGcMainThreadCycleFullMarkForced_.size();
    }
    /**
     * <code>repeated double blink_gc_main_thread_cycle_full_mark_forced = 34 [(.perfetto.protos.unit) = "ms_smallerIsBetter"];</code>
     * @param index The index of the element to return.
     * @return The blinkGcMainThreadCycleFullMarkForced at the given index.
     */
    public double getBlinkGcMainThreadCycleFullMarkForced(int index) {
      return blinkGcMainThreadCycleFullMarkForced_.getDouble(index);
    }

    public static final int BLINK_GC_MARK_BACKGROUND_FIELD_NUMBER = 35;
    @SuppressWarnings("serial")
    private com.google.protobuf.Internal.DoubleList blinkGcMarkBackground_;
    /**
     * <code>repeated double blink_gc_mark_background = 35 [(.perfetto.protos.unit) = "ms_smallerIsBetter"];</code>
     * @return A list containing the blinkGcMarkBackground.
     */
    @java.lang.Override
    public java.util.List<java.lang.Double>
        getBlinkGcMarkBackgroundList() {
      return blinkGcMarkBackground_;
    }
    /**
     * <code>repeated double blink_gc_mark_background = 35 [(.perfetto.protos.unit) = "ms_smallerIsBetter"];</code>
     * @return The count of blinkGcMarkBackground.
     */
    public int getBlinkGcMarkBackgroundCount() {
      return blinkGcMarkBackground_.size();
    }
    /**
     * <code>repeated double blink_gc_mark_background = 35 [(.perfetto.protos.unit) = "ms_smallerIsBetter"];</code>
     * @param index The index of the element to return.
     * @return The blinkGcMarkBackground at the given index.
     */
    public double getBlinkGcMarkBackground(int index) {
      return blinkGcMarkBackground_.getDouble(index);
    }

    public static final int BLINK_GC_CONCURRENT_THREAD_CYCLE_FULL_MARK_FIELD_NUMBER = 36;
    @SuppressWarnings("serial")
    private com.google.protobuf.Internal.DoubleList blinkGcConcurrentThreadCycleFullMark_;
    /**
     * <code>repeated double blink_gc_concurrent_thread_cycle_full_mark = 36 [(.perfetto.protos.unit) = "ms_smallerIsBetter"];</code>
     * @return A list containing the blinkGcConcurrentThreadCycleFullMark.
     */
    @java.lang.Override
    public java.util.List<java.lang.Double>
        getBlinkGcConcurrentThreadCycleFullMarkList() {
      return blinkGcConcurrentThreadCycleFullMark_;
    }
    /**
     * <code>repeated double blink_gc_concurrent_thread_cycle_full_mark = 36 [(.perfetto.protos.unit) = "ms_smallerIsBetter"];</code>
     * @return The count of blinkGcConcurrentThreadCycleFullMark.
     */
    public int getBlinkGcConcurrentThreadCycleFullMarkCount() {
      return blinkGcConcurrentThreadCycleFullMark_.size();
    }
    /**
     * <code>repeated double blink_gc_concurrent_thread_cycle_full_mark = 36 [(.perfetto.protos.unit) = "ms_smallerIsBetter"];</code>
     * @param index The index of the element to return.
     * @return The blinkGcConcurrentThreadCycleFullMark at the given index.
     */
    public double getBlinkGcConcurrentThreadCycleFullMark(int index) {
      return blinkGcConcurrentThreadCycleFullMark_.getDouble(index);
    }

    public static final int BLINK_GC_SWEEP_FOREGROUND_FIELD_NUMBER = 37;
    @SuppressWarnings("serial")
    private com.google.protobuf.Internal.DoubleList blinkGcSweepForeground_;
    /**
     * <code>repeated double blink_gc_sweep_foreground = 37 [(.perfetto.protos.unit) = "ms_smallerIsBetter"];</code>
     * @return A list containing the blinkGcSweepForeground.
     */
    @java.lang.Override
    public java.util.List<java.lang.Double>
        getBlinkGcSweepForegroundList() {
      return blinkGcSweepForeground_;
    }
    /**
     * <code>repeated double blink_gc_sweep_foreground = 37 [(.perfetto.protos.unit) = "ms_smallerIsBetter"];</code>
     * @return The count of blinkGcSweepForeground.
     */
    public int getBlinkGcSweepForegroundCount() {
      return blinkGcSweepForeground_.size();
    }
    /**
     * <code>repeated double blink_gc_sweep_foreground = 37 [(.perfetto.protos.unit) = "ms_smallerIsBetter"];</code>
     * @param index The index of the element to return.
     * @return The blinkGcSweepForeground at the given index.
     */
    public double getBlinkGcSweepForeground(int index) {
      return blinkGcSweepForeground_.getDouble(index);
    }

    public static final int BLINK_GC_MAIN_THREAD_CYCLE_FULL_SWEEP_FIELD_NUMBER = 38;
    @SuppressWarnings("serial")
    private com.google.protobuf.Internal.DoubleList blinkGcMainThreadCycleFullSweep_;
    /**
     * <code>repeated double blink_gc_main_thread_cycle_full_sweep = 38 [(.perfetto.protos.unit) = "ms_smallerIsBetter"];</code>
     * @return A list containing the blinkGcMainThreadCycleFullSweep.
     */
    @java.lang.Override
    public java.util.List<java.lang.Double>
        getBlinkGcMainThreadCycleFullSweepList() {
      return blinkGcMainThreadCycleFullSweep_;
    }
    /**
     * <code>repeated double blink_gc_main_thread_cycle_full_sweep = 38 [(.perfetto.protos.unit) = "ms_smallerIsBetter"];</code>
     * @return The count of blinkGcMainThreadCycleFullSweep.
     */
    public int getBlinkGcMainThreadCycleFullSweepCount() {
      return blinkGcMainThreadCycleFullSweep_.size();
    }
    /**
     * <code>repeated double blink_gc_main_thread_cycle_full_sweep = 38 [(.perfetto.protos.unit) = "ms_smallerIsBetter"];</code>
     * @param index The index of the element to return.
     * @return The blinkGcMainThreadCycleFullSweep at the given index.
     */
    public double getBlinkGcMainThreadCycleFullSweep(int index) {
      return blinkGcMainThreadCycleFullSweep_.getDouble(index);
    }

    public static final int BLINK_GC_SWEEP_BACKGROUND_FIELD_NUMBER = 39;
    @SuppressWarnings("serial")
    private com.google.protobuf.Internal.DoubleList blinkGcSweepBackground_;
    /**
     * <code>repeated double blink_gc_sweep_background = 39 [(.perfetto.protos.unit) = "ms_smallerIsBetter"];</code>
     * @return A list containing the blinkGcSweepBackground.
     */
    @java.lang.Override
    public java.util.List<java.lang.Double>
        getBlinkGcSweepBackgroundList() {
      return blinkGcSweepBackground_;
    }
    /**
     * <code>repeated double blink_gc_sweep_background = 39 [(.perfetto.protos.unit) = "ms_smallerIsBetter"];</code>
     * @return The count of blinkGcSweepBackground.
     */
    public int getBlinkGcSweepBackgroundCount() {
      return blinkGcSweepBackground_.size();
    }
    /**
     * <code>repeated double blink_gc_sweep_background = 39 [(.perfetto.protos.unit) = "ms_smallerIsBetter"];</code>
     * @param index The index of the element to return.
     * @return The blinkGcSweepBackground at the given index.
     */
    public double getBlinkGcSweepBackground(int index) {
      return blinkGcSweepBackground_.getDouble(index);
    }

    public static final int BLINK_GC_CONCURRENT_THREAD_CYCLE_FULL_SWEEP_FIELD_NUMBER = 40;
    @SuppressWarnings("serial")
    private com.google.protobuf.Internal.DoubleList blinkGcConcurrentThreadCycleFullSweep_;
    /**
     * <code>repeated double blink_gc_concurrent_thread_cycle_full_sweep = 40 [(.perfetto.protos.unit) = "ms_smallerIsBetter"];</code>
     * @return A list containing the blinkGcConcurrentThreadCycleFullSweep.
     */
    @java.lang.Override
    public java.util.List<java.lang.Double>
        getBlinkGcConcurrentThreadCycleFullSweepList() {
      return blinkGcConcurrentThreadCycleFullSweep_;
    }
    /**
     * <code>repeated double blink_gc_concurrent_thread_cycle_full_sweep = 40 [(.perfetto.protos.unit) = "ms_smallerIsBetter"];</code>
     * @return The count of blinkGcConcurrentThreadCycleFullSweep.
     */
    public int getBlinkGcConcurrentThreadCycleFullSweepCount() {
      return blinkGcConcurrentThreadCycleFullSweep_.size();
    }
    /**
     * <code>repeated double blink_gc_concurrent_thread_cycle_full_sweep = 40 [(.perfetto.protos.unit) = "ms_smallerIsBetter"];</code>
     * @param index The index of the element to return.
     * @return The blinkGcConcurrentThreadCycleFullSweep at the given index.
     */
    public double getBlinkGcConcurrentThreadCycleFullSweep(int index) {
      return blinkGcConcurrentThreadCycleFullSweep_.getDouble(index);
    }

    public static final int UNIFIED_GC_TOTAL_FIELD_NUMBER = 41;
    @SuppressWarnings("serial")
    private com.google.protobuf.Internal.DoubleList unifiedGcTotal_;
    /**
     * <code>repeated double unified_gc_total = 41 [(.perfetto.protos.unit) = "ms_smallerIsBetter"];</code>
     * @return A list containing the unifiedGcTotal.
     */
    @java.lang.Override
    public java.util.List<java.lang.Double>
        getUnifiedGcTotalList() {
      return unifiedGcTotal_;
    }
    /**
     * <code>repeated double unified_gc_total = 41 [(.perfetto.protos.unit) = "ms_smallerIsBetter"];</code>
     * @return The count of unifiedGcTotal.
     */
    public int getUnifiedGcTotalCount() {
      return unifiedGcTotal_.size();
    }
    /**
     * <code>repeated double unified_gc_total = 41 [(.perfetto.protos.unit) = "ms_smallerIsBetter"];</code>
     * @param index The index of the element to return.
     * @return The unifiedGcTotal at the given index.
     */
    public double getUnifiedGcTotal(int index) {
      return unifiedGcTotal_.getDouble(index);
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      for (int i = 0; i < blinkGcAtomicPauseMarkEpilogue_.size(); i++) {
        output.writeDouble(1, blinkGcAtomicPauseMarkEpilogue_.getDouble(i));
      }
      for (int i = 0; i < blinkGcMainThreadCycleFullAtomicMarkEpilogue_.size(); i++) {
        output.writeDouble(2, blinkGcMainThreadCycleFullAtomicMarkEpilogue_.getDouble(i));
      }
      for (int i = 0; i < blinkGcAtomicPauseMarkPrologue_.size(); i++) {
        output.writeDouble(3, blinkGcAtomicPauseMarkPrologue_.getDouble(i));
      }
      for (int i = 0; i < blinkGcMainThreadCycleFullAtomicMarkPrologue_.size(); i++) {
        output.writeDouble(4, blinkGcMainThreadCycleFullAtomicMarkPrologue_.getDouble(i));
      }
      for (int i = 0; i < blinkGcAtomicPauseMarkRoots_.size(); i++) {
        output.writeDouble(5, blinkGcAtomicPauseMarkRoots_.getDouble(i));
      }
      for (int i = 0; i < blinkGcMainThreadCycleFullAtomicMarkRoots_.size(); i++) {
        output.writeDouble(6, blinkGcMainThreadCycleFullAtomicMarkRoots_.getDouble(i));
      }
      for (int i = 0; i < blinkGcAtomicPauseSweepAndCompact_.size(); i++) {
        output.writeDouble(7, blinkGcAtomicPauseSweepAndCompact_.getDouble(i));
      }
      for (int i = 0; i < blinkGcMainThreadCycleFullAtomicSweepCompact_.size(); i++) {
        output.writeDouble(8, blinkGcMainThreadCycleFullAtomicSweepCompact_.getDouble(i));
      }
      for (int i = 0; i < blinkGcCompleteSweep_.size(); i++) {
        output.writeDouble(9, blinkGcCompleteSweep_.getDouble(i));
      }
      for (int i = 0; i < blinkGcMainThreadCycleFullSweepComplete_.size(); i++) {
        output.writeDouble(10, blinkGcMainThreadCycleFullSweepComplete_.getDouble(i));
      }
      for (int i = 0; i < blinkGcIncrementalStart_.size(); i++) {
        output.writeDouble(11, blinkGcIncrementalStart_.getDouble(i));
      }
      for (int i = 0; i < blinkGcMainThreadCycleFullIncrementalMarkStart_.size(); i++) {
        output.writeDouble(12, blinkGcMainThreadCycleFullIncrementalMarkStart_.getDouble(i));
      }
      for (int i = 0; i < blinkGcIncrementalStep_.size(); i++) {
        output.writeDouble(13, blinkGcIncrementalStep_.getDouble(i));
      }
      for (int i = 0; i < blinkGcMainThreadCycleFullIncrementalMarkStep_.size(); i++) {
        output.writeDouble(14, blinkGcMainThreadCycleFullIncrementalMarkStep_.getDouble(i));
      }
      for (int i = 0; i < blinkGcSweepAllocation_.size(); i++) {
        output.writeDouble(15, blinkGcSweepAllocation_.getDouble(i));
      }
      for (int i = 0; i < blinkGcMainThreadCycleFullSweepOnAllocation_.size(); i++) {
        output.writeDouble(16, blinkGcMainThreadCycleFullSweepOnAllocation_.getDouble(i));
      }
      for (int i = 0; i < blinkGcSweepTaskForeground_.size(); i++) {
        output.writeDouble(17, blinkGcSweepTaskForeground_.getDouble(i));
      }
      for (int i = 0; i < blinkGcMainThreadCycleFullSweepIdle_.size(); i++) {
        output.writeDouble(18, blinkGcMainThreadCycleFullSweepIdle_.getDouble(i));
      }
      for (int i = 0; i < blinkGcUnifiedMarkingByV8_.size(); i++) {
        output.writeDouble(19, blinkGcUnifiedMarkingByV8_.getDouble(i));
      }
      for (int i = 0; i < unifiedGcMainThreadCycleFullMarkStep_.size(); i++) {
        output.writeDouble(20, unifiedGcMainThreadCycleFullMarkStep_.getDouble(i));
      }
      for (int i = 0; i < blinkGcAtomicPause_.size(); i++) {
        output.writeDouble(21, blinkGcAtomicPause_.getDouble(i));
      }
      for (int i = 0; i < blinkGcMainThreadCycleFullAtomic_.size(); i++) {
        output.writeDouble(22, blinkGcMainThreadCycleFullAtomic_.getDouble(i));
      }
      for (int i = 0; i < blinkGcAtomicPauseMarkTransitiveClosure_.size(); i++) {
        output.writeDouble(23, blinkGcAtomicPauseMarkTransitiveClosure_.getDouble(i));
      }
      for (int i = 0; i < blinkGcMainThreadCycleFullAtomicMarkTransitiveClosure_.size(); i++) {
        output.writeDouble(24, blinkGcMainThreadCycleFullAtomicMarkTransitiveClosure_.getDouble(i));
      }
      for (int i = 0; i < blinkGcTotal_.size(); i++) {
        output.writeDouble(25, blinkGcTotal_.getDouble(i));
      }
      for (int i = 0; i < blinkGcMainThreadCycleFull_.size(); i++) {
        output.writeDouble(26, blinkGcMainThreadCycleFull_.getDouble(i));
      }
      for (int i = 0; i < blinkGcMarkRoots_.size(); i++) {
        output.writeDouble(27, blinkGcMarkRoots_.getDouble(i));
      }
      for (int i = 0; i < blinkGcMainThreadCycleFullMarkRoots_.size(); i++) {
        output.writeDouble(28, blinkGcMainThreadCycleFullMarkRoots_.getDouble(i));
      }
      for (int i = 0; i < blinkGcMarkTransitiveClosure_.size(); i++) {
        output.writeDouble(29, blinkGcMarkTransitiveClosure_.getDouble(i));
      }
      for (int i = 0; i < blinkGcMainThreadCycleFullMarkTransitiveClosure_.size(); i++) {
        output.writeDouble(30, blinkGcMainThreadCycleFullMarkTransitiveClosure_.getDouble(i));
      }
      for (int i = 0; i < blinkGcMarkForeground_.size(); i++) {
        output.writeDouble(31, blinkGcMarkForeground_.getDouble(i));
      }
      for (int i = 0; i < blinkGcMainThreadCycleFullMark_.size(); i++) {
        output.writeDouble(32, blinkGcMainThreadCycleFullMark_.getDouble(i));
      }
      for (int i = 0; i < blinkGcMarkForegroundForced_.size(); i++) {
        output.writeDouble(33, blinkGcMarkForegroundForced_.getDouble(i));
      }
      for (int i = 0; i < blinkGcMainThreadCycleFullMarkForced_.size(); i++) {
        output.writeDouble(34, blinkGcMainThreadCycleFullMarkForced_.getDouble(i));
      }
      for (int i = 0; i < blinkGcMarkBackground_.size(); i++) {
        output.writeDouble(35, blinkGcMarkBackground_.getDouble(i));
      }
      for (int i = 0; i < blinkGcConcurrentThreadCycleFullMark_.size(); i++) {
        output.writeDouble(36, blinkGcConcurrentThreadCycleFullMark_.getDouble(i));
      }
      for (int i = 0; i < blinkGcSweepForeground_.size(); i++) {
        output.writeDouble(37, blinkGcSweepForeground_.getDouble(i));
      }
      for (int i = 0; i < blinkGcMainThreadCycleFullSweep_.size(); i++) {
        output.writeDouble(38, blinkGcMainThreadCycleFullSweep_.getDouble(i));
      }
      for (int i = 0; i < blinkGcSweepBackground_.size(); i++) {
        output.writeDouble(39, blinkGcSweepBackground_.getDouble(i));
      }
      for (int i = 0; i < blinkGcConcurrentThreadCycleFullSweep_.size(); i++) {
        output.writeDouble(40, blinkGcConcurrentThreadCycleFullSweep_.getDouble(i));
      }
      for (int i = 0; i < unifiedGcTotal_.size(); i++) {
        output.writeDouble(41, unifiedGcTotal_.getDouble(i));
      }
      getUnknownFields().writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      {
        int dataSize = 0;
        dataSize = 8 * getBlinkGcAtomicPauseMarkEpilogueList().size();
        size += dataSize;
        size += 1 * getBlinkGcAtomicPauseMarkEpilogueList().size();
      }
      {
        int dataSize = 0;
        dataSize = 8 * getBlinkGcMainThreadCycleFullAtomicMarkEpilogueList().size();
        size += dataSize;
        size += 1 * getBlinkGcMainThreadCycleFullAtomicMarkEpilogueList().size();
      }
      {
        int dataSize = 0;
        dataSize = 8 * getBlinkGcAtomicPauseMarkPrologueList().size();
        size += dataSize;
        size += 1 * getBlinkGcAtomicPauseMarkPrologueList().size();
      }
      {
        int dataSize = 0;
        dataSize = 8 * getBlinkGcMainThreadCycleFullAtomicMarkPrologueList().size();
        size += dataSize;
        size += 1 * getBlinkGcMainThreadCycleFullAtomicMarkPrologueList().size();
      }
      {
        int dataSize = 0;
        dataSize = 8 * getBlinkGcAtomicPauseMarkRootsList().size();
        size += dataSize;
        size += 1 * getBlinkGcAtomicPauseMarkRootsList().size();
      }
      {
        int dataSize = 0;
        dataSize = 8 * getBlinkGcMainThreadCycleFullAtomicMarkRootsList().size();
        size += dataSize;
        size += 1 * getBlinkGcMainThreadCycleFullAtomicMarkRootsList().size();
      }
      {
        int dataSize = 0;
        dataSize = 8 * getBlinkGcAtomicPauseSweepAndCompactList().size();
        size += dataSize;
        size += 1 * getBlinkGcAtomicPauseSweepAndCompactList().size();
      }
      {
        int dataSize = 0;
        dataSize = 8 * getBlinkGcMainThreadCycleFullAtomicSweepCompactList().size();
        size += dataSize;
        size += 1 * getBlinkGcMainThreadCycleFullAtomicSweepCompactList().size();
      }
      {
        int dataSize = 0;
        dataSize = 8 * getBlinkGcCompleteSweepList().size();
        size += dataSize;
        size += 1 * getBlinkGcCompleteSweepList().size();
      }
      {
        int dataSize = 0;
        dataSize = 8 * getBlinkGcMainThreadCycleFullSweepCompleteList().size();
        size += dataSize;
        size += 1 * getBlinkGcMainThreadCycleFullSweepCompleteList().size();
      }
      {
        int dataSize = 0;
        dataSize = 8 * getBlinkGcIncrementalStartList().size();
        size += dataSize;
        size += 1 * getBlinkGcIncrementalStartList().size();
      }
      {
        int dataSize = 0;
        dataSize = 8 * getBlinkGcMainThreadCycleFullIncrementalMarkStartList().size();
        size += dataSize;
        size += 1 * getBlinkGcMainThreadCycleFullIncrementalMarkStartList().size();
      }
      {
        int dataSize = 0;
        dataSize = 8 * getBlinkGcIncrementalStepList().size();
        size += dataSize;
        size += 1 * getBlinkGcIncrementalStepList().size();
      }
      {
        int dataSize = 0;
        dataSize = 8 * getBlinkGcMainThreadCycleFullIncrementalMarkStepList().size();
        size += dataSize;
        size += 1 * getBlinkGcMainThreadCycleFullIncrementalMarkStepList().size();
      }
      {
        int dataSize = 0;
        dataSize = 8 * getBlinkGcSweepAllocationList().size();
        size += dataSize;
        size += 1 * getBlinkGcSweepAllocationList().size();
      }
      {
        int dataSize = 0;
        dataSize = 8 * getBlinkGcMainThreadCycleFullSweepOnAllocationList().size();
        size += dataSize;
        size += 2 * getBlinkGcMainThreadCycleFullSweepOnAllocationList().size();
      }
      {
        int dataSize = 0;
        dataSize = 8 * getBlinkGcSweepTaskForegroundList().size();
        size += dataSize;
        size += 2 * getBlinkGcSweepTaskForegroundList().size();
      }
      {
        int dataSize = 0;
        dataSize = 8 * getBlinkGcMainThreadCycleFullSweepIdleList().size();
        size += dataSize;
        size += 2 * getBlinkGcMainThreadCycleFullSweepIdleList().size();
      }
      {
        int dataSize = 0;
        dataSize = 8 * getBlinkGcUnifiedMarkingByV8List().size();
        size += dataSize;
        size += 2 * getBlinkGcUnifiedMarkingByV8List().size();
      }
      {
        int dataSize = 0;
        dataSize = 8 * getUnifiedGcMainThreadCycleFullMarkStepList().size();
        size += dataSize;
        size += 2 * getUnifiedGcMainThreadCycleFullMarkStepList().size();
      }
      {
        int dataSize = 0;
        dataSize = 8 * getBlinkGcAtomicPauseList().size();
        size += dataSize;
        size += 2 * getBlinkGcAtomicPauseList().size();
      }
      {
        int dataSize = 0;
        dataSize = 8 * getBlinkGcMainThreadCycleFullAtomicList().size();
        size += dataSize;
        size += 2 * getBlinkGcMainThreadCycleFullAtomicList().size();
      }
      {
        int dataSize = 0;
        dataSize = 8 * getBlinkGcAtomicPauseMarkTransitiveClosureList().size();
        size += dataSize;
        size += 2 * getBlinkGcAtomicPauseMarkTransitiveClosureList().size();
      }
      {
        int dataSize = 0;
        dataSize = 8 * getBlinkGcMainThreadCycleFullAtomicMarkTransitiveClosureList().size();
        size += dataSize;
        size += 2 * getBlinkGcMainThreadCycleFullAtomicMarkTransitiveClosureList().size();
      }
      {
        int dataSize = 0;
        dataSize = 8 * getBlinkGcTotalList().size();
        size += dataSize;
        size += 2 * getBlinkGcTotalList().size();
      }
      {
        int dataSize = 0;
        dataSize = 8 * getBlinkGcMainThreadCycleFullList().size();
        size += dataSize;
        size += 2 * getBlinkGcMainThreadCycleFullList().size();
      }
      {
        int dataSize = 0;
        dataSize = 8 * getBlinkGcMarkRootsList().size();
        size += dataSize;
        size += 2 * getBlinkGcMarkRootsList().size();
      }
      {
        int dataSize = 0;
        dataSize = 8 * getBlinkGcMainThreadCycleFullMarkRootsList().size();
        size += dataSize;
        size += 2 * getBlinkGcMainThreadCycleFullMarkRootsList().size();
      }
      {
        int dataSize = 0;
        dataSize = 8 * getBlinkGcMarkTransitiveClosureList().size();
        size += dataSize;
        size += 2 * getBlinkGcMarkTransitiveClosureList().size();
      }
      {
        int dataSize = 0;
        dataSize = 8 * getBlinkGcMainThreadCycleFullMarkTransitiveClosureList().size();
        size += dataSize;
        size += 2 * getBlinkGcMainThreadCycleFullMarkTransitiveClosureList().size();
      }
      {
        int dataSize = 0;
        dataSize = 8 * getBlinkGcMarkForegroundList().size();
        size += dataSize;
        size += 2 * getBlinkGcMarkForegroundList().size();
      }
      {
        int dataSize = 0;
        dataSize = 8 * getBlinkGcMainThreadCycleFullMarkList().size();
        size += dataSize;
        size += 2 * getBlinkGcMainThreadCycleFullMarkList().size();
      }
      {
        int dataSize = 0;
        dataSize = 8 * getBlinkGcMarkForegroundForcedList().size();
        size += dataSize;
        size += 2 * getBlinkGcMarkForegroundForcedList().size();
      }
      {
        int dataSize = 0;
        dataSize = 8 * getBlinkGcMainThreadCycleFullMarkForcedList().size();
        size += dataSize;
        size += 2 * getBlinkGcMainThreadCycleFullMarkForcedList().size();
      }
      {
        int dataSize = 0;
        dataSize = 8 * getBlinkGcMarkBackgroundList().size();
        size += dataSize;
        size += 2 * getBlinkGcMarkBackgroundList().size();
      }
      {
        int dataSize = 0;
        dataSize = 8 * getBlinkGcConcurrentThreadCycleFullMarkList().size();
        size += dataSize;
        size += 2 * getBlinkGcConcurrentThreadCycleFullMarkList().size();
      }
      {
        int dataSize = 0;
        dataSize = 8 * getBlinkGcSweepForegroundList().size();
        size += dataSize;
        size += 2 * getBlinkGcSweepForegroundList().size();
      }
      {
        int dataSize = 0;
        dataSize = 8 * getBlinkGcMainThreadCycleFullSweepList().size();
        size += dataSize;
        size += 2 * getBlinkGcMainThreadCycleFullSweepList().size();
      }
      {
        int dataSize = 0;
        dataSize = 8 * getBlinkGcSweepBackgroundList().size();
        size += dataSize;
        size += 2 * getBlinkGcSweepBackgroundList().size();
      }
      {
        int dataSize = 0;
        dataSize = 8 * getBlinkGcConcurrentThreadCycleFullSweepList().size();
        size += dataSize;
        size += 2 * getBlinkGcConcurrentThreadCycleFullSweepList().size();
      }
      {
        int dataSize = 0;
        dataSize = 8 * getUnifiedGcTotalList().size();
        size += dataSize;
        size += 2 * getUnifiedGcTotalList().size();
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof perfetto.protos.BlinkGcMetricOuterClass.BlinkGcMetric)) {
        return super.equals(obj);
      }
      perfetto.protos.BlinkGcMetricOuterClass.BlinkGcMetric other = (perfetto.protos.BlinkGcMetricOuterClass.BlinkGcMetric) obj;

      if (!getBlinkGcAtomicPauseMarkEpilogueList()
          .equals(other.getBlinkGcAtomicPauseMarkEpilogueList())) return false;
      if (!getBlinkGcMainThreadCycleFullAtomicMarkEpilogueList()
          .equals(other.getBlinkGcMainThreadCycleFullAtomicMarkEpilogueList())) return false;
      if (!getBlinkGcAtomicPauseMarkPrologueList()
          .equals(other.getBlinkGcAtomicPauseMarkPrologueList())) return false;
      if (!getBlinkGcMainThreadCycleFullAtomicMarkPrologueList()
          .equals(other.getBlinkGcMainThreadCycleFullAtomicMarkPrologueList())) return false;
      if (!getBlinkGcAtomicPauseMarkRootsList()
          .equals(other.getBlinkGcAtomicPauseMarkRootsList())) return false;
      if (!getBlinkGcMainThreadCycleFullAtomicMarkRootsList()
          .equals(other.getBlinkGcMainThreadCycleFullAtomicMarkRootsList())) return false;
      if (!getBlinkGcAtomicPauseSweepAndCompactList()
          .equals(other.getBlinkGcAtomicPauseSweepAndCompactList())) return false;
      if (!getBlinkGcMainThreadCycleFullAtomicSweepCompactList()
          .equals(other.getBlinkGcMainThreadCycleFullAtomicSweepCompactList())) return false;
      if (!getBlinkGcCompleteSweepList()
          .equals(other.getBlinkGcCompleteSweepList())) return false;
      if (!getBlinkGcMainThreadCycleFullSweepCompleteList()
          .equals(other.getBlinkGcMainThreadCycleFullSweepCompleteList())) return false;
      if (!getBlinkGcIncrementalStartList()
          .equals(other.getBlinkGcIncrementalStartList())) return false;
      if (!getBlinkGcMainThreadCycleFullIncrementalMarkStartList()
          .equals(other.getBlinkGcMainThreadCycleFullIncrementalMarkStartList())) return false;
      if (!getBlinkGcIncrementalStepList()
          .equals(other.getBlinkGcIncrementalStepList())) return false;
      if (!getBlinkGcMainThreadCycleFullIncrementalMarkStepList()
          .equals(other.getBlinkGcMainThreadCycleFullIncrementalMarkStepList())) return false;
      if (!getBlinkGcSweepAllocationList()
          .equals(other.getBlinkGcSweepAllocationList())) return false;
      if (!getBlinkGcMainThreadCycleFullSweepOnAllocationList()
          .equals(other.getBlinkGcMainThreadCycleFullSweepOnAllocationList())) return false;
      if (!getBlinkGcSweepTaskForegroundList()
          .equals(other.getBlinkGcSweepTaskForegroundList())) return false;
      if (!getBlinkGcMainThreadCycleFullSweepIdleList()
          .equals(other.getBlinkGcMainThreadCycleFullSweepIdleList())) return false;
      if (!getBlinkGcUnifiedMarkingByV8List()
          .equals(other.getBlinkGcUnifiedMarkingByV8List())) return false;
      if (!getUnifiedGcMainThreadCycleFullMarkStepList()
          .equals(other.getUnifiedGcMainThreadCycleFullMarkStepList())) return false;
      if (!getBlinkGcAtomicPauseList()
          .equals(other.getBlinkGcAtomicPauseList())) return false;
      if (!getBlinkGcMainThreadCycleFullAtomicList()
          .equals(other.getBlinkGcMainThreadCycleFullAtomicList())) return false;
      if (!getBlinkGcAtomicPauseMarkTransitiveClosureList()
          .equals(other.getBlinkGcAtomicPauseMarkTransitiveClosureList())) return false;
      if (!getBlinkGcMainThreadCycleFullAtomicMarkTransitiveClosureList()
          .equals(other.getBlinkGcMainThreadCycleFullAtomicMarkTransitiveClosureList())) return false;
      if (!getBlinkGcTotalList()
          .equals(other.getBlinkGcTotalList())) return false;
      if (!getBlinkGcMainThreadCycleFullList()
          .equals(other.getBlinkGcMainThreadCycleFullList())) return false;
      if (!getBlinkGcMarkRootsList()
          .equals(other.getBlinkGcMarkRootsList())) return false;
      if (!getBlinkGcMainThreadCycleFullMarkRootsList()
          .equals(other.getBlinkGcMainThreadCycleFullMarkRootsList())) return false;
      if (!getBlinkGcMarkTransitiveClosureList()
          .equals(other.getBlinkGcMarkTransitiveClosureList())) return false;
      if (!getBlinkGcMainThreadCycleFullMarkTransitiveClosureList()
          .equals(other.getBlinkGcMainThreadCycleFullMarkTransitiveClosureList())) return false;
      if (!getBlinkGcMarkForegroundList()
          .equals(other.getBlinkGcMarkForegroundList())) return false;
      if (!getBlinkGcMainThreadCycleFullMarkList()
          .equals(other.getBlinkGcMainThreadCycleFullMarkList())) return false;
      if (!getBlinkGcMarkForegroundForcedList()
          .equals(other.getBlinkGcMarkForegroundForcedList())) return false;
      if (!getBlinkGcMainThreadCycleFullMarkForcedList()
          .equals(other.getBlinkGcMainThreadCycleFullMarkForcedList())) return false;
      if (!getBlinkGcMarkBackgroundList()
          .equals(other.getBlinkGcMarkBackgroundList())) return false;
      if (!getBlinkGcConcurrentThreadCycleFullMarkList()
          .equals(other.getBlinkGcConcurrentThreadCycleFullMarkList())) return false;
      if (!getBlinkGcSweepForegroundList()
          .equals(other.getBlinkGcSweepForegroundList())) return false;
      if (!getBlinkGcMainThreadCycleFullSweepList()
          .equals(other.getBlinkGcMainThreadCycleFullSweepList())) return false;
      if (!getBlinkGcSweepBackgroundList()
          .equals(other.getBlinkGcSweepBackgroundList())) return false;
      if (!getBlinkGcConcurrentThreadCycleFullSweepList()
          .equals(other.getBlinkGcConcurrentThreadCycleFullSweepList())) return false;
      if (!getUnifiedGcTotalList()
          .equals(other.getUnifiedGcTotalList())) return false;
      if (!getUnknownFields().equals(other.getUnknownFields())) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      if (getBlinkGcAtomicPauseMarkEpilogueCount() > 0) {
        hash = (37 * hash) + BLINK_GC_ATOMIC_PAUSE_MARK_EPILOGUE_FIELD_NUMBER;
        hash = (53 * hash) + getBlinkGcAtomicPauseMarkEpilogueList().hashCode();
      }
      if (getBlinkGcMainThreadCycleFullAtomicMarkEpilogueCount() > 0) {
        hash = (37 * hash) + BLINK_GC_MAIN_THREAD_CYCLE_FULL_ATOMIC_MARK_EPILOGUE_FIELD_NUMBER;
        hash = (53 * hash) + getBlinkGcMainThreadCycleFullAtomicMarkEpilogueList().hashCode();
      }
      if (getBlinkGcAtomicPauseMarkPrologueCount() > 0) {
        hash = (37 * hash) + BLINK_GC_ATOMIC_PAUSE_MARK_PROLOGUE_FIELD_NUMBER;
        hash = (53 * hash) + getBlinkGcAtomicPauseMarkPrologueList().hashCode();
      }
      if (getBlinkGcMainThreadCycleFullAtomicMarkPrologueCount() > 0) {
        hash = (37 * hash) + BLINK_GC_MAIN_THREAD_CYCLE_FULL_ATOMIC_MARK_PROLOGUE_FIELD_NUMBER;
        hash = (53 * hash) + getBlinkGcMainThreadCycleFullAtomicMarkPrologueList().hashCode();
      }
      if (getBlinkGcAtomicPauseMarkRootsCount() > 0) {
        hash = (37 * hash) + BLINK_GC_ATOMIC_PAUSE_MARK_ROOTS_FIELD_NUMBER;
        hash = (53 * hash) + getBlinkGcAtomicPauseMarkRootsList().hashCode();
      }
      if (getBlinkGcMainThreadCycleFullAtomicMarkRootsCount() > 0) {
        hash = (37 * hash) + BLINK_GC_MAIN_THREAD_CYCLE_FULL_ATOMIC_MARK_ROOTS_FIELD_NUMBER;
        hash = (53 * hash) + getBlinkGcMainThreadCycleFullAtomicMarkRootsList().hashCode();
      }
      if (getBlinkGcAtomicPauseSweepAndCompactCount() > 0) {
        hash = (37 * hash) + BLINK_GC_ATOMIC_PAUSE_SWEEP_AND_COMPACT_FIELD_NUMBER;
        hash = (53 * hash) + getBlinkGcAtomicPauseSweepAndCompactList().hashCode();
      }
      if (getBlinkGcMainThreadCycleFullAtomicSweepCompactCount() > 0) {
        hash = (37 * hash) + BLINK_GC_MAIN_THREAD_CYCLE_FULL_ATOMIC_SWEEP_COMPACT_FIELD_NUMBER;
        hash = (53 * hash) + getBlinkGcMainThreadCycleFullAtomicSweepCompactList().hashCode();
      }
      if (getBlinkGcCompleteSweepCount() > 0) {
        hash = (37 * hash) + BLINK_GC_COMPLETE_SWEEP_FIELD_NUMBER;
        hash = (53 * hash) + getBlinkGcCompleteSweepList().hashCode();
      }
      if (getBlinkGcMainThreadCycleFullSweepCompleteCount() > 0) {
        hash = (37 * hash) + BLINK_GC_MAIN_THREAD_CYCLE_FULL_SWEEP_COMPLETE_FIELD_NUMBER;
        hash = (53 * hash) + getBlinkGcMainThreadCycleFullSweepCompleteList().hashCode();
      }
      if (getBlinkGcIncrementalStartCount() > 0) {
        hash = (37 * hash) + BLINK_GC_INCREMENTAL_START_FIELD_NUMBER;
        hash = (53 * hash) + getBlinkGcIncrementalStartList().hashCode();
      }
      if (getBlinkGcMainThreadCycleFullIncrementalMarkStartCount() > 0) {
        hash = (37 * hash) + BLINK_GC_MAIN_THREAD_CYCLE_FULL_INCREMENTAL_MARK_START_FIELD_NUMBER;
        hash = (53 * hash) + getBlinkGcMainThreadCycleFullIncrementalMarkStartList().hashCode();
      }
      if (getBlinkGcIncrementalStepCount() > 0) {
        hash = (37 * hash) + BLINK_GC_INCREMENTAL_STEP_FIELD_NUMBER;
        hash = (53 * hash) + getBlinkGcIncrementalStepList().hashCode();
      }
      if (getBlinkGcMainThreadCycleFullIncrementalMarkStepCount() > 0) {
        hash = (37 * hash) + BLINK_GC_MAIN_THREAD_CYCLE_FULL_INCREMENTAL_MARK_STEP_FIELD_NUMBER;
        hash = (53 * hash) + getBlinkGcMainThreadCycleFullIncrementalMarkStepList().hashCode();
      }
      if (getBlinkGcSweepAllocationCount() > 0) {
        hash = (37 * hash) + BLINK_GC_SWEEP_ALLOCATION_FIELD_NUMBER;
        hash = (53 * hash) + getBlinkGcSweepAllocationList().hashCode();
      }
      if (getBlinkGcMainThreadCycleFullSweepOnAllocationCount() > 0) {
        hash = (37 * hash) + BLINK_GC_MAIN_THREAD_CYCLE_FULL_SWEEP_ON_ALLOCATION_FIELD_NUMBER;
        hash = (53 * hash) + getBlinkGcMainThreadCycleFullSweepOnAllocationList().hashCode();
      }
      if (getBlinkGcSweepTaskForegroundCount() > 0) {
        hash = (37 * hash) + BLINK_GC_SWEEP_TASK_FOREGROUND_FIELD_NUMBER;
        hash = (53 * hash) + getBlinkGcSweepTaskForegroundList().hashCode();
      }
      if (getBlinkGcMainThreadCycleFullSweepIdleCount() > 0) {
        hash = (37 * hash) + BLINK_GC_MAIN_THREAD_CYCLE_FULL_SWEEP_IDLE_FIELD_NUMBER;
        hash = (53 * hash) + getBlinkGcMainThreadCycleFullSweepIdleList().hashCode();
      }
      if (getBlinkGcUnifiedMarkingByV8Count() > 0) {
        hash = (37 * hash) + BLINK_GC_UNIFIED_MARKING_BY_V8_FIELD_NUMBER;
        hash = (53 * hash) + getBlinkGcUnifiedMarkingByV8List().hashCode();
      }
      if (getUnifiedGcMainThreadCycleFullMarkStepCount() > 0) {
        hash = (37 * hash) + UNIFIED_GC_MAIN_THREAD_CYCLE_FULL_MARK_STEP_FIELD_NUMBER;
        hash = (53 * hash) + getUnifiedGcMainThreadCycleFullMarkStepList().hashCode();
      }
      if (getBlinkGcAtomicPauseCount() > 0) {
        hash = (37 * hash) + BLINK_GC_ATOMIC_PAUSE_FIELD_NUMBER;
        hash = (53 * hash) + getBlinkGcAtomicPauseList().hashCode();
      }
      if (getBlinkGcMainThreadCycleFullAtomicCount() > 0) {
        hash = (37 * hash) + BLINK_GC_MAIN_THREAD_CYCLE_FULL_ATOMIC_FIELD_NUMBER;
        hash = (53 * hash) + getBlinkGcMainThreadCycleFullAtomicList().hashCode();
      }
      if (getBlinkGcAtomicPauseMarkTransitiveClosureCount() > 0) {
        hash = (37 * hash) + BLINK_GC_ATOMIC_PAUSE_MARK_TRANSITIVE_CLOSURE_FIELD_NUMBER;
        hash = (53 * hash) + getBlinkGcAtomicPauseMarkTransitiveClosureList().hashCode();
      }
      if (getBlinkGcMainThreadCycleFullAtomicMarkTransitiveClosureCount() > 0) {
        hash = (37 * hash) + BLINK_GC_MAIN_THREAD_CYCLE_FULL_ATOMIC_MARK_TRANSITIVE_CLOSURE_FIELD_NUMBER;
        hash = (53 * hash) + getBlinkGcMainThreadCycleFullAtomicMarkTransitiveClosureList().hashCode();
      }
      if (getBlinkGcTotalCount() > 0) {
        hash = (37 * hash) + BLINK_GC_TOTAL_FIELD_NUMBER;
        hash = (53 * hash) + getBlinkGcTotalList().hashCode();
      }
      if (getBlinkGcMainThreadCycleFullCount() > 0) {
        hash = (37 * hash) + BLINK_GC_MAIN_THREAD_CYCLE_FULL_FIELD_NUMBER;
        hash = (53 * hash) + getBlinkGcMainThreadCycleFullList().hashCode();
      }
      if (getBlinkGcMarkRootsCount() > 0) {
        hash = (37 * hash) + BLINK_GC_MARK_ROOTS_FIELD_NUMBER;
        hash = (53 * hash) + getBlinkGcMarkRootsList().hashCode();
      }
      if (getBlinkGcMainThreadCycleFullMarkRootsCount() > 0) {
        hash = (37 * hash) + BLINK_GC_MAIN_THREAD_CYCLE_FULL_MARK_ROOTS_FIELD_NUMBER;
        hash = (53 * hash) + getBlinkGcMainThreadCycleFullMarkRootsList().hashCode();
      }
      if (getBlinkGcMarkTransitiveClosureCount() > 0) {
        hash = (37 * hash) + BLINK_GC_MARK_TRANSITIVE_CLOSURE_FIELD_NUMBER;
        hash = (53 * hash) + getBlinkGcMarkTransitiveClosureList().hashCode();
      }
      if (getBlinkGcMainThreadCycleFullMarkTransitiveClosureCount() > 0) {
        hash = (37 * hash) + BLINK_GC_MAIN_THREAD_CYCLE_FULL_MARK_TRANSITIVE_CLOSURE_FIELD_NUMBER;
        hash = (53 * hash) + getBlinkGcMainThreadCycleFullMarkTransitiveClosureList().hashCode();
      }
      if (getBlinkGcMarkForegroundCount() > 0) {
        hash = (37 * hash) + BLINK_GC_MARK_FOREGROUND_FIELD_NUMBER;
        hash = (53 * hash) + getBlinkGcMarkForegroundList().hashCode();
      }
      if (getBlinkGcMainThreadCycleFullMarkCount() > 0) {
        hash = (37 * hash) + BLINK_GC_MAIN_THREAD_CYCLE_FULL_MARK_FIELD_NUMBER;
        hash = (53 * hash) + getBlinkGcMainThreadCycleFullMarkList().hashCode();
      }
      if (getBlinkGcMarkForegroundForcedCount() > 0) {
        hash = (37 * hash) + BLINK_GC_MARK_FOREGROUND_FORCED_FIELD_NUMBER;
        hash = (53 * hash) + getBlinkGcMarkForegroundForcedList().hashCode();
      }
      if (getBlinkGcMainThreadCycleFullMarkForcedCount() > 0) {
        hash = (37 * hash) + BLINK_GC_MAIN_THREAD_CYCLE_FULL_MARK_FORCED_FIELD_NUMBER;
        hash = (53 * hash) + getBlinkGcMainThreadCycleFullMarkForcedList().hashCode();
      }
      if (getBlinkGcMarkBackgroundCount() > 0) {
        hash = (37 * hash) + BLINK_GC_MARK_BACKGROUND_FIELD_NUMBER;
        hash = (53 * hash) + getBlinkGcMarkBackgroundList().hashCode();
      }
      if (getBlinkGcConcurrentThreadCycleFullMarkCount() > 0) {
        hash = (37 * hash) + BLINK_GC_CONCURRENT_THREAD_CYCLE_FULL_MARK_FIELD_NUMBER;
        hash = (53 * hash) + getBlinkGcConcurrentThreadCycleFullMarkList().hashCode();
      }
      if (getBlinkGcSweepForegroundCount() > 0) {
        hash = (37 * hash) + BLINK_GC_SWEEP_FOREGROUND_FIELD_NUMBER;
        hash = (53 * hash) + getBlinkGcSweepForegroundList().hashCode();
      }
      if (getBlinkGcMainThreadCycleFullSweepCount() > 0) {
        hash = (37 * hash) + BLINK_GC_MAIN_THREAD_CYCLE_FULL_SWEEP_FIELD_NUMBER;
        hash = (53 * hash) + getBlinkGcMainThreadCycleFullSweepList().hashCode();
      }
      if (getBlinkGcSweepBackgroundCount() > 0) {
        hash = (37 * hash) + BLINK_GC_SWEEP_BACKGROUND_FIELD_NUMBER;
        hash = (53 * hash) + getBlinkGcSweepBackgroundList().hashCode();
      }
      if (getBlinkGcConcurrentThreadCycleFullSweepCount() > 0) {
        hash = (37 * hash) + BLINK_GC_CONCURRENT_THREAD_CYCLE_FULL_SWEEP_FIELD_NUMBER;
        hash = (53 * hash) + getBlinkGcConcurrentThreadCycleFullSweepList().hashCode();
      }
      if (getUnifiedGcTotalCount() > 0) {
        hash = (37 * hash) + UNIFIED_GC_TOTAL_FIELD_NUMBER;
        hash = (53 * hash) + getUnifiedGcTotalList().hashCode();
      }
      hash = (29 * hash) + getUnknownFields().hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static perfetto.protos.BlinkGcMetricOuterClass.BlinkGcMetric parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static perfetto.protos.BlinkGcMetricOuterClass.BlinkGcMetric parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static perfetto.protos.BlinkGcMetricOuterClass.BlinkGcMetric parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static perfetto.protos.BlinkGcMetricOuterClass.BlinkGcMetric parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static perfetto.protos.BlinkGcMetricOuterClass.BlinkGcMetric parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static perfetto.protos.BlinkGcMetricOuterClass.BlinkGcMetric parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static perfetto.protos.BlinkGcMetricOuterClass.BlinkGcMetric parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static perfetto.protos.BlinkGcMetricOuterClass.BlinkGcMetric parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static perfetto.protos.BlinkGcMetricOuterClass.BlinkGcMetric parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static perfetto.protos.BlinkGcMetricOuterClass.BlinkGcMetric parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static perfetto.protos.BlinkGcMetricOuterClass.BlinkGcMetric parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static perfetto.protos.BlinkGcMetricOuterClass.BlinkGcMetric parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(perfetto.protos.BlinkGcMetricOuterClass.BlinkGcMetric prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code perfetto.protos.BlinkGcMetric}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:perfetto.protos.BlinkGcMetric)
        perfetto.protos.BlinkGcMetricOuterClass.BlinkGcMetricOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return perfetto.protos.BlinkGcMetricOuterClass.internal_static_perfetto_protos_BlinkGcMetric_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return perfetto.protos.BlinkGcMetricOuterClass.internal_static_perfetto_protos_BlinkGcMetric_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                perfetto.protos.BlinkGcMetricOuterClass.BlinkGcMetric.class, perfetto.protos.BlinkGcMetricOuterClass.BlinkGcMetric.Builder.class);
      }

      // Construct using perfetto.protos.BlinkGcMetricOuterClass.BlinkGcMetric.newBuilder()
      private Builder() {

      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);

      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        bitField0_ = 0;
        bitField1_ = 0;
        blinkGcAtomicPauseMarkEpilogue_ = emptyDoubleList();
        blinkGcMainThreadCycleFullAtomicMarkEpilogue_ = emptyDoubleList();
        blinkGcAtomicPauseMarkPrologue_ = emptyDoubleList();
        blinkGcMainThreadCycleFullAtomicMarkPrologue_ = emptyDoubleList();
        blinkGcAtomicPauseMarkRoots_ = emptyDoubleList();
        blinkGcMainThreadCycleFullAtomicMarkRoots_ = emptyDoubleList();
        blinkGcAtomicPauseSweepAndCompact_ = emptyDoubleList();
        blinkGcMainThreadCycleFullAtomicSweepCompact_ = emptyDoubleList();
        blinkGcCompleteSweep_ = emptyDoubleList();
        blinkGcMainThreadCycleFullSweepComplete_ = emptyDoubleList();
        blinkGcIncrementalStart_ = emptyDoubleList();
        blinkGcMainThreadCycleFullIncrementalMarkStart_ = emptyDoubleList();
        blinkGcIncrementalStep_ = emptyDoubleList();
        blinkGcMainThreadCycleFullIncrementalMarkStep_ = emptyDoubleList();
        blinkGcSweepAllocation_ = emptyDoubleList();
        blinkGcMainThreadCycleFullSweepOnAllocation_ = emptyDoubleList();
        blinkGcSweepTaskForeground_ = emptyDoubleList();
        blinkGcMainThreadCycleFullSweepIdle_ = emptyDoubleList();
        blinkGcUnifiedMarkingByV8_ = emptyDoubleList();
        unifiedGcMainThreadCycleFullMarkStep_ = emptyDoubleList();
        blinkGcAtomicPause_ = emptyDoubleList();
        blinkGcMainThreadCycleFullAtomic_ = emptyDoubleList();
        blinkGcAtomicPauseMarkTransitiveClosure_ = emptyDoubleList();
        blinkGcMainThreadCycleFullAtomicMarkTransitiveClosure_ = emptyDoubleList();
        blinkGcTotal_ = emptyDoubleList();
        blinkGcMainThreadCycleFull_ = emptyDoubleList();
        blinkGcMarkRoots_ = emptyDoubleList();
        blinkGcMainThreadCycleFullMarkRoots_ = emptyDoubleList();
        blinkGcMarkTransitiveClosure_ = emptyDoubleList();
        blinkGcMainThreadCycleFullMarkTransitiveClosure_ = emptyDoubleList();
        blinkGcMarkForeground_ = emptyDoubleList();
        blinkGcMainThreadCycleFullMark_ = emptyDoubleList();
        blinkGcMarkForegroundForced_ = emptyDoubleList();
        blinkGcMainThreadCycleFullMarkForced_ = emptyDoubleList();
        blinkGcMarkBackground_ = emptyDoubleList();
        blinkGcConcurrentThreadCycleFullMark_ = emptyDoubleList();
        blinkGcSweepForeground_ = emptyDoubleList();
        blinkGcMainThreadCycleFullSweep_ = emptyDoubleList();
        blinkGcSweepBackground_ = emptyDoubleList();
        blinkGcConcurrentThreadCycleFullSweep_ = emptyDoubleList();
        unifiedGcTotal_ = emptyDoubleList();
        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return perfetto.protos.BlinkGcMetricOuterClass.internal_static_perfetto_protos_BlinkGcMetric_descriptor;
      }

      @java.lang.Override
      public perfetto.protos.BlinkGcMetricOuterClass.BlinkGcMetric getDefaultInstanceForType() {
        return perfetto.protos.BlinkGcMetricOuterClass.BlinkGcMetric.getDefaultInstance();
      }

      @java.lang.Override
      public perfetto.protos.BlinkGcMetricOuterClass.BlinkGcMetric build() {
        perfetto.protos.BlinkGcMetricOuterClass.BlinkGcMetric result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public perfetto.protos.BlinkGcMetricOuterClass.BlinkGcMetric buildPartial() {
        perfetto.protos.BlinkGcMetricOuterClass.BlinkGcMetric result = new perfetto.protos.BlinkGcMetricOuterClass.BlinkGcMetric(this);
        buildPartialRepeatedFields(result);
        if (bitField0_ != 0) { buildPartial0(result); }
        if (bitField1_ != 0) { buildPartial1(result); }
        onBuilt();
        return result;
      }

      private void buildPartialRepeatedFields(perfetto.protos.BlinkGcMetricOuterClass.BlinkGcMetric result) {
        if (((bitField0_ & 0x00000001) != 0)) {
          blinkGcAtomicPauseMarkEpilogue_.makeImmutable();
          bitField0_ = (bitField0_ & ~0x00000001);
        }
        result.blinkGcAtomicPauseMarkEpilogue_ = blinkGcAtomicPauseMarkEpilogue_;
        if (((bitField0_ & 0x00000002) != 0)) {
          blinkGcMainThreadCycleFullAtomicMarkEpilogue_.makeImmutable();
          bitField0_ = (bitField0_ & ~0x00000002);
        }
        result.blinkGcMainThreadCycleFullAtomicMarkEpilogue_ = blinkGcMainThreadCycleFullAtomicMarkEpilogue_;
        if (((bitField0_ & 0x00000004) != 0)) {
          blinkGcAtomicPauseMarkPrologue_.makeImmutable();
          bitField0_ = (bitField0_ & ~0x00000004);
        }
        result.blinkGcAtomicPauseMarkPrologue_ = blinkGcAtomicPauseMarkPrologue_;
        if (((bitField0_ & 0x00000008) != 0)) {
          blinkGcMainThreadCycleFullAtomicMarkPrologue_.makeImmutable();
          bitField0_ = (bitField0_ & ~0x00000008);
        }
        result.blinkGcMainThreadCycleFullAtomicMarkPrologue_ = blinkGcMainThreadCycleFullAtomicMarkPrologue_;
        if (((bitField0_ & 0x00000010) != 0)) {
          blinkGcAtomicPauseMarkRoots_.makeImmutable();
          bitField0_ = (bitField0_ & ~0x00000010);
        }
        result.blinkGcAtomicPauseMarkRoots_ = blinkGcAtomicPauseMarkRoots_;
        if (((bitField0_ & 0x00000020) != 0)) {
          blinkGcMainThreadCycleFullAtomicMarkRoots_.makeImmutable();
          bitField0_ = (bitField0_ & ~0x00000020);
        }
        result.blinkGcMainThreadCycleFullAtomicMarkRoots_ = blinkGcMainThreadCycleFullAtomicMarkRoots_;
        if (((bitField0_ & 0x00000040) != 0)) {
          blinkGcAtomicPauseSweepAndCompact_.makeImmutable();
          bitField0_ = (bitField0_ & ~0x00000040);
        }
        result.blinkGcAtomicPauseSweepAndCompact_ = blinkGcAtomicPauseSweepAndCompact_;
        if (((bitField0_ & 0x00000080) != 0)) {
          blinkGcMainThreadCycleFullAtomicSweepCompact_.makeImmutable();
          bitField0_ = (bitField0_ & ~0x00000080);
        }
        result.blinkGcMainThreadCycleFullAtomicSweepCompact_ = blinkGcMainThreadCycleFullAtomicSweepCompact_;
        if (((bitField0_ & 0x00000100) != 0)) {
          blinkGcCompleteSweep_.makeImmutable();
          bitField0_ = (bitField0_ & ~0x00000100);
        }
        result.blinkGcCompleteSweep_ = blinkGcCompleteSweep_;
        if (((bitField0_ & 0x00000200) != 0)) {
          blinkGcMainThreadCycleFullSweepComplete_.makeImmutable();
          bitField0_ = (bitField0_ & ~0x00000200);
        }
        result.blinkGcMainThreadCycleFullSweepComplete_ = blinkGcMainThreadCycleFullSweepComplete_;
        if (((bitField0_ & 0x00000400) != 0)) {
          blinkGcIncrementalStart_.makeImmutable();
          bitField0_ = (bitField0_ & ~0x00000400);
        }
        result.blinkGcIncrementalStart_ = blinkGcIncrementalStart_;
        if (((bitField0_ & 0x00000800) != 0)) {
          blinkGcMainThreadCycleFullIncrementalMarkStart_.makeImmutable();
          bitField0_ = (bitField0_ & ~0x00000800);
        }
        result.blinkGcMainThreadCycleFullIncrementalMarkStart_ = blinkGcMainThreadCycleFullIncrementalMarkStart_;
        if (((bitField0_ & 0x00001000) != 0)) {
          blinkGcIncrementalStep_.makeImmutable();
          bitField0_ = (bitField0_ & ~0x00001000);
        }
        result.blinkGcIncrementalStep_ = blinkGcIncrementalStep_;
        if (((bitField0_ & 0x00002000) != 0)) {
          blinkGcMainThreadCycleFullIncrementalMarkStep_.makeImmutable();
          bitField0_ = (bitField0_ & ~0x00002000);
        }
        result.blinkGcMainThreadCycleFullIncrementalMarkStep_ = blinkGcMainThreadCycleFullIncrementalMarkStep_;
        if (((bitField0_ & 0x00004000) != 0)) {
          blinkGcSweepAllocation_.makeImmutable();
          bitField0_ = (bitField0_ & ~0x00004000);
        }
        result.blinkGcSweepAllocation_ = blinkGcSweepAllocation_;
        if (((bitField0_ & 0x00008000) != 0)) {
          blinkGcMainThreadCycleFullSweepOnAllocation_.makeImmutable();
          bitField0_ = (bitField0_ & ~0x00008000);
        }
        result.blinkGcMainThreadCycleFullSweepOnAllocation_ = blinkGcMainThreadCycleFullSweepOnAllocation_;
        if (((bitField0_ & 0x00010000) != 0)) {
          blinkGcSweepTaskForeground_.makeImmutable();
          bitField0_ = (bitField0_ & ~0x00010000);
        }
        result.blinkGcSweepTaskForeground_ = blinkGcSweepTaskForeground_;
        if (((bitField0_ & 0x00020000) != 0)) {
          blinkGcMainThreadCycleFullSweepIdle_.makeImmutable();
          bitField0_ = (bitField0_ & ~0x00020000);
        }
        result.blinkGcMainThreadCycleFullSweepIdle_ = blinkGcMainThreadCycleFullSweepIdle_;
        if (((bitField0_ & 0x00040000) != 0)) {
          blinkGcUnifiedMarkingByV8_.makeImmutable();
          bitField0_ = (bitField0_ & ~0x00040000);
        }
        result.blinkGcUnifiedMarkingByV8_ = blinkGcUnifiedMarkingByV8_;
        if (((bitField0_ & 0x00080000) != 0)) {
          unifiedGcMainThreadCycleFullMarkStep_.makeImmutable();
          bitField0_ = (bitField0_ & ~0x00080000);
        }
        result.unifiedGcMainThreadCycleFullMarkStep_ = unifiedGcMainThreadCycleFullMarkStep_;
        if (((bitField0_ & 0x00100000) != 0)) {
          blinkGcAtomicPause_.makeImmutable();
          bitField0_ = (bitField0_ & ~0x00100000);
        }
        result.blinkGcAtomicPause_ = blinkGcAtomicPause_;
        if (((bitField0_ & 0x00200000) != 0)) {
          blinkGcMainThreadCycleFullAtomic_.makeImmutable();
          bitField0_ = (bitField0_ & ~0x00200000);
        }
        result.blinkGcMainThreadCycleFullAtomic_ = blinkGcMainThreadCycleFullAtomic_;
        if (((bitField0_ & 0x00400000) != 0)) {
          blinkGcAtomicPauseMarkTransitiveClosure_.makeImmutable();
          bitField0_ = (bitField0_ & ~0x00400000);
        }
        result.blinkGcAtomicPauseMarkTransitiveClosure_ = blinkGcAtomicPauseMarkTransitiveClosure_;
        if (((bitField0_ & 0x00800000) != 0)) {
          blinkGcMainThreadCycleFullAtomicMarkTransitiveClosure_.makeImmutable();
          bitField0_ = (bitField0_ & ~0x00800000);
        }
        result.blinkGcMainThreadCycleFullAtomicMarkTransitiveClosure_ = blinkGcMainThreadCycleFullAtomicMarkTransitiveClosure_;
        if (((bitField0_ & 0x01000000) != 0)) {
          blinkGcTotal_.makeImmutable();
          bitField0_ = (bitField0_ & ~0x01000000);
        }
        result.blinkGcTotal_ = blinkGcTotal_;
        if (((bitField0_ & 0x02000000) != 0)) {
          blinkGcMainThreadCycleFull_.makeImmutable();
          bitField0_ = (bitField0_ & ~0x02000000);
        }
        result.blinkGcMainThreadCycleFull_ = blinkGcMainThreadCycleFull_;
        if (((bitField0_ & 0x04000000) != 0)) {
          blinkGcMarkRoots_.makeImmutable();
          bitField0_ = (bitField0_ & ~0x04000000);
        }
        result.blinkGcMarkRoots_ = blinkGcMarkRoots_;
        if (((bitField0_ & 0x08000000) != 0)) {
          blinkGcMainThreadCycleFullMarkRoots_.makeImmutable();
          bitField0_ = (bitField0_ & ~0x08000000);
        }
        result.blinkGcMainThreadCycleFullMarkRoots_ = blinkGcMainThreadCycleFullMarkRoots_;
        if (((bitField0_ & 0x10000000) != 0)) {
          blinkGcMarkTransitiveClosure_.makeImmutable();
          bitField0_ = (bitField0_ & ~0x10000000);
        }
        result.blinkGcMarkTransitiveClosure_ = blinkGcMarkTransitiveClosure_;
        if (((bitField0_ & 0x20000000) != 0)) {
          blinkGcMainThreadCycleFullMarkTransitiveClosure_.makeImmutable();
          bitField0_ = (bitField0_ & ~0x20000000);
        }
        result.blinkGcMainThreadCycleFullMarkTransitiveClosure_ = blinkGcMainThreadCycleFullMarkTransitiveClosure_;
        if (((bitField0_ & 0x40000000) != 0)) {
          blinkGcMarkForeground_.makeImmutable();
          bitField0_ = (bitField0_ & ~0x40000000);
        }
        result.blinkGcMarkForeground_ = blinkGcMarkForeground_;
        if (((bitField0_ & 0x80000000) != 0)) {
          blinkGcMainThreadCycleFullMark_.makeImmutable();
          bitField0_ = (bitField0_ & ~0x80000000);
        }
        result.blinkGcMainThreadCycleFullMark_ = blinkGcMainThreadCycleFullMark_;
        if (((bitField1_ & 0x00000001) != 0)) {
          blinkGcMarkForegroundForced_.makeImmutable();
          bitField1_ = (bitField1_ & ~0x00000001);
        }
        result.blinkGcMarkForegroundForced_ = blinkGcMarkForegroundForced_;
        if (((bitField1_ & 0x00000002) != 0)) {
          blinkGcMainThreadCycleFullMarkForced_.makeImmutable();
          bitField1_ = (bitField1_ & ~0x00000002);
        }
        result.blinkGcMainThreadCycleFullMarkForced_ = blinkGcMainThreadCycleFullMarkForced_;
        if (((bitField1_ & 0x00000004) != 0)) {
          blinkGcMarkBackground_.makeImmutable();
          bitField1_ = (bitField1_ & ~0x00000004);
        }
        result.blinkGcMarkBackground_ = blinkGcMarkBackground_;
        if (((bitField1_ & 0x00000008) != 0)) {
          blinkGcConcurrentThreadCycleFullMark_.makeImmutable();
          bitField1_ = (bitField1_ & ~0x00000008);
        }
        result.blinkGcConcurrentThreadCycleFullMark_ = blinkGcConcurrentThreadCycleFullMark_;
        if (((bitField1_ & 0x00000010) != 0)) {
          blinkGcSweepForeground_.makeImmutable();
          bitField1_ = (bitField1_ & ~0x00000010);
        }
        result.blinkGcSweepForeground_ = blinkGcSweepForeground_;
        if (((bitField1_ & 0x00000020) != 0)) {
          blinkGcMainThreadCycleFullSweep_.makeImmutable();
          bitField1_ = (bitField1_ & ~0x00000020);
        }
        result.blinkGcMainThreadCycleFullSweep_ = blinkGcMainThreadCycleFullSweep_;
        if (((bitField1_ & 0x00000040) != 0)) {
          blinkGcSweepBackground_.makeImmutable();
          bitField1_ = (bitField1_ & ~0x00000040);
        }
        result.blinkGcSweepBackground_ = blinkGcSweepBackground_;
        if (((bitField1_ & 0x00000080) != 0)) {
          blinkGcConcurrentThreadCycleFullSweep_.makeImmutable();
          bitField1_ = (bitField1_ & ~0x00000080);
        }
        result.blinkGcConcurrentThreadCycleFullSweep_ = blinkGcConcurrentThreadCycleFullSweep_;
        if (((bitField1_ & 0x00000100) != 0)) {
          unifiedGcTotal_.makeImmutable();
          bitField1_ = (bitField1_ & ~0x00000100);
        }
        result.unifiedGcTotal_ = unifiedGcTotal_;
      }

      private void buildPartial0(perfetto.protos.BlinkGcMetricOuterClass.BlinkGcMetric result) {
        int from_bitField0_ = bitField0_;
      }

      private void buildPartial1(perfetto.protos.BlinkGcMetricOuterClass.BlinkGcMetric result) {
        int from_bitField1_ = bitField1_;
      }

      @java.lang.Override
      public Builder clone() {
        return super.clone();
      }
      @java.lang.Override
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.setField(field, value);
      }
      @java.lang.Override
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return super.clearField(field);
      }
      @java.lang.Override
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return super.clearOneof(oneof);
      }
      @java.lang.Override
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, java.lang.Object value) {
        return super.setRepeatedField(field, index, value);
      }
      @java.lang.Override
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.addRepeatedField(field, value);
      }
      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof perfetto.protos.BlinkGcMetricOuterClass.BlinkGcMetric) {
          return mergeFrom((perfetto.protos.BlinkGcMetricOuterClass.BlinkGcMetric)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(perfetto.protos.BlinkGcMetricOuterClass.BlinkGcMetric other) {
        if (other == perfetto.protos.BlinkGcMetricOuterClass.BlinkGcMetric.getDefaultInstance()) return this;
        if (!other.blinkGcAtomicPauseMarkEpilogue_.isEmpty()) {
          if (blinkGcAtomicPauseMarkEpilogue_.isEmpty()) {
            blinkGcAtomicPauseMarkEpilogue_ = other.blinkGcAtomicPauseMarkEpilogue_;
            bitField0_ = (bitField0_ & ~0x00000001);
          } else {
            ensureBlinkGcAtomicPauseMarkEpilogueIsMutable();
            blinkGcAtomicPauseMarkEpilogue_.addAll(other.blinkGcAtomicPauseMarkEpilogue_);
          }
          onChanged();
        }
        if (!other.blinkGcMainThreadCycleFullAtomicMarkEpilogue_.isEmpty()) {
          if (blinkGcMainThreadCycleFullAtomicMarkEpilogue_.isEmpty()) {
            blinkGcMainThreadCycleFullAtomicMarkEpilogue_ = other.blinkGcMainThreadCycleFullAtomicMarkEpilogue_;
            bitField0_ = (bitField0_ & ~0x00000002);
          } else {
            ensureBlinkGcMainThreadCycleFullAtomicMarkEpilogueIsMutable();
            blinkGcMainThreadCycleFullAtomicMarkEpilogue_.addAll(other.blinkGcMainThreadCycleFullAtomicMarkEpilogue_);
          }
          onChanged();
        }
        if (!other.blinkGcAtomicPauseMarkPrologue_.isEmpty()) {
          if (blinkGcAtomicPauseMarkPrologue_.isEmpty()) {
            blinkGcAtomicPauseMarkPrologue_ = other.blinkGcAtomicPauseMarkPrologue_;
            bitField0_ = (bitField0_ & ~0x00000004);
          } else {
            ensureBlinkGcAtomicPauseMarkPrologueIsMutable();
            blinkGcAtomicPauseMarkPrologue_.addAll(other.blinkGcAtomicPauseMarkPrologue_);
          }
          onChanged();
        }
        if (!other.blinkGcMainThreadCycleFullAtomicMarkPrologue_.isEmpty()) {
          if (blinkGcMainThreadCycleFullAtomicMarkPrologue_.isEmpty()) {
            blinkGcMainThreadCycleFullAtomicMarkPrologue_ = other.blinkGcMainThreadCycleFullAtomicMarkPrologue_;
            bitField0_ = (bitField0_ & ~0x00000008);
          } else {
            ensureBlinkGcMainThreadCycleFullAtomicMarkPrologueIsMutable();
            blinkGcMainThreadCycleFullAtomicMarkPrologue_.addAll(other.blinkGcMainThreadCycleFullAtomicMarkPrologue_);
          }
          onChanged();
        }
        if (!other.blinkGcAtomicPauseMarkRoots_.isEmpty()) {
          if (blinkGcAtomicPauseMarkRoots_.isEmpty()) {
            blinkGcAtomicPauseMarkRoots_ = other.blinkGcAtomicPauseMarkRoots_;
            bitField0_ = (bitField0_ & ~0x00000010);
          } else {
            ensureBlinkGcAtomicPauseMarkRootsIsMutable();
            blinkGcAtomicPauseMarkRoots_.addAll(other.blinkGcAtomicPauseMarkRoots_);
          }
          onChanged();
        }
        if (!other.blinkGcMainThreadCycleFullAtomicMarkRoots_.isEmpty()) {
          if (blinkGcMainThreadCycleFullAtomicMarkRoots_.isEmpty()) {
            blinkGcMainThreadCycleFullAtomicMarkRoots_ = other.blinkGcMainThreadCycleFullAtomicMarkRoots_;
            bitField0_ = (bitField0_ & ~0x00000020);
          } else {
            ensureBlinkGcMainThreadCycleFullAtomicMarkRootsIsMutable();
            blinkGcMainThreadCycleFullAtomicMarkRoots_.addAll(other.blinkGcMainThreadCycleFullAtomicMarkRoots_);
          }
          onChanged();
        }
        if (!other.blinkGcAtomicPauseSweepAndCompact_.isEmpty()) {
          if (blinkGcAtomicPauseSweepAndCompact_.isEmpty()) {
            blinkGcAtomicPauseSweepAndCompact_ = other.blinkGcAtomicPauseSweepAndCompact_;
            bitField0_ = (bitField0_ & ~0x00000040);
          } else {
            ensureBlinkGcAtomicPauseSweepAndCompactIsMutable();
            blinkGcAtomicPauseSweepAndCompact_.addAll(other.blinkGcAtomicPauseSweepAndCompact_);
          }
          onChanged();
        }
        if (!other.blinkGcMainThreadCycleFullAtomicSweepCompact_.isEmpty()) {
          if (blinkGcMainThreadCycleFullAtomicSweepCompact_.isEmpty()) {
            blinkGcMainThreadCycleFullAtomicSweepCompact_ = other.blinkGcMainThreadCycleFullAtomicSweepCompact_;
            bitField0_ = (bitField0_ & ~0x00000080);
          } else {
            ensureBlinkGcMainThreadCycleFullAtomicSweepCompactIsMutable();
            blinkGcMainThreadCycleFullAtomicSweepCompact_.addAll(other.blinkGcMainThreadCycleFullAtomicSweepCompact_);
          }
          onChanged();
        }
        if (!other.blinkGcCompleteSweep_.isEmpty()) {
          if (blinkGcCompleteSweep_.isEmpty()) {
            blinkGcCompleteSweep_ = other.blinkGcCompleteSweep_;
            bitField0_ = (bitField0_ & ~0x00000100);
          } else {
            ensureBlinkGcCompleteSweepIsMutable();
            blinkGcCompleteSweep_.addAll(other.blinkGcCompleteSweep_);
          }
          onChanged();
        }
        if (!other.blinkGcMainThreadCycleFullSweepComplete_.isEmpty()) {
          if (blinkGcMainThreadCycleFullSweepComplete_.isEmpty()) {
            blinkGcMainThreadCycleFullSweepComplete_ = other.blinkGcMainThreadCycleFullSweepComplete_;
            bitField0_ = (bitField0_ & ~0x00000200);
          } else {
            ensureBlinkGcMainThreadCycleFullSweepCompleteIsMutable();
            blinkGcMainThreadCycleFullSweepComplete_.addAll(other.blinkGcMainThreadCycleFullSweepComplete_);
          }
          onChanged();
        }
        if (!other.blinkGcIncrementalStart_.isEmpty()) {
          if (blinkGcIncrementalStart_.isEmpty()) {
            blinkGcIncrementalStart_ = other.blinkGcIncrementalStart_;
            bitField0_ = (bitField0_ & ~0x00000400);
          } else {
            ensureBlinkGcIncrementalStartIsMutable();
            blinkGcIncrementalStart_.addAll(other.blinkGcIncrementalStart_);
          }
          onChanged();
        }
        if (!other.blinkGcMainThreadCycleFullIncrementalMarkStart_.isEmpty()) {
          if (blinkGcMainThreadCycleFullIncrementalMarkStart_.isEmpty()) {
            blinkGcMainThreadCycleFullIncrementalMarkStart_ = other.blinkGcMainThreadCycleFullIncrementalMarkStart_;
            bitField0_ = (bitField0_ & ~0x00000800);
          } else {
            ensureBlinkGcMainThreadCycleFullIncrementalMarkStartIsMutable();
            blinkGcMainThreadCycleFullIncrementalMarkStart_.addAll(other.blinkGcMainThreadCycleFullIncrementalMarkStart_);
          }
          onChanged();
        }
        if (!other.blinkGcIncrementalStep_.isEmpty()) {
          if (blinkGcIncrementalStep_.isEmpty()) {
            blinkGcIncrementalStep_ = other.blinkGcIncrementalStep_;
            bitField0_ = (bitField0_ & ~0x00001000);
          } else {
            ensureBlinkGcIncrementalStepIsMutable();
            blinkGcIncrementalStep_.addAll(other.blinkGcIncrementalStep_);
          }
          onChanged();
        }
        if (!other.blinkGcMainThreadCycleFullIncrementalMarkStep_.isEmpty()) {
          if (blinkGcMainThreadCycleFullIncrementalMarkStep_.isEmpty()) {
            blinkGcMainThreadCycleFullIncrementalMarkStep_ = other.blinkGcMainThreadCycleFullIncrementalMarkStep_;
            bitField0_ = (bitField0_ & ~0x00002000);
          } else {
            ensureBlinkGcMainThreadCycleFullIncrementalMarkStepIsMutable();
            blinkGcMainThreadCycleFullIncrementalMarkStep_.addAll(other.blinkGcMainThreadCycleFullIncrementalMarkStep_);
          }
          onChanged();
        }
        if (!other.blinkGcSweepAllocation_.isEmpty()) {
          if (blinkGcSweepAllocation_.isEmpty()) {
            blinkGcSweepAllocation_ = other.blinkGcSweepAllocation_;
            bitField0_ = (bitField0_ & ~0x00004000);
          } else {
            ensureBlinkGcSweepAllocationIsMutable();
            blinkGcSweepAllocation_.addAll(other.blinkGcSweepAllocation_);
          }
          onChanged();
        }
        if (!other.blinkGcMainThreadCycleFullSweepOnAllocation_.isEmpty()) {
          if (blinkGcMainThreadCycleFullSweepOnAllocation_.isEmpty()) {
            blinkGcMainThreadCycleFullSweepOnAllocation_ = other.blinkGcMainThreadCycleFullSweepOnAllocation_;
            bitField0_ = (bitField0_ & ~0x00008000);
          } else {
            ensureBlinkGcMainThreadCycleFullSweepOnAllocationIsMutable();
            blinkGcMainThreadCycleFullSweepOnAllocation_.addAll(other.blinkGcMainThreadCycleFullSweepOnAllocation_);
          }
          onChanged();
        }
        if (!other.blinkGcSweepTaskForeground_.isEmpty()) {
          if (blinkGcSweepTaskForeground_.isEmpty()) {
            blinkGcSweepTaskForeground_ = other.blinkGcSweepTaskForeground_;
            bitField0_ = (bitField0_ & ~0x00010000);
          } else {
            ensureBlinkGcSweepTaskForegroundIsMutable();
            blinkGcSweepTaskForeground_.addAll(other.blinkGcSweepTaskForeground_);
          }
          onChanged();
        }
        if (!other.blinkGcMainThreadCycleFullSweepIdle_.isEmpty()) {
          if (blinkGcMainThreadCycleFullSweepIdle_.isEmpty()) {
            blinkGcMainThreadCycleFullSweepIdle_ = other.blinkGcMainThreadCycleFullSweepIdle_;
            bitField0_ = (bitField0_ & ~0x00020000);
          } else {
            ensureBlinkGcMainThreadCycleFullSweepIdleIsMutable();
            blinkGcMainThreadCycleFullSweepIdle_.addAll(other.blinkGcMainThreadCycleFullSweepIdle_);
          }
          onChanged();
        }
        if (!other.blinkGcUnifiedMarkingByV8_.isEmpty()) {
          if (blinkGcUnifiedMarkingByV8_.isEmpty()) {
            blinkGcUnifiedMarkingByV8_ = other.blinkGcUnifiedMarkingByV8_;
            bitField0_ = (bitField0_ & ~0x00040000);
          } else {
            ensureBlinkGcUnifiedMarkingByV8IsMutable();
            blinkGcUnifiedMarkingByV8_.addAll(other.blinkGcUnifiedMarkingByV8_);
          }
          onChanged();
        }
        if (!other.unifiedGcMainThreadCycleFullMarkStep_.isEmpty()) {
          if (unifiedGcMainThreadCycleFullMarkStep_.isEmpty()) {
            unifiedGcMainThreadCycleFullMarkStep_ = other.unifiedGcMainThreadCycleFullMarkStep_;
            bitField0_ = (bitField0_ & ~0x00080000);
          } else {
            ensureUnifiedGcMainThreadCycleFullMarkStepIsMutable();
            unifiedGcMainThreadCycleFullMarkStep_.addAll(other.unifiedGcMainThreadCycleFullMarkStep_);
          }
          onChanged();
        }
        if (!other.blinkGcAtomicPause_.isEmpty()) {
          if (blinkGcAtomicPause_.isEmpty()) {
            blinkGcAtomicPause_ = other.blinkGcAtomicPause_;
            bitField0_ = (bitField0_ & ~0x00100000);
          } else {
            ensureBlinkGcAtomicPauseIsMutable();
            blinkGcAtomicPause_.addAll(other.blinkGcAtomicPause_);
          }
          onChanged();
        }
        if (!other.blinkGcMainThreadCycleFullAtomic_.isEmpty()) {
          if (blinkGcMainThreadCycleFullAtomic_.isEmpty()) {
            blinkGcMainThreadCycleFullAtomic_ = other.blinkGcMainThreadCycleFullAtomic_;
            bitField0_ = (bitField0_ & ~0x00200000);
          } else {
            ensureBlinkGcMainThreadCycleFullAtomicIsMutable();
            blinkGcMainThreadCycleFullAtomic_.addAll(other.blinkGcMainThreadCycleFullAtomic_);
          }
          onChanged();
        }
        if (!other.blinkGcAtomicPauseMarkTransitiveClosure_.isEmpty()) {
          if (blinkGcAtomicPauseMarkTransitiveClosure_.isEmpty()) {
            blinkGcAtomicPauseMarkTransitiveClosure_ = other.blinkGcAtomicPauseMarkTransitiveClosure_;
            bitField0_ = (bitField0_ & ~0x00400000);
          } else {
            ensureBlinkGcAtomicPauseMarkTransitiveClosureIsMutable();
            blinkGcAtomicPauseMarkTransitiveClosure_.addAll(other.blinkGcAtomicPauseMarkTransitiveClosure_);
          }
          onChanged();
        }
        if (!other.blinkGcMainThreadCycleFullAtomicMarkTransitiveClosure_.isEmpty()) {
          if (blinkGcMainThreadCycleFullAtomicMarkTransitiveClosure_.isEmpty()) {
            blinkGcMainThreadCycleFullAtomicMarkTransitiveClosure_ = other.blinkGcMainThreadCycleFullAtomicMarkTransitiveClosure_;
            bitField0_ = (bitField0_ & ~0x00800000);
          } else {
            ensureBlinkGcMainThreadCycleFullAtomicMarkTransitiveClosureIsMutable();
            blinkGcMainThreadCycleFullAtomicMarkTransitiveClosure_.addAll(other.blinkGcMainThreadCycleFullAtomicMarkTransitiveClosure_);
          }
          onChanged();
        }
        if (!other.blinkGcTotal_.isEmpty()) {
          if (blinkGcTotal_.isEmpty()) {
            blinkGcTotal_ = other.blinkGcTotal_;
            bitField0_ = (bitField0_ & ~0x01000000);
          } else {
            ensureBlinkGcTotalIsMutable();
            blinkGcTotal_.addAll(other.blinkGcTotal_);
          }
          onChanged();
        }
        if (!other.blinkGcMainThreadCycleFull_.isEmpty()) {
          if (blinkGcMainThreadCycleFull_.isEmpty()) {
            blinkGcMainThreadCycleFull_ = other.blinkGcMainThreadCycleFull_;
            bitField0_ = (bitField0_ & ~0x02000000);
          } else {
            ensureBlinkGcMainThreadCycleFullIsMutable();
            blinkGcMainThreadCycleFull_.addAll(other.blinkGcMainThreadCycleFull_);
          }
          onChanged();
        }
        if (!other.blinkGcMarkRoots_.isEmpty()) {
          if (blinkGcMarkRoots_.isEmpty()) {
            blinkGcMarkRoots_ = other.blinkGcMarkRoots_;
            bitField0_ = (bitField0_ & ~0x04000000);
          } else {
            ensureBlinkGcMarkRootsIsMutable();
            blinkGcMarkRoots_.addAll(other.blinkGcMarkRoots_);
          }
          onChanged();
        }
        if (!other.blinkGcMainThreadCycleFullMarkRoots_.isEmpty()) {
          if (blinkGcMainThreadCycleFullMarkRoots_.isEmpty()) {
            blinkGcMainThreadCycleFullMarkRoots_ = other.blinkGcMainThreadCycleFullMarkRoots_;
            bitField0_ = (bitField0_ & ~0x08000000);
          } else {
            ensureBlinkGcMainThreadCycleFullMarkRootsIsMutable();
            blinkGcMainThreadCycleFullMarkRoots_.addAll(other.blinkGcMainThreadCycleFullMarkRoots_);
          }
          onChanged();
        }
        if (!other.blinkGcMarkTransitiveClosure_.isEmpty()) {
          if (blinkGcMarkTransitiveClosure_.isEmpty()) {
            blinkGcMarkTransitiveClosure_ = other.blinkGcMarkTransitiveClosure_;
            bitField0_ = (bitField0_ & ~0x10000000);
          } else {
            ensureBlinkGcMarkTransitiveClosureIsMutable();
            blinkGcMarkTransitiveClosure_.addAll(other.blinkGcMarkTransitiveClosure_);
          }
          onChanged();
        }
        if (!other.blinkGcMainThreadCycleFullMarkTransitiveClosure_.isEmpty()) {
          if (blinkGcMainThreadCycleFullMarkTransitiveClosure_.isEmpty()) {
            blinkGcMainThreadCycleFullMarkTransitiveClosure_ = other.blinkGcMainThreadCycleFullMarkTransitiveClosure_;
            bitField0_ = (bitField0_ & ~0x20000000);
          } else {
            ensureBlinkGcMainThreadCycleFullMarkTransitiveClosureIsMutable();
            blinkGcMainThreadCycleFullMarkTransitiveClosure_.addAll(other.blinkGcMainThreadCycleFullMarkTransitiveClosure_);
          }
          onChanged();
        }
        if (!other.blinkGcMarkForeground_.isEmpty()) {
          if (blinkGcMarkForeground_.isEmpty()) {
            blinkGcMarkForeground_ = other.blinkGcMarkForeground_;
            bitField0_ = (bitField0_ & ~0x40000000);
          } else {
            ensureBlinkGcMarkForegroundIsMutable();
            blinkGcMarkForeground_.addAll(other.blinkGcMarkForeground_);
          }
          onChanged();
        }
        if (!other.blinkGcMainThreadCycleFullMark_.isEmpty()) {
          if (blinkGcMainThreadCycleFullMark_.isEmpty()) {
            blinkGcMainThreadCycleFullMark_ = other.blinkGcMainThreadCycleFullMark_;
            bitField0_ = (bitField0_ & ~0x80000000);
          } else {
            ensureBlinkGcMainThreadCycleFullMarkIsMutable();
            blinkGcMainThreadCycleFullMark_.addAll(other.blinkGcMainThreadCycleFullMark_);
          }
          onChanged();
        }
        if (!other.blinkGcMarkForegroundForced_.isEmpty()) {
          if (blinkGcMarkForegroundForced_.isEmpty()) {
            blinkGcMarkForegroundForced_ = other.blinkGcMarkForegroundForced_;
            bitField1_ = (bitField1_ & ~0x00000001);
          } else {
            ensureBlinkGcMarkForegroundForcedIsMutable();
            blinkGcMarkForegroundForced_.addAll(other.blinkGcMarkForegroundForced_);
          }
          onChanged();
        }
        if (!other.blinkGcMainThreadCycleFullMarkForced_.isEmpty()) {
          if (blinkGcMainThreadCycleFullMarkForced_.isEmpty()) {
            blinkGcMainThreadCycleFullMarkForced_ = other.blinkGcMainThreadCycleFullMarkForced_;
            bitField1_ = (bitField1_ & ~0x00000002);
          } else {
            ensureBlinkGcMainThreadCycleFullMarkForcedIsMutable();
            blinkGcMainThreadCycleFullMarkForced_.addAll(other.blinkGcMainThreadCycleFullMarkForced_);
          }
          onChanged();
        }
        if (!other.blinkGcMarkBackground_.isEmpty()) {
          if (blinkGcMarkBackground_.isEmpty()) {
            blinkGcMarkBackground_ = other.blinkGcMarkBackground_;
            bitField1_ = (bitField1_ & ~0x00000004);
          } else {
            ensureBlinkGcMarkBackgroundIsMutable();
            blinkGcMarkBackground_.addAll(other.blinkGcMarkBackground_);
          }
          onChanged();
        }
        if (!other.blinkGcConcurrentThreadCycleFullMark_.isEmpty()) {
          if (blinkGcConcurrentThreadCycleFullMark_.isEmpty()) {
            blinkGcConcurrentThreadCycleFullMark_ = other.blinkGcConcurrentThreadCycleFullMark_;
            bitField1_ = (bitField1_ & ~0x00000008);
          } else {
            ensureBlinkGcConcurrentThreadCycleFullMarkIsMutable();
            blinkGcConcurrentThreadCycleFullMark_.addAll(other.blinkGcConcurrentThreadCycleFullMark_);
          }
          onChanged();
        }
        if (!other.blinkGcSweepForeground_.isEmpty()) {
          if (blinkGcSweepForeground_.isEmpty()) {
            blinkGcSweepForeground_ = other.blinkGcSweepForeground_;
            bitField1_ = (bitField1_ & ~0x00000010);
          } else {
            ensureBlinkGcSweepForegroundIsMutable();
            blinkGcSweepForeground_.addAll(other.blinkGcSweepForeground_);
          }
          onChanged();
        }
        if (!other.blinkGcMainThreadCycleFullSweep_.isEmpty()) {
          if (blinkGcMainThreadCycleFullSweep_.isEmpty()) {
            blinkGcMainThreadCycleFullSweep_ = other.blinkGcMainThreadCycleFullSweep_;
            bitField1_ = (bitField1_ & ~0x00000020);
          } else {
            ensureBlinkGcMainThreadCycleFullSweepIsMutable();
            blinkGcMainThreadCycleFullSweep_.addAll(other.blinkGcMainThreadCycleFullSweep_);
          }
          onChanged();
        }
        if (!other.blinkGcSweepBackground_.isEmpty()) {
          if (blinkGcSweepBackground_.isEmpty()) {
            blinkGcSweepBackground_ = other.blinkGcSweepBackground_;
            bitField1_ = (bitField1_ & ~0x00000040);
          } else {
            ensureBlinkGcSweepBackgroundIsMutable();
            blinkGcSweepBackground_.addAll(other.blinkGcSweepBackground_);
          }
          onChanged();
        }
        if (!other.blinkGcConcurrentThreadCycleFullSweep_.isEmpty()) {
          if (blinkGcConcurrentThreadCycleFullSweep_.isEmpty()) {
            blinkGcConcurrentThreadCycleFullSweep_ = other.blinkGcConcurrentThreadCycleFullSweep_;
            bitField1_ = (bitField1_ & ~0x00000080);
          } else {
            ensureBlinkGcConcurrentThreadCycleFullSweepIsMutable();
            blinkGcConcurrentThreadCycleFullSweep_.addAll(other.blinkGcConcurrentThreadCycleFullSweep_);
          }
          onChanged();
        }
        if (!other.unifiedGcTotal_.isEmpty()) {
          if (unifiedGcTotal_.isEmpty()) {
            unifiedGcTotal_ = other.unifiedGcTotal_;
            bitField1_ = (bitField1_ & ~0x00000100);
          } else {
            ensureUnifiedGcTotalIsMutable();
            unifiedGcTotal_.addAll(other.unifiedGcTotal_);
          }
          onChanged();
        }
        this.mergeUnknownFields(other.getUnknownFields());
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        if (extensionRegistry == null) {
          throw new java.lang.NullPointerException();
        }
        try {
          boolean done = false;
          while (!done) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                done = true;
                break;
              case 9: {
                double v = input.readDouble();
                ensureBlinkGcAtomicPauseMarkEpilogueIsMutable();
                blinkGcAtomicPauseMarkEpilogue_.addDouble(v);
                break;
              } // case 9
              case 10: {
                int length = input.readRawVarint32();
                int limit = input.pushLimit(length);
                ensureBlinkGcAtomicPauseMarkEpilogueIsMutable();
                while (input.getBytesUntilLimit() > 0) {
                  blinkGcAtomicPauseMarkEpilogue_.addDouble(input.readDouble());
                }
                input.popLimit(limit);
                break;
              } // case 10
              case 17: {
                double v = input.readDouble();
                ensureBlinkGcMainThreadCycleFullAtomicMarkEpilogueIsMutable();
                blinkGcMainThreadCycleFullAtomicMarkEpilogue_.addDouble(v);
                break;
              } // case 17
              case 18: {
                int length = input.readRawVarint32();
                int limit = input.pushLimit(length);
                ensureBlinkGcMainThreadCycleFullAtomicMarkEpilogueIsMutable();
                while (input.getBytesUntilLimit() > 0) {
                  blinkGcMainThreadCycleFullAtomicMarkEpilogue_.addDouble(input.readDouble());
                }
                input.popLimit(limit);
                break;
              } // case 18
              case 25: {
                double v = input.readDouble();
                ensureBlinkGcAtomicPauseMarkPrologueIsMutable();
                blinkGcAtomicPauseMarkPrologue_.addDouble(v);
                break;
              } // case 25
              case 26: {
                int length = input.readRawVarint32();
                int limit = input.pushLimit(length);
                ensureBlinkGcAtomicPauseMarkPrologueIsMutable();
                while (input.getBytesUntilLimit() > 0) {
                  blinkGcAtomicPauseMarkPrologue_.addDouble(input.readDouble());
                }
                input.popLimit(limit);
                break;
              } // case 26
              case 33: {
                double v = input.readDouble();
                ensureBlinkGcMainThreadCycleFullAtomicMarkPrologueIsMutable();
                blinkGcMainThreadCycleFullAtomicMarkPrologue_.addDouble(v);
                break;
              } // case 33
              case 34: {
                int length = input.readRawVarint32();
                int limit = input.pushLimit(length);
                ensureBlinkGcMainThreadCycleFullAtomicMarkPrologueIsMutable();
                while (input.getBytesUntilLimit() > 0) {
                  blinkGcMainThreadCycleFullAtomicMarkPrologue_.addDouble(input.readDouble());
                }
                input.popLimit(limit);
                break;
              } // case 34
              case 41: {
                double v = input.readDouble();
                ensureBlinkGcAtomicPauseMarkRootsIsMutable();
                blinkGcAtomicPauseMarkRoots_.addDouble(v);
                break;
              } // case 41
              case 42: {
                int length = input.readRawVarint32();
                int limit = input.pushLimit(length);
                ensureBlinkGcAtomicPauseMarkRootsIsMutable();
                while (input.getBytesUntilLimit() > 0) {
                  blinkGcAtomicPauseMarkRoots_.addDouble(input.readDouble());
                }
                input.popLimit(limit);
                break;
              } // case 42
              case 49: {
                double v = input.readDouble();
                ensureBlinkGcMainThreadCycleFullAtomicMarkRootsIsMutable();
                blinkGcMainThreadCycleFullAtomicMarkRoots_.addDouble(v);
                break;
              } // case 49
              case 50: {
                int length = input.readRawVarint32();
                int limit = input.pushLimit(length);
                ensureBlinkGcMainThreadCycleFullAtomicMarkRootsIsMutable();
                while (input.getBytesUntilLimit() > 0) {
                  blinkGcMainThreadCycleFullAtomicMarkRoots_.addDouble(input.readDouble());
                }
                input.popLimit(limit);
                break;
              } // case 50
              case 57: {
                double v = input.readDouble();
                ensureBlinkGcAtomicPauseSweepAndCompactIsMutable();
                blinkGcAtomicPauseSweepAndCompact_.addDouble(v);
                break;
              } // case 57
              case 58: {
                int length = input.readRawVarint32();
                int limit = input.pushLimit(length);
                ensureBlinkGcAtomicPauseSweepAndCompactIsMutable();
                while (input.getBytesUntilLimit() > 0) {
                  blinkGcAtomicPauseSweepAndCompact_.addDouble(input.readDouble());
                }
                input.popLimit(limit);
                break;
              } // case 58
              case 65: {
                double v = input.readDouble();
                ensureBlinkGcMainThreadCycleFullAtomicSweepCompactIsMutable();
                blinkGcMainThreadCycleFullAtomicSweepCompact_.addDouble(v);
                break;
              } // case 65
              case 66: {
                int length = input.readRawVarint32();
                int limit = input.pushLimit(length);
                ensureBlinkGcMainThreadCycleFullAtomicSweepCompactIsMutable();
                while (input.getBytesUntilLimit() > 0) {
                  blinkGcMainThreadCycleFullAtomicSweepCompact_.addDouble(input.readDouble());
                }
                input.popLimit(limit);
                break;
              } // case 66
              case 73: {
                double v = input.readDouble();
                ensureBlinkGcCompleteSweepIsMutable();
                blinkGcCompleteSweep_.addDouble(v);
                break;
              } // case 73
              case 74: {
                int length = input.readRawVarint32();
                int limit = input.pushLimit(length);
                ensureBlinkGcCompleteSweepIsMutable();
                while (input.getBytesUntilLimit() > 0) {
                  blinkGcCompleteSweep_.addDouble(input.readDouble());
                }
                input.popLimit(limit);
                break;
              } // case 74
              case 81: {
                double v = input.readDouble();
                ensureBlinkGcMainThreadCycleFullSweepCompleteIsMutable();
                blinkGcMainThreadCycleFullSweepComplete_.addDouble(v);
                break;
              } // case 81
              case 82: {
                int length = input.readRawVarint32();
                int limit = input.pushLimit(length);
                ensureBlinkGcMainThreadCycleFullSweepCompleteIsMutable();
                while (input.getBytesUntilLimit() > 0) {
                  blinkGcMainThreadCycleFullSweepComplete_.addDouble(input.readDouble());
                }
                input.popLimit(limit);
                break;
              } // case 82
              case 89: {
                double v = input.readDouble();
                ensureBlinkGcIncrementalStartIsMutable();
                blinkGcIncrementalStart_.addDouble(v);
                break;
              } // case 89
              case 90: {
                int length = input.readRawVarint32();
                int limit = input.pushLimit(length);
                ensureBlinkGcIncrementalStartIsMutable();
                while (input.getBytesUntilLimit() > 0) {
                  blinkGcIncrementalStart_.addDouble(input.readDouble());
                }
                input.popLimit(limit);
                break;
              } // case 90
              case 97: {
                double v = input.readDouble();
                ensureBlinkGcMainThreadCycleFullIncrementalMarkStartIsMutable();
                blinkGcMainThreadCycleFullIncrementalMarkStart_.addDouble(v);
                break;
              } // case 97
              case 98: {
                int length = input.readRawVarint32();
                int limit = input.pushLimit(length);
                ensureBlinkGcMainThreadCycleFullIncrementalMarkStartIsMutable();
                while (input.getBytesUntilLimit() > 0) {
                  blinkGcMainThreadCycleFullIncrementalMarkStart_.addDouble(input.readDouble());
                }
                input.popLimit(limit);
                break;
              } // case 98
              case 105: {
                double v = input.readDouble();
                ensureBlinkGcIncrementalStepIsMutable();
                blinkGcIncrementalStep_.addDouble(v);
                break;
              } // case 105
              case 106: {
                int length = input.readRawVarint32();
                int limit = input.pushLimit(length);
                ensureBlinkGcIncrementalStepIsMutable();
                while (input.getBytesUntilLimit() > 0) {
                  blinkGcIncrementalStep_.addDouble(input.readDouble());
                }
                input.popLimit(limit);
                break;
              } // case 106
              case 113: {
                double v = input.readDouble();
                ensureBlinkGcMainThreadCycleFullIncrementalMarkStepIsMutable();
                blinkGcMainThreadCycleFullIncrementalMarkStep_.addDouble(v);
                break;
              } // case 113
              case 114: {
                int length = input.readRawVarint32();
                int limit = input.pushLimit(length);
                ensureBlinkGcMainThreadCycleFullIncrementalMarkStepIsMutable();
                while (input.getBytesUntilLimit() > 0) {
                  blinkGcMainThreadCycleFullIncrementalMarkStep_.addDouble(input.readDouble());
                }
                input.popLimit(limit);
                break;
              } // case 114
              case 121: {
                double v = input.readDouble();
                ensureBlinkGcSweepAllocationIsMutable();
                blinkGcSweepAllocation_.addDouble(v);
                break;
              } // case 121
              case 122: {
                int length = input.readRawVarint32();
                int limit = input.pushLimit(length);
                ensureBlinkGcSweepAllocationIsMutable();
                while (input.getBytesUntilLimit() > 0) {
                  blinkGcSweepAllocation_.addDouble(input.readDouble());
                }
                input.popLimit(limit);
                break;
              } // case 122
              case 129: {
                double v = input.readDouble();
                ensureBlinkGcMainThreadCycleFullSweepOnAllocationIsMutable();
                blinkGcMainThreadCycleFullSweepOnAllocation_.addDouble(v);
                break;
              } // case 129
              case 130: {
                int length = input.readRawVarint32();
                int limit = input.pushLimit(length);
                ensureBlinkGcMainThreadCycleFullSweepOnAllocationIsMutable();
                while (input.getBytesUntilLimit() > 0) {
                  blinkGcMainThreadCycleFullSweepOnAllocation_.addDouble(input.readDouble());
                }
                input.popLimit(limit);
                break;
              } // case 130
              case 137: {
                double v = input.readDouble();
                ensureBlinkGcSweepTaskForegroundIsMutable();
                blinkGcSweepTaskForeground_.addDouble(v);
                break;
              } // case 137
              case 138: {
                int length = input.readRawVarint32();
                int limit = input.pushLimit(length);
                ensureBlinkGcSweepTaskForegroundIsMutable();
                while (input.getBytesUntilLimit() > 0) {
                  blinkGcSweepTaskForeground_.addDouble(input.readDouble());
                }
                input.popLimit(limit);
                break;
              } // case 138
              case 145: {
                double v = input.readDouble();
                ensureBlinkGcMainThreadCycleFullSweepIdleIsMutable();
                blinkGcMainThreadCycleFullSweepIdle_.addDouble(v);
                break;
              } // case 145
              case 146: {
                int length = input.readRawVarint32();
                int limit = input.pushLimit(length);
                ensureBlinkGcMainThreadCycleFullSweepIdleIsMutable();
                while (input.getBytesUntilLimit() > 0) {
                  blinkGcMainThreadCycleFullSweepIdle_.addDouble(input.readDouble());
                }
                input.popLimit(limit);
                break;
              } // case 146
              case 153: {
                double v = input.readDouble();
                ensureBlinkGcUnifiedMarkingByV8IsMutable();
                blinkGcUnifiedMarkingByV8_.addDouble(v);
                break;
              } // case 153
              case 154: {
                int length = input.readRawVarint32();
                int limit = input.pushLimit(length);
                ensureBlinkGcUnifiedMarkingByV8IsMutable();
                while (input.getBytesUntilLimit() > 0) {
                  blinkGcUnifiedMarkingByV8_.addDouble(input.readDouble());
                }
                input.popLimit(limit);
                break;
              } // case 154
              case 161: {
                double v = input.readDouble();
                ensureUnifiedGcMainThreadCycleFullMarkStepIsMutable();
                unifiedGcMainThreadCycleFullMarkStep_.addDouble(v);
                break;
              } // case 161
              case 162: {
                int length = input.readRawVarint32();
                int limit = input.pushLimit(length);
                ensureUnifiedGcMainThreadCycleFullMarkStepIsMutable();
                while (input.getBytesUntilLimit() > 0) {
                  unifiedGcMainThreadCycleFullMarkStep_.addDouble(input.readDouble());
                }
                input.popLimit(limit);
                break;
              } // case 162
              case 169: {
                double v = input.readDouble();
                ensureBlinkGcAtomicPauseIsMutable();
                blinkGcAtomicPause_.addDouble(v);
                break;
              } // case 169
              case 170: {
                int length = input.readRawVarint32();
                int limit = input.pushLimit(length);
                ensureBlinkGcAtomicPauseIsMutable();
                while (input.getBytesUntilLimit() > 0) {
                  blinkGcAtomicPause_.addDouble(input.readDouble());
                }
                input.popLimit(limit);
                break;
              } // case 170
              case 177: {
                double v = input.readDouble();
                ensureBlinkGcMainThreadCycleFullAtomicIsMutable();
                blinkGcMainThreadCycleFullAtomic_.addDouble(v);
                break;
              } // case 177
              case 178: {
                int length = input.readRawVarint32();
                int limit = input.pushLimit(length);
                ensureBlinkGcMainThreadCycleFullAtomicIsMutable();
                while (input.getBytesUntilLimit() > 0) {
                  blinkGcMainThreadCycleFullAtomic_.addDouble(input.readDouble());
                }
                input.popLimit(limit);
                break;
              } // case 178
              case 185: {
                double v = input.readDouble();
                ensureBlinkGcAtomicPauseMarkTransitiveClosureIsMutable();
                blinkGcAtomicPauseMarkTransitiveClosure_.addDouble(v);
                break;
              } // case 185
              case 186: {
                int length = input.readRawVarint32();
                int limit = input.pushLimit(length);
                ensureBlinkGcAtomicPauseMarkTransitiveClosureIsMutable();
                while (input.getBytesUntilLimit() > 0) {
                  blinkGcAtomicPauseMarkTransitiveClosure_.addDouble(input.readDouble());
                }
                input.popLimit(limit);
                break;
              } // case 186
              case 193: {
                double v = input.readDouble();
                ensureBlinkGcMainThreadCycleFullAtomicMarkTransitiveClosureIsMutable();
                blinkGcMainThreadCycleFullAtomicMarkTransitiveClosure_.addDouble(v);
                break;
              } // case 193
              case 194: {
                int length = input.readRawVarint32();
                int limit = input.pushLimit(length);
                ensureBlinkGcMainThreadCycleFullAtomicMarkTransitiveClosureIsMutable();
                while (input.getBytesUntilLimit() > 0) {
                  blinkGcMainThreadCycleFullAtomicMarkTransitiveClosure_.addDouble(input.readDouble());
                }
                input.popLimit(limit);
                break;
              } // case 194
              case 201: {
                double v = input.readDouble();
                ensureBlinkGcTotalIsMutable();
                blinkGcTotal_.addDouble(v);
                break;
              } // case 201
              case 202: {
                int length = input.readRawVarint32();
                int limit = input.pushLimit(length);
                ensureBlinkGcTotalIsMutable();
                while (input.getBytesUntilLimit() > 0) {
                  blinkGcTotal_.addDouble(input.readDouble());
                }
                input.popLimit(limit);
                break;
              } // case 202
              case 209: {
                double v = input.readDouble();
                ensureBlinkGcMainThreadCycleFullIsMutable();
                blinkGcMainThreadCycleFull_.addDouble(v);
                break;
              } // case 209
              case 210: {
                int length = input.readRawVarint32();
                int limit = input.pushLimit(length);
                ensureBlinkGcMainThreadCycleFullIsMutable();
                while (input.getBytesUntilLimit() > 0) {
                  blinkGcMainThreadCycleFull_.addDouble(input.readDouble());
                }
                input.popLimit(limit);
                break;
              } // case 210
              case 217: {
                double v = input.readDouble();
                ensureBlinkGcMarkRootsIsMutable();
                blinkGcMarkRoots_.addDouble(v);
                break;
              } // case 217
              case 218: {
                int length = input.readRawVarint32();
                int limit = input.pushLimit(length);
                ensureBlinkGcMarkRootsIsMutable();
                while (input.getBytesUntilLimit() > 0) {
                  blinkGcMarkRoots_.addDouble(input.readDouble());
                }
                input.popLimit(limit);
                break;
              } // case 218
              case 225: {
                double v = input.readDouble();
                ensureBlinkGcMainThreadCycleFullMarkRootsIsMutable();
                blinkGcMainThreadCycleFullMarkRoots_.addDouble(v);
                break;
              } // case 225
              case 226: {
                int length = input.readRawVarint32();
                int limit = input.pushLimit(length);
                ensureBlinkGcMainThreadCycleFullMarkRootsIsMutable();
                while (input.getBytesUntilLimit() > 0) {
                  blinkGcMainThreadCycleFullMarkRoots_.addDouble(input.readDouble());
                }
                input.popLimit(limit);
                break;
              } // case 226
              case 233: {
                double v = input.readDouble();
                ensureBlinkGcMarkTransitiveClosureIsMutable();
                blinkGcMarkTransitiveClosure_.addDouble(v);
                break;
              } // case 233
              case 234: {
                int length = input.readRawVarint32();
                int limit = input.pushLimit(length);
                ensureBlinkGcMarkTransitiveClosureIsMutable();
                while (input.getBytesUntilLimit() > 0) {
                  blinkGcMarkTransitiveClosure_.addDouble(input.readDouble());
                }
                input.popLimit(limit);
                break;
              } // case 234
              case 241: {
                double v = input.readDouble();
                ensureBlinkGcMainThreadCycleFullMarkTransitiveClosureIsMutable();
                blinkGcMainThreadCycleFullMarkTransitiveClosure_.addDouble(v);
                break;
              } // case 241
              case 242: {
                int length = input.readRawVarint32();
                int limit = input.pushLimit(length);
                ensureBlinkGcMainThreadCycleFullMarkTransitiveClosureIsMutable();
                while (input.getBytesUntilLimit() > 0) {
                  blinkGcMainThreadCycleFullMarkTransitiveClosure_.addDouble(input.readDouble());
                }
                input.popLimit(limit);
                break;
              } // case 242
              case 249: {
                double v = input.readDouble();
                ensureBlinkGcMarkForegroundIsMutable();
                blinkGcMarkForeground_.addDouble(v);
                break;
              } // case 249
              case 250: {
                int length = input.readRawVarint32();
                int limit = input.pushLimit(length);
                ensureBlinkGcMarkForegroundIsMutable();
                while (input.getBytesUntilLimit() > 0) {
                  blinkGcMarkForeground_.addDouble(input.readDouble());
                }
                input.popLimit(limit);
                break;
              } // case 250
              case 257: {
                double v = input.readDouble();
                ensureBlinkGcMainThreadCycleFullMarkIsMutable();
                blinkGcMainThreadCycleFullMark_.addDouble(v);
                break;
              } // case 257
              case 258: {
                int length = input.readRawVarint32();
                int limit = input.pushLimit(length);
                ensureBlinkGcMainThreadCycleFullMarkIsMutable();
                while (input.getBytesUntilLimit() > 0) {
                  blinkGcMainThreadCycleFullMark_.addDouble(input.readDouble());
                }
                input.popLimit(limit);
                break;
              } // case 258
              case 265: {
                double v = input.readDouble();
                ensureBlinkGcMarkForegroundForcedIsMutable();
                blinkGcMarkForegroundForced_.addDouble(v);
                break;
              } // case 265
              case 266: {
                int length = input.readRawVarint32();
                int limit = input.pushLimit(length);
                ensureBlinkGcMarkForegroundForcedIsMutable();
                while (input.getBytesUntilLimit() > 0) {
                  blinkGcMarkForegroundForced_.addDouble(input.readDouble());
                }
                input.popLimit(limit);
                break;
              } // case 266
              case 273: {
                double v = input.readDouble();
                ensureBlinkGcMainThreadCycleFullMarkForcedIsMutable();
                blinkGcMainThreadCycleFullMarkForced_.addDouble(v);
                break;
              } // case 273
              case 274: {
                int length = input.readRawVarint32();
                int limit = input.pushLimit(length);
                ensureBlinkGcMainThreadCycleFullMarkForcedIsMutable();
                while (input.getBytesUntilLimit() > 0) {
                  blinkGcMainThreadCycleFullMarkForced_.addDouble(input.readDouble());
                }
                input.popLimit(limit);
                break;
              } // case 274
              case 281: {
                double v = input.readDouble();
                ensureBlinkGcMarkBackgroundIsMutable();
                blinkGcMarkBackground_.addDouble(v);
                break;
              } // case 281
              case 282: {
                int length = input.readRawVarint32();
                int limit = input.pushLimit(length);
                ensureBlinkGcMarkBackgroundIsMutable();
                while (input.getBytesUntilLimit() > 0) {
                  blinkGcMarkBackground_.addDouble(input.readDouble());
                }
                input.popLimit(limit);
                break;
              } // case 282
              case 289: {
                double v = input.readDouble();
                ensureBlinkGcConcurrentThreadCycleFullMarkIsMutable();
                blinkGcConcurrentThreadCycleFullMark_.addDouble(v);
                break;
              } // case 289
              case 290: {
                int length = input.readRawVarint32();
                int limit = input.pushLimit(length);
                ensureBlinkGcConcurrentThreadCycleFullMarkIsMutable();
                while (input.getBytesUntilLimit() > 0) {
                  blinkGcConcurrentThreadCycleFullMark_.addDouble(input.readDouble());
                }
                input.popLimit(limit);
                break;
              } // case 290
              case 297: {
                double v = input.readDouble();
                ensureBlinkGcSweepForegroundIsMutable();
                blinkGcSweepForeground_.addDouble(v);
                break;
              } // case 297
              case 298: {
                int length = input.readRawVarint32();
                int limit = input.pushLimit(length);
                ensureBlinkGcSweepForegroundIsMutable();
                while (input.getBytesUntilLimit() > 0) {
                  blinkGcSweepForeground_.addDouble(input.readDouble());
                }
                input.popLimit(limit);
                break;
              } // case 298
              case 305: {
                double v = input.readDouble();
                ensureBlinkGcMainThreadCycleFullSweepIsMutable();
                blinkGcMainThreadCycleFullSweep_.addDouble(v);
                break;
              } // case 305
              case 306: {
                int length = input.readRawVarint32();
                int limit = input.pushLimit(length);
                ensureBlinkGcMainThreadCycleFullSweepIsMutable();
                while (input.getBytesUntilLimit() > 0) {
                  blinkGcMainThreadCycleFullSweep_.addDouble(input.readDouble());
                }
                input.popLimit(limit);
                break;
              } // case 306
              case 313: {
                double v = input.readDouble();
                ensureBlinkGcSweepBackgroundIsMutable();
                blinkGcSweepBackground_.addDouble(v);
                break;
              } // case 313
              case 314: {
                int length = input.readRawVarint32();
                int limit = input.pushLimit(length);
                ensureBlinkGcSweepBackgroundIsMutable();
                while (input.getBytesUntilLimit() > 0) {
                  blinkGcSweepBackground_.addDouble(input.readDouble());
                }
                input.popLimit(limit);
                break;
              } // case 314
              case 321: {
                double v = input.readDouble();
                ensureBlinkGcConcurrentThreadCycleFullSweepIsMutable();
                blinkGcConcurrentThreadCycleFullSweep_.addDouble(v);
                break;
              } // case 321
              case 322: {
                int length = input.readRawVarint32();
                int limit = input.pushLimit(length);
                ensureBlinkGcConcurrentThreadCycleFullSweepIsMutable();
                while (input.getBytesUntilLimit() > 0) {
                  blinkGcConcurrentThreadCycleFullSweep_.addDouble(input.readDouble());
                }
                input.popLimit(limit);
                break;
              } // case 322
              case 329: {
                double v = input.readDouble();
                ensureUnifiedGcTotalIsMutable();
                unifiedGcTotal_.addDouble(v);
                break;
              } // case 329
              case 330: {
                int length = input.readRawVarint32();
                int limit = input.pushLimit(length);
                ensureUnifiedGcTotalIsMutable();
                while (input.getBytesUntilLimit() > 0) {
                  unifiedGcTotal_.addDouble(input.readDouble());
                }
                input.popLimit(limit);
                break;
              } // case 330
              default: {
                if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                  done = true; // was an endgroup tag
                }
                break;
              } // default:
            } // switch (tag)
          } // while (!done)
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.unwrapIOException();
        } finally {
          onChanged();
        } // finally
        return this;
      }
      private int bitField0_;
      private int bitField1_;

      private com.google.protobuf.Internal.DoubleList blinkGcAtomicPauseMarkEpilogue_ = emptyDoubleList();
      private void ensureBlinkGcAtomicPauseMarkEpilogueIsMutable() {
        if (!((bitField0_ & 0x00000001) != 0)) {
          blinkGcAtomicPauseMarkEpilogue_ = mutableCopy(blinkGcAtomicPauseMarkEpilogue_);
          bitField0_ |= 0x00000001;
        }
      }
      /**
       * <code>repeated double blink_gc_atomic_pause_mark_epilogue = 1 [(.perfetto.protos.unit) = "ms_smallerIsBetter"];</code>
       * @return A list containing the blinkGcAtomicPauseMarkEpilogue.
       */
      public java.util.List<java.lang.Double>
          getBlinkGcAtomicPauseMarkEpilogueList() {
        return ((bitField0_ & 0x00000001) != 0) ?
                 java.util.Collections.unmodifiableList(blinkGcAtomicPauseMarkEpilogue_) : blinkGcAtomicPauseMarkEpilogue_;
      }
      /**
       * <code>repeated double blink_gc_atomic_pause_mark_epilogue = 1 [(.perfetto.protos.unit) = "ms_smallerIsBetter"];</code>
       * @return The count of blinkGcAtomicPauseMarkEpilogue.
       */
      public int getBlinkGcAtomicPauseMarkEpilogueCount() {
        return blinkGcAtomicPauseMarkEpilogue_.size();
      }
      /**
       * <code>repeated double blink_gc_atomic_pause_mark_epilogue = 1 [(.perfetto.protos.unit) = "ms_smallerIsBetter"];</code>
       * @param index The index of the element to return.
       * @return The blinkGcAtomicPauseMarkEpilogue at the given index.
       */
      public double getBlinkGcAtomicPauseMarkEpilogue(int index) {
        return blinkGcAtomicPauseMarkEpilogue_.getDouble(index);
      }
      /**
       * <code>repeated double blink_gc_atomic_pause_mark_epilogue = 1 [(.perfetto.protos.unit) = "ms_smallerIsBetter"];</code>
       * @param index The index to set the value at.
       * @param value The blinkGcAtomicPauseMarkEpilogue to set.
       * @return This builder for chaining.
       */
      public Builder setBlinkGcAtomicPauseMarkEpilogue(
          int index, double value) {
        
        ensureBlinkGcAtomicPauseMarkEpilogueIsMutable();
        blinkGcAtomicPauseMarkEpilogue_.setDouble(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated double blink_gc_atomic_pause_mark_epilogue = 1 [(.perfetto.protos.unit) = "ms_smallerIsBetter"];</code>
       * @param value The blinkGcAtomicPauseMarkEpilogue to add.
       * @return This builder for chaining.
       */
      public Builder addBlinkGcAtomicPauseMarkEpilogue(double value) {
        
        ensureBlinkGcAtomicPauseMarkEpilogueIsMutable();
        blinkGcAtomicPauseMarkEpilogue_.addDouble(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated double blink_gc_atomic_pause_mark_epilogue = 1 [(.perfetto.protos.unit) = "ms_smallerIsBetter"];</code>
       * @param values The blinkGcAtomicPauseMarkEpilogue to add.
       * @return This builder for chaining.
       */
      public Builder addAllBlinkGcAtomicPauseMarkEpilogue(
          java.lang.Iterable<? extends java.lang.Double> values) {
        ensureBlinkGcAtomicPauseMarkEpilogueIsMutable();
        com.google.protobuf.AbstractMessageLite.Builder.addAll(
            values, blinkGcAtomicPauseMarkEpilogue_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated double blink_gc_atomic_pause_mark_epilogue = 1 [(.perfetto.protos.unit) = "ms_smallerIsBetter"];</code>
       * @return This builder for chaining.
       */
      public Builder clearBlinkGcAtomicPauseMarkEpilogue() {
        blinkGcAtomicPauseMarkEpilogue_ = emptyDoubleList();
        bitField0_ = (bitField0_ & ~0x00000001);
        onChanged();
        return this;
      }

      private com.google.protobuf.Internal.DoubleList blinkGcMainThreadCycleFullAtomicMarkEpilogue_ = emptyDoubleList();
      private void ensureBlinkGcMainThreadCycleFullAtomicMarkEpilogueIsMutable() {
        if (!((bitField0_ & 0x00000002) != 0)) {
          blinkGcMainThreadCycleFullAtomicMarkEpilogue_ = mutableCopy(blinkGcMainThreadCycleFullAtomicMarkEpilogue_);
          bitField0_ |= 0x00000002;
        }
      }
      /**
       * <code>repeated double blink_gc_main_thread_cycle_full_atomic_mark_epilogue = 2 [(.perfetto.protos.unit) = "ms_smallerIsBetter"];</code>
       * @return A list containing the blinkGcMainThreadCycleFullAtomicMarkEpilogue.
       */
      public java.util.List<java.lang.Double>
          getBlinkGcMainThreadCycleFullAtomicMarkEpilogueList() {
        return ((bitField0_ & 0x00000002) != 0) ?
                 java.util.Collections.unmodifiableList(blinkGcMainThreadCycleFullAtomicMarkEpilogue_) : blinkGcMainThreadCycleFullAtomicMarkEpilogue_;
      }
      /**
       * <code>repeated double blink_gc_main_thread_cycle_full_atomic_mark_epilogue = 2 [(.perfetto.protos.unit) = "ms_smallerIsBetter"];</code>
       * @return The count of blinkGcMainThreadCycleFullAtomicMarkEpilogue.
       */
      public int getBlinkGcMainThreadCycleFullAtomicMarkEpilogueCount() {
        return blinkGcMainThreadCycleFullAtomicMarkEpilogue_.size();
      }
      /**
       * <code>repeated double blink_gc_main_thread_cycle_full_atomic_mark_epilogue = 2 [(.perfetto.protos.unit) = "ms_smallerIsBetter"];</code>
       * @param index The index of the element to return.
       * @return The blinkGcMainThreadCycleFullAtomicMarkEpilogue at the given index.
       */
      public double getBlinkGcMainThreadCycleFullAtomicMarkEpilogue(int index) {
        return blinkGcMainThreadCycleFullAtomicMarkEpilogue_.getDouble(index);
      }
      /**
       * <code>repeated double blink_gc_main_thread_cycle_full_atomic_mark_epilogue = 2 [(.perfetto.protos.unit) = "ms_smallerIsBetter"];</code>
       * @param index The index to set the value at.
       * @param value The blinkGcMainThreadCycleFullAtomicMarkEpilogue to set.
       * @return This builder for chaining.
       */
      public Builder setBlinkGcMainThreadCycleFullAtomicMarkEpilogue(
          int index, double value) {
        
        ensureBlinkGcMainThreadCycleFullAtomicMarkEpilogueIsMutable();
        blinkGcMainThreadCycleFullAtomicMarkEpilogue_.setDouble(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated double blink_gc_main_thread_cycle_full_atomic_mark_epilogue = 2 [(.perfetto.protos.unit) = "ms_smallerIsBetter"];</code>
       * @param value The blinkGcMainThreadCycleFullAtomicMarkEpilogue to add.
       * @return This builder for chaining.
       */
      public Builder addBlinkGcMainThreadCycleFullAtomicMarkEpilogue(double value) {
        
        ensureBlinkGcMainThreadCycleFullAtomicMarkEpilogueIsMutable();
        blinkGcMainThreadCycleFullAtomicMarkEpilogue_.addDouble(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated double blink_gc_main_thread_cycle_full_atomic_mark_epilogue = 2 [(.perfetto.protos.unit) = "ms_smallerIsBetter"];</code>
       * @param values The blinkGcMainThreadCycleFullAtomicMarkEpilogue to add.
       * @return This builder for chaining.
       */
      public Builder addAllBlinkGcMainThreadCycleFullAtomicMarkEpilogue(
          java.lang.Iterable<? extends java.lang.Double> values) {
        ensureBlinkGcMainThreadCycleFullAtomicMarkEpilogueIsMutable();
        com.google.protobuf.AbstractMessageLite.Builder.addAll(
            values, blinkGcMainThreadCycleFullAtomicMarkEpilogue_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated double blink_gc_main_thread_cycle_full_atomic_mark_epilogue = 2 [(.perfetto.protos.unit) = "ms_smallerIsBetter"];</code>
       * @return This builder for chaining.
       */
      public Builder clearBlinkGcMainThreadCycleFullAtomicMarkEpilogue() {
        blinkGcMainThreadCycleFullAtomicMarkEpilogue_ = emptyDoubleList();
        bitField0_ = (bitField0_ & ~0x00000002);
        onChanged();
        return this;
      }

      private com.google.protobuf.Internal.DoubleList blinkGcAtomicPauseMarkPrologue_ = emptyDoubleList();
      private void ensureBlinkGcAtomicPauseMarkPrologueIsMutable() {
        if (!((bitField0_ & 0x00000004) != 0)) {
          blinkGcAtomicPauseMarkPrologue_ = mutableCopy(blinkGcAtomicPauseMarkPrologue_);
          bitField0_ |= 0x00000004;
        }
      }
      /**
       * <code>repeated double blink_gc_atomic_pause_mark_prologue = 3 [(.perfetto.protos.unit) = "ms_smallerIsBetter"];</code>
       * @return A list containing the blinkGcAtomicPauseMarkPrologue.
       */
      public java.util.List<java.lang.Double>
          getBlinkGcAtomicPauseMarkPrologueList() {
        return ((bitField0_ & 0x00000004) != 0) ?
                 java.util.Collections.unmodifiableList(blinkGcAtomicPauseMarkPrologue_) : blinkGcAtomicPauseMarkPrologue_;
      }
      /**
       * <code>repeated double blink_gc_atomic_pause_mark_prologue = 3 [(.perfetto.protos.unit) = "ms_smallerIsBetter"];</code>
       * @return The count of blinkGcAtomicPauseMarkPrologue.
       */
      public int getBlinkGcAtomicPauseMarkPrologueCount() {
        return blinkGcAtomicPauseMarkPrologue_.size();
      }
      /**
       * <code>repeated double blink_gc_atomic_pause_mark_prologue = 3 [(.perfetto.protos.unit) = "ms_smallerIsBetter"];</code>
       * @param index The index of the element to return.
       * @return The blinkGcAtomicPauseMarkPrologue at the given index.
       */
      public double getBlinkGcAtomicPauseMarkPrologue(int index) {
        return blinkGcAtomicPauseMarkPrologue_.getDouble(index);
      }
      /**
       * <code>repeated double blink_gc_atomic_pause_mark_prologue = 3 [(.perfetto.protos.unit) = "ms_smallerIsBetter"];</code>
       * @param index The index to set the value at.
       * @param value The blinkGcAtomicPauseMarkPrologue to set.
       * @return This builder for chaining.
       */
      public Builder setBlinkGcAtomicPauseMarkPrologue(
          int index, double value) {
        
        ensureBlinkGcAtomicPauseMarkPrologueIsMutable();
        blinkGcAtomicPauseMarkPrologue_.setDouble(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated double blink_gc_atomic_pause_mark_prologue = 3 [(.perfetto.protos.unit) = "ms_smallerIsBetter"];</code>
       * @param value The blinkGcAtomicPauseMarkPrologue to add.
       * @return This builder for chaining.
       */
      public Builder addBlinkGcAtomicPauseMarkPrologue(double value) {
        
        ensureBlinkGcAtomicPauseMarkPrologueIsMutable();
        blinkGcAtomicPauseMarkPrologue_.addDouble(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated double blink_gc_atomic_pause_mark_prologue = 3 [(.perfetto.protos.unit) = "ms_smallerIsBetter"];</code>
       * @param values The blinkGcAtomicPauseMarkPrologue to add.
       * @return This builder for chaining.
       */
      public Builder addAllBlinkGcAtomicPauseMarkPrologue(
          java.lang.Iterable<? extends java.lang.Double> values) {
        ensureBlinkGcAtomicPauseMarkPrologueIsMutable();
        com.google.protobuf.AbstractMessageLite.Builder.addAll(
            values, blinkGcAtomicPauseMarkPrologue_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated double blink_gc_atomic_pause_mark_prologue = 3 [(.perfetto.protos.unit) = "ms_smallerIsBetter"];</code>
       * @return This builder for chaining.
       */
      public Builder clearBlinkGcAtomicPauseMarkPrologue() {
        blinkGcAtomicPauseMarkPrologue_ = emptyDoubleList();
        bitField0_ = (bitField0_ & ~0x00000004);
        onChanged();
        return this;
      }

      private com.google.protobuf.Internal.DoubleList blinkGcMainThreadCycleFullAtomicMarkPrologue_ = emptyDoubleList();
      private void ensureBlinkGcMainThreadCycleFullAtomicMarkPrologueIsMutable() {
        if (!((bitField0_ & 0x00000008) != 0)) {
          blinkGcMainThreadCycleFullAtomicMarkPrologue_ = mutableCopy(blinkGcMainThreadCycleFullAtomicMarkPrologue_);
          bitField0_ |= 0x00000008;
        }
      }
      /**
       * <code>repeated double blink_gc_main_thread_cycle_full_atomic_mark_prologue = 4 [(.perfetto.protos.unit) = "ms_smallerIsBetter"];</code>
       * @return A list containing the blinkGcMainThreadCycleFullAtomicMarkPrologue.
       */
      public java.util.List<java.lang.Double>
          getBlinkGcMainThreadCycleFullAtomicMarkPrologueList() {
        return ((bitField0_ & 0x00000008) != 0) ?
                 java.util.Collections.unmodifiableList(blinkGcMainThreadCycleFullAtomicMarkPrologue_) : blinkGcMainThreadCycleFullAtomicMarkPrologue_;
      }
      /**
       * <code>repeated double blink_gc_main_thread_cycle_full_atomic_mark_prologue = 4 [(.perfetto.protos.unit) = "ms_smallerIsBetter"];</code>
       * @return The count of blinkGcMainThreadCycleFullAtomicMarkPrologue.
       */
      public int getBlinkGcMainThreadCycleFullAtomicMarkPrologueCount() {
        return blinkGcMainThreadCycleFullAtomicMarkPrologue_.size();
      }
      /**
       * <code>repeated double blink_gc_main_thread_cycle_full_atomic_mark_prologue = 4 [(.perfetto.protos.unit) = "ms_smallerIsBetter"];</code>
       * @param index The index of the element to return.
       * @return The blinkGcMainThreadCycleFullAtomicMarkPrologue at the given index.
       */
      public double getBlinkGcMainThreadCycleFullAtomicMarkPrologue(int index) {
        return blinkGcMainThreadCycleFullAtomicMarkPrologue_.getDouble(index);
      }
      /**
       * <code>repeated double blink_gc_main_thread_cycle_full_atomic_mark_prologue = 4 [(.perfetto.protos.unit) = "ms_smallerIsBetter"];</code>
       * @param index The index to set the value at.
       * @param value The blinkGcMainThreadCycleFullAtomicMarkPrologue to set.
       * @return This builder for chaining.
       */
      public Builder setBlinkGcMainThreadCycleFullAtomicMarkPrologue(
          int index, double value) {
        
        ensureBlinkGcMainThreadCycleFullAtomicMarkPrologueIsMutable();
        blinkGcMainThreadCycleFullAtomicMarkPrologue_.setDouble(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated double blink_gc_main_thread_cycle_full_atomic_mark_prologue = 4 [(.perfetto.protos.unit) = "ms_smallerIsBetter"];</code>
       * @param value The blinkGcMainThreadCycleFullAtomicMarkPrologue to add.
       * @return This builder for chaining.
       */
      public Builder addBlinkGcMainThreadCycleFullAtomicMarkPrologue(double value) {
        
        ensureBlinkGcMainThreadCycleFullAtomicMarkPrologueIsMutable();
        blinkGcMainThreadCycleFullAtomicMarkPrologue_.addDouble(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated double blink_gc_main_thread_cycle_full_atomic_mark_prologue = 4 [(.perfetto.protos.unit) = "ms_smallerIsBetter"];</code>
       * @param values The blinkGcMainThreadCycleFullAtomicMarkPrologue to add.
       * @return This builder for chaining.
       */
      public Builder addAllBlinkGcMainThreadCycleFullAtomicMarkPrologue(
          java.lang.Iterable<? extends java.lang.Double> values) {
        ensureBlinkGcMainThreadCycleFullAtomicMarkPrologueIsMutable();
        com.google.protobuf.AbstractMessageLite.Builder.addAll(
            values, blinkGcMainThreadCycleFullAtomicMarkPrologue_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated double blink_gc_main_thread_cycle_full_atomic_mark_prologue = 4 [(.perfetto.protos.unit) = "ms_smallerIsBetter"];</code>
       * @return This builder for chaining.
       */
      public Builder clearBlinkGcMainThreadCycleFullAtomicMarkPrologue() {
        blinkGcMainThreadCycleFullAtomicMarkPrologue_ = emptyDoubleList();
        bitField0_ = (bitField0_ & ~0x00000008);
        onChanged();
        return this;
      }

      private com.google.protobuf.Internal.DoubleList blinkGcAtomicPauseMarkRoots_ = emptyDoubleList();
      private void ensureBlinkGcAtomicPauseMarkRootsIsMutable() {
        if (!((bitField0_ & 0x00000010) != 0)) {
          blinkGcAtomicPauseMarkRoots_ = mutableCopy(blinkGcAtomicPauseMarkRoots_);
          bitField0_ |= 0x00000010;
        }
      }
      /**
       * <code>repeated double blink_gc_atomic_pause_mark_roots = 5 [(.perfetto.protos.unit) = "ms_smallerIsBetter"];</code>
       * @return A list containing the blinkGcAtomicPauseMarkRoots.
       */
      public java.util.List<java.lang.Double>
          getBlinkGcAtomicPauseMarkRootsList() {
        return ((bitField0_ & 0x00000010) != 0) ?
                 java.util.Collections.unmodifiableList(blinkGcAtomicPauseMarkRoots_) : blinkGcAtomicPauseMarkRoots_;
      }
      /**
       * <code>repeated double blink_gc_atomic_pause_mark_roots = 5 [(.perfetto.protos.unit) = "ms_smallerIsBetter"];</code>
       * @return The count of blinkGcAtomicPauseMarkRoots.
       */
      public int getBlinkGcAtomicPauseMarkRootsCount() {
        return blinkGcAtomicPauseMarkRoots_.size();
      }
      /**
       * <code>repeated double blink_gc_atomic_pause_mark_roots = 5 [(.perfetto.protos.unit) = "ms_smallerIsBetter"];</code>
       * @param index The index of the element to return.
       * @return The blinkGcAtomicPauseMarkRoots at the given index.
       */
      public double getBlinkGcAtomicPauseMarkRoots(int index) {
        return blinkGcAtomicPauseMarkRoots_.getDouble(index);
      }
      /**
       * <code>repeated double blink_gc_atomic_pause_mark_roots = 5 [(.perfetto.protos.unit) = "ms_smallerIsBetter"];</code>
       * @param index The index to set the value at.
       * @param value The blinkGcAtomicPauseMarkRoots to set.
       * @return This builder for chaining.
       */
      public Builder setBlinkGcAtomicPauseMarkRoots(
          int index, double value) {
        
        ensureBlinkGcAtomicPauseMarkRootsIsMutable();
        blinkGcAtomicPauseMarkRoots_.setDouble(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated double blink_gc_atomic_pause_mark_roots = 5 [(.perfetto.protos.unit) = "ms_smallerIsBetter"];</code>
       * @param value The blinkGcAtomicPauseMarkRoots to add.
       * @return This builder for chaining.
       */
      public Builder addBlinkGcAtomicPauseMarkRoots(double value) {
        
        ensureBlinkGcAtomicPauseMarkRootsIsMutable();
        blinkGcAtomicPauseMarkRoots_.addDouble(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated double blink_gc_atomic_pause_mark_roots = 5 [(.perfetto.protos.unit) = "ms_smallerIsBetter"];</code>
       * @param values The blinkGcAtomicPauseMarkRoots to add.
       * @return This builder for chaining.
       */
      public Builder addAllBlinkGcAtomicPauseMarkRoots(
          java.lang.Iterable<? extends java.lang.Double> values) {
        ensureBlinkGcAtomicPauseMarkRootsIsMutable();
        com.google.protobuf.AbstractMessageLite.Builder.addAll(
            values, blinkGcAtomicPauseMarkRoots_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated double blink_gc_atomic_pause_mark_roots = 5 [(.perfetto.protos.unit) = "ms_smallerIsBetter"];</code>
       * @return This builder for chaining.
       */
      public Builder clearBlinkGcAtomicPauseMarkRoots() {
        blinkGcAtomicPauseMarkRoots_ = emptyDoubleList();
        bitField0_ = (bitField0_ & ~0x00000010);
        onChanged();
        return this;
      }

      private com.google.protobuf.Internal.DoubleList blinkGcMainThreadCycleFullAtomicMarkRoots_ = emptyDoubleList();
      private void ensureBlinkGcMainThreadCycleFullAtomicMarkRootsIsMutable() {
        if (!((bitField0_ & 0x00000020) != 0)) {
          blinkGcMainThreadCycleFullAtomicMarkRoots_ = mutableCopy(blinkGcMainThreadCycleFullAtomicMarkRoots_);
          bitField0_ |= 0x00000020;
        }
      }
      /**
       * <code>repeated double blink_gc_main_thread_cycle_full_atomic_mark_roots = 6 [(.perfetto.protos.unit) = "ms_smallerIsBetter"];</code>
       * @return A list containing the blinkGcMainThreadCycleFullAtomicMarkRoots.
       */
      public java.util.List<java.lang.Double>
          getBlinkGcMainThreadCycleFullAtomicMarkRootsList() {
        return ((bitField0_ & 0x00000020) != 0) ?
                 java.util.Collections.unmodifiableList(blinkGcMainThreadCycleFullAtomicMarkRoots_) : blinkGcMainThreadCycleFullAtomicMarkRoots_;
      }
      /**
       * <code>repeated double blink_gc_main_thread_cycle_full_atomic_mark_roots = 6 [(.perfetto.protos.unit) = "ms_smallerIsBetter"];</code>
       * @return The count of blinkGcMainThreadCycleFullAtomicMarkRoots.
       */
      public int getBlinkGcMainThreadCycleFullAtomicMarkRootsCount() {
        return blinkGcMainThreadCycleFullAtomicMarkRoots_.size();
      }
      /**
       * <code>repeated double blink_gc_main_thread_cycle_full_atomic_mark_roots = 6 [(.perfetto.protos.unit) = "ms_smallerIsBetter"];</code>
       * @param index The index of the element to return.
       * @return The blinkGcMainThreadCycleFullAtomicMarkRoots at the given index.
       */
      public double getBlinkGcMainThreadCycleFullAtomicMarkRoots(int index) {
        return blinkGcMainThreadCycleFullAtomicMarkRoots_.getDouble(index);
      }
      /**
       * <code>repeated double blink_gc_main_thread_cycle_full_atomic_mark_roots = 6 [(.perfetto.protos.unit) = "ms_smallerIsBetter"];</code>
       * @param index The index to set the value at.
       * @param value The blinkGcMainThreadCycleFullAtomicMarkRoots to set.
       * @return This builder for chaining.
       */
      public Builder setBlinkGcMainThreadCycleFullAtomicMarkRoots(
          int index, double value) {
        
        ensureBlinkGcMainThreadCycleFullAtomicMarkRootsIsMutable();
        blinkGcMainThreadCycleFullAtomicMarkRoots_.setDouble(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated double blink_gc_main_thread_cycle_full_atomic_mark_roots = 6 [(.perfetto.protos.unit) = "ms_smallerIsBetter"];</code>
       * @param value The blinkGcMainThreadCycleFullAtomicMarkRoots to add.
       * @return This builder for chaining.
       */
      public Builder addBlinkGcMainThreadCycleFullAtomicMarkRoots(double value) {
        
        ensureBlinkGcMainThreadCycleFullAtomicMarkRootsIsMutable();
        blinkGcMainThreadCycleFullAtomicMarkRoots_.addDouble(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated double blink_gc_main_thread_cycle_full_atomic_mark_roots = 6 [(.perfetto.protos.unit) = "ms_smallerIsBetter"];</code>
       * @param values The blinkGcMainThreadCycleFullAtomicMarkRoots to add.
       * @return This builder for chaining.
       */
      public Builder addAllBlinkGcMainThreadCycleFullAtomicMarkRoots(
          java.lang.Iterable<? extends java.lang.Double> values) {
        ensureBlinkGcMainThreadCycleFullAtomicMarkRootsIsMutable();
        com.google.protobuf.AbstractMessageLite.Builder.addAll(
            values, blinkGcMainThreadCycleFullAtomicMarkRoots_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated double blink_gc_main_thread_cycle_full_atomic_mark_roots = 6 [(.perfetto.protos.unit) = "ms_smallerIsBetter"];</code>
       * @return This builder for chaining.
       */
      public Builder clearBlinkGcMainThreadCycleFullAtomicMarkRoots() {
        blinkGcMainThreadCycleFullAtomicMarkRoots_ = emptyDoubleList();
        bitField0_ = (bitField0_ & ~0x00000020);
        onChanged();
        return this;
      }

      private com.google.protobuf.Internal.DoubleList blinkGcAtomicPauseSweepAndCompact_ = emptyDoubleList();
      private void ensureBlinkGcAtomicPauseSweepAndCompactIsMutable() {
        if (!((bitField0_ & 0x00000040) != 0)) {
          blinkGcAtomicPauseSweepAndCompact_ = mutableCopy(blinkGcAtomicPauseSweepAndCompact_);
          bitField0_ |= 0x00000040;
        }
      }
      /**
       * <code>repeated double blink_gc_atomic_pause_sweep_and_compact = 7 [(.perfetto.protos.unit) = "ms_smallerIsBetter"];</code>
       * @return A list containing the blinkGcAtomicPauseSweepAndCompact.
       */
      public java.util.List<java.lang.Double>
          getBlinkGcAtomicPauseSweepAndCompactList() {
        return ((bitField0_ & 0x00000040) != 0) ?
                 java.util.Collections.unmodifiableList(blinkGcAtomicPauseSweepAndCompact_) : blinkGcAtomicPauseSweepAndCompact_;
      }
      /**
       * <code>repeated double blink_gc_atomic_pause_sweep_and_compact = 7 [(.perfetto.protos.unit) = "ms_smallerIsBetter"];</code>
       * @return The count of blinkGcAtomicPauseSweepAndCompact.
       */
      public int getBlinkGcAtomicPauseSweepAndCompactCount() {
        return blinkGcAtomicPauseSweepAndCompact_.size();
      }
      /**
       * <code>repeated double blink_gc_atomic_pause_sweep_and_compact = 7 [(.perfetto.protos.unit) = "ms_smallerIsBetter"];</code>
       * @param index The index of the element to return.
       * @return The blinkGcAtomicPauseSweepAndCompact at the given index.
       */
      public double getBlinkGcAtomicPauseSweepAndCompact(int index) {
        return blinkGcAtomicPauseSweepAndCompact_.getDouble(index);
      }
      /**
       * <code>repeated double blink_gc_atomic_pause_sweep_and_compact = 7 [(.perfetto.protos.unit) = "ms_smallerIsBetter"];</code>
       * @param index The index to set the value at.
       * @param value The blinkGcAtomicPauseSweepAndCompact to set.
       * @return This builder for chaining.
       */
      public Builder setBlinkGcAtomicPauseSweepAndCompact(
          int index, double value) {
        
        ensureBlinkGcAtomicPauseSweepAndCompactIsMutable();
        blinkGcAtomicPauseSweepAndCompact_.setDouble(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated double blink_gc_atomic_pause_sweep_and_compact = 7 [(.perfetto.protos.unit) = "ms_smallerIsBetter"];</code>
       * @param value The blinkGcAtomicPauseSweepAndCompact to add.
       * @return This builder for chaining.
       */
      public Builder addBlinkGcAtomicPauseSweepAndCompact(double value) {
        
        ensureBlinkGcAtomicPauseSweepAndCompactIsMutable();
        blinkGcAtomicPauseSweepAndCompact_.addDouble(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated double blink_gc_atomic_pause_sweep_and_compact = 7 [(.perfetto.protos.unit) = "ms_smallerIsBetter"];</code>
       * @param values The blinkGcAtomicPauseSweepAndCompact to add.
       * @return This builder for chaining.
       */
      public Builder addAllBlinkGcAtomicPauseSweepAndCompact(
          java.lang.Iterable<? extends java.lang.Double> values) {
        ensureBlinkGcAtomicPauseSweepAndCompactIsMutable();
        com.google.protobuf.AbstractMessageLite.Builder.addAll(
            values, blinkGcAtomicPauseSweepAndCompact_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated double blink_gc_atomic_pause_sweep_and_compact = 7 [(.perfetto.protos.unit) = "ms_smallerIsBetter"];</code>
       * @return This builder for chaining.
       */
      public Builder clearBlinkGcAtomicPauseSweepAndCompact() {
        blinkGcAtomicPauseSweepAndCompact_ = emptyDoubleList();
        bitField0_ = (bitField0_ & ~0x00000040);
        onChanged();
        return this;
      }

      private com.google.protobuf.Internal.DoubleList blinkGcMainThreadCycleFullAtomicSweepCompact_ = emptyDoubleList();
      private void ensureBlinkGcMainThreadCycleFullAtomicSweepCompactIsMutable() {
        if (!((bitField0_ & 0x00000080) != 0)) {
          blinkGcMainThreadCycleFullAtomicSweepCompact_ = mutableCopy(blinkGcMainThreadCycleFullAtomicSweepCompact_);
          bitField0_ |= 0x00000080;
        }
      }
      /**
       * <code>repeated double blink_gc_main_thread_cycle_full_atomic_sweep_compact = 8 [(.perfetto.protos.unit) = "ms_smallerIsBetter"];</code>
       * @return A list containing the blinkGcMainThreadCycleFullAtomicSweepCompact.
       */
      public java.util.List<java.lang.Double>
          getBlinkGcMainThreadCycleFullAtomicSweepCompactList() {
        return ((bitField0_ & 0x00000080) != 0) ?
                 java.util.Collections.unmodifiableList(blinkGcMainThreadCycleFullAtomicSweepCompact_) : blinkGcMainThreadCycleFullAtomicSweepCompact_;
      }
      /**
       * <code>repeated double blink_gc_main_thread_cycle_full_atomic_sweep_compact = 8 [(.perfetto.protos.unit) = "ms_smallerIsBetter"];</code>
       * @return The count of blinkGcMainThreadCycleFullAtomicSweepCompact.
       */
      public int getBlinkGcMainThreadCycleFullAtomicSweepCompactCount() {
        return blinkGcMainThreadCycleFullAtomicSweepCompact_.size();
      }
      /**
       * <code>repeated double blink_gc_main_thread_cycle_full_atomic_sweep_compact = 8 [(.perfetto.protos.unit) = "ms_smallerIsBetter"];</code>
       * @param index The index of the element to return.
       * @return The blinkGcMainThreadCycleFullAtomicSweepCompact at the given index.
       */
      public double getBlinkGcMainThreadCycleFullAtomicSweepCompact(int index) {
        return blinkGcMainThreadCycleFullAtomicSweepCompact_.getDouble(index);
      }
      /**
       * <code>repeated double blink_gc_main_thread_cycle_full_atomic_sweep_compact = 8 [(.perfetto.protos.unit) = "ms_smallerIsBetter"];</code>
       * @param index The index to set the value at.
       * @param value The blinkGcMainThreadCycleFullAtomicSweepCompact to set.
       * @return This builder for chaining.
       */
      public Builder setBlinkGcMainThreadCycleFullAtomicSweepCompact(
          int index, double value) {
        
        ensureBlinkGcMainThreadCycleFullAtomicSweepCompactIsMutable();
        blinkGcMainThreadCycleFullAtomicSweepCompact_.setDouble(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated double blink_gc_main_thread_cycle_full_atomic_sweep_compact = 8 [(.perfetto.protos.unit) = "ms_smallerIsBetter"];</code>
       * @param value The blinkGcMainThreadCycleFullAtomicSweepCompact to add.
       * @return This builder for chaining.
       */
      public Builder addBlinkGcMainThreadCycleFullAtomicSweepCompact(double value) {
        
        ensureBlinkGcMainThreadCycleFullAtomicSweepCompactIsMutable();
        blinkGcMainThreadCycleFullAtomicSweepCompact_.addDouble(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated double blink_gc_main_thread_cycle_full_atomic_sweep_compact = 8 [(.perfetto.protos.unit) = "ms_smallerIsBetter"];</code>
       * @param values The blinkGcMainThreadCycleFullAtomicSweepCompact to add.
       * @return This builder for chaining.
       */
      public Builder addAllBlinkGcMainThreadCycleFullAtomicSweepCompact(
          java.lang.Iterable<? extends java.lang.Double> values) {
        ensureBlinkGcMainThreadCycleFullAtomicSweepCompactIsMutable();
        com.google.protobuf.AbstractMessageLite.Builder.addAll(
            values, blinkGcMainThreadCycleFullAtomicSweepCompact_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated double blink_gc_main_thread_cycle_full_atomic_sweep_compact = 8 [(.perfetto.protos.unit) = "ms_smallerIsBetter"];</code>
       * @return This builder for chaining.
       */
      public Builder clearBlinkGcMainThreadCycleFullAtomicSweepCompact() {
        blinkGcMainThreadCycleFullAtomicSweepCompact_ = emptyDoubleList();
        bitField0_ = (bitField0_ & ~0x00000080);
        onChanged();
        return this;
      }

      private com.google.protobuf.Internal.DoubleList blinkGcCompleteSweep_ = emptyDoubleList();
      private void ensureBlinkGcCompleteSweepIsMutable() {
        if (!((bitField0_ & 0x00000100) != 0)) {
          blinkGcCompleteSweep_ = mutableCopy(blinkGcCompleteSweep_);
          bitField0_ |= 0x00000100;
        }
      }
      /**
       * <code>repeated double blink_gc_complete_sweep = 9 [(.perfetto.protos.unit) = "ms_smallerIsBetter"];</code>
       * @return A list containing the blinkGcCompleteSweep.
       */
      public java.util.List<java.lang.Double>
          getBlinkGcCompleteSweepList() {
        return ((bitField0_ & 0x00000100) != 0) ?
                 java.util.Collections.unmodifiableList(blinkGcCompleteSweep_) : blinkGcCompleteSweep_;
      }
      /**
       * <code>repeated double blink_gc_complete_sweep = 9 [(.perfetto.protos.unit) = "ms_smallerIsBetter"];</code>
       * @return The count of blinkGcCompleteSweep.
       */
      public int getBlinkGcCompleteSweepCount() {
        return blinkGcCompleteSweep_.size();
      }
      /**
       * <code>repeated double blink_gc_complete_sweep = 9 [(.perfetto.protos.unit) = "ms_smallerIsBetter"];</code>
       * @param index The index of the element to return.
       * @return The blinkGcCompleteSweep at the given index.
       */
      public double getBlinkGcCompleteSweep(int index) {
        return blinkGcCompleteSweep_.getDouble(index);
      }
      /**
       * <code>repeated double blink_gc_complete_sweep = 9 [(.perfetto.protos.unit) = "ms_smallerIsBetter"];</code>
       * @param index The index to set the value at.
       * @param value The blinkGcCompleteSweep to set.
       * @return This builder for chaining.
       */
      public Builder setBlinkGcCompleteSweep(
          int index, double value) {
        
        ensureBlinkGcCompleteSweepIsMutable();
        blinkGcCompleteSweep_.setDouble(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated double blink_gc_complete_sweep = 9 [(.perfetto.protos.unit) = "ms_smallerIsBetter"];</code>
       * @param value The blinkGcCompleteSweep to add.
       * @return This builder for chaining.
       */
      public Builder addBlinkGcCompleteSweep(double value) {
        
        ensureBlinkGcCompleteSweepIsMutable();
        blinkGcCompleteSweep_.addDouble(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated double blink_gc_complete_sweep = 9 [(.perfetto.protos.unit) = "ms_smallerIsBetter"];</code>
       * @param values The blinkGcCompleteSweep to add.
       * @return This builder for chaining.
       */
      public Builder addAllBlinkGcCompleteSweep(
          java.lang.Iterable<? extends java.lang.Double> values) {
        ensureBlinkGcCompleteSweepIsMutable();
        com.google.protobuf.AbstractMessageLite.Builder.addAll(
            values, blinkGcCompleteSweep_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated double blink_gc_complete_sweep = 9 [(.perfetto.protos.unit) = "ms_smallerIsBetter"];</code>
       * @return This builder for chaining.
       */
      public Builder clearBlinkGcCompleteSweep() {
        blinkGcCompleteSweep_ = emptyDoubleList();
        bitField0_ = (bitField0_ & ~0x00000100);
        onChanged();
        return this;
      }

      private com.google.protobuf.Internal.DoubleList blinkGcMainThreadCycleFullSweepComplete_ = emptyDoubleList();
      private void ensureBlinkGcMainThreadCycleFullSweepCompleteIsMutable() {
        if (!((bitField0_ & 0x00000200) != 0)) {
          blinkGcMainThreadCycleFullSweepComplete_ = mutableCopy(blinkGcMainThreadCycleFullSweepComplete_);
          bitField0_ |= 0x00000200;
        }
      }
      /**
       * <code>repeated double blink_gc_main_thread_cycle_full_sweep_complete = 10 [(.perfetto.protos.unit) = "ms_smallerIsBetter"];</code>
       * @return A list containing the blinkGcMainThreadCycleFullSweepComplete.
       */
      public java.util.List<java.lang.Double>
          getBlinkGcMainThreadCycleFullSweepCompleteList() {
        return ((bitField0_ & 0x00000200) != 0) ?
                 java.util.Collections.unmodifiableList(blinkGcMainThreadCycleFullSweepComplete_) : blinkGcMainThreadCycleFullSweepComplete_;
      }
      /**
       * <code>repeated double blink_gc_main_thread_cycle_full_sweep_complete = 10 [(.perfetto.protos.unit) = "ms_smallerIsBetter"];</code>
       * @return The count of blinkGcMainThreadCycleFullSweepComplete.
       */
      public int getBlinkGcMainThreadCycleFullSweepCompleteCount() {
        return blinkGcMainThreadCycleFullSweepComplete_.size();
      }
      /**
       * <code>repeated double blink_gc_main_thread_cycle_full_sweep_complete = 10 [(.perfetto.protos.unit) = "ms_smallerIsBetter"];</code>
       * @param index The index of the element to return.
       * @return The blinkGcMainThreadCycleFullSweepComplete at the given index.
       */
      public double getBlinkGcMainThreadCycleFullSweepComplete(int index) {
        return blinkGcMainThreadCycleFullSweepComplete_.getDouble(index);
      }
      /**
       * <code>repeated double blink_gc_main_thread_cycle_full_sweep_complete = 10 [(.perfetto.protos.unit) = "ms_smallerIsBetter"];</code>
       * @param index The index to set the value at.
       * @param value The blinkGcMainThreadCycleFullSweepComplete to set.
       * @return This builder for chaining.
       */
      public Builder setBlinkGcMainThreadCycleFullSweepComplete(
          int index, double value) {
        
        ensureBlinkGcMainThreadCycleFullSweepCompleteIsMutable();
        blinkGcMainThreadCycleFullSweepComplete_.setDouble(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated double blink_gc_main_thread_cycle_full_sweep_complete = 10 [(.perfetto.protos.unit) = "ms_smallerIsBetter"];</code>
       * @param value The blinkGcMainThreadCycleFullSweepComplete to add.
       * @return This builder for chaining.
       */
      public Builder addBlinkGcMainThreadCycleFullSweepComplete(double value) {
        
        ensureBlinkGcMainThreadCycleFullSweepCompleteIsMutable();
        blinkGcMainThreadCycleFullSweepComplete_.addDouble(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated double blink_gc_main_thread_cycle_full_sweep_complete = 10 [(.perfetto.protos.unit) = "ms_smallerIsBetter"];</code>
       * @param values The blinkGcMainThreadCycleFullSweepComplete to add.
       * @return This builder for chaining.
       */
      public Builder addAllBlinkGcMainThreadCycleFullSweepComplete(
          java.lang.Iterable<? extends java.lang.Double> values) {
        ensureBlinkGcMainThreadCycleFullSweepCompleteIsMutable();
        com.google.protobuf.AbstractMessageLite.Builder.addAll(
            values, blinkGcMainThreadCycleFullSweepComplete_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated double blink_gc_main_thread_cycle_full_sweep_complete = 10 [(.perfetto.protos.unit) = "ms_smallerIsBetter"];</code>
       * @return This builder for chaining.
       */
      public Builder clearBlinkGcMainThreadCycleFullSweepComplete() {
        blinkGcMainThreadCycleFullSweepComplete_ = emptyDoubleList();
        bitField0_ = (bitField0_ & ~0x00000200);
        onChanged();
        return this;
      }

      private com.google.protobuf.Internal.DoubleList blinkGcIncrementalStart_ = emptyDoubleList();
      private void ensureBlinkGcIncrementalStartIsMutable() {
        if (!((bitField0_ & 0x00000400) != 0)) {
          blinkGcIncrementalStart_ = mutableCopy(blinkGcIncrementalStart_);
          bitField0_ |= 0x00000400;
        }
      }
      /**
       * <code>repeated double blink_gc_incremental_start = 11 [(.perfetto.protos.unit) = "ms_smallerIsBetter"];</code>
       * @return A list containing the blinkGcIncrementalStart.
       */
      public java.util.List<java.lang.Double>
          getBlinkGcIncrementalStartList() {
        return ((bitField0_ & 0x00000400) != 0) ?
                 java.util.Collections.unmodifiableList(blinkGcIncrementalStart_) : blinkGcIncrementalStart_;
      }
      /**
       * <code>repeated double blink_gc_incremental_start = 11 [(.perfetto.protos.unit) = "ms_smallerIsBetter"];</code>
       * @return The count of blinkGcIncrementalStart.
       */
      public int getBlinkGcIncrementalStartCount() {
        return blinkGcIncrementalStart_.size();
      }
      /**
       * <code>repeated double blink_gc_incremental_start = 11 [(.perfetto.protos.unit) = "ms_smallerIsBetter"];</code>
       * @param index The index of the element to return.
       * @return The blinkGcIncrementalStart at the given index.
       */
      public double getBlinkGcIncrementalStart(int index) {
        return blinkGcIncrementalStart_.getDouble(index);
      }
      /**
       * <code>repeated double blink_gc_incremental_start = 11 [(.perfetto.protos.unit) = "ms_smallerIsBetter"];</code>
       * @param index The index to set the value at.
       * @param value The blinkGcIncrementalStart to set.
       * @return This builder for chaining.
       */
      public Builder setBlinkGcIncrementalStart(
          int index, double value) {
        
        ensureBlinkGcIncrementalStartIsMutable();
        blinkGcIncrementalStart_.setDouble(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated double blink_gc_incremental_start = 11 [(.perfetto.protos.unit) = "ms_smallerIsBetter"];</code>
       * @param value The blinkGcIncrementalStart to add.
       * @return This builder for chaining.
       */
      public Builder addBlinkGcIncrementalStart(double value) {
        
        ensureBlinkGcIncrementalStartIsMutable();
        blinkGcIncrementalStart_.addDouble(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated double blink_gc_incremental_start = 11 [(.perfetto.protos.unit) = "ms_smallerIsBetter"];</code>
       * @param values The blinkGcIncrementalStart to add.
       * @return This builder for chaining.
       */
      public Builder addAllBlinkGcIncrementalStart(
          java.lang.Iterable<? extends java.lang.Double> values) {
        ensureBlinkGcIncrementalStartIsMutable();
        com.google.protobuf.AbstractMessageLite.Builder.addAll(
            values, blinkGcIncrementalStart_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated double blink_gc_incremental_start = 11 [(.perfetto.protos.unit) = "ms_smallerIsBetter"];</code>
       * @return This builder for chaining.
       */
      public Builder clearBlinkGcIncrementalStart() {
        blinkGcIncrementalStart_ = emptyDoubleList();
        bitField0_ = (bitField0_ & ~0x00000400);
        onChanged();
        return this;
      }

      private com.google.protobuf.Internal.DoubleList blinkGcMainThreadCycleFullIncrementalMarkStart_ = emptyDoubleList();
      private void ensureBlinkGcMainThreadCycleFullIncrementalMarkStartIsMutable() {
        if (!((bitField0_ & 0x00000800) != 0)) {
          blinkGcMainThreadCycleFullIncrementalMarkStart_ = mutableCopy(blinkGcMainThreadCycleFullIncrementalMarkStart_);
          bitField0_ |= 0x00000800;
        }
      }
      /**
       * <code>repeated double blink_gc_main_thread_cycle_full_incremental_mark_start = 12 [(.perfetto.protos.unit) = "ms_smallerIsBetter"];</code>
       * @return A list containing the blinkGcMainThreadCycleFullIncrementalMarkStart.
       */
      public java.util.List<java.lang.Double>
          getBlinkGcMainThreadCycleFullIncrementalMarkStartList() {
        return ((bitField0_ & 0x00000800) != 0) ?
                 java.util.Collections.unmodifiableList(blinkGcMainThreadCycleFullIncrementalMarkStart_) : blinkGcMainThreadCycleFullIncrementalMarkStart_;
      }
      /**
       * <code>repeated double blink_gc_main_thread_cycle_full_incremental_mark_start = 12 [(.perfetto.protos.unit) = "ms_smallerIsBetter"];</code>
       * @return The count of blinkGcMainThreadCycleFullIncrementalMarkStart.
       */
      public int getBlinkGcMainThreadCycleFullIncrementalMarkStartCount() {
        return blinkGcMainThreadCycleFullIncrementalMarkStart_.size();
      }
      /**
       * <code>repeated double blink_gc_main_thread_cycle_full_incremental_mark_start = 12 [(.perfetto.protos.unit) = "ms_smallerIsBetter"];</code>
       * @param index The index of the element to return.
       * @return The blinkGcMainThreadCycleFullIncrementalMarkStart at the given index.
       */
      public double getBlinkGcMainThreadCycleFullIncrementalMarkStart(int index) {
        return blinkGcMainThreadCycleFullIncrementalMarkStart_.getDouble(index);
      }
      /**
       * <code>repeated double blink_gc_main_thread_cycle_full_incremental_mark_start = 12 [(.perfetto.protos.unit) = "ms_smallerIsBetter"];</code>
       * @param index The index to set the value at.
       * @param value The blinkGcMainThreadCycleFullIncrementalMarkStart to set.
       * @return This builder for chaining.
       */
      public Builder setBlinkGcMainThreadCycleFullIncrementalMarkStart(
          int index, double value) {
        
        ensureBlinkGcMainThreadCycleFullIncrementalMarkStartIsMutable();
        blinkGcMainThreadCycleFullIncrementalMarkStart_.setDouble(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated double blink_gc_main_thread_cycle_full_incremental_mark_start = 12 [(.perfetto.protos.unit) = "ms_smallerIsBetter"];</code>
       * @param value The blinkGcMainThreadCycleFullIncrementalMarkStart to add.
       * @return This builder for chaining.
       */
      public Builder addBlinkGcMainThreadCycleFullIncrementalMarkStart(double value) {
        
        ensureBlinkGcMainThreadCycleFullIncrementalMarkStartIsMutable();
        blinkGcMainThreadCycleFullIncrementalMarkStart_.addDouble(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated double blink_gc_main_thread_cycle_full_incremental_mark_start = 12 [(.perfetto.protos.unit) = "ms_smallerIsBetter"];</code>
       * @param values The blinkGcMainThreadCycleFullIncrementalMarkStart to add.
       * @return This builder for chaining.
       */
      public Builder addAllBlinkGcMainThreadCycleFullIncrementalMarkStart(
          java.lang.Iterable<? extends java.lang.Double> values) {
        ensureBlinkGcMainThreadCycleFullIncrementalMarkStartIsMutable();
        com.google.protobuf.AbstractMessageLite.Builder.addAll(
            values, blinkGcMainThreadCycleFullIncrementalMarkStart_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated double blink_gc_main_thread_cycle_full_incremental_mark_start = 12 [(.perfetto.protos.unit) = "ms_smallerIsBetter"];</code>
       * @return This builder for chaining.
       */
      public Builder clearBlinkGcMainThreadCycleFullIncrementalMarkStart() {
        blinkGcMainThreadCycleFullIncrementalMarkStart_ = emptyDoubleList();
        bitField0_ = (bitField0_ & ~0x00000800);
        onChanged();
        return this;
      }

      private com.google.protobuf.Internal.DoubleList blinkGcIncrementalStep_ = emptyDoubleList();
      private void ensureBlinkGcIncrementalStepIsMutable() {
        if (!((bitField0_ & 0x00001000) != 0)) {
          blinkGcIncrementalStep_ = mutableCopy(blinkGcIncrementalStep_);
          bitField0_ |= 0x00001000;
        }
      }
      /**
       * <code>repeated double blink_gc_incremental_step = 13 [(.perfetto.protos.unit) = "ms_smallerIsBetter"];</code>
       * @return A list containing the blinkGcIncrementalStep.
       */
      public java.util.List<java.lang.Double>
          getBlinkGcIncrementalStepList() {
        return ((bitField0_ & 0x00001000) != 0) ?
                 java.util.Collections.unmodifiableList(blinkGcIncrementalStep_) : blinkGcIncrementalStep_;
      }
      /**
       * <code>repeated double blink_gc_incremental_step = 13 [(.perfetto.protos.unit) = "ms_smallerIsBetter"];</code>
       * @return The count of blinkGcIncrementalStep.
       */
      public int getBlinkGcIncrementalStepCount() {
        return blinkGcIncrementalStep_.size();
      }
      /**
       * <code>repeated double blink_gc_incremental_step = 13 [(.perfetto.protos.unit) = "ms_smallerIsBetter"];</code>
       * @param index The index of the element to return.
       * @return The blinkGcIncrementalStep at the given index.
       */
      public double getBlinkGcIncrementalStep(int index) {
        return blinkGcIncrementalStep_.getDouble(index);
      }
      /**
       * <code>repeated double blink_gc_incremental_step = 13 [(.perfetto.protos.unit) = "ms_smallerIsBetter"];</code>
       * @param index The index to set the value at.
       * @param value The blinkGcIncrementalStep to set.
       * @return This builder for chaining.
       */
      public Builder setBlinkGcIncrementalStep(
          int index, double value) {
        
        ensureBlinkGcIncrementalStepIsMutable();
        blinkGcIncrementalStep_.setDouble(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated double blink_gc_incremental_step = 13 [(.perfetto.protos.unit) = "ms_smallerIsBetter"];</code>
       * @param value The blinkGcIncrementalStep to add.
       * @return This builder for chaining.
       */
      public Builder addBlinkGcIncrementalStep(double value) {
        
        ensureBlinkGcIncrementalStepIsMutable();
        blinkGcIncrementalStep_.addDouble(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated double blink_gc_incremental_step = 13 [(.perfetto.protos.unit) = "ms_smallerIsBetter"];</code>
       * @param values The blinkGcIncrementalStep to add.
       * @return This builder for chaining.
       */
      public Builder addAllBlinkGcIncrementalStep(
          java.lang.Iterable<? extends java.lang.Double> values) {
        ensureBlinkGcIncrementalStepIsMutable();
        com.google.protobuf.AbstractMessageLite.Builder.addAll(
            values, blinkGcIncrementalStep_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated double blink_gc_incremental_step = 13 [(.perfetto.protos.unit) = "ms_smallerIsBetter"];</code>
       * @return This builder for chaining.
       */
      public Builder clearBlinkGcIncrementalStep() {
        blinkGcIncrementalStep_ = emptyDoubleList();
        bitField0_ = (bitField0_ & ~0x00001000);
        onChanged();
        return this;
      }

      private com.google.protobuf.Internal.DoubleList blinkGcMainThreadCycleFullIncrementalMarkStep_ = emptyDoubleList();
      private void ensureBlinkGcMainThreadCycleFullIncrementalMarkStepIsMutable() {
        if (!((bitField0_ & 0x00002000) != 0)) {
          blinkGcMainThreadCycleFullIncrementalMarkStep_ = mutableCopy(blinkGcMainThreadCycleFullIncrementalMarkStep_);
          bitField0_ |= 0x00002000;
        }
      }
      /**
       * <code>repeated double blink_gc_main_thread_cycle_full_incremental_mark_step = 14 [(.perfetto.protos.unit) = "ms_smallerIsBetter"];</code>
       * @return A list containing the blinkGcMainThreadCycleFullIncrementalMarkStep.
       */
      public java.util.List<java.lang.Double>
          getBlinkGcMainThreadCycleFullIncrementalMarkStepList() {
        return ((bitField0_ & 0x00002000) != 0) ?
                 java.util.Collections.unmodifiableList(blinkGcMainThreadCycleFullIncrementalMarkStep_) : blinkGcMainThreadCycleFullIncrementalMarkStep_;
      }
      /**
       * <code>repeated double blink_gc_main_thread_cycle_full_incremental_mark_step = 14 [(.perfetto.protos.unit) = "ms_smallerIsBetter"];</code>
       * @return The count of blinkGcMainThreadCycleFullIncrementalMarkStep.
       */
      public int getBlinkGcMainThreadCycleFullIncrementalMarkStepCount() {
        return blinkGcMainThreadCycleFullIncrementalMarkStep_.size();
      }
      /**
       * <code>repeated double blink_gc_main_thread_cycle_full_incremental_mark_step = 14 [(.perfetto.protos.unit) = "ms_smallerIsBetter"];</code>
       * @param index The index of the element to return.
       * @return The blinkGcMainThreadCycleFullIncrementalMarkStep at the given index.
       */
      public double getBlinkGcMainThreadCycleFullIncrementalMarkStep(int index) {
        return blinkGcMainThreadCycleFullIncrementalMarkStep_.getDouble(index);
      }
      /**
       * <code>repeated double blink_gc_main_thread_cycle_full_incremental_mark_step = 14 [(.perfetto.protos.unit) = "ms_smallerIsBetter"];</code>
       * @param index The index to set the value at.
       * @param value The blinkGcMainThreadCycleFullIncrementalMarkStep to set.
       * @return This builder for chaining.
       */
      public Builder setBlinkGcMainThreadCycleFullIncrementalMarkStep(
          int index, double value) {
        
        ensureBlinkGcMainThreadCycleFullIncrementalMarkStepIsMutable();
        blinkGcMainThreadCycleFullIncrementalMarkStep_.setDouble(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated double blink_gc_main_thread_cycle_full_incremental_mark_step = 14 [(.perfetto.protos.unit) = "ms_smallerIsBetter"];</code>
       * @param value The blinkGcMainThreadCycleFullIncrementalMarkStep to add.
       * @return This builder for chaining.
       */
      public Builder addBlinkGcMainThreadCycleFullIncrementalMarkStep(double value) {
        
        ensureBlinkGcMainThreadCycleFullIncrementalMarkStepIsMutable();
        blinkGcMainThreadCycleFullIncrementalMarkStep_.addDouble(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated double blink_gc_main_thread_cycle_full_incremental_mark_step = 14 [(.perfetto.protos.unit) = "ms_smallerIsBetter"];</code>
       * @param values The blinkGcMainThreadCycleFullIncrementalMarkStep to add.
       * @return This builder for chaining.
       */
      public Builder addAllBlinkGcMainThreadCycleFullIncrementalMarkStep(
          java.lang.Iterable<? extends java.lang.Double> values) {
        ensureBlinkGcMainThreadCycleFullIncrementalMarkStepIsMutable();
        com.google.protobuf.AbstractMessageLite.Builder.addAll(
            values, blinkGcMainThreadCycleFullIncrementalMarkStep_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated double blink_gc_main_thread_cycle_full_incremental_mark_step = 14 [(.perfetto.protos.unit) = "ms_smallerIsBetter"];</code>
       * @return This builder for chaining.
       */
      public Builder clearBlinkGcMainThreadCycleFullIncrementalMarkStep() {
        blinkGcMainThreadCycleFullIncrementalMarkStep_ = emptyDoubleList();
        bitField0_ = (bitField0_ & ~0x00002000);
        onChanged();
        return this;
      }

      private com.google.protobuf.Internal.DoubleList blinkGcSweepAllocation_ = emptyDoubleList();
      private void ensureBlinkGcSweepAllocationIsMutable() {
        if (!((bitField0_ & 0x00004000) != 0)) {
          blinkGcSweepAllocation_ = mutableCopy(blinkGcSweepAllocation_);
          bitField0_ |= 0x00004000;
        }
      }
      /**
       * <code>repeated double blink_gc_sweep_allocation = 15 [(.perfetto.protos.unit) = "ms_smallerIsBetter"];</code>
       * @return A list containing the blinkGcSweepAllocation.
       */
      public java.util.List<java.lang.Double>
          getBlinkGcSweepAllocationList() {
        return ((bitField0_ & 0x00004000) != 0) ?
                 java.util.Collections.unmodifiableList(blinkGcSweepAllocation_) : blinkGcSweepAllocation_;
      }
      /**
       * <code>repeated double blink_gc_sweep_allocation = 15 [(.perfetto.protos.unit) = "ms_smallerIsBetter"];</code>
       * @return The count of blinkGcSweepAllocation.
       */
      public int getBlinkGcSweepAllocationCount() {
        return blinkGcSweepAllocation_.size();
      }
      /**
       * <code>repeated double blink_gc_sweep_allocation = 15 [(.perfetto.protos.unit) = "ms_smallerIsBetter"];</code>
       * @param index The index of the element to return.
       * @return The blinkGcSweepAllocation at the given index.
       */
      public double getBlinkGcSweepAllocation(int index) {
        return blinkGcSweepAllocation_.getDouble(index);
      }
      /**
       * <code>repeated double blink_gc_sweep_allocation = 15 [(.perfetto.protos.unit) = "ms_smallerIsBetter"];</code>
       * @param index The index to set the value at.
       * @param value The blinkGcSweepAllocation to set.
       * @return This builder for chaining.
       */
      public Builder setBlinkGcSweepAllocation(
          int index, double value) {
        
        ensureBlinkGcSweepAllocationIsMutable();
        blinkGcSweepAllocation_.setDouble(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated double blink_gc_sweep_allocation = 15 [(.perfetto.protos.unit) = "ms_smallerIsBetter"];</code>
       * @param value The blinkGcSweepAllocation to add.
       * @return This builder for chaining.
       */
      public Builder addBlinkGcSweepAllocation(double value) {
        
        ensureBlinkGcSweepAllocationIsMutable();
        blinkGcSweepAllocation_.addDouble(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated double blink_gc_sweep_allocation = 15 [(.perfetto.protos.unit) = "ms_smallerIsBetter"];</code>
       * @param values The blinkGcSweepAllocation to add.
       * @return This builder for chaining.
       */
      public Builder addAllBlinkGcSweepAllocation(
          java.lang.Iterable<? extends java.lang.Double> values) {
        ensureBlinkGcSweepAllocationIsMutable();
        com.google.protobuf.AbstractMessageLite.Builder.addAll(
            values, blinkGcSweepAllocation_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated double blink_gc_sweep_allocation = 15 [(.perfetto.protos.unit) = "ms_smallerIsBetter"];</code>
       * @return This builder for chaining.
       */
      public Builder clearBlinkGcSweepAllocation() {
        blinkGcSweepAllocation_ = emptyDoubleList();
        bitField0_ = (bitField0_ & ~0x00004000);
        onChanged();
        return this;
      }

      private com.google.protobuf.Internal.DoubleList blinkGcMainThreadCycleFullSweepOnAllocation_ = emptyDoubleList();
      private void ensureBlinkGcMainThreadCycleFullSweepOnAllocationIsMutable() {
        if (!((bitField0_ & 0x00008000) != 0)) {
          blinkGcMainThreadCycleFullSweepOnAllocation_ = mutableCopy(blinkGcMainThreadCycleFullSweepOnAllocation_);
          bitField0_ |= 0x00008000;
        }
      }
      /**
       * <code>repeated double blink_gc_main_thread_cycle_full_sweep_on_allocation = 16 [(.perfetto.protos.unit) = "ms_smallerIsBetter"];</code>
       * @return A list containing the blinkGcMainThreadCycleFullSweepOnAllocation.
       */
      public java.util.List<java.lang.Double>
          getBlinkGcMainThreadCycleFullSweepOnAllocationList() {
        return ((bitField0_ & 0x00008000) != 0) ?
                 java.util.Collections.unmodifiableList(blinkGcMainThreadCycleFullSweepOnAllocation_) : blinkGcMainThreadCycleFullSweepOnAllocation_;
      }
      /**
       * <code>repeated double blink_gc_main_thread_cycle_full_sweep_on_allocation = 16 [(.perfetto.protos.unit) = "ms_smallerIsBetter"];</code>
       * @return The count of blinkGcMainThreadCycleFullSweepOnAllocation.
       */
      public int getBlinkGcMainThreadCycleFullSweepOnAllocationCount() {
        return blinkGcMainThreadCycleFullSweepOnAllocation_.size();
      }
      /**
       * <code>repeated double blink_gc_main_thread_cycle_full_sweep_on_allocation = 16 [(.perfetto.protos.unit) = "ms_smallerIsBetter"];</code>
       * @param index The index of the element to return.
       * @return The blinkGcMainThreadCycleFullSweepOnAllocation at the given index.
       */
      public double getBlinkGcMainThreadCycleFullSweepOnAllocation(int index) {
        return blinkGcMainThreadCycleFullSweepOnAllocation_.getDouble(index);
      }
      /**
       * <code>repeated double blink_gc_main_thread_cycle_full_sweep_on_allocation = 16 [(.perfetto.protos.unit) = "ms_smallerIsBetter"];</code>
       * @param index The index to set the value at.
       * @param value The blinkGcMainThreadCycleFullSweepOnAllocation to set.
       * @return This builder for chaining.
       */
      public Builder setBlinkGcMainThreadCycleFullSweepOnAllocation(
          int index, double value) {
        
        ensureBlinkGcMainThreadCycleFullSweepOnAllocationIsMutable();
        blinkGcMainThreadCycleFullSweepOnAllocation_.setDouble(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated double blink_gc_main_thread_cycle_full_sweep_on_allocation = 16 [(.perfetto.protos.unit) = "ms_smallerIsBetter"];</code>
       * @param value The blinkGcMainThreadCycleFullSweepOnAllocation to add.
       * @return This builder for chaining.
       */
      public Builder addBlinkGcMainThreadCycleFullSweepOnAllocation(double value) {
        
        ensureBlinkGcMainThreadCycleFullSweepOnAllocationIsMutable();
        blinkGcMainThreadCycleFullSweepOnAllocation_.addDouble(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated double blink_gc_main_thread_cycle_full_sweep_on_allocation = 16 [(.perfetto.protos.unit) = "ms_smallerIsBetter"];</code>
       * @param values The blinkGcMainThreadCycleFullSweepOnAllocation to add.
       * @return This builder for chaining.
       */
      public Builder addAllBlinkGcMainThreadCycleFullSweepOnAllocation(
          java.lang.Iterable<? extends java.lang.Double> values) {
        ensureBlinkGcMainThreadCycleFullSweepOnAllocationIsMutable();
        com.google.protobuf.AbstractMessageLite.Builder.addAll(
            values, blinkGcMainThreadCycleFullSweepOnAllocation_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated double blink_gc_main_thread_cycle_full_sweep_on_allocation = 16 [(.perfetto.protos.unit) = "ms_smallerIsBetter"];</code>
       * @return This builder for chaining.
       */
      public Builder clearBlinkGcMainThreadCycleFullSweepOnAllocation() {
        blinkGcMainThreadCycleFullSweepOnAllocation_ = emptyDoubleList();
        bitField0_ = (bitField0_ & ~0x00008000);
        onChanged();
        return this;
      }

      private com.google.protobuf.Internal.DoubleList blinkGcSweepTaskForeground_ = emptyDoubleList();
      private void ensureBlinkGcSweepTaskForegroundIsMutable() {
        if (!((bitField0_ & 0x00010000) != 0)) {
          blinkGcSweepTaskForeground_ = mutableCopy(blinkGcSweepTaskForeground_);
          bitField0_ |= 0x00010000;
        }
      }
      /**
       * <code>repeated double blink_gc_sweep_task_foreground = 17 [(.perfetto.protos.unit) = "ms_smallerIsBetter"];</code>
       * @return A list containing the blinkGcSweepTaskForeground.
       */
      public java.util.List<java.lang.Double>
          getBlinkGcSweepTaskForegroundList() {
        return ((bitField0_ & 0x00010000) != 0) ?
                 java.util.Collections.unmodifiableList(blinkGcSweepTaskForeground_) : blinkGcSweepTaskForeground_;
      }
      /**
       * <code>repeated double blink_gc_sweep_task_foreground = 17 [(.perfetto.protos.unit) = "ms_smallerIsBetter"];</code>
       * @return The count of blinkGcSweepTaskForeground.
       */
      public int getBlinkGcSweepTaskForegroundCount() {
        return blinkGcSweepTaskForeground_.size();
      }
      /**
       * <code>repeated double blink_gc_sweep_task_foreground = 17 [(.perfetto.protos.unit) = "ms_smallerIsBetter"];</code>
       * @param index The index of the element to return.
       * @return The blinkGcSweepTaskForeground at the given index.
       */
      public double getBlinkGcSweepTaskForeground(int index) {
        return blinkGcSweepTaskForeground_.getDouble(index);
      }
      /**
       * <code>repeated double blink_gc_sweep_task_foreground = 17 [(.perfetto.protos.unit) = "ms_smallerIsBetter"];</code>
       * @param index The index to set the value at.
       * @param value The blinkGcSweepTaskForeground to set.
       * @return This builder for chaining.
       */
      public Builder setBlinkGcSweepTaskForeground(
          int index, double value) {
        
        ensureBlinkGcSweepTaskForegroundIsMutable();
        blinkGcSweepTaskForeground_.setDouble(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated double blink_gc_sweep_task_foreground = 17 [(.perfetto.protos.unit) = "ms_smallerIsBetter"];</code>
       * @param value The blinkGcSweepTaskForeground to add.
       * @return This builder for chaining.
       */
      public Builder addBlinkGcSweepTaskForeground(double value) {
        
        ensureBlinkGcSweepTaskForegroundIsMutable();
        blinkGcSweepTaskForeground_.addDouble(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated double blink_gc_sweep_task_foreground = 17 [(.perfetto.protos.unit) = "ms_smallerIsBetter"];</code>
       * @param values The blinkGcSweepTaskForeground to add.
       * @return This builder for chaining.
       */
      public Builder addAllBlinkGcSweepTaskForeground(
          java.lang.Iterable<? extends java.lang.Double> values) {
        ensureBlinkGcSweepTaskForegroundIsMutable();
        com.google.protobuf.AbstractMessageLite.Builder.addAll(
            values, blinkGcSweepTaskForeground_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated double blink_gc_sweep_task_foreground = 17 [(.perfetto.protos.unit) = "ms_smallerIsBetter"];</code>
       * @return This builder for chaining.
       */
      public Builder clearBlinkGcSweepTaskForeground() {
        blinkGcSweepTaskForeground_ = emptyDoubleList();
        bitField0_ = (bitField0_ & ~0x00010000);
        onChanged();
        return this;
      }

      private com.google.protobuf.Internal.DoubleList blinkGcMainThreadCycleFullSweepIdle_ = emptyDoubleList();
      private void ensureBlinkGcMainThreadCycleFullSweepIdleIsMutable() {
        if (!((bitField0_ & 0x00020000) != 0)) {
          blinkGcMainThreadCycleFullSweepIdle_ = mutableCopy(blinkGcMainThreadCycleFullSweepIdle_);
          bitField0_ |= 0x00020000;
        }
      }
      /**
       * <code>repeated double blink_gc_main_thread_cycle_full_sweep_idle = 18 [(.perfetto.protos.unit) = "ms_smallerIsBetter"];</code>
       * @return A list containing the blinkGcMainThreadCycleFullSweepIdle.
       */
      public java.util.List<java.lang.Double>
          getBlinkGcMainThreadCycleFullSweepIdleList() {
        return ((bitField0_ & 0x00020000) != 0) ?
                 java.util.Collections.unmodifiableList(blinkGcMainThreadCycleFullSweepIdle_) : blinkGcMainThreadCycleFullSweepIdle_;
      }
      /**
       * <code>repeated double blink_gc_main_thread_cycle_full_sweep_idle = 18 [(.perfetto.protos.unit) = "ms_smallerIsBetter"];</code>
       * @return The count of blinkGcMainThreadCycleFullSweepIdle.
       */
      public int getBlinkGcMainThreadCycleFullSweepIdleCount() {
        return blinkGcMainThreadCycleFullSweepIdle_.size();
      }
      /**
       * <code>repeated double blink_gc_main_thread_cycle_full_sweep_idle = 18 [(.perfetto.protos.unit) = "ms_smallerIsBetter"];</code>
       * @param index The index of the element to return.
       * @return The blinkGcMainThreadCycleFullSweepIdle at the given index.
       */
      public double getBlinkGcMainThreadCycleFullSweepIdle(int index) {
        return blinkGcMainThreadCycleFullSweepIdle_.getDouble(index);
      }
      /**
       * <code>repeated double blink_gc_main_thread_cycle_full_sweep_idle = 18 [(.perfetto.protos.unit) = "ms_smallerIsBetter"];</code>
       * @param index The index to set the value at.
       * @param value The blinkGcMainThreadCycleFullSweepIdle to set.
       * @return This builder for chaining.
       */
      public Builder setBlinkGcMainThreadCycleFullSweepIdle(
          int index, double value) {
        
        ensureBlinkGcMainThreadCycleFullSweepIdleIsMutable();
        blinkGcMainThreadCycleFullSweepIdle_.setDouble(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated double blink_gc_main_thread_cycle_full_sweep_idle = 18 [(.perfetto.protos.unit) = "ms_smallerIsBetter"];</code>
       * @param value The blinkGcMainThreadCycleFullSweepIdle to add.
       * @return This builder for chaining.
       */
      public Builder addBlinkGcMainThreadCycleFullSweepIdle(double value) {
        
        ensureBlinkGcMainThreadCycleFullSweepIdleIsMutable();
        blinkGcMainThreadCycleFullSweepIdle_.addDouble(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated double blink_gc_main_thread_cycle_full_sweep_idle = 18 [(.perfetto.protos.unit) = "ms_smallerIsBetter"];</code>
       * @param values The blinkGcMainThreadCycleFullSweepIdle to add.
       * @return This builder for chaining.
       */
      public Builder addAllBlinkGcMainThreadCycleFullSweepIdle(
          java.lang.Iterable<? extends java.lang.Double> values) {
        ensureBlinkGcMainThreadCycleFullSweepIdleIsMutable();
        com.google.protobuf.AbstractMessageLite.Builder.addAll(
            values, blinkGcMainThreadCycleFullSweepIdle_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated double blink_gc_main_thread_cycle_full_sweep_idle = 18 [(.perfetto.protos.unit) = "ms_smallerIsBetter"];</code>
       * @return This builder for chaining.
       */
      public Builder clearBlinkGcMainThreadCycleFullSweepIdle() {
        blinkGcMainThreadCycleFullSweepIdle_ = emptyDoubleList();
        bitField0_ = (bitField0_ & ~0x00020000);
        onChanged();
        return this;
      }

      private com.google.protobuf.Internal.DoubleList blinkGcUnifiedMarkingByV8_ = emptyDoubleList();
      private void ensureBlinkGcUnifiedMarkingByV8IsMutable() {
        if (!((bitField0_ & 0x00040000) != 0)) {
          blinkGcUnifiedMarkingByV8_ = mutableCopy(blinkGcUnifiedMarkingByV8_);
          bitField0_ |= 0x00040000;
        }
      }
      /**
       * <code>repeated double blink_gc_unified_marking_by_v8 = 19 [(.perfetto.protos.unit) = "ms_smallerIsBetter"];</code>
       * @return A list containing the blinkGcUnifiedMarkingByV8.
       */
      public java.util.List<java.lang.Double>
          getBlinkGcUnifiedMarkingByV8List() {
        return ((bitField0_ & 0x00040000) != 0) ?
                 java.util.Collections.unmodifiableList(blinkGcUnifiedMarkingByV8_) : blinkGcUnifiedMarkingByV8_;
      }
      /**
       * <code>repeated double blink_gc_unified_marking_by_v8 = 19 [(.perfetto.protos.unit) = "ms_smallerIsBetter"];</code>
       * @return The count of blinkGcUnifiedMarkingByV8.
       */
      public int getBlinkGcUnifiedMarkingByV8Count() {
        return blinkGcUnifiedMarkingByV8_.size();
      }
      /**
       * <code>repeated double blink_gc_unified_marking_by_v8 = 19 [(.perfetto.protos.unit) = "ms_smallerIsBetter"];</code>
       * @param index The index of the element to return.
       * @return The blinkGcUnifiedMarkingByV8 at the given index.
       */
      public double getBlinkGcUnifiedMarkingByV8(int index) {
        return blinkGcUnifiedMarkingByV8_.getDouble(index);
      }
      /**
       * <code>repeated double blink_gc_unified_marking_by_v8 = 19 [(.perfetto.protos.unit) = "ms_smallerIsBetter"];</code>
       * @param index The index to set the value at.
       * @param value The blinkGcUnifiedMarkingByV8 to set.
       * @return This builder for chaining.
       */
      public Builder setBlinkGcUnifiedMarkingByV8(
          int index, double value) {
        
        ensureBlinkGcUnifiedMarkingByV8IsMutable();
        blinkGcUnifiedMarkingByV8_.setDouble(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated double blink_gc_unified_marking_by_v8 = 19 [(.perfetto.protos.unit) = "ms_smallerIsBetter"];</code>
       * @param value The blinkGcUnifiedMarkingByV8 to add.
       * @return This builder for chaining.
       */
      public Builder addBlinkGcUnifiedMarkingByV8(double value) {
        
        ensureBlinkGcUnifiedMarkingByV8IsMutable();
        blinkGcUnifiedMarkingByV8_.addDouble(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated double blink_gc_unified_marking_by_v8 = 19 [(.perfetto.protos.unit) = "ms_smallerIsBetter"];</code>
       * @param values The blinkGcUnifiedMarkingByV8 to add.
       * @return This builder for chaining.
       */
      public Builder addAllBlinkGcUnifiedMarkingByV8(
          java.lang.Iterable<? extends java.lang.Double> values) {
        ensureBlinkGcUnifiedMarkingByV8IsMutable();
        com.google.protobuf.AbstractMessageLite.Builder.addAll(
            values, blinkGcUnifiedMarkingByV8_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated double blink_gc_unified_marking_by_v8 = 19 [(.perfetto.protos.unit) = "ms_smallerIsBetter"];</code>
       * @return This builder for chaining.
       */
      public Builder clearBlinkGcUnifiedMarkingByV8() {
        blinkGcUnifiedMarkingByV8_ = emptyDoubleList();
        bitField0_ = (bitField0_ & ~0x00040000);
        onChanged();
        return this;
      }

      private com.google.protobuf.Internal.DoubleList unifiedGcMainThreadCycleFullMarkStep_ = emptyDoubleList();
      private void ensureUnifiedGcMainThreadCycleFullMarkStepIsMutable() {
        if (!((bitField0_ & 0x00080000) != 0)) {
          unifiedGcMainThreadCycleFullMarkStep_ = mutableCopy(unifiedGcMainThreadCycleFullMarkStep_);
          bitField0_ |= 0x00080000;
        }
      }
      /**
       * <code>repeated double unified_gc_main_thread_cycle_full_mark_step = 20 [(.perfetto.protos.unit) = "ms_smallerIsBetter"];</code>
       * @return A list containing the unifiedGcMainThreadCycleFullMarkStep.
       */
      public java.util.List<java.lang.Double>
          getUnifiedGcMainThreadCycleFullMarkStepList() {
        return ((bitField0_ & 0x00080000) != 0) ?
                 java.util.Collections.unmodifiableList(unifiedGcMainThreadCycleFullMarkStep_) : unifiedGcMainThreadCycleFullMarkStep_;
      }
      /**
       * <code>repeated double unified_gc_main_thread_cycle_full_mark_step = 20 [(.perfetto.protos.unit) = "ms_smallerIsBetter"];</code>
       * @return The count of unifiedGcMainThreadCycleFullMarkStep.
       */
      public int getUnifiedGcMainThreadCycleFullMarkStepCount() {
        return unifiedGcMainThreadCycleFullMarkStep_.size();
      }
      /**
       * <code>repeated double unified_gc_main_thread_cycle_full_mark_step = 20 [(.perfetto.protos.unit) = "ms_smallerIsBetter"];</code>
       * @param index The index of the element to return.
       * @return The unifiedGcMainThreadCycleFullMarkStep at the given index.
       */
      public double getUnifiedGcMainThreadCycleFullMarkStep(int index) {
        return unifiedGcMainThreadCycleFullMarkStep_.getDouble(index);
      }
      /**
       * <code>repeated double unified_gc_main_thread_cycle_full_mark_step = 20 [(.perfetto.protos.unit) = "ms_smallerIsBetter"];</code>
       * @param index The index to set the value at.
       * @param value The unifiedGcMainThreadCycleFullMarkStep to set.
       * @return This builder for chaining.
       */
      public Builder setUnifiedGcMainThreadCycleFullMarkStep(
          int index, double value) {
        
        ensureUnifiedGcMainThreadCycleFullMarkStepIsMutable();
        unifiedGcMainThreadCycleFullMarkStep_.setDouble(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated double unified_gc_main_thread_cycle_full_mark_step = 20 [(.perfetto.protos.unit) = "ms_smallerIsBetter"];</code>
       * @param value The unifiedGcMainThreadCycleFullMarkStep to add.
       * @return This builder for chaining.
       */
      public Builder addUnifiedGcMainThreadCycleFullMarkStep(double value) {
        
        ensureUnifiedGcMainThreadCycleFullMarkStepIsMutable();
        unifiedGcMainThreadCycleFullMarkStep_.addDouble(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated double unified_gc_main_thread_cycle_full_mark_step = 20 [(.perfetto.protos.unit) = "ms_smallerIsBetter"];</code>
       * @param values The unifiedGcMainThreadCycleFullMarkStep to add.
       * @return This builder for chaining.
       */
      public Builder addAllUnifiedGcMainThreadCycleFullMarkStep(
          java.lang.Iterable<? extends java.lang.Double> values) {
        ensureUnifiedGcMainThreadCycleFullMarkStepIsMutable();
        com.google.protobuf.AbstractMessageLite.Builder.addAll(
            values, unifiedGcMainThreadCycleFullMarkStep_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated double unified_gc_main_thread_cycle_full_mark_step = 20 [(.perfetto.protos.unit) = "ms_smallerIsBetter"];</code>
       * @return This builder for chaining.
       */
      public Builder clearUnifiedGcMainThreadCycleFullMarkStep() {
        unifiedGcMainThreadCycleFullMarkStep_ = emptyDoubleList();
        bitField0_ = (bitField0_ & ~0x00080000);
        onChanged();
        return this;
      }

      private com.google.protobuf.Internal.DoubleList blinkGcAtomicPause_ = emptyDoubleList();
      private void ensureBlinkGcAtomicPauseIsMutable() {
        if (!((bitField0_ & 0x00100000) != 0)) {
          blinkGcAtomicPause_ = mutableCopy(blinkGcAtomicPause_);
          bitField0_ |= 0x00100000;
        }
      }
      /**
       * <code>repeated double blink_gc_atomic_pause = 21 [(.perfetto.protos.unit) = "ms_smallerIsBetter"];</code>
       * @return A list containing the blinkGcAtomicPause.
       */
      public java.util.List<java.lang.Double>
          getBlinkGcAtomicPauseList() {
        return ((bitField0_ & 0x00100000) != 0) ?
                 java.util.Collections.unmodifiableList(blinkGcAtomicPause_) : blinkGcAtomicPause_;
      }
      /**
       * <code>repeated double blink_gc_atomic_pause = 21 [(.perfetto.protos.unit) = "ms_smallerIsBetter"];</code>
       * @return The count of blinkGcAtomicPause.
       */
      public int getBlinkGcAtomicPauseCount() {
        return blinkGcAtomicPause_.size();
      }
      /**
       * <code>repeated double blink_gc_atomic_pause = 21 [(.perfetto.protos.unit) = "ms_smallerIsBetter"];</code>
       * @param index The index of the element to return.
       * @return The blinkGcAtomicPause at the given index.
       */
      public double getBlinkGcAtomicPause(int index) {
        return blinkGcAtomicPause_.getDouble(index);
      }
      /**
       * <code>repeated double blink_gc_atomic_pause = 21 [(.perfetto.protos.unit) = "ms_smallerIsBetter"];</code>
       * @param index The index to set the value at.
       * @param value The blinkGcAtomicPause to set.
       * @return This builder for chaining.
       */
      public Builder setBlinkGcAtomicPause(
          int index, double value) {
        
        ensureBlinkGcAtomicPauseIsMutable();
        blinkGcAtomicPause_.setDouble(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated double blink_gc_atomic_pause = 21 [(.perfetto.protos.unit) = "ms_smallerIsBetter"];</code>
       * @param value The blinkGcAtomicPause to add.
       * @return This builder for chaining.
       */
      public Builder addBlinkGcAtomicPause(double value) {
        
        ensureBlinkGcAtomicPauseIsMutable();
        blinkGcAtomicPause_.addDouble(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated double blink_gc_atomic_pause = 21 [(.perfetto.protos.unit) = "ms_smallerIsBetter"];</code>
       * @param values The blinkGcAtomicPause to add.
       * @return This builder for chaining.
       */
      public Builder addAllBlinkGcAtomicPause(
          java.lang.Iterable<? extends java.lang.Double> values) {
        ensureBlinkGcAtomicPauseIsMutable();
        com.google.protobuf.AbstractMessageLite.Builder.addAll(
            values, blinkGcAtomicPause_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated double blink_gc_atomic_pause = 21 [(.perfetto.protos.unit) = "ms_smallerIsBetter"];</code>
       * @return This builder for chaining.
       */
      public Builder clearBlinkGcAtomicPause() {
        blinkGcAtomicPause_ = emptyDoubleList();
        bitField0_ = (bitField0_ & ~0x00100000);
        onChanged();
        return this;
      }

      private com.google.protobuf.Internal.DoubleList blinkGcMainThreadCycleFullAtomic_ = emptyDoubleList();
      private void ensureBlinkGcMainThreadCycleFullAtomicIsMutable() {
        if (!((bitField0_ & 0x00200000) != 0)) {
          blinkGcMainThreadCycleFullAtomic_ = mutableCopy(blinkGcMainThreadCycleFullAtomic_);
          bitField0_ |= 0x00200000;
        }
      }
      /**
       * <code>repeated double blink_gc_main_thread_cycle_full_atomic = 22 [(.perfetto.protos.unit) = "ms_smallerIsBetter"];</code>
       * @return A list containing the blinkGcMainThreadCycleFullAtomic.
       */
      public java.util.List<java.lang.Double>
          getBlinkGcMainThreadCycleFullAtomicList() {
        return ((bitField0_ & 0x00200000) != 0) ?
                 java.util.Collections.unmodifiableList(blinkGcMainThreadCycleFullAtomic_) : blinkGcMainThreadCycleFullAtomic_;
      }
      /**
       * <code>repeated double blink_gc_main_thread_cycle_full_atomic = 22 [(.perfetto.protos.unit) = "ms_smallerIsBetter"];</code>
       * @return The count of blinkGcMainThreadCycleFullAtomic.
       */
      public int getBlinkGcMainThreadCycleFullAtomicCount() {
        return blinkGcMainThreadCycleFullAtomic_.size();
      }
      /**
       * <code>repeated double blink_gc_main_thread_cycle_full_atomic = 22 [(.perfetto.protos.unit) = "ms_smallerIsBetter"];</code>
       * @param index The index of the element to return.
       * @return The blinkGcMainThreadCycleFullAtomic at the given index.
       */
      public double getBlinkGcMainThreadCycleFullAtomic(int index) {
        return blinkGcMainThreadCycleFullAtomic_.getDouble(index);
      }
      /**
       * <code>repeated double blink_gc_main_thread_cycle_full_atomic = 22 [(.perfetto.protos.unit) = "ms_smallerIsBetter"];</code>
       * @param index The index to set the value at.
       * @param value The blinkGcMainThreadCycleFullAtomic to set.
       * @return This builder for chaining.
       */
      public Builder setBlinkGcMainThreadCycleFullAtomic(
          int index, double value) {
        
        ensureBlinkGcMainThreadCycleFullAtomicIsMutable();
        blinkGcMainThreadCycleFullAtomic_.setDouble(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated double blink_gc_main_thread_cycle_full_atomic = 22 [(.perfetto.protos.unit) = "ms_smallerIsBetter"];</code>
       * @param value The blinkGcMainThreadCycleFullAtomic to add.
       * @return This builder for chaining.
       */
      public Builder addBlinkGcMainThreadCycleFullAtomic(double value) {
        
        ensureBlinkGcMainThreadCycleFullAtomicIsMutable();
        blinkGcMainThreadCycleFullAtomic_.addDouble(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated double blink_gc_main_thread_cycle_full_atomic = 22 [(.perfetto.protos.unit) = "ms_smallerIsBetter"];</code>
       * @param values The blinkGcMainThreadCycleFullAtomic to add.
       * @return This builder for chaining.
       */
      public Builder addAllBlinkGcMainThreadCycleFullAtomic(
          java.lang.Iterable<? extends java.lang.Double> values) {
        ensureBlinkGcMainThreadCycleFullAtomicIsMutable();
        com.google.protobuf.AbstractMessageLite.Builder.addAll(
            values, blinkGcMainThreadCycleFullAtomic_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated double blink_gc_main_thread_cycle_full_atomic = 22 [(.perfetto.protos.unit) = "ms_smallerIsBetter"];</code>
       * @return This builder for chaining.
       */
      public Builder clearBlinkGcMainThreadCycleFullAtomic() {
        blinkGcMainThreadCycleFullAtomic_ = emptyDoubleList();
        bitField0_ = (bitField0_ & ~0x00200000);
        onChanged();
        return this;
      }

      private com.google.protobuf.Internal.DoubleList blinkGcAtomicPauseMarkTransitiveClosure_ = emptyDoubleList();
      private void ensureBlinkGcAtomicPauseMarkTransitiveClosureIsMutable() {
        if (!((bitField0_ & 0x00400000) != 0)) {
          blinkGcAtomicPauseMarkTransitiveClosure_ = mutableCopy(blinkGcAtomicPauseMarkTransitiveClosure_);
          bitField0_ |= 0x00400000;
        }
      }
      /**
       * <code>repeated double blink_gc_atomic_pause_mark_transitive_closure = 23 [(.perfetto.protos.unit) = "ms_smallerIsBetter"];</code>
       * @return A list containing the blinkGcAtomicPauseMarkTransitiveClosure.
       */
      public java.util.List<java.lang.Double>
          getBlinkGcAtomicPauseMarkTransitiveClosureList() {
        return ((bitField0_ & 0x00400000) != 0) ?
                 java.util.Collections.unmodifiableList(blinkGcAtomicPauseMarkTransitiveClosure_) : blinkGcAtomicPauseMarkTransitiveClosure_;
      }
      /**
       * <code>repeated double blink_gc_atomic_pause_mark_transitive_closure = 23 [(.perfetto.protos.unit) = "ms_smallerIsBetter"];</code>
       * @return The count of blinkGcAtomicPauseMarkTransitiveClosure.
       */
      public int getBlinkGcAtomicPauseMarkTransitiveClosureCount() {
        return blinkGcAtomicPauseMarkTransitiveClosure_.size();
      }
      /**
       * <code>repeated double blink_gc_atomic_pause_mark_transitive_closure = 23 [(.perfetto.protos.unit) = "ms_smallerIsBetter"];</code>
       * @param index The index of the element to return.
       * @return The blinkGcAtomicPauseMarkTransitiveClosure at the given index.
       */
      public double getBlinkGcAtomicPauseMarkTransitiveClosure(int index) {
        return blinkGcAtomicPauseMarkTransitiveClosure_.getDouble(index);
      }
      /**
       * <code>repeated double blink_gc_atomic_pause_mark_transitive_closure = 23 [(.perfetto.protos.unit) = "ms_smallerIsBetter"];</code>
       * @param index The index to set the value at.
       * @param value The blinkGcAtomicPauseMarkTransitiveClosure to set.
       * @return This builder for chaining.
       */
      public Builder setBlinkGcAtomicPauseMarkTransitiveClosure(
          int index, double value) {
        
        ensureBlinkGcAtomicPauseMarkTransitiveClosureIsMutable();
        blinkGcAtomicPauseMarkTransitiveClosure_.setDouble(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated double blink_gc_atomic_pause_mark_transitive_closure = 23 [(.perfetto.protos.unit) = "ms_smallerIsBetter"];</code>
       * @param value The blinkGcAtomicPauseMarkTransitiveClosure to add.
       * @return This builder for chaining.
       */
      public Builder addBlinkGcAtomicPauseMarkTransitiveClosure(double value) {
        
        ensureBlinkGcAtomicPauseMarkTransitiveClosureIsMutable();
        blinkGcAtomicPauseMarkTransitiveClosure_.addDouble(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated double blink_gc_atomic_pause_mark_transitive_closure = 23 [(.perfetto.protos.unit) = "ms_smallerIsBetter"];</code>
       * @param values The blinkGcAtomicPauseMarkTransitiveClosure to add.
       * @return This builder for chaining.
       */
      public Builder addAllBlinkGcAtomicPauseMarkTransitiveClosure(
          java.lang.Iterable<? extends java.lang.Double> values) {
        ensureBlinkGcAtomicPauseMarkTransitiveClosureIsMutable();
        com.google.protobuf.AbstractMessageLite.Builder.addAll(
            values, blinkGcAtomicPauseMarkTransitiveClosure_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated double blink_gc_atomic_pause_mark_transitive_closure = 23 [(.perfetto.protos.unit) = "ms_smallerIsBetter"];</code>
       * @return This builder for chaining.
       */
      public Builder clearBlinkGcAtomicPauseMarkTransitiveClosure() {
        blinkGcAtomicPauseMarkTransitiveClosure_ = emptyDoubleList();
        bitField0_ = (bitField0_ & ~0x00400000);
        onChanged();
        return this;
      }

      private com.google.protobuf.Internal.DoubleList blinkGcMainThreadCycleFullAtomicMarkTransitiveClosure_ = emptyDoubleList();
      private void ensureBlinkGcMainThreadCycleFullAtomicMarkTransitiveClosureIsMutable() {
        if (!((bitField0_ & 0x00800000) != 0)) {
          blinkGcMainThreadCycleFullAtomicMarkTransitiveClosure_ = mutableCopy(blinkGcMainThreadCycleFullAtomicMarkTransitiveClosure_);
          bitField0_ |= 0x00800000;
        }
      }
      /**
       * <code>repeated double blink_gc_main_thread_cycle_full_atomic_mark_transitive_closure = 24 [(.perfetto.protos.unit) = "ms_smallerIsBetter"];</code>
       * @return A list containing the blinkGcMainThreadCycleFullAtomicMarkTransitiveClosure.
       */
      public java.util.List<java.lang.Double>
          getBlinkGcMainThreadCycleFullAtomicMarkTransitiveClosureList() {
        return ((bitField0_ & 0x00800000) != 0) ?
                 java.util.Collections.unmodifiableList(blinkGcMainThreadCycleFullAtomicMarkTransitiveClosure_) : blinkGcMainThreadCycleFullAtomicMarkTransitiveClosure_;
      }
      /**
       * <code>repeated double blink_gc_main_thread_cycle_full_atomic_mark_transitive_closure = 24 [(.perfetto.protos.unit) = "ms_smallerIsBetter"];</code>
       * @return The count of blinkGcMainThreadCycleFullAtomicMarkTransitiveClosure.
       */
      public int getBlinkGcMainThreadCycleFullAtomicMarkTransitiveClosureCount() {
        return blinkGcMainThreadCycleFullAtomicMarkTransitiveClosure_.size();
      }
      /**
       * <code>repeated double blink_gc_main_thread_cycle_full_atomic_mark_transitive_closure = 24 [(.perfetto.protos.unit) = "ms_smallerIsBetter"];</code>
       * @param index The index of the element to return.
       * @return The blinkGcMainThreadCycleFullAtomicMarkTransitiveClosure at the given index.
       */
      public double getBlinkGcMainThreadCycleFullAtomicMarkTransitiveClosure(int index) {
        return blinkGcMainThreadCycleFullAtomicMarkTransitiveClosure_.getDouble(index);
      }
      /**
       * <code>repeated double blink_gc_main_thread_cycle_full_atomic_mark_transitive_closure = 24 [(.perfetto.protos.unit) = "ms_smallerIsBetter"];</code>
       * @param index The index to set the value at.
       * @param value The blinkGcMainThreadCycleFullAtomicMarkTransitiveClosure to set.
       * @return This builder for chaining.
       */
      public Builder setBlinkGcMainThreadCycleFullAtomicMarkTransitiveClosure(
          int index, double value) {
        
        ensureBlinkGcMainThreadCycleFullAtomicMarkTransitiveClosureIsMutable();
        blinkGcMainThreadCycleFullAtomicMarkTransitiveClosure_.setDouble(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated double blink_gc_main_thread_cycle_full_atomic_mark_transitive_closure = 24 [(.perfetto.protos.unit) = "ms_smallerIsBetter"];</code>
       * @param value The blinkGcMainThreadCycleFullAtomicMarkTransitiveClosure to add.
       * @return This builder for chaining.
       */
      public Builder addBlinkGcMainThreadCycleFullAtomicMarkTransitiveClosure(double value) {
        
        ensureBlinkGcMainThreadCycleFullAtomicMarkTransitiveClosureIsMutable();
        blinkGcMainThreadCycleFullAtomicMarkTransitiveClosure_.addDouble(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated double blink_gc_main_thread_cycle_full_atomic_mark_transitive_closure = 24 [(.perfetto.protos.unit) = "ms_smallerIsBetter"];</code>
       * @param values The blinkGcMainThreadCycleFullAtomicMarkTransitiveClosure to add.
       * @return This builder for chaining.
       */
      public Builder addAllBlinkGcMainThreadCycleFullAtomicMarkTransitiveClosure(
          java.lang.Iterable<? extends java.lang.Double> values) {
        ensureBlinkGcMainThreadCycleFullAtomicMarkTransitiveClosureIsMutable();
        com.google.protobuf.AbstractMessageLite.Builder.addAll(
            values, blinkGcMainThreadCycleFullAtomicMarkTransitiveClosure_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated double blink_gc_main_thread_cycle_full_atomic_mark_transitive_closure = 24 [(.perfetto.protos.unit) = "ms_smallerIsBetter"];</code>
       * @return This builder for chaining.
       */
      public Builder clearBlinkGcMainThreadCycleFullAtomicMarkTransitiveClosure() {
        blinkGcMainThreadCycleFullAtomicMarkTransitiveClosure_ = emptyDoubleList();
        bitField0_ = (bitField0_ & ~0x00800000);
        onChanged();
        return this;
      }

      private com.google.protobuf.Internal.DoubleList blinkGcTotal_ = emptyDoubleList();
      private void ensureBlinkGcTotalIsMutable() {
        if (!((bitField0_ & 0x01000000) != 0)) {
          blinkGcTotal_ = mutableCopy(blinkGcTotal_);
          bitField0_ |= 0x01000000;
        }
      }
      /**
       * <code>repeated double blink_gc_total = 25 [(.perfetto.protos.unit) = "ms_smallerIsBetter"];</code>
       * @return A list containing the blinkGcTotal.
       */
      public java.util.List<java.lang.Double>
          getBlinkGcTotalList() {
        return ((bitField0_ & 0x01000000) != 0) ?
                 java.util.Collections.unmodifiableList(blinkGcTotal_) : blinkGcTotal_;
      }
      /**
       * <code>repeated double blink_gc_total = 25 [(.perfetto.protos.unit) = "ms_smallerIsBetter"];</code>
       * @return The count of blinkGcTotal.
       */
      public int getBlinkGcTotalCount() {
        return blinkGcTotal_.size();
      }
      /**
       * <code>repeated double blink_gc_total = 25 [(.perfetto.protos.unit) = "ms_smallerIsBetter"];</code>
       * @param index The index of the element to return.
       * @return The blinkGcTotal at the given index.
       */
      public double getBlinkGcTotal(int index) {
        return blinkGcTotal_.getDouble(index);
      }
      /**
       * <code>repeated double blink_gc_total = 25 [(.perfetto.protos.unit) = "ms_smallerIsBetter"];</code>
       * @param index The index to set the value at.
       * @param value The blinkGcTotal to set.
       * @return This builder for chaining.
       */
      public Builder setBlinkGcTotal(
          int index, double value) {
        
        ensureBlinkGcTotalIsMutable();
        blinkGcTotal_.setDouble(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated double blink_gc_total = 25 [(.perfetto.protos.unit) = "ms_smallerIsBetter"];</code>
       * @param value The blinkGcTotal to add.
       * @return This builder for chaining.
       */
      public Builder addBlinkGcTotal(double value) {
        
        ensureBlinkGcTotalIsMutable();
        blinkGcTotal_.addDouble(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated double blink_gc_total = 25 [(.perfetto.protos.unit) = "ms_smallerIsBetter"];</code>
       * @param values The blinkGcTotal to add.
       * @return This builder for chaining.
       */
      public Builder addAllBlinkGcTotal(
          java.lang.Iterable<? extends java.lang.Double> values) {
        ensureBlinkGcTotalIsMutable();
        com.google.protobuf.AbstractMessageLite.Builder.addAll(
            values, blinkGcTotal_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated double blink_gc_total = 25 [(.perfetto.protos.unit) = "ms_smallerIsBetter"];</code>
       * @return This builder for chaining.
       */
      public Builder clearBlinkGcTotal() {
        blinkGcTotal_ = emptyDoubleList();
        bitField0_ = (bitField0_ & ~0x01000000);
        onChanged();
        return this;
      }

      private com.google.protobuf.Internal.DoubleList blinkGcMainThreadCycleFull_ = emptyDoubleList();
      private void ensureBlinkGcMainThreadCycleFullIsMutable() {
        if (!((bitField0_ & 0x02000000) != 0)) {
          blinkGcMainThreadCycleFull_ = mutableCopy(blinkGcMainThreadCycleFull_);
          bitField0_ |= 0x02000000;
        }
      }
      /**
       * <code>repeated double blink_gc_main_thread_cycle_full = 26 [(.perfetto.protos.unit) = "ms_smallerIsBetter"];</code>
       * @return A list containing the blinkGcMainThreadCycleFull.
       */
      public java.util.List<java.lang.Double>
          getBlinkGcMainThreadCycleFullList() {
        return ((bitField0_ & 0x02000000) != 0) ?
                 java.util.Collections.unmodifiableList(blinkGcMainThreadCycleFull_) : blinkGcMainThreadCycleFull_;
      }
      /**
       * <code>repeated double blink_gc_main_thread_cycle_full = 26 [(.perfetto.protos.unit) = "ms_smallerIsBetter"];</code>
       * @return The count of blinkGcMainThreadCycleFull.
       */
      public int getBlinkGcMainThreadCycleFullCount() {
        return blinkGcMainThreadCycleFull_.size();
      }
      /**
       * <code>repeated double blink_gc_main_thread_cycle_full = 26 [(.perfetto.protos.unit) = "ms_smallerIsBetter"];</code>
       * @param index The index of the element to return.
       * @return The blinkGcMainThreadCycleFull at the given index.
       */
      public double getBlinkGcMainThreadCycleFull(int index) {
        return blinkGcMainThreadCycleFull_.getDouble(index);
      }
      /**
       * <code>repeated double blink_gc_main_thread_cycle_full = 26 [(.perfetto.protos.unit) = "ms_smallerIsBetter"];</code>
       * @param index The index to set the value at.
       * @param value The blinkGcMainThreadCycleFull to set.
       * @return This builder for chaining.
       */
      public Builder setBlinkGcMainThreadCycleFull(
          int index, double value) {
        
        ensureBlinkGcMainThreadCycleFullIsMutable();
        blinkGcMainThreadCycleFull_.setDouble(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated double blink_gc_main_thread_cycle_full = 26 [(.perfetto.protos.unit) = "ms_smallerIsBetter"];</code>
       * @param value The blinkGcMainThreadCycleFull to add.
       * @return This builder for chaining.
       */
      public Builder addBlinkGcMainThreadCycleFull(double value) {
        
        ensureBlinkGcMainThreadCycleFullIsMutable();
        blinkGcMainThreadCycleFull_.addDouble(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated double blink_gc_main_thread_cycle_full = 26 [(.perfetto.protos.unit) = "ms_smallerIsBetter"];</code>
       * @param values The blinkGcMainThreadCycleFull to add.
       * @return This builder for chaining.
       */
      public Builder addAllBlinkGcMainThreadCycleFull(
          java.lang.Iterable<? extends java.lang.Double> values) {
        ensureBlinkGcMainThreadCycleFullIsMutable();
        com.google.protobuf.AbstractMessageLite.Builder.addAll(
            values, blinkGcMainThreadCycleFull_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated double blink_gc_main_thread_cycle_full = 26 [(.perfetto.protos.unit) = "ms_smallerIsBetter"];</code>
       * @return This builder for chaining.
       */
      public Builder clearBlinkGcMainThreadCycleFull() {
        blinkGcMainThreadCycleFull_ = emptyDoubleList();
        bitField0_ = (bitField0_ & ~0x02000000);
        onChanged();
        return this;
      }

      private com.google.protobuf.Internal.DoubleList blinkGcMarkRoots_ = emptyDoubleList();
      private void ensureBlinkGcMarkRootsIsMutable() {
        if (!((bitField0_ & 0x04000000) != 0)) {
          blinkGcMarkRoots_ = mutableCopy(blinkGcMarkRoots_);
          bitField0_ |= 0x04000000;
        }
      }
      /**
       * <code>repeated double blink_gc_mark_roots = 27 [(.perfetto.protos.unit) = "ms_smallerIsBetter"];</code>
       * @return A list containing the blinkGcMarkRoots.
       */
      public java.util.List<java.lang.Double>
          getBlinkGcMarkRootsList() {
        return ((bitField0_ & 0x04000000) != 0) ?
                 java.util.Collections.unmodifiableList(blinkGcMarkRoots_) : blinkGcMarkRoots_;
      }
      /**
       * <code>repeated double blink_gc_mark_roots = 27 [(.perfetto.protos.unit) = "ms_smallerIsBetter"];</code>
       * @return The count of blinkGcMarkRoots.
       */
      public int getBlinkGcMarkRootsCount() {
        return blinkGcMarkRoots_.size();
      }
      /**
       * <code>repeated double blink_gc_mark_roots = 27 [(.perfetto.protos.unit) = "ms_smallerIsBetter"];</code>
       * @param index The index of the element to return.
       * @return The blinkGcMarkRoots at the given index.
       */
      public double getBlinkGcMarkRoots(int index) {
        return blinkGcMarkRoots_.getDouble(index);
      }
      /**
       * <code>repeated double blink_gc_mark_roots = 27 [(.perfetto.protos.unit) = "ms_smallerIsBetter"];</code>
       * @param index The index to set the value at.
       * @param value The blinkGcMarkRoots to set.
       * @return This builder for chaining.
       */
      public Builder setBlinkGcMarkRoots(
          int index, double value) {
        
        ensureBlinkGcMarkRootsIsMutable();
        blinkGcMarkRoots_.setDouble(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated double blink_gc_mark_roots = 27 [(.perfetto.protos.unit) = "ms_smallerIsBetter"];</code>
       * @param value The blinkGcMarkRoots to add.
       * @return This builder for chaining.
       */
      public Builder addBlinkGcMarkRoots(double value) {
        
        ensureBlinkGcMarkRootsIsMutable();
        blinkGcMarkRoots_.addDouble(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated double blink_gc_mark_roots = 27 [(.perfetto.protos.unit) = "ms_smallerIsBetter"];</code>
       * @param values The blinkGcMarkRoots to add.
       * @return This builder for chaining.
       */
      public Builder addAllBlinkGcMarkRoots(
          java.lang.Iterable<? extends java.lang.Double> values) {
        ensureBlinkGcMarkRootsIsMutable();
        com.google.protobuf.AbstractMessageLite.Builder.addAll(
            values, blinkGcMarkRoots_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated double blink_gc_mark_roots = 27 [(.perfetto.protos.unit) = "ms_smallerIsBetter"];</code>
       * @return This builder for chaining.
       */
      public Builder clearBlinkGcMarkRoots() {
        blinkGcMarkRoots_ = emptyDoubleList();
        bitField0_ = (bitField0_ & ~0x04000000);
        onChanged();
        return this;
      }

      private com.google.protobuf.Internal.DoubleList blinkGcMainThreadCycleFullMarkRoots_ = emptyDoubleList();
      private void ensureBlinkGcMainThreadCycleFullMarkRootsIsMutable() {
        if (!((bitField0_ & 0x08000000) != 0)) {
          blinkGcMainThreadCycleFullMarkRoots_ = mutableCopy(blinkGcMainThreadCycleFullMarkRoots_);
          bitField0_ |= 0x08000000;
        }
      }
      /**
       * <code>repeated double blink_gc_main_thread_cycle_full_mark_roots = 28 [(.perfetto.protos.unit) = "ms_smallerIsBetter"];</code>
       * @return A list containing the blinkGcMainThreadCycleFullMarkRoots.
       */
      public java.util.List<java.lang.Double>
          getBlinkGcMainThreadCycleFullMarkRootsList() {
        return ((bitField0_ & 0x08000000) != 0) ?
                 java.util.Collections.unmodifiableList(blinkGcMainThreadCycleFullMarkRoots_) : blinkGcMainThreadCycleFullMarkRoots_;
      }
      /**
       * <code>repeated double blink_gc_main_thread_cycle_full_mark_roots = 28 [(.perfetto.protos.unit) = "ms_smallerIsBetter"];</code>
       * @return The count of blinkGcMainThreadCycleFullMarkRoots.
       */
      public int getBlinkGcMainThreadCycleFullMarkRootsCount() {
        return blinkGcMainThreadCycleFullMarkRoots_.size();
      }
      /**
       * <code>repeated double blink_gc_main_thread_cycle_full_mark_roots = 28 [(.perfetto.protos.unit) = "ms_smallerIsBetter"];</code>
       * @param index The index of the element to return.
       * @return The blinkGcMainThreadCycleFullMarkRoots at the given index.
       */
      public double getBlinkGcMainThreadCycleFullMarkRoots(int index) {
        return blinkGcMainThreadCycleFullMarkRoots_.getDouble(index);
      }
      /**
       * <code>repeated double blink_gc_main_thread_cycle_full_mark_roots = 28 [(.perfetto.protos.unit) = "ms_smallerIsBetter"];</code>
       * @param index The index to set the value at.
       * @param value The blinkGcMainThreadCycleFullMarkRoots to set.
       * @return This builder for chaining.
       */
      public Builder setBlinkGcMainThreadCycleFullMarkRoots(
          int index, double value) {
        
        ensureBlinkGcMainThreadCycleFullMarkRootsIsMutable();
        blinkGcMainThreadCycleFullMarkRoots_.setDouble(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated double blink_gc_main_thread_cycle_full_mark_roots = 28 [(.perfetto.protos.unit) = "ms_smallerIsBetter"];</code>
       * @param value The blinkGcMainThreadCycleFullMarkRoots to add.
       * @return This builder for chaining.
       */
      public Builder addBlinkGcMainThreadCycleFullMarkRoots(double value) {
        
        ensureBlinkGcMainThreadCycleFullMarkRootsIsMutable();
        blinkGcMainThreadCycleFullMarkRoots_.addDouble(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated double blink_gc_main_thread_cycle_full_mark_roots = 28 [(.perfetto.protos.unit) = "ms_smallerIsBetter"];</code>
       * @param values The blinkGcMainThreadCycleFullMarkRoots to add.
       * @return This builder for chaining.
       */
      public Builder addAllBlinkGcMainThreadCycleFullMarkRoots(
          java.lang.Iterable<? extends java.lang.Double> values) {
        ensureBlinkGcMainThreadCycleFullMarkRootsIsMutable();
        com.google.protobuf.AbstractMessageLite.Builder.addAll(
            values, blinkGcMainThreadCycleFullMarkRoots_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated double blink_gc_main_thread_cycle_full_mark_roots = 28 [(.perfetto.protos.unit) = "ms_smallerIsBetter"];</code>
       * @return This builder for chaining.
       */
      public Builder clearBlinkGcMainThreadCycleFullMarkRoots() {
        blinkGcMainThreadCycleFullMarkRoots_ = emptyDoubleList();
        bitField0_ = (bitField0_ & ~0x08000000);
        onChanged();
        return this;
      }

      private com.google.protobuf.Internal.DoubleList blinkGcMarkTransitiveClosure_ = emptyDoubleList();
      private void ensureBlinkGcMarkTransitiveClosureIsMutable() {
        if (!((bitField0_ & 0x10000000) != 0)) {
          blinkGcMarkTransitiveClosure_ = mutableCopy(blinkGcMarkTransitiveClosure_);
          bitField0_ |= 0x10000000;
        }
      }
      /**
       * <code>repeated double blink_gc_mark_transitive_closure = 29 [(.perfetto.protos.unit) = "ms_smallerIsBetter"];</code>
       * @return A list containing the blinkGcMarkTransitiveClosure.
       */
      public java.util.List<java.lang.Double>
          getBlinkGcMarkTransitiveClosureList() {
        return ((bitField0_ & 0x10000000) != 0) ?
                 java.util.Collections.unmodifiableList(blinkGcMarkTransitiveClosure_) : blinkGcMarkTransitiveClosure_;
      }
      /**
       * <code>repeated double blink_gc_mark_transitive_closure = 29 [(.perfetto.protos.unit) = "ms_smallerIsBetter"];</code>
       * @return The count of blinkGcMarkTransitiveClosure.
       */
      public int getBlinkGcMarkTransitiveClosureCount() {
        return blinkGcMarkTransitiveClosure_.size();
      }
      /**
       * <code>repeated double blink_gc_mark_transitive_closure = 29 [(.perfetto.protos.unit) = "ms_smallerIsBetter"];</code>
       * @param index The index of the element to return.
       * @return The blinkGcMarkTransitiveClosure at the given index.
       */
      public double getBlinkGcMarkTransitiveClosure(int index) {
        return blinkGcMarkTransitiveClosure_.getDouble(index);
      }
      /**
       * <code>repeated double blink_gc_mark_transitive_closure = 29 [(.perfetto.protos.unit) = "ms_smallerIsBetter"];</code>
       * @param index The index to set the value at.
       * @param value The blinkGcMarkTransitiveClosure to set.
       * @return This builder for chaining.
       */
      public Builder setBlinkGcMarkTransitiveClosure(
          int index, double value) {
        
        ensureBlinkGcMarkTransitiveClosureIsMutable();
        blinkGcMarkTransitiveClosure_.setDouble(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated double blink_gc_mark_transitive_closure = 29 [(.perfetto.protos.unit) = "ms_smallerIsBetter"];</code>
       * @param value The blinkGcMarkTransitiveClosure to add.
       * @return This builder for chaining.
       */
      public Builder addBlinkGcMarkTransitiveClosure(double value) {
        
        ensureBlinkGcMarkTransitiveClosureIsMutable();
        blinkGcMarkTransitiveClosure_.addDouble(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated double blink_gc_mark_transitive_closure = 29 [(.perfetto.protos.unit) = "ms_smallerIsBetter"];</code>
       * @param values The blinkGcMarkTransitiveClosure to add.
       * @return This builder for chaining.
       */
      public Builder addAllBlinkGcMarkTransitiveClosure(
          java.lang.Iterable<? extends java.lang.Double> values) {
        ensureBlinkGcMarkTransitiveClosureIsMutable();
        com.google.protobuf.AbstractMessageLite.Builder.addAll(
            values, blinkGcMarkTransitiveClosure_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated double blink_gc_mark_transitive_closure = 29 [(.perfetto.protos.unit) = "ms_smallerIsBetter"];</code>
       * @return This builder for chaining.
       */
      public Builder clearBlinkGcMarkTransitiveClosure() {
        blinkGcMarkTransitiveClosure_ = emptyDoubleList();
        bitField0_ = (bitField0_ & ~0x10000000);
        onChanged();
        return this;
      }

      private com.google.protobuf.Internal.DoubleList blinkGcMainThreadCycleFullMarkTransitiveClosure_ = emptyDoubleList();
      private void ensureBlinkGcMainThreadCycleFullMarkTransitiveClosureIsMutable() {
        if (!((bitField0_ & 0x20000000) != 0)) {
          blinkGcMainThreadCycleFullMarkTransitiveClosure_ = mutableCopy(blinkGcMainThreadCycleFullMarkTransitiveClosure_);
          bitField0_ |= 0x20000000;
        }
      }
      /**
       * <code>repeated double blink_gc_main_thread_cycle_full_mark_transitive_closure = 30 [(.perfetto.protos.unit) = "ms_smallerIsBetter"];</code>
       * @return A list containing the blinkGcMainThreadCycleFullMarkTransitiveClosure.
       */
      public java.util.List<java.lang.Double>
          getBlinkGcMainThreadCycleFullMarkTransitiveClosureList() {
        return ((bitField0_ & 0x20000000) != 0) ?
                 java.util.Collections.unmodifiableList(blinkGcMainThreadCycleFullMarkTransitiveClosure_) : blinkGcMainThreadCycleFullMarkTransitiveClosure_;
      }
      /**
       * <code>repeated double blink_gc_main_thread_cycle_full_mark_transitive_closure = 30 [(.perfetto.protos.unit) = "ms_smallerIsBetter"];</code>
       * @return The count of blinkGcMainThreadCycleFullMarkTransitiveClosure.
       */
      public int getBlinkGcMainThreadCycleFullMarkTransitiveClosureCount() {
        return blinkGcMainThreadCycleFullMarkTransitiveClosure_.size();
      }
      /**
       * <code>repeated double blink_gc_main_thread_cycle_full_mark_transitive_closure = 30 [(.perfetto.protos.unit) = "ms_smallerIsBetter"];</code>
       * @param index The index of the element to return.
       * @return The blinkGcMainThreadCycleFullMarkTransitiveClosure at the given index.
       */
      public double getBlinkGcMainThreadCycleFullMarkTransitiveClosure(int index) {
        return blinkGcMainThreadCycleFullMarkTransitiveClosure_.getDouble(index);
      }
      /**
       * <code>repeated double blink_gc_main_thread_cycle_full_mark_transitive_closure = 30 [(.perfetto.protos.unit) = "ms_smallerIsBetter"];</code>
       * @param index The index to set the value at.
       * @param value The blinkGcMainThreadCycleFullMarkTransitiveClosure to set.
       * @return This builder for chaining.
       */
      public Builder setBlinkGcMainThreadCycleFullMarkTransitiveClosure(
          int index, double value) {
        
        ensureBlinkGcMainThreadCycleFullMarkTransitiveClosureIsMutable();
        blinkGcMainThreadCycleFullMarkTransitiveClosure_.setDouble(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated double blink_gc_main_thread_cycle_full_mark_transitive_closure = 30 [(.perfetto.protos.unit) = "ms_smallerIsBetter"];</code>
       * @param value The blinkGcMainThreadCycleFullMarkTransitiveClosure to add.
       * @return This builder for chaining.
       */
      public Builder addBlinkGcMainThreadCycleFullMarkTransitiveClosure(double value) {
        
        ensureBlinkGcMainThreadCycleFullMarkTransitiveClosureIsMutable();
        blinkGcMainThreadCycleFullMarkTransitiveClosure_.addDouble(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated double blink_gc_main_thread_cycle_full_mark_transitive_closure = 30 [(.perfetto.protos.unit) = "ms_smallerIsBetter"];</code>
       * @param values The blinkGcMainThreadCycleFullMarkTransitiveClosure to add.
       * @return This builder for chaining.
       */
      public Builder addAllBlinkGcMainThreadCycleFullMarkTransitiveClosure(
          java.lang.Iterable<? extends java.lang.Double> values) {
        ensureBlinkGcMainThreadCycleFullMarkTransitiveClosureIsMutable();
        com.google.protobuf.AbstractMessageLite.Builder.addAll(
            values, blinkGcMainThreadCycleFullMarkTransitiveClosure_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated double blink_gc_main_thread_cycle_full_mark_transitive_closure = 30 [(.perfetto.protos.unit) = "ms_smallerIsBetter"];</code>
       * @return This builder for chaining.
       */
      public Builder clearBlinkGcMainThreadCycleFullMarkTransitiveClosure() {
        blinkGcMainThreadCycleFullMarkTransitiveClosure_ = emptyDoubleList();
        bitField0_ = (bitField0_ & ~0x20000000);
        onChanged();
        return this;
      }

      private com.google.protobuf.Internal.DoubleList blinkGcMarkForeground_ = emptyDoubleList();
      private void ensureBlinkGcMarkForegroundIsMutable() {
        if (!((bitField0_ & 0x40000000) != 0)) {
          blinkGcMarkForeground_ = mutableCopy(blinkGcMarkForeground_);
          bitField0_ |= 0x40000000;
        }
      }
      /**
       * <code>repeated double blink_gc_mark_foreground = 31 [(.perfetto.protos.unit) = "ms_smallerIsBetter"];</code>
       * @return A list containing the blinkGcMarkForeground.
       */
      public java.util.List<java.lang.Double>
          getBlinkGcMarkForegroundList() {
        return ((bitField0_ & 0x40000000) != 0) ?
                 java.util.Collections.unmodifiableList(blinkGcMarkForeground_) : blinkGcMarkForeground_;
      }
      /**
       * <code>repeated double blink_gc_mark_foreground = 31 [(.perfetto.protos.unit) = "ms_smallerIsBetter"];</code>
       * @return The count of blinkGcMarkForeground.
       */
      public int getBlinkGcMarkForegroundCount() {
        return blinkGcMarkForeground_.size();
      }
      /**
       * <code>repeated double blink_gc_mark_foreground = 31 [(.perfetto.protos.unit) = "ms_smallerIsBetter"];</code>
       * @param index The index of the element to return.
       * @return The blinkGcMarkForeground at the given index.
       */
      public double getBlinkGcMarkForeground(int index) {
        return blinkGcMarkForeground_.getDouble(index);
      }
      /**
       * <code>repeated double blink_gc_mark_foreground = 31 [(.perfetto.protos.unit) = "ms_smallerIsBetter"];</code>
       * @param index The index to set the value at.
       * @param value The blinkGcMarkForeground to set.
       * @return This builder for chaining.
       */
      public Builder setBlinkGcMarkForeground(
          int index, double value) {
        
        ensureBlinkGcMarkForegroundIsMutable();
        blinkGcMarkForeground_.setDouble(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated double blink_gc_mark_foreground = 31 [(.perfetto.protos.unit) = "ms_smallerIsBetter"];</code>
       * @param value The blinkGcMarkForeground to add.
       * @return This builder for chaining.
       */
      public Builder addBlinkGcMarkForeground(double value) {
        
        ensureBlinkGcMarkForegroundIsMutable();
        blinkGcMarkForeground_.addDouble(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated double blink_gc_mark_foreground = 31 [(.perfetto.protos.unit) = "ms_smallerIsBetter"];</code>
       * @param values The blinkGcMarkForeground to add.
       * @return This builder for chaining.
       */
      public Builder addAllBlinkGcMarkForeground(
          java.lang.Iterable<? extends java.lang.Double> values) {
        ensureBlinkGcMarkForegroundIsMutable();
        com.google.protobuf.AbstractMessageLite.Builder.addAll(
            values, blinkGcMarkForeground_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated double blink_gc_mark_foreground = 31 [(.perfetto.protos.unit) = "ms_smallerIsBetter"];</code>
       * @return This builder for chaining.
       */
      public Builder clearBlinkGcMarkForeground() {
        blinkGcMarkForeground_ = emptyDoubleList();
        bitField0_ = (bitField0_ & ~0x40000000);
        onChanged();
        return this;
      }

      private com.google.protobuf.Internal.DoubleList blinkGcMainThreadCycleFullMark_ = emptyDoubleList();
      private void ensureBlinkGcMainThreadCycleFullMarkIsMutable() {
        if (!((bitField0_ & 0x80000000) != 0)) {
          blinkGcMainThreadCycleFullMark_ = mutableCopy(blinkGcMainThreadCycleFullMark_);
          bitField0_ |= 0x80000000;
        }
      }
      /**
       * <code>repeated double blink_gc_main_thread_cycle_full_mark = 32 [(.perfetto.protos.unit) = "ms_smallerIsBetter"];</code>
       * @return A list containing the blinkGcMainThreadCycleFullMark.
       */
      public java.util.List<java.lang.Double>
          getBlinkGcMainThreadCycleFullMarkList() {
        return ((bitField0_ & 0x80000000) != 0) ?
                 java.util.Collections.unmodifiableList(blinkGcMainThreadCycleFullMark_) : blinkGcMainThreadCycleFullMark_;
      }
      /**
       * <code>repeated double blink_gc_main_thread_cycle_full_mark = 32 [(.perfetto.protos.unit) = "ms_smallerIsBetter"];</code>
       * @return The count of blinkGcMainThreadCycleFullMark.
       */
      public int getBlinkGcMainThreadCycleFullMarkCount() {
        return blinkGcMainThreadCycleFullMark_.size();
      }
      /**
       * <code>repeated double blink_gc_main_thread_cycle_full_mark = 32 [(.perfetto.protos.unit) = "ms_smallerIsBetter"];</code>
       * @param index The index of the element to return.
       * @return The blinkGcMainThreadCycleFullMark at the given index.
       */
      public double getBlinkGcMainThreadCycleFullMark(int index) {
        return blinkGcMainThreadCycleFullMark_.getDouble(index);
      }
      /**
       * <code>repeated double blink_gc_main_thread_cycle_full_mark = 32 [(.perfetto.protos.unit) = "ms_smallerIsBetter"];</code>
       * @param index The index to set the value at.
       * @param value The blinkGcMainThreadCycleFullMark to set.
       * @return This builder for chaining.
       */
      public Builder setBlinkGcMainThreadCycleFullMark(
          int index, double value) {
        
        ensureBlinkGcMainThreadCycleFullMarkIsMutable();
        blinkGcMainThreadCycleFullMark_.setDouble(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated double blink_gc_main_thread_cycle_full_mark = 32 [(.perfetto.protos.unit) = "ms_smallerIsBetter"];</code>
       * @param value The blinkGcMainThreadCycleFullMark to add.
       * @return This builder for chaining.
       */
      public Builder addBlinkGcMainThreadCycleFullMark(double value) {
        
        ensureBlinkGcMainThreadCycleFullMarkIsMutable();
        blinkGcMainThreadCycleFullMark_.addDouble(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated double blink_gc_main_thread_cycle_full_mark = 32 [(.perfetto.protos.unit) = "ms_smallerIsBetter"];</code>
       * @param values The blinkGcMainThreadCycleFullMark to add.
       * @return This builder for chaining.
       */
      public Builder addAllBlinkGcMainThreadCycleFullMark(
          java.lang.Iterable<? extends java.lang.Double> values) {
        ensureBlinkGcMainThreadCycleFullMarkIsMutable();
        com.google.protobuf.AbstractMessageLite.Builder.addAll(
            values, blinkGcMainThreadCycleFullMark_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated double blink_gc_main_thread_cycle_full_mark = 32 [(.perfetto.protos.unit) = "ms_smallerIsBetter"];</code>
       * @return This builder for chaining.
       */
      public Builder clearBlinkGcMainThreadCycleFullMark() {
        blinkGcMainThreadCycleFullMark_ = emptyDoubleList();
        bitField0_ = (bitField0_ & ~0x80000000);
        onChanged();
        return this;
      }

      private com.google.protobuf.Internal.DoubleList blinkGcMarkForegroundForced_ = emptyDoubleList();
      private void ensureBlinkGcMarkForegroundForcedIsMutable() {
        if (!((bitField1_ & 0x00000001) != 0)) {
          blinkGcMarkForegroundForced_ = mutableCopy(blinkGcMarkForegroundForced_);
          bitField1_ |= 0x00000001;
        }
      }
      /**
       * <code>repeated double blink_gc_mark_foreground_forced = 33 [(.perfetto.protos.unit) = "ms_smallerIsBetter"];</code>
       * @return A list containing the blinkGcMarkForegroundForced.
       */
      public java.util.List<java.lang.Double>
          getBlinkGcMarkForegroundForcedList() {
        return ((bitField1_ & 0x00000001) != 0) ?
                 java.util.Collections.unmodifiableList(blinkGcMarkForegroundForced_) : blinkGcMarkForegroundForced_;
      }
      /**
       * <code>repeated double blink_gc_mark_foreground_forced = 33 [(.perfetto.protos.unit) = "ms_smallerIsBetter"];</code>
       * @return The count of blinkGcMarkForegroundForced.
       */
      public int getBlinkGcMarkForegroundForcedCount() {
        return blinkGcMarkForegroundForced_.size();
      }
      /**
       * <code>repeated double blink_gc_mark_foreground_forced = 33 [(.perfetto.protos.unit) = "ms_smallerIsBetter"];</code>
       * @param index The index of the element to return.
       * @return The blinkGcMarkForegroundForced at the given index.
       */
      public double getBlinkGcMarkForegroundForced(int index) {
        return blinkGcMarkForegroundForced_.getDouble(index);
      }
      /**
       * <code>repeated double blink_gc_mark_foreground_forced = 33 [(.perfetto.protos.unit) = "ms_smallerIsBetter"];</code>
       * @param index The index to set the value at.
       * @param value The blinkGcMarkForegroundForced to set.
       * @return This builder for chaining.
       */
      public Builder setBlinkGcMarkForegroundForced(
          int index, double value) {
        
        ensureBlinkGcMarkForegroundForcedIsMutable();
        blinkGcMarkForegroundForced_.setDouble(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated double blink_gc_mark_foreground_forced = 33 [(.perfetto.protos.unit) = "ms_smallerIsBetter"];</code>
       * @param value The blinkGcMarkForegroundForced to add.
       * @return This builder for chaining.
       */
      public Builder addBlinkGcMarkForegroundForced(double value) {
        
        ensureBlinkGcMarkForegroundForcedIsMutable();
        blinkGcMarkForegroundForced_.addDouble(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated double blink_gc_mark_foreground_forced = 33 [(.perfetto.protos.unit) = "ms_smallerIsBetter"];</code>
       * @param values The blinkGcMarkForegroundForced to add.
       * @return This builder for chaining.
       */
      public Builder addAllBlinkGcMarkForegroundForced(
          java.lang.Iterable<? extends java.lang.Double> values) {
        ensureBlinkGcMarkForegroundForcedIsMutable();
        com.google.protobuf.AbstractMessageLite.Builder.addAll(
            values, blinkGcMarkForegroundForced_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated double blink_gc_mark_foreground_forced = 33 [(.perfetto.protos.unit) = "ms_smallerIsBetter"];</code>
       * @return This builder for chaining.
       */
      public Builder clearBlinkGcMarkForegroundForced() {
        blinkGcMarkForegroundForced_ = emptyDoubleList();
        bitField1_ = (bitField1_ & ~0x00000001);
        onChanged();
        return this;
      }

      private com.google.protobuf.Internal.DoubleList blinkGcMainThreadCycleFullMarkForced_ = emptyDoubleList();
      private void ensureBlinkGcMainThreadCycleFullMarkForcedIsMutable() {
        if (!((bitField1_ & 0x00000002) != 0)) {
          blinkGcMainThreadCycleFullMarkForced_ = mutableCopy(blinkGcMainThreadCycleFullMarkForced_);
          bitField1_ |= 0x00000002;
        }
      }
      /**
       * <code>repeated double blink_gc_main_thread_cycle_full_mark_forced = 34 [(.perfetto.protos.unit) = "ms_smallerIsBetter"];</code>
       * @return A list containing the blinkGcMainThreadCycleFullMarkForced.
       */
      public java.util.List<java.lang.Double>
          getBlinkGcMainThreadCycleFullMarkForcedList() {
        return ((bitField1_ & 0x00000002) != 0) ?
                 java.util.Collections.unmodifiableList(blinkGcMainThreadCycleFullMarkForced_) : blinkGcMainThreadCycleFullMarkForced_;
      }
      /**
       * <code>repeated double blink_gc_main_thread_cycle_full_mark_forced = 34 [(.perfetto.protos.unit) = "ms_smallerIsBetter"];</code>
       * @return The count of blinkGcMainThreadCycleFullMarkForced.
       */
      public int getBlinkGcMainThreadCycleFullMarkForcedCount() {
        return blinkGcMainThreadCycleFullMarkForced_.size();
      }
      /**
       * <code>repeated double blink_gc_main_thread_cycle_full_mark_forced = 34 [(.perfetto.protos.unit) = "ms_smallerIsBetter"];</code>
       * @param index The index of the element to return.
       * @return The blinkGcMainThreadCycleFullMarkForced at the given index.
       */
      public double getBlinkGcMainThreadCycleFullMarkForced(int index) {
        return blinkGcMainThreadCycleFullMarkForced_.getDouble(index);
      }
      /**
       * <code>repeated double blink_gc_main_thread_cycle_full_mark_forced = 34 [(.perfetto.protos.unit) = "ms_smallerIsBetter"];</code>
       * @param index The index to set the value at.
       * @param value The blinkGcMainThreadCycleFullMarkForced to set.
       * @return This builder for chaining.
       */
      public Builder setBlinkGcMainThreadCycleFullMarkForced(
          int index, double value) {
        
        ensureBlinkGcMainThreadCycleFullMarkForcedIsMutable();
        blinkGcMainThreadCycleFullMarkForced_.setDouble(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated double blink_gc_main_thread_cycle_full_mark_forced = 34 [(.perfetto.protos.unit) = "ms_smallerIsBetter"];</code>
       * @param value The blinkGcMainThreadCycleFullMarkForced to add.
       * @return This builder for chaining.
       */
      public Builder addBlinkGcMainThreadCycleFullMarkForced(double value) {
        
        ensureBlinkGcMainThreadCycleFullMarkForcedIsMutable();
        blinkGcMainThreadCycleFullMarkForced_.addDouble(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated double blink_gc_main_thread_cycle_full_mark_forced = 34 [(.perfetto.protos.unit) = "ms_smallerIsBetter"];</code>
       * @param values The blinkGcMainThreadCycleFullMarkForced to add.
       * @return This builder for chaining.
       */
      public Builder addAllBlinkGcMainThreadCycleFullMarkForced(
          java.lang.Iterable<? extends java.lang.Double> values) {
        ensureBlinkGcMainThreadCycleFullMarkForcedIsMutable();
        com.google.protobuf.AbstractMessageLite.Builder.addAll(
            values, blinkGcMainThreadCycleFullMarkForced_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated double blink_gc_main_thread_cycle_full_mark_forced = 34 [(.perfetto.protos.unit) = "ms_smallerIsBetter"];</code>
       * @return This builder for chaining.
       */
      public Builder clearBlinkGcMainThreadCycleFullMarkForced() {
        blinkGcMainThreadCycleFullMarkForced_ = emptyDoubleList();
        bitField1_ = (bitField1_ & ~0x00000002);
        onChanged();
        return this;
      }

      private com.google.protobuf.Internal.DoubleList blinkGcMarkBackground_ = emptyDoubleList();
      private void ensureBlinkGcMarkBackgroundIsMutable() {
        if (!((bitField1_ & 0x00000004) != 0)) {
          blinkGcMarkBackground_ = mutableCopy(blinkGcMarkBackground_);
          bitField1_ |= 0x00000004;
        }
      }
      /**
       * <code>repeated double blink_gc_mark_background = 35 [(.perfetto.protos.unit) = "ms_smallerIsBetter"];</code>
       * @return A list containing the blinkGcMarkBackground.
       */
      public java.util.List<java.lang.Double>
          getBlinkGcMarkBackgroundList() {
        return ((bitField1_ & 0x00000004) != 0) ?
                 java.util.Collections.unmodifiableList(blinkGcMarkBackground_) : blinkGcMarkBackground_;
      }
      /**
       * <code>repeated double blink_gc_mark_background = 35 [(.perfetto.protos.unit) = "ms_smallerIsBetter"];</code>
       * @return The count of blinkGcMarkBackground.
       */
      public int getBlinkGcMarkBackgroundCount() {
        return blinkGcMarkBackground_.size();
      }
      /**
       * <code>repeated double blink_gc_mark_background = 35 [(.perfetto.protos.unit) = "ms_smallerIsBetter"];</code>
       * @param index The index of the element to return.
       * @return The blinkGcMarkBackground at the given index.
       */
      public double getBlinkGcMarkBackground(int index) {
        return blinkGcMarkBackground_.getDouble(index);
      }
      /**
       * <code>repeated double blink_gc_mark_background = 35 [(.perfetto.protos.unit) = "ms_smallerIsBetter"];</code>
       * @param index The index to set the value at.
       * @param value The blinkGcMarkBackground to set.
       * @return This builder for chaining.
       */
      public Builder setBlinkGcMarkBackground(
          int index, double value) {
        
        ensureBlinkGcMarkBackgroundIsMutable();
        blinkGcMarkBackground_.setDouble(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated double blink_gc_mark_background = 35 [(.perfetto.protos.unit) = "ms_smallerIsBetter"];</code>
       * @param value The blinkGcMarkBackground to add.
       * @return This builder for chaining.
       */
      public Builder addBlinkGcMarkBackground(double value) {
        
        ensureBlinkGcMarkBackgroundIsMutable();
        blinkGcMarkBackground_.addDouble(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated double blink_gc_mark_background = 35 [(.perfetto.protos.unit) = "ms_smallerIsBetter"];</code>
       * @param values The blinkGcMarkBackground to add.
       * @return This builder for chaining.
       */
      public Builder addAllBlinkGcMarkBackground(
          java.lang.Iterable<? extends java.lang.Double> values) {
        ensureBlinkGcMarkBackgroundIsMutable();
        com.google.protobuf.AbstractMessageLite.Builder.addAll(
            values, blinkGcMarkBackground_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated double blink_gc_mark_background = 35 [(.perfetto.protos.unit) = "ms_smallerIsBetter"];</code>
       * @return This builder for chaining.
       */
      public Builder clearBlinkGcMarkBackground() {
        blinkGcMarkBackground_ = emptyDoubleList();
        bitField1_ = (bitField1_ & ~0x00000004);
        onChanged();
        return this;
      }

      private com.google.protobuf.Internal.DoubleList blinkGcConcurrentThreadCycleFullMark_ = emptyDoubleList();
      private void ensureBlinkGcConcurrentThreadCycleFullMarkIsMutable() {
        if (!((bitField1_ & 0x00000008) != 0)) {
          blinkGcConcurrentThreadCycleFullMark_ = mutableCopy(blinkGcConcurrentThreadCycleFullMark_);
          bitField1_ |= 0x00000008;
        }
      }
      /**
       * <code>repeated double blink_gc_concurrent_thread_cycle_full_mark = 36 [(.perfetto.protos.unit) = "ms_smallerIsBetter"];</code>
       * @return A list containing the blinkGcConcurrentThreadCycleFullMark.
       */
      public java.util.List<java.lang.Double>
          getBlinkGcConcurrentThreadCycleFullMarkList() {
        return ((bitField1_ & 0x00000008) != 0) ?
                 java.util.Collections.unmodifiableList(blinkGcConcurrentThreadCycleFullMark_) : blinkGcConcurrentThreadCycleFullMark_;
      }
      /**
       * <code>repeated double blink_gc_concurrent_thread_cycle_full_mark = 36 [(.perfetto.protos.unit) = "ms_smallerIsBetter"];</code>
       * @return The count of blinkGcConcurrentThreadCycleFullMark.
       */
      public int getBlinkGcConcurrentThreadCycleFullMarkCount() {
        return blinkGcConcurrentThreadCycleFullMark_.size();
      }
      /**
       * <code>repeated double blink_gc_concurrent_thread_cycle_full_mark = 36 [(.perfetto.protos.unit) = "ms_smallerIsBetter"];</code>
       * @param index The index of the element to return.
       * @return The blinkGcConcurrentThreadCycleFullMark at the given index.
       */
      public double getBlinkGcConcurrentThreadCycleFullMark(int index) {
        return blinkGcConcurrentThreadCycleFullMark_.getDouble(index);
      }
      /**
       * <code>repeated double blink_gc_concurrent_thread_cycle_full_mark = 36 [(.perfetto.protos.unit) = "ms_smallerIsBetter"];</code>
       * @param index The index to set the value at.
       * @param value The blinkGcConcurrentThreadCycleFullMark to set.
       * @return This builder for chaining.
       */
      public Builder setBlinkGcConcurrentThreadCycleFullMark(
          int index, double value) {
        
        ensureBlinkGcConcurrentThreadCycleFullMarkIsMutable();
        blinkGcConcurrentThreadCycleFullMark_.setDouble(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated double blink_gc_concurrent_thread_cycle_full_mark = 36 [(.perfetto.protos.unit) = "ms_smallerIsBetter"];</code>
       * @param value The blinkGcConcurrentThreadCycleFullMark to add.
       * @return This builder for chaining.
       */
      public Builder addBlinkGcConcurrentThreadCycleFullMark(double value) {
        
        ensureBlinkGcConcurrentThreadCycleFullMarkIsMutable();
        blinkGcConcurrentThreadCycleFullMark_.addDouble(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated double blink_gc_concurrent_thread_cycle_full_mark = 36 [(.perfetto.protos.unit) = "ms_smallerIsBetter"];</code>
       * @param values The blinkGcConcurrentThreadCycleFullMark to add.
       * @return This builder for chaining.
       */
      public Builder addAllBlinkGcConcurrentThreadCycleFullMark(
          java.lang.Iterable<? extends java.lang.Double> values) {
        ensureBlinkGcConcurrentThreadCycleFullMarkIsMutable();
        com.google.protobuf.AbstractMessageLite.Builder.addAll(
            values, blinkGcConcurrentThreadCycleFullMark_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated double blink_gc_concurrent_thread_cycle_full_mark = 36 [(.perfetto.protos.unit) = "ms_smallerIsBetter"];</code>
       * @return This builder for chaining.
       */
      public Builder clearBlinkGcConcurrentThreadCycleFullMark() {
        blinkGcConcurrentThreadCycleFullMark_ = emptyDoubleList();
        bitField1_ = (bitField1_ & ~0x00000008);
        onChanged();
        return this;
      }

      private com.google.protobuf.Internal.DoubleList blinkGcSweepForeground_ = emptyDoubleList();
      private void ensureBlinkGcSweepForegroundIsMutable() {
        if (!((bitField1_ & 0x00000010) != 0)) {
          blinkGcSweepForeground_ = mutableCopy(blinkGcSweepForeground_);
          bitField1_ |= 0x00000010;
        }
      }
      /**
       * <code>repeated double blink_gc_sweep_foreground = 37 [(.perfetto.protos.unit) = "ms_smallerIsBetter"];</code>
       * @return A list containing the blinkGcSweepForeground.
       */
      public java.util.List<java.lang.Double>
          getBlinkGcSweepForegroundList() {
        return ((bitField1_ & 0x00000010) != 0) ?
                 java.util.Collections.unmodifiableList(blinkGcSweepForeground_) : blinkGcSweepForeground_;
      }
      /**
       * <code>repeated double blink_gc_sweep_foreground = 37 [(.perfetto.protos.unit) = "ms_smallerIsBetter"];</code>
       * @return The count of blinkGcSweepForeground.
       */
      public int getBlinkGcSweepForegroundCount() {
        return blinkGcSweepForeground_.size();
      }
      /**
       * <code>repeated double blink_gc_sweep_foreground = 37 [(.perfetto.protos.unit) = "ms_smallerIsBetter"];</code>
       * @param index The index of the element to return.
       * @return The blinkGcSweepForeground at the given index.
       */
      public double getBlinkGcSweepForeground(int index) {
        return blinkGcSweepForeground_.getDouble(index);
      }
      /**
       * <code>repeated double blink_gc_sweep_foreground = 37 [(.perfetto.protos.unit) = "ms_smallerIsBetter"];</code>
       * @param index The index to set the value at.
       * @param value The blinkGcSweepForeground to set.
       * @return This builder for chaining.
       */
      public Builder setBlinkGcSweepForeground(
          int index, double value) {
        
        ensureBlinkGcSweepForegroundIsMutable();
        blinkGcSweepForeground_.setDouble(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated double blink_gc_sweep_foreground = 37 [(.perfetto.protos.unit) = "ms_smallerIsBetter"];</code>
       * @param value The blinkGcSweepForeground to add.
       * @return This builder for chaining.
       */
      public Builder addBlinkGcSweepForeground(double value) {
        
        ensureBlinkGcSweepForegroundIsMutable();
        blinkGcSweepForeground_.addDouble(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated double blink_gc_sweep_foreground = 37 [(.perfetto.protos.unit) = "ms_smallerIsBetter"];</code>
       * @param values The blinkGcSweepForeground to add.
       * @return This builder for chaining.
       */
      public Builder addAllBlinkGcSweepForeground(
          java.lang.Iterable<? extends java.lang.Double> values) {
        ensureBlinkGcSweepForegroundIsMutable();
        com.google.protobuf.AbstractMessageLite.Builder.addAll(
            values, blinkGcSweepForeground_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated double blink_gc_sweep_foreground = 37 [(.perfetto.protos.unit) = "ms_smallerIsBetter"];</code>
       * @return This builder for chaining.
       */
      public Builder clearBlinkGcSweepForeground() {
        blinkGcSweepForeground_ = emptyDoubleList();
        bitField1_ = (bitField1_ & ~0x00000010);
        onChanged();
        return this;
      }

      private com.google.protobuf.Internal.DoubleList blinkGcMainThreadCycleFullSweep_ = emptyDoubleList();
      private void ensureBlinkGcMainThreadCycleFullSweepIsMutable() {
        if (!((bitField1_ & 0x00000020) != 0)) {
          blinkGcMainThreadCycleFullSweep_ = mutableCopy(blinkGcMainThreadCycleFullSweep_);
          bitField1_ |= 0x00000020;
        }
      }
      /**
       * <code>repeated double blink_gc_main_thread_cycle_full_sweep = 38 [(.perfetto.protos.unit) = "ms_smallerIsBetter"];</code>
       * @return A list containing the blinkGcMainThreadCycleFullSweep.
       */
      public java.util.List<java.lang.Double>
          getBlinkGcMainThreadCycleFullSweepList() {
        return ((bitField1_ & 0x00000020) != 0) ?
                 java.util.Collections.unmodifiableList(blinkGcMainThreadCycleFullSweep_) : blinkGcMainThreadCycleFullSweep_;
      }
      /**
       * <code>repeated double blink_gc_main_thread_cycle_full_sweep = 38 [(.perfetto.protos.unit) = "ms_smallerIsBetter"];</code>
       * @return The count of blinkGcMainThreadCycleFullSweep.
       */
      public int getBlinkGcMainThreadCycleFullSweepCount() {
        return blinkGcMainThreadCycleFullSweep_.size();
      }
      /**
       * <code>repeated double blink_gc_main_thread_cycle_full_sweep = 38 [(.perfetto.protos.unit) = "ms_smallerIsBetter"];</code>
       * @param index The index of the element to return.
       * @return The blinkGcMainThreadCycleFullSweep at the given index.
       */
      public double getBlinkGcMainThreadCycleFullSweep(int index) {
        return blinkGcMainThreadCycleFullSweep_.getDouble(index);
      }
      /**
       * <code>repeated double blink_gc_main_thread_cycle_full_sweep = 38 [(.perfetto.protos.unit) = "ms_smallerIsBetter"];</code>
       * @param index The index to set the value at.
       * @param value The blinkGcMainThreadCycleFullSweep to set.
       * @return This builder for chaining.
       */
      public Builder setBlinkGcMainThreadCycleFullSweep(
          int index, double value) {
        
        ensureBlinkGcMainThreadCycleFullSweepIsMutable();
        blinkGcMainThreadCycleFullSweep_.setDouble(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated double blink_gc_main_thread_cycle_full_sweep = 38 [(.perfetto.protos.unit) = "ms_smallerIsBetter"];</code>
       * @param value The blinkGcMainThreadCycleFullSweep to add.
       * @return This builder for chaining.
       */
      public Builder addBlinkGcMainThreadCycleFullSweep(double value) {
        
        ensureBlinkGcMainThreadCycleFullSweepIsMutable();
        blinkGcMainThreadCycleFullSweep_.addDouble(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated double blink_gc_main_thread_cycle_full_sweep = 38 [(.perfetto.protos.unit) = "ms_smallerIsBetter"];</code>
       * @param values The blinkGcMainThreadCycleFullSweep to add.
       * @return This builder for chaining.
       */
      public Builder addAllBlinkGcMainThreadCycleFullSweep(
          java.lang.Iterable<? extends java.lang.Double> values) {
        ensureBlinkGcMainThreadCycleFullSweepIsMutable();
        com.google.protobuf.AbstractMessageLite.Builder.addAll(
            values, blinkGcMainThreadCycleFullSweep_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated double blink_gc_main_thread_cycle_full_sweep = 38 [(.perfetto.protos.unit) = "ms_smallerIsBetter"];</code>
       * @return This builder for chaining.
       */
      public Builder clearBlinkGcMainThreadCycleFullSweep() {
        blinkGcMainThreadCycleFullSweep_ = emptyDoubleList();
        bitField1_ = (bitField1_ & ~0x00000020);
        onChanged();
        return this;
      }

      private com.google.protobuf.Internal.DoubleList blinkGcSweepBackground_ = emptyDoubleList();
      private void ensureBlinkGcSweepBackgroundIsMutable() {
        if (!((bitField1_ & 0x00000040) != 0)) {
          blinkGcSweepBackground_ = mutableCopy(blinkGcSweepBackground_);
          bitField1_ |= 0x00000040;
        }
      }
      /**
       * <code>repeated double blink_gc_sweep_background = 39 [(.perfetto.protos.unit) = "ms_smallerIsBetter"];</code>
       * @return A list containing the blinkGcSweepBackground.
       */
      public java.util.List<java.lang.Double>
          getBlinkGcSweepBackgroundList() {
        return ((bitField1_ & 0x00000040) != 0) ?
                 java.util.Collections.unmodifiableList(blinkGcSweepBackground_) : blinkGcSweepBackground_;
      }
      /**
       * <code>repeated double blink_gc_sweep_background = 39 [(.perfetto.protos.unit) = "ms_smallerIsBetter"];</code>
       * @return The count of blinkGcSweepBackground.
       */
      public int getBlinkGcSweepBackgroundCount() {
        return blinkGcSweepBackground_.size();
      }
      /**
       * <code>repeated double blink_gc_sweep_background = 39 [(.perfetto.protos.unit) = "ms_smallerIsBetter"];</code>
       * @param index The index of the element to return.
       * @return The blinkGcSweepBackground at the given index.
       */
      public double getBlinkGcSweepBackground(int index) {
        return blinkGcSweepBackground_.getDouble(index);
      }
      /**
       * <code>repeated double blink_gc_sweep_background = 39 [(.perfetto.protos.unit) = "ms_smallerIsBetter"];</code>
       * @param index The index to set the value at.
       * @param value The blinkGcSweepBackground to set.
       * @return This builder for chaining.
       */
      public Builder setBlinkGcSweepBackground(
          int index, double value) {
        
        ensureBlinkGcSweepBackgroundIsMutable();
        blinkGcSweepBackground_.setDouble(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated double blink_gc_sweep_background = 39 [(.perfetto.protos.unit) = "ms_smallerIsBetter"];</code>
       * @param value The blinkGcSweepBackground to add.
       * @return This builder for chaining.
       */
      public Builder addBlinkGcSweepBackground(double value) {
        
        ensureBlinkGcSweepBackgroundIsMutable();
        blinkGcSweepBackground_.addDouble(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated double blink_gc_sweep_background = 39 [(.perfetto.protos.unit) = "ms_smallerIsBetter"];</code>
       * @param values The blinkGcSweepBackground to add.
       * @return This builder for chaining.
       */
      public Builder addAllBlinkGcSweepBackground(
          java.lang.Iterable<? extends java.lang.Double> values) {
        ensureBlinkGcSweepBackgroundIsMutable();
        com.google.protobuf.AbstractMessageLite.Builder.addAll(
            values, blinkGcSweepBackground_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated double blink_gc_sweep_background = 39 [(.perfetto.protos.unit) = "ms_smallerIsBetter"];</code>
       * @return This builder for chaining.
       */
      public Builder clearBlinkGcSweepBackground() {
        blinkGcSweepBackground_ = emptyDoubleList();
        bitField1_ = (bitField1_ & ~0x00000040);
        onChanged();
        return this;
      }

      private com.google.protobuf.Internal.DoubleList blinkGcConcurrentThreadCycleFullSweep_ = emptyDoubleList();
      private void ensureBlinkGcConcurrentThreadCycleFullSweepIsMutable() {
        if (!((bitField1_ & 0x00000080) != 0)) {
          blinkGcConcurrentThreadCycleFullSweep_ = mutableCopy(blinkGcConcurrentThreadCycleFullSweep_);
          bitField1_ |= 0x00000080;
        }
      }
      /**
       * <code>repeated double blink_gc_concurrent_thread_cycle_full_sweep = 40 [(.perfetto.protos.unit) = "ms_smallerIsBetter"];</code>
       * @return A list containing the blinkGcConcurrentThreadCycleFullSweep.
       */
      public java.util.List<java.lang.Double>
          getBlinkGcConcurrentThreadCycleFullSweepList() {
        return ((bitField1_ & 0x00000080) != 0) ?
                 java.util.Collections.unmodifiableList(blinkGcConcurrentThreadCycleFullSweep_) : blinkGcConcurrentThreadCycleFullSweep_;
      }
      /**
       * <code>repeated double blink_gc_concurrent_thread_cycle_full_sweep = 40 [(.perfetto.protos.unit) = "ms_smallerIsBetter"];</code>
       * @return The count of blinkGcConcurrentThreadCycleFullSweep.
       */
      public int getBlinkGcConcurrentThreadCycleFullSweepCount() {
        return blinkGcConcurrentThreadCycleFullSweep_.size();
      }
      /**
       * <code>repeated double blink_gc_concurrent_thread_cycle_full_sweep = 40 [(.perfetto.protos.unit) = "ms_smallerIsBetter"];</code>
       * @param index The index of the element to return.
       * @return The blinkGcConcurrentThreadCycleFullSweep at the given index.
       */
      public double getBlinkGcConcurrentThreadCycleFullSweep(int index) {
        return blinkGcConcurrentThreadCycleFullSweep_.getDouble(index);
      }
      /**
       * <code>repeated double blink_gc_concurrent_thread_cycle_full_sweep = 40 [(.perfetto.protos.unit) = "ms_smallerIsBetter"];</code>
       * @param index The index to set the value at.
       * @param value The blinkGcConcurrentThreadCycleFullSweep to set.
       * @return This builder for chaining.
       */
      public Builder setBlinkGcConcurrentThreadCycleFullSweep(
          int index, double value) {
        
        ensureBlinkGcConcurrentThreadCycleFullSweepIsMutable();
        blinkGcConcurrentThreadCycleFullSweep_.setDouble(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated double blink_gc_concurrent_thread_cycle_full_sweep = 40 [(.perfetto.protos.unit) = "ms_smallerIsBetter"];</code>
       * @param value The blinkGcConcurrentThreadCycleFullSweep to add.
       * @return This builder for chaining.
       */
      public Builder addBlinkGcConcurrentThreadCycleFullSweep(double value) {
        
        ensureBlinkGcConcurrentThreadCycleFullSweepIsMutable();
        blinkGcConcurrentThreadCycleFullSweep_.addDouble(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated double blink_gc_concurrent_thread_cycle_full_sweep = 40 [(.perfetto.protos.unit) = "ms_smallerIsBetter"];</code>
       * @param values The blinkGcConcurrentThreadCycleFullSweep to add.
       * @return This builder for chaining.
       */
      public Builder addAllBlinkGcConcurrentThreadCycleFullSweep(
          java.lang.Iterable<? extends java.lang.Double> values) {
        ensureBlinkGcConcurrentThreadCycleFullSweepIsMutable();
        com.google.protobuf.AbstractMessageLite.Builder.addAll(
            values, blinkGcConcurrentThreadCycleFullSweep_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated double blink_gc_concurrent_thread_cycle_full_sweep = 40 [(.perfetto.protos.unit) = "ms_smallerIsBetter"];</code>
       * @return This builder for chaining.
       */
      public Builder clearBlinkGcConcurrentThreadCycleFullSweep() {
        blinkGcConcurrentThreadCycleFullSweep_ = emptyDoubleList();
        bitField1_ = (bitField1_ & ~0x00000080);
        onChanged();
        return this;
      }

      private com.google.protobuf.Internal.DoubleList unifiedGcTotal_ = emptyDoubleList();
      private void ensureUnifiedGcTotalIsMutable() {
        if (!((bitField1_ & 0x00000100) != 0)) {
          unifiedGcTotal_ = mutableCopy(unifiedGcTotal_);
          bitField1_ |= 0x00000100;
        }
      }
      /**
       * <code>repeated double unified_gc_total = 41 [(.perfetto.protos.unit) = "ms_smallerIsBetter"];</code>
       * @return A list containing the unifiedGcTotal.
       */
      public java.util.List<java.lang.Double>
          getUnifiedGcTotalList() {
        return ((bitField1_ & 0x00000100) != 0) ?
                 java.util.Collections.unmodifiableList(unifiedGcTotal_) : unifiedGcTotal_;
      }
      /**
       * <code>repeated double unified_gc_total = 41 [(.perfetto.protos.unit) = "ms_smallerIsBetter"];</code>
       * @return The count of unifiedGcTotal.
       */
      public int getUnifiedGcTotalCount() {
        return unifiedGcTotal_.size();
      }
      /**
       * <code>repeated double unified_gc_total = 41 [(.perfetto.protos.unit) = "ms_smallerIsBetter"];</code>
       * @param index The index of the element to return.
       * @return The unifiedGcTotal at the given index.
       */
      public double getUnifiedGcTotal(int index) {
        return unifiedGcTotal_.getDouble(index);
      }
      /**
       * <code>repeated double unified_gc_total = 41 [(.perfetto.protos.unit) = "ms_smallerIsBetter"];</code>
       * @param index The index to set the value at.
       * @param value The unifiedGcTotal to set.
       * @return This builder for chaining.
       */
      public Builder setUnifiedGcTotal(
          int index, double value) {
        
        ensureUnifiedGcTotalIsMutable();
        unifiedGcTotal_.setDouble(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated double unified_gc_total = 41 [(.perfetto.protos.unit) = "ms_smallerIsBetter"];</code>
       * @param value The unifiedGcTotal to add.
       * @return This builder for chaining.
       */
      public Builder addUnifiedGcTotal(double value) {
        
        ensureUnifiedGcTotalIsMutable();
        unifiedGcTotal_.addDouble(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated double unified_gc_total = 41 [(.perfetto.protos.unit) = "ms_smallerIsBetter"];</code>
       * @param values The unifiedGcTotal to add.
       * @return This builder for chaining.
       */
      public Builder addAllUnifiedGcTotal(
          java.lang.Iterable<? extends java.lang.Double> values) {
        ensureUnifiedGcTotalIsMutable();
        com.google.protobuf.AbstractMessageLite.Builder.addAll(
            values, unifiedGcTotal_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated double unified_gc_total = 41 [(.perfetto.protos.unit) = "ms_smallerIsBetter"];</code>
       * @return This builder for chaining.
       */
      public Builder clearUnifiedGcTotal() {
        unifiedGcTotal_ = emptyDoubleList();
        bitField1_ = (bitField1_ & ~0x00000100);
        onChanged();
        return this;
      }
      @java.lang.Override
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      @java.lang.Override
      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:perfetto.protos.BlinkGcMetric)
    }

    // @@protoc_insertion_point(class_scope:perfetto.protos.BlinkGcMetric)
    private static final perfetto.protos.BlinkGcMetricOuterClass.BlinkGcMetric DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new perfetto.protos.BlinkGcMetricOuterClass.BlinkGcMetric();
    }

    public static perfetto.protos.BlinkGcMetricOuterClass.BlinkGcMetric getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    @java.lang.Deprecated public static final com.google.protobuf.Parser<BlinkGcMetric>
        PARSER = new com.google.protobuf.AbstractParser<BlinkGcMetric>() {
      @java.lang.Override
      public BlinkGcMetric parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        Builder builder = newBuilder();
        try {
          builder.mergeFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.setUnfinishedMessage(builder.buildPartial());
        } catch (com.google.protobuf.UninitializedMessageException e) {
          throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
        } catch (java.io.IOException e) {
          throw new com.google.protobuf.InvalidProtocolBufferException(e)
              .setUnfinishedMessage(builder.buildPartial());
        }
        return builder.buildPartial();
      }
    };

    public static com.google.protobuf.Parser<BlinkGcMetric> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<BlinkGcMetric> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public perfetto.protos.BlinkGcMetricOuterClass.BlinkGcMetric getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_perfetto_protos_BlinkGcMetric_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_perfetto_protos_BlinkGcMetric_fieldAccessorTable;

  public static com.google.protobuf.Descriptors.FileDescriptor
      getDescriptor() {
    return descriptor;
  }
  private static  com.google.protobuf.Descriptors.FileDescriptor
      descriptor;
  static {
    java.lang.String[] descriptorData = {
      "\n4protos/perfetto/metrics/chrome/blink_g" +
      "c_metric.proto\022\017perfetto.protos\032,protos/" +
      "perfetto/metrics/custom_options.proto\"\334\026" +
      "\n\rBlinkGcMetric\022C\n#blink_gc_atomic_pause" +
      "_mark_epilogue\030\001 \003(\001B\026\212\265\030\022ms_smallerIsBe" +
      "tter\022T\n4blink_gc_main_thread_cycle_full_" +
      "atomic_mark_epilogue\030\002 \003(\001B\026\212\265\030\022ms_small" +
      "erIsBetter\022C\n#blink_gc_atomic_pause_mark" +
      "_prologue\030\003 \003(\001B\026\212\265\030\022ms_smallerIsBetter\022" +
      "T\n4blink_gc_main_thread_cycle_full_atomi" +
      "c_mark_prologue\030\004 \003(\001B\026\212\265\030\022ms_smallerIsB" +
      "etter\022@\n blink_gc_atomic_pause_mark_root" +
      "s\030\005 \003(\001B\026\212\265\030\022ms_smallerIsBetter\022Q\n1blink" +
      "_gc_main_thread_cycle_full_atomic_mark_r" +
      "oots\030\006 \003(\001B\026\212\265\030\022ms_smallerIsBetter\022G\n\'bl" +
      "ink_gc_atomic_pause_sweep_and_compact\030\007 " +
      "\003(\001B\026\212\265\030\022ms_smallerIsBetter\022T\n4blink_gc_" +
      "main_thread_cycle_full_atomic_sweep_comp" +
      "act\030\010 \003(\001B\026\212\265\030\022ms_smallerIsBetter\0227\n\027bli" +
      "nk_gc_complete_sweep\030\t \003(\001B\026\212\265\030\022ms_small" +
      "erIsBetter\022N\n.blink_gc_main_thread_cycle" +
      "_full_sweep_complete\030\n \003(\001B\026\212\265\030\022ms_small" +
      "erIsBetter\022:\n\032blink_gc_incremental_start" +
      "\030\013 \003(\001B\026\212\265\030\022ms_smallerIsBetter\022V\n6blink_" +
      "gc_main_thread_cycle_full_incremental_ma" +
      "rk_start\030\014 \003(\001B\026\212\265\030\022ms_smallerIsBetter\0229" +
      "\n\031blink_gc_incremental_step\030\r \003(\001B\026\212\265\030\022m" +
      "s_smallerIsBetter\022U\n5blink_gc_main_threa" +
      "d_cycle_full_incremental_mark_step\030\016 \003(\001" +
      "B\026\212\265\030\022ms_smallerIsBetter\0229\n\031blink_gc_swe" +
      "ep_allocation\030\017 \003(\001B\026\212\265\030\022ms_smallerIsBet" +
      "ter\022S\n3blink_gc_main_thread_cycle_full_s" +
      "weep_on_allocation\030\020 \003(\001B\026\212\265\030\022ms_smaller" +
      "IsBetter\022>\n\036blink_gc_sweep_task_foregrou" +
      "nd\030\021 \003(\001B\026\212\265\030\022ms_smallerIsBetter\022J\n*blin" +
      "k_gc_main_thread_cycle_full_sweep_idle\030\022" +
      " \003(\001B\026\212\265\030\022ms_smallerIsBetter\022>\n\036blink_gc" +
      "_unified_marking_by_v8\030\023 \003(\001B\026\212\265\030\022ms_sma" +
      "llerIsBetter\022K\n+unified_gc_main_thread_c" +
      "ycle_full_mark_step\030\024 \003(\001B\026\212\265\030\022ms_smalle" +
      "rIsBetter\0225\n\025blink_gc_atomic_pause\030\025 \003(\001" +
      "B\026\212\265\030\022ms_smallerIsBetter\022F\n&blink_gc_mai" +
      "n_thread_cycle_full_atomic\030\026 \003(\001B\026\212\265\030\022ms" +
      "_smallerIsBetter\022M\n-blink_gc_atomic_paus" +
      "e_mark_transitive_closure\030\027 \003(\001B\026\212\265\030\022ms_" +
      "smallerIsBetter\022^\n>blink_gc_main_thread_" +
      "cycle_full_atomic_mark_transitive_closur" +
      "e\030\030 \003(\001B\026\212\265\030\022ms_smallerIsBetter\022.\n\016blink" +
      "_gc_total\030\031 \003(\001B\026\212\265\030\022ms_smallerIsBetter\022" +
      "?\n\037blink_gc_main_thread_cycle_full\030\032 \003(\001" +
      "B\026\212\265\030\022ms_smallerIsBetter\0223\n\023blink_gc_mar" +
      "k_roots\030\033 \003(\001B\026\212\265\030\022ms_smallerIsBetter\022J\n" +
      "*blink_gc_main_thread_cycle_full_mark_ro" +
      "ots\030\034 \003(\001B\026\212\265\030\022ms_smallerIsBetter\022@\n bli" +
      "nk_gc_mark_transitive_closure\030\035 \003(\001B\026\212\265\030" +
      "\022ms_smallerIsBetter\022W\n7blink_gc_main_thr" +
      "ead_cycle_full_mark_transitive_closure\030\036" +
      " \003(\001B\026\212\265\030\022ms_smallerIsBetter\0228\n\030blink_gc" +
      "_mark_foreground\030\037 \003(\001B\026\212\265\030\022ms_smallerIs" +
      "Better\022D\n$blink_gc_main_thread_cycle_ful" +
      "l_mark\030  \003(\001B\026\212\265\030\022ms_smallerIsBetter\022?\n\037" +
      "blink_gc_mark_foreground_forced\030! \003(\001B\026\212" +
      "\265\030\022ms_smallerIsBetter\022K\n+blink_gc_main_t" +
      "hread_cycle_full_mark_forced\030\" \003(\001B\026\212\265\030\022" +
      "ms_smallerIsBetter\0228\n\030blink_gc_mark_back" +
      "ground\030# \003(\001B\026\212\265\030\022ms_smallerIsBetter\022J\n*" +
      "blink_gc_concurrent_thread_cycle_full_ma" +
      "rk\030$ \003(\001B\026\212\265\030\022ms_smallerIsBetter\0229\n\031blin" +
      "k_gc_sweep_foreground\030% \003(\001B\026\212\265\030\022ms_smal" +
      "lerIsBetter\022E\n%blink_gc_main_thread_cycl" +
      "e_full_sweep\030& \003(\001B\026\212\265\030\022ms_smallerIsBett" +
      "er\0229\n\031blink_gc_sweep_background\030\' \003(\001B\026\212" +
      "\265\030\022ms_smallerIsBetter\022K\n+blink_gc_concur" +
      "rent_thread_cycle_full_sweep\030( \003(\001B\026\212\265\030\022" +
      "ms_smallerIsBetter\0220\n\020unified_gc_total\030)" +
      " \003(\001B\026\212\265\030\022ms_smallerIsBetter"
    };
    descriptor = com.google.protobuf.Descriptors.FileDescriptor
      .internalBuildGeneratedFileFrom(descriptorData,
        new com.google.protobuf.Descriptors.FileDescriptor[] {
          perfetto.protos.CustomOptions.getDescriptor(),
        });
    internal_static_perfetto_protos_BlinkGcMetric_descriptor =
      getDescriptor().getMessageTypes().get(0);
    internal_static_perfetto_protos_BlinkGcMetric_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_perfetto_protos_BlinkGcMetric_descriptor,
        new java.lang.String[] { "BlinkGcAtomicPauseMarkEpilogue", "BlinkGcMainThreadCycleFullAtomicMarkEpilogue", "BlinkGcAtomicPauseMarkPrologue", "BlinkGcMainThreadCycleFullAtomicMarkPrologue", "BlinkGcAtomicPauseMarkRoots", "BlinkGcMainThreadCycleFullAtomicMarkRoots", "BlinkGcAtomicPauseSweepAndCompact", "BlinkGcMainThreadCycleFullAtomicSweepCompact", "BlinkGcCompleteSweep", "BlinkGcMainThreadCycleFullSweepComplete", "BlinkGcIncrementalStart", "BlinkGcMainThreadCycleFullIncrementalMarkStart", "BlinkGcIncrementalStep", "BlinkGcMainThreadCycleFullIncrementalMarkStep", "BlinkGcSweepAllocation", "BlinkGcMainThreadCycleFullSweepOnAllocation", "BlinkGcSweepTaskForeground", "BlinkGcMainThreadCycleFullSweepIdle", "BlinkGcUnifiedMarkingByV8", "UnifiedGcMainThreadCycleFullMarkStep", "BlinkGcAtomicPause", "BlinkGcMainThreadCycleFullAtomic", "BlinkGcAtomicPauseMarkTransitiveClosure", "BlinkGcMainThreadCycleFullAtomicMarkTransitiveClosure", "BlinkGcTotal", "BlinkGcMainThreadCycleFull", "BlinkGcMarkRoots", "BlinkGcMainThreadCycleFullMarkRoots", "BlinkGcMarkTransitiveClosure", "BlinkGcMainThreadCycleFullMarkTransitiveClosure", "BlinkGcMarkForeground", "BlinkGcMainThreadCycleFullMark", "BlinkGcMarkForegroundForced", "BlinkGcMainThreadCycleFullMarkForced", "BlinkGcMarkBackground", "BlinkGcConcurrentThreadCycleFullMark", "BlinkGcSweepForeground", "BlinkGcMainThreadCycleFullSweep", "BlinkGcSweepBackground", "BlinkGcConcurrentThreadCycleFullSweep", "UnifiedGcTotal", });
    com.google.protobuf.ExtensionRegistry registry =
        com.google.protobuf.ExtensionRegistry.newInstance();
    registry.add(perfetto.protos.CustomOptions.unit);
    com.google.protobuf.Descriptors.FileDescriptor
        .internalUpdateFileDescriptor(descriptor, registry);
    perfetto.protos.CustomOptions.getDescriptor();
  }

  // @@protoc_insertion_point(outer_class_scope)
}
