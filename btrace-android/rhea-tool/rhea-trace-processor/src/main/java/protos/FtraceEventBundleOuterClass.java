// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: protos/perfetto/trace/ftrace/ftrace_event_bundle.proto

package perfetto.protos;

public final class FtraceEventBundleOuterClass {
  private FtraceEventBundleOuterClass() {}
  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistryLite registry) {
  }

  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistry registry) {
    registerAllExtensions(
        (com.google.protobuf.ExtensionRegistryLite) registry);
  }
  /**
   * Protobuf enum {@code perfetto.protos.FtraceClock}
   */
  public enum FtraceClock
      implements com.google.protobuf.ProtocolMessageEnum {
    /**
     * <pre>
     * There is no FTRACE_CLOCK_BOOT entry as that's the default assumption. When
     * the ftrace clock is "boot", it's just omitted (so UNSPECIFIED == BOOT).
     * </pre>
     *
     * <code>FTRACE_CLOCK_UNSPECIFIED = 0;</code>
     */
    FTRACE_CLOCK_UNSPECIFIED(0),
    /**
     * <code>FTRACE_CLOCK_UNKNOWN = 1;</code>
     */
    FTRACE_CLOCK_UNKNOWN(1),
    /**
     * <code>FTRACE_CLOCK_GLOBAL = 2;</code>
     */
    FTRACE_CLOCK_GLOBAL(2),
    /**
     * <code>FTRACE_CLOCK_LOCAL = 3;</code>
     */
    FTRACE_CLOCK_LOCAL(3),
    ;

    /**
     * <pre>
     * There is no FTRACE_CLOCK_BOOT entry as that's the default assumption. When
     * the ftrace clock is "boot", it's just omitted (so UNSPECIFIED == BOOT).
     * </pre>
     *
     * <code>FTRACE_CLOCK_UNSPECIFIED = 0;</code>
     */
    public static final int FTRACE_CLOCK_UNSPECIFIED_VALUE = 0;
    /**
     * <code>FTRACE_CLOCK_UNKNOWN = 1;</code>
     */
    public static final int FTRACE_CLOCK_UNKNOWN_VALUE = 1;
    /**
     * <code>FTRACE_CLOCK_GLOBAL = 2;</code>
     */
    public static final int FTRACE_CLOCK_GLOBAL_VALUE = 2;
    /**
     * <code>FTRACE_CLOCK_LOCAL = 3;</code>
     */
    public static final int FTRACE_CLOCK_LOCAL_VALUE = 3;


    public final int getNumber() {
      return value;
    }

    /**
     * @param value The numeric wire value of the corresponding enum entry.
     * @return The enum associated with the given numeric wire value.
     * @deprecated Use {@link #forNumber(int)} instead.
     */
    @java.lang.Deprecated
    public static FtraceClock valueOf(int value) {
      return forNumber(value);
    }

    /**
     * @param value The numeric wire value of the corresponding enum entry.
     * @return The enum associated with the given numeric wire value.
     */
    public static FtraceClock forNumber(int value) {
      switch (value) {
        case 0: return FTRACE_CLOCK_UNSPECIFIED;
        case 1: return FTRACE_CLOCK_UNKNOWN;
        case 2: return FTRACE_CLOCK_GLOBAL;
        case 3: return FTRACE_CLOCK_LOCAL;
        default: return null;
      }
    }

    public static com.google.protobuf.Internal.EnumLiteMap<FtraceClock>
        internalGetValueMap() {
      return internalValueMap;
    }
    private static final com.google.protobuf.Internal.EnumLiteMap<
        FtraceClock> internalValueMap =
          new com.google.protobuf.Internal.EnumLiteMap<FtraceClock>() {
            public FtraceClock findValueByNumber(int number) {
              return FtraceClock.forNumber(number);
            }
          };

    public final com.google.protobuf.Descriptors.EnumValueDescriptor
        getValueDescriptor() {
      return getDescriptor().getValues().get(ordinal());
    }
    public final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptorForType() {
      return getDescriptor();
    }
    public static final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptor() {
      return perfetto.protos.FtraceEventBundleOuterClass.getDescriptor().getEnumTypes().get(0);
    }

    private static final FtraceClock[] VALUES = values();

    public static FtraceClock valueOf(
        com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
      if (desc.getType() != getDescriptor()) {
        throw new java.lang.IllegalArgumentException(
          "EnumValueDescriptor is not for this type.");
      }
      return VALUES[desc.getIndex()];
    }

    private final int value;

    private FtraceClock(int value) {
      this.value = value;
    }

    // @@protoc_insertion_point(enum_scope:perfetto.protos.FtraceClock)
  }

  public interface FtraceEventBundleOrBuilder extends
      // @@protoc_insertion_point(interface_extends:perfetto.protos.FtraceEventBundle)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <code>optional uint32 cpu = 1;</code>
     * @return Whether the cpu field is set.
     */
    boolean hasCpu();
    /**
     * <code>optional uint32 cpu = 1;</code>
     * @return The cpu.
     */
    int getCpu();

    /**
     * <code>repeated .perfetto.protos.FtraceEvent event = 2;</code>
     */
    java.util.List<perfetto.protos.FtraceEventOuterClass.FtraceEvent> 
        getEventList();
    /**
     * <code>repeated .perfetto.protos.FtraceEvent event = 2;</code>
     */
    perfetto.protos.FtraceEventOuterClass.FtraceEvent getEvent(int index);
    /**
     * <code>repeated .perfetto.protos.FtraceEvent event = 2;</code>
     */
    int getEventCount();
    /**
     * <code>repeated .perfetto.protos.FtraceEvent event = 2;</code>
     */
    java.util.List<? extends perfetto.protos.FtraceEventOuterClass.FtraceEventOrBuilder> 
        getEventOrBuilderList();
    /**
     * <code>repeated .perfetto.protos.FtraceEvent event = 2;</code>
     */
    perfetto.protos.FtraceEventOuterClass.FtraceEventOrBuilder getEventOrBuilder(
        int index);

    /**
     * <pre>
     * Set to true if there was data loss between the last time we've read from
     * the corresponding per-cpu kernel buffer, and the earliest event recorded
     * in this bundle.
     * </pre>
     *
     * <code>optional bool lost_events = 3;</code>
     * @return Whether the lostEvents field is set.
     */
    boolean hasLostEvents();
    /**
     * <pre>
     * Set to true if there was data loss between the last time we've read from
     * the corresponding per-cpu kernel buffer, and the earliest event recorded
     * in this bundle.
     * </pre>
     *
     * <code>optional bool lost_events = 3;</code>
     * @return The lostEvents.
     */
    boolean getLostEvents();

    /**
     * <code>optional .perfetto.protos.FtraceEventBundle.CompactSched compact_sched = 4;</code>
     * @return Whether the compactSched field is set.
     */
    boolean hasCompactSched();
    /**
     * <code>optional .perfetto.protos.FtraceEventBundle.CompactSched compact_sched = 4;</code>
     * @return The compactSched.
     */
    perfetto.protos.FtraceEventBundleOuterClass.FtraceEventBundle.CompactSched getCompactSched();
    /**
     * <code>optional .perfetto.protos.FtraceEventBundle.CompactSched compact_sched = 4;</code>
     */
    perfetto.protos.FtraceEventBundleOuterClass.FtraceEventBundle.CompactSchedOrBuilder getCompactSchedOrBuilder();

    /**
     * <pre>
     * traced_probes always sets the ftrace_clock to "boot". That is not available
     * in older kernels (v3.x). In that case we fallback on "global" or "local".
     * When we do that, we report the fallback clock in each bundle so we can do
     * proper clock syncing at parsing time in TraceProcessor. We cannot use the
     * TracePacket timestamp_clock_id because: (1) there is no per-packet
     * timestamp for ftrace bundles; (2) "global" does not match CLOCK_MONOTONIC.
     * Having a dedicated and explicit flag allows us to correct further misakes
     * in future by looking at the kernel version.
     * This field has been introduced in perfetto v19 / Android T (13).
     * This field is omitted when the ftrace clock is just "boot", as that is the
     * default assumption (and for consistency with the past).
     * </pre>
     *
     * <code>optional .perfetto.protos.FtraceClock ftrace_clock = 5;</code>
     * @return Whether the ftraceClock field is set.
     */
    boolean hasFtraceClock();
    /**
     * <pre>
     * traced_probes always sets the ftrace_clock to "boot". That is not available
     * in older kernels (v3.x). In that case we fallback on "global" or "local".
     * When we do that, we report the fallback clock in each bundle so we can do
     * proper clock syncing at parsing time in TraceProcessor. We cannot use the
     * TracePacket timestamp_clock_id because: (1) there is no per-packet
     * timestamp for ftrace bundles; (2) "global" does not match CLOCK_MONOTONIC.
     * Having a dedicated and explicit flag allows us to correct further misakes
     * in future by looking at the kernel version.
     * This field has been introduced in perfetto v19 / Android T (13).
     * This field is omitted when the ftrace clock is just "boot", as that is the
     * default assumption (and for consistency with the past).
     * </pre>
     *
     * <code>optional .perfetto.protos.FtraceClock ftrace_clock = 5;</code>
     * @return The ftraceClock.
     */
    perfetto.protos.FtraceEventBundleOuterClass.FtraceClock getFtraceClock();

    /**
     * <pre>
     * The timestamp according to the ftrace clock, taken at the same instant
     * as |boot_timestamp|. This is used to sync ftrace events when a non-boot
     * clock is used as the ftrace clock. We don't use the ClockSnapshot packet
     * because the ftrace global/local clocks don't match any of the clock_gettime
     * domains and can be only read by traced_probes.
     * Only set when |ftrace_clock| != FTRACE_CLOCK_UNSPECIFIED.
     * Implementation note: Populated by reading the 'now ts:' field in
     * tracefs/per_cpu/cpuX/stat.
     * </pre>
     *
     * <code>optional int64 ftrace_timestamp = 6;</code>
     * @return Whether the ftraceTimestamp field is set.
     */
    boolean hasFtraceTimestamp();
    /**
     * <pre>
     * The timestamp according to the ftrace clock, taken at the same instant
     * as |boot_timestamp|. This is used to sync ftrace events when a non-boot
     * clock is used as the ftrace clock. We don't use the ClockSnapshot packet
     * because the ftrace global/local clocks don't match any of the clock_gettime
     * domains and can be only read by traced_probes.
     * Only set when |ftrace_clock| != FTRACE_CLOCK_UNSPECIFIED.
     * Implementation note: Populated by reading the 'now ts:' field in
     * tracefs/per_cpu/cpuX/stat.
     * </pre>
     *
     * <code>optional int64 ftrace_timestamp = 6;</code>
     * @return The ftraceTimestamp.
     */
    long getFtraceTimestamp();

    /**
     * <pre>
     * The timestamp according to CLOCK_BOOTTIME, taken at the same instant as
     * |ftrace_timestamp|. See documentation of |ftrace_timestamp| for
     * more info.
     * Only set when |ftrace_clock| != FTRACE_CLOCK_UNSPECIFIED.
     * </pre>
     *
     * <code>optional int64 boot_timestamp = 7;</code>
     * @return Whether the bootTimestamp field is set.
     */
    boolean hasBootTimestamp();
    /**
     * <pre>
     * The timestamp according to CLOCK_BOOTTIME, taken at the same instant as
     * |ftrace_timestamp|. See documentation of |ftrace_timestamp| for
     * more info.
     * Only set when |ftrace_clock| != FTRACE_CLOCK_UNSPECIFIED.
     * </pre>
     *
     * <code>optional int64 boot_timestamp = 7;</code>
     * @return The bootTimestamp.
     */
    long getBootTimestamp();
  }
  /**
   * <pre>
   * The result of tracing one or more ftrace data pages from a single per-cpu
   * kernel ring buffer. If collating multiple pages' worth of events, all of
   * them come from contiguous pages, with no kernel data loss in between.
   * </pre>
   *
   * Protobuf type {@code perfetto.protos.FtraceEventBundle}
   */
  public static final class FtraceEventBundle extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:perfetto.protos.FtraceEventBundle)
      FtraceEventBundleOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use FtraceEventBundle.newBuilder() to construct.
    private FtraceEventBundle(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private FtraceEventBundle() {
      event_ = java.util.Collections.emptyList();
      ftraceClock_ = 0;
    }

    @java.lang.Override
    @SuppressWarnings({"unused"})
    protected java.lang.Object newInstance(
        UnusedPrivateParameter unused) {
      return new FtraceEventBundle();
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return perfetto.protos.FtraceEventBundleOuterClass.internal_static_perfetto_protos_FtraceEventBundle_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return perfetto.protos.FtraceEventBundleOuterClass.internal_static_perfetto_protos_FtraceEventBundle_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              perfetto.protos.FtraceEventBundleOuterClass.FtraceEventBundle.class, perfetto.protos.FtraceEventBundleOuterClass.FtraceEventBundle.Builder.class);
    }

    public interface CompactSchedOrBuilder extends
        // @@protoc_insertion_point(interface_extends:perfetto.protos.FtraceEventBundle.CompactSched)
        com.google.protobuf.MessageOrBuilder {

      /**
       * <pre>
       * Interned table of unique strings for this bundle.
       * </pre>
       *
       * <code>repeated string intern_table = 5;</code>
       * @return A list containing the internTable.
       */
      java.util.List<java.lang.String>
          getInternTableList();
      /**
       * <pre>
       * Interned table of unique strings for this bundle.
       * </pre>
       *
       * <code>repeated string intern_table = 5;</code>
       * @return The count of internTable.
       */
      int getInternTableCount();
      /**
       * <pre>
       * Interned table of unique strings for this bundle.
       * </pre>
       *
       * <code>repeated string intern_table = 5;</code>
       * @param index The index of the element to return.
       * @return The internTable at the given index.
       */
      java.lang.String getInternTable(int index);
      /**
       * <pre>
       * Interned table of unique strings for this bundle.
       * </pre>
       *
       * <code>repeated string intern_table = 5;</code>
       * @param index The index of the value to return.
       * @return The bytes of the internTable at the given index.
       */
      com.google.protobuf.ByteString
          getInternTableBytes(int index);

      /**
       * <pre>
       * Delta-encoded timestamps across all sched_switch events within this
       * bundle. The first is absolute, each next one is relative to its
       * predecessor.
       * </pre>
       *
       * <code>repeated uint64 switch_timestamp = 1 [packed = true];</code>
       * @return A list containing the switchTimestamp.
       */
      java.util.List<java.lang.Long> getSwitchTimestampList();
      /**
       * <pre>
       * Delta-encoded timestamps across all sched_switch events within this
       * bundle. The first is absolute, each next one is relative to its
       * predecessor.
       * </pre>
       *
       * <code>repeated uint64 switch_timestamp = 1 [packed = true];</code>
       * @return The count of switchTimestamp.
       */
      int getSwitchTimestampCount();
      /**
       * <pre>
       * Delta-encoded timestamps across all sched_switch events within this
       * bundle. The first is absolute, each next one is relative to its
       * predecessor.
       * </pre>
       *
       * <code>repeated uint64 switch_timestamp = 1 [packed = true];</code>
       * @param index The index of the element to return.
       * @return The switchTimestamp at the given index.
       */
      long getSwitchTimestamp(int index);

      /**
       * <code>repeated int64 switch_prev_state = 2 [packed = true];</code>
       * @return A list containing the switchPrevState.
       */
      java.util.List<java.lang.Long> getSwitchPrevStateList();
      /**
       * <code>repeated int64 switch_prev_state = 2 [packed = true];</code>
       * @return The count of switchPrevState.
       */
      int getSwitchPrevStateCount();
      /**
       * <code>repeated int64 switch_prev_state = 2 [packed = true];</code>
       * @param index The index of the element to return.
       * @return The switchPrevState at the given index.
       */
      long getSwitchPrevState(int index);

      /**
       * <code>repeated int32 switch_next_pid = 3 [packed = true];</code>
       * @return A list containing the switchNextPid.
       */
      java.util.List<java.lang.Integer> getSwitchNextPidList();
      /**
       * <code>repeated int32 switch_next_pid = 3 [packed = true];</code>
       * @return The count of switchNextPid.
       */
      int getSwitchNextPidCount();
      /**
       * <code>repeated int32 switch_next_pid = 3 [packed = true];</code>
       * @param index The index of the element to return.
       * @return The switchNextPid at the given index.
       */
      int getSwitchNextPid(int index);

      /**
       * <code>repeated int32 switch_next_prio = 4 [packed = true];</code>
       * @return A list containing the switchNextPrio.
       */
      java.util.List<java.lang.Integer> getSwitchNextPrioList();
      /**
       * <code>repeated int32 switch_next_prio = 4 [packed = true];</code>
       * @return The count of switchNextPrio.
       */
      int getSwitchNextPrioCount();
      /**
       * <code>repeated int32 switch_next_prio = 4 [packed = true];</code>
       * @param index The index of the element to return.
       * @return The switchNextPrio at the given index.
       */
      int getSwitchNextPrio(int index);

      /**
       * <pre>
       * One per event, index into |intern_table| corresponding to the
       * next_comm field of the event.
       * </pre>
       *
       * <code>repeated uint32 switch_next_comm_index = 6 [packed = true];</code>
       * @return A list containing the switchNextCommIndex.
       */
      java.util.List<java.lang.Integer> getSwitchNextCommIndexList();
      /**
       * <pre>
       * One per event, index into |intern_table| corresponding to the
       * next_comm field of the event.
       * </pre>
       *
       * <code>repeated uint32 switch_next_comm_index = 6 [packed = true];</code>
       * @return The count of switchNextCommIndex.
       */
      int getSwitchNextCommIndexCount();
      /**
       * <pre>
       * One per event, index into |intern_table| corresponding to the
       * next_comm field of the event.
       * </pre>
       *
       * <code>repeated uint32 switch_next_comm_index = 6 [packed = true];</code>
       * @param index The index of the element to return.
       * @return The switchNextCommIndex at the given index.
       */
      int getSwitchNextCommIndex(int index);

      /**
       * <pre>
       * Delta-encoded timestamps across all sched_waking events within this
       * bundle. The first is absolute, each next one is relative to its
       * predecessor.
       * </pre>
       *
       * <code>repeated uint64 waking_timestamp = 7 [packed = true];</code>
       * @return A list containing the wakingTimestamp.
       */
      java.util.List<java.lang.Long> getWakingTimestampList();
      /**
       * <pre>
       * Delta-encoded timestamps across all sched_waking events within this
       * bundle. The first is absolute, each next one is relative to its
       * predecessor.
       * </pre>
       *
       * <code>repeated uint64 waking_timestamp = 7 [packed = true];</code>
       * @return The count of wakingTimestamp.
       */
      int getWakingTimestampCount();
      /**
       * <pre>
       * Delta-encoded timestamps across all sched_waking events within this
       * bundle. The first is absolute, each next one is relative to its
       * predecessor.
       * </pre>
       *
       * <code>repeated uint64 waking_timestamp = 7 [packed = true];</code>
       * @param index The index of the element to return.
       * @return The wakingTimestamp at the given index.
       */
      long getWakingTimestamp(int index);

      /**
       * <code>repeated int32 waking_pid = 8 [packed = true];</code>
       * @return A list containing the wakingPid.
       */
      java.util.List<java.lang.Integer> getWakingPidList();
      /**
       * <code>repeated int32 waking_pid = 8 [packed = true];</code>
       * @return The count of wakingPid.
       */
      int getWakingPidCount();
      /**
       * <code>repeated int32 waking_pid = 8 [packed = true];</code>
       * @param index The index of the element to return.
       * @return The wakingPid at the given index.
       */
      int getWakingPid(int index);

      /**
       * <code>repeated int32 waking_target_cpu = 9 [packed = true];</code>
       * @return A list containing the wakingTargetCpu.
       */
      java.util.List<java.lang.Integer> getWakingTargetCpuList();
      /**
       * <code>repeated int32 waking_target_cpu = 9 [packed = true];</code>
       * @return The count of wakingTargetCpu.
       */
      int getWakingTargetCpuCount();
      /**
       * <code>repeated int32 waking_target_cpu = 9 [packed = true];</code>
       * @param index The index of the element to return.
       * @return The wakingTargetCpu at the given index.
       */
      int getWakingTargetCpu(int index);

      /**
       * <code>repeated int32 waking_prio = 10 [packed = true];</code>
       * @return A list containing the wakingPrio.
       */
      java.util.List<java.lang.Integer> getWakingPrioList();
      /**
       * <code>repeated int32 waking_prio = 10 [packed = true];</code>
       * @return The count of wakingPrio.
       */
      int getWakingPrioCount();
      /**
       * <code>repeated int32 waking_prio = 10 [packed = true];</code>
       * @param index The index of the element to return.
       * @return The wakingPrio at the given index.
       */
      int getWakingPrio(int index);

      /**
       * <pre>
       * One per event, index into |intern_table| corresponding to the
       * comm field of the event.
       * </pre>
       *
       * <code>repeated uint32 waking_comm_index = 11 [packed = true];</code>
       * @return A list containing the wakingCommIndex.
       */
      java.util.List<java.lang.Integer> getWakingCommIndexList();
      /**
       * <pre>
       * One per event, index into |intern_table| corresponding to the
       * comm field of the event.
       * </pre>
       *
       * <code>repeated uint32 waking_comm_index = 11 [packed = true];</code>
       * @return The count of wakingCommIndex.
       */
      int getWakingCommIndexCount();
      /**
       * <pre>
       * One per event, index into |intern_table| corresponding to the
       * comm field of the event.
       * </pre>
       *
       * <code>repeated uint32 waking_comm_index = 11 [packed = true];</code>
       * @param index The index of the element to return.
       * @return The wakingCommIndex at the given index.
       */
      int getWakingCommIndex(int index);
    }
    /**
     * <pre>
     * Optionally-enabled compact encoding of a batch of scheduling events. Only
     * a subset of events &amp; their fields is recorded.
     * All fields (except comms) are stored in a structure-of-arrays form, one
     * entry in each repeated field per event.
     * </pre>
     *
     * Protobuf type {@code perfetto.protos.FtraceEventBundle.CompactSched}
     */
    public static final class CompactSched extends
        com.google.protobuf.GeneratedMessageV3 implements
        // @@protoc_insertion_point(message_implements:perfetto.protos.FtraceEventBundle.CompactSched)
        CompactSchedOrBuilder {
    private static final long serialVersionUID = 0L;
      // Use CompactSched.newBuilder() to construct.
      private CompactSched(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
        super(builder);
      }
      private CompactSched() {
        internTable_ = com.google.protobuf.LazyStringArrayList.EMPTY;
        switchTimestamp_ = emptyLongList();
        switchPrevState_ = emptyLongList();
        switchNextPid_ = emptyIntList();
        switchNextPrio_ = emptyIntList();
        switchNextCommIndex_ = emptyIntList();
        wakingTimestamp_ = emptyLongList();
        wakingPid_ = emptyIntList();
        wakingTargetCpu_ = emptyIntList();
        wakingPrio_ = emptyIntList();
        wakingCommIndex_ = emptyIntList();
      }

      @java.lang.Override
      @SuppressWarnings({"unused"})
      protected java.lang.Object newInstance(
          UnusedPrivateParameter unused) {
        return new CompactSched();
      }

      @java.lang.Override
      public final com.google.protobuf.UnknownFieldSet
      getUnknownFields() {
        return this.unknownFields;
      }
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return perfetto.protos.FtraceEventBundleOuterClass.internal_static_perfetto_protos_FtraceEventBundle_CompactSched_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return perfetto.protos.FtraceEventBundleOuterClass.internal_static_perfetto_protos_FtraceEventBundle_CompactSched_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                perfetto.protos.FtraceEventBundleOuterClass.FtraceEventBundle.CompactSched.class, perfetto.protos.FtraceEventBundleOuterClass.FtraceEventBundle.CompactSched.Builder.class);
      }

      public static final int INTERN_TABLE_FIELD_NUMBER = 5;
      @SuppressWarnings("serial")
      private com.google.protobuf.LazyStringList internTable_;
      /**
       * <pre>
       * Interned table of unique strings for this bundle.
       * </pre>
       *
       * <code>repeated string intern_table = 5;</code>
       * @return A list containing the internTable.
       */
      public com.google.protobuf.ProtocolStringList
          getInternTableList() {
        return internTable_;
      }
      /**
       * <pre>
       * Interned table of unique strings for this bundle.
       * </pre>
       *
       * <code>repeated string intern_table = 5;</code>
       * @return The count of internTable.
       */
      public int getInternTableCount() {
        return internTable_.size();
      }
      /**
       * <pre>
       * Interned table of unique strings for this bundle.
       * </pre>
       *
       * <code>repeated string intern_table = 5;</code>
       * @param index The index of the element to return.
       * @return The internTable at the given index.
       */
      public java.lang.String getInternTable(int index) {
        return internTable_.get(index);
      }
      /**
       * <pre>
       * Interned table of unique strings for this bundle.
       * </pre>
       *
       * <code>repeated string intern_table = 5;</code>
       * @param index The index of the value to return.
       * @return The bytes of the internTable at the given index.
       */
      public com.google.protobuf.ByteString
          getInternTableBytes(int index) {
        return internTable_.getByteString(index);
      }

      public static final int SWITCH_TIMESTAMP_FIELD_NUMBER = 1;
      @SuppressWarnings("serial")
      private com.google.protobuf.Internal.LongList switchTimestamp_;
      /**
       * <pre>
       * Delta-encoded timestamps across all sched_switch events within this
       * bundle. The first is absolute, each next one is relative to its
       * predecessor.
       * </pre>
       *
       * <code>repeated uint64 switch_timestamp = 1 [packed = true];</code>
       * @return A list containing the switchTimestamp.
       */
      @java.lang.Override
      public java.util.List<java.lang.Long>
          getSwitchTimestampList() {
        return switchTimestamp_;
      }
      /**
       * <pre>
       * Delta-encoded timestamps across all sched_switch events within this
       * bundle. The first is absolute, each next one is relative to its
       * predecessor.
       * </pre>
       *
       * <code>repeated uint64 switch_timestamp = 1 [packed = true];</code>
       * @return The count of switchTimestamp.
       */
      public int getSwitchTimestampCount() {
        return switchTimestamp_.size();
      }
      /**
       * <pre>
       * Delta-encoded timestamps across all sched_switch events within this
       * bundle. The first is absolute, each next one is relative to its
       * predecessor.
       * </pre>
       *
       * <code>repeated uint64 switch_timestamp = 1 [packed = true];</code>
       * @param index The index of the element to return.
       * @return The switchTimestamp at the given index.
       */
      public long getSwitchTimestamp(int index) {
        return switchTimestamp_.getLong(index);
      }
      private int switchTimestampMemoizedSerializedSize = -1;

      public static final int SWITCH_PREV_STATE_FIELD_NUMBER = 2;
      @SuppressWarnings("serial")
      private com.google.protobuf.Internal.LongList switchPrevState_;
      /**
       * <code>repeated int64 switch_prev_state = 2 [packed = true];</code>
       * @return A list containing the switchPrevState.
       */
      @java.lang.Override
      public java.util.List<java.lang.Long>
          getSwitchPrevStateList() {
        return switchPrevState_;
      }
      /**
       * <code>repeated int64 switch_prev_state = 2 [packed = true];</code>
       * @return The count of switchPrevState.
       */
      public int getSwitchPrevStateCount() {
        return switchPrevState_.size();
      }
      /**
       * <code>repeated int64 switch_prev_state = 2 [packed = true];</code>
       * @param index The index of the element to return.
       * @return The switchPrevState at the given index.
       */
      public long getSwitchPrevState(int index) {
        return switchPrevState_.getLong(index);
      }
      private int switchPrevStateMemoizedSerializedSize = -1;

      public static final int SWITCH_NEXT_PID_FIELD_NUMBER = 3;
      @SuppressWarnings("serial")
      private com.google.protobuf.Internal.IntList switchNextPid_;
      /**
       * <code>repeated int32 switch_next_pid = 3 [packed = true];</code>
       * @return A list containing the switchNextPid.
       */
      @java.lang.Override
      public java.util.List<java.lang.Integer>
          getSwitchNextPidList() {
        return switchNextPid_;
      }
      /**
       * <code>repeated int32 switch_next_pid = 3 [packed = true];</code>
       * @return The count of switchNextPid.
       */
      public int getSwitchNextPidCount() {
        return switchNextPid_.size();
      }
      /**
       * <code>repeated int32 switch_next_pid = 3 [packed = true];</code>
       * @param index The index of the element to return.
       * @return The switchNextPid at the given index.
       */
      public int getSwitchNextPid(int index) {
        return switchNextPid_.getInt(index);
      }
      private int switchNextPidMemoizedSerializedSize = -1;

      public static final int SWITCH_NEXT_PRIO_FIELD_NUMBER = 4;
      @SuppressWarnings("serial")
      private com.google.protobuf.Internal.IntList switchNextPrio_;
      /**
       * <code>repeated int32 switch_next_prio = 4 [packed = true];</code>
       * @return A list containing the switchNextPrio.
       */
      @java.lang.Override
      public java.util.List<java.lang.Integer>
          getSwitchNextPrioList() {
        return switchNextPrio_;
      }
      /**
       * <code>repeated int32 switch_next_prio = 4 [packed = true];</code>
       * @return The count of switchNextPrio.
       */
      public int getSwitchNextPrioCount() {
        return switchNextPrio_.size();
      }
      /**
       * <code>repeated int32 switch_next_prio = 4 [packed = true];</code>
       * @param index The index of the element to return.
       * @return The switchNextPrio at the given index.
       */
      public int getSwitchNextPrio(int index) {
        return switchNextPrio_.getInt(index);
      }
      private int switchNextPrioMemoizedSerializedSize = -1;

      public static final int SWITCH_NEXT_COMM_INDEX_FIELD_NUMBER = 6;
      @SuppressWarnings("serial")
      private com.google.protobuf.Internal.IntList switchNextCommIndex_;
      /**
       * <pre>
       * One per event, index into |intern_table| corresponding to the
       * next_comm field of the event.
       * </pre>
       *
       * <code>repeated uint32 switch_next_comm_index = 6 [packed = true];</code>
       * @return A list containing the switchNextCommIndex.
       */
      @java.lang.Override
      public java.util.List<java.lang.Integer>
          getSwitchNextCommIndexList() {
        return switchNextCommIndex_;
      }
      /**
       * <pre>
       * One per event, index into |intern_table| corresponding to the
       * next_comm field of the event.
       * </pre>
       *
       * <code>repeated uint32 switch_next_comm_index = 6 [packed = true];</code>
       * @return The count of switchNextCommIndex.
       */
      public int getSwitchNextCommIndexCount() {
        return switchNextCommIndex_.size();
      }
      /**
       * <pre>
       * One per event, index into |intern_table| corresponding to the
       * next_comm field of the event.
       * </pre>
       *
       * <code>repeated uint32 switch_next_comm_index = 6 [packed = true];</code>
       * @param index The index of the element to return.
       * @return The switchNextCommIndex at the given index.
       */
      public int getSwitchNextCommIndex(int index) {
        return switchNextCommIndex_.getInt(index);
      }
      private int switchNextCommIndexMemoizedSerializedSize = -1;

      public static final int WAKING_TIMESTAMP_FIELD_NUMBER = 7;
      @SuppressWarnings("serial")
      private com.google.protobuf.Internal.LongList wakingTimestamp_;
      /**
       * <pre>
       * Delta-encoded timestamps across all sched_waking events within this
       * bundle. The first is absolute, each next one is relative to its
       * predecessor.
       * </pre>
       *
       * <code>repeated uint64 waking_timestamp = 7 [packed = true];</code>
       * @return A list containing the wakingTimestamp.
       */
      @java.lang.Override
      public java.util.List<java.lang.Long>
          getWakingTimestampList() {
        return wakingTimestamp_;
      }
      /**
       * <pre>
       * Delta-encoded timestamps across all sched_waking events within this
       * bundle. The first is absolute, each next one is relative to its
       * predecessor.
       * </pre>
       *
       * <code>repeated uint64 waking_timestamp = 7 [packed = true];</code>
       * @return The count of wakingTimestamp.
       */
      public int getWakingTimestampCount() {
        return wakingTimestamp_.size();
      }
      /**
       * <pre>
       * Delta-encoded timestamps across all sched_waking events within this
       * bundle. The first is absolute, each next one is relative to its
       * predecessor.
       * </pre>
       *
       * <code>repeated uint64 waking_timestamp = 7 [packed = true];</code>
       * @param index The index of the element to return.
       * @return The wakingTimestamp at the given index.
       */
      public long getWakingTimestamp(int index) {
        return wakingTimestamp_.getLong(index);
      }
      private int wakingTimestampMemoizedSerializedSize = -1;

      public static final int WAKING_PID_FIELD_NUMBER = 8;
      @SuppressWarnings("serial")
      private com.google.protobuf.Internal.IntList wakingPid_;
      /**
       * <code>repeated int32 waking_pid = 8 [packed = true];</code>
       * @return A list containing the wakingPid.
       */
      @java.lang.Override
      public java.util.List<java.lang.Integer>
          getWakingPidList() {
        return wakingPid_;
      }
      /**
       * <code>repeated int32 waking_pid = 8 [packed = true];</code>
       * @return The count of wakingPid.
       */
      public int getWakingPidCount() {
        return wakingPid_.size();
      }
      /**
       * <code>repeated int32 waking_pid = 8 [packed = true];</code>
       * @param index The index of the element to return.
       * @return The wakingPid at the given index.
       */
      public int getWakingPid(int index) {
        return wakingPid_.getInt(index);
      }
      private int wakingPidMemoizedSerializedSize = -1;

      public static final int WAKING_TARGET_CPU_FIELD_NUMBER = 9;
      @SuppressWarnings("serial")
      private com.google.protobuf.Internal.IntList wakingTargetCpu_;
      /**
       * <code>repeated int32 waking_target_cpu = 9 [packed = true];</code>
       * @return A list containing the wakingTargetCpu.
       */
      @java.lang.Override
      public java.util.List<java.lang.Integer>
          getWakingTargetCpuList() {
        return wakingTargetCpu_;
      }
      /**
       * <code>repeated int32 waking_target_cpu = 9 [packed = true];</code>
       * @return The count of wakingTargetCpu.
       */
      public int getWakingTargetCpuCount() {
        return wakingTargetCpu_.size();
      }
      /**
       * <code>repeated int32 waking_target_cpu = 9 [packed = true];</code>
       * @param index The index of the element to return.
       * @return The wakingTargetCpu at the given index.
       */
      public int getWakingTargetCpu(int index) {
        return wakingTargetCpu_.getInt(index);
      }
      private int wakingTargetCpuMemoizedSerializedSize = -1;

      public static final int WAKING_PRIO_FIELD_NUMBER = 10;
      @SuppressWarnings("serial")
      private com.google.protobuf.Internal.IntList wakingPrio_;
      /**
       * <code>repeated int32 waking_prio = 10 [packed = true];</code>
       * @return A list containing the wakingPrio.
       */
      @java.lang.Override
      public java.util.List<java.lang.Integer>
          getWakingPrioList() {
        return wakingPrio_;
      }
      /**
       * <code>repeated int32 waking_prio = 10 [packed = true];</code>
       * @return The count of wakingPrio.
       */
      public int getWakingPrioCount() {
        return wakingPrio_.size();
      }
      /**
       * <code>repeated int32 waking_prio = 10 [packed = true];</code>
       * @param index The index of the element to return.
       * @return The wakingPrio at the given index.
       */
      public int getWakingPrio(int index) {
        return wakingPrio_.getInt(index);
      }
      private int wakingPrioMemoizedSerializedSize = -1;

      public static final int WAKING_COMM_INDEX_FIELD_NUMBER = 11;
      @SuppressWarnings("serial")
      private com.google.protobuf.Internal.IntList wakingCommIndex_;
      /**
       * <pre>
       * One per event, index into |intern_table| corresponding to the
       * comm field of the event.
       * </pre>
       *
       * <code>repeated uint32 waking_comm_index = 11 [packed = true];</code>
       * @return A list containing the wakingCommIndex.
       */
      @java.lang.Override
      public java.util.List<java.lang.Integer>
          getWakingCommIndexList() {
        return wakingCommIndex_;
      }
      /**
       * <pre>
       * One per event, index into |intern_table| corresponding to the
       * comm field of the event.
       * </pre>
       *
       * <code>repeated uint32 waking_comm_index = 11 [packed = true];</code>
       * @return The count of wakingCommIndex.
       */
      public int getWakingCommIndexCount() {
        return wakingCommIndex_.size();
      }
      /**
       * <pre>
       * One per event, index into |intern_table| corresponding to the
       * comm field of the event.
       * </pre>
       *
       * <code>repeated uint32 waking_comm_index = 11 [packed = true];</code>
       * @param index The index of the element to return.
       * @return The wakingCommIndex at the given index.
       */
      public int getWakingCommIndex(int index) {
        return wakingCommIndex_.getInt(index);
      }
      private int wakingCommIndexMemoizedSerializedSize = -1;

      private byte memoizedIsInitialized = -1;
      @java.lang.Override
      public final boolean isInitialized() {
        byte isInitialized = memoizedIsInitialized;
        if (isInitialized == 1) return true;
        if (isInitialized == 0) return false;

        memoizedIsInitialized = 1;
        return true;
      }

      @java.lang.Override
      public void writeTo(com.google.protobuf.CodedOutputStream output)
                          throws java.io.IOException {
        getSerializedSize();
        if (getSwitchTimestampList().size() > 0) {
          output.writeUInt32NoTag(10);
          output.writeUInt32NoTag(switchTimestampMemoizedSerializedSize);
        }
        for (int i = 0; i < switchTimestamp_.size(); i++) {
          output.writeUInt64NoTag(switchTimestamp_.getLong(i));
        }
        if (getSwitchPrevStateList().size() > 0) {
          output.writeUInt32NoTag(18);
          output.writeUInt32NoTag(switchPrevStateMemoizedSerializedSize);
        }
        for (int i = 0; i < switchPrevState_.size(); i++) {
          output.writeInt64NoTag(switchPrevState_.getLong(i));
        }
        if (getSwitchNextPidList().size() > 0) {
          output.writeUInt32NoTag(26);
          output.writeUInt32NoTag(switchNextPidMemoizedSerializedSize);
        }
        for (int i = 0; i < switchNextPid_.size(); i++) {
          output.writeInt32NoTag(switchNextPid_.getInt(i));
        }
        if (getSwitchNextPrioList().size() > 0) {
          output.writeUInt32NoTag(34);
          output.writeUInt32NoTag(switchNextPrioMemoizedSerializedSize);
        }
        for (int i = 0; i < switchNextPrio_.size(); i++) {
          output.writeInt32NoTag(switchNextPrio_.getInt(i));
        }
        for (int i = 0; i < internTable_.size(); i++) {
          com.google.protobuf.GeneratedMessageV3.writeString(output, 5, internTable_.getRaw(i));
        }
        if (getSwitchNextCommIndexList().size() > 0) {
          output.writeUInt32NoTag(50);
          output.writeUInt32NoTag(switchNextCommIndexMemoizedSerializedSize);
        }
        for (int i = 0; i < switchNextCommIndex_.size(); i++) {
          output.writeUInt32NoTag(switchNextCommIndex_.getInt(i));
        }
        if (getWakingTimestampList().size() > 0) {
          output.writeUInt32NoTag(58);
          output.writeUInt32NoTag(wakingTimestampMemoizedSerializedSize);
        }
        for (int i = 0; i < wakingTimestamp_.size(); i++) {
          output.writeUInt64NoTag(wakingTimestamp_.getLong(i));
        }
        if (getWakingPidList().size() > 0) {
          output.writeUInt32NoTag(66);
          output.writeUInt32NoTag(wakingPidMemoizedSerializedSize);
        }
        for (int i = 0; i < wakingPid_.size(); i++) {
          output.writeInt32NoTag(wakingPid_.getInt(i));
        }
        if (getWakingTargetCpuList().size() > 0) {
          output.writeUInt32NoTag(74);
          output.writeUInt32NoTag(wakingTargetCpuMemoizedSerializedSize);
        }
        for (int i = 0; i < wakingTargetCpu_.size(); i++) {
          output.writeInt32NoTag(wakingTargetCpu_.getInt(i));
        }
        if (getWakingPrioList().size() > 0) {
          output.writeUInt32NoTag(82);
          output.writeUInt32NoTag(wakingPrioMemoizedSerializedSize);
        }
        for (int i = 0; i < wakingPrio_.size(); i++) {
          output.writeInt32NoTag(wakingPrio_.getInt(i));
        }
        if (getWakingCommIndexList().size() > 0) {
          output.writeUInt32NoTag(90);
          output.writeUInt32NoTag(wakingCommIndexMemoizedSerializedSize);
        }
        for (int i = 0; i < wakingCommIndex_.size(); i++) {
          output.writeUInt32NoTag(wakingCommIndex_.getInt(i));
        }
        getUnknownFields().writeTo(output);
      }

      @java.lang.Override
      public int getSerializedSize() {
        int size = memoizedSize;
        if (size != -1) return size;

        size = 0;
        {
          int dataSize = 0;
          for (int i = 0; i < switchTimestamp_.size(); i++) {
            dataSize += com.google.protobuf.CodedOutputStream
              .computeUInt64SizeNoTag(switchTimestamp_.getLong(i));
          }
          size += dataSize;
          if (!getSwitchTimestampList().isEmpty()) {
            size += 1;
            size += com.google.protobuf.CodedOutputStream
                .computeInt32SizeNoTag(dataSize);
          }
          switchTimestampMemoizedSerializedSize = dataSize;
        }
        {
          int dataSize = 0;
          for (int i = 0; i < switchPrevState_.size(); i++) {
            dataSize += com.google.protobuf.CodedOutputStream
              .computeInt64SizeNoTag(switchPrevState_.getLong(i));
          }
          size += dataSize;
          if (!getSwitchPrevStateList().isEmpty()) {
            size += 1;
            size += com.google.protobuf.CodedOutputStream
                .computeInt32SizeNoTag(dataSize);
          }
          switchPrevStateMemoizedSerializedSize = dataSize;
        }
        {
          int dataSize = 0;
          for (int i = 0; i < switchNextPid_.size(); i++) {
            dataSize += com.google.protobuf.CodedOutputStream
              .computeInt32SizeNoTag(switchNextPid_.getInt(i));
          }
          size += dataSize;
          if (!getSwitchNextPidList().isEmpty()) {
            size += 1;
            size += com.google.protobuf.CodedOutputStream
                .computeInt32SizeNoTag(dataSize);
          }
          switchNextPidMemoizedSerializedSize = dataSize;
        }
        {
          int dataSize = 0;
          for (int i = 0; i < switchNextPrio_.size(); i++) {
            dataSize += com.google.protobuf.CodedOutputStream
              .computeInt32SizeNoTag(switchNextPrio_.getInt(i));
          }
          size += dataSize;
          if (!getSwitchNextPrioList().isEmpty()) {
            size += 1;
            size += com.google.protobuf.CodedOutputStream
                .computeInt32SizeNoTag(dataSize);
          }
          switchNextPrioMemoizedSerializedSize = dataSize;
        }
        {
          int dataSize = 0;
          for (int i = 0; i < internTable_.size(); i++) {
            dataSize += computeStringSizeNoTag(internTable_.getRaw(i));
          }
          size += dataSize;
          size += 1 * getInternTableList().size();
        }
        {
          int dataSize = 0;
          for (int i = 0; i < switchNextCommIndex_.size(); i++) {
            dataSize += com.google.protobuf.CodedOutputStream
              .computeUInt32SizeNoTag(switchNextCommIndex_.getInt(i));
          }
          size += dataSize;
          if (!getSwitchNextCommIndexList().isEmpty()) {
            size += 1;
            size += com.google.protobuf.CodedOutputStream
                .computeInt32SizeNoTag(dataSize);
          }
          switchNextCommIndexMemoizedSerializedSize = dataSize;
        }
        {
          int dataSize = 0;
          for (int i = 0; i < wakingTimestamp_.size(); i++) {
            dataSize += com.google.protobuf.CodedOutputStream
              .computeUInt64SizeNoTag(wakingTimestamp_.getLong(i));
          }
          size += dataSize;
          if (!getWakingTimestampList().isEmpty()) {
            size += 1;
            size += com.google.protobuf.CodedOutputStream
                .computeInt32SizeNoTag(dataSize);
          }
          wakingTimestampMemoizedSerializedSize = dataSize;
        }
        {
          int dataSize = 0;
          for (int i = 0; i < wakingPid_.size(); i++) {
            dataSize += com.google.protobuf.CodedOutputStream
              .computeInt32SizeNoTag(wakingPid_.getInt(i));
          }
          size += dataSize;
          if (!getWakingPidList().isEmpty()) {
            size += 1;
            size += com.google.protobuf.CodedOutputStream
                .computeInt32SizeNoTag(dataSize);
          }
          wakingPidMemoizedSerializedSize = dataSize;
        }
        {
          int dataSize = 0;
          for (int i = 0; i < wakingTargetCpu_.size(); i++) {
            dataSize += com.google.protobuf.CodedOutputStream
              .computeInt32SizeNoTag(wakingTargetCpu_.getInt(i));
          }
          size += dataSize;
          if (!getWakingTargetCpuList().isEmpty()) {
            size += 1;
            size += com.google.protobuf.CodedOutputStream
                .computeInt32SizeNoTag(dataSize);
          }
          wakingTargetCpuMemoizedSerializedSize = dataSize;
        }
        {
          int dataSize = 0;
          for (int i = 0; i < wakingPrio_.size(); i++) {
            dataSize += com.google.protobuf.CodedOutputStream
              .computeInt32SizeNoTag(wakingPrio_.getInt(i));
          }
          size += dataSize;
          if (!getWakingPrioList().isEmpty()) {
            size += 1;
            size += com.google.protobuf.CodedOutputStream
                .computeInt32SizeNoTag(dataSize);
          }
          wakingPrioMemoizedSerializedSize = dataSize;
        }
        {
          int dataSize = 0;
          for (int i = 0; i < wakingCommIndex_.size(); i++) {
            dataSize += com.google.protobuf.CodedOutputStream
              .computeUInt32SizeNoTag(wakingCommIndex_.getInt(i));
          }
          size += dataSize;
          if (!getWakingCommIndexList().isEmpty()) {
            size += 1;
            size += com.google.protobuf.CodedOutputStream
                .computeInt32SizeNoTag(dataSize);
          }
          wakingCommIndexMemoizedSerializedSize = dataSize;
        }
        size += getUnknownFields().getSerializedSize();
        memoizedSize = size;
        return size;
      }

      @java.lang.Override
      public boolean equals(final java.lang.Object obj) {
        if (obj == this) {
         return true;
        }
        if (!(obj instanceof perfetto.protos.FtraceEventBundleOuterClass.FtraceEventBundle.CompactSched)) {
          return super.equals(obj);
        }
        perfetto.protos.FtraceEventBundleOuterClass.FtraceEventBundle.CompactSched other = (perfetto.protos.FtraceEventBundleOuterClass.FtraceEventBundle.CompactSched) obj;

        if (!getInternTableList()
            .equals(other.getInternTableList())) return false;
        if (!getSwitchTimestampList()
            .equals(other.getSwitchTimestampList())) return false;
        if (!getSwitchPrevStateList()
            .equals(other.getSwitchPrevStateList())) return false;
        if (!getSwitchNextPidList()
            .equals(other.getSwitchNextPidList())) return false;
        if (!getSwitchNextPrioList()
            .equals(other.getSwitchNextPrioList())) return false;
        if (!getSwitchNextCommIndexList()
            .equals(other.getSwitchNextCommIndexList())) return false;
        if (!getWakingTimestampList()
            .equals(other.getWakingTimestampList())) return false;
        if (!getWakingPidList()
            .equals(other.getWakingPidList())) return false;
        if (!getWakingTargetCpuList()
            .equals(other.getWakingTargetCpuList())) return false;
        if (!getWakingPrioList()
            .equals(other.getWakingPrioList())) return false;
        if (!getWakingCommIndexList()
            .equals(other.getWakingCommIndexList())) return false;
        if (!getUnknownFields().equals(other.getUnknownFields())) return false;
        return true;
      }

      @java.lang.Override
      public int hashCode() {
        if (memoizedHashCode != 0) {
          return memoizedHashCode;
        }
        int hash = 41;
        hash = (19 * hash) + getDescriptor().hashCode();
        if (getInternTableCount() > 0) {
          hash = (37 * hash) + INTERN_TABLE_FIELD_NUMBER;
          hash = (53 * hash) + getInternTableList().hashCode();
        }
        if (getSwitchTimestampCount() > 0) {
          hash = (37 * hash) + SWITCH_TIMESTAMP_FIELD_NUMBER;
          hash = (53 * hash) + getSwitchTimestampList().hashCode();
        }
        if (getSwitchPrevStateCount() > 0) {
          hash = (37 * hash) + SWITCH_PREV_STATE_FIELD_NUMBER;
          hash = (53 * hash) + getSwitchPrevStateList().hashCode();
        }
        if (getSwitchNextPidCount() > 0) {
          hash = (37 * hash) + SWITCH_NEXT_PID_FIELD_NUMBER;
          hash = (53 * hash) + getSwitchNextPidList().hashCode();
        }
        if (getSwitchNextPrioCount() > 0) {
          hash = (37 * hash) + SWITCH_NEXT_PRIO_FIELD_NUMBER;
          hash = (53 * hash) + getSwitchNextPrioList().hashCode();
        }
        if (getSwitchNextCommIndexCount() > 0) {
          hash = (37 * hash) + SWITCH_NEXT_COMM_INDEX_FIELD_NUMBER;
          hash = (53 * hash) + getSwitchNextCommIndexList().hashCode();
        }
        if (getWakingTimestampCount() > 0) {
          hash = (37 * hash) + WAKING_TIMESTAMP_FIELD_NUMBER;
          hash = (53 * hash) + getWakingTimestampList().hashCode();
        }
        if (getWakingPidCount() > 0) {
          hash = (37 * hash) + WAKING_PID_FIELD_NUMBER;
          hash = (53 * hash) + getWakingPidList().hashCode();
        }
        if (getWakingTargetCpuCount() > 0) {
          hash = (37 * hash) + WAKING_TARGET_CPU_FIELD_NUMBER;
          hash = (53 * hash) + getWakingTargetCpuList().hashCode();
        }
        if (getWakingPrioCount() > 0) {
          hash = (37 * hash) + WAKING_PRIO_FIELD_NUMBER;
          hash = (53 * hash) + getWakingPrioList().hashCode();
        }
        if (getWakingCommIndexCount() > 0) {
          hash = (37 * hash) + WAKING_COMM_INDEX_FIELD_NUMBER;
          hash = (53 * hash) + getWakingCommIndexList().hashCode();
        }
        hash = (29 * hash) + getUnknownFields().hashCode();
        memoizedHashCode = hash;
        return hash;
      }

      public static perfetto.protos.FtraceEventBundleOuterClass.FtraceEventBundle.CompactSched parseFrom(
          java.nio.ByteBuffer data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static perfetto.protos.FtraceEventBundleOuterClass.FtraceEventBundle.CompactSched parseFrom(
          java.nio.ByteBuffer data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static perfetto.protos.FtraceEventBundleOuterClass.FtraceEventBundle.CompactSched parseFrom(
          com.google.protobuf.ByteString data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static perfetto.protos.FtraceEventBundleOuterClass.FtraceEventBundle.CompactSched parseFrom(
          com.google.protobuf.ByteString data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static perfetto.protos.FtraceEventBundleOuterClass.FtraceEventBundle.CompactSched parseFrom(byte[] data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static perfetto.protos.FtraceEventBundleOuterClass.FtraceEventBundle.CompactSched parseFrom(
          byte[] data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static perfetto.protos.FtraceEventBundleOuterClass.FtraceEventBundle.CompactSched parseFrom(java.io.InputStream input)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseWithIOException(PARSER, input);
      }
      public static perfetto.protos.FtraceEventBundleOuterClass.FtraceEventBundle.CompactSched parseFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseWithIOException(PARSER, input, extensionRegistry);
      }
      public static perfetto.protos.FtraceEventBundleOuterClass.FtraceEventBundle.CompactSched parseDelimitedFrom(java.io.InputStream input)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseDelimitedWithIOException(PARSER, input);
      }
      public static perfetto.protos.FtraceEventBundleOuterClass.FtraceEventBundle.CompactSched parseDelimitedFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
      }
      public static perfetto.protos.FtraceEventBundleOuterClass.FtraceEventBundle.CompactSched parseFrom(
          com.google.protobuf.CodedInputStream input)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseWithIOException(PARSER, input);
      }
      public static perfetto.protos.FtraceEventBundleOuterClass.FtraceEventBundle.CompactSched parseFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseWithIOException(PARSER, input, extensionRegistry);
      }

      @java.lang.Override
      public Builder newBuilderForType() { return newBuilder(); }
      public static Builder newBuilder() {
        return DEFAULT_INSTANCE.toBuilder();
      }
      public static Builder newBuilder(perfetto.protos.FtraceEventBundleOuterClass.FtraceEventBundle.CompactSched prototype) {
        return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
      }
      @java.lang.Override
      public Builder toBuilder() {
        return this == DEFAULT_INSTANCE
            ? new Builder() : new Builder().mergeFrom(this);
      }

      @java.lang.Override
      protected Builder newBuilderForType(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        Builder builder = new Builder(parent);
        return builder;
      }
      /**
       * <pre>
       * Optionally-enabled compact encoding of a batch of scheduling events. Only
       * a subset of events &amp; their fields is recorded.
       * All fields (except comms) are stored in a structure-of-arrays form, one
       * entry in each repeated field per event.
       * </pre>
       *
       * Protobuf type {@code perfetto.protos.FtraceEventBundle.CompactSched}
       */
      public static final class Builder extends
          com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
          // @@protoc_insertion_point(builder_implements:perfetto.protos.FtraceEventBundle.CompactSched)
          perfetto.protos.FtraceEventBundleOuterClass.FtraceEventBundle.CompactSchedOrBuilder {
        public static final com.google.protobuf.Descriptors.Descriptor
            getDescriptor() {
          return perfetto.protos.FtraceEventBundleOuterClass.internal_static_perfetto_protos_FtraceEventBundle_CompactSched_descriptor;
        }

        @java.lang.Override
        protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
            internalGetFieldAccessorTable() {
          return perfetto.protos.FtraceEventBundleOuterClass.internal_static_perfetto_protos_FtraceEventBundle_CompactSched_fieldAccessorTable
              .ensureFieldAccessorsInitialized(
                  perfetto.protos.FtraceEventBundleOuterClass.FtraceEventBundle.CompactSched.class, perfetto.protos.FtraceEventBundleOuterClass.FtraceEventBundle.CompactSched.Builder.class);
        }

        // Construct using perfetto.protos.FtraceEventBundleOuterClass.FtraceEventBundle.CompactSched.newBuilder()
        private Builder() {

        }

        private Builder(
            com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
          super(parent);

        }
        @java.lang.Override
        public Builder clear() {
          super.clear();
          bitField0_ = 0;
          internTable_ = com.google.protobuf.LazyStringArrayList.EMPTY;
          bitField0_ = (bitField0_ & ~0x00000001);
          switchTimestamp_ = emptyLongList();
          switchPrevState_ = emptyLongList();
          switchNextPid_ = emptyIntList();
          switchNextPrio_ = emptyIntList();
          switchNextCommIndex_ = emptyIntList();
          wakingTimestamp_ = emptyLongList();
          wakingPid_ = emptyIntList();
          wakingTargetCpu_ = emptyIntList();
          wakingPrio_ = emptyIntList();
          wakingCommIndex_ = emptyIntList();
          return this;
        }

        @java.lang.Override
        public com.google.protobuf.Descriptors.Descriptor
            getDescriptorForType() {
          return perfetto.protos.FtraceEventBundleOuterClass.internal_static_perfetto_protos_FtraceEventBundle_CompactSched_descriptor;
        }

        @java.lang.Override
        public perfetto.protos.FtraceEventBundleOuterClass.FtraceEventBundle.CompactSched getDefaultInstanceForType() {
          return perfetto.protos.FtraceEventBundleOuterClass.FtraceEventBundle.CompactSched.getDefaultInstance();
        }

        @java.lang.Override
        public perfetto.protos.FtraceEventBundleOuterClass.FtraceEventBundle.CompactSched build() {
          perfetto.protos.FtraceEventBundleOuterClass.FtraceEventBundle.CompactSched result = buildPartial();
          if (!result.isInitialized()) {
            throw newUninitializedMessageException(result);
          }
          return result;
        }

        @java.lang.Override
        public perfetto.protos.FtraceEventBundleOuterClass.FtraceEventBundle.CompactSched buildPartial() {
          perfetto.protos.FtraceEventBundleOuterClass.FtraceEventBundle.CompactSched result = new perfetto.protos.FtraceEventBundleOuterClass.FtraceEventBundle.CompactSched(this);
          buildPartialRepeatedFields(result);
          if (bitField0_ != 0) { buildPartial0(result); }
          onBuilt();
          return result;
        }

        private void buildPartialRepeatedFields(perfetto.protos.FtraceEventBundleOuterClass.FtraceEventBundle.CompactSched result) {
          if (((bitField0_ & 0x00000001) != 0)) {
            internTable_ = internTable_.getUnmodifiableView();
            bitField0_ = (bitField0_ & ~0x00000001);
          }
          result.internTable_ = internTable_;
          if (((bitField0_ & 0x00000002) != 0)) {
            switchTimestamp_.makeImmutable();
            bitField0_ = (bitField0_ & ~0x00000002);
          }
          result.switchTimestamp_ = switchTimestamp_;
          if (((bitField0_ & 0x00000004) != 0)) {
            switchPrevState_.makeImmutable();
            bitField0_ = (bitField0_ & ~0x00000004);
          }
          result.switchPrevState_ = switchPrevState_;
          if (((bitField0_ & 0x00000008) != 0)) {
            switchNextPid_.makeImmutable();
            bitField0_ = (bitField0_ & ~0x00000008);
          }
          result.switchNextPid_ = switchNextPid_;
          if (((bitField0_ & 0x00000010) != 0)) {
            switchNextPrio_.makeImmutable();
            bitField0_ = (bitField0_ & ~0x00000010);
          }
          result.switchNextPrio_ = switchNextPrio_;
          if (((bitField0_ & 0x00000020) != 0)) {
            switchNextCommIndex_.makeImmutable();
            bitField0_ = (bitField0_ & ~0x00000020);
          }
          result.switchNextCommIndex_ = switchNextCommIndex_;
          if (((bitField0_ & 0x00000040) != 0)) {
            wakingTimestamp_.makeImmutable();
            bitField0_ = (bitField0_ & ~0x00000040);
          }
          result.wakingTimestamp_ = wakingTimestamp_;
          if (((bitField0_ & 0x00000080) != 0)) {
            wakingPid_.makeImmutable();
            bitField0_ = (bitField0_ & ~0x00000080);
          }
          result.wakingPid_ = wakingPid_;
          if (((bitField0_ & 0x00000100) != 0)) {
            wakingTargetCpu_.makeImmutable();
            bitField0_ = (bitField0_ & ~0x00000100);
          }
          result.wakingTargetCpu_ = wakingTargetCpu_;
          if (((bitField0_ & 0x00000200) != 0)) {
            wakingPrio_.makeImmutable();
            bitField0_ = (bitField0_ & ~0x00000200);
          }
          result.wakingPrio_ = wakingPrio_;
          if (((bitField0_ & 0x00000400) != 0)) {
            wakingCommIndex_.makeImmutable();
            bitField0_ = (bitField0_ & ~0x00000400);
          }
          result.wakingCommIndex_ = wakingCommIndex_;
        }

        private void buildPartial0(perfetto.protos.FtraceEventBundleOuterClass.FtraceEventBundle.CompactSched result) {
          int from_bitField0_ = bitField0_;
        }

        @java.lang.Override
        public Builder clone() {
          return super.clone();
        }
        @java.lang.Override
        public Builder setField(
            com.google.protobuf.Descriptors.FieldDescriptor field,
            java.lang.Object value) {
          return super.setField(field, value);
        }
        @java.lang.Override
        public Builder clearField(
            com.google.protobuf.Descriptors.FieldDescriptor field) {
          return super.clearField(field);
        }
        @java.lang.Override
        public Builder clearOneof(
            com.google.protobuf.Descriptors.OneofDescriptor oneof) {
          return super.clearOneof(oneof);
        }
        @java.lang.Override
        public Builder setRepeatedField(
            com.google.protobuf.Descriptors.FieldDescriptor field,
            int index, java.lang.Object value) {
          return super.setRepeatedField(field, index, value);
        }
        @java.lang.Override
        public Builder addRepeatedField(
            com.google.protobuf.Descriptors.FieldDescriptor field,
            java.lang.Object value) {
          return super.addRepeatedField(field, value);
        }
        @java.lang.Override
        public Builder mergeFrom(com.google.protobuf.Message other) {
          if (other instanceof perfetto.protos.FtraceEventBundleOuterClass.FtraceEventBundle.CompactSched) {
            return mergeFrom((perfetto.protos.FtraceEventBundleOuterClass.FtraceEventBundle.CompactSched)other);
          } else {
            super.mergeFrom(other);
            return this;
          }
        }

        public Builder mergeFrom(perfetto.protos.FtraceEventBundleOuterClass.FtraceEventBundle.CompactSched other) {
          if (other == perfetto.protos.FtraceEventBundleOuterClass.FtraceEventBundle.CompactSched.getDefaultInstance()) return this;
          if (!other.internTable_.isEmpty()) {
            if (internTable_.isEmpty()) {
              internTable_ = other.internTable_;
              bitField0_ = (bitField0_ & ~0x00000001);
            } else {
              ensureInternTableIsMutable();
              internTable_.addAll(other.internTable_);
            }
            onChanged();
          }
          if (!other.switchTimestamp_.isEmpty()) {
            if (switchTimestamp_.isEmpty()) {
              switchTimestamp_ = other.switchTimestamp_;
              bitField0_ = (bitField0_ & ~0x00000002);
            } else {
              ensureSwitchTimestampIsMutable();
              switchTimestamp_.addAll(other.switchTimestamp_);
            }
            onChanged();
          }
          if (!other.switchPrevState_.isEmpty()) {
            if (switchPrevState_.isEmpty()) {
              switchPrevState_ = other.switchPrevState_;
              bitField0_ = (bitField0_ & ~0x00000004);
            } else {
              ensureSwitchPrevStateIsMutable();
              switchPrevState_.addAll(other.switchPrevState_);
            }
            onChanged();
          }
          if (!other.switchNextPid_.isEmpty()) {
            if (switchNextPid_.isEmpty()) {
              switchNextPid_ = other.switchNextPid_;
              bitField0_ = (bitField0_ & ~0x00000008);
            } else {
              ensureSwitchNextPidIsMutable();
              switchNextPid_.addAll(other.switchNextPid_);
            }
            onChanged();
          }
          if (!other.switchNextPrio_.isEmpty()) {
            if (switchNextPrio_.isEmpty()) {
              switchNextPrio_ = other.switchNextPrio_;
              bitField0_ = (bitField0_ & ~0x00000010);
            } else {
              ensureSwitchNextPrioIsMutable();
              switchNextPrio_.addAll(other.switchNextPrio_);
            }
            onChanged();
          }
          if (!other.switchNextCommIndex_.isEmpty()) {
            if (switchNextCommIndex_.isEmpty()) {
              switchNextCommIndex_ = other.switchNextCommIndex_;
              bitField0_ = (bitField0_ & ~0x00000020);
            } else {
              ensureSwitchNextCommIndexIsMutable();
              switchNextCommIndex_.addAll(other.switchNextCommIndex_);
            }
            onChanged();
          }
          if (!other.wakingTimestamp_.isEmpty()) {
            if (wakingTimestamp_.isEmpty()) {
              wakingTimestamp_ = other.wakingTimestamp_;
              bitField0_ = (bitField0_ & ~0x00000040);
            } else {
              ensureWakingTimestampIsMutable();
              wakingTimestamp_.addAll(other.wakingTimestamp_);
            }
            onChanged();
          }
          if (!other.wakingPid_.isEmpty()) {
            if (wakingPid_.isEmpty()) {
              wakingPid_ = other.wakingPid_;
              bitField0_ = (bitField0_ & ~0x00000080);
            } else {
              ensureWakingPidIsMutable();
              wakingPid_.addAll(other.wakingPid_);
            }
            onChanged();
          }
          if (!other.wakingTargetCpu_.isEmpty()) {
            if (wakingTargetCpu_.isEmpty()) {
              wakingTargetCpu_ = other.wakingTargetCpu_;
              bitField0_ = (bitField0_ & ~0x00000100);
            } else {
              ensureWakingTargetCpuIsMutable();
              wakingTargetCpu_.addAll(other.wakingTargetCpu_);
            }
            onChanged();
          }
          if (!other.wakingPrio_.isEmpty()) {
            if (wakingPrio_.isEmpty()) {
              wakingPrio_ = other.wakingPrio_;
              bitField0_ = (bitField0_ & ~0x00000200);
            } else {
              ensureWakingPrioIsMutable();
              wakingPrio_.addAll(other.wakingPrio_);
            }
            onChanged();
          }
          if (!other.wakingCommIndex_.isEmpty()) {
            if (wakingCommIndex_.isEmpty()) {
              wakingCommIndex_ = other.wakingCommIndex_;
              bitField0_ = (bitField0_ & ~0x00000400);
            } else {
              ensureWakingCommIndexIsMutable();
              wakingCommIndex_.addAll(other.wakingCommIndex_);
            }
            onChanged();
          }
          this.mergeUnknownFields(other.getUnknownFields());
          onChanged();
          return this;
        }

        @java.lang.Override
        public final boolean isInitialized() {
          return true;
        }

        @java.lang.Override
        public Builder mergeFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws java.io.IOException {
          if (extensionRegistry == null) {
            throw new java.lang.NullPointerException();
          }
          try {
            boolean done = false;
            while (!done) {
              int tag = input.readTag();
              switch (tag) {
                case 0:
                  done = true;
                  break;
                case 8: {
                  long v = input.readUInt64();
                  ensureSwitchTimestampIsMutable();
                  switchTimestamp_.addLong(v);
                  break;
                } // case 8
                case 10: {
                  int length = input.readRawVarint32();
                  int limit = input.pushLimit(length);
                  ensureSwitchTimestampIsMutable();
                  while (input.getBytesUntilLimit() > 0) {
                    switchTimestamp_.addLong(input.readUInt64());
                  }
                  input.popLimit(limit);
                  break;
                } // case 10
                case 16: {
                  long v = input.readInt64();
                  ensureSwitchPrevStateIsMutable();
                  switchPrevState_.addLong(v);
                  break;
                } // case 16
                case 18: {
                  int length = input.readRawVarint32();
                  int limit = input.pushLimit(length);
                  ensureSwitchPrevStateIsMutable();
                  while (input.getBytesUntilLimit() > 0) {
                    switchPrevState_.addLong(input.readInt64());
                  }
                  input.popLimit(limit);
                  break;
                } // case 18
                case 24: {
                  int v = input.readInt32();
                  ensureSwitchNextPidIsMutable();
                  switchNextPid_.addInt(v);
                  break;
                } // case 24
                case 26: {
                  int length = input.readRawVarint32();
                  int limit = input.pushLimit(length);
                  ensureSwitchNextPidIsMutable();
                  while (input.getBytesUntilLimit() > 0) {
                    switchNextPid_.addInt(input.readInt32());
                  }
                  input.popLimit(limit);
                  break;
                } // case 26
                case 32: {
                  int v = input.readInt32();
                  ensureSwitchNextPrioIsMutable();
                  switchNextPrio_.addInt(v);
                  break;
                } // case 32
                case 34: {
                  int length = input.readRawVarint32();
                  int limit = input.pushLimit(length);
                  ensureSwitchNextPrioIsMutable();
                  while (input.getBytesUntilLimit() > 0) {
                    switchNextPrio_.addInt(input.readInt32());
                  }
                  input.popLimit(limit);
                  break;
                } // case 34
                case 42: {
                  com.google.protobuf.ByteString bs = input.readBytes();
                  ensureInternTableIsMutable();
                  internTable_.add(bs);
                  break;
                } // case 42
                case 48: {
                  int v = input.readUInt32();
                  ensureSwitchNextCommIndexIsMutable();
                  switchNextCommIndex_.addInt(v);
                  break;
                } // case 48
                case 50: {
                  int length = input.readRawVarint32();
                  int limit = input.pushLimit(length);
                  ensureSwitchNextCommIndexIsMutable();
                  while (input.getBytesUntilLimit() > 0) {
                    switchNextCommIndex_.addInt(input.readUInt32());
                  }
                  input.popLimit(limit);
                  break;
                } // case 50
                case 56: {
                  long v = input.readUInt64();
                  ensureWakingTimestampIsMutable();
                  wakingTimestamp_.addLong(v);
                  break;
                } // case 56
                case 58: {
                  int length = input.readRawVarint32();
                  int limit = input.pushLimit(length);
                  ensureWakingTimestampIsMutable();
                  while (input.getBytesUntilLimit() > 0) {
                    wakingTimestamp_.addLong(input.readUInt64());
                  }
                  input.popLimit(limit);
                  break;
                } // case 58
                case 64: {
                  int v = input.readInt32();
                  ensureWakingPidIsMutable();
                  wakingPid_.addInt(v);
                  break;
                } // case 64
                case 66: {
                  int length = input.readRawVarint32();
                  int limit = input.pushLimit(length);
                  ensureWakingPidIsMutable();
                  while (input.getBytesUntilLimit() > 0) {
                    wakingPid_.addInt(input.readInt32());
                  }
                  input.popLimit(limit);
                  break;
                } // case 66
                case 72: {
                  int v = input.readInt32();
                  ensureWakingTargetCpuIsMutable();
                  wakingTargetCpu_.addInt(v);
                  break;
                } // case 72
                case 74: {
                  int length = input.readRawVarint32();
                  int limit = input.pushLimit(length);
                  ensureWakingTargetCpuIsMutable();
                  while (input.getBytesUntilLimit() > 0) {
                    wakingTargetCpu_.addInt(input.readInt32());
                  }
                  input.popLimit(limit);
                  break;
                } // case 74
                case 80: {
                  int v = input.readInt32();
                  ensureWakingPrioIsMutable();
                  wakingPrio_.addInt(v);
                  break;
                } // case 80
                case 82: {
                  int length = input.readRawVarint32();
                  int limit = input.pushLimit(length);
                  ensureWakingPrioIsMutable();
                  while (input.getBytesUntilLimit() > 0) {
                    wakingPrio_.addInt(input.readInt32());
                  }
                  input.popLimit(limit);
                  break;
                } // case 82
                case 88: {
                  int v = input.readUInt32();
                  ensureWakingCommIndexIsMutable();
                  wakingCommIndex_.addInt(v);
                  break;
                } // case 88
                case 90: {
                  int length = input.readRawVarint32();
                  int limit = input.pushLimit(length);
                  ensureWakingCommIndexIsMutable();
                  while (input.getBytesUntilLimit() > 0) {
                    wakingCommIndex_.addInt(input.readUInt32());
                  }
                  input.popLimit(limit);
                  break;
                } // case 90
                default: {
                  if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                    done = true; // was an endgroup tag
                  }
                  break;
                } // default:
              } // switch (tag)
            } // while (!done)
          } catch (com.google.protobuf.InvalidProtocolBufferException e) {
            throw e.unwrapIOException();
          } finally {
            onChanged();
          } // finally
          return this;
        }
        private int bitField0_;

        private com.google.protobuf.LazyStringList internTable_ = com.google.protobuf.LazyStringArrayList.EMPTY;
        private void ensureInternTableIsMutable() {
          if (!((bitField0_ & 0x00000001) != 0)) {
            internTable_ = new com.google.protobuf.LazyStringArrayList(internTable_);
            bitField0_ |= 0x00000001;
           }
        }
        /**
         * <pre>
         * Interned table of unique strings for this bundle.
         * </pre>
         *
         * <code>repeated string intern_table = 5;</code>
         * @return A list containing the internTable.
         */
        public com.google.protobuf.ProtocolStringList
            getInternTableList() {
          return internTable_.getUnmodifiableView();
        }
        /**
         * <pre>
         * Interned table of unique strings for this bundle.
         * </pre>
         *
         * <code>repeated string intern_table = 5;</code>
         * @return The count of internTable.
         */
        public int getInternTableCount() {
          return internTable_.size();
        }
        /**
         * <pre>
         * Interned table of unique strings for this bundle.
         * </pre>
         *
         * <code>repeated string intern_table = 5;</code>
         * @param index The index of the element to return.
         * @return The internTable at the given index.
         */
        public java.lang.String getInternTable(int index) {
          return internTable_.get(index);
        }
        /**
         * <pre>
         * Interned table of unique strings for this bundle.
         * </pre>
         *
         * <code>repeated string intern_table = 5;</code>
         * @param index The index of the value to return.
         * @return The bytes of the internTable at the given index.
         */
        public com.google.protobuf.ByteString
            getInternTableBytes(int index) {
          return internTable_.getByteString(index);
        }
        /**
         * <pre>
         * Interned table of unique strings for this bundle.
         * </pre>
         *
         * <code>repeated string intern_table = 5;</code>
         * @param index The index to set the value at.
         * @param value The internTable to set.
         * @return This builder for chaining.
         */
        public Builder setInternTable(
            int index, java.lang.String value) {
          if (value == null) { throw new NullPointerException(); }
          ensureInternTableIsMutable();
          internTable_.set(index, value);
          onChanged();
          return this;
        }
        /**
         * <pre>
         * Interned table of unique strings for this bundle.
         * </pre>
         *
         * <code>repeated string intern_table = 5;</code>
         * @param value The internTable to add.
         * @return This builder for chaining.
         */
        public Builder addInternTable(
            java.lang.String value) {
          if (value == null) { throw new NullPointerException(); }
          ensureInternTableIsMutable();
          internTable_.add(value);
          onChanged();
          return this;
        }
        /**
         * <pre>
         * Interned table of unique strings for this bundle.
         * </pre>
         *
         * <code>repeated string intern_table = 5;</code>
         * @param values The internTable to add.
         * @return This builder for chaining.
         */
        public Builder addAllInternTable(
            java.lang.Iterable<java.lang.String> values) {
          ensureInternTableIsMutable();
          com.google.protobuf.AbstractMessageLite.Builder.addAll(
              values, internTable_);
          onChanged();
          return this;
        }
        /**
         * <pre>
         * Interned table of unique strings for this bundle.
         * </pre>
         *
         * <code>repeated string intern_table = 5;</code>
         * @return This builder for chaining.
         */
        public Builder clearInternTable() {
          internTable_ = com.google.protobuf.LazyStringArrayList.EMPTY;
          bitField0_ = (bitField0_ & ~0x00000001);
          onChanged();
          return this;
        }
        /**
         * <pre>
         * Interned table of unique strings for this bundle.
         * </pre>
         *
         * <code>repeated string intern_table = 5;</code>
         * @param value The bytes of the internTable to add.
         * @return This builder for chaining.
         */
        public Builder addInternTableBytes(
            com.google.protobuf.ByteString value) {
          if (value == null) { throw new NullPointerException(); }
          ensureInternTableIsMutable();
          internTable_.add(value);
          onChanged();
          return this;
        }

        private com.google.protobuf.Internal.LongList switchTimestamp_ = emptyLongList();
        private void ensureSwitchTimestampIsMutable() {
          if (!((bitField0_ & 0x00000002) != 0)) {
            switchTimestamp_ = mutableCopy(switchTimestamp_);
            bitField0_ |= 0x00000002;
          }
        }
        /**
         * <pre>
         * Delta-encoded timestamps across all sched_switch events within this
         * bundle. The first is absolute, each next one is relative to its
         * predecessor.
         * </pre>
         *
         * <code>repeated uint64 switch_timestamp = 1 [packed = true];</code>
         * @return A list containing the switchTimestamp.
         */
        public java.util.List<java.lang.Long>
            getSwitchTimestampList() {
          return ((bitField0_ & 0x00000002) != 0) ?
                   java.util.Collections.unmodifiableList(switchTimestamp_) : switchTimestamp_;
        }
        /**
         * <pre>
         * Delta-encoded timestamps across all sched_switch events within this
         * bundle. The first is absolute, each next one is relative to its
         * predecessor.
         * </pre>
         *
         * <code>repeated uint64 switch_timestamp = 1 [packed = true];</code>
         * @return The count of switchTimestamp.
         */
        public int getSwitchTimestampCount() {
          return switchTimestamp_.size();
        }
        /**
         * <pre>
         * Delta-encoded timestamps across all sched_switch events within this
         * bundle. The first is absolute, each next one is relative to its
         * predecessor.
         * </pre>
         *
         * <code>repeated uint64 switch_timestamp = 1 [packed = true];</code>
         * @param index The index of the element to return.
         * @return The switchTimestamp at the given index.
         */
        public long getSwitchTimestamp(int index) {
          return switchTimestamp_.getLong(index);
        }
        /**
         * <pre>
         * Delta-encoded timestamps across all sched_switch events within this
         * bundle. The first is absolute, each next one is relative to its
         * predecessor.
         * </pre>
         *
         * <code>repeated uint64 switch_timestamp = 1 [packed = true];</code>
         * @param index The index to set the value at.
         * @param value The switchTimestamp to set.
         * @return This builder for chaining.
         */
        public Builder setSwitchTimestamp(
            int index, long value) {
          
          ensureSwitchTimestampIsMutable();
          switchTimestamp_.setLong(index, value);
          onChanged();
          return this;
        }
        /**
         * <pre>
         * Delta-encoded timestamps across all sched_switch events within this
         * bundle. The first is absolute, each next one is relative to its
         * predecessor.
         * </pre>
         *
         * <code>repeated uint64 switch_timestamp = 1 [packed = true];</code>
         * @param value The switchTimestamp to add.
         * @return This builder for chaining.
         */
        public Builder addSwitchTimestamp(long value) {
          
          ensureSwitchTimestampIsMutable();
          switchTimestamp_.addLong(value);
          onChanged();
          return this;
        }
        /**
         * <pre>
         * Delta-encoded timestamps across all sched_switch events within this
         * bundle. The first is absolute, each next one is relative to its
         * predecessor.
         * </pre>
         *
         * <code>repeated uint64 switch_timestamp = 1 [packed = true];</code>
         * @param values The switchTimestamp to add.
         * @return This builder for chaining.
         */
        public Builder addAllSwitchTimestamp(
            java.lang.Iterable<? extends java.lang.Long> values) {
          ensureSwitchTimestampIsMutable();
          com.google.protobuf.AbstractMessageLite.Builder.addAll(
              values, switchTimestamp_);
          onChanged();
          return this;
        }
        /**
         * <pre>
         * Delta-encoded timestamps across all sched_switch events within this
         * bundle. The first is absolute, each next one is relative to its
         * predecessor.
         * </pre>
         *
         * <code>repeated uint64 switch_timestamp = 1 [packed = true];</code>
         * @return This builder for chaining.
         */
        public Builder clearSwitchTimestamp() {
          switchTimestamp_ = emptyLongList();
          bitField0_ = (bitField0_ & ~0x00000002);
          onChanged();
          return this;
        }

        private com.google.protobuf.Internal.LongList switchPrevState_ = emptyLongList();
        private void ensureSwitchPrevStateIsMutable() {
          if (!((bitField0_ & 0x00000004) != 0)) {
            switchPrevState_ = mutableCopy(switchPrevState_);
            bitField0_ |= 0x00000004;
          }
        }
        /**
         * <code>repeated int64 switch_prev_state = 2 [packed = true];</code>
         * @return A list containing the switchPrevState.
         */
        public java.util.List<java.lang.Long>
            getSwitchPrevStateList() {
          return ((bitField0_ & 0x00000004) != 0) ?
                   java.util.Collections.unmodifiableList(switchPrevState_) : switchPrevState_;
        }
        /**
         * <code>repeated int64 switch_prev_state = 2 [packed = true];</code>
         * @return The count of switchPrevState.
         */
        public int getSwitchPrevStateCount() {
          return switchPrevState_.size();
        }
        /**
         * <code>repeated int64 switch_prev_state = 2 [packed = true];</code>
         * @param index The index of the element to return.
         * @return The switchPrevState at the given index.
         */
        public long getSwitchPrevState(int index) {
          return switchPrevState_.getLong(index);
        }
        /**
         * <code>repeated int64 switch_prev_state = 2 [packed = true];</code>
         * @param index The index to set the value at.
         * @param value The switchPrevState to set.
         * @return This builder for chaining.
         */
        public Builder setSwitchPrevState(
            int index, long value) {
          
          ensureSwitchPrevStateIsMutable();
          switchPrevState_.setLong(index, value);
          onChanged();
          return this;
        }
        /**
         * <code>repeated int64 switch_prev_state = 2 [packed = true];</code>
         * @param value The switchPrevState to add.
         * @return This builder for chaining.
         */
        public Builder addSwitchPrevState(long value) {
          
          ensureSwitchPrevStateIsMutable();
          switchPrevState_.addLong(value);
          onChanged();
          return this;
        }
        /**
         * <code>repeated int64 switch_prev_state = 2 [packed = true];</code>
         * @param values The switchPrevState to add.
         * @return This builder for chaining.
         */
        public Builder addAllSwitchPrevState(
            java.lang.Iterable<? extends java.lang.Long> values) {
          ensureSwitchPrevStateIsMutable();
          com.google.protobuf.AbstractMessageLite.Builder.addAll(
              values, switchPrevState_);
          onChanged();
          return this;
        }
        /**
         * <code>repeated int64 switch_prev_state = 2 [packed = true];</code>
         * @return This builder for chaining.
         */
        public Builder clearSwitchPrevState() {
          switchPrevState_ = emptyLongList();
          bitField0_ = (bitField0_ & ~0x00000004);
          onChanged();
          return this;
        }

        private com.google.protobuf.Internal.IntList switchNextPid_ = emptyIntList();
        private void ensureSwitchNextPidIsMutable() {
          if (!((bitField0_ & 0x00000008) != 0)) {
            switchNextPid_ = mutableCopy(switchNextPid_);
            bitField0_ |= 0x00000008;
          }
        }
        /**
         * <code>repeated int32 switch_next_pid = 3 [packed = true];</code>
         * @return A list containing the switchNextPid.
         */
        public java.util.List<java.lang.Integer>
            getSwitchNextPidList() {
          return ((bitField0_ & 0x00000008) != 0) ?
                   java.util.Collections.unmodifiableList(switchNextPid_) : switchNextPid_;
        }
        /**
         * <code>repeated int32 switch_next_pid = 3 [packed = true];</code>
         * @return The count of switchNextPid.
         */
        public int getSwitchNextPidCount() {
          return switchNextPid_.size();
        }
        /**
         * <code>repeated int32 switch_next_pid = 3 [packed = true];</code>
         * @param index The index of the element to return.
         * @return The switchNextPid at the given index.
         */
        public int getSwitchNextPid(int index) {
          return switchNextPid_.getInt(index);
        }
        /**
         * <code>repeated int32 switch_next_pid = 3 [packed = true];</code>
         * @param index The index to set the value at.
         * @param value The switchNextPid to set.
         * @return This builder for chaining.
         */
        public Builder setSwitchNextPid(
            int index, int value) {
          
          ensureSwitchNextPidIsMutable();
          switchNextPid_.setInt(index, value);
          onChanged();
          return this;
        }
        /**
         * <code>repeated int32 switch_next_pid = 3 [packed = true];</code>
         * @param value The switchNextPid to add.
         * @return This builder for chaining.
         */
        public Builder addSwitchNextPid(int value) {
          
          ensureSwitchNextPidIsMutable();
          switchNextPid_.addInt(value);
          onChanged();
          return this;
        }
        /**
         * <code>repeated int32 switch_next_pid = 3 [packed = true];</code>
         * @param values The switchNextPid to add.
         * @return This builder for chaining.
         */
        public Builder addAllSwitchNextPid(
            java.lang.Iterable<? extends java.lang.Integer> values) {
          ensureSwitchNextPidIsMutable();
          com.google.protobuf.AbstractMessageLite.Builder.addAll(
              values, switchNextPid_);
          onChanged();
          return this;
        }
        /**
         * <code>repeated int32 switch_next_pid = 3 [packed = true];</code>
         * @return This builder for chaining.
         */
        public Builder clearSwitchNextPid() {
          switchNextPid_ = emptyIntList();
          bitField0_ = (bitField0_ & ~0x00000008);
          onChanged();
          return this;
        }

        private com.google.protobuf.Internal.IntList switchNextPrio_ = emptyIntList();
        private void ensureSwitchNextPrioIsMutable() {
          if (!((bitField0_ & 0x00000010) != 0)) {
            switchNextPrio_ = mutableCopy(switchNextPrio_);
            bitField0_ |= 0x00000010;
          }
        }
        /**
         * <code>repeated int32 switch_next_prio = 4 [packed = true];</code>
         * @return A list containing the switchNextPrio.
         */
        public java.util.List<java.lang.Integer>
            getSwitchNextPrioList() {
          return ((bitField0_ & 0x00000010) != 0) ?
                   java.util.Collections.unmodifiableList(switchNextPrio_) : switchNextPrio_;
        }
        /**
         * <code>repeated int32 switch_next_prio = 4 [packed = true];</code>
         * @return The count of switchNextPrio.
         */
        public int getSwitchNextPrioCount() {
          return switchNextPrio_.size();
        }
        /**
         * <code>repeated int32 switch_next_prio = 4 [packed = true];</code>
         * @param index The index of the element to return.
         * @return The switchNextPrio at the given index.
         */
        public int getSwitchNextPrio(int index) {
          return switchNextPrio_.getInt(index);
        }
        /**
         * <code>repeated int32 switch_next_prio = 4 [packed = true];</code>
         * @param index The index to set the value at.
         * @param value The switchNextPrio to set.
         * @return This builder for chaining.
         */
        public Builder setSwitchNextPrio(
            int index, int value) {
          
          ensureSwitchNextPrioIsMutable();
          switchNextPrio_.setInt(index, value);
          onChanged();
          return this;
        }
        /**
         * <code>repeated int32 switch_next_prio = 4 [packed = true];</code>
         * @param value The switchNextPrio to add.
         * @return This builder for chaining.
         */
        public Builder addSwitchNextPrio(int value) {
          
          ensureSwitchNextPrioIsMutable();
          switchNextPrio_.addInt(value);
          onChanged();
          return this;
        }
        /**
         * <code>repeated int32 switch_next_prio = 4 [packed = true];</code>
         * @param values The switchNextPrio to add.
         * @return This builder for chaining.
         */
        public Builder addAllSwitchNextPrio(
            java.lang.Iterable<? extends java.lang.Integer> values) {
          ensureSwitchNextPrioIsMutable();
          com.google.protobuf.AbstractMessageLite.Builder.addAll(
              values, switchNextPrio_);
          onChanged();
          return this;
        }
        /**
         * <code>repeated int32 switch_next_prio = 4 [packed = true];</code>
         * @return This builder for chaining.
         */
        public Builder clearSwitchNextPrio() {
          switchNextPrio_ = emptyIntList();
          bitField0_ = (bitField0_ & ~0x00000010);
          onChanged();
          return this;
        }

        private com.google.protobuf.Internal.IntList switchNextCommIndex_ = emptyIntList();
        private void ensureSwitchNextCommIndexIsMutable() {
          if (!((bitField0_ & 0x00000020) != 0)) {
            switchNextCommIndex_ = mutableCopy(switchNextCommIndex_);
            bitField0_ |= 0x00000020;
          }
        }
        /**
         * <pre>
         * One per event, index into |intern_table| corresponding to the
         * next_comm field of the event.
         * </pre>
         *
         * <code>repeated uint32 switch_next_comm_index = 6 [packed = true];</code>
         * @return A list containing the switchNextCommIndex.
         */
        public java.util.List<java.lang.Integer>
            getSwitchNextCommIndexList() {
          return ((bitField0_ & 0x00000020) != 0) ?
                   java.util.Collections.unmodifiableList(switchNextCommIndex_) : switchNextCommIndex_;
        }
        /**
         * <pre>
         * One per event, index into |intern_table| corresponding to the
         * next_comm field of the event.
         * </pre>
         *
         * <code>repeated uint32 switch_next_comm_index = 6 [packed = true];</code>
         * @return The count of switchNextCommIndex.
         */
        public int getSwitchNextCommIndexCount() {
          return switchNextCommIndex_.size();
        }
        /**
         * <pre>
         * One per event, index into |intern_table| corresponding to the
         * next_comm field of the event.
         * </pre>
         *
         * <code>repeated uint32 switch_next_comm_index = 6 [packed = true];</code>
         * @param index The index of the element to return.
         * @return The switchNextCommIndex at the given index.
         */
        public int getSwitchNextCommIndex(int index) {
          return switchNextCommIndex_.getInt(index);
        }
        /**
         * <pre>
         * One per event, index into |intern_table| corresponding to the
         * next_comm field of the event.
         * </pre>
         *
         * <code>repeated uint32 switch_next_comm_index = 6 [packed = true];</code>
         * @param index The index to set the value at.
         * @param value The switchNextCommIndex to set.
         * @return This builder for chaining.
         */
        public Builder setSwitchNextCommIndex(
            int index, int value) {
          
          ensureSwitchNextCommIndexIsMutable();
          switchNextCommIndex_.setInt(index, value);
          onChanged();
          return this;
        }
        /**
         * <pre>
         * One per event, index into |intern_table| corresponding to the
         * next_comm field of the event.
         * </pre>
         *
         * <code>repeated uint32 switch_next_comm_index = 6 [packed = true];</code>
         * @param value The switchNextCommIndex to add.
         * @return This builder for chaining.
         */
        public Builder addSwitchNextCommIndex(int value) {
          
          ensureSwitchNextCommIndexIsMutable();
          switchNextCommIndex_.addInt(value);
          onChanged();
          return this;
        }
        /**
         * <pre>
         * One per event, index into |intern_table| corresponding to the
         * next_comm field of the event.
         * </pre>
         *
         * <code>repeated uint32 switch_next_comm_index = 6 [packed = true];</code>
         * @param values The switchNextCommIndex to add.
         * @return This builder for chaining.
         */
        public Builder addAllSwitchNextCommIndex(
            java.lang.Iterable<? extends java.lang.Integer> values) {
          ensureSwitchNextCommIndexIsMutable();
          com.google.protobuf.AbstractMessageLite.Builder.addAll(
              values, switchNextCommIndex_);
          onChanged();
          return this;
        }
        /**
         * <pre>
         * One per event, index into |intern_table| corresponding to the
         * next_comm field of the event.
         * </pre>
         *
         * <code>repeated uint32 switch_next_comm_index = 6 [packed = true];</code>
         * @return This builder for chaining.
         */
        public Builder clearSwitchNextCommIndex() {
          switchNextCommIndex_ = emptyIntList();
          bitField0_ = (bitField0_ & ~0x00000020);
          onChanged();
          return this;
        }

        private com.google.protobuf.Internal.LongList wakingTimestamp_ = emptyLongList();
        private void ensureWakingTimestampIsMutable() {
          if (!((bitField0_ & 0x00000040) != 0)) {
            wakingTimestamp_ = mutableCopy(wakingTimestamp_);
            bitField0_ |= 0x00000040;
          }
        }
        /**
         * <pre>
         * Delta-encoded timestamps across all sched_waking events within this
         * bundle. The first is absolute, each next one is relative to its
         * predecessor.
         * </pre>
         *
         * <code>repeated uint64 waking_timestamp = 7 [packed = true];</code>
         * @return A list containing the wakingTimestamp.
         */
        public java.util.List<java.lang.Long>
            getWakingTimestampList() {
          return ((bitField0_ & 0x00000040) != 0) ?
                   java.util.Collections.unmodifiableList(wakingTimestamp_) : wakingTimestamp_;
        }
        /**
         * <pre>
         * Delta-encoded timestamps across all sched_waking events within this
         * bundle. The first is absolute, each next one is relative to its
         * predecessor.
         * </pre>
         *
         * <code>repeated uint64 waking_timestamp = 7 [packed = true];</code>
         * @return The count of wakingTimestamp.
         */
        public int getWakingTimestampCount() {
          return wakingTimestamp_.size();
        }
        /**
         * <pre>
         * Delta-encoded timestamps across all sched_waking events within this
         * bundle. The first is absolute, each next one is relative to its
         * predecessor.
         * </pre>
         *
         * <code>repeated uint64 waking_timestamp = 7 [packed = true];</code>
         * @param index The index of the element to return.
         * @return The wakingTimestamp at the given index.
         */
        public long getWakingTimestamp(int index) {
          return wakingTimestamp_.getLong(index);
        }
        /**
         * <pre>
         * Delta-encoded timestamps across all sched_waking events within this
         * bundle. The first is absolute, each next one is relative to its
         * predecessor.
         * </pre>
         *
         * <code>repeated uint64 waking_timestamp = 7 [packed = true];</code>
         * @param index The index to set the value at.
         * @param value The wakingTimestamp to set.
         * @return This builder for chaining.
         */
        public Builder setWakingTimestamp(
            int index, long value) {
          
          ensureWakingTimestampIsMutable();
          wakingTimestamp_.setLong(index, value);
          onChanged();
          return this;
        }
        /**
         * <pre>
         * Delta-encoded timestamps across all sched_waking events within this
         * bundle. The first is absolute, each next one is relative to its
         * predecessor.
         * </pre>
         *
         * <code>repeated uint64 waking_timestamp = 7 [packed = true];</code>
         * @param value The wakingTimestamp to add.
         * @return This builder for chaining.
         */
        public Builder addWakingTimestamp(long value) {
          
          ensureWakingTimestampIsMutable();
          wakingTimestamp_.addLong(value);
          onChanged();
          return this;
        }
        /**
         * <pre>
         * Delta-encoded timestamps across all sched_waking events within this
         * bundle. The first is absolute, each next one is relative to its
         * predecessor.
         * </pre>
         *
         * <code>repeated uint64 waking_timestamp = 7 [packed = true];</code>
         * @param values The wakingTimestamp to add.
         * @return This builder for chaining.
         */
        public Builder addAllWakingTimestamp(
            java.lang.Iterable<? extends java.lang.Long> values) {
          ensureWakingTimestampIsMutable();
          com.google.protobuf.AbstractMessageLite.Builder.addAll(
              values, wakingTimestamp_);
          onChanged();
          return this;
        }
        /**
         * <pre>
         * Delta-encoded timestamps across all sched_waking events within this
         * bundle. The first is absolute, each next one is relative to its
         * predecessor.
         * </pre>
         *
         * <code>repeated uint64 waking_timestamp = 7 [packed = true];</code>
         * @return This builder for chaining.
         */
        public Builder clearWakingTimestamp() {
          wakingTimestamp_ = emptyLongList();
          bitField0_ = (bitField0_ & ~0x00000040);
          onChanged();
          return this;
        }

        private com.google.protobuf.Internal.IntList wakingPid_ = emptyIntList();
        private void ensureWakingPidIsMutable() {
          if (!((bitField0_ & 0x00000080) != 0)) {
            wakingPid_ = mutableCopy(wakingPid_);
            bitField0_ |= 0x00000080;
          }
        }
        /**
         * <code>repeated int32 waking_pid = 8 [packed = true];</code>
         * @return A list containing the wakingPid.
         */
        public java.util.List<java.lang.Integer>
            getWakingPidList() {
          return ((bitField0_ & 0x00000080) != 0) ?
                   java.util.Collections.unmodifiableList(wakingPid_) : wakingPid_;
        }
        /**
         * <code>repeated int32 waking_pid = 8 [packed = true];</code>
         * @return The count of wakingPid.
         */
        public int getWakingPidCount() {
          return wakingPid_.size();
        }
        /**
         * <code>repeated int32 waking_pid = 8 [packed = true];</code>
         * @param index The index of the element to return.
         * @return The wakingPid at the given index.
         */
        public int getWakingPid(int index) {
          return wakingPid_.getInt(index);
        }
        /**
         * <code>repeated int32 waking_pid = 8 [packed = true];</code>
         * @param index The index to set the value at.
         * @param value The wakingPid to set.
         * @return This builder for chaining.
         */
        public Builder setWakingPid(
            int index, int value) {
          
          ensureWakingPidIsMutable();
          wakingPid_.setInt(index, value);
          onChanged();
          return this;
        }
        /**
         * <code>repeated int32 waking_pid = 8 [packed = true];</code>
         * @param value The wakingPid to add.
         * @return This builder for chaining.
         */
        public Builder addWakingPid(int value) {
          
          ensureWakingPidIsMutable();
          wakingPid_.addInt(value);
          onChanged();
          return this;
        }
        /**
         * <code>repeated int32 waking_pid = 8 [packed = true];</code>
         * @param values The wakingPid to add.
         * @return This builder for chaining.
         */
        public Builder addAllWakingPid(
            java.lang.Iterable<? extends java.lang.Integer> values) {
          ensureWakingPidIsMutable();
          com.google.protobuf.AbstractMessageLite.Builder.addAll(
              values, wakingPid_);
          onChanged();
          return this;
        }
        /**
         * <code>repeated int32 waking_pid = 8 [packed = true];</code>
         * @return This builder for chaining.
         */
        public Builder clearWakingPid() {
          wakingPid_ = emptyIntList();
          bitField0_ = (bitField0_ & ~0x00000080);
          onChanged();
          return this;
        }

        private com.google.protobuf.Internal.IntList wakingTargetCpu_ = emptyIntList();
        private void ensureWakingTargetCpuIsMutable() {
          if (!((bitField0_ & 0x00000100) != 0)) {
            wakingTargetCpu_ = mutableCopy(wakingTargetCpu_);
            bitField0_ |= 0x00000100;
          }
        }
        /**
         * <code>repeated int32 waking_target_cpu = 9 [packed = true];</code>
         * @return A list containing the wakingTargetCpu.
         */
        public java.util.List<java.lang.Integer>
            getWakingTargetCpuList() {
          return ((bitField0_ & 0x00000100) != 0) ?
                   java.util.Collections.unmodifiableList(wakingTargetCpu_) : wakingTargetCpu_;
        }
        /**
         * <code>repeated int32 waking_target_cpu = 9 [packed = true];</code>
         * @return The count of wakingTargetCpu.
         */
        public int getWakingTargetCpuCount() {
          return wakingTargetCpu_.size();
        }
        /**
         * <code>repeated int32 waking_target_cpu = 9 [packed = true];</code>
         * @param index The index of the element to return.
         * @return The wakingTargetCpu at the given index.
         */
        public int getWakingTargetCpu(int index) {
          return wakingTargetCpu_.getInt(index);
        }
        /**
         * <code>repeated int32 waking_target_cpu = 9 [packed = true];</code>
         * @param index The index to set the value at.
         * @param value The wakingTargetCpu to set.
         * @return This builder for chaining.
         */
        public Builder setWakingTargetCpu(
            int index, int value) {
          
          ensureWakingTargetCpuIsMutable();
          wakingTargetCpu_.setInt(index, value);
          onChanged();
          return this;
        }
        /**
         * <code>repeated int32 waking_target_cpu = 9 [packed = true];</code>
         * @param value The wakingTargetCpu to add.
         * @return This builder for chaining.
         */
        public Builder addWakingTargetCpu(int value) {
          
          ensureWakingTargetCpuIsMutable();
          wakingTargetCpu_.addInt(value);
          onChanged();
          return this;
        }
        /**
         * <code>repeated int32 waking_target_cpu = 9 [packed = true];</code>
         * @param values The wakingTargetCpu to add.
         * @return This builder for chaining.
         */
        public Builder addAllWakingTargetCpu(
            java.lang.Iterable<? extends java.lang.Integer> values) {
          ensureWakingTargetCpuIsMutable();
          com.google.protobuf.AbstractMessageLite.Builder.addAll(
              values, wakingTargetCpu_);
          onChanged();
          return this;
        }
        /**
         * <code>repeated int32 waking_target_cpu = 9 [packed = true];</code>
         * @return This builder for chaining.
         */
        public Builder clearWakingTargetCpu() {
          wakingTargetCpu_ = emptyIntList();
          bitField0_ = (bitField0_ & ~0x00000100);
          onChanged();
          return this;
        }

        private com.google.protobuf.Internal.IntList wakingPrio_ = emptyIntList();
        private void ensureWakingPrioIsMutable() {
          if (!((bitField0_ & 0x00000200) != 0)) {
            wakingPrio_ = mutableCopy(wakingPrio_);
            bitField0_ |= 0x00000200;
          }
        }
        /**
         * <code>repeated int32 waking_prio = 10 [packed = true];</code>
         * @return A list containing the wakingPrio.
         */
        public java.util.List<java.lang.Integer>
            getWakingPrioList() {
          return ((bitField0_ & 0x00000200) != 0) ?
                   java.util.Collections.unmodifiableList(wakingPrio_) : wakingPrio_;
        }
        /**
         * <code>repeated int32 waking_prio = 10 [packed = true];</code>
         * @return The count of wakingPrio.
         */
        public int getWakingPrioCount() {
          return wakingPrio_.size();
        }
        /**
         * <code>repeated int32 waking_prio = 10 [packed = true];</code>
         * @param index The index of the element to return.
         * @return The wakingPrio at the given index.
         */
        public int getWakingPrio(int index) {
          return wakingPrio_.getInt(index);
        }
        /**
         * <code>repeated int32 waking_prio = 10 [packed = true];</code>
         * @param index The index to set the value at.
         * @param value The wakingPrio to set.
         * @return This builder for chaining.
         */
        public Builder setWakingPrio(
            int index, int value) {
          
          ensureWakingPrioIsMutable();
          wakingPrio_.setInt(index, value);
          onChanged();
          return this;
        }
        /**
         * <code>repeated int32 waking_prio = 10 [packed = true];</code>
         * @param value The wakingPrio to add.
         * @return This builder for chaining.
         */
        public Builder addWakingPrio(int value) {
          
          ensureWakingPrioIsMutable();
          wakingPrio_.addInt(value);
          onChanged();
          return this;
        }
        /**
         * <code>repeated int32 waking_prio = 10 [packed = true];</code>
         * @param values The wakingPrio to add.
         * @return This builder for chaining.
         */
        public Builder addAllWakingPrio(
            java.lang.Iterable<? extends java.lang.Integer> values) {
          ensureWakingPrioIsMutable();
          com.google.protobuf.AbstractMessageLite.Builder.addAll(
              values, wakingPrio_);
          onChanged();
          return this;
        }
        /**
         * <code>repeated int32 waking_prio = 10 [packed = true];</code>
         * @return This builder for chaining.
         */
        public Builder clearWakingPrio() {
          wakingPrio_ = emptyIntList();
          bitField0_ = (bitField0_ & ~0x00000200);
          onChanged();
          return this;
        }

        private com.google.protobuf.Internal.IntList wakingCommIndex_ = emptyIntList();
        private void ensureWakingCommIndexIsMutable() {
          if (!((bitField0_ & 0x00000400) != 0)) {
            wakingCommIndex_ = mutableCopy(wakingCommIndex_);
            bitField0_ |= 0x00000400;
          }
        }
        /**
         * <pre>
         * One per event, index into |intern_table| corresponding to the
         * comm field of the event.
         * </pre>
         *
         * <code>repeated uint32 waking_comm_index = 11 [packed = true];</code>
         * @return A list containing the wakingCommIndex.
         */
        public java.util.List<java.lang.Integer>
            getWakingCommIndexList() {
          return ((bitField0_ & 0x00000400) != 0) ?
                   java.util.Collections.unmodifiableList(wakingCommIndex_) : wakingCommIndex_;
        }
        /**
         * <pre>
         * One per event, index into |intern_table| corresponding to the
         * comm field of the event.
         * </pre>
         *
         * <code>repeated uint32 waking_comm_index = 11 [packed = true];</code>
         * @return The count of wakingCommIndex.
         */
        public int getWakingCommIndexCount() {
          return wakingCommIndex_.size();
        }
        /**
         * <pre>
         * One per event, index into |intern_table| corresponding to the
         * comm field of the event.
         * </pre>
         *
         * <code>repeated uint32 waking_comm_index = 11 [packed = true];</code>
         * @param index The index of the element to return.
         * @return The wakingCommIndex at the given index.
         */
        public int getWakingCommIndex(int index) {
          return wakingCommIndex_.getInt(index);
        }
        /**
         * <pre>
         * One per event, index into |intern_table| corresponding to the
         * comm field of the event.
         * </pre>
         *
         * <code>repeated uint32 waking_comm_index = 11 [packed = true];</code>
         * @param index The index to set the value at.
         * @param value The wakingCommIndex to set.
         * @return This builder for chaining.
         */
        public Builder setWakingCommIndex(
            int index, int value) {
          
          ensureWakingCommIndexIsMutable();
          wakingCommIndex_.setInt(index, value);
          onChanged();
          return this;
        }
        /**
         * <pre>
         * One per event, index into |intern_table| corresponding to the
         * comm field of the event.
         * </pre>
         *
         * <code>repeated uint32 waking_comm_index = 11 [packed = true];</code>
         * @param value The wakingCommIndex to add.
         * @return This builder for chaining.
         */
        public Builder addWakingCommIndex(int value) {
          
          ensureWakingCommIndexIsMutable();
          wakingCommIndex_.addInt(value);
          onChanged();
          return this;
        }
        /**
         * <pre>
         * One per event, index into |intern_table| corresponding to the
         * comm field of the event.
         * </pre>
         *
         * <code>repeated uint32 waking_comm_index = 11 [packed = true];</code>
         * @param values The wakingCommIndex to add.
         * @return This builder for chaining.
         */
        public Builder addAllWakingCommIndex(
            java.lang.Iterable<? extends java.lang.Integer> values) {
          ensureWakingCommIndexIsMutable();
          com.google.protobuf.AbstractMessageLite.Builder.addAll(
              values, wakingCommIndex_);
          onChanged();
          return this;
        }
        /**
         * <pre>
         * One per event, index into |intern_table| corresponding to the
         * comm field of the event.
         * </pre>
         *
         * <code>repeated uint32 waking_comm_index = 11 [packed = true];</code>
         * @return This builder for chaining.
         */
        public Builder clearWakingCommIndex() {
          wakingCommIndex_ = emptyIntList();
          bitField0_ = (bitField0_ & ~0x00000400);
          onChanged();
          return this;
        }
        @java.lang.Override
        public final Builder setUnknownFields(
            final com.google.protobuf.UnknownFieldSet unknownFields) {
          return super.setUnknownFields(unknownFields);
        }

        @java.lang.Override
        public final Builder mergeUnknownFields(
            final com.google.protobuf.UnknownFieldSet unknownFields) {
          return super.mergeUnknownFields(unknownFields);
        }


        // @@protoc_insertion_point(builder_scope:perfetto.protos.FtraceEventBundle.CompactSched)
      }

      // @@protoc_insertion_point(class_scope:perfetto.protos.FtraceEventBundle.CompactSched)
      private static final perfetto.protos.FtraceEventBundleOuterClass.FtraceEventBundle.CompactSched DEFAULT_INSTANCE;
      static {
        DEFAULT_INSTANCE = new perfetto.protos.FtraceEventBundleOuterClass.FtraceEventBundle.CompactSched();
      }

      public static perfetto.protos.FtraceEventBundleOuterClass.FtraceEventBundle.CompactSched getDefaultInstance() {
        return DEFAULT_INSTANCE;
      }

      @java.lang.Deprecated public static final com.google.protobuf.Parser<CompactSched>
          PARSER = new com.google.protobuf.AbstractParser<CompactSched>() {
        @java.lang.Override
        public CompactSched parsePartialFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws com.google.protobuf.InvalidProtocolBufferException {
          Builder builder = newBuilder();
          try {
            builder.mergeFrom(input, extensionRegistry);
          } catch (com.google.protobuf.InvalidProtocolBufferException e) {
            throw e.setUnfinishedMessage(builder.buildPartial());
          } catch (com.google.protobuf.UninitializedMessageException e) {
            throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
          } catch (java.io.IOException e) {
            throw new com.google.protobuf.InvalidProtocolBufferException(e)
                .setUnfinishedMessage(builder.buildPartial());
          }
          return builder.buildPartial();
        }
      };

      public static com.google.protobuf.Parser<CompactSched> parser() {
        return PARSER;
      }

      @java.lang.Override
      public com.google.protobuf.Parser<CompactSched> getParserForType() {
        return PARSER;
      }

      @java.lang.Override
      public perfetto.protos.FtraceEventBundleOuterClass.FtraceEventBundle.CompactSched getDefaultInstanceForType() {
        return DEFAULT_INSTANCE;
      }

    }

    private int bitField0_;
    public static final int CPU_FIELD_NUMBER = 1;
    private int cpu_ = 0;
    /**
     * <code>optional uint32 cpu = 1;</code>
     * @return Whether the cpu field is set.
     */
    @java.lang.Override
    public boolean hasCpu() {
      return ((bitField0_ & 0x00000001) != 0);
    }
    /**
     * <code>optional uint32 cpu = 1;</code>
     * @return The cpu.
     */
    @java.lang.Override
    public int getCpu() {
      return cpu_;
    }

    public static final int EVENT_FIELD_NUMBER = 2;
    @SuppressWarnings("serial")
    private java.util.List<perfetto.protos.FtraceEventOuterClass.FtraceEvent> event_;
    /**
     * <code>repeated .perfetto.protos.FtraceEvent event = 2;</code>
     */
    @java.lang.Override
    public java.util.List<perfetto.protos.FtraceEventOuterClass.FtraceEvent> getEventList() {
      return event_;
    }
    /**
     * <code>repeated .perfetto.protos.FtraceEvent event = 2;</code>
     */
    @java.lang.Override
    public java.util.List<? extends perfetto.protos.FtraceEventOuterClass.FtraceEventOrBuilder> 
        getEventOrBuilderList() {
      return event_;
    }
    /**
     * <code>repeated .perfetto.protos.FtraceEvent event = 2;</code>
     */
    @java.lang.Override
    public int getEventCount() {
      return event_.size();
    }
    /**
     * <code>repeated .perfetto.protos.FtraceEvent event = 2;</code>
     */
    @java.lang.Override
    public perfetto.protos.FtraceEventOuterClass.FtraceEvent getEvent(int index) {
      return event_.get(index);
    }
    /**
     * <code>repeated .perfetto.protos.FtraceEvent event = 2;</code>
     */
    @java.lang.Override
    public perfetto.protos.FtraceEventOuterClass.FtraceEventOrBuilder getEventOrBuilder(
        int index) {
      return event_.get(index);
    }

    public static final int LOST_EVENTS_FIELD_NUMBER = 3;
    private boolean lostEvents_ = false;
    /**
     * <pre>
     * Set to true if there was data loss between the last time we've read from
     * the corresponding per-cpu kernel buffer, and the earliest event recorded
     * in this bundle.
     * </pre>
     *
     * <code>optional bool lost_events = 3;</code>
     * @return Whether the lostEvents field is set.
     */
    @java.lang.Override
    public boolean hasLostEvents() {
      return ((bitField0_ & 0x00000002) != 0);
    }
    /**
     * <pre>
     * Set to true if there was data loss between the last time we've read from
     * the corresponding per-cpu kernel buffer, and the earliest event recorded
     * in this bundle.
     * </pre>
     *
     * <code>optional bool lost_events = 3;</code>
     * @return The lostEvents.
     */
    @java.lang.Override
    public boolean getLostEvents() {
      return lostEvents_;
    }

    public static final int COMPACT_SCHED_FIELD_NUMBER = 4;
    private perfetto.protos.FtraceEventBundleOuterClass.FtraceEventBundle.CompactSched compactSched_;
    /**
     * <code>optional .perfetto.protos.FtraceEventBundle.CompactSched compact_sched = 4;</code>
     * @return Whether the compactSched field is set.
     */
    @java.lang.Override
    public boolean hasCompactSched() {
      return ((bitField0_ & 0x00000004) != 0);
    }
    /**
     * <code>optional .perfetto.protos.FtraceEventBundle.CompactSched compact_sched = 4;</code>
     * @return The compactSched.
     */
    @java.lang.Override
    public perfetto.protos.FtraceEventBundleOuterClass.FtraceEventBundle.CompactSched getCompactSched() {
      return compactSched_ == null ? perfetto.protos.FtraceEventBundleOuterClass.FtraceEventBundle.CompactSched.getDefaultInstance() : compactSched_;
    }
    /**
     * <code>optional .perfetto.protos.FtraceEventBundle.CompactSched compact_sched = 4;</code>
     */
    @java.lang.Override
    public perfetto.protos.FtraceEventBundleOuterClass.FtraceEventBundle.CompactSchedOrBuilder getCompactSchedOrBuilder() {
      return compactSched_ == null ? perfetto.protos.FtraceEventBundleOuterClass.FtraceEventBundle.CompactSched.getDefaultInstance() : compactSched_;
    }

    public static final int FTRACE_CLOCK_FIELD_NUMBER = 5;
    private int ftraceClock_ = 0;
    /**
     * <pre>
     * traced_probes always sets the ftrace_clock to "boot". That is not available
     * in older kernels (v3.x). In that case we fallback on "global" or "local".
     * When we do that, we report the fallback clock in each bundle so we can do
     * proper clock syncing at parsing time in TraceProcessor. We cannot use the
     * TracePacket timestamp_clock_id because: (1) there is no per-packet
     * timestamp for ftrace bundles; (2) "global" does not match CLOCK_MONOTONIC.
     * Having a dedicated and explicit flag allows us to correct further misakes
     * in future by looking at the kernel version.
     * This field has been introduced in perfetto v19 / Android T (13).
     * This field is omitted when the ftrace clock is just "boot", as that is the
     * default assumption (and for consistency with the past).
     * </pre>
     *
     * <code>optional .perfetto.protos.FtraceClock ftrace_clock = 5;</code>
     * @return Whether the ftraceClock field is set.
     */
    @java.lang.Override public boolean hasFtraceClock() {
      return ((bitField0_ & 0x00000008) != 0);
    }
    /**
     * <pre>
     * traced_probes always sets the ftrace_clock to "boot". That is not available
     * in older kernels (v3.x). In that case we fallback on "global" or "local".
     * When we do that, we report the fallback clock in each bundle so we can do
     * proper clock syncing at parsing time in TraceProcessor. We cannot use the
     * TracePacket timestamp_clock_id because: (1) there is no per-packet
     * timestamp for ftrace bundles; (2) "global" does not match CLOCK_MONOTONIC.
     * Having a dedicated and explicit flag allows us to correct further misakes
     * in future by looking at the kernel version.
     * This field has been introduced in perfetto v19 / Android T (13).
     * This field is omitted when the ftrace clock is just "boot", as that is the
     * default assumption (and for consistency with the past).
     * </pre>
     *
     * <code>optional .perfetto.protos.FtraceClock ftrace_clock = 5;</code>
     * @return The ftraceClock.
     */
    @java.lang.Override public perfetto.protos.FtraceEventBundleOuterClass.FtraceClock getFtraceClock() {
      perfetto.protos.FtraceEventBundleOuterClass.FtraceClock result = perfetto.protos.FtraceEventBundleOuterClass.FtraceClock.forNumber(ftraceClock_);
      return result == null ? perfetto.protos.FtraceEventBundleOuterClass.FtraceClock.FTRACE_CLOCK_UNSPECIFIED : result;
    }

    public static final int FTRACE_TIMESTAMP_FIELD_NUMBER = 6;
    private long ftraceTimestamp_ = 0L;
    /**
     * <pre>
     * The timestamp according to the ftrace clock, taken at the same instant
     * as |boot_timestamp|. This is used to sync ftrace events when a non-boot
     * clock is used as the ftrace clock. We don't use the ClockSnapshot packet
     * because the ftrace global/local clocks don't match any of the clock_gettime
     * domains and can be only read by traced_probes.
     * Only set when |ftrace_clock| != FTRACE_CLOCK_UNSPECIFIED.
     * Implementation note: Populated by reading the 'now ts:' field in
     * tracefs/per_cpu/cpuX/stat.
     * </pre>
     *
     * <code>optional int64 ftrace_timestamp = 6;</code>
     * @return Whether the ftraceTimestamp field is set.
     */
    @java.lang.Override
    public boolean hasFtraceTimestamp() {
      return ((bitField0_ & 0x00000010) != 0);
    }
    /**
     * <pre>
     * The timestamp according to the ftrace clock, taken at the same instant
     * as |boot_timestamp|. This is used to sync ftrace events when a non-boot
     * clock is used as the ftrace clock. We don't use the ClockSnapshot packet
     * because the ftrace global/local clocks don't match any of the clock_gettime
     * domains and can be only read by traced_probes.
     * Only set when |ftrace_clock| != FTRACE_CLOCK_UNSPECIFIED.
     * Implementation note: Populated by reading the 'now ts:' field in
     * tracefs/per_cpu/cpuX/stat.
     * </pre>
     *
     * <code>optional int64 ftrace_timestamp = 6;</code>
     * @return The ftraceTimestamp.
     */
    @java.lang.Override
    public long getFtraceTimestamp() {
      return ftraceTimestamp_;
    }

    public static final int BOOT_TIMESTAMP_FIELD_NUMBER = 7;
    private long bootTimestamp_ = 0L;
    /**
     * <pre>
     * The timestamp according to CLOCK_BOOTTIME, taken at the same instant as
     * |ftrace_timestamp|. See documentation of |ftrace_timestamp| for
     * more info.
     * Only set when |ftrace_clock| != FTRACE_CLOCK_UNSPECIFIED.
     * </pre>
     *
     * <code>optional int64 boot_timestamp = 7;</code>
     * @return Whether the bootTimestamp field is set.
     */
    @java.lang.Override
    public boolean hasBootTimestamp() {
      return ((bitField0_ & 0x00000020) != 0);
    }
    /**
     * <pre>
     * The timestamp according to CLOCK_BOOTTIME, taken at the same instant as
     * |ftrace_timestamp|. See documentation of |ftrace_timestamp| for
     * more info.
     * Only set when |ftrace_clock| != FTRACE_CLOCK_UNSPECIFIED.
     * </pre>
     *
     * <code>optional int64 boot_timestamp = 7;</code>
     * @return The bootTimestamp.
     */
    @java.lang.Override
    public long getBootTimestamp() {
      return bootTimestamp_;
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (((bitField0_ & 0x00000001) != 0)) {
        output.writeUInt32(1, cpu_);
      }
      for (int i = 0; i < event_.size(); i++) {
        output.writeMessage(2, event_.get(i));
      }
      if (((bitField0_ & 0x00000002) != 0)) {
        output.writeBool(3, lostEvents_);
      }
      if (((bitField0_ & 0x00000004) != 0)) {
        output.writeMessage(4, getCompactSched());
      }
      if (((bitField0_ & 0x00000008) != 0)) {
        output.writeEnum(5, ftraceClock_);
      }
      if (((bitField0_ & 0x00000010) != 0)) {
        output.writeInt64(6, ftraceTimestamp_);
      }
      if (((bitField0_ & 0x00000020) != 0)) {
        output.writeInt64(7, bootTimestamp_);
      }
      getUnknownFields().writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) != 0)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(1, cpu_);
      }
      for (int i = 0; i < event_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(2, event_.get(i));
      }
      if (((bitField0_ & 0x00000002) != 0)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(3, lostEvents_);
      }
      if (((bitField0_ & 0x00000004) != 0)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(4, getCompactSched());
      }
      if (((bitField0_ & 0x00000008) != 0)) {
        size += com.google.protobuf.CodedOutputStream
          .computeEnumSize(5, ftraceClock_);
      }
      if (((bitField0_ & 0x00000010) != 0)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt64Size(6, ftraceTimestamp_);
      }
      if (((bitField0_ & 0x00000020) != 0)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt64Size(7, bootTimestamp_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof perfetto.protos.FtraceEventBundleOuterClass.FtraceEventBundle)) {
        return super.equals(obj);
      }
      perfetto.protos.FtraceEventBundleOuterClass.FtraceEventBundle other = (perfetto.protos.FtraceEventBundleOuterClass.FtraceEventBundle) obj;

      if (hasCpu() != other.hasCpu()) return false;
      if (hasCpu()) {
        if (getCpu()
            != other.getCpu()) return false;
      }
      if (!getEventList()
          .equals(other.getEventList())) return false;
      if (hasLostEvents() != other.hasLostEvents()) return false;
      if (hasLostEvents()) {
        if (getLostEvents()
            != other.getLostEvents()) return false;
      }
      if (hasCompactSched() != other.hasCompactSched()) return false;
      if (hasCompactSched()) {
        if (!getCompactSched()
            .equals(other.getCompactSched())) return false;
      }
      if (hasFtraceClock() != other.hasFtraceClock()) return false;
      if (hasFtraceClock()) {
        if (ftraceClock_ != other.ftraceClock_) return false;
      }
      if (hasFtraceTimestamp() != other.hasFtraceTimestamp()) return false;
      if (hasFtraceTimestamp()) {
        if (getFtraceTimestamp()
            != other.getFtraceTimestamp()) return false;
      }
      if (hasBootTimestamp() != other.hasBootTimestamp()) return false;
      if (hasBootTimestamp()) {
        if (getBootTimestamp()
            != other.getBootTimestamp()) return false;
      }
      if (!getUnknownFields().equals(other.getUnknownFields())) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      if (hasCpu()) {
        hash = (37 * hash) + CPU_FIELD_NUMBER;
        hash = (53 * hash) + getCpu();
      }
      if (getEventCount() > 0) {
        hash = (37 * hash) + EVENT_FIELD_NUMBER;
        hash = (53 * hash) + getEventList().hashCode();
      }
      if (hasLostEvents()) {
        hash = (37 * hash) + LOST_EVENTS_FIELD_NUMBER;
        hash = (53 * hash) + com.google.protobuf.Internal.hashBoolean(
            getLostEvents());
      }
      if (hasCompactSched()) {
        hash = (37 * hash) + COMPACT_SCHED_FIELD_NUMBER;
        hash = (53 * hash) + getCompactSched().hashCode();
      }
      if (hasFtraceClock()) {
        hash = (37 * hash) + FTRACE_CLOCK_FIELD_NUMBER;
        hash = (53 * hash) + ftraceClock_;
      }
      if (hasFtraceTimestamp()) {
        hash = (37 * hash) + FTRACE_TIMESTAMP_FIELD_NUMBER;
        hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
            getFtraceTimestamp());
      }
      if (hasBootTimestamp()) {
        hash = (37 * hash) + BOOT_TIMESTAMP_FIELD_NUMBER;
        hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
            getBootTimestamp());
      }
      hash = (29 * hash) + getUnknownFields().hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static perfetto.protos.FtraceEventBundleOuterClass.FtraceEventBundle parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static perfetto.protos.FtraceEventBundleOuterClass.FtraceEventBundle parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static perfetto.protos.FtraceEventBundleOuterClass.FtraceEventBundle parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static perfetto.protos.FtraceEventBundleOuterClass.FtraceEventBundle parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static perfetto.protos.FtraceEventBundleOuterClass.FtraceEventBundle parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static perfetto.protos.FtraceEventBundleOuterClass.FtraceEventBundle parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static perfetto.protos.FtraceEventBundleOuterClass.FtraceEventBundle parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static perfetto.protos.FtraceEventBundleOuterClass.FtraceEventBundle parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static perfetto.protos.FtraceEventBundleOuterClass.FtraceEventBundle parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static perfetto.protos.FtraceEventBundleOuterClass.FtraceEventBundle parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static perfetto.protos.FtraceEventBundleOuterClass.FtraceEventBundle parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static perfetto.protos.FtraceEventBundleOuterClass.FtraceEventBundle parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(perfetto.protos.FtraceEventBundleOuterClass.FtraceEventBundle prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * <pre>
     * The result of tracing one or more ftrace data pages from a single per-cpu
     * kernel ring buffer. If collating multiple pages' worth of events, all of
     * them come from contiguous pages, with no kernel data loss in between.
     * </pre>
     *
     * Protobuf type {@code perfetto.protos.FtraceEventBundle}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:perfetto.protos.FtraceEventBundle)
        perfetto.protos.FtraceEventBundleOuterClass.FtraceEventBundleOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return perfetto.protos.FtraceEventBundleOuterClass.internal_static_perfetto_protos_FtraceEventBundle_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return perfetto.protos.FtraceEventBundleOuterClass.internal_static_perfetto_protos_FtraceEventBundle_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                perfetto.protos.FtraceEventBundleOuterClass.FtraceEventBundle.class, perfetto.protos.FtraceEventBundleOuterClass.FtraceEventBundle.Builder.class);
      }

      // Construct using perfetto.protos.FtraceEventBundleOuterClass.FtraceEventBundle.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
          getEventFieldBuilder();
          getCompactSchedFieldBuilder();
        }
      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        bitField0_ = 0;
        cpu_ = 0;
        if (eventBuilder_ == null) {
          event_ = java.util.Collections.emptyList();
        } else {
          event_ = null;
          eventBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000002);
        lostEvents_ = false;
        compactSched_ = null;
        if (compactSchedBuilder_ != null) {
          compactSchedBuilder_.dispose();
          compactSchedBuilder_ = null;
        }
        ftraceClock_ = 0;
        ftraceTimestamp_ = 0L;
        bootTimestamp_ = 0L;
        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return perfetto.protos.FtraceEventBundleOuterClass.internal_static_perfetto_protos_FtraceEventBundle_descriptor;
      }

      @java.lang.Override
      public perfetto.protos.FtraceEventBundleOuterClass.FtraceEventBundle getDefaultInstanceForType() {
        return perfetto.protos.FtraceEventBundleOuterClass.FtraceEventBundle.getDefaultInstance();
      }

      @java.lang.Override
      public perfetto.protos.FtraceEventBundleOuterClass.FtraceEventBundle build() {
        perfetto.protos.FtraceEventBundleOuterClass.FtraceEventBundle result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public perfetto.protos.FtraceEventBundleOuterClass.FtraceEventBundle buildPartial() {
        perfetto.protos.FtraceEventBundleOuterClass.FtraceEventBundle result = new perfetto.protos.FtraceEventBundleOuterClass.FtraceEventBundle(this);
        buildPartialRepeatedFields(result);
        if (bitField0_ != 0) { buildPartial0(result); }
        onBuilt();
        return result;
      }

      private void buildPartialRepeatedFields(perfetto.protos.FtraceEventBundleOuterClass.FtraceEventBundle result) {
        if (eventBuilder_ == null) {
          if (((bitField0_ & 0x00000002) != 0)) {
            event_ = java.util.Collections.unmodifiableList(event_);
            bitField0_ = (bitField0_ & ~0x00000002);
          }
          result.event_ = event_;
        } else {
          result.event_ = eventBuilder_.build();
        }
      }

      private void buildPartial0(perfetto.protos.FtraceEventBundleOuterClass.FtraceEventBundle result) {
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) != 0)) {
          result.cpu_ = cpu_;
          to_bitField0_ |= 0x00000001;
        }
        if (((from_bitField0_ & 0x00000004) != 0)) {
          result.lostEvents_ = lostEvents_;
          to_bitField0_ |= 0x00000002;
        }
        if (((from_bitField0_ & 0x00000008) != 0)) {
          result.compactSched_ = compactSchedBuilder_ == null
              ? compactSched_
              : compactSchedBuilder_.build();
          to_bitField0_ |= 0x00000004;
        }
        if (((from_bitField0_ & 0x00000010) != 0)) {
          result.ftraceClock_ = ftraceClock_;
          to_bitField0_ |= 0x00000008;
        }
        if (((from_bitField0_ & 0x00000020) != 0)) {
          result.ftraceTimestamp_ = ftraceTimestamp_;
          to_bitField0_ |= 0x00000010;
        }
        if (((from_bitField0_ & 0x00000040) != 0)) {
          result.bootTimestamp_ = bootTimestamp_;
          to_bitField0_ |= 0x00000020;
        }
        result.bitField0_ |= to_bitField0_;
      }

      @java.lang.Override
      public Builder clone() {
        return super.clone();
      }
      @java.lang.Override
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.setField(field, value);
      }
      @java.lang.Override
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return super.clearField(field);
      }
      @java.lang.Override
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return super.clearOneof(oneof);
      }
      @java.lang.Override
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, java.lang.Object value) {
        return super.setRepeatedField(field, index, value);
      }
      @java.lang.Override
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.addRepeatedField(field, value);
      }
      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof perfetto.protos.FtraceEventBundleOuterClass.FtraceEventBundle) {
          return mergeFrom((perfetto.protos.FtraceEventBundleOuterClass.FtraceEventBundle)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(perfetto.protos.FtraceEventBundleOuterClass.FtraceEventBundle other) {
        if (other == perfetto.protos.FtraceEventBundleOuterClass.FtraceEventBundle.getDefaultInstance()) return this;
        if (other.hasCpu()) {
          setCpu(other.getCpu());
        }
        if (eventBuilder_ == null) {
          if (!other.event_.isEmpty()) {
            if (event_.isEmpty()) {
              event_ = other.event_;
              bitField0_ = (bitField0_ & ~0x00000002);
            } else {
              ensureEventIsMutable();
              event_.addAll(other.event_);
            }
            onChanged();
          }
        } else {
          if (!other.event_.isEmpty()) {
            if (eventBuilder_.isEmpty()) {
              eventBuilder_.dispose();
              eventBuilder_ = null;
              event_ = other.event_;
              bitField0_ = (bitField0_ & ~0x00000002);
              eventBuilder_ = 
                com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders ?
                   getEventFieldBuilder() : null;
            } else {
              eventBuilder_.addAllMessages(other.event_);
            }
          }
        }
        if (other.hasLostEvents()) {
          setLostEvents(other.getLostEvents());
        }
        if (other.hasCompactSched()) {
          mergeCompactSched(other.getCompactSched());
        }
        if (other.hasFtraceClock()) {
          setFtraceClock(other.getFtraceClock());
        }
        if (other.hasFtraceTimestamp()) {
          setFtraceTimestamp(other.getFtraceTimestamp());
        }
        if (other.hasBootTimestamp()) {
          setBootTimestamp(other.getBootTimestamp());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        if (extensionRegistry == null) {
          throw new java.lang.NullPointerException();
        }
        try {
          boolean done = false;
          while (!done) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                done = true;
                break;
              case 8: {
                cpu_ = input.readUInt32();
                bitField0_ |= 0x00000001;
                break;
              } // case 8
              case 18: {
                perfetto.protos.FtraceEventOuterClass.FtraceEvent m =
                    input.readMessage(
                        perfetto.protos.FtraceEventOuterClass.FtraceEvent.PARSER,
                        extensionRegistry);
                if (eventBuilder_ == null) {
                  ensureEventIsMutable();
                  event_.add(m);
                } else {
                  eventBuilder_.addMessage(m);
                }
                break;
              } // case 18
              case 24: {
                lostEvents_ = input.readBool();
                bitField0_ |= 0x00000004;
                break;
              } // case 24
              case 34: {
                input.readMessage(
                    getCompactSchedFieldBuilder().getBuilder(),
                    extensionRegistry);
                bitField0_ |= 0x00000008;
                break;
              } // case 34
              case 40: {
                int tmpRaw = input.readEnum();
                perfetto.protos.FtraceEventBundleOuterClass.FtraceClock tmpValue =
                    perfetto.protos.FtraceEventBundleOuterClass.FtraceClock.forNumber(tmpRaw);
                if (tmpValue == null) {
                  mergeUnknownVarintField(5, tmpRaw);
                } else {
                  ftraceClock_ = tmpRaw;
                  bitField0_ |= 0x00000010;
                }
                break;
              } // case 40
              case 48: {
                ftraceTimestamp_ = input.readInt64();
                bitField0_ |= 0x00000020;
                break;
              } // case 48
              case 56: {
                bootTimestamp_ = input.readInt64();
                bitField0_ |= 0x00000040;
                break;
              } // case 56
              default: {
                if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                  done = true; // was an endgroup tag
                }
                break;
              } // default:
            } // switch (tag)
          } // while (!done)
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.unwrapIOException();
        } finally {
          onChanged();
        } // finally
        return this;
      }
      private int bitField0_;

      private int cpu_ ;
      /**
       * <code>optional uint32 cpu = 1;</code>
       * @return Whether the cpu field is set.
       */
      @java.lang.Override
      public boolean hasCpu() {
        return ((bitField0_ & 0x00000001) != 0);
      }
      /**
       * <code>optional uint32 cpu = 1;</code>
       * @return The cpu.
       */
      @java.lang.Override
      public int getCpu() {
        return cpu_;
      }
      /**
       * <code>optional uint32 cpu = 1;</code>
       * @param value The cpu to set.
       * @return This builder for chaining.
       */
      public Builder setCpu(int value) {
        
        cpu_ = value;
        bitField0_ |= 0x00000001;
        onChanged();
        return this;
      }
      /**
       * <code>optional uint32 cpu = 1;</code>
       * @return This builder for chaining.
       */
      public Builder clearCpu() {
        bitField0_ = (bitField0_ & ~0x00000001);
        cpu_ = 0;
        onChanged();
        return this;
      }

      private java.util.List<perfetto.protos.FtraceEventOuterClass.FtraceEvent> event_ =
        java.util.Collections.emptyList();
      private void ensureEventIsMutable() {
        if (!((bitField0_ & 0x00000002) != 0)) {
          event_ = new java.util.ArrayList<perfetto.protos.FtraceEventOuterClass.FtraceEvent>(event_);
          bitField0_ |= 0x00000002;
         }
      }

      private com.google.protobuf.RepeatedFieldBuilderV3<
          perfetto.protos.FtraceEventOuterClass.FtraceEvent, perfetto.protos.FtraceEventOuterClass.FtraceEvent.Builder, perfetto.protos.FtraceEventOuterClass.FtraceEventOrBuilder> eventBuilder_;

      /**
       * <code>repeated .perfetto.protos.FtraceEvent event = 2;</code>
       */
      public java.util.List<perfetto.protos.FtraceEventOuterClass.FtraceEvent> getEventList() {
        if (eventBuilder_ == null) {
          return java.util.Collections.unmodifiableList(event_);
        } else {
          return eventBuilder_.getMessageList();
        }
      }
      /**
       * <code>repeated .perfetto.protos.FtraceEvent event = 2;</code>
       */
      public int getEventCount() {
        if (eventBuilder_ == null) {
          return event_.size();
        } else {
          return eventBuilder_.getCount();
        }
      }
      /**
       * <code>repeated .perfetto.protos.FtraceEvent event = 2;</code>
       */
      public perfetto.protos.FtraceEventOuterClass.FtraceEvent getEvent(int index) {
        if (eventBuilder_ == null) {
          return event_.get(index);
        } else {
          return eventBuilder_.getMessage(index);
        }
      }
      /**
       * <code>repeated .perfetto.protos.FtraceEvent event = 2;</code>
       */
      public Builder setEvent(
          int index, perfetto.protos.FtraceEventOuterClass.FtraceEvent value) {
        if (eventBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureEventIsMutable();
          event_.set(index, value);
          onChanged();
        } else {
          eventBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .perfetto.protos.FtraceEvent event = 2;</code>
       */
      public Builder setEvent(
          int index, perfetto.protos.FtraceEventOuterClass.FtraceEvent.Builder builderForValue) {
        if (eventBuilder_ == null) {
          ensureEventIsMutable();
          event_.set(index, builderForValue.build());
          onChanged();
        } else {
          eventBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .perfetto.protos.FtraceEvent event = 2;</code>
       */
      public Builder addEvent(perfetto.protos.FtraceEventOuterClass.FtraceEvent value) {
        if (eventBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureEventIsMutable();
          event_.add(value);
          onChanged();
        } else {
          eventBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <code>repeated .perfetto.protos.FtraceEvent event = 2;</code>
       */
      public Builder addEvent(
          int index, perfetto.protos.FtraceEventOuterClass.FtraceEvent value) {
        if (eventBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureEventIsMutable();
          event_.add(index, value);
          onChanged();
        } else {
          eventBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .perfetto.protos.FtraceEvent event = 2;</code>
       */
      public Builder addEvent(
          perfetto.protos.FtraceEventOuterClass.FtraceEvent.Builder builderForValue) {
        if (eventBuilder_ == null) {
          ensureEventIsMutable();
          event_.add(builderForValue.build());
          onChanged();
        } else {
          eventBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .perfetto.protos.FtraceEvent event = 2;</code>
       */
      public Builder addEvent(
          int index, perfetto.protos.FtraceEventOuterClass.FtraceEvent.Builder builderForValue) {
        if (eventBuilder_ == null) {
          ensureEventIsMutable();
          event_.add(index, builderForValue.build());
          onChanged();
        } else {
          eventBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .perfetto.protos.FtraceEvent event = 2;</code>
       */
      public Builder addAllEvent(
          java.lang.Iterable<? extends perfetto.protos.FtraceEventOuterClass.FtraceEvent> values) {
        if (eventBuilder_ == null) {
          ensureEventIsMutable();
          com.google.protobuf.AbstractMessageLite.Builder.addAll(
              values, event_);
          onChanged();
        } else {
          eventBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <code>repeated .perfetto.protos.FtraceEvent event = 2;</code>
       */
      public Builder clearEvent() {
        if (eventBuilder_ == null) {
          event_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000002);
          onChanged();
        } else {
          eventBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>repeated .perfetto.protos.FtraceEvent event = 2;</code>
       */
      public Builder removeEvent(int index) {
        if (eventBuilder_ == null) {
          ensureEventIsMutable();
          event_.remove(index);
          onChanged();
        } else {
          eventBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <code>repeated .perfetto.protos.FtraceEvent event = 2;</code>
       */
      public perfetto.protos.FtraceEventOuterClass.FtraceEvent.Builder getEventBuilder(
          int index) {
        return getEventFieldBuilder().getBuilder(index);
      }
      /**
       * <code>repeated .perfetto.protos.FtraceEvent event = 2;</code>
       */
      public perfetto.protos.FtraceEventOuterClass.FtraceEventOrBuilder getEventOrBuilder(
          int index) {
        if (eventBuilder_ == null) {
          return event_.get(index);  } else {
          return eventBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <code>repeated .perfetto.protos.FtraceEvent event = 2;</code>
       */
      public java.util.List<? extends perfetto.protos.FtraceEventOuterClass.FtraceEventOrBuilder> 
           getEventOrBuilderList() {
        if (eventBuilder_ != null) {
          return eventBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(event_);
        }
      }
      /**
       * <code>repeated .perfetto.protos.FtraceEvent event = 2;</code>
       */
      public perfetto.protos.FtraceEventOuterClass.FtraceEvent.Builder addEventBuilder() {
        return getEventFieldBuilder().addBuilder(
            perfetto.protos.FtraceEventOuterClass.FtraceEvent.getDefaultInstance());
      }
      /**
       * <code>repeated .perfetto.protos.FtraceEvent event = 2;</code>
       */
      public perfetto.protos.FtraceEventOuterClass.FtraceEvent.Builder addEventBuilder(
          int index) {
        return getEventFieldBuilder().addBuilder(
            index, perfetto.protos.FtraceEventOuterClass.FtraceEvent.getDefaultInstance());
      }
      /**
       * <code>repeated .perfetto.protos.FtraceEvent event = 2;</code>
       */
      public java.util.List<perfetto.protos.FtraceEventOuterClass.FtraceEvent.Builder> 
           getEventBuilderList() {
        return getEventFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilderV3<
          perfetto.protos.FtraceEventOuterClass.FtraceEvent, perfetto.protos.FtraceEventOuterClass.FtraceEvent.Builder, perfetto.protos.FtraceEventOuterClass.FtraceEventOrBuilder> 
          getEventFieldBuilder() {
        if (eventBuilder_ == null) {
          eventBuilder_ = new com.google.protobuf.RepeatedFieldBuilderV3<
              perfetto.protos.FtraceEventOuterClass.FtraceEvent, perfetto.protos.FtraceEventOuterClass.FtraceEvent.Builder, perfetto.protos.FtraceEventOuterClass.FtraceEventOrBuilder>(
                  event_,
                  ((bitField0_ & 0x00000002) != 0),
                  getParentForChildren(),
                  isClean());
          event_ = null;
        }
        return eventBuilder_;
      }

      private boolean lostEvents_ ;
      /**
       * <pre>
       * Set to true if there was data loss between the last time we've read from
       * the corresponding per-cpu kernel buffer, and the earliest event recorded
       * in this bundle.
       * </pre>
       *
       * <code>optional bool lost_events = 3;</code>
       * @return Whether the lostEvents field is set.
       */
      @java.lang.Override
      public boolean hasLostEvents() {
        return ((bitField0_ & 0x00000004) != 0);
      }
      /**
       * <pre>
       * Set to true if there was data loss between the last time we've read from
       * the corresponding per-cpu kernel buffer, and the earliest event recorded
       * in this bundle.
       * </pre>
       *
       * <code>optional bool lost_events = 3;</code>
       * @return The lostEvents.
       */
      @java.lang.Override
      public boolean getLostEvents() {
        return lostEvents_;
      }
      /**
       * <pre>
       * Set to true if there was data loss between the last time we've read from
       * the corresponding per-cpu kernel buffer, and the earliest event recorded
       * in this bundle.
       * </pre>
       *
       * <code>optional bool lost_events = 3;</code>
       * @param value The lostEvents to set.
       * @return This builder for chaining.
       */
      public Builder setLostEvents(boolean value) {
        
        lostEvents_ = value;
        bitField0_ |= 0x00000004;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Set to true if there was data loss between the last time we've read from
       * the corresponding per-cpu kernel buffer, and the earliest event recorded
       * in this bundle.
       * </pre>
       *
       * <code>optional bool lost_events = 3;</code>
       * @return This builder for chaining.
       */
      public Builder clearLostEvents() {
        bitField0_ = (bitField0_ & ~0x00000004);
        lostEvents_ = false;
        onChanged();
        return this;
      }

      private perfetto.protos.FtraceEventBundleOuterClass.FtraceEventBundle.CompactSched compactSched_;
      private com.google.protobuf.SingleFieldBuilderV3<
          perfetto.protos.FtraceEventBundleOuterClass.FtraceEventBundle.CompactSched, perfetto.protos.FtraceEventBundleOuterClass.FtraceEventBundle.CompactSched.Builder, perfetto.protos.FtraceEventBundleOuterClass.FtraceEventBundle.CompactSchedOrBuilder> compactSchedBuilder_;
      /**
       * <code>optional .perfetto.protos.FtraceEventBundle.CompactSched compact_sched = 4;</code>
       * @return Whether the compactSched field is set.
       */
      public boolean hasCompactSched() {
        return ((bitField0_ & 0x00000008) != 0);
      }
      /**
       * <code>optional .perfetto.protos.FtraceEventBundle.CompactSched compact_sched = 4;</code>
       * @return The compactSched.
       */
      public perfetto.protos.FtraceEventBundleOuterClass.FtraceEventBundle.CompactSched getCompactSched() {
        if (compactSchedBuilder_ == null) {
          return compactSched_ == null ? perfetto.protos.FtraceEventBundleOuterClass.FtraceEventBundle.CompactSched.getDefaultInstance() : compactSched_;
        } else {
          return compactSchedBuilder_.getMessage();
        }
      }
      /**
       * <code>optional .perfetto.protos.FtraceEventBundle.CompactSched compact_sched = 4;</code>
       */
      public Builder setCompactSched(perfetto.protos.FtraceEventBundleOuterClass.FtraceEventBundle.CompactSched value) {
        if (compactSchedBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          compactSched_ = value;
        } else {
          compactSchedBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000008;
        onChanged();
        return this;
      }
      /**
       * <code>optional .perfetto.protos.FtraceEventBundle.CompactSched compact_sched = 4;</code>
       */
      public Builder setCompactSched(
          perfetto.protos.FtraceEventBundleOuterClass.FtraceEventBundle.CompactSched.Builder builderForValue) {
        if (compactSchedBuilder_ == null) {
          compactSched_ = builderForValue.build();
        } else {
          compactSchedBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000008;
        onChanged();
        return this;
      }
      /**
       * <code>optional .perfetto.protos.FtraceEventBundle.CompactSched compact_sched = 4;</code>
       */
      public Builder mergeCompactSched(perfetto.protos.FtraceEventBundleOuterClass.FtraceEventBundle.CompactSched value) {
        if (compactSchedBuilder_ == null) {
          if (((bitField0_ & 0x00000008) != 0) &&
            compactSched_ != null &&
            compactSched_ != perfetto.protos.FtraceEventBundleOuterClass.FtraceEventBundle.CompactSched.getDefaultInstance()) {
            getCompactSchedBuilder().mergeFrom(value);
          } else {
            compactSched_ = value;
          }
        } else {
          compactSchedBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00000008;
        onChanged();
        return this;
      }
      /**
       * <code>optional .perfetto.protos.FtraceEventBundle.CompactSched compact_sched = 4;</code>
       */
      public Builder clearCompactSched() {
        bitField0_ = (bitField0_ & ~0x00000008);
        compactSched_ = null;
        if (compactSchedBuilder_ != null) {
          compactSchedBuilder_.dispose();
          compactSchedBuilder_ = null;
        }
        onChanged();
        return this;
      }
      /**
       * <code>optional .perfetto.protos.FtraceEventBundle.CompactSched compact_sched = 4;</code>
       */
      public perfetto.protos.FtraceEventBundleOuterClass.FtraceEventBundle.CompactSched.Builder getCompactSchedBuilder() {
        bitField0_ |= 0x00000008;
        onChanged();
        return getCompactSchedFieldBuilder().getBuilder();
      }
      /**
       * <code>optional .perfetto.protos.FtraceEventBundle.CompactSched compact_sched = 4;</code>
       */
      public perfetto.protos.FtraceEventBundleOuterClass.FtraceEventBundle.CompactSchedOrBuilder getCompactSchedOrBuilder() {
        if (compactSchedBuilder_ != null) {
          return compactSchedBuilder_.getMessageOrBuilder();
        } else {
          return compactSched_ == null ?
              perfetto.protos.FtraceEventBundleOuterClass.FtraceEventBundle.CompactSched.getDefaultInstance() : compactSched_;
        }
      }
      /**
       * <code>optional .perfetto.protos.FtraceEventBundle.CompactSched compact_sched = 4;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          perfetto.protos.FtraceEventBundleOuterClass.FtraceEventBundle.CompactSched, perfetto.protos.FtraceEventBundleOuterClass.FtraceEventBundle.CompactSched.Builder, perfetto.protos.FtraceEventBundleOuterClass.FtraceEventBundle.CompactSchedOrBuilder> 
          getCompactSchedFieldBuilder() {
        if (compactSchedBuilder_ == null) {
          compactSchedBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              perfetto.protos.FtraceEventBundleOuterClass.FtraceEventBundle.CompactSched, perfetto.protos.FtraceEventBundleOuterClass.FtraceEventBundle.CompactSched.Builder, perfetto.protos.FtraceEventBundleOuterClass.FtraceEventBundle.CompactSchedOrBuilder>(
                  getCompactSched(),
                  getParentForChildren(),
                  isClean());
          compactSched_ = null;
        }
        return compactSchedBuilder_;
      }

      private int ftraceClock_ = 0;
      /**
       * <pre>
       * traced_probes always sets the ftrace_clock to "boot". That is not available
       * in older kernels (v3.x). In that case we fallback on "global" or "local".
       * When we do that, we report the fallback clock in each bundle so we can do
       * proper clock syncing at parsing time in TraceProcessor. We cannot use the
       * TracePacket timestamp_clock_id because: (1) there is no per-packet
       * timestamp for ftrace bundles; (2) "global" does not match CLOCK_MONOTONIC.
       * Having a dedicated and explicit flag allows us to correct further misakes
       * in future by looking at the kernel version.
       * This field has been introduced in perfetto v19 / Android T (13).
       * This field is omitted when the ftrace clock is just "boot", as that is the
       * default assumption (and for consistency with the past).
       * </pre>
       *
       * <code>optional .perfetto.protos.FtraceClock ftrace_clock = 5;</code>
       * @return Whether the ftraceClock field is set.
       */
      @java.lang.Override public boolean hasFtraceClock() {
        return ((bitField0_ & 0x00000010) != 0);
      }
      /**
       * <pre>
       * traced_probes always sets the ftrace_clock to "boot". That is not available
       * in older kernels (v3.x). In that case we fallback on "global" or "local".
       * When we do that, we report the fallback clock in each bundle so we can do
       * proper clock syncing at parsing time in TraceProcessor. We cannot use the
       * TracePacket timestamp_clock_id because: (1) there is no per-packet
       * timestamp for ftrace bundles; (2) "global" does not match CLOCK_MONOTONIC.
       * Having a dedicated and explicit flag allows us to correct further misakes
       * in future by looking at the kernel version.
       * This field has been introduced in perfetto v19 / Android T (13).
       * This field is omitted when the ftrace clock is just "boot", as that is the
       * default assumption (and for consistency with the past).
       * </pre>
       *
       * <code>optional .perfetto.protos.FtraceClock ftrace_clock = 5;</code>
       * @return The ftraceClock.
       */
      @java.lang.Override
      public perfetto.protos.FtraceEventBundleOuterClass.FtraceClock getFtraceClock() {
        perfetto.protos.FtraceEventBundleOuterClass.FtraceClock result = perfetto.protos.FtraceEventBundleOuterClass.FtraceClock.forNumber(ftraceClock_);
        return result == null ? perfetto.protos.FtraceEventBundleOuterClass.FtraceClock.FTRACE_CLOCK_UNSPECIFIED : result;
      }
      /**
       * <pre>
       * traced_probes always sets the ftrace_clock to "boot". That is not available
       * in older kernels (v3.x). In that case we fallback on "global" or "local".
       * When we do that, we report the fallback clock in each bundle so we can do
       * proper clock syncing at parsing time in TraceProcessor. We cannot use the
       * TracePacket timestamp_clock_id because: (1) there is no per-packet
       * timestamp for ftrace bundles; (2) "global" does not match CLOCK_MONOTONIC.
       * Having a dedicated and explicit flag allows us to correct further misakes
       * in future by looking at the kernel version.
       * This field has been introduced in perfetto v19 / Android T (13).
       * This field is omitted when the ftrace clock is just "boot", as that is the
       * default assumption (and for consistency with the past).
       * </pre>
       *
       * <code>optional .perfetto.protos.FtraceClock ftrace_clock = 5;</code>
       * @param value The ftraceClock to set.
       * @return This builder for chaining.
       */
      public Builder setFtraceClock(perfetto.protos.FtraceEventBundleOuterClass.FtraceClock value) {
        if (value == null) {
          throw new NullPointerException();
        }
        bitField0_ |= 0x00000010;
        ftraceClock_ = value.getNumber();
        onChanged();
        return this;
      }
      /**
       * <pre>
       * traced_probes always sets the ftrace_clock to "boot". That is not available
       * in older kernels (v3.x). In that case we fallback on "global" or "local".
       * When we do that, we report the fallback clock in each bundle so we can do
       * proper clock syncing at parsing time in TraceProcessor. We cannot use the
       * TracePacket timestamp_clock_id because: (1) there is no per-packet
       * timestamp for ftrace bundles; (2) "global" does not match CLOCK_MONOTONIC.
       * Having a dedicated and explicit flag allows us to correct further misakes
       * in future by looking at the kernel version.
       * This field has been introduced in perfetto v19 / Android T (13).
       * This field is omitted when the ftrace clock is just "boot", as that is the
       * default assumption (and for consistency with the past).
       * </pre>
       *
       * <code>optional .perfetto.protos.FtraceClock ftrace_clock = 5;</code>
       * @return This builder for chaining.
       */
      public Builder clearFtraceClock() {
        bitField0_ = (bitField0_ & ~0x00000010);
        ftraceClock_ = 0;
        onChanged();
        return this;
      }

      private long ftraceTimestamp_ ;
      /**
       * <pre>
       * The timestamp according to the ftrace clock, taken at the same instant
       * as |boot_timestamp|. This is used to sync ftrace events when a non-boot
       * clock is used as the ftrace clock. We don't use the ClockSnapshot packet
       * because the ftrace global/local clocks don't match any of the clock_gettime
       * domains and can be only read by traced_probes.
       * Only set when |ftrace_clock| != FTRACE_CLOCK_UNSPECIFIED.
       * Implementation note: Populated by reading the 'now ts:' field in
       * tracefs/per_cpu/cpuX/stat.
       * </pre>
       *
       * <code>optional int64 ftrace_timestamp = 6;</code>
       * @return Whether the ftraceTimestamp field is set.
       */
      @java.lang.Override
      public boolean hasFtraceTimestamp() {
        return ((bitField0_ & 0x00000020) != 0);
      }
      /**
       * <pre>
       * The timestamp according to the ftrace clock, taken at the same instant
       * as |boot_timestamp|. This is used to sync ftrace events when a non-boot
       * clock is used as the ftrace clock. We don't use the ClockSnapshot packet
       * because the ftrace global/local clocks don't match any of the clock_gettime
       * domains and can be only read by traced_probes.
       * Only set when |ftrace_clock| != FTRACE_CLOCK_UNSPECIFIED.
       * Implementation note: Populated by reading the 'now ts:' field in
       * tracefs/per_cpu/cpuX/stat.
       * </pre>
       *
       * <code>optional int64 ftrace_timestamp = 6;</code>
       * @return The ftraceTimestamp.
       */
      @java.lang.Override
      public long getFtraceTimestamp() {
        return ftraceTimestamp_;
      }
      /**
       * <pre>
       * The timestamp according to the ftrace clock, taken at the same instant
       * as |boot_timestamp|. This is used to sync ftrace events when a non-boot
       * clock is used as the ftrace clock. We don't use the ClockSnapshot packet
       * because the ftrace global/local clocks don't match any of the clock_gettime
       * domains and can be only read by traced_probes.
       * Only set when |ftrace_clock| != FTRACE_CLOCK_UNSPECIFIED.
       * Implementation note: Populated by reading the 'now ts:' field in
       * tracefs/per_cpu/cpuX/stat.
       * </pre>
       *
       * <code>optional int64 ftrace_timestamp = 6;</code>
       * @param value The ftraceTimestamp to set.
       * @return This builder for chaining.
       */
      public Builder setFtraceTimestamp(long value) {
        
        ftraceTimestamp_ = value;
        bitField0_ |= 0x00000020;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * The timestamp according to the ftrace clock, taken at the same instant
       * as |boot_timestamp|. This is used to sync ftrace events when a non-boot
       * clock is used as the ftrace clock. We don't use the ClockSnapshot packet
       * because the ftrace global/local clocks don't match any of the clock_gettime
       * domains and can be only read by traced_probes.
       * Only set when |ftrace_clock| != FTRACE_CLOCK_UNSPECIFIED.
       * Implementation note: Populated by reading the 'now ts:' field in
       * tracefs/per_cpu/cpuX/stat.
       * </pre>
       *
       * <code>optional int64 ftrace_timestamp = 6;</code>
       * @return This builder for chaining.
       */
      public Builder clearFtraceTimestamp() {
        bitField0_ = (bitField0_ & ~0x00000020);
        ftraceTimestamp_ = 0L;
        onChanged();
        return this;
      }

      private long bootTimestamp_ ;
      /**
       * <pre>
       * The timestamp according to CLOCK_BOOTTIME, taken at the same instant as
       * |ftrace_timestamp|. See documentation of |ftrace_timestamp| for
       * more info.
       * Only set when |ftrace_clock| != FTRACE_CLOCK_UNSPECIFIED.
       * </pre>
       *
       * <code>optional int64 boot_timestamp = 7;</code>
       * @return Whether the bootTimestamp field is set.
       */
      @java.lang.Override
      public boolean hasBootTimestamp() {
        return ((bitField0_ & 0x00000040) != 0);
      }
      /**
       * <pre>
       * The timestamp according to CLOCK_BOOTTIME, taken at the same instant as
       * |ftrace_timestamp|. See documentation of |ftrace_timestamp| for
       * more info.
       * Only set when |ftrace_clock| != FTRACE_CLOCK_UNSPECIFIED.
       * </pre>
       *
       * <code>optional int64 boot_timestamp = 7;</code>
       * @return The bootTimestamp.
       */
      @java.lang.Override
      public long getBootTimestamp() {
        return bootTimestamp_;
      }
      /**
       * <pre>
       * The timestamp according to CLOCK_BOOTTIME, taken at the same instant as
       * |ftrace_timestamp|. See documentation of |ftrace_timestamp| for
       * more info.
       * Only set when |ftrace_clock| != FTRACE_CLOCK_UNSPECIFIED.
       * </pre>
       *
       * <code>optional int64 boot_timestamp = 7;</code>
       * @param value The bootTimestamp to set.
       * @return This builder for chaining.
       */
      public Builder setBootTimestamp(long value) {
        
        bootTimestamp_ = value;
        bitField0_ |= 0x00000040;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * The timestamp according to CLOCK_BOOTTIME, taken at the same instant as
       * |ftrace_timestamp|. See documentation of |ftrace_timestamp| for
       * more info.
       * Only set when |ftrace_clock| != FTRACE_CLOCK_UNSPECIFIED.
       * </pre>
       *
       * <code>optional int64 boot_timestamp = 7;</code>
       * @return This builder for chaining.
       */
      public Builder clearBootTimestamp() {
        bitField0_ = (bitField0_ & ~0x00000040);
        bootTimestamp_ = 0L;
        onChanged();
        return this;
      }
      @java.lang.Override
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      @java.lang.Override
      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:perfetto.protos.FtraceEventBundle)
    }

    // @@protoc_insertion_point(class_scope:perfetto.protos.FtraceEventBundle)
    private static final perfetto.protos.FtraceEventBundleOuterClass.FtraceEventBundle DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new perfetto.protos.FtraceEventBundleOuterClass.FtraceEventBundle();
    }

    public static perfetto.protos.FtraceEventBundleOuterClass.FtraceEventBundle getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    @java.lang.Deprecated public static final com.google.protobuf.Parser<FtraceEventBundle>
        PARSER = new com.google.protobuf.AbstractParser<FtraceEventBundle>() {
      @java.lang.Override
      public FtraceEventBundle parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        Builder builder = newBuilder();
        try {
          builder.mergeFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.setUnfinishedMessage(builder.buildPartial());
        } catch (com.google.protobuf.UninitializedMessageException e) {
          throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
        } catch (java.io.IOException e) {
          throw new com.google.protobuf.InvalidProtocolBufferException(e)
              .setUnfinishedMessage(builder.buildPartial());
        }
        return builder.buildPartial();
      }
    };

    public static com.google.protobuf.Parser<FtraceEventBundle> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<FtraceEventBundle> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public perfetto.protos.FtraceEventBundleOuterClass.FtraceEventBundle getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_perfetto_protos_FtraceEventBundle_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_perfetto_protos_FtraceEventBundle_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_perfetto_protos_FtraceEventBundle_CompactSched_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_perfetto_protos_FtraceEventBundle_CompactSched_fieldAccessorTable;

  public static com.google.protobuf.Descriptors.FileDescriptor
      getDescriptor() {
    return descriptor;
  }
  private static  com.google.protobuf.Descriptors.FileDescriptor
      descriptor;
  static {
    java.lang.String[] descriptorData = {
      "\n6protos/perfetto/trace/ftrace/ftrace_ev" +
      "ent_bundle.proto\022\017perfetto.protos\032/proto" +
      "s/perfetto/trace/ftrace/ftrace_event.pro" +
      "to\"\340\004\n\021FtraceEventBundle\022\013\n\003cpu\030\001 \001(\r\022+\n" +
      "\005event\030\002 \003(\0132\034.perfetto.protos.FtraceEve" +
      "nt\022\023\n\013lost_events\030\003 \001(\010\022F\n\rcompact_sched" +
      "\030\004 \001(\0132/.perfetto.protos.FtraceEventBund" +
      "le.CompactSched\0222\n\014ftrace_clock\030\005 \001(\0162\034." +
      "perfetto.protos.FtraceClock\022\030\n\020ftrace_ti" +
      "mestamp\030\006 \001(\003\022\026\n\016boot_timestamp\030\007 \001(\003\032\315\002" +
      "\n\014CompactSched\022\024\n\014intern_table\030\005 \003(\t\022\034\n\020" +
      "switch_timestamp\030\001 \003(\004B\002\020\001\022\035\n\021switch_pre" +
      "v_state\030\002 \003(\003B\002\020\001\022\033\n\017switch_next_pid\030\003 \003" +
      "(\005B\002\020\001\022\034\n\020switch_next_prio\030\004 \003(\005B\002\020\001\022\"\n\026" +
      "switch_next_comm_index\030\006 \003(\rB\002\020\001\022\034\n\020waki" +
      "ng_timestamp\030\007 \003(\004B\002\020\001\022\026\n\nwaking_pid\030\010 \003" +
      "(\005B\002\020\001\022\035\n\021waking_target_cpu\030\t \003(\005B\002\020\001\022\027\n" +
      "\013waking_prio\030\n \003(\005B\002\020\001\022\035\n\021waking_comm_in" +
      "dex\030\013 \003(\rB\002\020\001*v\n\013FtraceClock\022\034\n\030FTRACE_C" +
      "LOCK_UNSPECIFIED\020\000\022\030\n\024FTRACE_CLOCK_UNKNO" +
      "WN\020\001\022\027\n\023FTRACE_CLOCK_GLOBAL\020\002\022\026\n\022FTRACE_" +
      "CLOCK_LOCAL\020\003"
    };
    descriptor = com.google.protobuf.Descriptors.FileDescriptor
      .internalBuildGeneratedFileFrom(descriptorData,
        new com.google.protobuf.Descriptors.FileDescriptor[] {
          perfetto.protos.FtraceEventOuterClass.getDescriptor(),
        });
    internal_static_perfetto_protos_FtraceEventBundle_descriptor =
      getDescriptor().getMessageTypes().get(0);
    internal_static_perfetto_protos_FtraceEventBundle_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_perfetto_protos_FtraceEventBundle_descriptor,
        new java.lang.String[] { "Cpu", "Event", "LostEvents", "CompactSched", "FtraceClock", "FtraceTimestamp", "BootTimestamp", });
    internal_static_perfetto_protos_FtraceEventBundle_CompactSched_descriptor =
      internal_static_perfetto_protos_FtraceEventBundle_descriptor.getNestedTypes().get(0);
    internal_static_perfetto_protos_FtraceEventBundle_CompactSched_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_perfetto_protos_FtraceEventBundle_CompactSched_descriptor,
        new java.lang.String[] { "InternTable", "SwitchTimestamp", "SwitchPrevState", "SwitchNextPid", "SwitchNextPrio", "SwitchNextCommIndex", "WakingTimestamp", "WakingPid", "WakingTargetCpu", "WakingPrio", "WakingCommIndex", });
    perfetto.protos.FtraceEventOuterClass.getDescriptor();
  }

  // @@protoc_insertion_point(outer_class_scope)
}
