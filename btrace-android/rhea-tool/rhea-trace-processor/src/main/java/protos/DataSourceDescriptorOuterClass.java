// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: protos/perfetto/common/data_source_descriptor.proto

package perfetto.protos;

public final class DataSourceDescriptorOuterClass {
  private DataSourceDescriptorOuterClass() {}
  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistryLite registry) {
  }

  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistry registry) {
    registerAllExtensions(
        (com.google.protobuf.ExtensionRegistryLite) registry);
  }
  public interface DataSourceDescriptorOrBuilder extends
      // @@protoc_insertion_point(interface_extends:perfetto.protos.DataSourceDescriptor)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <pre>
     * e.g., "linux.ftrace", "chromium.tracing"
     * </pre>
     *
     * <code>optional string name = 1;</code>
     * @return Whether the name field is set.
     */
    boolean hasName();
    /**
     * <pre>
     * e.g., "linux.ftrace", "chromium.tracing"
     * </pre>
     *
     * <code>optional string name = 1;</code>
     * @return The name.
     */
    java.lang.String getName();
    /**
     * <pre>
     * e.g., "linux.ftrace", "chromium.tracing"
     * </pre>
     *
     * <code>optional string name = 1;</code>
     * @return The bytes for name.
     */
    com.google.protobuf.ByteString
        getNameBytes();

    /**
     * <pre>
     * When non-zero, this is a unique ID within the scope of the Producer for
     * this data source (it is NOT globally unique). This is useful to
     * differentiate between data sources with matching names when calling
     * UpdateDataSource(). This field has been introduced in November 2021
     * (v22, Android T) and is not supported on older versions.
     * </pre>
     *
     * <code>optional uint64 id = 7;</code>
     * @return Whether the id field is set.
     */
    boolean hasId();
    /**
     * <pre>
     * When non-zero, this is a unique ID within the scope of the Producer for
     * this data source (it is NOT globally unique). This is useful to
     * differentiate between data sources with matching names when calling
     * UpdateDataSource(). This field has been introduced in November 2021
     * (v22, Android T) and is not supported on older versions.
     * </pre>
     *
     * <code>optional uint64 id = 7;</code>
     * @return The id.
     */
    long getId();

    /**
     * <pre>
     * When true the data source is expected to ack the stop request through the
     * NotifyDataSourceStopped() IPC. This field has been introduced after
     * Android P in Jul 2018 and is not supported on older versions.
     * </pre>
     *
     * <code>optional bool will_notify_on_stop = 2;</code>
     * @return Whether the willNotifyOnStop field is set.
     */
    boolean hasWillNotifyOnStop();
    /**
     * <pre>
     * When true the data source is expected to ack the stop request through the
     * NotifyDataSourceStopped() IPC. This field has been introduced after
     * Android P in Jul 2018 and is not supported on older versions.
     * </pre>
     *
     * <code>optional bool will_notify_on_stop = 2;</code>
     * @return The willNotifyOnStop.
     */
    boolean getWillNotifyOnStop();

    /**
     * <pre>
     * When true the data source is expected to ack the start request through the
     * NotifyDataSourceStarted() IPC. This field has been introduced after
     * Android P in March 2019 and is not supported on older versions.
     * </pre>
     *
     * <code>optional bool will_notify_on_start = 3;</code>
     * @return Whether the willNotifyOnStart field is set.
     */
    boolean hasWillNotifyOnStart();
    /**
     * <pre>
     * When true the data source is expected to ack the start request through the
     * NotifyDataSourceStarted() IPC. This field has been introduced after
     * Android P in March 2019 and is not supported on older versions.
     * </pre>
     *
     * <code>optional bool will_notify_on_start = 3;</code>
     * @return The willNotifyOnStart.
     */
    boolean getWillNotifyOnStart();

    /**
     * <pre>
     * If true, opt into receiving the ClearIncrementalState() IPC. This should be
     * set if the data source writes packets that refer to previous trace
     * contents, and knows how to stop referring to the already-emitted data.
     * </pre>
     *
     * <code>optional bool handles_incremental_state_clear = 4;</code>
     * @return Whether the handlesIncrementalStateClear field is set.
     */
    boolean hasHandlesIncrementalStateClear();
    /**
     * <pre>
     * If true, opt into receiving the ClearIncrementalState() IPC. This should be
     * set if the data source writes packets that refer to previous trace
     * contents, and knows how to stop referring to the already-emitted data.
     * </pre>
     *
     * <code>optional bool handles_incremental_state_clear = 4;</code>
     * @return The handlesIncrementalStateClear.
     */
    boolean getHandlesIncrementalStateClear();

    /**
     * <pre>
     * Optional specification about available GPU counters.
     * </pre>
     *
     * <code>optional .perfetto.protos.GpuCounterDescriptor gpu_counter_descriptor = 5 [lazy = true];</code>
     * @return Whether the gpuCounterDescriptor field is set.
     */
    boolean hasGpuCounterDescriptor();
    /**
     * <pre>
     * Optional specification about available GPU counters.
     * </pre>
     *
     * <code>optional .perfetto.protos.GpuCounterDescriptor gpu_counter_descriptor = 5 [lazy = true];</code>
     * @return The gpuCounterDescriptor.
     */
    perfetto.protos.GpuCounterDescriptorOuterClass.GpuCounterDescriptor getGpuCounterDescriptor();
    /**
     * <pre>
     * Optional specification about available GPU counters.
     * </pre>
     *
     * <code>optional .perfetto.protos.GpuCounterDescriptor gpu_counter_descriptor = 5 [lazy = true];</code>
     */
    perfetto.protos.GpuCounterDescriptorOuterClass.GpuCounterDescriptorOrBuilder getGpuCounterDescriptorOrBuilder();

    /**
     * <code>optional .perfetto.protos.TrackEventDescriptor track_event_descriptor = 6 [lazy = true];</code>
     * @return Whether the trackEventDescriptor field is set.
     */
    boolean hasTrackEventDescriptor();
    /**
     * <code>optional .perfetto.protos.TrackEventDescriptor track_event_descriptor = 6 [lazy = true];</code>
     * @return The trackEventDescriptor.
     */
    perfetto.protos.TrackEventDescriptorOuterClass.TrackEventDescriptor getTrackEventDescriptor();
    /**
     * <code>optional .perfetto.protos.TrackEventDescriptor track_event_descriptor = 6 [lazy = true];</code>
     */
    perfetto.protos.TrackEventDescriptorOuterClass.TrackEventDescriptorOrBuilder getTrackEventDescriptorOrBuilder();

    /**
     * <code>optional .perfetto.protos.FtraceDescriptor ftrace_descriptor = 8 [lazy = true];</code>
     * @return Whether the ftraceDescriptor field is set.
     */
    boolean hasFtraceDescriptor();
    /**
     * <code>optional .perfetto.protos.FtraceDescriptor ftrace_descriptor = 8 [lazy = true];</code>
     * @return The ftraceDescriptor.
     */
    perfetto.protos.FtraceDescriptorOuterClass.FtraceDescriptor getFtraceDescriptor();
    /**
     * <code>optional .perfetto.protos.FtraceDescriptor ftrace_descriptor = 8 [lazy = true];</code>
     */
    perfetto.protos.FtraceDescriptorOuterClass.FtraceDescriptorOrBuilder getFtraceDescriptorOrBuilder();
  }
  /**
   * <pre>
   * This message is sent from Producer(s) to the tracing Service when registering
   * to advertise their capabilities. It describes the structure of tracing
   * protos that will be produced by the data source and the supported filters.
   * </pre>
   *
   * Protobuf type {@code perfetto.protos.DataSourceDescriptor}
   */
  public static final class DataSourceDescriptor extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:perfetto.protos.DataSourceDescriptor)
      DataSourceDescriptorOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use DataSourceDescriptor.newBuilder() to construct.
    private DataSourceDescriptor(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private DataSourceDescriptor() {
      name_ = "";
    }

    @java.lang.Override
    @SuppressWarnings({"unused"})
    protected java.lang.Object newInstance(
        UnusedPrivateParameter unused) {
      return new DataSourceDescriptor();
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return perfetto.protos.DataSourceDescriptorOuterClass.internal_static_perfetto_protos_DataSourceDescriptor_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return perfetto.protos.DataSourceDescriptorOuterClass.internal_static_perfetto_protos_DataSourceDescriptor_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              perfetto.protos.DataSourceDescriptorOuterClass.DataSourceDescriptor.class, perfetto.protos.DataSourceDescriptorOuterClass.DataSourceDescriptor.Builder.class);
    }

    private int bitField0_;
    public static final int NAME_FIELD_NUMBER = 1;
    @SuppressWarnings("serial")
    private volatile java.lang.Object name_ = "";
    /**
     * <pre>
     * e.g., "linux.ftrace", "chromium.tracing"
     * </pre>
     *
     * <code>optional string name = 1;</code>
     * @return Whether the name field is set.
     */
    @java.lang.Override
    public boolean hasName() {
      return ((bitField0_ & 0x00000001) != 0);
    }
    /**
     * <pre>
     * e.g., "linux.ftrace", "chromium.tracing"
     * </pre>
     *
     * <code>optional string name = 1;</code>
     * @return The name.
     */
    @java.lang.Override
    public java.lang.String getName() {
      java.lang.Object ref = name_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        if (bs.isValidUtf8()) {
          name_ = s;
        }
        return s;
      }
    }
    /**
     * <pre>
     * e.g., "linux.ftrace", "chromium.tracing"
     * </pre>
     *
     * <code>optional string name = 1;</code>
     * @return The bytes for name.
     */
    @java.lang.Override
    public com.google.protobuf.ByteString
        getNameBytes() {
      java.lang.Object ref = name_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        name_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    public static final int ID_FIELD_NUMBER = 7;
    private long id_ = 0L;
    /**
     * <pre>
     * When non-zero, this is a unique ID within the scope of the Producer for
     * this data source (it is NOT globally unique). This is useful to
     * differentiate between data sources with matching names when calling
     * UpdateDataSource(). This field has been introduced in November 2021
     * (v22, Android T) and is not supported on older versions.
     * </pre>
     *
     * <code>optional uint64 id = 7;</code>
     * @return Whether the id field is set.
     */
    @java.lang.Override
    public boolean hasId() {
      return ((bitField0_ & 0x00000002) != 0);
    }
    /**
     * <pre>
     * When non-zero, this is a unique ID within the scope of the Producer for
     * this data source (it is NOT globally unique). This is useful to
     * differentiate between data sources with matching names when calling
     * UpdateDataSource(). This field has been introduced in November 2021
     * (v22, Android T) and is not supported on older versions.
     * </pre>
     *
     * <code>optional uint64 id = 7;</code>
     * @return The id.
     */
    @java.lang.Override
    public long getId() {
      return id_;
    }

    public static final int WILL_NOTIFY_ON_STOP_FIELD_NUMBER = 2;
    private boolean willNotifyOnStop_ = false;
    /**
     * <pre>
     * When true the data source is expected to ack the stop request through the
     * NotifyDataSourceStopped() IPC. This field has been introduced after
     * Android P in Jul 2018 and is not supported on older versions.
     * </pre>
     *
     * <code>optional bool will_notify_on_stop = 2;</code>
     * @return Whether the willNotifyOnStop field is set.
     */
    @java.lang.Override
    public boolean hasWillNotifyOnStop() {
      return ((bitField0_ & 0x00000004) != 0);
    }
    /**
     * <pre>
     * When true the data source is expected to ack the stop request through the
     * NotifyDataSourceStopped() IPC. This field has been introduced after
     * Android P in Jul 2018 and is not supported on older versions.
     * </pre>
     *
     * <code>optional bool will_notify_on_stop = 2;</code>
     * @return The willNotifyOnStop.
     */
    @java.lang.Override
    public boolean getWillNotifyOnStop() {
      return willNotifyOnStop_;
    }

    public static final int WILL_NOTIFY_ON_START_FIELD_NUMBER = 3;
    private boolean willNotifyOnStart_ = false;
    /**
     * <pre>
     * When true the data source is expected to ack the start request through the
     * NotifyDataSourceStarted() IPC. This field has been introduced after
     * Android P in March 2019 and is not supported on older versions.
     * </pre>
     *
     * <code>optional bool will_notify_on_start = 3;</code>
     * @return Whether the willNotifyOnStart field is set.
     */
    @java.lang.Override
    public boolean hasWillNotifyOnStart() {
      return ((bitField0_ & 0x00000008) != 0);
    }
    /**
     * <pre>
     * When true the data source is expected to ack the start request through the
     * NotifyDataSourceStarted() IPC. This field has been introduced after
     * Android P in March 2019 and is not supported on older versions.
     * </pre>
     *
     * <code>optional bool will_notify_on_start = 3;</code>
     * @return The willNotifyOnStart.
     */
    @java.lang.Override
    public boolean getWillNotifyOnStart() {
      return willNotifyOnStart_;
    }

    public static final int HANDLES_INCREMENTAL_STATE_CLEAR_FIELD_NUMBER = 4;
    private boolean handlesIncrementalStateClear_ = false;
    /**
     * <pre>
     * If true, opt into receiving the ClearIncrementalState() IPC. This should be
     * set if the data source writes packets that refer to previous trace
     * contents, and knows how to stop referring to the already-emitted data.
     * </pre>
     *
     * <code>optional bool handles_incremental_state_clear = 4;</code>
     * @return Whether the handlesIncrementalStateClear field is set.
     */
    @java.lang.Override
    public boolean hasHandlesIncrementalStateClear() {
      return ((bitField0_ & 0x00000010) != 0);
    }
    /**
     * <pre>
     * If true, opt into receiving the ClearIncrementalState() IPC. This should be
     * set if the data source writes packets that refer to previous trace
     * contents, and knows how to stop referring to the already-emitted data.
     * </pre>
     *
     * <code>optional bool handles_incremental_state_clear = 4;</code>
     * @return The handlesIncrementalStateClear.
     */
    @java.lang.Override
    public boolean getHandlesIncrementalStateClear() {
      return handlesIncrementalStateClear_;
    }

    public static final int GPU_COUNTER_DESCRIPTOR_FIELD_NUMBER = 5;
    private perfetto.protos.GpuCounterDescriptorOuterClass.GpuCounterDescriptor gpuCounterDescriptor_;
    /**
     * <pre>
     * Optional specification about available GPU counters.
     * </pre>
     *
     * <code>optional .perfetto.protos.GpuCounterDescriptor gpu_counter_descriptor = 5 [lazy = true];</code>
     * @return Whether the gpuCounterDescriptor field is set.
     */
    @java.lang.Override
    public boolean hasGpuCounterDescriptor() {
      return ((bitField0_ & 0x00000020) != 0);
    }
    /**
     * <pre>
     * Optional specification about available GPU counters.
     * </pre>
     *
     * <code>optional .perfetto.protos.GpuCounterDescriptor gpu_counter_descriptor = 5 [lazy = true];</code>
     * @return The gpuCounterDescriptor.
     */
    @java.lang.Override
    public perfetto.protos.GpuCounterDescriptorOuterClass.GpuCounterDescriptor getGpuCounterDescriptor() {
      return gpuCounterDescriptor_ == null ? perfetto.protos.GpuCounterDescriptorOuterClass.GpuCounterDescriptor.getDefaultInstance() : gpuCounterDescriptor_;
    }
    /**
     * <pre>
     * Optional specification about available GPU counters.
     * </pre>
     *
     * <code>optional .perfetto.protos.GpuCounterDescriptor gpu_counter_descriptor = 5 [lazy = true];</code>
     */
    @java.lang.Override
    public perfetto.protos.GpuCounterDescriptorOuterClass.GpuCounterDescriptorOrBuilder getGpuCounterDescriptorOrBuilder() {
      return gpuCounterDescriptor_ == null ? perfetto.protos.GpuCounterDescriptorOuterClass.GpuCounterDescriptor.getDefaultInstance() : gpuCounterDescriptor_;
    }

    public static final int TRACK_EVENT_DESCRIPTOR_FIELD_NUMBER = 6;
    private perfetto.protos.TrackEventDescriptorOuterClass.TrackEventDescriptor trackEventDescriptor_;
    /**
     * <code>optional .perfetto.protos.TrackEventDescriptor track_event_descriptor = 6 [lazy = true];</code>
     * @return Whether the trackEventDescriptor field is set.
     */
    @java.lang.Override
    public boolean hasTrackEventDescriptor() {
      return ((bitField0_ & 0x00000040) != 0);
    }
    /**
     * <code>optional .perfetto.protos.TrackEventDescriptor track_event_descriptor = 6 [lazy = true];</code>
     * @return The trackEventDescriptor.
     */
    @java.lang.Override
    public perfetto.protos.TrackEventDescriptorOuterClass.TrackEventDescriptor getTrackEventDescriptor() {
      return trackEventDescriptor_ == null ? perfetto.protos.TrackEventDescriptorOuterClass.TrackEventDescriptor.getDefaultInstance() : trackEventDescriptor_;
    }
    /**
     * <code>optional .perfetto.protos.TrackEventDescriptor track_event_descriptor = 6 [lazy = true];</code>
     */
    @java.lang.Override
    public perfetto.protos.TrackEventDescriptorOuterClass.TrackEventDescriptorOrBuilder getTrackEventDescriptorOrBuilder() {
      return trackEventDescriptor_ == null ? perfetto.protos.TrackEventDescriptorOuterClass.TrackEventDescriptor.getDefaultInstance() : trackEventDescriptor_;
    }

    public static final int FTRACE_DESCRIPTOR_FIELD_NUMBER = 8;
    private perfetto.protos.FtraceDescriptorOuterClass.FtraceDescriptor ftraceDescriptor_;
    /**
     * <code>optional .perfetto.protos.FtraceDescriptor ftrace_descriptor = 8 [lazy = true];</code>
     * @return Whether the ftraceDescriptor field is set.
     */
    @java.lang.Override
    public boolean hasFtraceDescriptor() {
      return ((bitField0_ & 0x00000080) != 0);
    }
    /**
     * <code>optional .perfetto.protos.FtraceDescriptor ftrace_descriptor = 8 [lazy = true];</code>
     * @return The ftraceDescriptor.
     */
    @java.lang.Override
    public perfetto.protos.FtraceDescriptorOuterClass.FtraceDescriptor getFtraceDescriptor() {
      return ftraceDescriptor_ == null ? perfetto.protos.FtraceDescriptorOuterClass.FtraceDescriptor.getDefaultInstance() : ftraceDescriptor_;
    }
    /**
     * <code>optional .perfetto.protos.FtraceDescriptor ftrace_descriptor = 8 [lazy = true];</code>
     */
    @java.lang.Override
    public perfetto.protos.FtraceDescriptorOuterClass.FtraceDescriptorOrBuilder getFtraceDescriptorOrBuilder() {
      return ftraceDescriptor_ == null ? perfetto.protos.FtraceDescriptorOuterClass.FtraceDescriptor.getDefaultInstance() : ftraceDescriptor_;
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (((bitField0_ & 0x00000001) != 0)) {
        com.google.protobuf.GeneratedMessageV3.writeString(output, 1, name_);
      }
      if (((bitField0_ & 0x00000004) != 0)) {
        output.writeBool(2, willNotifyOnStop_);
      }
      if (((bitField0_ & 0x00000008) != 0)) {
        output.writeBool(3, willNotifyOnStart_);
      }
      if (((bitField0_ & 0x00000010) != 0)) {
        output.writeBool(4, handlesIncrementalStateClear_);
      }
      if (((bitField0_ & 0x00000020) != 0)) {
        output.writeMessage(5, getGpuCounterDescriptor());
      }
      if (((bitField0_ & 0x00000040) != 0)) {
        output.writeMessage(6, getTrackEventDescriptor());
      }
      if (((bitField0_ & 0x00000002) != 0)) {
        output.writeUInt64(7, id_);
      }
      if (((bitField0_ & 0x00000080) != 0)) {
        output.writeMessage(8, getFtraceDescriptor());
      }
      getUnknownFields().writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) != 0)) {
        size += com.google.protobuf.GeneratedMessageV3.computeStringSize(1, name_);
      }
      if (((bitField0_ & 0x00000004) != 0)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(2, willNotifyOnStop_);
      }
      if (((bitField0_ & 0x00000008) != 0)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(3, willNotifyOnStart_);
      }
      if (((bitField0_ & 0x00000010) != 0)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(4, handlesIncrementalStateClear_);
      }
      if (((bitField0_ & 0x00000020) != 0)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(5, getGpuCounterDescriptor());
      }
      if (((bitField0_ & 0x00000040) != 0)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(6, getTrackEventDescriptor());
      }
      if (((bitField0_ & 0x00000002) != 0)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt64Size(7, id_);
      }
      if (((bitField0_ & 0x00000080) != 0)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(8, getFtraceDescriptor());
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof perfetto.protos.DataSourceDescriptorOuterClass.DataSourceDescriptor)) {
        return super.equals(obj);
      }
      perfetto.protos.DataSourceDescriptorOuterClass.DataSourceDescriptor other = (perfetto.protos.DataSourceDescriptorOuterClass.DataSourceDescriptor) obj;

      if (hasName() != other.hasName()) return false;
      if (hasName()) {
        if (!getName()
            .equals(other.getName())) return false;
      }
      if (hasId() != other.hasId()) return false;
      if (hasId()) {
        if (getId()
            != other.getId()) return false;
      }
      if (hasWillNotifyOnStop() != other.hasWillNotifyOnStop()) return false;
      if (hasWillNotifyOnStop()) {
        if (getWillNotifyOnStop()
            != other.getWillNotifyOnStop()) return false;
      }
      if (hasWillNotifyOnStart() != other.hasWillNotifyOnStart()) return false;
      if (hasWillNotifyOnStart()) {
        if (getWillNotifyOnStart()
            != other.getWillNotifyOnStart()) return false;
      }
      if (hasHandlesIncrementalStateClear() != other.hasHandlesIncrementalStateClear()) return false;
      if (hasHandlesIncrementalStateClear()) {
        if (getHandlesIncrementalStateClear()
            != other.getHandlesIncrementalStateClear()) return false;
      }
      if (hasGpuCounterDescriptor() != other.hasGpuCounterDescriptor()) return false;
      if (hasGpuCounterDescriptor()) {
        if (!getGpuCounterDescriptor()
            .equals(other.getGpuCounterDescriptor())) return false;
      }
      if (hasTrackEventDescriptor() != other.hasTrackEventDescriptor()) return false;
      if (hasTrackEventDescriptor()) {
        if (!getTrackEventDescriptor()
            .equals(other.getTrackEventDescriptor())) return false;
      }
      if (hasFtraceDescriptor() != other.hasFtraceDescriptor()) return false;
      if (hasFtraceDescriptor()) {
        if (!getFtraceDescriptor()
            .equals(other.getFtraceDescriptor())) return false;
      }
      if (!getUnknownFields().equals(other.getUnknownFields())) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      if (hasName()) {
        hash = (37 * hash) + NAME_FIELD_NUMBER;
        hash = (53 * hash) + getName().hashCode();
      }
      if (hasId()) {
        hash = (37 * hash) + ID_FIELD_NUMBER;
        hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
            getId());
      }
      if (hasWillNotifyOnStop()) {
        hash = (37 * hash) + WILL_NOTIFY_ON_STOP_FIELD_NUMBER;
        hash = (53 * hash) + com.google.protobuf.Internal.hashBoolean(
            getWillNotifyOnStop());
      }
      if (hasWillNotifyOnStart()) {
        hash = (37 * hash) + WILL_NOTIFY_ON_START_FIELD_NUMBER;
        hash = (53 * hash) + com.google.protobuf.Internal.hashBoolean(
            getWillNotifyOnStart());
      }
      if (hasHandlesIncrementalStateClear()) {
        hash = (37 * hash) + HANDLES_INCREMENTAL_STATE_CLEAR_FIELD_NUMBER;
        hash = (53 * hash) + com.google.protobuf.Internal.hashBoolean(
            getHandlesIncrementalStateClear());
      }
      if (hasGpuCounterDescriptor()) {
        hash = (37 * hash) + GPU_COUNTER_DESCRIPTOR_FIELD_NUMBER;
        hash = (53 * hash) + getGpuCounterDescriptor().hashCode();
      }
      if (hasTrackEventDescriptor()) {
        hash = (37 * hash) + TRACK_EVENT_DESCRIPTOR_FIELD_NUMBER;
        hash = (53 * hash) + getTrackEventDescriptor().hashCode();
      }
      if (hasFtraceDescriptor()) {
        hash = (37 * hash) + FTRACE_DESCRIPTOR_FIELD_NUMBER;
        hash = (53 * hash) + getFtraceDescriptor().hashCode();
      }
      hash = (29 * hash) + getUnknownFields().hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static perfetto.protos.DataSourceDescriptorOuterClass.DataSourceDescriptor parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static perfetto.protos.DataSourceDescriptorOuterClass.DataSourceDescriptor parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static perfetto.protos.DataSourceDescriptorOuterClass.DataSourceDescriptor parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static perfetto.protos.DataSourceDescriptorOuterClass.DataSourceDescriptor parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static perfetto.protos.DataSourceDescriptorOuterClass.DataSourceDescriptor parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static perfetto.protos.DataSourceDescriptorOuterClass.DataSourceDescriptor parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static perfetto.protos.DataSourceDescriptorOuterClass.DataSourceDescriptor parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static perfetto.protos.DataSourceDescriptorOuterClass.DataSourceDescriptor parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static perfetto.protos.DataSourceDescriptorOuterClass.DataSourceDescriptor parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static perfetto.protos.DataSourceDescriptorOuterClass.DataSourceDescriptor parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static perfetto.protos.DataSourceDescriptorOuterClass.DataSourceDescriptor parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static perfetto.protos.DataSourceDescriptorOuterClass.DataSourceDescriptor parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(perfetto.protos.DataSourceDescriptorOuterClass.DataSourceDescriptor prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * <pre>
     * This message is sent from Producer(s) to the tracing Service when registering
     * to advertise their capabilities. It describes the structure of tracing
     * protos that will be produced by the data source and the supported filters.
     * </pre>
     *
     * Protobuf type {@code perfetto.protos.DataSourceDescriptor}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:perfetto.protos.DataSourceDescriptor)
        perfetto.protos.DataSourceDescriptorOuterClass.DataSourceDescriptorOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return perfetto.protos.DataSourceDescriptorOuterClass.internal_static_perfetto_protos_DataSourceDescriptor_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return perfetto.protos.DataSourceDescriptorOuterClass.internal_static_perfetto_protos_DataSourceDescriptor_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                perfetto.protos.DataSourceDescriptorOuterClass.DataSourceDescriptor.class, perfetto.protos.DataSourceDescriptorOuterClass.DataSourceDescriptor.Builder.class);
      }

      // Construct using perfetto.protos.DataSourceDescriptorOuterClass.DataSourceDescriptor.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
          getGpuCounterDescriptorFieldBuilder();
          getTrackEventDescriptorFieldBuilder();
          getFtraceDescriptorFieldBuilder();
        }
      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        bitField0_ = 0;
        name_ = "";
        id_ = 0L;
        willNotifyOnStop_ = false;
        willNotifyOnStart_ = false;
        handlesIncrementalStateClear_ = false;
        gpuCounterDescriptor_ = null;
        if (gpuCounterDescriptorBuilder_ != null) {
          gpuCounterDescriptorBuilder_.dispose();
          gpuCounterDescriptorBuilder_ = null;
        }
        trackEventDescriptor_ = null;
        if (trackEventDescriptorBuilder_ != null) {
          trackEventDescriptorBuilder_.dispose();
          trackEventDescriptorBuilder_ = null;
        }
        ftraceDescriptor_ = null;
        if (ftraceDescriptorBuilder_ != null) {
          ftraceDescriptorBuilder_.dispose();
          ftraceDescriptorBuilder_ = null;
        }
        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return perfetto.protos.DataSourceDescriptorOuterClass.internal_static_perfetto_protos_DataSourceDescriptor_descriptor;
      }

      @java.lang.Override
      public perfetto.protos.DataSourceDescriptorOuterClass.DataSourceDescriptor getDefaultInstanceForType() {
        return perfetto.protos.DataSourceDescriptorOuterClass.DataSourceDescriptor.getDefaultInstance();
      }

      @java.lang.Override
      public perfetto.protos.DataSourceDescriptorOuterClass.DataSourceDescriptor build() {
        perfetto.protos.DataSourceDescriptorOuterClass.DataSourceDescriptor result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public perfetto.protos.DataSourceDescriptorOuterClass.DataSourceDescriptor buildPartial() {
        perfetto.protos.DataSourceDescriptorOuterClass.DataSourceDescriptor result = new perfetto.protos.DataSourceDescriptorOuterClass.DataSourceDescriptor(this);
        if (bitField0_ != 0) { buildPartial0(result); }
        onBuilt();
        return result;
      }

      private void buildPartial0(perfetto.protos.DataSourceDescriptorOuterClass.DataSourceDescriptor result) {
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) != 0)) {
          result.name_ = name_;
          to_bitField0_ |= 0x00000001;
        }
        if (((from_bitField0_ & 0x00000002) != 0)) {
          result.id_ = id_;
          to_bitField0_ |= 0x00000002;
        }
        if (((from_bitField0_ & 0x00000004) != 0)) {
          result.willNotifyOnStop_ = willNotifyOnStop_;
          to_bitField0_ |= 0x00000004;
        }
        if (((from_bitField0_ & 0x00000008) != 0)) {
          result.willNotifyOnStart_ = willNotifyOnStart_;
          to_bitField0_ |= 0x00000008;
        }
        if (((from_bitField0_ & 0x00000010) != 0)) {
          result.handlesIncrementalStateClear_ = handlesIncrementalStateClear_;
          to_bitField0_ |= 0x00000010;
        }
        if (((from_bitField0_ & 0x00000020) != 0)) {
          result.gpuCounterDescriptor_ = gpuCounterDescriptorBuilder_ == null
              ? gpuCounterDescriptor_
              : gpuCounterDescriptorBuilder_.build();
          to_bitField0_ |= 0x00000020;
        }
        if (((from_bitField0_ & 0x00000040) != 0)) {
          result.trackEventDescriptor_ = trackEventDescriptorBuilder_ == null
              ? trackEventDescriptor_
              : trackEventDescriptorBuilder_.build();
          to_bitField0_ |= 0x00000040;
        }
        if (((from_bitField0_ & 0x00000080) != 0)) {
          result.ftraceDescriptor_ = ftraceDescriptorBuilder_ == null
              ? ftraceDescriptor_
              : ftraceDescriptorBuilder_.build();
          to_bitField0_ |= 0x00000080;
        }
        result.bitField0_ |= to_bitField0_;
      }

      @java.lang.Override
      public Builder clone() {
        return super.clone();
      }
      @java.lang.Override
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.setField(field, value);
      }
      @java.lang.Override
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return super.clearField(field);
      }
      @java.lang.Override
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return super.clearOneof(oneof);
      }
      @java.lang.Override
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, java.lang.Object value) {
        return super.setRepeatedField(field, index, value);
      }
      @java.lang.Override
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.addRepeatedField(field, value);
      }
      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof perfetto.protos.DataSourceDescriptorOuterClass.DataSourceDescriptor) {
          return mergeFrom((perfetto.protos.DataSourceDescriptorOuterClass.DataSourceDescriptor)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(perfetto.protos.DataSourceDescriptorOuterClass.DataSourceDescriptor other) {
        if (other == perfetto.protos.DataSourceDescriptorOuterClass.DataSourceDescriptor.getDefaultInstance()) return this;
        if (other.hasName()) {
          name_ = other.name_;
          bitField0_ |= 0x00000001;
          onChanged();
        }
        if (other.hasId()) {
          setId(other.getId());
        }
        if (other.hasWillNotifyOnStop()) {
          setWillNotifyOnStop(other.getWillNotifyOnStop());
        }
        if (other.hasWillNotifyOnStart()) {
          setWillNotifyOnStart(other.getWillNotifyOnStart());
        }
        if (other.hasHandlesIncrementalStateClear()) {
          setHandlesIncrementalStateClear(other.getHandlesIncrementalStateClear());
        }
        if (other.hasGpuCounterDescriptor()) {
          mergeGpuCounterDescriptor(other.getGpuCounterDescriptor());
        }
        if (other.hasTrackEventDescriptor()) {
          mergeTrackEventDescriptor(other.getTrackEventDescriptor());
        }
        if (other.hasFtraceDescriptor()) {
          mergeFtraceDescriptor(other.getFtraceDescriptor());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        if (extensionRegistry == null) {
          throw new java.lang.NullPointerException();
        }
        try {
          boolean done = false;
          while (!done) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                done = true;
                break;
              case 10: {
                name_ = input.readBytes();
                bitField0_ |= 0x00000001;
                break;
              } // case 10
              case 16: {
                willNotifyOnStop_ = input.readBool();
                bitField0_ |= 0x00000004;
                break;
              } // case 16
              case 24: {
                willNotifyOnStart_ = input.readBool();
                bitField0_ |= 0x00000008;
                break;
              } // case 24
              case 32: {
                handlesIncrementalStateClear_ = input.readBool();
                bitField0_ |= 0x00000010;
                break;
              } // case 32
              case 42: {
                input.readMessage(
                    getGpuCounterDescriptorFieldBuilder().getBuilder(),
                    extensionRegistry);
                bitField0_ |= 0x00000020;
                break;
              } // case 42
              case 50: {
                input.readMessage(
                    getTrackEventDescriptorFieldBuilder().getBuilder(),
                    extensionRegistry);
                bitField0_ |= 0x00000040;
                break;
              } // case 50
              case 56: {
                id_ = input.readUInt64();
                bitField0_ |= 0x00000002;
                break;
              } // case 56
              case 66: {
                input.readMessage(
                    getFtraceDescriptorFieldBuilder().getBuilder(),
                    extensionRegistry);
                bitField0_ |= 0x00000080;
                break;
              } // case 66
              default: {
                if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                  done = true; // was an endgroup tag
                }
                break;
              } // default:
            } // switch (tag)
          } // while (!done)
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.unwrapIOException();
        } finally {
          onChanged();
        } // finally
        return this;
      }
      private int bitField0_;

      private java.lang.Object name_ = "";
      /**
       * <pre>
       * e.g., "linux.ftrace", "chromium.tracing"
       * </pre>
       *
       * <code>optional string name = 1;</code>
       * @return Whether the name field is set.
       */
      public boolean hasName() {
        return ((bitField0_ & 0x00000001) != 0);
      }
      /**
       * <pre>
       * e.g., "linux.ftrace", "chromium.tracing"
       * </pre>
       *
       * <code>optional string name = 1;</code>
       * @return The name.
       */
      public java.lang.String getName() {
        java.lang.Object ref = name_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          if (bs.isValidUtf8()) {
            name_ = s;
          }
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <pre>
       * e.g., "linux.ftrace", "chromium.tracing"
       * </pre>
       *
       * <code>optional string name = 1;</code>
       * @return The bytes for name.
       */
      public com.google.protobuf.ByteString
          getNameBytes() {
        java.lang.Object ref = name_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          name_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <pre>
       * e.g., "linux.ftrace", "chromium.tracing"
       * </pre>
       *
       * <code>optional string name = 1;</code>
       * @param value The name to set.
       * @return This builder for chaining.
       */
      public Builder setName(
          java.lang.String value) {
        if (value == null) { throw new NullPointerException(); }
        name_ = value;
        bitField0_ |= 0x00000001;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * e.g., "linux.ftrace", "chromium.tracing"
       * </pre>
       *
       * <code>optional string name = 1;</code>
       * @return This builder for chaining.
       */
      public Builder clearName() {
        name_ = getDefaultInstance().getName();
        bitField0_ = (bitField0_ & ~0x00000001);
        onChanged();
        return this;
      }
      /**
       * <pre>
       * e.g., "linux.ftrace", "chromium.tracing"
       * </pre>
       *
       * <code>optional string name = 1;</code>
       * @param value The bytes for name to set.
       * @return This builder for chaining.
       */
      public Builder setNameBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) { throw new NullPointerException(); }
        name_ = value;
        bitField0_ |= 0x00000001;
        onChanged();
        return this;
      }

      private long id_ ;
      /**
       * <pre>
       * When non-zero, this is a unique ID within the scope of the Producer for
       * this data source (it is NOT globally unique). This is useful to
       * differentiate between data sources with matching names when calling
       * UpdateDataSource(). This field has been introduced in November 2021
       * (v22, Android T) and is not supported on older versions.
       * </pre>
       *
       * <code>optional uint64 id = 7;</code>
       * @return Whether the id field is set.
       */
      @java.lang.Override
      public boolean hasId() {
        return ((bitField0_ & 0x00000002) != 0);
      }
      /**
       * <pre>
       * When non-zero, this is a unique ID within the scope of the Producer for
       * this data source (it is NOT globally unique). This is useful to
       * differentiate between data sources with matching names when calling
       * UpdateDataSource(). This field has been introduced in November 2021
       * (v22, Android T) and is not supported on older versions.
       * </pre>
       *
       * <code>optional uint64 id = 7;</code>
       * @return The id.
       */
      @java.lang.Override
      public long getId() {
        return id_;
      }
      /**
       * <pre>
       * When non-zero, this is a unique ID within the scope of the Producer for
       * this data source (it is NOT globally unique). This is useful to
       * differentiate between data sources with matching names when calling
       * UpdateDataSource(). This field has been introduced in November 2021
       * (v22, Android T) and is not supported on older versions.
       * </pre>
       *
       * <code>optional uint64 id = 7;</code>
       * @param value The id to set.
       * @return This builder for chaining.
       */
      public Builder setId(long value) {
        
        id_ = value;
        bitField0_ |= 0x00000002;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * When non-zero, this is a unique ID within the scope of the Producer for
       * this data source (it is NOT globally unique). This is useful to
       * differentiate between data sources with matching names when calling
       * UpdateDataSource(). This field has been introduced in November 2021
       * (v22, Android T) and is not supported on older versions.
       * </pre>
       *
       * <code>optional uint64 id = 7;</code>
       * @return This builder for chaining.
       */
      public Builder clearId() {
        bitField0_ = (bitField0_ & ~0x00000002);
        id_ = 0L;
        onChanged();
        return this;
      }

      private boolean willNotifyOnStop_ ;
      /**
       * <pre>
       * When true the data source is expected to ack the stop request through the
       * NotifyDataSourceStopped() IPC. This field has been introduced after
       * Android P in Jul 2018 and is not supported on older versions.
       * </pre>
       *
       * <code>optional bool will_notify_on_stop = 2;</code>
       * @return Whether the willNotifyOnStop field is set.
       */
      @java.lang.Override
      public boolean hasWillNotifyOnStop() {
        return ((bitField0_ & 0x00000004) != 0);
      }
      /**
       * <pre>
       * When true the data source is expected to ack the stop request through the
       * NotifyDataSourceStopped() IPC. This field has been introduced after
       * Android P in Jul 2018 and is not supported on older versions.
       * </pre>
       *
       * <code>optional bool will_notify_on_stop = 2;</code>
       * @return The willNotifyOnStop.
       */
      @java.lang.Override
      public boolean getWillNotifyOnStop() {
        return willNotifyOnStop_;
      }
      /**
       * <pre>
       * When true the data source is expected to ack the stop request through the
       * NotifyDataSourceStopped() IPC. This field has been introduced after
       * Android P in Jul 2018 and is not supported on older versions.
       * </pre>
       *
       * <code>optional bool will_notify_on_stop = 2;</code>
       * @param value The willNotifyOnStop to set.
       * @return This builder for chaining.
       */
      public Builder setWillNotifyOnStop(boolean value) {
        
        willNotifyOnStop_ = value;
        bitField0_ |= 0x00000004;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * When true the data source is expected to ack the stop request through the
       * NotifyDataSourceStopped() IPC. This field has been introduced after
       * Android P in Jul 2018 and is not supported on older versions.
       * </pre>
       *
       * <code>optional bool will_notify_on_stop = 2;</code>
       * @return This builder for chaining.
       */
      public Builder clearWillNotifyOnStop() {
        bitField0_ = (bitField0_ & ~0x00000004);
        willNotifyOnStop_ = false;
        onChanged();
        return this;
      }

      private boolean willNotifyOnStart_ ;
      /**
       * <pre>
       * When true the data source is expected to ack the start request through the
       * NotifyDataSourceStarted() IPC. This field has been introduced after
       * Android P in March 2019 and is not supported on older versions.
       * </pre>
       *
       * <code>optional bool will_notify_on_start = 3;</code>
       * @return Whether the willNotifyOnStart field is set.
       */
      @java.lang.Override
      public boolean hasWillNotifyOnStart() {
        return ((bitField0_ & 0x00000008) != 0);
      }
      /**
       * <pre>
       * When true the data source is expected to ack the start request through the
       * NotifyDataSourceStarted() IPC. This field has been introduced after
       * Android P in March 2019 and is not supported on older versions.
       * </pre>
       *
       * <code>optional bool will_notify_on_start = 3;</code>
       * @return The willNotifyOnStart.
       */
      @java.lang.Override
      public boolean getWillNotifyOnStart() {
        return willNotifyOnStart_;
      }
      /**
       * <pre>
       * When true the data source is expected to ack the start request through the
       * NotifyDataSourceStarted() IPC. This field has been introduced after
       * Android P in March 2019 and is not supported on older versions.
       * </pre>
       *
       * <code>optional bool will_notify_on_start = 3;</code>
       * @param value The willNotifyOnStart to set.
       * @return This builder for chaining.
       */
      public Builder setWillNotifyOnStart(boolean value) {
        
        willNotifyOnStart_ = value;
        bitField0_ |= 0x00000008;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * When true the data source is expected to ack the start request through the
       * NotifyDataSourceStarted() IPC. This field has been introduced after
       * Android P in March 2019 and is not supported on older versions.
       * </pre>
       *
       * <code>optional bool will_notify_on_start = 3;</code>
       * @return This builder for chaining.
       */
      public Builder clearWillNotifyOnStart() {
        bitField0_ = (bitField0_ & ~0x00000008);
        willNotifyOnStart_ = false;
        onChanged();
        return this;
      }

      private boolean handlesIncrementalStateClear_ ;
      /**
       * <pre>
       * If true, opt into receiving the ClearIncrementalState() IPC. This should be
       * set if the data source writes packets that refer to previous trace
       * contents, and knows how to stop referring to the already-emitted data.
       * </pre>
       *
       * <code>optional bool handles_incremental_state_clear = 4;</code>
       * @return Whether the handlesIncrementalStateClear field is set.
       */
      @java.lang.Override
      public boolean hasHandlesIncrementalStateClear() {
        return ((bitField0_ & 0x00000010) != 0);
      }
      /**
       * <pre>
       * If true, opt into receiving the ClearIncrementalState() IPC. This should be
       * set if the data source writes packets that refer to previous trace
       * contents, and knows how to stop referring to the already-emitted data.
       * </pre>
       *
       * <code>optional bool handles_incremental_state_clear = 4;</code>
       * @return The handlesIncrementalStateClear.
       */
      @java.lang.Override
      public boolean getHandlesIncrementalStateClear() {
        return handlesIncrementalStateClear_;
      }
      /**
       * <pre>
       * If true, opt into receiving the ClearIncrementalState() IPC. This should be
       * set if the data source writes packets that refer to previous trace
       * contents, and knows how to stop referring to the already-emitted data.
       * </pre>
       *
       * <code>optional bool handles_incremental_state_clear = 4;</code>
       * @param value The handlesIncrementalStateClear to set.
       * @return This builder for chaining.
       */
      public Builder setHandlesIncrementalStateClear(boolean value) {
        
        handlesIncrementalStateClear_ = value;
        bitField0_ |= 0x00000010;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * If true, opt into receiving the ClearIncrementalState() IPC. This should be
       * set if the data source writes packets that refer to previous trace
       * contents, and knows how to stop referring to the already-emitted data.
       * </pre>
       *
       * <code>optional bool handles_incremental_state_clear = 4;</code>
       * @return This builder for chaining.
       */
      public Builder clearHandlesIncrementalStateClear() {
        bitField0_ = (bitField0_ & ~0x00000010);
        handlesIncrementalStateClear_ = false;
        onChanged();
        return this;
      }

      private perfetto.protos.GpuCounterDescriptorOuterClass.GpuCounterDescriptor gpuCounterDescriptor_;
      private com.google.protobuf.SingleFieldBuilderV3<
          perfetto.protos.GpuCounterDescriptorOuterClass.GpuCounterDescriptor, perfetto.protos.GpuCounterDescriptorOuterClass.GpuCounterDescriptor.Builder, perfetto.protos.GpuCounterDescriptorOuterClass.GpuCounterDescriptorOrBuilder> gpuCounterDescriptorBuilder_;
      /**
       * <pre>
       * Optional specification about available GPU counters.
       * </pre>
       *
       * <code>optional .perfetto.protos.GpuCounterDescriptor gpu_counter_descriptor = 5 [lazy = true];</code>
       * @return Whether the gpuCounterDescriptor field is set.
       */
      public boolean hasGpuCounterDescriptor() {
        return ((bitField0_ & 0x00000020) != 0);
      }
      /**
       * <pre>
       * Optional specification about available GPU counters.
       * </pre>
       *
       * <code>optional .perfetto.protos.GpuCounterDescriptor gpu_counter_descriptor = 5 [lazy = true];</code>
       * @return The gpuCounterDescriptor.
       */
      public perfetto.protos.GpuCounterDescriptorOuterClass.GpuCounterDescriptor getGpuCounterDescriptor() {
        if (gpuCounterDescriptorBuilder_ == null) {
          return gpuCounterDescriptor_ == null ? perfetto.protos.GpuCounterDescriptorOuterClass.GpuCounterDescriptor.getDefaultInstance() : gpuCounterDescriptor_;
        } else {
          return gpuCounterDescriptorBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       * Optional specification about available GPU counters.
       * </pre>
       *
       * <code>optional .perfetto.protos.GpuCounterDescriptor gpu_counter_descriptor = 5 [lazy = true];</code>
       */
      public Builder setGpuCounterDescriptor(perfetto.protos.GpuCounterDescriptorOuterClass.GpuCounterDescriptor value) {
        if (gpuCounterDescriptorBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          gpuCounterDescriptor_ = value;
        } else {
          gpuCounterDescriptorBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000020;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Optional specification about available GPU counters.
       * </pre>
       *
       * <code>optional .perfetto.protos.GpuCounterDescriptor gpu_counter_descriptor = 5 [lazy = true];</code>
       */
      public Builder setGpuCounterDescriptor(
          perfetto.protos.GpuCounterDescriptorOuterClass.GpuCounterDescriptor.Builder builderForValue) {
        if (gpuCounterDescriptorBuilder_ == null) {
          gpuCounterDescriptor_ = builderForValue.build();
        } else {
          gpuCounterDescriptorBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000020;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Optional specification about available GPU counters.
       * </pre>
       *
       * <code>optional .perfetto.protos.GpuCounterDescriptor gpu_counter_descriptor = 5 [lazy = true];</code>
       */
      public Builder mergeGpuCounterDescriptor(perfetto.protos.GpuCounterDescriptorOuterClass.GpuCounterDescriptor value) {
        if (gpuCounterDescriptorBuilder_ == null) {
          if (((bitField0_ & 0x00000020) != 0) &&
            gpuCounterDescriptor_ != null &&
            gpuCounterDescriptor_ != perfetto.protos.GpuCounterDescriptorOuterClass.GpuCounterDescriptor.getDefaultInstance()) {
            getGpuCounterDescriptorBuilder().mergeFrom(value);
          } else {
            gpuCounterDescriptor_ = value;
          }
        } else {
          gpuCounterDescriptorBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00000020;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Optional specification about available GPU counters.
       * </pre>
       *
       * <code>optional .perfetto.protos.GpuCounterDescriptor gpu_counter_descriptor = 5 [lazy = true];</code>
       */
      public Builder clearGpuCounterDescriptor() {
        bitField0_ = (bitField0_ & ~0x00000020);
        gpuCounterDescriptor_ = null;
        if (gpuCounterDescriptorBuilder_ != null) {
          gpuCounterDescriptorBuilder_.dispose();
          gpuCounterDescriptorBuilder_ = null;
        }
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Optional specification about available GPU counters.
       * </pre>
       *
       * <code>optional .perfetto.protos.GpuCounterDescriptor gpu_counter_descriptor = 5 [lazy = true];</code>
       */
      public perfetto.protos.GpuCounterDescriptorOuterClass.GpuCounterDescriptor.Builder getGpuCounterDescriptorBuilder() {
        bitField0_ |= 0x00000020;
        onChanged();
        return getGpuCounterDescriptorFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       * Optional specification about available GPU counters.
       * </pre>
       *
       * <code>optional .perfetto.protos.GpuCounterDescriptor gpu_counter_descriptor = 5 [lazy = true];</code>
       */
      public perfetto.protos.GpuCounterDescriptorOuterClass.GpuCounterDescriptorOrBuilder getGpuCounterDescriptorOrBuilder() {
        if (gpuCounterDescriptorBuilder_ != null) {
          return gpuCounterDescriptorBuilder_.getMessageOrBuilder();
        } else {
          return gpuCounterDescriptor_ == null ?
              perfetto.protos.GpuCounterDescriptorOuterClass.GpuCounterDescriptor.getDefaultInstance() : gpuCounterDescriptor_;
        }
      }
      /**
       * <pre>
       * Optional specification about available GPU counters.
       * </pre>
       *
       * <code>optional .perfetto.protos.GpuCounterDescriptor gpu_counter_descriptor = 5 [lazy = true];</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          perfetto.protos.GpuCounterDescriptorOuterClass.GpuCounterDescriptor, perfetto.protos.GpuCounterDescriptorOuterClass.GpuCounterDescriptor.Builder, perfetto.protos.GpuCounterDescriptorOuterClass.GpuCounterDescriptorOrBuilder> 
          getGpuCounterDescriptorFieldBuilder() {
        if (gpuCounterDescriptorBuilder_ == null) {
          gpuCounterDescriptorBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              perfetto.protos.GpuCounterDescriptorOuterClass.GpuCounterDescriptor, perfetto.protos.GpuCounterDescriptorOuterClass.GpuCounterDescriptor.Builder, perfetto.protos.GpuCounterDescriptorOuterClass.GpuCounterDescriptorOrBuilder>(
                  getGpuCounterDescriptor(),
                  getParentForChildren(),
                  isClean());
          gpuCounterDescriptor_ = null;
        }
        return gpuCounterDescriptorBuilder_;
      }

      private perfetto.protos.TrackEventDescriptorOuterClass.TrackEventDescriptor trackEventDescriptor_;
      private com.google.protobuf.SingleFieldBuilderV3<
          perfetto.protos.TrackEventDescriptorOuterClass.TrackEventDescriptor, perfetto.protos.TrackEventDescriptorOuterClass.TrackEventDescriptor.Builder, perfetto.protos.TrackEventDescriptorOuterClass.TrackEventDescriptorOrBuilder> trackEventDescriptorBuilder_;
      /**
       * <code>optional .perfetto.protos.TrackEventDescriptor track_event_descriptor = 6 [lazy = true];</code>
       * @return Whether the trackEventDescriptor field is set.
       */
      public boolean hasTrackEventDescriptor() {
        return ((bitField0_ & 0x00000040) != 0);
      }
      /**
       * <code>optional .perfetto.protos.TrackEventDescriptor track_event_descriptor = 6 [lazy = true];</code>
       * @return The trackEventDescriptor.
       */
      public perfetto.protos.TrackEventDescriptorOuterClass.TrackEventDescriptor getTrackEventDescriptor() {
        if (trackEventDescriptorBuilder_ == null) {
          return trackEventDescriptor_ == null ? perfetto.protos.TrackEventDescriptorOuterClass.TrackEventDescriptor.getDefaultInstance() : trackEventDescriptor_;
        } else {
          return trackEventDescriptorBuilder_.getMessage();
        }
      }
      /**
       * <code>optional .perfetto.protos.TrackEventDescriptor track_event_descriptor = 6 [lazy = true];</code>
       */
      public Builder setTrackEventDescriptor(perfetto.protos.TrackEventDescriptorOuterClass.TrackEventDescriptor value) {
        if (trackEventDescriptorBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          trackEventDescriptor_ = value;
        } else {
          trackEventDescriptorBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000040;
        onChanged();
        return this;
      }
      /**
       * <code>optional .perfetto.protos.TrackEventDescriptor track_event_descriptor = 6 [lazy = true];</code>
       */
      public Builder setTrackEventDescriptor(
          perfetto.protos.TrackEventDescriptorOuterClass.TrackEventDescriptor.Builder builderForValue) {
        if (trackEventDescriptorBuilder_ == null) {
          trackEventDescriptor_ = builderForValue.build();
        } else {
          trackEventDescriptorBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000040;
        onChanged();
        return this;
      }
      /**
       * <code>optional .perfetto.protos.TrackEventDescriptor track_event_descriptor = 6 [lazy = true];</code>
       */
      public Builder mergeTrackEventDescriptor(perfetto.protos.TrackEventDescriptorOuterClass.TrackEventDescriptor value) {
        if (trackEventDescriptorBuilder_ == null) {
          if (((bitField0_ & 0x00000040) != 0) &&
            trackEventDescriptor_ != null &&
            trackEventDescriptor_ != perfetto.protos.TrackEventDescriptorOuterClass.TrackEventDescriptor.getDefaultInstance()) {
            getTrackEventDescriptorBuilder().mergeFrom(value);
          } else {
            trackEventDescriptor_ = value;
          }
        } else {
          trackEventDescriptorBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00000040;
        onChanged();
        return this;
      }
      /**
       * <code>optional .perfetto.protos.TrackEventDescriptor track_event_descriptor = 6 [lazy = true];</code>
       */
      public Builder clearTrackEventDescriptor() {
        bitField0_ = (bitField0_ & ~0x00000040);
        trackEventDescriptor_ = null;
        if (trackEventDescriptorBuilder_ != null) {
          trackEventDescriptorBuilder_.dispose();
          trackEventDescriptorBuilder_ = null;
        }
        onChanged();
        return this;
      }
      /**
       * <code>optional .perfetto.protos.TrackEventDescriptor track_event_descriptor = 6 [lazy = true];</code>
       */
      public perfetto.protos.TrackEventDescriptorOuterClass.TrackEventDescriptor.Builder getTrackEventDescriptorBuilder() {
        bitField0_ |= 0x00000040;
        onChanged();
        return getTrackEventDescriptorFieldBuilder().getBuilder();
      }
      /**
       * <code>optional .perfetto.protos.TrackEventDescriptor track_event_descriptor = 6 [lazy = true];</code>
       */
      public perfetto.protos.TrackEventDescriptorOuterClass.TrackEventDescriptorOrBuilder getTrackEventDescriptorOrBuilder() {
        if (trackEventDescriptorBuilder_ != null) {
          return trackEventDescriptorBuilder_.getMessageOrBuilder();
        } else {
          return trackEventDescriptor_ == null ?
              perfetto.protos.TrackEventDescriptorOuterClass.TrackEventDescriptor.getDefaultInstance() : trackEventDescriptor_;
        }
      }
      /**
       * <code>optional .perfetto.protos.TrackEventDescriptor track_event_descriptor = 6 [lazy = true];</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          perfetto.protos.TrackEventDescriptorOuterClass.TrackEventDescriptor, perfetto.protos.TrackEventDescriptorOuterClass.TrackEventDescriptor.Builder, perfetto.protos.TrackEventDescriptorOuterClass.TrackEventDescriptorOrBuilder> 
          getTrackEventDescriptorFieldBuilder() {
        if (trackEventDescriptorBuilder_ == null) {
          trackEventDescriptorBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              perfetto.protos.TrackEventDescriptorOuterClass.TrackEventDescriptor, perfetto.protos.TrackEventDescriptorOuterClass.TrackEventDescriptor.Builder, perfetto.protos.TrackEventDescriptorOuterClass.TrackEventDescriptorOrBuilder>(
                  getTrackEventDescriptor(),
                  getParentForChildren(),
                  isClean());
          trackEventDescriptor_ = null;
        }
        return trackEventDescriptorBuilder_;
      }

      private perfetto.protos.FtraceDescriptorOuterClass.FtraceDescriptor ftraceDescriptor_;
      private com.google.protobuf.SingleFieldBuilderV3<
          perfetto.protos.FtraceDescriptorOuterClass.FtraceDescriptor, perfetto.protos.FtraceDescriptorOuterClass.FtraceDescriptor.Builder, perfetto.protos.FtraceDescriptorOuterClass.FtraceDescriptorOrBuilder> ftraceDescriptorBuilder_;
      /**
       * <code>optional .perfetto.protos.FtraceDescriptor ftrace_descriptor = 8 [lazy = true];</code>
       * @return Whether the ftraceDescriptor field is set.
       */
      public boolean hasFtraceDescriptor() {
        return ((bitField0_ & 0x00000080) != 0);
      }
      /**
       * <code>optional .perfetto.protos.FtraceDescriptor ftrace_descriptor = 8 [lazy = true];</code>
       * @return The ftraceDescriptor.
       */
      public perfetto.protos.FtraceDescriptorOuterClass.FtraceDescriptor getFtraceDescriptor() {
        if (ftraceDescriptorBuilder_ == null) {
          return ftraceDescriptor_ == null ? perfetto.protos.FtraceDescriptorOuterClass.FtraceDescriptor.getDefaultInstance() : ftraceDescriptor_;
        } else {
          return ftraceDescriptorBuilder_.getMessage();
        }
      }
      /**
       * <code>optional .perfetto.protos.FtraceDescriptor ftrace_descriptor = 8 [lazy = true];</code>
       */
      public Builder setFtraceDescriptor(perfetto.protos.FtraceDescriptorOuterClass.FtraceDescriptor value) {
        if (ftraceDescriptorBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ftraceDescriptor_ = value;
        } else {
          ftraceDescriptorBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000080;
        onChanged();
        return this;
      }
      /**
       * <code>optional .perfetto.protos.FtraceDescriptor ftrace_descriptor = 8 [lazy = true];</code>
       */
      public Builder setFtraceDescriptor(
          perfetto.protos.FtraceDescriptorOuterClass.FtraceDescriptor.Builder builderForValue) {
        if (ftraceDescriptorBuilder_ == null) {
          ftraceDescriptor_ = builderForValue.build();
        } else {
          ftraceDescriptorBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000080;
        onChanged();
        return this;
      }
      /**
       * <code>optional .perfetto.protos.FtraceDescriptor ftrace_descriptor = 8 [lazy = true];</code>
       */
      public Builder mergeFtraceDescriptor(perfetto.protos.FtraceDescriptorOuterClass.FtraceDescriptor value) {
        if (ftraceDescriptorBuilder_ == null) {
          if (((bitField0_ & 0x00000080) != 0) &&
            ftraceDescriptor_ != null &&
            ftraceDescriptor_ != perfetto.protos.FtraceDescriptorOuterClass.FtraceDescriptor.getDefaultInstance()) {
            getFtraceDescriptorBuilder().mergeFrom(value);
          } else {
            ftraceDescriptor_ = value;
          }
        } else {
          ftraceDescriptorBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00000080;
        onChanged();
        return this;
      }
      /**
       * <code>optional .perfetto.protos.FtraceDescriptor ftrace_descriptor = 8 [lazy = true];</code>
       */
      public Builder clearFtraceDescriptor() {
        bitField0_ = (bitField0_ & ~0x00000080);
        ftraceDescriptor_ = null;
        if (ftraceDescriptorBuilder_ != null) {
          ftraceDescriptorBuilder_.dispose();
          ftraceDescriptorBuilder_ = null;
        }
        onChanged();
        return this;
      }
      /**
       * <code>optional .perfetto.protos.FtraceDescriptor ftrace_descriptor = 8 [lazy = true];</code>
       */
      public perfetto.protos.FtraceDescriptorOuterClass.FtraceDescriptor.Builder getFtraceDescriptorBuilder() {
        bitField0_ |= 0x00000080;
        onChanged();
        return getFtraceDescriptorFieldBuilder().getBuilder();
      }
      /**
       * <code>optional .perfetto.protos.FtraceDescriptor ftrace_descriptor = 8 [lazy = true];</code>
       */
      public perfetto.protos.FtraceDescriptorOuterClass.FtraceDescriptorOrBuilder getFtraceDescriptorOrBuilder() {
        if (ftraceDescriptorBuilder_ != null) {
          return ftraceDescriptorBuilder_.getMessageOrBuilder();
        } else {
          return ftraceDescriptor_ == null ?
              perfetto.protos.FtraceDescriptorOuterClass.FtraceDescriptor.getDefaultInstance() : ftraceDescriptor_;
        }
      }
      /**
       * <code>optional .perfetto.protos.FtraceDescriptor ftrace_descriptor = 8 [lazy = true];</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          perfetto.protos.FtraceDescriptorOuterClass.FtraceDescriptor, perfetto.protos.FtraceDescriptorOuterClass.FtraceDescriptor.Builder, perfetto.protos.FtraceDescriptorOuterClass.FtraceDescriptorOrBuilder> 
          getFtraceDescriptorFieldBuilder() {
        if (ftraceDescriptorBuilder_ == null) {
          ftraceDescriptorBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              perfetto.protos.FtraceDescriptorOuterClass.FtraceDescriptor, perfetto.protos.FtraceDescriptorOuterClass.FtraceDescriptor.Builder, perfetto.protos.FtraceDescriptorOuterClass.FtraceDescriptorOrBuilder>(
                  getFtraceDescriptor(),
                  getParentForChildren(),
                  isClean());
          ftraceDescriptor_ = null;
        }
        return ftraceDescriptorBuilder_;
      }
      @java.lang.Override
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      @java.lang.Override
      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:perfetto.protos.DataSourceDescriptor)
    }

    // @@protoc_insertion_point(class_scope:perfetto.protos.DataSourceDescriptor)
    private static final perfetto.protos.DataSourceDescriptorOuterClass.DataSourceDescriptor DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new perfetto.protos.DataSourceDescriptorOuterClass.DataSourceDescriptor();
    }

    public static perfetto.protos.DataSourceDescriptorOuterClass.DataSourceDescriptor getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    @java.lang.Deprecated public static final com.google.protobuf.Parser<DataSourceDescriptor>
        PARSER = new com.google.protobuf.AbstractParser<DataSourceDescriptor>() {
      @java.lang.Override
      public DataSourceDescriptor parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        Builder builder = newBuilder();
        try {
          builder.mergeFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.setUnfinishedMessage(builder.buildPartial());
        } catch (com.google.protobuf.UninitializedMessageException e) {
          throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
        } catch (java.io.IOException e) {
          throw new com.google.protobuf.InvalidProtocolBufferException(e)
              .setUnfinishedMessage(builder.buildPartial());
        }
        return builder.buildPartial();
      }
    };

    public static com.google.protobuf.Parser<DataSourceDescriptor> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<DataSourceDescriptor> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public perfetto.protos.DataSourceDescriptorOuterClass.DataSourceDescriptor getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_perfetto_protos_DataSourceDescriptor_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_perfetto_protos_DataSourceDescriptor_fieldAccessorTable;

  public static com.google.protobuf.Descriptors.FileDescriptor
      getDescriptor() {
    return descriptor;
  }
  private static  com.google.protobuf.Descriptors.FileDescriptor
      descriptor;
  static {
    java.lang.String[] descriptorData = {
      "\n3protos/perfetto/common/data_source_des" +
      "criptor.proto\022\017perfetto.protos\032.protos/p" +
      "erfetto/common/ftrace_descriptor.proto\0323" +
      "protos/perfetto/common/gpu_counter_descr" +
      "iptor.proto\0323protos/perfetto/common/trac" +
      "k_event_descriptor.proto\"\354\002\n\024DataSourceD" +
      "escriptor\022\014\n\004name\030\001 \001(\t\022\n\n\002id\030\007 \001(\004\022\033\n\023w" +
      "ill_notify_on_stop\030\002 \001(\010\022\034\n\024will_notify_" +
      "on_start\030\003 \001(\010\022\'\n\037handles_incremental_st" +
      "ate_clear\030\004 \001(\010\022I\n\026gpu_counter_descripto" +
      "r\030\005 \001(\0132%.perfetto.protos.GpuCounterDesc" +
      "riptorB\002(\001\022I\n\026track_event_descriptor\030\006 \001" +
      "(\0132%.perfetto.protos.TrackEventDescripto" +
      "rB\002(\001\022@\n\021ftrace_descriptor\030\010 \001(\0132!.perfe" +
      "tto.protos.FtraceDescriptorB\002(\001"
    };
    descriptor = com.google.protobuf.Descriptors.FileDescriptor
      .internalBuildGeneratedFileFrom(descriptorData,
        new com.google.protobuf.Descriptors.FileDescriptor[] {
          perfetto.protos.FtraceDescriptorOuterClass.getDescriptor(),
          perfetto.protos.GpuCounterDescriptorOuterClass.getDescriptor(),
          perfetto.protos.TrackEventDescriptorOuterClass.getDescriptor(),
        });
    internal_static_perfetto_protos_DataSourceDescriptor_descriptor =
      getDescriptor().getMessageTypes().get(0);
    internal_static_perfetto_protos_DataSourceDescriptor_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_perfetto_protos_DataSourceDescriptor_descriptor,
        new java.lang.String[] { "Name", "Id", "WillNotifyOnStop", "WillNotifyOnStart", "HandlesIncrementalStateClear", "GpuCounterDescriptor", "TrackEventDescriptor", "FtraceDescriptor", });
    perfetto.protos.FtraceDescriptorOuterClass.getDescriptor();
    perfetto.protos.GpuCounterDescriptorOuterClass.getDescriptor();
    perfetto.protos.TrackEventDescriptorOuterClass.getDescriptor();
  }

  // @@protoc_insertion_point(outer_class_scope)
}
