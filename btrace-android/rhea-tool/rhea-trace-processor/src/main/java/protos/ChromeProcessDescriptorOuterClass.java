// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: protos/perfetto/trace/track_event/chrome_process_descriptor.proto

package perfetto.protos;

public final class ChromeProcessDescriptorOuterClass {
  private ChromeProcessDescriptorOuterClass() {}
  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistryLite registry) {
  }

  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistry registry) {
    registerAllExtensions(
        (com.google.protobuf.ExtensionRegistryLite) registry);
  }
  public interface ChromeProcessDescriptorOrBuilder extends
      // @@protoc_insertion_point(interface_extends:perfetto.protos.ChromeProcessDescriptor)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <code>optional .perfetto.protos.ChromeProcessDescriptor.ProcessType process_type = 1;</code>
     * @return Whether the processType field is set.
     */
    boolean hasProcessType();
    /**
     * <code>optional .perfetto.protos.ChromeProcessDescriptor.ProcessType process_type = 1;</code>
     * @return The processType.
     */
    perfetto.protos.ChromeProcessDescriptorOuterClass.ChromeProcessDescriptor.ProcessType getProcessType();

    /**
     * <code>optional int32 process_priority = 2;</code>
     * @return Whether the processPriority field is set.
     */
    boolean hasProcessPriority();
    /**
     * <code>optional int32 process_priority = 2;</code>
     * @return The processPriority.
     */
    int getProcessPriority();

    /**
     * <pre>
     * To support old UI. New UI should determine default sorting by process_type.
     * </pre>
     *
     * <code>optional int32 legacy_sort_index = 3;</code>
     * @return Whether the legacySortIndex field is set.
     */
    boolean hasLegacySortIndex();
    /**
     * <pre>
     * To support old UI. New UI should determine default sorting by process_type.
     * </pre>
     *
     * <code>optional int32 legacy_sort_index = 3;</code>
     * @return The legacySortIndex.
     */
    int getLegacySortIndex();

    /**
     * <pre>
     * Name of the hosting app for WebView. Used to match renderer processes to
     * their hosting apps.
     * </pre>
     *
     * <code>optional string host_app_package_name = 4;</code>
     * @return Whether the hostAppPackageName field is set.
     */
    boolean hasHostAppPackageName();
    /**
     * <pre>
     * Name of the hosting app for WebView. Used to match renderer processes to
     * their hosting apps.
     * </pre>
     *
     * <code>optional string host_app_package_name = 4;</code>
     * @return The hostAppPackageName.
     */
    java.lang.String getHostAppPackageName();
    /**
     * <pre>
     * Name of the hosting app for WebView. Used to match renderer processes to
     * their hosting apps.
     * </pre>
     *
     * <code>optional string host_app_package_name = 4;</code>
     * @return The bytes for hostAppPackageName.
     */
    com.google.protobuf.ByteString
        getHostAppPackageNameBytes();

    /**
     * <pre>
     * The ID to link crashes to trace.
     * Notes:
     * * The ID is per process. So, each trace may contain many IDs, and you need
     *   to look for the ID from crashed process to find the crash report.
     * * Having a "chrome-trace-id" in crash doesn't necessarily mean we can
     *   get an uploaded trace, since uploads could have failed.
     * * On the other hand, if there was a crash during the session and trace was
     *   uploaded, it is very likely to find a crash report with the trace ID.
     * * This is not crash ID or trace ID. It is just a random 64-bit number
     *   recorded in both traces and crashes. It is possible to have collisions,
     *   though very rare.
     * </pre>
     *
     * <code>optional uint64 crash_trace_id = 5;</code>
     * @return Whether the crashTraceId field is set.
     */
    boolean hasCrashTraceId();
    /**
     * <pre>
     * The ID to link crashes to trace.
     * Notes:
     * * The ID is per process. So, each trace may contain many IDs, and you need
     *   to look for the ID from crashed process to find the crash report.
     * * Having a "chrome-trace-id" in crash doesn't necessarily mean we can
     *   get an uploaded trace, since uploads could have failed.
     * * On the other hand, if there was a crash during the session and trace was
     *   uploaded, it is very likely to find a crash report with the trace ID.
     * * This is not crash ID or trace ID. It is just a random 64-bit number
     *   recorded in both traces and crashes. It is possible to have collisions,
     *   though very rare.
     * </pre>
     *
     * <code>optional uint64 crash_trace_id = 5;</code>
     * @return The crashTraceId.
     */
    long getCrashTraceId();
  }
  /**
   * <pre>
   * Describes the attributes for a Chrome process. Must be paired with a
   * ProcessDescriptor in the same TrackDescriptor.
   * Next id: 6.
   * </pre>
   *
   * Protobuf type {@code perfetto.protos.ChromeProcessDescriptor}
   */
  public static final class ChromeProcessDescriptor extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:perfetto.protos.ChromeProcessDescriptor)
      ChromeProcessDescriptorOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use ChromeProcessDescriptor.newBuilder() to construct.
    private ChromeProcessDescriptor(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private ChromeProcessDescriptor() {
      processType_ = 0;
      hostAppPackageName_ = "";
    }

    @java.lang.Override
    @SuppressWarnings({"unused"})
    protected java.lang.Object newInstance(
        UnusedPrivateParameter unused) {
      return new ChromeProcessDescriptor();
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return perfetto.protos.ChromeProcessDescriptorOuterClass.internal_static_perfetto_protos_ChromeProcessDescriptor_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return perfetto.protos.ChromeProcessDescriptorOuterClass.internal_static_perfetto_protos_ChromeProcessDescriptor_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              perfetto.protos.ChromeProcessDescriptorOuterClass.ChromeProcessDescriptor.class, perfetto.protos.ChromeProcessDescriptorOuterClass.ChromeProcessDescriptor.Builder.class);
    }

    /**
     * <pre>
     * See chromium's content::ProcessType.
     * </pre>
     *
     * Protobuf enum {@code perfetto.protos.ChromeProcessDescriptor.ProcessType}
     */
    public enum ProcessType
        implements com.google.protobuf.ProtocolMessageEnum {
      /**
       * <code>PROCESS_UNSPECIFIED = 0;</code>
       */
      PROCESS_UNSPECIFIED(0),
      /**
       * <code>PROCESS_BROWSER = 1;</code>
       */
      PROCESS_BROWSER(1),
      /**
       * <code>PROCESS_RENDERER = 2;</code>
       */
      PROCESS_RENDERER(2),
      /**
       * <code>PROCESS_UTILITY = 3;</code>
       */
      PROCESS_UTILITY(3),
      /**
       * <code>PROCESS_ZYGOTE = 4;</code>
       */
      PROCESS_ZYGOTE(4),
      /**
       * <code>PROCESS_SANDBOX_HELPER = 5;</code>
       */
      PROCESS_SANDBOX_HELPER(5),
      /**
       * <code>PROCESS_GPU = 6;</code>
       */
      PROCESS_GPU(6),
      /**
       * <code>PROCESS_PPAPI_PLUGIN = 7;</code>
       */
      PROCESS_PPAPI_PLUGIN(7),
      /**
       * <code>PROCESS_PPAPI_BROKER = 8;</code>
       */
      PROCESS_PPAPI_BROKER(8),
      /**
       * <code>PROCESS_SERVICE_NETWORK = 9;</code>
       */
      PROCESS_SERVICE_NETWORK(9),
      /**
       * <code>PROCESS_SERVICE_TRACING = 10;</code>
       */
      PROCESS_SERVICE_TRACING(10),
      /**
       * <code>PROCESS_SERVICE_STORAGE = 11;</code>
       */
      PROCESS_SERVICE_STORAGE(11),
      /**
       * <code>PROCESS_SERVICE_AUDIO = 12;</code>
       */
      PROCESS_SERVICE_AUDIO(12),
      /**
       * <code>PROCESS_SERVICE_DATA_DECODER = 13;</code>
       */
      PROCESS_SERVICE_DATA_DECODER(13),
      /**
       * <code>PROCESS_SERVICE_UTIL_WIN = 14;</code>
       */
      PROCESS_SERVICE_UTIL_WIN(14),
      /**
       * <code>PROCESS_SERVICE_PROXY_RESOLVER = 15;</code>
       */
      PROCESS_SERVICE_PROXY_RESOLVER(15),
      /**
       * <code>PROCESS_SERVICE_CDM = 16;</code>
       */
      PROCESS_SERVICE_CDM(16),
      /**
       * <code>PROCESS_SERVICE_VIDEO_CAPTURE = 17;</code>
       */
      PROCESS_SERVICE_VIDEO_CAPTURE(17),
      /**
       * <code>PROCESS_SERVICE_UNZIPPER = 18;</code>
       */
      PROCESS_SERVICE_UNZIPPER(18),
      /**
       * <code>PROCESS_SERVICE_MIRRORING = 19;</code>
       */
      PROCESS_SERVICE_MIRRORING(19),
      /**
       * <code>PROCESS_SERVICE_FILEPATCHER = 20;</code>
       */
      PROCESS_SERVICE_FILEPATCHER(20),
      /**
       * <code>PROCESS_SERVICE_TTS = 21;</code>
       */
      PROCESS_SERVICE_TTS(21),
      /**
       * <code>PROCESS_SERVICE_PRINTING = 22;</code>
       */
      PROCESS_SERVICE_PRINTING(22),
      /**
       * <code>PROCESS_SERVICE_QUARANTINE = 23;</code>
       */
      PROCESS_SERVICE_QUARANTINE(23),
      /**
       * <code>PROCESS_SERVICE_CROS_LOCALSEARCH = 24;</code>
       */
      PROCESS_SERVICE_CROS_LOCALSEARCH(24),
      /**
       * <code>PROCESS_SERVICE_CROS_ASSISTANT_AUDIO_DECODER = 25;</code>
       */
      PROCESS_SERVICE_CROS_ASSISTANT_AUDIO_DECODER(25),
      /**
       * <code>PROCESS_SERVICE_FILEUTIL = 26;</code>
       */
      PROCESS_SERVICE_FILEUTIL(26),
      /**
       * <code>PROCESS_SERVICE_PRINTCOMPOSITOR = 27;</code>
       */
      PROCESS_SERVICE_PRINTCOMPOSITOR(27),
      /**
       * <code>PROCESS_SERVICE_PAINTPREVIEW = 28;</code>
       */
      PROCESS_SERVICE_PAINTPREVIEW(28),
      /**
       * <code>PROCESS_SERVICE_SPEECHRECOGNITION = 29;</code>
       */
      PROCESS_SERVICE_SPEECHRECOGNITION(29),
      /**
       * <code>PROCESS_SERVICE_XRDEVICE = 30;</code>
       */
      PROCESS_SERVICE_XRDEVICE(30),
      /**
       * <code>PROCESS_SERVICE_READICON = 31;</code>
       */
      PROCESS_SERVICE_READICON(31),
      /**
       * <code>PROCESS_SERVICE_LANGUAGEDETECTION = 32;</code>
       */
      PROCESS_SERVICE_LANGUAGEDETECTION(32),
      /**
       * <code>PROCESS_SERVICE_SHARING = 33;</code>
       */
      PROCESS_SERVICE_SHARING(33),
      /**
       * <code>PROCESS_SERVICE_MEDIAPARSER = 34;</code>
       */
      PROCESS_SERVICE_MEDIAPARSER(34),
      /**
       * <code>PROCESS_SERVICE_QRCODEGENERATOR = 35;</code>
       */
      PROCESS_SERVICE_QRCODEGENERATOR(35),
      /**
       * <code>PROCESS_SERVICE_PROFILEIMPORT = 36;</code>
       */
      PROCESS_SERVICE_PROFILEIMPORT(36),
      /**
       * <code>PROCESS_SERVICE_IME = 37;</code>
       */
      PROCESS_SERVICE_IME(37),
      /**
       * <code>PROCESS_SERVICE_RECORDING = 38;</code>
       */
      PROCESS_SERVICE_RECORDING(38),
      /**
       * <code>PROCESS_SERVICE_SHAPEDETECTION = 39;</code>
       */
      PROCESS_SERVICE_SHAPEDETECTION(39),
      /**
       * <code>PROCESS_RENDERER_EXTENSION = 40;</code>
       */
      PROCESS_RENDERER_EXTENSION(40),
      ;

      /**
       * <code>PROCESS_UNSPECIFIED = 0;</code>
       */
      public static final int PROCESS_UNSPECIFIED_VALUE = 0;
      /**
       * <code>PROCESS_BROWSER = 1;</code>
       */
      public static final int PROCESS_BROWSER_VALUE = 1;
      /**
       * <code>PROCESS_RENDERER = 2;</code>
       */
      public static final int PROCESS_RENDERER_VALUE = 2;
      /**
       * <code>PROCESS_UTILITY = 3;</code>
       */
      public static final int PROCESS_UTILITY_VALUE = 3;
      /**
       * <code>PROCESS_ZYGOTE = 4;</code>
       */
      public static final int PROCESS_ZYGOTE_VALUE = 4;
      /**
       * <code>PROCESS_SANDBOX_HELPER = 5;</code>
       */
      public static final int PROCESS_SANDBOX_HELPER_VALUE = 5;
      /**
       * <code>PROCESS_GPU = 6;</code>
       */
      public static final int PROCESS_GPU_VALUE = 6;
      /**
       * <code>PROCESS_PPAPI_PLUGIN = 7;</code>
       */
      public static final int PROCESS_PPAPI_PLUGIN_VALUE = 7;
      /**
       * <code>PROCESS_PPAPI_BROKER = 8;</code>
       */
      public static final int PROCESS_PPAPI_BROKER_VALUE = 8;
      /**
       * <code>PROCESS_SERVICE_NETWORK = 9;</code>
       */
      public static final int PROCESS_SERVICE_NETWORK_VALUE = 9;
      /**
       * <code>PROCESS_SERVICE_TRACING = 10;</code>
       */
      public static final int PROCESS_SERVICE_TRACING_VALUE = 10;
      /**
       * <code>PROCESS_SERVICE_STORAGE = 11;</code>
       */
      public static final int PROCESS_SERVICE_STORAGE_VALUE = 11;
      /**
       * <code>PROCESS_SERVICE_AUDIO = 12;</code>
       */
      public static final int PROCESS_SERVICE_AUDIO_VALUE = 12;
      /**
       * <code>PROCESS_SERVICE_DATA_DECODER = 13;</code>
       */
      public static final int PROCESS_SERVICE_DATA_DECODER_VALUE = 13;
      /**
       * <code>PROCESS_SERVICE_UTIL_WIN = 14;</code>
       */
      public static final int PROCESS_SERVICE_UTIL_WIN_VALUE = 14;
      /**
       * <code>PROCESS_SERVICE_PROXY_RESOLVER = 15;</code>
       */
      public static final int PROCESS_SERVICE_PROXY_RESOLVER_VALUE = 15;
      /**
       * <code>PROCESS_SERVICE_CDM = 16;</code>
       */
      public static final int PROCESS_SERVICE_CDM_VALUE = 16;
      /**
       * <code>PROCESS_SERVICE_VIDEO_CAPTURE = 17;</code>
       */
      public static final int PROCESS_SERVICE_VIDEO_CAPTURE_VALUE = 17;
      /**
       * <code>PROCESS_SERVICE_UNZIPPER = 18;</code>
       */
      public static final int PROCESS_SERVICE_UNZIPPER_VALUE = 18;
      /**
       * <code>PROCESS_SERVICE_MIRRORING = 19;</code>
       */
      public static final int PROCESS_SERVICE_MIRRORING_VALUE = 19;
      /**
       * <code>PROCESS_SERVICE_FILEPATCHER = 20;</code>
       */
      public static final int PROCESS_SERVICE_FILEPATCHER_VALUE = 20;
      /**
       * <code>PROCESS_SERVICE_TTS = 21;</code>
       */
      public static final int PROCESS_SERVICE_TTS_VALUE = 21;
      /**
       * <code>PROCESS_SERVICE_PRINTING = 22;</code>
       */
      public static final int PROCESS_SERVICE_PRINTING_VALUE = 22;
      /**
       * <code>PROCESS_SERVICE_QUARANTINE = 23;</code>
       */
      public static final int PROCESS_SERVICE_QUARANTINE_VALUE = 23;
      /**
       * <code>PROCESS_SERVICE_CROS_LOCALSEARCH = 24;</code>
       */
      public static final int PROCESS_SERVICE_CROS_LOCALSEARCH_VALUE = 24;
      /**
       * <code>PROCESS_SERVICE_CROS_ASSISTANT_AUDIO_DECODER = 25;</code>
       */
      public static final int PROCESS_SERVICE_CROS_ASSISTANT_AUDIO_DECODER_VALUE = 25;
      /**
       * <code>PROCESS_SERVICE_FILEUTIL = 26;</code>
       */
      public static final int PROCESS_SERVICE_FILEUTIL_VALUE = 26;
      /**
       * <code>PROCESS_SERVICE_PRINTCOMPOSITOR = 27;</code>
       */
      public static final int PROCESS_SERVICE_PRINTCOMPOSITOR_VALUE = 27;
      /**
       * <code>PROCESS_SERVICE_PAINTPREVIEW = 28;</code>
       */
      public static final int PROCESS_SERVICE_PAINTPREVIEW_VALUE = 28;
      /**
       * <code>PROCESS_SERVICE_SPEECHRECOGNITION = 29;</code>
       */
      public static final int PROCESS_SERVICE_SPEECHRECOGNITION_VALUE = 29;
      /**
       * <code>PROCESS_SERVICE_XRDEVICE = 30;</code>
       */
      public static final int PROCESS_SERVICE_XRDEVICE_VALUE = 30;
      /**
       * <code>PROCESS_SERVICE_READICON = 31;</code>
       */
      public static final int PROCESS_SERVICE_READICON_VALUE = 31;
      /**
       * <code>PROCESS_SERVICE_LANGUAGEDETECTION = 32;</code>
       */
      public static final int PROCESS_SERVICE_LANGUAGEDETECTION_VALUE = 32;
      /**
       * <code>PROCESS_SERVICE_SHARING = 33;</code>
       */
      public static final int PROCESS_SERVICE_SHARING_VALUE = 33;
      /**
       * <code>PROCESS_SERVICE_MEDIAPARSER = 34;</code>
       */
      public static final int PROCESS_SERVICE_MEDIAPARSER_VALUE = 34;
      /**
       * <code>PROCESS_SERVICE_QRCODEGENERATOR = 35;</code>
       */
      public static final int PROCESS_SERVICE_QRCODEGENERATOR_VALUE = 35;
      /**
       * <code>PROCESS_SERVICE_PROFILEIMPORT = 36;</code>
       */
      public static final int PROCESS_SERVICE_PROFILEIMPORT_VALUE = 36;
      /**
       * <code>PROCESS_SERVICE_IME = 37;</code>
       */
      public static final int PROCESS_SERVICE_IME_VALUE = 37;
      /**
       * <code>PROCESS_SERVICE_RECORDING = 38;</code>
       */
      public static final int PROCESS_SERVICE_RECORDING_VALUE = 38;
      /**
       * <code>PROCESS_SERVICE_SHAPEDETECTION = 39;</code>
       */
      public static final int PROCESS_SERVICE_SHAPEDETECTION_VALUE = 39;
      /**
       * <code>PROCESS_RENDERER_EXTENSION = 40;</code>
       */
      public static final int PROCESS_RENDERER_EXTENSION_VALUE = 40;


      public final int getNumber() {
        return value;
      }

      /**
       * @param value The numeric wire value of the corresponding enum entry.
       * @return The enum associated with the given numeric wire value.
       * @deprecated Use {@link #forNumber(int)} instead.
       */
      @java.lang.Deprecated
      public static ProcessType valueOf(int value) {
        return forNumber(value);
      }

      /**
       * @param value The numeric wire value of the corresponding enum entry.
       * @return The enum associated with the given numeric wire value.
       */
      public static ProcessType forNumber(int value) {
        switch (value) {
          case 0: return PROCESS_UNSPECIFIED;
          case 1: return PROCESS_BROWSER;
          case 2: return PROCESS_RENDERER;
          case 3: return PROCESS_UTILITY;
          case 4: return PROCESS_ZYGOTE;
          case 5: return PROCESS_SANDBOX_HELPER;
          case 6: return PROCESS_GPU;
          case 7: return PROCESS_PPAPI_PLUGIN;
          case 8: return PROCESS_PPAPI_BROKER;
          case 9: return PROCESS_SERVICE_NETWORK;
          case 10: return PROCESS_SERVICE_TRACING;
          case 11: return PROCESS_SERVICE_STORAGE;
          case 12: return PROCESS_SERVICE_AUDIO;
          case 13: return PROCESS_SERVICE_DATA_DECODER;
          case 14: return PROCESS_SERVICE_UTIL_WIN;
          case 15: return PROCESS_SERVICE_PROXY_RESOLVER;
          case 16: return PROCESS_SERVICE_CDM;
          case 17: return PROCESS_SERVICE_VIDEO_CAPTURE;
          case 18: return PROCESS_SERVICE_UNZIPPER;
          case 19: return PROCESS_SERVICE_MIRRORING;
          case 20: return PROCESS_SERVICE_FILEPATCHER;
          case 21: return PROCESS_SERVICE_TTS;
          case 22: return PROCESS_SERVICE_PRINTING;
          case 23: return PROCESS_SERVICE_QUARANTINE;
          case 24: return PROCESS_SERVICE_CROS_LOCALSEARCH;
          case 25: return PROCESS_SERVICE_CROS_ASSISTANT_AUDIO_DECODER;
          case 26: return PROCESS_SERVICE_FILEUTIL;
          case 27: return PROCESS_SERVICE_PRINTCOMPOSITOR;
          case 28: return PROCESS_SERVICE_PAINTPREVIEW;
          case 29: return PROCESS_SERVICE_SPEECHRECOGNITION;
          case 30: return PROCESS_SERVICE_XRDEVICE;
          case 31: return PROCESS_SERVICE_READICON;
          case 32: return PROCESS_SERVICE_LANGUAGEDETECTION;
          case 33: return PROCESS_SERVICE_SHARING;
          case 34: return PROCESS_SERVICE_MEDIAPARSER;
          case 35: return PROCESS_SERVICE_QRCODEGENERATOR;
          case 36: return PROCESS_SERVICE_PROFILEIMPORT;
          case 37: return PROCESS_SERVICE_IME;
          case 38: return PROCESS_SERVICE_RECORDING;
          case 39: return PROCESS_SERVICE_SHAPEDETECTION;
          case 40: return PROCESS_RENDERER_EXTENSION;
          default: return null;
        }
      }

      public static com.google.protobuf.Internal.EnumLiteMap<ProcessType>
          internalGetValueMap() {
        return internalValueMap;
      }
      private static final com.google.protobuf.Internal.EnumLiteMap<
          ProcessType> internalValueMap =
            new com.google.protobuf.Internal.EnumLiteMap<ProcessType>() {
              public ProcessType findValueByNumber(int number) {
                return ProcessType.forNumber(number);
              }
            };

      public final com.google.protobuf.Descriptors.EnumValueDescriptor
          getValueDescriptor() {
        return getDescriptor().getValues().get(ordinal());
      }
      public final com.google.protobuf.Descriptors.EnumDescriptor
          getDescriptorForType() {
        return getDescriptor();
      }
      public static final com.google.protobuf.Descriptors.EnumDescriptor
          getDescriptor() {
        return perfetto.protos.ChromeProcessDescriptorOuterClass.ChromeProcessDescriptor.getDescriptor().getEnumTypes().get(0);
      }

      private static final ProcessType[] VALUES = values();

      public static ProcessType valueOf(
          com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
        if (desc.getType() != getDescriptor()) {
          throw new java.lang.IllegalArgumentException(
            "EnumValueDescriptor is not for this type.");
        }
        return VALUES[desc.getIndex()];
      }

      private final int value;

      private ProcessType(int value) {
        this.value = value;
      }

      // @@protoc_insertion_point(enum_scope:perfetto.protos.ChromeProcessDescriptor.ProcessType)
    }

    private int bitField0_;
    public static final int PROCESS_TYPE_FIELD_NUMBER = 1;
    private int processType_ = 0;
    /**
     * <code>optional .perfetto.protos.ChromeProcessDescriptor.ProcessType process_type = 1;</code>
     * @return Whether the processType field is set.
     */
    @java.lang.Override public boolean hasProcessType() {
      return ((bitField0_ & 0x00000001) != 0);
    }
    /**
     * <code>optional .perfetto.protos.ChromeProcessDescriptor.ProcessType process_type = 1;</code>
     * @return The processType.
     */
    @java.lang.Override public perfetto.protos.ChromeProcessDescriptorOuterClass.ChromeProcessDescriptor.ProcessType getProcessType() {
      perfetto.protos.ChromeProcessDescriptorOuterClass.ChromeProcessDescriptor.ProcessType result = perfetto.protos.ChromeProcessDescriptorOuterClass.ChromeProcessDescriptor.ProcessType.forNumber(processType_);
      return result == null ? perfetto.protos.ChromeProcessDescriptorOuterClass.ChromeProcessDescriptor.ProcessType.PROCESS_UNSPECIFIED : result;
    }

    public static final int PROCESS_PRIORITY_FIELD_NUMBER = 2;
    private int processPriority_ = 0;
    /**
     * <code>optional int32 process_priority = 2;</code>
     * @return Whether the processPriority field is set.
     */
    @java.lang.Override
    public boolean hasProcessPriority() {
      return ((bitField0_ & 0x00000002) != 0);
    }
    /**
     * <code>optional int32 process_priority = 2;</code>
     * @return The processPriority.
     */
    @java.lang.Override
    public int getProcessPriority() {
      return processPriority_;
    }

    public static final int LEGACY_SORT_INDEX_FIELD_NUMBER = 3;
    private int legacySortIndex_ = 0;
    /**
     * <pre>
     * To support old UI. New UI should determine default sorting by process_type.
     * </pre>
     *
     * <code>optional int32 legacy_sort_index = 3;</code>
     * @return Whether the legacySortIndex field is set.
     */
    @java.lang.Override
    public boolean hasLegacySortIndex() {
      return ((bitField0_ & 0x00000004) != 0);
    }
    /**
     * <pre>
     * To support old UI. New UI should determine default sorting by process_type.
     * </pre>
     *
     * <code>optional int32 legacy_sort_index = 3;</code>
     * @return The legacySortIndex.
     */
    @java.lang.Override
    public int getLegacySortIndex() {
      return legacySortIndex_;
    }

    public static final int HOST_APP_PACKAGE_NAME_FIELD_NUMBER = 4;
    @SuppressWarnings("serial")
    private volatile java.lang.Object hostAppPackageName_ = "";
    /**
     * <pre>
     * Name of the hosting app for WebView. Used to match renderer processes to
     * their hosting apps.
     * </pre>
     *
     * <code>optional string host_app_package_name = 4;</code>
     * @return Whether the hostAppPackageName field is set.
     */
    @java.lang.Override
    public boolean hasHostAppPackageName() {
      return ((bitField0_ & 0x00000008) != 0);
    }
    /**
     * <pre>
     * Name of the hosting app for WebView. Used to match renderer processes to
     * their hosting apps.
     * </pre>
     *
     * <code>optional string host_app_package_name = 4;</code>
     * @return The hostAppPackageName.
     */
    @java.lang.Override
    public java.lang.String getHostAppPackageName() {
      java.lang.Object ref = hostAppPackageName_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        if (bs.isValidUtf8()) {
          hostAppPackageName_ = s;
        }
        return s;
      }
    }
    /**
     * <pre>
     * Name of the hosting app for WebView. Used to match renderer processes to
     * their hosting apps.
     * </pre>
     *
     * <code>optional string host_app_package_name = 4;</code>
     * @return The bytes for hostAppPackageName.
     */
    @java.lang.Override
    public com.google.protobuf.ByteString
        getHostAppPackageNameBytes() {
      java.lang.Object ref = hostAppPackageName_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        hostAppPackageName_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    public static final int CRASH_TRACE_ID_FIELD_NUMBER = 5;
    private long crashTraceId_ = 0L;
    /**
     * <pre>
     * The ID to link crashes to trace.
     * Notes:
     * * The ID is per process. So, each trace may contain many IDs, and you need
     *   to look for the ID from crashed process to find the crash report.
     * * Having a "chrome-trace-id" in crash doesn't necessarily mean we can
     *   get an uploaded trace, since uploads could have failed.
     * * On the other hand, if there was a crash during the session and trace was
     *   uploaded, it is very likely to find a crash report with the trace ID.
     * * This is not crash ID or trace ID. It is just a random 64-bit number
     *   recorded in both traces and crashes. It is possible to have collisions,
     *   though very rare.
     * </pre>
     *
     * <code>optional uint64 crash_trace_id = 5;</code>
     * @return Whether the crashTraceId field is set.
     */
    @java.lang.Override
    public boolean hasCrashTraceId() {
      return ((bitField0_ & 0x00000010) != 0);
    }
    /**
     * <pre>
     * The ID to link crashes to trace.
     * Notes:
     * * The ID is per process. So, each trace may contain many IDs, and you need
     *   to look for the ID from crashed process to find the crash report.
     * * Having a "chrome-trace-id" in crash doesn't necessarily mean we can
     *   get an uploaded trace, since uploads could have failed.
     * * On the other hand, if there was a crash during the session and trace was
     *   uploaded, it is very likely to find a crash report with the trace ID.
     * * This is not crash ID or trace ID. It is just a random 64-bit number
     *   recorded in both traces and crashes. It is possible to have collisions,
     *   though very rare.
     * </pre>
     *
     * <code>optional uint64 crash_trace_id = 5;</code>
     * @return The crashTraceId.
     */
    @java.lang.Override
    public long getCrashTraceId() {
      return crashTraceId_;
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (((bitField0_ & 0x00000001) != 0)) {
        output.writeEnum(1, processType_);
      }
      if (((bitField0_ & 0x00000002) != 0)) {
        output.writeInt32(2, processPriority_);
      }
      if (((bitField0_ & 0x00000004) != 0)) {
        output.writeInt32(3, legacySortIndex_);
      }
      if (((bitField0_ & 0x00000008) != 0)) {
        com.google.protobuf.GeneratedMessageV3.writeString(output, 4, hostAppPackageName_);
      }
      if (((bitField0_ & 0x00000010) != 0)) {
        output.writeUInt64(5, crashTraceId_);
      }
      getUnknownFields().writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) != 0)) {
        size += com.google.protobuf.CodedOutputStream
          .computeEnumSize(1, processType_);
      }
      if (((bitField0_ & 0x00000002) != 0)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(2, processPriority_);
      }
      if (((bitField0_ & 0x00000004) != 0)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(3, legacySortIndex_);
      }
      if (((bitField0_ & 0x00000008) != 0)) {
        size += com.google.protobuf.GeneratedMessageV3.computeStringSize(4, hostAppPackageName_);
      }
      if (((bitField0_ & 0x00000010) != 0)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt64Size(5, crashTraceId_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof perfetto.protos.ChromeProcessDescriptorOuterClass.ChromeProcessDescriptor)) {
        return super.equals(obj);
      }
      perfetto.protos.ChromeProcessDescriptorOuterClass.ChromeProcessDescriptor other = (perfetto.protos.ChromeProcessDescriptorOuterClass.ChromeProcessDescriptor) obj;

      if (hasProcessType() != other.hasProcessType()) return false;
      if (hasProcessType()) {
        if (processType_ != other.processType_) return false;
      }
      if (hasProcessPriority() != other.hasProcessPriority()) return false;
      if (hasProcessPriority()) {
        if (getProcessPriority()
            != other.getProcessPriority()) return false;
      }
      if (hasLegacySortIndex() != other.hasLegacySortIndex()) return false;
      if (hasLegacySortIndex()) {
        if (getLegacySortIndex()
            != other.getLegacySortIndex()) return false;
      }
      if (hasHostAppPackageName() != other.hasHostAppPackageName()) return false;
      if (hasHostAppPackageName()) {
        if (!getHostAppPackageName()
            .equals(other.getHostAppPackageName())) return false;
      }
      if (hasCrashTraceId() != other.hasCrashTraceId()) return false;
      if (hasCrashTraceId()) {
        if (getCrashTraceId()
            != other.getCrashTraceId()) return false;
      }
      if (!getUnknownFields().equals(other.getUnknownFields())) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      if (hasProcessType()) {
        hash = (37 * hash) + PROCESS_TYPE_FIELD_NUMBER;
        hash = (53 * hash) + processType_;
      }
      if (hasProcessPriority()) {
        hash = (37 * hash) + PROCESS_PRIORITY_FIELD_NUMBER;
        hash = (53 * hash) + getProcessPriority();
      }
      if (hasLegacySortIndex()) {
        hash = (37 * hash) + LEGACY_SORT_INDEX_FIELD_NUMBER;
        hash = (53 * hash) + getLegacySortIndex();
      }
      if (hasHostAppPackageName()) {
        hash = (37 * hash) + HOST_APP_PACKAGE_NAME_FIELD_NUMBER;
        hash = (53 * hash) + getHostAppPackageName().hashCode();
      }
      if (hasCrashTraceId()) {
        hash = (37 * hash) + CRASH_TRACE_ID_FIELD_NUMBER;
        hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
            getCrashTraceId());
      }
      hash = (29 * hash) + getUnknownFields().hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static perfetto.protos.ChromeProcessDescriptorOuterClass.ChromeProcessDescriptor parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static perfetto.protos.ChromeProcessDescriptorOuterClass.ChromeProcessDescriptor parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static perfetto.protos.ChromeProcessDescriptorOuterClass.ChromeProcessDescriptor parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static perfetto.protos.ChromeProcessDescriptorOuterClass.ChromeProcessDescriptor parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static perfetto.protos.ChromeProcessDescriptorOuterClass.ChromeProcessDescriptor parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static perfetto.protos.ChromeProcessDescriptorOuterClass.ChromeProcessDescriptor parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static perfetto.protos.ChromeProcessDescriptorOuterClass.ChromeProcessDescriptor parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static perfetto.protos.ChromeProcessDescriptorOuterClass.ChromeProcessDescriptor parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static perfetto.protos.ChromeProcessDescriptorOuterClass.ChromeProcessDescriptor parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static perfetto.protos.ChromeProcessDescriptorOuterClass.ChromeProcessDescriptor parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static perfetto.protos.ChromeProcessDescriptorOuterClass.ChromeProcessDescriptor parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static perfetto.protos.ChromeProcessDescriptorOuterClass.ChromeProcessDescriptor parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(perfetto.protos.ChromeProcessDescriptorOuterClass.ChromeProcessDescriptor prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * <pre>
     * Describes the attributes for a Chrome process. Must be paired with a
     * ProcessDescriptor in the same TrackDescriptor.
     * Next id: 6.
     * </pre>
     *
     * Protobuf type {@code perfetto.protos.ChromeProcessDescriptor}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:perfetto.protos.ChromeProcessDescriptor)
        perfetto.protos.ChromeProcessDescriptorOuterClass.ChromeProcessDescriptorOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return perfetto.protos.ChromeProcessDescriptorOuterClass.internal_static_perfetto_protos_ChromeProcessDescriptor_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return perfetto.protos.ChromeProcessDescriptorOuterClass.internal_static_perfetto_protos_ChromeProcessDescriptor_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                perfetto.protos.ChromeProcessDescriptorOuterClass.ChromeProcessDescriptor.class, perfetto.protos.ChromeProcessDescriptorOuterClass.ChromeProcessDescriptor.Builder.class);
      }

      // Construct using perfetto.protos.ChromeProcessDescriptorOuterClass.ChromeProcessDescriptor.newBuilder()
      private Builder() {

      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);

      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        bitField0_ = 0;
        processType_ = 0;
        processPriority_ = 0;
        legacySortIndex_ = 0;
        hostAppPackageName_ = "";
        crashTraceId_ = 0L;
        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return perfetto.protos.ChromeProcessDescriptorOuterClass.internal_static_perfetto_protos_ChromeProcessDescriptor_descriptor;
      }

      @java.lang.Override
      public perfetto.protos.ChromeProcessDescriptorOuterClass.ChromeProcessDescriptor getDefaultInstanceForType() {
        return perfetto.protos.ChromeProcessDescriptorOuterClass.ChromeProcessDescriptor.getDefaultInstance();
      }

      @java.lang.Override
      public perfetto.protos.ChromeProcessDescriptorOuterClass.ChromeProcessDescriptor build() {
        perfetto.protos.ChromeProcessDescriptorOuterClass.ChromeProcessDescriptor result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public perfetto.protos.ChromeProcessDescriptorOuterClass.ChromeProcessDescriptor buildPartial() {
        perfetto.protos.ChromeProcessDescriptorOuterClass.ChromeProcessDescriptor result = new perfetto.protos.ChromeProcessDescriptorOuterClass.ChromeProcessDescriptor(this);
        if (bitField0_ != 0) { buildPartial0(result); }
        onBuilt();
        return result;
      }

      private void buildPartial0(perfetto.protos.ChromeProcessDescriptorOuterClass.ChromeProcessDescriptor result) {
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) != 0)) {
          result.processType_ = processType_;
          to_bitField0_ |= 0x00000001;
        }
        if (((from_bitField0_ & 0x00000002) != 0)) {
          result.processPriority_ = processPriority_;
          to_bitField0_ |= 0x00000002;
        }
        if (((from_bitField0_ & 0x00000004) != 0)) {
          result.legacySortIndex_ = legacySortIndex_;
          to_bitField0_ |= 0x00000004;
        }
        if (((from_bitField0_ & 0x00000008) != 0)) {
          result.hostAppPackageName_ = hostAppPackageName_;
          to_bitField0_ |= 0x00000008;
        }
        if (((from_bitField0_ & 0x00000010) != 0)) {
          result.crashTraceId_ = crashTraceId_;
          to_bitField0_ |= 0x00000010;
        }
        result.bitField0_ |= to_bitField0_;
      }

      @java.lang.Override
      public Builder clone() {
        return super.clone();
      }
      @java.lang.Override
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.setField(field, value);
      }
      @java.lang.Override
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return super.clearField(field);
      }
      @java.lang.Override
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return super.clearOneof(oneof);
      }
      @java.lang.Override
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, java.lang.Object value) {
        return super.setRepeatedField(field, index, value);
      }
      @java.lang.Override
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.addRepeatedField(field, value);
      }
      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof perfetto.protos.ChromeProcessDescriptorOuterClass.ChromeProcessDescriptor) {
          return mergeFrom((perfetto.protos.ChromeProcessDescriptorOuterClass.ChromeProcessDescriptor)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(perfetto.protos.ChromeProcessDescriptorOuterClass.ChromeProcessDescriptor other) {
        if (other == perfetto.protos.ChromeProcessDescriptorOuterClass.ChromeProcessDescriptor.getDefaultInstance()) return this;
        if (other.hasProcessType()) {
          setProcessType(other.getProcessType());
        }
        if (other.hasProcessPriority()) {
          setProcessPriority(other.getProcessPriority());
        }
        if (other.hasLegacySortIndex()) {
          setLegacySortIndex(other.getLegacySortIndex());
        }
        if (other.hasHostAppPackageName()) {
          hostAppPackageName_ = other.hostAppPackageName_;
          bitField0_ |= 0x00000008;
          onChanged();
        }
        if (other.hasCrashTraceId()) {
          setCrashTraceId(other.getCrashTraceId());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        if (extensionRegistry == null) {
          throw new java.lang.NullPointerException();
        }
        try {
          boolean done = false;
          while (!done) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                done = true;
                break;
              case 8: {
                int tmpRaw = input.readEnum();
                perfetto.protos.ChromeProcessDescriptorOuterClass.ChromeProcessDescriptor.ProcessType tmpValue =
                    perfetto.protos.ChromeProcessDescriptorOuterClass.ChromeProcessDescriptor.ProcessType.forNumber(tmpRaw);
                if (tmpValue == null) {
                  mergeUnknownVarintField(1, tmpRaw);
                } else {
                  processType_ = tmpRaw;
                  bitField0_ |= 0x00000001;
                }
                break;
              } // case 8
              case 16: {
                processPriority_ = input.readInt32();
                bitField0_ |= 0x00000002;
                break;
              } // case 16
              case 24: {
                legacySortIndex_ = input.readInt32();
                bitField0_ |= 0x00000004;
                break;
              } // case 24
              case 34: {
                hostAppPackageName_ = input.readBytes();
                bitField0_ |= 0x00000008;
                break;
              } // case 34
              case 40: {
                crashTraceId_ = input.readUInt64();
                bitField0_ |= 0x00000010;
                break;
              } // case 40
              default: {
                if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                  done = true; // was an endgroup tag
                }
                break;
              } // default:
            } // switch (tag)
          } // while (!done)
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.unwrapIOException();
        } finally {
          onChanged();
        } // finally
        return this;
      }
      private int bitField0_;

      private int processType_ = 0;
      /**
       * <code>optional .perfetto.protos.ChromeProcessDescriptor.ProcessType process_type = 1;</code>
       * @return Whether the processType field is set.
       */
      @java.lang.Override public boolean hasProcessType() {
        return ((bitField0_ & 0x00000001) != 0);
      }
      /**
       * <code>optional .perfetto.protos.ChromeProcessDescriptor.ProcessType process_type = 1;</code>
       * @return The processType.
       */
      @java.lang.Override
      public perfetto.protos.ChromeProcessDescriptorOuterClass.ChromeProcessDescriptor.ProcessType getProcessType() {
        perfetto.protos.ChromeProcessDescriptorOuterClass.ChromeProcessDescriptor.ProcessType result = perfetto.protos.ChromeProcessDescriptorOuterClass.ChromeProcessDescriptor.ProcessType.forNumber(processType_);
        return result == null ? perfetto.protos.ChromeProcessDescriptorOuterClass.ChromeProcessDescriptor.ProcessType.PROCESS_UNSPECIFIED : result;
      }
      /**
       * <code>optional .perfetto.protos.ChromeProcessDescriptor.ProcessType process_type = 1;</code>
       * @param value The processType to set.
       * @return This builder for chaining.
       */
      public Builder setProcessType(perfetto.protos.ChromeProcessDescriptorOuterClass.ChromeProcessDescriptor.ProcessType value) {
        if (value == null) {
          throw new NullPointerException();
        }
        bitField0_ |= 0x00000001;
        processType_ = value.getNumber();
        onChanged();
        return this;
      }
      /**
       * <code>optional .perfetto.protos.ChromeProcessDescriptor.ProcessType process_type = 1;</code>
       * @return This builder for chaining.
       */
      public Builder clearProcessType() {
        bitField0_ = (bitField0_ & ~0x00000001);
        processType_ = 0;
        onChanged();
        return this;
      }

      private int processPriority_ ;
      /**
       * <code>optional int32 process_priority = 2;</code>
       * @return Whether the processPriority field is set.
       */
      @java.lang.Override
      public boolean hasProcessPriority() {
        return ((bitField0_ & 0x00000002) != 0);
      }
      /**
       * <code>optional int32 process_priority = 2;</code>
       * @return The processPriority.
       */
      @java.lang.Override
      public int getProcessPriority() {
        return processPriority_;
      }
      /**
       * <code>optional int32 process_priority = 2;</code>
       * @param value The processPriority to set.
       * @return This builder for chaining.
       */
      public Builder setProcessPriority(int value) {
        
        processPriority_ = value;
        bitField0_ |= 0x00000002;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 process_priority = 2;</code>
       * @return This builder for chaining.
       */
      public Builder clearProcessPriority() {
        bitField0_ = (bitField0_ & ~0x00000002);
        processPriority_ = 0;
        onChanged();
        return this;
      }

      private int legacySortIndex_ ;
      /**
       * <pre>
       * To support old UI. New UI should determine default sorting by process_type.
       * </pre>
       *
       * <code>optional int32 legacy_sort_index = 3;</code>
       * @return Whether the legacySortIndex field is set.
       */
      @java.lang.Override
      public boolean hasLegacySortIndex() {
        return ((bitField0_ & 0x00000004) != 0);
      }
      /**
       * <pre>
       * To support old UI. New UI should determine default sorting by process_type.
       * </pre>
       *
       * <code>optional int32 legacy_sort_index = 3;</code>
       * @return The legacySortIndex.
       */
      @java.lang.Override
      public int getLegacySortIndex() {
        return legacySortIndex_;
      }
      /**
       * <pre>
       * To support old UI. New UI should determine default sorting by process_type.
       * </pre>
       *
       * <code>optional int32 legacy_sort_index = 3;</code>
       * @param value The legacySortIndex to set.
       * @return This builder for chaining.
       */
      public Builder setLegacySortIndex(int value) {
        
        legacySortIndex_ = value;
        bitField0_ |= 0x00000004;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * To support old UI. New UI should determine default sorting by process_type.
       * </pre>
       *
       * <code>optional int32 legacy_sort_index = 3;</code>
       * @return This builder for chaining.
       */
      public Builder clearLegacySortIndex() {
        bitField0_ = (bitField0_ & ~0x00000004);
        legacySortIndex_ = 0;
        onChanged();
        return this;
      }

      private java.lang.Object hostAppPackageName_ = "";
      /**
       * <pre>
       * Name of the hosting app for WebView. Used to match renderer processes to
       * their hosting apps.
       * </pre>
       *
       * <code>optional string host_app_package_name = 4;</code>
       * @return Whether the hostAppPackageName field is set.
       */
      public boolean hasHostAppPackageName() {
        return ((bitField0_ & 0x00000008) != 0);
      }
      /**
       * <pre>
       * Name of the hosting app for WebView. Used to match renderer processes to
       * their hosting apps.
       * </pre>
       *
       * <code>optional string host_app_package_name = 4;</code>
       * @return The hostAppPackageName.
       */
      public java.lang.String getHostAppPackageName() {
        java.lang.Object ref = hostAppPackageName_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          if (bs.isValidUtf8()) {
            hostAppPackageName_ = s;
          }
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <pre>
       * Name of the hosting app for WebView. Used to match renderer processes to
       * their hosting apps.
       * </pre>
       *
       * <code>optional string host_app_package_name = 4;</code>
       * @return The bytes for hostAppPackageName.
       */
      public com.google.protobuf.ByteString
          getHostAppPackageNameBytes() {
        java.lang.Object ref = hostAppPackageName_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          hostAppPackageName_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <pre>
       * Name of the hosting app for WebView. Used to match renderer processes to
       * their hosting apps.
       * </pre>
       *
       * <code>optional string host_app_package_name = 4;</code>
       * @param value The hostAppPackageName to set.
       * @return This builder for chaining.
       */
      public Builder setHostAppPackageName(
          java.lang.String value) {
        if (value == null) { throw new NullPointerException(); }
        hostAppPackageName_ = value;
        bitField0_ |= 0x00000008;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Name of the hosting app for WebView. Used to match renderer processes to
       * their hosting apps.
       * </pre>
       *
       * <code>optional string host_app_package_name = 4;</code>
       * @return This builder for chaining.
       */
      public Builder clearHostAppPackageName() {
        hostAppPackageName_ = getDefaultInstance().getHostAppPackageName();
        bitField0_ = (bitField0_ & ~0x00000008);
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Name of the hosting app for WebView. Used to match renderer processes to
       * their hosting apps.
       * </pre>
       *
       * <code>optional string host_app_package_name = 4;</code>
       * @param value The bytes for hostAppPackageName to set.
       * @return This builder for chaining.
       */
      public Builder setHostAppPackageNameBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) { throw new NullPointerException(); }
        hostAppPackageName_ = value;
        bitField0_ |= 0x00000008;
        onChanged();
        return this;
      }

      private long crashTraceId_ ;
      /**
       * <pre>
       * The ID to link crashes to trace.
       * Notes:
       * * The ID is per process. So, each trace may contain many IDs, and you need
       *   to look for the ID from crashed process to find the crash report.
       * * Having a "chrome-trace-id" in crash doesn't necessarily mean we can
       *   get an uploaded trace, since uploads could have failed.
       * * On the other hand, if there was a crash during the session and trace was
       *   uploaded, it is very likely to find a crash report with the trace ID.
       * * This is not crash ID or trace ID. It is just a random 64-bit number
       *   recorded in both traces and crashes. It is possible to have collisions,
       *   though very rare.
       * </pre>
       *
       * <code>optional uint64 crash_trace_id = 5;</code>
       * @return Whether the crashTraceId field is set.
       */
      @java.lang.Override
      public boolean hasCrashTraceId() {
        return ((bitField0_ & 0x00000010) != 0);
      }
      /**
       * <pre>
       * The ID to link crashes to trace.
       * Notes:
       * * The ID is per process. So, each trace may contain many IDs, and you need
       *   to look for the ID from crashed process to find the crash report.
       * * Having a "chrome-trace-id" in crash doesn't necessarily mean we can
       *   get an uploaded trace, since uploads could have failed.
       * * On the other hand, if there was a crash during the session and trace was
       *   uploaded, it is very likely to find a crash report with the trace ID.
       * * This is not crash ID or trace ID. It is just a random 64-bit number
       *   recorded in both traces and crashes. It is possible to have collisions,
       *   though very rare.
       * </pre>
       *
       * <code>optional uint64 crash_trace_id = 5;</code>
       * @return The crashTraceId.
       */
      @java.lang.Override
      public long getCrashTraceId() {
        return crashTraceId_;
      }
      /**
       * <pre>
       * The ID to link crashes to trace.
       * Notes:
       * * The ID is per process. So, each trace may contain many IDs, and you need
       *   to look for the ID from crashed process to find the crash report.
       * * Having a "chrome-trace-id" in crash doesn't necessarily mean we can
       *   get an uploaded trace, since uploads could have failed.
       * * On the other hand, if there was a crash during the session and trace was
       *   uploaded, it is very likely to find a crash report with the trace ID.
       * * This is not crash ID or trace ID. It is just a random 64-bit number
       *   recorded in both traces and crashes. It is possible to have collisions,
       *   though very rare.
       * </pre>
       *
       * <code>optional uint64 crash_trace_id = 5;</code>
       * @param value The crashTraceId to set.
       * @return This builder for chaining.
       */
      public Builder setCrashTraceId(long value) {
        
        crashTraceId_ = value;
        bitField0_ |= 0x00000010;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * The ID to link crashes to trace.
       * Notes:
       * * The ID is per process. So, each trace may contain many IDs, and you need
       *   to look for the ID from crashed process to find the crash report.
       * * Having a "chrome-trace-id" in crash doesn't necessarily mean we can
       *   get an uploaded trace, since uploads could have failed.
       * * On the other hand, if there was a crash during the session and trace was
       *   uploaded, it is very likely to find a crash report with the trace ID.
       * * This is not crash ID or trace ID. It is just a random 64-bit number
       *   recorded in both traces and crashes. It is possible to have collisions,
       *   though very rare.
       * </pre>
       *
       * <code>optional uint64 crash_trace_id = 5;</code>
       * @return This builder for chaining.
       */
      public Builder clearCrashTraceId() {
        bitField0_ = (bitField0_ & ~0x00000010);
        crashTraceId_ = 0L;
        onChanged();
        return this;
      }
      @java.lang.Override
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      @java.lang.Override
      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:perfetto.protos.ChromeProcessDescriptor)
    }

    // @@protoc_insertion_point(class_scope:perfetto.protos.ChromeProcessDescriptor)
    private static final perfetto.protos.ChromeProcessDescriptorOuterClass.ChromeProcessDescriptor DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new perfetto.protos.ChromeProcessDescriptorOuterClass.ChromeProcessDescriptor();
    }

    public static perfetto.protos.ChromeProcessDescriptorOuterClass.ChromeProcessDescriptor getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    @java.lang.Deprecated public static final com.google.protobuf.Parser<ChromeProcessDescriptor>
        PARSER = new com.google.protobuf.AbstractParser<ChromeProcessDescriptor>() {
      @java.lang.Override
      public ChromeProcessDescriptor parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        Builder builder = newBuilder();
        try {
          builder.mergeFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.setUnfinishedMessage(builder.buildPartial());
        } catch (com.google.protobuf.UninitializedMessageException e) {
          throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
        } catch (java.io.IOException e) {
          throw new com.google.protobuf.InvalidProtocolBufferException(e)
              .setUnfinishedMessage(builder.buildPartial());
        }
        return builder.buildPartial();
      }
    };

    public static com.google.protobuf.Parser<ChromeProcessDescriptor> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<ChromeProcessDescriptor> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public perfetto.protos.ChromeProcessDescriptorOuterClass.ChromeProcessDescriptor getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_perfetto_protos_ChromeProcessDescriptor_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_perfetto_protos_ChromeProcessDescriptor_fieldAccessorTable;

  public static com.google.protobuf.Descriptors.FileDescriptor
      getDescriptor() {
    return descriptor;
  }
  private static  com.google.protobuf.Descriptors.FileDescriptor
      descriptor;
  static {
    java.lang.String[] descriptorData = {
      "\nAprotos/perfetto/trace/track_event/chro" +
      "me_process_descriptor.proto\022\017perfetto.pr" +
      "otos\"\277\013\n\027ChromeProcessDescriptor\022J\n\014proc" +
      "ess_type\030\001 \001(\01624.perfetto.protos.ChromeP" +
      "rocessDescriptor.ProcessType\022\030\n\020process_" +
      "priority\030\002 \001(\005\022\031\n\021legacy_sort_index\030\003 \001(" +
      "\005\022\035\n\025host_app_package_name\030\004 \001(\t\022\026\n\016cras" +
      "h_trace_id\030\005 \001(\004\"\353\t\n\013ProcessType\022\027\n\023PROC" +
      "ESS_UNSPECIFIED\020\000\022\023\n\017PROCESS_BROWSER\020\001\022\024" +
      "\n\020PROCESS_RENDERER\020\002\022\023\n\017PROCESS_UTILITY\020" +
      "\003\022\022\n\016PROCESS_ZYGOTE\020\004\022\032\n\026PROCESS_SANDBOX" +
      "_HELPER\020\005\022\017\n\013PROCESS_GPU\020\006\022\030\n\024PROCESS_PP" +
      "API_PLUGIN\020\007\022\030\n\024PROCESS_PPAPI_BROKER\020\010\022\033" +
      "\n\027PROCESS_SERVICE_NETWORK\020\t\022\033\n\027PROCESS_S" +
      "ERVICE_TRACING\020\n\022\033\n\027PROCESS_SERVICE_STOR" +
      "AGE\020\013\022\031\n\025PROCESS_SERVICE_AUDIO\020\014\022 \n\034PROC" +
      "ESS_SERVICE_DATA_DECODER\020\r\022\034\n\030PROCESS_SE" +
      "RVICE_UTIL_WIN\020\016\022\"\n\036PROCESS_SERVICE_PROX" +
      "Y_RESOLVER\020\017\022\027\n\023PROCESS_SERVICE_CDM\020\020\022!\n" +
      "\035PROCESS_SERVICE_VIDEO_CAPTURE\020\021\022\034\n\030PROC" +
      "ESS_SERVICE_UNZIPPER\020\022\022\035\n\031PROCESS_SERVIC" +
      "E_MIRRORING\020\023\022\037\n\033PROCESS_SERVICE_FILEPAT" +
      "CHER\020\024\022\027\n\023PROCESS_SERVICE_TTS\020\025\022\034\n\030PROCE" +
      "SS_SERVICE_PRINTING\020\026\022\036\n\032PROCESS_SERVICE" +
      "_QUARANTINE\020\027\022$\n PROCESS_SERVICE_CROS_LO" +
      "CALSEARCH\020\030\0220\n,PROCESS_SERVICE_CROS_ASSI" +
      "STANT_AUDIO_DECODER\020\031\022\034\n\030PROCESS_SERVICE" +
      "_FILEUTIL\020\032\022#\n\037PROCESS_SERVICE_PRINTCOMP" +
      "OSITOR\020\033\022 \n\034PROCESS_SERVICE_PAINTPREVIEW" +
      "\020\034\022%\n!PROCESS_SERVICE_SPEECHRECOGNITION\020" +
      "\035\022\034\n\030PROCESS_SERVICE_XRDEVICE\020\036\022\034\n\030PROCE" +
      "SS_SERVICE_READICON\020\037\022%\n!PROCESS_SERVICE" +
      "_LANGUAGEDETECTION\020 \022\033\n\027PROCESS_SERVICE_" +
      "SHARING\020!\022\037\n\033PROCESS_SERVICE_MEDIAPARSER" +
      "\020\"\022#\n\037PROCESS_SERVICE_QRCODEGENERATOR\020#\022" +
      "!\n\035PROCESS_SERVICE_PROFILEIMPORT\020$\022\027\n\023PR" +
      "OCESS_SERVICE_IME\020%\022\035\n\031PROCESS_SERVICE_R" +
      "ECORDING\020&\022\"\n\036PROCESS_SERVICE_SHAPEDETEC" +
      "TION\020\'\022\036\n\032PROCESS_RENDERER_EXTENSION\020("
    };
    descriptor = com.google.protobuf.Descriptors.FileDescriptor
      .internalBuildGeneratedFileFrom(descriptorData,
        new com.google.protobuf.Descriptors.FileDescriptor[] {
        });
    internal_static_perfetto_protos_ChromeProcessDescriptor_descriptor =
      getDescriptor().getMessageTypes().get(0);
    internal_static_perfetto_protos_ChromeProcessDescriptor_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_perfetto_protos_ChromeProcessDescriptor_descriptor,
        new java.lang.String[] { "ProcessType", "ProcessPriority", "LegacySortIndex", "HostAppPackageName", "CrashTraceId", });
  }

  // @@protoc_insertion_point(outer_class_scope)
}
