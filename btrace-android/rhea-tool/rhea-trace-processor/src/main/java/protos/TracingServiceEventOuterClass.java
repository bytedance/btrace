// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: protos/perfetto/trace/perfetto/tracing_service_event.proto

package perfetto.protos;

public final class TracingServiceEventOuterClass {
  private TracingServiceEventOuterClass() {}
  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistryLite registry) {
  }

  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistry registry) {
    registerAllExtensions(
        (com.google.protobuf.ExtensionRegistryLite) registry);
  }
  public interface TracingServiceEventOrBuilder extends
      // @@protoc_insertion_point(interface_extends:perfetto.protos.TracingServiceEvent)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <pre>
     * Emitted when we start tracing and specifically, this will be before any
     * producer is notified about the existence of this trace. This is always
     * emitted before the all_data_sources_started event. This event is also
     * guaranteed to be seen (byte-offset wise) before any data packets from
     * producers.
     * </pre>
     *
     * <code>bool tracing_started = 2;</code>
     * @return Whether the tracingStarted field is set.
     */
    boolean hasTracingStarted();
    /**
     * <pre>
     * Emitted when we start tracing and specifically, this will be before any
     * producer is notified about the existence of this trace. This is always
     * emitted before the all_data_sources_started event. This event is also
     * guaranteed to be seen (byte-offset wise) before any data packets from
     * producers.
     * </pre>
     *
     * <code>bool tracing_started = 2;</code>
     * @return The tracingStarted.
     */
    boolean getTracingStarted();

    /**
     * <pre>
     * Emitted after all data sources saw the start event and ACKed it.
     * This identifies the point in time when it's safe to assume that all data
     * sources have been recording events.
     * </pre>
     *
     * <code>bool all_data_sources_started = 1;</code>
     * @return Whether the allDataSourcesStarted field is set.
     */
    boolean hasAllDataSourcesStarted();
    /**
     * <pre>
     * Emitted after all data sources saw the start event and ACKed it.
     * This identifies the point in time when it's safe to assume that all data
     * sources have been recording events.
     * </pre>
     *
     * <code>bool all_data_sources_started = 1;</code>
     * @return The allDataSourcesStarted.
     */
    boolean getAllDataSourcesStarted();

    /**
     * <pre>
     * Emitted when all data sources have been flushed successfully or with an
     * error (including timeouts). This can generally happen many times over the
     * course of the trace.
     * </pre>
     *
     * <code>bool all_data_sources_flushed = 3;</code>
     * @return Whether the allDataSourcesFlushed field is set.
     */
    boolean hasAllDataSourcesFlushed();
    /**
     * <pre>
     * Emitted when all data sources have been flushed successfully or with an
     * error (including timeouts). This can generally happen many times over the
     * course of the trace.
     * </pre>
     *
     * <code>bool all_data_sources_flushed = 3;</code>
     * @return The allDataSourcesFlushed.
     */
    boolean getAllDataSourcesFlushed();

    /**
     * <pre>
     * Emitted when reading back the central tracing buffers has been completed.
     * If |write_into_file| is specified, this can happen many times over the
     * course of the trace.
     * </pre>
     *
     * <code>bool read_tracing_buffers_completed = 4;</code>
     * @return Whether the readTracingBuffersCompleted field is set.
     */
    boolean hasReadTracingBuffersCompleted();
    /**
     * <pre>
     * Emitted when reading back the central tracing buffers has been completed.
     * If |write_into_file| is specified, this can happen many times over the
     * course of the trace.
     * </pre>
     *
     * <code>bool read_tracing_buffers_completed = 4;</code>
     * @return The readTracingBuffersCompleted.
     */
    boolean getReadTracingBuffersCompleted();

    /**
     * <pre>
     * Emitted after tracing has been disabled and specifically, this will be
     * after all packets from producers have been included in the central
     * tracing buffer.
     * </pre>
     *
     * <code>bool tracing_disabled = 5;</code>
     * @return Whether the tracingDisabled field is set.
     */
    boolean hasTracingDisabled();
    /**
     * <pre>
     * Emitted after tracing has been disabled and specifically, this will be
     * after all packets from producers have been included in the central
     * tracing buffer.
     * </pre>
     *
     * <code>bool tracing_disabled = 5;</code>
     * @return The tracingDisabled.
     */
    boolean getTracingDisabled();

    /**
     * <pre>
     * Emitted if perfetto --save-for-bugreport was invoked while the current
     * tracing session was running and it had the highest bugreport_score. In
     * this case the original consumer will see a nearly empty trace, because
     * the contents are routed onto the bugreport file. This event flags the
     * situation explicitly. Traces that contain this marker should be discarded
     * by test infrastructures / pipelines.
     * </pre>
     *
     * <code>bool seized_for_bugreport = 6;</code>
     * @return Whether the seizedForBugreport field is set.
     */
    boolean hasSeizedForBugreport();
    /**
     * <pre>
     * Emitted if perfetto --save-for-bugreport was invoked while the current
     * tracing session was running and it had the highest bugreport_score. In
     * this case the original consumer will see a nearly empty trace, because
     * the contents are routed onto the bugreport file. This event flags the
     * situation explicitly. Traces that contain this marker should be discarded
     * by test infrastructures / pipelines.
     * </pre>
     *
     * <code>bool seized_for_bugreport = 6;</code>
     * @return The seizedForBugreport.
     */
    boolean getSeizedForBugreport();

    public perfetto.protos.TracingServiceEventOuterClass.TracingServiceEvent.EventTypeCase getEventTypeCase();
  }
  /**
   * <pre>
   * Events emitted by the tracing service.
   * </pre>
   *
   * Protobuf type {@code perfetto.protos.TracingServiceEvent}
   */
  public static final class TracingServiceEvent extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:perfetto.protos.TracingServiceEvent)
      TracingServiceEventOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use TracingServiceEvent.newBuilder() to construct.
    private TracingServiceEvent(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private TracingServiceEvent() {
    }

    @java.lang.Override
    @SuppressWarnings({"unused"})
    protected java.lang.Object newInstance(
        UnusedPrivateParameter unused) {
      return new TracingServiceEvent();
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return perfetto.protos.TracingServiceEventOuterClass.internal_static_perfetto_protos_TracingServiceEvent_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return perfetto.protos.TracingServiceEventOuterClass.internal_static_perfetto_protos_TracingServiceEvent_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              perfetto.protos.TracingServiceEventOuterClass.TracingServiceEvent.class, perfetto.protos.TracingServiceEventOuterClass.TracingServiceEvent.Builder.class);
    }

    private int bitField0_;
    private int eventTypeCase_ = 0;
    private java.lang.Object eventType_;
    public enum EventTypeCase
        implements com.google.protobuf.Internal.EnumLite,
            com.google.protobuf.AbstractMessage.InternalOneOfEnum {
      TRACING_STARTED(2),
      ALL_DATA_SOURCES_STARTED(1),
      ALL_DATA_SOURCES_FLUSHED(3),
      READ_TRACING_BUFFERS_COMPLETED(4),
      TRACING_DISABLED(5),
      SEIZED_FOR_BUGREPORT(6),
      EVENTTYPE_NOT_SET(0);
      private final int value;
      private EventTypeCase(int value) {
        this.value = value;
      }
      /**
       * @param value The number of the enum to look for.
       * @return The enum associated with the given number.
       * @deprecated Use {@link #forNumber(int)} instead.
       */
      @java.lang.Deprecated
      public static EventTypeCase valueOf(int value) {
        return forNumber(value);
      }

      public static EventTypeCase forNumber(int value) {
        switch (value) {
          case 2: return TRACING_STARTED;
          case 1: return ALL_DATA_SOURCES_STARTED;
          case 3: return ALL_DATA_SOURCES_FLUSHED;
          case 4: return READ_TRACING_BUFFERS_COMPLETED;
          case 5: return TRACING_DISABLED;
          case 6: return SEIZED_FOR_BUGREPORT;
          case 0: return EVENTTYPE_NOT_SET;
          default: return null;
        }
      }
      public int getNumber() {
        return this.value;
      }
    };

    public EventTypeCase
    getEventTypeCase() {
      return EventTypeCase.forNumber(
          eventTypeCase_);
    }

    public static final int TRACING_STARTED_FIELD_NUMBER = 2;
    /**
     * <pre>
     * Emitted when we start tracing and specifically, this will be before any
     * producer is notified about the existence of this trace. This is always
     * emitted before the all_data_sources_started event. This event is also
     * guaranteed to be seen (byte-offset wise) before any data packets from
     * producers.
     * </pre>
     *
     * <code>bool tracing_started = 2;</code>
     * @return Whether the tracingStarted field is set.
     */
    @java.lang.Override
    public boolean hasTracingStarted() {
      return eventTypeCase_ == 2;
    }
    /**
     * <pre>
     * Emitted when we start tracing and specifically, this will be before any
     * producer is notified about the existence of this trace. This is always
     * emitted before the all_data_sources_started event. This event is also
     * guaranteed to be seen (byte-offset wise) before any data packets from
     * producers.
     * </pre>
     *
     * <code>bool tracing_started = 2;</code>
     * @return The tracingStarted.
     */
    @java.lang.Override
    public boolean getTracingStarted() {
      if (eventTypeCase_ == 2) {
        return (java.lang.Boolean) eventType_;
      }
      return false;
    }

    public static final int ALL_DATA_SOURCES_STARTED_FIELD_NUMBER = 1;
    /**
     * <pre>
     * Emitted after all data sources saw the start event and ACKed it.
     * This identifies the point in time when it's safe to assume that all data
     * sources have been recording events.
     * </pre>
     *
     * <code>bool all_data_sources_started = 1;</code>
     * @return Whether the allDataSourcesStarted field is set.
     */
    @java.lang.Override
    public boolean hasAllDataSourcesStarted() {
      return eventTypeCase_ == 1;
    }
    /**
     * <pre>
     * Emitted after all data sources saw the start event and ACKed it.
     * This identifies the point in time when it's safe to assume that all data
     * sources have been recording events.
     * </pre>
     *
     * <code>bool all_data_sources_started = 1;</code>
     * @return The allDataSourcesStarted.
     */
    @java.lang.Override
    public boolean getAllDataSourcesStarted() {
      if (eventTypeCase_ == 1) {
        return (java.lang.Boolean) eventType_;
      }
      return false;
    }

    public static final int ALL_DATA_SOURCES_FLUSHED_FIELD_NUMBER = 3;
    /**
     * <pre>
     * Emitted when all data sources have been flushed successfully or with an
     * error (including timeouts). This can generally happen many times over the
     * course of the trace.
     * </pre>
     *
     * <code>bool all_data_sources_flushed = 3;</code>
     * @return Whether the allDataSourcesFlushed field is set.
     */
    @java.lang.Override
    public boolean hasAllDataSourcesFlushed() {
      return eventTypeCase_ == 3;
    }
    /**
     * <pre>
     * Emitted when all data sources have been flushed successfully or with an
     * error (including timeouts). This can generally happen many times over the
     * course of the trace.
     * </pre>
     *
     * <code>bool all_data_sources_flushed = 3;</code>
     * @return The allDataSourcesFlushed.
     */
    @java.lang.Override
    public boolean getAllDataSourcesFlushed() {
      if (eventTypeCase_ == 3) {
        return (java.lang.Boolean) eventType_;
      }
      return false;
    }

    public static final int READ_TRACING_BUFFERS_COMPLETED_FIELD_NUMBER = 4;
    /**
     * <pre>
     * Emitted when reading back the central tracing buffers has been completed.
     * If |write_into_file| is specified, this can happen many times over the
     * course of the trace.
     * </pre>
     *
     * <code>bool read_tracing_buffers_completed = 4;</code>
     * @return Whether the readTracingBuffersCompleted field is set.
     */
    @java.lang.Override
    public boolean hasReadTracingBuffersCompleted() {
      return eventTypeCase_ == 4;
    }
    /**
     * <pre>
     * Emitted when reading back the central tracing buffers has been completed.
     * If |write_into_file| is specified, this can happen many times over the
     * course of the trace.
     * </pre>
     *
     * <code>bool read_tracing_buffers_completed = 4;</code>
     * @return The readTracingBuffersCompleted.
     */
    @java.lang.Override
    public boolean getReadTracingBuffersCompleted() {
      if (eventTypeCase_ == 4) {
        return (java.lang.Boolean) eventType_;
      }
      return false;
    }

    public static final int TRACING_DISABLED_FIELD_NUMBER = 5;
    /**
     * <pre>
     * Emitted after tracing has been disabled and specifically, this will be
     * after all packets from producers have been included in the central
     * tracing buffer.
     * </pre>
     *
     * <code>bool tracing_disabled = 5;</code>
     * @return Whether the tracingDisabled field is set.
     */
    @java.lang.Override
    public boolean hasTracingDisabled() {
      return eventTypeCase_ == 5;
    }
    /**
     * <pre>
     * Emitted after tracing has been disabled and specifically, this will be
     * after all packets from producers have been included in the central
     * tracing buffer.
     * </pre>
     *
     * <code>bool tracing_disabled = 5;</code>
     * @return The tracingDisabled.
     */
    @java.lang.Override
    public boolean getTracingDisabled() {
      if (eventTypeCase_ == 5) {
        return (java.lang.Boolean) eventType_;
      }
      return false;
    }

    public static final int SEIZED_FOR_BUGREPORT_FIELD_NUMBER = 6;
    /**
     * <pre>
     * Emitted if perfetto --save-for-bugreport was invoked while the current
     * tracing session was running and it had the highest bugreport_score. In
     * this case the original consumer will see a nearly empty trace, because
     * the contents are routed onto the bugreport file. This event flags the
     * situation explicitly. Traces that contain this marker should be discarded
     * by test infrastructures / pipelines.
     * </pre>
     *
     * <code>bool seized_for_bugreport = 6;</code>
     * @return Whether the seizedForBugreport field is set.
     */
    @java.lang.Override
    public boolean hasSeizedForBugreport() {
      return eventTypeCase_ == 6;
    }
    /**
     * <pre>
     * Emitted if perfetto --save-for-bugreport was invoked while the current
     * tracing session was running and it had the highest bugreport_score. In
     * this case the original consumer will see a nearly empty trace, because
     * the contents are routed onto the bugreport file. This event flags the
     * situation explicitly. Traces that contain this marker should be discarded
     * by test infrastructures / pipelines.
     * </pre>
     *
     * <code>bool seized_for_bugreport = 6;</code>
     * @return The seizedForBugreport.
     */
    @java.lang.Override
    public boolean getSeizedForBugreport() {
      if (eventTypeCase_ == 6) {
        return (java.lang.Boolean) eventType_;
      }
      return false;
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (eventTypeCase_ == 1) {
        output.writeBool(
            1, (boolean)((java.lang.Boolean) eventType_));
      }
      if (eventTypeCase_ == 2) {
        output.writeBool(
            2, (boolean)((java.lang.Boolean) eventType_));
      }
      if (eventTypeCase_ == 3) {
        output.writeBool(
            3, (boolean)((java.lang.Boolean) eventType_));
      }
      if (eventTypeCase_ == 4) {
        output.writeBool(
            4, (boolean)((java.lang.Boolean) eventType_));
      }
      if (eventTypeCase_ == 5) {
        output.writeBool(
            5, (boolean)((java.lang.Boolean) eventType_));
      }
      if (eventTypeCase_ == 6) {
        output.writeBool(
            6, (boolean)((java.lang.Boolean) eventType_));
      }
      getUnknownFields().writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (eventTypeCase_ == 1) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(
              1, (boolean)((java.lang.Boolean) eventType_));
      }
      if (eventTypeCase_ == 2) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(
              2, (boolean)((java.lang.Boolean) eventType_));
      }
      if (eventTypeCase_ == 3) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(
              3, (boolean)((java.lang.Boolean) eventType_));
      }
      if (eventTypeCase_ == 4) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(
              4, (boolean)((java.lang.Boolean) eventType_));
      }
      if (eventTypeCase_ == 5) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(
              5, (boolean)((java.lang.Boolean) eventType_));
      }
      if (eventTypeCase_ == 6) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(
              6, (boolean)((java.lang.Boolean) eventType_));
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof perfetto.protos.TracingServiceEventOuterClass.TracingServiceEvent)) {
        return super.equals(obj);
      }
      perfetto.protos.TracingServiceEventOuterClass.TracingServiceEvent other = (perfetto.protos.TracingServiceEventOuterClass.TracingServiceEvent) obj;

      if (!getEventTypeCase().equals(other.getEventTypeCase())) return false;
      switch (eventTypeCase_) {
        case 2:
          if (getTracingStarted()
              != other.getTracingStarted()) return false;
          break;
        case 1:
          if (getAllDataSourcesStarted()
              != other.getAllDataSourcesStarted()) return false;
          break;
        case 3:
          if (getAllDataSourcesFlushed()
              != other.getAllDataSourcesFlushed()) return false;
          break;
        case 4:
          if (getReadTracingBuffersCompleted()
              != other.getReadTracingBuffersCompleted()) return false;
          break;
        case 5:
          if (getTracingDisabled()
              != other.getTracingDisabled()) return false;
          break;
        case 6:
          if (getSeizedForBugreport()
              != other.getSeizedForBugreport()) return false;
          break;
        case 0:
        default:
      }
      if (!getUnknownFields().equals(other.getUnknownFields())) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      switch (eventTypeCase_) {
        case 2:
          hash = (37 * hash) + TRACING_STARTED_FIELD_NUMBER;
          hash = (53 * hash) + com.google.protobuf.Internal.hashBoolean(
              getTracingStarted());
          break;
        case 1:
          hash = (37 * hash) + ALL_DATA_SOURCES_STARTED_FIELD_NUMBER;
          hash = (53 * hash) + com.google.protobuf.Internal.hashBoolean(
              getAllDataSourcesStarted());
          break;
        case 3:
          hash = (37 * hash) + ALL_DATA_SOURCES_FLUSHED_FIELD_NUMBER;
          hash = (53 * hash) + com.google.protobuf.Internal.hashBoolean(
              getAllDataSourcesFlushed());
          break;
        case 4:
          hash = (37 * hash) + READ_TRACING_BUFFERS_COMPLETED_FIELD_NUMBER;
          hash = (53 * hash) + com.google.protobuf.Internal.hashBoolean(
              getReadTracingBuffersCompleted());
          break;
        case 5:
          hash = (37 * hash) + TRACING_DISABLED_FIELD_NUMBER;
          hash = (53 * hash) + com.google.protobuf.Internal.hashBoolean(
              getTracingDisabled());
          break;
        case 6:
          hash = (37 * hash) + SEIZED_FOR_BUGREPORT_FIELD_NUMBER;
          hash = (53 * hash) + com.google.protobuf.Internal.hashBoolean(
              getSeizedForBugreport());
          break;
        case 0:
        default:
      }
      hash = (29 * hash) + getUnknownFields().hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static perfetto.protos.TracingServiceEventOuterClass.TracingServiceEvent parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static perfetto.protos.TracingServiceEventOuterClass.TracingServiceEvent parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static perfetto.protos.TracingServiceEventOuterClass.TracingServiceEvent parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static perfetto.protos.TracingServiceEventOuterClass.TracingServiceEvent parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static perfetto.protos.TracingServiceEventOuterClass.TracingServiceEvent parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static perfetto.protos.TracingServiceEventOuterClass.TracingServiceEvent parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static perfetto.protos.TracingServiceEventOuterClass.TracingServiceEvent parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static perfetto.protos.TracingServiceEventOuterClass.TracingServiceEvent parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static perfetto.protos.TracingServiceEventOuterClass.TracingServiceEvent parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static perfetto.protos.TracingServiceEventOuterClass.TracingServiceEvent parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static perfetto.protos.TracingServiceEventOuterClass.TracingServiceEvent parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static perfetto.protos.TracingServiceEventOuterClass.TracingServiceEvent parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(perfetto.protos.TracingServiceEventOuterClass.TracingServiceEvent prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * <pre>
     * Events emitted by the tracing service.
     * </pre>
     *
     * Protobuf type {@code perfetto.protos.TracingServiceEvent}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:perfetto.protos.TracingServiceEvent)
        perfetto.protos.TracingServiceEventOuterClass.TracingServiceEventOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return perfetto.protos.TracingServiceEventOuterClass.internal_static_perfetto_protos_TracingServiceEvent_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return perfetto.protos.TracingServiceEventOuterClass.internal_static_perfetto_protos_TracingServiceEvent_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                perfetto.protos.TracingServiceEventOuterClass.TracingServiceEvent.class, perfetto.protos.TracingServiceEventOuterClass.TracingServiceEvent.Builder.class);
      }

      // Construct using perfetto.protos.TracingServiceEventOuterClass.TracingServiceEvent.newBuilder()
      private Builder() {

      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);

      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        bitField0_ = 0;
        eventTypeCase_ = 0;
        eventType_ = null;
        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return perfetto.protos.TracingServiceEventOuterClass.internal_static_perfetto_protos_TracingServiceEvent_descriptor;
      }

      @java.lang.Override
      public perfetto.protos.TracingServiceEventOuterClass.TracingServiceEvent getDefaultInstanceForType() {
        return perfetto.protos.TracingServiceEventOuterClass.TracingServiceEvent.getDefaultInstance();
      }

      @java.lang.Override
      public perfetto.protos.TracingServiceEventOuterClass.TracingServiceEvent build() {
        perfetto.protos.TracingServiceEventOuterClass.TracingServiceEvent result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public perfetto.protos.TracingServiceEventOuterClass.TracingServiceEvent buildPartial() {
        perfetto.protos.TracingServiceEventOuterClass.TracingServiceEvent result = new perfetto.protos.TracingServiceEventOuterClass.TracingServiceEvent(this);
        if (bitField0_ != 0) { buildPartial0(result); }
        buildPartialOneofs(result);
        onBuilt();
        return result;
      }

      private void buildPartial0(perfetto.protos.TracingServiceEventOuterClass.TracingServiceEvent result) {
        int from_bitField0_ = bitField0_;
      }

      private void buildPartialOneofs(perfetto.protos.TracingServiceEventOuterClass.TracingServiceEvent result) {
        result.eventTypeCase_ = eventTypeCase_;
        result.eventType_ = this.eventType_;
      }

      @java.lang.Override
      public Builder clone() {
        return super.clone();
      }
      @java.lang.Override
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.setField(field, value);
      }
      @java.lang.Override
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return super.clearField(field);
      }
      @java.lang.Override
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return super.clearOneof(oneof);
      }
      @java.lang.Override
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, java.lang.Object value) {
        return super.setRepeatedField(field, index, value);
      }
      @java.lang.Override
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.addRepeatedField(field, value);
      }
      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof perfetto.protos.TracingServiceEventOuterClass.TracingServiceEvent) {
          return mergeFrom((perfetto.protos.TracingServiceEventOuterClass.TracingServiceEvent)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(perfetto.protos.TracingServiceEventOuterClass.TracingServiceEvent other) {
        if (other == perfetto.protos.TracingServiceEventOuterClass.TracingServiceEvent.getDefaultInstance()) return this;
        switch (other.getEventTypeCase()) {
          case TRACING_STARTED: {
            setTracingStarted(other.getTracingStarted());
            break;
          }
          case ALL_DATA_SOURCES_STARTED: {
            setAllDataSourcesStarted(other.getAllDataSourcesStarted());
            break;
          }
          case ALL_DATA_SOURCES_FLUSHED: {
            setAllDataSourcesFlushed(other.getAllDataSourcesFlushed());
            break;
          }
          case READ_TRACING_BUFFERS_COMPLETED: {
            setReadTracingBuffersCompleted(other.getReadTracingBuffersCompleted());
            break;
          }
          case TRACING_DISABLED: {
            setTracingDisabled(other.getTracingDisabled());
            break;
          }
          case SEIZED_FOR_BUGREPORT: {
            setSeizedForBugreport(other.getSeizedForBugreport());
            break;
          }
          case EVENTTYPE_NOT_SET: {
            break;
          }
        }
        this.mergeUnknownFields(other.getUnknownFields());
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        if (extensionRegistry == null) {
          throw new java.lang.NullPointerException();
        }
        try {
          boolean done = false;
          while (!done) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                done = true;
                break;
              case 8: {
                eventType_ = input.readBool();
                eventTypeCase_ = 1;
                break;
              } // case 8
              case 16: {
                eventType_ = input.readBool();
                eventTypeCase_ = 2;
                break;
              } // case 16
              case 24: {
                eventType_ = input.readBool();
                eventTypeCase_ = 3;
                break;
              } // case 24
              case 32: {
                eventType_ = input.readBool();
                eventTypeCase_ = 4;
                break;
              } // case 32
              case 40: {
                eventType_ = input.readBool();
                eventTypeCase_ = 5;
                break;
              } // case 40
              case 48: {
                eventType_ = input.readBool();
                eventTypeCase_ = 6;
                break;
              } // case 48
              default: {
                if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                  done = true; // was an endgroup tag
                }
                break;
              } // default:
            } // switch (tag)
          } // while (!done)
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.unwrapIOException();
        } finally {
          onChanged();
        } // finally
        return this;
      }
      private int eventTypeCase_ = 0;
      private java.lang.Object eventType_;
      public EventTypeCase
          getEventTypeCase() {
        return EventTypeCase.forNumber(
            eventTypeCase_);
      }

      public Builder clearEventType() {
        eventTypeCase_ = 0;
        eventType_ = null;
        onChanged();
        return this;
      }

      private int bitField0_;

      /**
       * <pre>
       * Emitted when we start tracing and specifically, this will be before any
       * producer is notified about the existence of this trace. This is always
       * emitted before the all_data_sources_started event. This event is also
       * guaranteed to be seen (byte-offset wise) before any data packets from
       * producers.
       * </pre>
       *
       * <code>bool tracing_started = 2;</code>
       * @return Whether the tracingStarted field is set.
       */
      public boolean hasTracingStarted() {
        return eventTypeCase_ == 2;
      }
      /**
       * <pre>
       * Emitted when we start tracing and specifically, this will be before any
       * producer is notified about the existence of this trace. This is always
       * emitted before the all_data_sources_started event. This event is also
       * guaranteed to be seen (byte-offset wise) before any data packets from
       * producers.
       * </pre>
       *
       * <code>bool tracing_started = 2;</code>
       * @return The tracingStarted.
       */
      public boolean getTracingStarted() {
        if (eventTypeCase_ == 2) {
          return (java.lang.Boolean) eventType_;
        }
        return false;
      }
      /**
       * <pre>
       * Emitted when we start tracing and specifically, this will be before any
       * producer is notified about the existence of this trace. This is always
       * emitted before the all_data_sources_started event. This event is also
       * guaranteed to be seen (byte-offset wise) before any data packets from
       * producers.
       * </pre>
       *
       * <code>bool tracing_started = 2;</code>
       * @param value The tracingStarted to set.
       * @return This builder for chaining.
       */
      public Builder setTracingStarted(boolean value) {
        
        eventTypeCase_ = 2;
        eventType_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Emitted when we start tracing and specifically, this will be before any
       * producer is notified about the existence of this trace. This is always
       * emitted before the all_data_sources_started event. This event is also
       * guaranteed to be seen (byte-offset wise) before any data packets from
       * producers.
       * </pre>
       *
       * <code>bool tracing_started = 2;</code>
       * @return This builder for chaining.
       */
      public Builder clearTracingStarted() {
        if (eventTypeCase_ == 2) {
          eventTypeCase_ = 0;
          eventType_ = null;
          onChanged();
        }
        return this;
      }

      /**
       * <pre>
       * Emitted after all data sources saw the start event and ACKed it.
       * This identifies the point in time when it's safe to assume that all data
       * sources have been recording events.
       * </pre>
       *
       * <code>bool all_data_sources_started = 1;</code>
       * @return Whether the allDataSourcesStarted field is set.
       */
      public boolean hasAllDataSourcesStarted() {
        return eventTypeCase_ == 1;
      }
      /**
       * <pre>
       * Emitted after all data sources saw the start event and ACKed it.
       * This identifies the point in time when it's safe to assume that all data
       * sources have been recording events.
       * </pre>
       *
       * <code>bool all_data_sources_started = 1;</code>
       * @return The allDataSourcesStarted.
       */
      public boolean getAllDataSourcesStarted() {
        if (eventTypeCase_ == 1) {
          return (java.lang.Boolean) eventType_;
        }
        return false;
      }
      /**
       * <pre>
       * Emitted after all data sources saw the start event and ACKed it.
       * This identifies the point in time when it's safe to assume that all data
       * sources have been recording events.
       * </pre>
       *
       * <code>bool all_data_sources_started = 1;</code>
       * @param value The allDataSourcesStarted to set.
       * @return This builder for chaining.
       */
      public Builder setAllDataSourcesStarted(boolean value) {
        
        eventTypeCase_ = 1;
        eventType_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Emitted after all data sources saw the start event and ACKed it.
       * This identifies the point in time when it's safe to assume that all data
       * sources have been recording events.
       * </pre>
       *
       * <code>bool all_data_sources_started = 1;</code>
       * @return This builder for chaining.
       */
      public Builder clearAllDataSourcesStarted() {
        if (eventTypeCase_ == 1) {
          eventTypeCase_ = 0;
          eventType_ = null;
          onChanged();
        }
        return this;
      }

      /**
       * <pre>
       * Emitted when all data sources have been flushed successfully or with an
       * error (including timeouts). This can generally happen many times over the
       * course of the trace.
       * </pre>
       *
       * <code>bool all_data_sources_flushed = 3;</code>
       * @return Whether the allDataSourcesFlushed field is set.
       */
      public boolean hasAllDataSourcesFlushed() {
        return eventTypeCase_ == 3;
      }
      /**
       * <pre>
       * Emitted when all data sources have been flushed successfully or with an
       * error (including timeouts). This can generally happen many times over the
       * course of the trace.
       * </pre>
       *
       * <code>bool all_data_sources_flushed = 3;</code>
       * @return The allDataSourcesFlushed.
       */
      public boolean getAllDataSourcesFlushed() {
        if (eventTypeCase_ == 3) {
          return (java.lang.Boolean) eventType_;
        }
        return false;
      }
      /**
       * <pre>
       * Emitted when all data sources have been flushed successfully or with an
       * error (including timeouts). This can generally happen many times over the
       * course of the trace.
       * </pre>
       *
       * <code>bool all_data_sources_flushed = 3;</code>
       * @param value The allDataSourcesFlushed to set.
       * @return This builder for chaining.
       */
      public Builder setAllDataSourcesFlushed(boolean value) {
        
        eventTypeCase_ = 3;
        eventType_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Emitted when all data sources have been flushed successfully or with an
       * error (including timeouts). This can generally happen many times over the
       * course of the trace.
       * </pre>
       *
       * <code>bool all_data_sources_flushed = 3;</code>
       * @return This builder for chaining.
       */
      public Builder clearAllDataSourcesFlushed() {
        if (eventTypeCase_ == 3) {
          eventTypeCase_ = 0;
          eventType_ = null;
          onChanged();
        }
        return this;
      }

      /**
       * <pre>
       * Emitted when reading back the central tracing buffers has been completed.
       * If |write_into_file| is specified, this can happen many times over the
       * course of the trace.
       * </pre>
       *
       * <code>bool read_tracing_buffers_completed = 4;</code>
       * @return Whether the readTracingBuffersCompleted field is set.
       */
      public boolean hasReadTracingBuffersCompleted() {
        return eventTypeCase_ == 4;
      }
      /**
       * <pre>
       * Emitted when reading back the central tracing buffers has been completed.
       * If |write_into_file| is specified, this can happen many times over the
       * course of the trace.
       * </pre>
       *
       * <code>bool read_tracing_buffers_completed = 4;</code>
       * @return The readTracingBuffersCompleted.
       */
      public boolean getReadTracingBuffersCompleted() {
        if (eventTypeCase_ == 4) {
          return (java.lang.Boolean) eventType_;
        }
        return false;
      }
      /**
       * <pre>
       * Emitted when reading back the central tracing buffers has been completed.
       * If |write_into_file| is specified, this can happen many times over the
       * course of the trace.
       * </pre>
       *
       * <code>bool read_tracing_buffers_completed = 4;</code>
       * @param value The readTracingBuffersCompleted to set.
       * @return This builder for chaining.
       */
      public Builder setReadTracingBuffersCompleted(boolean value) {
        
        eventTypeCase_ = 4;
        eventType_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Emitted when reading back the central tracing buffers has been completed.
       * If |write_into_file| is specified, this can happen many times over the
       * course of the trace.
       * </pre>
       *
       * <code>bool read_tracing_buffers_completed = 4;</code>
       * @return This builder for chaining.
       */
      public Builder clearReadTracingBuffersCompleted() {
        if (eventTypeCase_ == 4) {
          eventTypeCase_ = 0;
          eventType_ = null;
          onChanged();
        }
        return this;
      }

      /**
       * <pre>
       * Emitted after tracing has been disabled and specifically, this will be
       * after all packets from producers have been included in the central
       * tracing buffer.
       * </pre>
       *
       * <code>bool tracing_disabled = 5;</code>
       * @return Whether the tracingDisabled field is set.
       */
      public boolean hasTracingDisabled() {
        return eventTypeCase_ == 5;
      }
      /**
       * <pre>
       * Emitted after tracing has been disabled and specifically, this will be
       * after all packets from producers have been included in the central
       * tracing buffer.
       * </pre>
       *
       * <code>bool tracing_disabled = 5;</code>
       * @return The tracingDisabled.
       */
      public boolean getTracingDisabled() {
        if (eventTypeCase_ == 5) {
          return (java.lang.Boolean) eventType_;
        }
        return false;
      }
      /**
       * <pre>
       * Emitted after tracing has been disabled and specifically, this will be
       * after all packets from producers have been included in the central
       * tracing buffer.
       * </pre>
       *
       * <code>bool tracing_disabled = 5;</code>
       * @param value The tracingDisabled to set.
       * @return This builder for chaining.
       */
      public Builder setTracingDisabled(boolean value) {
        
        eventTypeCase_ = 5;
        eventType_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Emitted after tracing has been disabled and specifically, this will be
       * after all packets from producers have been included in the central
       * tracing buffer.
       * </pre>
       *
       * <code>bool tracing_disabled = 5;</code>
       * @return This builder for chaining.
       */
      public Builder clearTracingDisabled() {
        if (eventTypeCase_ == 5) {
          eventTypeCase_ = 0;
          eventType_ = null;
          onChanged();
        }
        return this;
      }

      /**
       * <pre>
       * Emitted if perfetto --save-for-bugreport was invoked while the current
       * tracing session was running and it had the highest bugreport_score. In
       * this case the original consumer will see a nearly empty trace, because
       * the contents are routed onto the bugreport file. This event flags the
       * situation explicitly. Traces that contain this marker should be discarded
       * by test infrastructures / pipelines.
       * </pre>
       *
       * <code>bool seized_for_bugreport = 6;</code>
       * @return Whether the seizedForBugreport field is set.
       */
      public boolean hasSeizedForBugreport() {
        return eventTypeCase_ == 6;
      }
      /**
       * <pre>
       * Emitted if perfetto --save-for-bugreport was invoked while the current
       * tracing session was running and it had the highest bugreport_score. In
       * this case the original consumer will see a nearly empty trace, because
       * the contents are routed onto the bugreport file. This event flags the
       * situation explicitly. Traces that contain this marker should be discarded
       * by test infrastructures / pipelines.
       * </pre>
       *
       * <code>bool seized_for_bugreport = 6;</code>
       * @return The seizedForBugreport.
       */
      public boolean getSeizedForBugreport() {
        if (eventTypeCase_ == 6) {
          return (java.lang.Boolean) eventType_;
        }
        return false;
      }
      /**
       * <pre>
       * Emitted if perfetto --save-for-bugreport was invoked while the current
       * tracing session was running and it had the highest bugreport_score. In
       * this case the original consumer will see a nearly empty trace, because
       * the contents are routed onto the bugreport file. This event flags the
       * situation explicitly. Traces that contain this marker should be discarded
       * by test infrastructures / pipelines.
       * </pre>
       *
       * <code>bool seized_for_bugreport = 6;</code>
       * @param value The seizedForBugreport to set.
       * @return This builder for chaining.
       */
      public Builder setSeizedForBugreport(boolean value) {
        
        eventTypeCase_ = 6;
        eventType_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Emitted if perfetto --save-for-bugreport was invoked while the current
       * tracing session was running and it had the highest bugreport_score. In
       * this case the original consumer will see a nearly empty trace, because
       * the contents are routed onto the bugreport file. This event flags the
       * situation explicitly. Traces that contain this marker should be discarded
       * by test infrastructures / pipelines.
       * </pre>
       *
       * <code>bool seized_for_bugreport = 6;</code>
       * @return This builder for chaining.
       */
      public Builder clearSeizedForBugreport() {
        if (eventTypeCase_ == 6) {
          eventTypeCase_ = 0;
          eventType_ = null;
          onChanged();
        }
        return this;
      }
      @java.lang.Override
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      @java.lang.Override
      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:perfetto.protos.TracingServiceEvent)
    }

    // @@protoc_insertion_point(class_scope:perfetto.protos.TracingServiceEvent)
    private static final perfetto.protos.TracingServiceEventOuterClass.TracingServiceEvent DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new perfetto.protos.TracingServiceEventOuterClass.TracingServiceEvent();
    }

    public static perfetto.protos.TracingServiceEventOuterClass.TracingServiceEvent getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    @java.lang.Deprecated public static final com.google.protobuf.Parser<TracingServiceEvent>
        PARSER = new com.google.protobuf.AbstractParser<TracingServiceEvent>() {
      @java.lang.Override
      public TracingServiceEvent parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        Builder builder = newBuilder();
        try {
          builder.mergeFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.setUnfinishedMessage(builder.buildPartial());
        } catch (com.google.protobuf.UninitializedMessageException e) {
          throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
        } catch (java.io.IOException e) {
          throw new com.google.protobuf.InvalidProtocolBufferException(e)
              .setUnfinishedMessage(builder.buildPartial());
        }
        return builder.buildPartial();
      }
    };

    public static com.google.protobuf.Parser<TracingServiceEvent> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<TracingServiceEvent> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public perfetto.protos.TracingServiceEventOuterClass.TracingServiceEvent getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_perfetto_protos_TracingServiceEvent_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_perfetto_protos_TracingServiceEvent_fieldAccessorTable;

  public static com.google.protobuf.Descriptors.FileDescriptor
      getDescriptor() {
    return descriptor;
  }
  private static  com.google.protobuf.Descriptors.FileDescriptor
      descriptor;
  static {
    java.lang.String[] descriptorData = {
      "\n:protos/perfetto/trace/perfetto/tracing" +
      "_service_event.proto\022\017perfetto.protos\"\354\001" +
      "\n\023TracingServiceEvent\022\031\n\017tracing_started" +
      "\030\002 \001(\010H\000\022\"\n\030all_data_sources_started\030\001 \001" +
      "(\010H\000\022\"\n\030all_data_sources_flushed\030\003 \001(\010H\000" +
      "\022(\n\036read_tracing_buffers_completed\030\004 \001(\010" +
      "H\000\022\032\n\020tracing_disabled\030\005 \001(\010H\000\022\036\n\024seized" +
      "_for_bugreport\030\006 \001(\010H\000B\014\n\nevent_type"
    };
    descriptor = com.google.protobuf.Descriptors.FileDescriptor
      .internalBuildGeneratedFileFrom(descriptorData,
        new com.google.protobuf.Descriptors.FileDescriptor[] {
        });
    internal_static_perfetto_protos_TracingServiceEvent_descriptor =
      getDescriptor().getMessageTypes().get(0);
    internal_static_perfetto_protos_TracingServiceEvent_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_perfetto_protos_TracingServiceEvent_descriptor,
        new java.lang.String[] { "TracingStarted", "AllDataSourcesStarted", "AllDataSourcesFlushed", "ReadTracingBuffersCompleted", "TracingDisabled", "SeizedForBugreport", "EventType", });
  }

  // @@protoc_insertion_point(outer_class_scope)
}
