// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: protos/perfetto/trace/chrome/chrome_metadata.proto

package perfetto.protos;

public final class ChromeMetadata {
  private ChromeMetadata() {}
  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistryLite registry) {
  }

  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistry registry) {
    registerAllExtensions(
        (com.google.protobuf.ExtensionRegistryLite) registry);
  }
  public interface ChromeMetadataPacketOrBuilder extends
      // @@protoc_insertion_point(interface_extends:perfetto.protos.ChromeMetadataPacket)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <code>optional .perfetto.protos.BackgroundTracingMetadata background_tracing_metadata = 1;</code>
     * @return Whether the backgroundTracingMetadata field is set.
     */
    boolean hasBackgroundTracingMetadata();
    /**
     * <code>optional .perfetto.protos.BackgroundTracingMetadata background_tracing_metadata = 1;</code>
     * @return The backgroundTracingMetadata.
     */
    perfetto.protos.ChromeMetadata.BackgroundTracingMetadata getBackgroundTracingMetadata();
    /**
     * <code>optional .perfetto.protos.BackgroundTracingMetadata background_tracing_metadata = 1;</code>
     */
    perfetto.protos.ChromeMetadata.BackgroundTracingMetadataOrBuilder getBackgroundTracingMetadataOrBuilder();

    /**
     * <pre>
     * Version code of Chrome used by Android's Play Store. This field is only set
     * on Android.
     * </pre>
     *
     * <code>optional int32 chrome_version_code = 2;</code>
     * @return Whether the chromeVersionCode field is set.
     */
    boolean hasChromeVersionCode();
    /**
     * <pre>
     * Version code of Chrome used by Android's Play Store. This field is only set
     * on Android.
     * </pre>
     *
     * <code>optional int32 chrome_version_code = 2;</code>
     * @return The chromeVersionCode.
     */
    int getChromeVersionCode();

    /**
     * <pre>
     * Comma separated list of enabled categories for tracing. The list of
     * possible category strings are listed in code
     * base/trace_event/builtin_categories.h.
     * </pre>
     *
     * <code>optional string enabled_categories = 3;</code>
     * @return Whether the enabledCategories field is set.
     */
    boolean hasEnabledCategories();
    /**
     * <pre>
     * Comma separated list of enabled categories for tracing. The list of
     * possible category strings are listed in code
     * base/trace_event/builtin_categories.h.
     * </pre>
     *
     * <code>optional string enabled_categories = 3;</code>
     * @return The enabledCategories.
     */
    java.lang.String getEnabledCategories();
    /**
     * <pre>
     * Comma separated list of enabled categories for tracing. The list of
     * possible category strings are listed in code
     * base/trace_event/builtin_categories.h.
     * </pre>
     *
     * <code>optional string enabled_categories = 3;</code>
     * @return The bytes for enabledCategories.
     */
    com.google.protobuf.ByteString
        getEnabledCategoriesBytes();
  }
  /**
   * <pre>
   * Metadata for chrome traces.
   * </pre>
   *
   * Protobuf type {@code perfetto.protos.ChromeMetadataPacket}
   */
  public static final class ChromeMetadataPacket extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:perfetto.protos.ChromeMetadataPacket)
      ChromeMetadataPacketOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use ChromeMetadataPacket.newBuilder() to construct.
    private ChromeMetadataPacket(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private ChromeMetadataPacket() {
      enabledCategories_ = "";
    }

    @java.lang.Override
    @SuppressWarnings({"unused"})
    protected java.lang.Object newInstance(
        UnusedPrivateParameter unused) {
      return new ChromeMetadataPacket();
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return perfetto.protos.ChromeMetadata.internal_static_perfetto_protos_ChromeMetadataPacket_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return perfetto.protos.ChromeMetadata.internal_static_perfetto_protos_ChromeMetadataPacket_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              perfetto.protos.ChromeMetadata.ChromeMetadataPacket.class, perfetto.protos.ChromeMetadata.ChromeMetadataPacket.Builder.class);
    }

    private int bitField0_;
    public static final int BACKGROUND_TRACING_METADATA_FIELD_NUMBER = 1;
    private perfetto.protos.ChromeMetadata.BackgroundTracingMetadata backgroundTracingMetadata_;
    /**
     * <code>optional .perfetto.protos.BackgroundTracingMetadata background_tracing_metadata = 1;</code>
     * @return Whether the backgroundTracingMetadata field is set.
     */
    @java.lang.Override
    public boolean hasBackgroundTracingMetadata() {
      return ((bitField0_ & 0x00000001) != 0);
    }
    /**
     * <code>optional .perfetto.protos.BackgroundTracingMetadata background_tracing_metadata = 1;</code>
     * @return The backgroundTracingMetadata.
     */
    @java.lang.Override
    public perfetto.protos.ChromeMetadata.BackgroundTracingMetadata getBackgroundTracingMetadata() {
      return backgroundTracingMetadata_ == null ? perfetto.protos.ChromeMetadata.BackgroundTracingMetadata.getDefaultInstance() : backgroundTracingMetadata_;
    }
    /**
     * <code>optional .perfetto.protos.BackgroundTracingMetadata background_tracing_metadata = 1;</code>
     */
    @java.lang.Override
    public perfetto.protos.ChromeMetadata.BackgroundTracingMetadataOrBuilder getBackgroundTracingMetadataOrBuilder() {
      return backgroundTracingMetadata_ == null ? perfetto.protos.ChromeMetadata.BackgroundTracingMetadata.getDefaultInstance() : backgroundTracingMetadata_;
    }

    public static final int CHROME_VERSION_CODE_FIELD_NUMBER = 2;
    private int chromeVersionCode_ = 0;
    /**
     * <pre>
     * Version code of Chrome used by Android's Play Store. This field is only set
     * on Android.
     * </pre>
     *
     * <code>optional int32 chrome_version_code = 2;</code>
     * @return Whether the chromeVersionCode field is set.
     */
    @java.lang.Override
    public boolean hasChromeVersionCode() {
      return ((bitField0_ & 0x00000002) != 0);
    }
    /**
     * <pre>
     * Version code of Chrome used by Android's Play Store. This field is only set
     * on Android.
     * </pre>
     *
     * <code>optional int32 chrome_version_code = 2;</code>
     * @return The chromeVersionCode.
     */
    @java.lang.Override
    public int getChromeVersionCode() {
      return chromeVersionCode_;
    }

    public static final int ENABLED_CATEGORIES_FIELD_NUMBER = 3;
    @SuppressWarnings("serial")
    private volatile java.lang.Object enabledCategories_ = "";
    /**
     * <pre>
     * Comma separated list of enabled categories for tracing. The list of
     * possible category strings are listed in code
     * base/trace_event/builtin_categories.h.
     * </pre>
     *
     * <code>optional string enabled_categories = 3;</code>
     * @return Whether the enabledCategories field is set.
     */
    @java.lang.Override
    public boolean hasEnabledCategories() {
      return ((bitField0_ & 0x00000004) != 0);
    }
    /**
     * <pre>
     * Comma separated list of enabled categories for tracing. The list of
     * possible category strings are listed in code
     * base/trace_event/builtin_categories.h.
     * </pre>
     *
     * <code>optional string enabled_categories = 3;</code>
     * @return The enabledCategories.
     */
    @java.lang.Override
    public java.lang.String getEnabledCategories() {
      java.lang.Object ref = enabledCategories_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        if (bs.isValidUtf8()) {
          enabledCategories_ = s;
        }
        return s;
      }
    }
    /**
     * <pre>
     * Comma separated list of enabled categories for tracing. The list of
     * possible category strings are listed in code
     * base/trace_event/builtin_categories.h.
     * </pre>
     *
     * <code>optional string enabled_categories = 3;</code>
     * @return The bytes for enabledCategories.
     */
    @java.lang.Override
    public com.google.protobuf.ByteString
        getEnabledCategoriesBytes() {
      java.lang.Object ref = enabledCategories_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        enabledCategories_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (((bitField0_ & 0x00000001) != 0)) {
        output.writeMessage(1, getBackgroundTracingMetadata());
      }
      if (((bitField0_ & 0x00000002) != 0)) {
        output.writeInt32(2, chromeVersionCode_);
      }
      if (((bitField0_ & 0x00000004) != 0)) {
        com.google.protobuf.GeneratedMessageV3.writeString(output, 3, enabledCategories_);
      }
      getUnknownFields().writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) != 0)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(1, getBackgroundTracingMetadata());
      }
      if (((bitField0_ & 0x00000002) != 0)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(2, chromeVersionCode_);
      }
      if (((bitField0_ & 0x00000004) != 0)) {
        size += com.google.protobuf.GeneratedMessageV3.computeStringSize(3, enabledCategories_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof perfetto.protos.ChromeMetadata.ChromeMetadataPacket)) {
        return super.equals(obj);
      }
      perfetto.protos.ChromeMetadata.ChromeMetadataPacket other = (perfetto.protos.ChromeMetadata.ChromeMetadataPacket) obj;

      if (hasBackgroundTracingMetadata() != other.hasBackgroundTracingMetadata()) return false;
      if (hasBackgroundTracingMetadata()) {
        if (!getBackgroundTracingMetadata()
            .equals(other.getBackgroundTracingMetadata())) return false;
      }
      if (hasChromeVersionCode() != other.hasChromeVersionCode()) return false;
      if (hasChromeVersionCode()) {
        if (getChromeVersionCode()
            != other.getChromeVersionCode()) return false;
      }
      if (hasEnabledCategories() != other.hasEnabledCategories()) return false;
      if (hasEnabledCategories()) {
        if (!getEnabledCategories()
            .equals(other.getEnabledCategories())) return false;
      }
      if (!getUnknownFields().equals(other.getUnknownFields())) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      if (hasBackgroundTracingMetadata()) {
        hash = (37 * hash) + BACKGROUND_TRACING_METADATA_FIELD_NUMBER;
        hash = (53 * hash) + getBackgroundTracingMetadata().hashCode();
      }
      if (hasChromeVersionCode()) {
        hash = (37 * hash) + CHROME_VERSION_CODE_FIELD_NUMBER;
        hash = (53 * hash) + getChromeVersionCode();
      }
      if (hasEnabledCategories()) {
        hash = (37 * hash) + ENABLED_CATEGORIES_FIELD_NUMBER;
        hash = (53 * hash) + getEnabledCategories().hashCode();
      }
      hash = (29 * hash) + getUnknownFields().hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static perfetto.protos.ChromeMetadata.ChromeMetadataPacket parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static perfetto.protos.ChromeMetadata.ChromeMetadataPacket parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static perfetto.protos.ChromeMetadata.ChromeMetadataPacket parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static perfetto.protos.ChromeMetadata.ChromeMetadataPacket parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static perfetto.protos.ChromeMetadata.ChromeMetadataPacket parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static perfetto.protos.ChromeMetadata.ChromeMetadataPacket parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static perfetto.protos.ChromeMetadata.ChromeMetadataPacket parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static perfetto.protos.ChromeMetadata.ChromeMetadataPacket parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static perfetto.protos.ChromeMetadata.ChromeMetadataPacket parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static perfetto.protos.ChromeMetadata.ChromeMetadataPacket parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static perfetto.protos.ChromeMetadata.ChromeMetadataPacket parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static perfetto.protos.ChromeMetadata.ChromeMetadataPacket parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(perfetto.protos.ChromeMetadata.ChromeMetadataPacket prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * <pre>
     * Metadata for chrome traces.
     * </pre>
     *
     * Protobuf type {@code perfetto.protos.ChromeMetadataPacket}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:perfetto.protos.ChromeMetadataPacket)
        perfetto.protos.ChromeMetadata.ChromeMetadataPacketOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return perfetto.protos.ChromeMetadata.internal_static_perfetto_protos_ChromeMetadataPacket_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return perfetto.protos.ChromeMetadata.internal_static_perfetto_protos_ChromeMetadataPacket_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                perfetto.protos.ChromeMetadata.ChromeMetadataPacket.class, perfetto.protos.ChromeMetadata.ChromeMetadataPacket.Builder.class);
      }

      // Construct using perfetto.protos.ChromeMetadata.ChromeMetadataPacket.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
          getBackgroundTracingMetadataFieldBuilder();
        }
      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        bitField0_ = 0;
        backgroundTracingMetadata_ = null;
        if (backgroundTracingMetadataBuilder_ != null) {
          backgroundTracingMetadataBuilder_.dispose();
          backgroundTracingMetadataBuilder_ = null;
        }
        chromeVersionCode_ = 0;
        enabledCategories_ = "";
        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return perfetto.protos.ChromeMetadata.internal_static_perfetto_protos_ChromeMetadataPacket_descriptor;
      }

      @java.lang.Override
      public perfetto.protos.ChromeMetadata.ChromeMetadataPacket getDefaultInstanceForType() {
        return perfetto.protos.ChromeMetadata.ChromeMetadataPacket.getDefaultInstance();
      }

      @java.lang.Override
      public perfetto.protos.ChromeMetadata.ChromeMetadataPacket build() {
        perfetto.protos.ChromeMetadata.ChromeMetadataPacket result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public perfetto.protos.ChromeMetadata.ChromeMetadataPacket buildPartial() {
        perfetto.protos.ChromeMetadata.ChromeMetadataPacket result = new perfetto.protos.ChromeMetadata.ChromeMetadataPacket(this);
        if (bitField0_ != 0) { buildPartial0(result); }
        onBuilt();
        return result;
      }

      private void buildPartial0(perfetto.protos.ChromeMetadata.ChromeMetadataPacket result) {
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) != 0)) {
          result.backgroundTracingMetadata_ = backgroundTracingMetadataBuilder_ == null
              ? backgroundTracingMetadata_
              : backgroundTracingMetadataBuilder_.build();
          to_bitField0_ |= 0x00000001;
        }
        if (((from_bitField0_ & 0x00000002) != 0)) {
          result.chromeVersionCode_ = chromeVersionCode_;
          to_bitField0_ |= 0x00000002;
        }
        if (((from_bitField0_ & 0x00000004) != 0)) {
          result.enabledCategories_ = enabledCategories_;
          to_bitField0_ |= 0x00000004;
        }
        result.bitField0_ |= to_bitField0_;
      }

      @java.lang.Override
      public Builder clone() {
        return super.clone();
      }
      @java.lang.Override
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.setField(field, value);
      }
      @java.lang.Override
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return super.clearField(field);
      }
      @java.lang.Override
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return super.clearOneof(oneof);
      }
      @java.lang.Override
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, java.lang.Object value) {
        return super.setRepeatedField(field, index, value);
      }
      @java.lang.Override
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.addRepeatedField(field, value);
      }
      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof perfetto.protos.ChromeMetadata.ChromeMetadataPacket) {
          return mergeFrom((perfetto.protos.ChromeMetadata.ChromeMetadataPacket)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(perfetto.protos.ChromeMetadata.ChromeMetadataPacket other) {
        if (other == perfetto.protos.ChromeMetadata.ChromeMetadataPacket.getDefaultInstance()) return this;
        if (other.hasBackgroundTracingMetadata()) {
          mergeBackgroundTracingMetadata(other.getBackgroundTracingMetadata());
        }
        if (other.hasChromeVersionCode()) {
          setChromeVersionCode(other.getChromeVersionCode());
        }
        if (other.hasEnabledCategories()) {
          enabledCategories_ = other.enabledCategories_;
          bitField0_ |= 0x00000004;
          onChanged();
        }
        this.mergeUnknownFields(other.getUnknownFields());
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        if (extensionRegistry == null) {
          throw new java.lang.NullPointerException();
        }
        try {
          boolean done = false;
          while (!done) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                done = true;
                break;
              case 10: {
                input.readMessage(
                    getBackgroundTracingMetadataFieldBuilder().getBuilder(),
                    extensionRegistry);
                bitField0_ |= 0x00000001;
                break;
              } // case 10
              case 16: {
                chromeVersionCode_ = input.readInt32();
                bitField0_ |= 0x00000002;
                break;
              } // case 16
              case 26: {
                enabledCategories_ = input.readBytes();
                bitField0_ |= 0x00000004;
                break;
              } // case 26
              default: {
                if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                  done = true; // was an endgroup tag
                }
                break;
              } // default:
            } // switch (tag)
          } // while (!done)
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.unwrapIOException();
        } finally {
          onChanged();
        } // finally
        return this;
      }
      private int bitField0_;

      private perfetto.protos.ChromeMetadata.BackgroundTracingMetadata backgroundTracingMetadata_;
      private com.google.protobuf.SingleFieldBuilderV3<
          perfetto.protos.ChromeMetadata.BackgroundTracingMetadata, perfetto.protos.ChromeMetadata.BackgroundTracingMetadata.Builder, perfetto.protos.ChromeMetadata.BackgroundTracingMetadataOrBuilder> backgroundTracingMetadataBuilder_;
      /**
       * <code>optional .perfetto.protos.BackgroundTracingMetadata background_tracing_metadata = 1;</code>
       * @return Whether the backgroundTracingMetadata field is set.
       */
      public boolean hasBackgroundTracingMetadata() {
        return ((bitField0_ & 0x00000001) != 0);
      }
      /**
       * <code>optional .perfetto.protos.BackgroundTracingMetadata background_tracing_metadata = 1;</code>
       * @return The backgroundTracingMetadata.
       */
      public perfetto.protos.ChromeMetadata.BackgroundTracingMetadata getBackgroundTracingMetadata() {
        if (backgroundTracingMetadataBuilder_ == null) {
          return backgroundTracingMetadata_ == null ? perfetto.protos.ChromeMetadata.BackgroundTracingMetadata.getDefaultInstance() : backgroundTracingMetadata_;
        } else {
          return backgroundTracingMetadataBuilder_.getMessage();
        }
      }
      /**
       * <code>optional .perfetto.protos.BackgroundTracingMetadata background_tracing_metadata = 1;</code>
       */
      public Builder setBackgroundTracingMetadata(perfetto.protos.ChromeMetadata.BackgroundTracingMetadata value) {
        if (backgroundTracingMetadataBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          backgroundTracingMetadata_ = value;
        } else {
          backgroundTracingMetadataBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000001;
        onChanged();
        return this;
      }
      /**
       * <code>optional .perfetto.protos.BackgroundTracingMetadata background_tracing_metadata = 1;</code>
       */
      public Builder setBackgroundTracingMetadata(
          perfetto.protos.ChromeMetadata.BackgroundTracingMetadata.Builder builderForValue) {
        if (backgroundTracingMetadataBuilder_ == null) {
          backgroundTracingMetadata_ = builderForValue.build();
        } else {
          backgroundTracingMetadataBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000001;
        onChanged();
        return this;
      }
      /**
       * <code>optional .perfetto.protos.BackgroundTracingMetadata background_tracing_metadata = 1;</code>
       */
      public Builder mergeBackgroundTracingMetadata(perfetto.protos.ChromeMetadata.BackgroundTracingMetadata value) {
        if (backgroundTracingMetadataBuilder_ == null) {
          if (((bitField0_ & 0x00000001) != 0) &&
            backgroundTracingMetadata_ != null &&
            backgroundTracingMetadata_ != perfetto.protos.ChromeMetadata.BackgroundTracingMetadata.getDefaultInstance()) {
            getBackgroundTracingMetadataBuilder().mergeFrom(value);
          } else {
            backgroundTracingMetadata_ = value;
          }
        } else {
          backgroundTracingMetadataBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00000001;
        onChanged();
        return this;
      }
      /**
       * <code>optional .perfetto.protos.BackgroundTracingMetadata background_tracing_metadata = 1;</code>
       */
      public Builder clearBackgroundTracingMetadata() {
        bitField0_ = (bitField0_ & ~0x00000001);
        backgroundTracingMetadata_ = null;
        if (backgroundTracingMetadataBuilder_ != null) {
          backgroundTracingMetadataBuilder_.dispose();
          backgroundTracingMetadataBuilder_ = null;
        }
        onChanged();
        return this;
      }
      /**
       * <code>optional .perfetto.protos.BackgroundTracingMetadata background_tracing_metadata = 1;</code>
       */
      public perfetto.protos.ChromeMetadata.BackgroundTracingMetadata.Builder getBackgroundTracingMetadataBuilder() {
        bitField0_ |= 0x00000001;
        onChanged();
        return getBackgroundTracingMetadataFieldBuilder().getBuilder();
      }
      /**
       * <code>optional .perfetto.protos.BackgroundTracingMetadata background_tracing_metadata = 1;</code>
       */
      public perfetto.protos.ChromeMetadata.BackgroundTracingMetadataOrBuilder getBackgroundTracingMetadataOrBuilder() {
        if (backgroundTracingMetadataBuilder_ != null) {
          return backgroundTracingMetadataBuilder_.getMessageOrBuilder();
        } else {
          return backgroundTracingMetadata_ == null ?
              perfetto.protos.ChromeMetadata.BackgroundTracingMetadata.getDefaultInstance() : backgroundTracingMetadata_;
        }
      }
      /**
       * <code>optional .perfetto.protos.BackgroundTracingMetadata background_tracing_metadata = 1;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          perfetto.protos.ChromeMetadata.BackgroundTracingMetadata, perfetto.protos.ChromeMetadata.BackgroundTracingMetadata.Builder, perfetto.protos.ChromeMetadata.BackgroundTracingMetadataOrBuilder> 
          getBackgroundTracingMetadataFieldBuilder() {
        if (backgroundTracingMetadataBuilder_ == null) {
          backgroundTracingMetadataBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              perfetto.protos.ChromeMetadata.BackgroundTracingMetadata, perfetto.protos.ChromeMetadata.BackgroundTracingMetadata.Builder, perfetto.protos.ChromeMetadata.BackgroundTracingMetadataOrBuilder>(
                  getBackgroundTracingMetadata(),
                  getParentForChildren(),
                  isClean());
          backgroundTracingMetadata_ = null;
        }
        return backgroundTracingMetadataBuilder_;
      }

      private int chromeVersionCode_ ;
      /**
       * <pre>
       * Version code of Chrome used by Android's Play Store. This field is only set
       * on Android.
       * </pre>
       *
       * <code>optional int32 chrome_version_code = 2;</code>
       * @return Whether the chromeVersionCode field is set.
       */
      @java.lang.Override
      public boolean hasChromeVersionCode() {
        return ((bitField0_ & 0x00000002) != 0);
      }
      /**
       * <pre>
       * Version code of Chrome used by Android's Play Store. This field is only set
       * on Android.
       * </pre>
       *
       * <code>optional int32 chrome_version_code = 2;</code>
       * @return The chromeVersionCode.
       */
      @java.lang.Override
      public int getChromeVersionCode() {
        return chromeVersionCode_;
      }
      /**
       * <pre>
       * Version code of Chrome used by Android's Play Store. This field is only set
       * on Android.
       * </pre>
       *
       * <code>optional int32 chrome_version_code = 2;</code>
       * @param value The chromeVersionCode to set.
       * @return This builder for chaining.
       */
      public Builder setChromeVersionCode(int value) {
        
        chromeVersionCode_ = value;
        bitField0_ |= 0x00000002;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Version code of Chrome used by Android's Play Store. This field is only set
       * on Android.
       * </pre>
       *
       * <code>optional int32 chrome_version_code = 2;</code>
       * @return This builder for chaining.
       */
      public Builder clearChromeVersionCode() {
        bitField0_ = (bitField0_ & ~0x00000002);
        chromeVersionCode_ = 0;
        onChanged();
        return this;
      }

      private java.lang.Object enabledCategories_ = "";
      /**
       * <pre>
       * Comma separated list of enabled categories for tracing. The list of
       * possible category strings are listed in code
       * base/trace_event/builtin_categories.h.
       * </pre>
       *
       * <code>optional string enabled_categories = 3;</code>
       * @return Whether the enabledCategories field is set.
       */
      public boolean hasEnabledCategories() {
        return ((bitField0_ & 0x00000004) != 0);
      }
      /**
       * <pre>
       * Comma separated list of enabled categories for tracing. The list of
       * possible category strings are listed in code
       * base/trace_event/builtin_categories.h.
       * </pre>
       *
       * <code>optional string enabled_categories = 3;</code>
       * @return The enabledCategories.
       */
      public java.lang.String getEnabledCategories() {
        java.lang.Object ref = enabledCategories_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          if (bs.isValidUtf8()) {
            enabledCategories_ = s;
          }
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <pre>
       * Comma separated list of enabled categories for tracing. The list of
       * possible category strings are listed in code
       * base/trace_event/builtin_categories.h.
       * </pre>
       *
       * <code>optional string enabled_categories = 3;</code>
       * @return The bytes for enabledCategories.
       */
      public com.google.protobuf.ByteString
          getEnabledCategoriesBytes() {
        java.lang.Object ref = enabledCategories_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          enabledCategories_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <pre>
       * Comma separated list of enabled categories for tracing. The list of
       * possible category strings are listed in code
       * base/trace_event/builtin_categories.h.
       * </pre>
       *
       * <code>optional string enabled_categories = 3;</code>
       * @param value The enabledCategories to set.
       * @return This builder for chaining.
       */
      public Builder setEnabledCategories(
          java.lang.String value) {
        if (value == null) { throw new NullPointerException(); }
        enabledCategories_ = value;
        bitField0_ |= 0x00000004;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Comma separated list of enabled categories for tracing. The list of
       * possible category strings are listed in code
       * base/trace_event/builtin_categories.h.
       * </pre>
       *
       * <code>optional string enabled_categories = 3;</code>
       * @return This builder for chaining.
       */
      public Builder clearEnabledCategories() {
        enabledCategories_ = getDefaultInstance().getEnabledCategories();
        bitField0_ = (bitField0_ & ~0x00000004);
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Comma separated list of enabled categories for tracing. The list of
       * possible category strings are listed in code
       * base/trace_event/builtin_categories.h.
       * </pre>
       *
       * <code>optional string enabled_categories = 3;</code>
       * @param value The bytes for enabledCategories to set.
       * @return This builder for chaining.
       */
      public Builder setEnabledCategoriesBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) { throw new NullPointerException(); }
        enabledCategories_ = value;
        bitField0_ |= 0x00000004;
        onChanged();
        return this;
      }
      @java.lang.Override
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      @java.lang.Override
      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:perfetto.protos.ChromeMetadataPacket)
    }

    // @@protoc_insertion_point(class_scope:perfetto.protos.ChromeMetadataPacket)
    private static final perfetto.protos.ChromeMetadata.ChromeMetadataPacket DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new perfetto.protos.ChromeMetadata.ChromeMetadataPacket();
    }

    public static perfetto.protos.ChromeMetadata.ChromeMetadataPacket getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    @java.lang.Deprecated public static final com.google.protobuf.Parser<ChromeMetadataPacket>
        PARSER = new com.google.protobuf.AbstractParser<ChromeMetadataPacket>() {
      @java.lang.Override
      public ChromeMetadataPacket parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        Builder builder = newBuilder();
        try {
          builder.mergeFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.setUnfinishedMessage(builder.buildPartial());
        } catch (com.google.protobuf.UninitializedMessageException e) {
          throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
        } catch (java.io.IOException e) {
          throw new com.google.protobuf.InvalidProtocolBufferException(e)
              .setUnfinishedMessage(builder.buildPartial());
        }
        return builder.buildPartial();
      }
    };

    public static com.google.protobuf.Parser<ChromeMetadataPacket> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<ChromeMetadataPacket> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public perfetto.protos.ChromeMetadata.ChromeMetadataPacket getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface BackgroundTracingMetadataOrBuilder extends
      // @@protoc_insertion_point(interface_extends:perfetto.protos.BackgroundTracingMetadata)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <pre>
     * Specifies the rule that caused the trace to be uploaded.
     * </pre>
     *
     * <code>optional .perfetto.protos.BackgroundTracingMetadata.TriggerRule triggered_rule = 1;</code>
     * @return Whether the triggeredRule field is set.
     */
    boolean hasTriggeredRule();
    /**
     * <pre>
     * Specifies the rule that caused the trace to be uploaded.
     * </pre>
     *
     * <code>optional .perfetto.protos.BackgroundTracingMetadata.TriggerRule triggered_rule = 1;</code>
     * @return The triggeredRule.
     */
    perfetto.protos.ChromeMetadata.BackgroundTracingMetadata.TriggerRule getTriggeredRule();
    /**
     * <pre>
     * Specifies the rule that caused the trace to be uploaded.
     * </pre>
     *
     * <code>optional .perfetto.protos.BackgroundTracingMetadata.TriggerRule triggered_rule = 1;</code>
     */
    perfetto.protos.ChromeMetadata.BackgroundTracingMetadata.TriggerRuleOrBuilder getTriggeredRuleOrBuilder();

    /**
     * <pre>
     * List of all active triggers in current session, when trace was triggered.
     * </pre>
     *
     * <code>repeated .perfetto.protos.BackgroundTracingMetadata.TriggerRule active_rules = 2;</code>
     */
    java.util.List<perfetto.protos.ChromeMetadata.BackgroundTracingMetadata.TriggerRule> 
        getActiveRulesList();
    /**
     * <pre>
     * List of all active triggers in current session, when trace was triggered.
     * </pre>
     *
     * <code>repeated .perfetto.protos.BackgroundTracingMetadata.TriggerRule active_rules = 2;</code>
     */
    perfetto.protos.ChromeMetadata.BackgroundTracingMetadata.TriggerRule getActiveRules(int index);
    /**
     * <pre>
     * List of all active triggers in current session, when trace was triggered.
     * </pre>
     *
     * <code>repeated .perfetto.protos.BackgroundTracingMetadata.TriggerRule active_rules = 2;</code>
     */
    int getActiveRulesCount();
    /**
     * <pre>
     * List of all active triggers in current session, when trace was triggered.
     * </pre>
     *
     * <code>repeated .perfetto.protos.BackgroundTracingMetadata.TriggerRule active_rules = 2;</code>
     */
    java.util.List<? extends perfetto.protos.ChromeMetadata.BackgroundTracingMetadata.TriggerRuleOrBuilder> 
        getActiveRulesOrBuilderList();
    /**
     * <pre>
     * List of all active triggers in current session, when trace was triggered.
     * </pre>
     *
     * <code>repeated .perfetto.protos.BackgroundTracingMetadata.TriggerRule active_rules = 2;</code>
     */
    perfetto.protos.ChromeMetadata.BackgroundTracingMetadata.TriggerRuleOrBuilder getActiveRulesOrBuilder(
        int index);
  }
  /**
   * <pre>
   * Metadata related to background tracing scenarios, states and triggers.
   * </pre>
   *
   * Protobuf type {@code perfetto.protos.BackgroundTracingMetadata}
   */
  public static final class BackgroundTracingMetadata extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:perfetto.protos.BackgroundTracingMetadata)
      BackgroundTracingMetadataOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use BackgroundTracingMetadata.newBuilder() to construct.
    private BackgroundTracingMetadata(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private BackgroundTracingMetadata() {
      activeRules_ = java.util.Collections.emptyList();
    }

    @java.lang.Override
    @SuppressWarnings({"unused"})
    protected java.lang.Object newInstance(
        UnusedPrivateParameter unused) {
      return new BackgroundTracingMetadata();
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return perfetto.protos.ChromeMetadata.internal_static_perfetto_protos_BackgroundTracingMetadata_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return perfetto.protos.ChromeMetadata.internal_static_perfetto_protos_BackgroundTracingMetadata_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              perfetto.protos.ChromeMetadata.BackgroundTracingMetadata.class, perfetto.protos.ChromeMetadata.BackgroundTracingMetadata.Builder.class);
    }

    public interface TriggerRuleOrBuilder extends
        // @@protoc_insertion_point(interface_extends:perfetto.protos.BackgroundTracingMetadata.TriggerRule)
        com.google.protobuf.MessageOrBuilder {

      /**
       * <code>optional .perfetto.protos.BackgroundTracingMetadata.TriggerRule.TriggerType trigger_type = 1;</code>
       * @return Whether the triggerType field is set.
       */
      boolean hasTriggerType();
      /**
       * <code>optional .perfetto.protos.BackgroundTracingMetadata.TriggerRule.TriggerType trigger_type = 1;</code>
       * @return The triggerType.
       */
      perfetto.protos.ChromeMetadata.BackgroundTracingMetadata.TriggerRule.TriggerType getTriggerType();

      /**
       * <code>optional .perfetto.protos.BackgroundTracingMetadata.TriggerRule.HistogramRule histogram_rule = 2;</code>
       * @return Whether the histogramRule field is set.
       */
      boolean hasHistogramRule();
      /**
       * <code>optional .perfetto.protos.BackgroundTracingMetadata.TriggerRule.HistogramRule histogram_rule = 2;</code>
       * @return The histogramRule.
       */
      perfetto.protos.ChromeMetadata.BackgroundTracingMetadata.TriggerRule.HistogramRule getHistogramRule();
      /**
       * <code>optional .perfetto.protos.BackgroundTracingMetadata.TriggerRule.HistogramRule histogram_rule = 2;</code>
       */
      perfetto.protos.ChromeMetadata.BackgroundTracingMetadata.TriggerRule.HistogramRuleOrBuilder getHistogramRuleOrBuilder();

      /**
       * <code>optional .perfetto.protos.BackgroundTracingMetadata.TriggerRule.NamedRule named_rule = 3;</code>
       * @return Whether the namedRule field is set.
       */
      boolean hasNamedRule();
      /**
       * <code>optional .perfetto.protos.BackgroundTracingMetadata.TriggerRule.NamedRule named_rule = 3;</code>
       * @return The namedRule.
       */
      perfetto.protos.ChromeMetadata.BackgroundTracingMetadata.TriggerRule.NamedRule getNamedRule();
      /**
       * <code>optional .perfetto.protos.BackgroundTracingMetadata.TriggerRule.NamedRule named_rule = 3;</code>
       */
      perfetto.protos.ChromeMetadata.BackgroundTracingMetadata.TriggerRule.NamedRuleOrBuilder getNamedRuleOrBuilder();
    }
    /**
     * <pre>
     * Information about a trigger rule defined in the experiment config.
     * </pre>
     *
     * Protobuf type {@code perfetto.protos.BackgroundTracingMetadata.TriggerRule}
     */
    public static final class TriggerRule extends
        com.google.protobuf.GeneratedMessageV3 implements
        // @@protoc_insertion_point(message_implements:perfetto.protos.BackgroundTracingMetadata.TriggerRule)
        TriggerRuleOrBuilder {
    private static final long serialVersionUID = 0L;
      // Use TriggerRule.newBuilder() to construct.
      private TriggerRule(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
        super(builder);
      }
      private TriggerRule() {
        triggerType_ = 0;
      }

      @java.lang.Override
      @SuppressWarnings({"unused"})
      protected java.lang.Object newInstance(
          UnusedPrivateParameter unused) {
        return new TriggerRule();
      }

      @java.lang.Override
      public final com.google.protobuf.UnknownFieldSet
      getUnknownFields() {
        return this.unknownFields;
      }
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return perfetto.protos.ChromeMetadata.internal_static_perfetto_protos_BackgroundTracingMetadata_TriggerRule_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return perfetto.protos.ChromeMetadata.internal_static_perfetto_protos_BackgroundTracingMetadata_TriggerRule_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                perfetto.protos.ChromeMetadata.BackgroundTracingMetadata.TriggerRule.class, perfetto.protos.ChromeMetadata.BackgroundTracingMetadata.TriggerRule.Builder.class);
      }

      /**
       * Protobuf enum {@code perfetto.protos.BackgroundTracingMetadata.TriggerRule.TriggerType}
       */
      public enum TriggerType
          implements com.google.protobuf.ProtocolMessageEnum {
        /**
         * <code>TRIGGER_UNSPECIFIED = 0;</code>
         */
        TRIGGER_UNSPECIFIED(0),
        /**
         * <pre>
         * Traces are triggered by specific range of values of an UMA histogram.
         * </pre>
         *
         * <code>MONITOR_AND_DUMP_WHEN_SPECIFIC_HISTOGRAM_AND_VALUE = 1;</code>
         */
        MONITOR_AND_DUMP_WHEN_SPECIFIC_HISTOGRAM_AND_VALUE(1),
        /**
         * <pre>
         * Traces are triggered by specific named events in chromium codebase,
         * like "second-update-failure".
         * </pre>
         *
         * <code>MONITOR_AND_DUMP_WHEN_TRIGGER_NAMED = 2;</code>
         */
        MONITOR_AND_DUMP_WHEN_TRIGGER_NAMED(2),
        ;

        /**
         * <code>TRIGGER_UNSPECIFIED = 0;</code>
         */
        public static final int TRIGGER_UNSPECIFIED_VALUE = 0;
        /**
         * <pre>
         * Traces are triggered by specific range of values of an UMA histogram.
         * </pre>
         *
         * <code>MONITOR_AND_DUMP_WHEN_SPECIFIC_HISTOGRAM_AND_VALUE = 1;</code>
         */
        public static final int MONITOR_AND_DUMP_WHEN_SPECIFIC_HISTOGRAM_AND_VALUE_VALUE = 1;
        /**
         * <pre>
         * Traces are triggered by specific named events in chromium codebase,
         * like "second-update-failure".
         * </pre>
         *
         * <code>MONITOR_AND_DUMP_WHEN_TRIGGER_NAMED = 2;</code>
         */
        public static final int MONITOR_AND_DUMP_WHEN_TRIGGER_NAMED_VALUE = 2;


        public final int getNumber() {
          return value;
        }

        /**
         * @param value The numeric wire value of the corresponding enum entry.
         * @return The enum associated with the given numeric wire value.
         * @deprecated Use {@link #forNumber(int)} instead.
         */
        @java.lang.Deprecated
        public static TriggerType valueOf(int value) {
          return forNumber(value);
        }

        /**
         * @param value The numeric wire value of the corresponding enum entry.
         * @return The enum associated with the given numeric wire value.
         */
        public static TriggerType forNumber(int value) {
          switch (value) {
            case 0: return TRIGGER_UNSPECIFIED;
            case 1: return MONITOR_AND_DUMP_WHEN_SPECIFIC_HISTOGRAM_AND_VALUE;
            case 2: return MONITOR_AND_DUMP_WHEN_TRIGGER_NAMED;
            default: return null;
          }
        }

        public static com.google.protobuf.Internal.EnumLiteMap<TriggerType>
            internalGetValueMap() {
          return internalValueMap;
        }
        private static final com.google.protobuf.Internal.EnumLiteMap<
            TriggerType> internalValueMap =
              new com.google.protobuf.Internal.EnumLiteMap<TriggerType>() {
                public TriggerType findValueByNumber(int number) {
                  return TriggerType.forNumber(number);
                }
              };

        public final com.google.protobuf.Descriptors.EnumValueDescriptor
            getValueDescriptor() {
          return getDescriptor().getValues().get(ordinal());
        }
        public final com.google.protobuf.Descriptors.EnumDescriptor
            getDescriptorForType() {
          return getDescriptor();
        }
        public static final com.google.protobuf.Descriptors.EnumDescriptor
            getDescriptor() {
          return perfetto.protos.ChromeMetadata.BackgroundTracingMetadata.TriggerRule.getDescriptor().getEnumTypes().get(0);
        }

        private static final TriggerType[] VALUES = values();

        public static TriggerType valueOf(
            com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
          if (desc.getType() != getDescriptor()) {
            throw new java.lang.IllegalArgumentException(
              "EnumValueDescriptor is not for this type.");
          }
          return VALUES[desc.getIndex()];
        }

        private final int value;

        private TriggerType(int value) {
          this.value = value;
        }

        // @@protoc_insertion_point(enum_scope:perfetto.protos.BackgroundTracingMetadata.TriggerRule.TriggerType)
      }

      public interface HistogramRuleOrBuilder extends
          // @@protoc_insertion_point(interface_extends:perfetto.protos.BackgroundTracingMetadata.TriggerRule.HistogramRule)
          com.google.protobuf.MessageOrBuilder {

        /**
         * <pre>
         * UMA histogram name hash, same as HistogramEventProto.name_hash.
         * </pre>
         *
         * <code>optional fixed64 histogram_name_hash = 1;</code>
         * @return Whether the histogramNameHash field is set.
         */
        boolean hasHistogramNameHash();
        /**
         * <pre>
         * UMA histogram name hash, same as HistogramEventProto.name_hash.
         * </pre>
         *
         * <code>optional fixed64 histogram_name_hash = 1;</code>
         * @return The histogramNameHash.
         */
        long getHistogramNameHash();

        /**
         * <pre>
         * Range of values of the histogram that activates trigger.
         * </pre>
         *
         * <code>optional int64 histogram_min_trigger = 2;</code>
         * @return Whether the histogramMinTrigger field is set.
         */
        boolean hasHistogramMinTrigger();
        /**
         * <pre>
         * Range of values of the histogram that activates trigger.
         * </pre>
         *
         * <code>optional int64 histogram_min_trigger = 2;</code>
         * @return The histogramMinTrigger.
         */
        long getHistogramMinTrigger();

        /**
         * <code>optional int64 histogram_max_trigger = 3;</code>
         * @return Whether the histogramMaxTrigger field is set.
         */
        boolean hasHistogramMaxTrigger();
        /**
         * <code>optional int64 histogram_max_trigger = 3;</code>
         * @return The histogramMaxTrigger.
         */
        long getHistogramMaxTrigger();
      }
      /**
       * <pre>
       * Configuration of histogram trigger.
       * </pre>
       *
       * Protobuf type {@code perfetto.protos.BackgroundTracingMetadata.TriggerRule.HistogramRule}
       */
      public static final class HistogramRule extends
          com.google.protobuf.GeneratedMessageV3 implements
          // @@protoc_insertion_point(message_implements:perfetto.protos.BackgroundTracingMetadata.TriggerRule.HistogramRule)
          HistogramRuleOrBuilder {
      private static final long serialVersionUID = 0L;
        // Use HistogramRule.newBuilder() to construct.
        private HistogramRule(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
          super(builder);
        }
        private HistogramRule() {
        }

        @java.lang.Override
        @SuppressWarnings({"unused"})
        protected java.lang.Object newInstance(
            UnusedPrivateParameter unused) {
          return new HistogramRule();
        }

        @java.lang.Override
        public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
          return this.unknownFields;
        }
        public static final com.google.protobuf.Descriptors.Descriptor
            getDescriptor() {
          return perfetto.protos.ChromeMetadata.internal_static_perfetto_protos_BackgroundTracingMetadata_TriggerRule_HistogramRule_descriptor;
        }

        @java.lang.Override
        protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
            internalGetFieldAccessorTable() {
          return perfetto.protos.ChromeMetadata.internal_static_perfetto_protos_BackgroundTracingMetadata_TriggerRule_HistogramRule_fieldAccessorTable
              .ensureFieldAccessorsInitialized(
                  perfetto.protos.ChromeMetadata.BackgroundTracingMetadata.TriggerRule.HistogramRule.class, perfetto.protos.ChromeMetadata.BackgroundTracingMetadata.TriggerRule.HistogramRule.Builder.class);
        }

        private int bitField0_;
        public static final int HISTOGRAM_NAME_HASH_FIELD_NUMBER = 1;
        private long histogramNameHash_ = 0L;
        /**
         * <pre>
         * UMA histogram name hash, same as HistogramEventProto.name_hash.
         * </pre>
         *
         * <code>optional fixed64 histogram_name_hash = 1;</code>
         * @return Whether the histogramNameHash field is set.
         */
        @java.lang.Override
        public boolean hasHistogramNameHash() {
          return ((bitField0_ & 0x00000001) != 0);
        }
        /**
         * <pre>
         * UMA histogram name hash, same as HistogramEventProto.name_hash.
         * </pre>
         *
         * <code>optional fixed64 histogram_name_hash = 1;</code>
         * @return The histogramNameHash.
         */
        @java.lang.Override
        public long getHistogramNameHash() {
          return histogramNameHash_;
        }

        public static final int HISTOGRAM_MIN_TRIGGER_FIELD_NUMBER = 2;
        private long histogramMinTrigger_ = 0L;
        /**
         * <pre>
         * Range of values of the histogram that activates trigger.
         * </pre>
         *
         * <code>optional int64 histogram_min_trigger = 2;</code>
         * @return Whether the histogramMinTrigger field is set.
         */
        @java.lang.Override
        public boolean hasHistogramMinTrigger() {
          return ((bitField0_ & 0x00000002) != 0);
        }
        /**
         * <pre>
         * Range of values of the histogram that activates trigger.
         * </pre>
         *
         * <code>optional int64 histogram_min_trigger = 2;</code>
         * @return The histogramMinTrigger.
         */
        @java.lang.Override
        public long getHistogramMinTrigger() {
          return histogramMinTrigger_;
        }

        public static final int HISTOGRAM_MAX_TRIGGER_FIELD_NUMBER = 3;
        private long histogramMaxTrigger_ = 0L;
        /**
         * <code>optional int64 histogram_max_trigger = 3;</code>
         * @return Whether the histogramMaxTrigger field is set.
         */
        @java.lang.Override
        public boolean hasHistogramMaxTrigger() {
          return ((bitField0_ & 0x00000004) != 0);
        }
        /**
         * <code>optional int64 histogram_max_trigger = 3;</code>
         * @return The histogramMaxTrigger.
         */
        @java.lang.Override
        public long getHistogramMaxTrigger() {
          return histogramMaxTrigger_;
        }

        private byte memoizedIsInitialized = -1;
        @java.lang.Override
        public final boolean isInitialized() {
          byte isInitialized = memoizedIsInitialized;
          if (isInitialized == 1) return true;
          if (isInitialized == 0) return false;

          memoizedIsInitialized = 1;
          return true;
        }

        @java.lang.Override
        public void writeTo(com.google.protobuf.CodedOutputStream output)
                            throws java.io.IOException {
          if (((bitField0_ & 0x00000001) != 0)) {
            output.writeFixed64(1, histogramNameHash_);
          }
          if (((bitField0_ & 0x00000002) != 0)) {
            output.writeInt64(2, histogramMinTrigger_);
          }
          if (((bitField0_ & 0x00000004) != 0)) {
            output.writeInt64(3, histogramMaxTrigger_);
          }
          getUnknownFields().writeTo(output);
        }

        @java.lang.Override
        public int getSerializedSize() {
          int size = memoizedSize;
          if (size != -1) return size;

          size = 0;
          if (((bitField0_ & 0x00000001) != 0)) {
            size += com.google.protobuf.CodedOutputStream
              .computeFixed64Size(1, histogramNameHash_);
          }
          if (((bitField0_ & 0x00000002) != 0)) {
            size += com.google.protobuf.CodedOutputStream
              .computeInt64Size(2, histogramMinTrigger_);
          }
          if (((bitField0_ & 0x00000004) != 0)) {
            size += com.google.protobuf.CodedOutputStream
              .computeInt64Size(3, histogramMaxTrigger_);
          }
          size += getUnknownFields().getSerializedSize();
          memoizedSize = size;
          return size;
        }

        @java.lang.Override
        public boolean equals(final java.lang.Object obj) {
          if (obj == this) {
           return true;
          }
          if (!(obj instanceof perfetto.protos.ChromeMetadata.BackgroundTracingMetadata.TriggerRule.HistogramRule)) {
            return super.equals(obj);
          }
          perfetto.protos.ChromeMetadata.BackgroundTracingMetadata.TriggerRule.HistogramRule other = (perfetto.protos.ChromeMetadata.BackgroundTracingMetadata.TriggerRule.HistogramRule) obj;

          if (hasHistogramNameHash() != other.hasHistogramNameHash()) return false;
          if (hasHistogramNameHash()) {
            if (getHistogramNameHash()
                != other.getHistogramNameHash()) return false;
          }
          if (hasHistogramMinTrigger() != other.hasHistogramMinTrigger()) return false;
          if (hasHistogramMinTrigger()) {
            if (getHistogramMinTrigger()
                != other.getHistogramMinTrigger()) return false;
          }
          if (hasHistogramMaxTrigger() != other.hasHistogramMaxTrigger()) return false;
          if (hasHistogramMaxTrigger()) {
            if (getHistogramMaxTrigger()
                != other.getHistogramMaxTrigger()) return false;
          }
          if (!getUnknownFields().equals(other.getUnknownFields())) return false;
          return true;
        }

        @java.lang.Override
        public int hashCode() {
          if (memoizedHashCode != 0) {
            return memoizedHashCode;
          }
          int hash = 41;
          hash = (19 * hash) + getDescriptor().hashCode();
          if (hasHistogramNameHash()) {
            hash = (37 * hash) + HISTOGRAM_NAME_HASH_FIELD_NUMBER;
            hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
                getHistogramNameHash());
          }
          if (hasHistogramMinTrigger()) {
            hash = (37 * hash) + HISTOGRAM_MIN_TRIGGER_FIELD_NUMBER;
            hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
                getHistogramMinTrigger());
          }
          if (hasHistogramMaxTrigger()) {
            hash = (37 * hash) + HISTOGRAM_MAX_TRIGGER_FIELD_NUMBER;
            hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
                getHistogramMaxTrigger());
          }
          hash = (29 * hash) + getUnknownFields().hashCode();
          memoizedHashCode = hash;
          return hash;
        }

        public static perfetto.protos.ChromeMetadata.BackgroundTracingMetadata.TriggerRule.HistogramRule parseFrom(
            java.nio.ByteBuffer data)
            throws com.google.protobuf.InvalidProtocolBufferException {
          return PARSER.parseFrom(data);
        }
        public static perfetto.protos.ChromeMetadata.BackgroundTracingMetadata.TriggerRule.HistogramRule parseFrom(
            java.nio.ByteBuffer data,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws com.google.protobuf.InvalidProtocolBufferException {
          return PARSER.parseFrom(data, extensionRegistry);
        }
        public static perfetto.protos.ChromeMetadata.BackgroundTracingMetadata.TriggerRule.HistogramRule parseFrom(
            com.google.protobuf.ByteString data)
            throws com.google.protobuf.InvalidProtocolBufferException {
          return PARSER.parseFrom(data);
        }
        public static perfetto.protos.ChromeMetadata.BackgroundTracingMetadata.TriggerRule.HistogramRule parseFrom(
            com.google.protobuf.ByteString data,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws com.google.protobuf.InvalidProtocolBufferException {
          return PARSER.parseFrom(data, extensionRegistry);
        }
        public static perfetto.protos.ChromeMetadata.BackgroundTracingMetadata.TriggerRule.HistogramRule parseFrom(byte[] data)
            throws com.google.protobuf.InvalidProtocolBufferException {
          return PARSER.parseFrom(data);
        }
        public static perfetto.protos.ChromeMetadata.BackgroundTracingMetadata.TriggerRule.HistogramRule parseFrom(
            byte[] data,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws com.google.protobuf.InvalidProtocolBufferException {
          return PARSER.parseFrom(data, extensionRegistry);
        }
        public static perfetto.protos.ChromeMetadata.BackgroundTracingMetadata.TriggerRule.HistogramRule parseFrom(java.io.InputStream input)
            throws java.io.IOException {
          return com.google.protobuf.GeneratedMessageV3
              .parseWithIOException(PARSER, input);
        }
        public static perfetto.protos.ChromeMetadata.BackgroundTracingMetadata.TriggerRule.HistogramRule parseFrom(
            java.io.InputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws java.io.IOException {
          return com.google.protobuf.GeneratedMessageV3
              .parseWithIOException(PARSER, input, extensionRegistry);
        }
        public static perfetto.protos.ChromeMetadata.BackgroundTracingMetadata.TriggerRule.HistogramRule parseDelimitedFrom(java.io.InputStream input)
            throws java.io.IOException {
          return com.google.protobuf.GeneratedMessageV3
              .parseDelimitedWithIOException(PARSER, input);
        }
        public static perfetto.protos.ChromeMetadata.BackgroundTracingMetadata.TriggerRule.HistogramRule parseDelimitedFrom(
            java.io.InputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws java.io.IOException {
          return com.google.protobuf.GeneratedMessageV3
              .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
        }
        public static perfetto.protos.ChromeMetadata.BackgroundTracingMetadata.TriggerRule.HistogramRule parseFrom(
            com.google.protobuf.CodedInputStream input)
            throws java.io.IOException {
          return com.google.protobuf.GeneratedMessageV3
              .parseWithIOException(PARSER, input);
        }
        public static perfetto.protos.ChromeMetadata.BackgroundTracingMetadata.TriggerRule.HistogramRule parseFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws java.io.IOException {
          return com.google.protobuf.GeneratedMessageV3
              .parseWithIOException(PARSER, input, extensionRegistry);
        }

        @java.lang.Override
        public Builder newBuilderForType() { return newBuilder(); }
        public static Builder newBuilder() {
          return DEFAULT_INSTANCE.toBuilder();
        }
        public static Builder newBuilder(perfetto.protos.ChromeMetadata.BackgroundTracingMetadata.TriggerRule.HistogramRule prototype) {
          return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
        }
        @java.lang.Override
        public Builder toBuilder() {
          return this == DEFAULT_INSTANCE
              ? new Builder() : new Builder().mergeFrom(this);
        }

        @java.lang.Override
        protected Builder newBuilderForType(
            com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
          Builder builder = new Builder(parent);
          return builder;
        }
        /**
         * <pre>
         * Configuration of histogram trigger.
         * </pre>
         *
         * Protobuf type {@code perfetto.protos.BackgroundTracingMetadata.TriggerRule.HistogramRule}
         */
        public static final class Builder extends
            com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
            // @@protoc_insertion_point(builder_implements:perfetto.protos.BackgroundTracingMetadata.TriggerRule.HistogramRule)
            perfetto.protos.ChromeMetadata.BackgroundTracingMetadata.TriggerRule.HistogramRuleOrBuilder {
          public static final com.google.protobuf.Descriptors.Descriptor
              getDescriptor() {
            return perfetto.protos.ChromeMetadata.internal_static_perfetto_protos_BackgroundTracingMetadata_TriggerRule_HistogramRule_descriptor;
          }

          @java.lang.Override
          protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
              internalGetFieldAccessorTable() {
            return perfetto.protos.ChromeMetadata.internal_static_perfetto_protos_BackgroundTracingMetadata_TriggerRule_HistogramRule_fieldAccessorTable
                .ensureFieldAccessorsInitialized(
                    perfetto.protos.ChromeMetadata.BackgroundTracingMetadata.TriggerRule.HistogramRule.class, perfetto.protos.ChromeMetadata.BackgroundTracingMetadata.TriggerRule.HistogramRule.Builder.class);
          }

          // Construct using perfetto.protos.ChromeMetadata.BackgroundTracingMetadata.TriggerRule.HistogramRule.newBuilder()
          private Builder() {

          }

          private Builder(
              com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
            super(parent);

          }
          @java.lang.Override
          public Builder clear() {
            super.clear();
            bitField0_ = 0;
            histogramNameHash_ = 0L;
            histogramMinTrigger_ = 0L;
            histogramMaxTrigger_ = 0L;
            return this;
          }

          @java.lang.Override
          public com.google.protobuf.Descriptors.Descriptor
              getDescriptorForType() {
            return perfetto.protos.ChromeMetadata.internal_static_perfetto_protos_BackgroundTracingMetadata_TriggerRule_HistogramRule_descriptor;
          }

          @java.lang.Override
          public perfetto.protos.ChromeMetadata.BackgroundTracingMetadata.TriggerRule.HistogramRule getDefaultInstanceForType() {
            return perfetto.protos.ChromeMetadata.BackgroundTracingMetadata.TriggerRule.HistogramRule.getDefaultInstance();
          }

          @java.lang.Override
          public perfetto.protos.ChromeMetadata.BackgroundTracingMetadata.TriggerRule.HistogramRule build() {
            perfetto.protos.ChromeMetadata.BackgroundTracingMetadata.TriggerRule.HistogramRule result = buildPartial();
            if (!result.isInitialized()) {
              throw newUninitializedMessageException(result);
            }
            return result;
          }

          @java.lang.Override
          public perfetto.protos.ChromeMetadata.BackgroundTracingMetadata.TriggerRule.HistogramRule buildPartial() {
            perfetto.protos.ChromeMetadata.BackgroundTracingMetadata.TriggerRule.HistogramRule result = new perfetto.protos.ChromeMetadata.BackgroundTracingMetadata.TriggerRule.HistogramRule(this);
            if (bitField0_ != 0) { buildPartial0(result); }
            onBuilt();
            return result;
          }

          private void buildPartial0(perfetto.protos.ChromeMetadata.BackgroundTracingMetadata.TriggerRule.HistogramRule result) {
            int from_bitField0_ = bitField0_;
            int to_bitField0_ = 0;
            if (((from_bitField0_ & 0x00000001) != 0)) {
              result.histogramNameHash_ = histogramNameHash_;
              to_bitField0_ |= 0x00000001;
            }
            if (((from_bitField0_ & 0x00000002) != 0)) {
              result.histogramMinTrigger_ = histogramMinTrigger_;
              to_bitField0_ |= 0x00000002;
            }
            if (((from_bitField0_ & 0x00000004) != 0)) {
              result.histogramMaxTrigger_ = histogramMaxTrigger_;
              to_bitField0_ |= 0x00000004;
            }
            result.bitField0_ |= to_bitField0_;
          }

          @java.lang.Override
          public Builder clone() {
            return super.clone();
          }
          @java.lang.Override
          public Builder setField(
              com.google.protobuf.Descriptors.FieldDescriptor field,
              java.lang.Object value) {
            return super.setField(field, value);
          }
          @java.lang.Override
          public Builder clearField(
              com.google.protobuf.Descriptors.FieldDescriptor field) {
            return super.clearField(field);
          }
          @java.lang.Override
          public Builder clearOneof(
              com.google.protobuf.Descriptors.OneofDescriptor oneof) {
            return super.clearOneof(oneof);
          }
          @java.lang.Override
          public Builder setRepeatedField(
              com.google.protobuf.Descriptors.FieldDescriptor field,
              int index, java.lang.Object value) {
            return super.setRepeatedField(field, index, value);
          }
          @java.lang.Override
          public Builder addRepeatedField(
              com.google.protobuf.Descriptors.FieldDescriptor field,
              java.lang.Object value) {
            return super.addRepeatedField(field, value);
          }
          @java.lang.Override
          public Builder mergeFrom(com.google.protobuf.Message other) {
            if (other instanceof perfetto.protos.ChromeMetadata.BackgroundTracingMetadata.TriggerRule.HistogramRule) {
              return mergeFrom((perfetto.protos.ChromeMetadata.BackgroundTracingMetadata.TriggerRule.HistogramRule)other);
            } else {
              super.mergeFrom(other);
              return this;
            }
          }

          public Builder mergeFrom(perfetto.protos.ChromeMetadata.BackgroundTracingMetadata.TriggerRule.HistogramRule other) {
            if (other == perfetto.protos.ChromeMetadata.BackgroundTracingMetadata.TriggerRule.HistogramRule.getDefaultInstance()) return this;
            if (other.hasHistogramNameHash()) {
              setHistogramNameHash(other.getHistogramNameHash());
            }
            if (other.hasHistogramMinTrigger()) {
              setHistogramMinTrigger(other.getHistogramMinTrigger());
            }
            if (other.hasHistogramMaxTrigger()) {
              setHistogramMaxTrigger(other.getHistogramMaxTrigger());
            }
            this.mergeUnknownFields(other.getUnknownFields());
            onChanged();
            return this;
          }

          @java.lang.Override
          public final boolean isInitialized() {
            return true;
          }

          @java.lang.Override
          public Builder mergeFrom(
              com.google.protobuf.CodedInputStream input,
              com.google.protobuf.ExtensionRegistryLite extensionRegistry)
              throws java.io.IOException {
            if (extensionRegistry == null) {
              throw new java.lang.NullPointerException();
            }
            try {
              boolean done = false;
              while (!done) {
                int tag = input.readTag();
                switch (tag) {
                  case 0:
                    done = true;
                    break;
                  case 9: {
                    histogramNameHash_ = input.readFixed64();
                    bitField0_ |= 0x00000001;
                    break;
                  } // case 9
                  case 16: {
                    histogramMinTrigger_ = input.readInt64();
                    bitField0_ |= 0x00000002;
                    break;
                  } // case 16
                  case 24: {
                    histogramMaxTrigger_ = input.readInt64();
                    bitField0_ |= 0x00000004;
                    break;
                  } // case 24
                  default: {
                    if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                      done = true; // was an endgroup tag
                    }
                    break;
                  } // default:
                } // switch (tag)
              } // while (!done)
            } catch (com.google.protobuf.InvalidProtocolBufferException e) {
              throw e.unwrapIOException();
            } finally {
              onChanged();
            } // finally
            return this;
          }
          private int bitField0_;

          private long histogramNameHash_ ;
          /**
           * <pre>
           * UMA histogram name hash, same as HistogramEventProto.name_hash.
           * </pre>
           *
           * <code>optional fixed64 histogram_name_hash = 1;</code>
           * @return Whether the histogramNameHash field is set.
           */
          @java.lang.Override
          public boolean hasHistogramNameHash() {
            return ((bitField0_ & 0x00000001) != 0);
          }
          /**
           * <pre>
           * UMA histogram name hash, same as HistogramEventProto.name_hash.
           * </pre>
           *
           * <code>optional fixed64 histogram_name_hash = 1;</code>
           * @return The histogramNameHash.
           */
          @java.lang.Override
          public long getHistogramNameHash() {
            return histogramNameHash_;
          }
          /**
           * <pre>
           * UMA histogram name hash, same as HistogramEventProto.name_hash.
           * </pre>
           *
           * <code>optional fixed64 histogram_name_hash = 1;</code>
           * @param value The histogramNameHash to set.
           * @return This builder for chaining.
           */
          public Builder setHistogramNameHash(long value) {
            
            histogramNameHash_ = value;
            bitField0_ |= 0x00000001;
            onChanged();
            return this;
          }
          /**
           * <pre>
           * UMA histogram name hash, same as HistogramEventProto.name_hash.
           * </pre>
           *
           * <code>optional fixed64 histogram_name_hash = 1;</code>
           * @return This builder for chaining.
           */
          public Builder clearHistogramNameHash() {
            bitField0_ = (bitField0_ & ~0x00000001);
            histogramNameHash_ = 0L;
            onChanged();
            return this;
          }

          private long histogramMinTrigger_ ;
          /**
           * <pre>
           * Range of values of the histogram that activates trigger.
           * </pre>
           *
           * <code>optional int64 histogram_min_trigger = 2;</code>
           * @return Whether the histogramMinTrigger field is set.
           */
          @java.lang.Override
          public boolean hasHistogramMinTrigger() {
            return ((bitField0_ & 0x00000002) != 0);
          }
          /**
           * <pre>
           * Range of values of the histogram that activates trigger.
           * </pre>
           *
           * <code>optional int64 histogram_min_trigger = 2;</code>
           * @return The histogramMinTrigger.
           */
          @java.lang.Override
          public long getHistogramMinTrigger() {
            return histogramMinTrigger_;
          }
          /**
           * <pre>
           * Range of values of the histogram that activates trigger.
           * </pre>
           *
           * <code>optional int64 histogram_min_trigger = 2;</code>
           * @param value The histogramMinTrigger to set.
           * @return This builder for chaining.
           */
          public Builder setHistogramMinTrigger(long value) {
            
            histogramMinTrigger_ = value;
            bitField0_ |= 0x00000002;
            onChanged();
            return this;
          }
          /**
           * <pre>
           * Range of values of the histogram that activates trigger.
           * </pre>
           *
           * <code>optional int64 histogram_min_trigger = 2;</code>
           * @return This builder for chaining.
           */
          public Builder clearHistogramMinTrigger() {
            bitField0_ = (bitField0_ & ~0x00000002);
            histogramMinTrigger_ = 0L;
            onChanged();
            return this;
          }

          private long histogramMaxTrigger_ ;
          /**
           * <code>optional int64 histogram_max_trigger = 3;</code>
           * @return Whether the histogramMaxTrigger field is set.
           */
          @java.lang.Override
          public boolean hasHistogramMaxTrigger() {
            return ((bitField0_ & 0x00000004) != 0);
          }
          /**
           * <code>optional int64 histogram_max_trigger = 3;</code>
           * @return The histogramMaxTrigger.
           */
          @java.lang.Override
          public long getHistogramMaxTrigger() {
            return histogramMaxTrigger_;
          }
          /**
           * <code>optional int64 histogram_max_trigger = 3;</code>
           * @param value The histogramMaxTrigger to set.
           * @return This builder for chaining.
           */
          public Builder setHistogramMaxTrigger(long value) {
            
            histogramMaxTrigger_ = value;
            bitField0_ |= 0x00000004;
            onChanged();
            return this;
          }
          /**
           * <code>optional int64 histogram_max_trigger = 3;</code>
           * @return This builder for chaining.
           */
          public Builder clearHistogramMaxTrigger() {
            bitField0_ = (bitField0_ & ~0x00000004);
            histogramMaxTrigger_ = 0L;
            onChanged();
            return this;
          }
          @java.lang.Override
          public final Builder setUnknownFields(
              final com.google.protobuf.UnknownFieldSet unknownFields) {
            return super.setUnknownFields(unknownFields);
          }

          @java.lang.Override
          public final Builder mergeUnknownFields(
              final com.google.protobuf.UnknownFieldSet unknownFields) {
            return super.mergeUnknownFields(unknownFields);
          }


          // @@protoc_insertion_point(builder_scope:perfetto.protos.BackgroundTracingMetadata.TriggerRule.HistogramRule)
        }

        // @@protoc_insertion_point(class_scope:perfetto.protos.BackgroundTracingMetadata.TriggerRule.HistogramRule)
        private static final perfetto.protos.ChromeMetadata.BackgroundTracingMetadata.TriggerRule.HistogramRule DEFAULT_INSTANCE;
        static {
          DEFAULT_INSTANCE = new perfetto.protos.ChromeMetadata.BackgroundTracingMetadata.TriggerRule.HistogramRule();
        }

        public static perfetto.protos.ChromeMetadata.BackgroundTracingMetadata.TriggerRule.HistogramRule getDefaultInstance() {
          return DEFAULT_INSTANCE;
        }

        @java.lang.Deprecated public static final com.google.protobuf.Parser<HistogramRule>
            PARSER = new com.google.protobuf.AbstractParser<HistogramRule>() {
          @java.lang.Override
          public HistogramRule parsePartialFrom(
              com.google.protobuf.CodedInputStream input,
              com.google.protobuf.ExtensionRegistryLite extensionRegistry)
              throws com.google.protobuf.InvalidProtocolBufferException {
            Builder builder = newBuilder();
            try {
              builder.mergeFrom(input, extensionRegistry);
            } catch (com.google.protobuf.InvalidProtocolBufferException e) {
              throw e.setUnfinishedMessage(builder.buildPartial());
            } catch (com.google.protobuf.UninitializedMessageException e) {
              throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
            } catch (java.io.IOException e) {
              throw new com.google.protobuf.InvalidProtocolBufferException(e)
                  .setUnfinishedMessage(builder.buildPartial());
            }
            return builder.buildPartial();
          }
        };

        public static com.google.protobuf.Parser<HistogramRule> parser() {
          return PARSER;
        }

        @java.lang.Override
        public com.google.protobuf.Parser<HistogramRule> getParserForType() {
          return PARSER;
        }

        @java.lang.Override
        public perfetto.protos.ChromeMetadata.BackgroundTracingMetadata.TriggerRule.HistogramRule getDefaultInstanceForType() {
          return DEFAULT_INSTANCE;
        }

      }

      public interface NamedRuleOrBuilder extends
          // @@protoc_insertion_point(interface_extends:perfetto.protos.BackgroundTracingMetadata.TriggerRule.NamedRule)
          com.google.protobuf.MessageOrBuilder {

        /**
         * <code>optional .perfetto.protos.BackgroundTracingMetadata.TriggerRule.NamedRule.EventType event_type = 1;</code>
         * @return Whether the eventType field is set.
         */
        boolean hasEventType();
        /**
         * <code>optional .perfetto.protos.BackgroundTracingMetadata.TriggerRule.NamedRule.EventType event_type = 1;</code>
         * @return The eventType.
         */
        perfetto.protos.ChromeMetadata.BackgroundTracingMetadata.TriggerRule.NamedRule.EventType getEventType();

        /**
         * <pre>
         * If |event_type| is CONTENT_TRIGGER, then this stores the hash of the
         * content-trigger that actually fired.
         * </pre>
         *
         * <code>optional fixed64 content_trigger_name_hash = 2;</code>
         * @return Whether the contentTriggerNameHash field is set.
         */
        boolean hasContentTriggerNameHash();
        /**
         * <pre>
         * If |event_type| is CONTENT_TRIGGER, then this stores the hash of the
         * content-trigger that actually fired.
         * </pre>
         *
         * <code>optional fixed64 content_trigger_name_hash = 2;</code>
         * @return The contentTriggerNameHash.
         */
        long getContentTriggerNameHash();
      }
      /**
       * <pre>
       * Configuration of named trigger.
       * </pre>
       *
       * Protobuf type {@code perfetto.protos.BackgroundTracingMetadata.TriggerRule.NamedRule}
       */
      public static final class NamedRule extends
          com.google.protobuf.GeneratedMessageV3 implements
          // @@protoc_insertion_point(message_implements:perfetto.protos.BackgroundTracingMetadata.TriggerRule.NamedRule)
          NamedRuleOrBuilder {
      private static final long serialVersionUID = 0L;
        // Use NamedRule.newBuilder() to construct.
        private NamedRule(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
          super(builder);
        }
        private NamedRule() {
          eventType_ = 0;
        }

        @java.lang.Override
        @SuppressWarnings({"unused"})
        protected java.lang.Object newInstance(
            UnusedPrivateParameter unused) {
          return new NamedRule();
        }

        @java.lang.Override
        public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
          return this.unknownFields;
        }
        public static final com.google.protobuf.Descriptors.Descriptor
            getDescriptor() {
          return perfetto.protos.ChromeMetadata.internal_static_perfetto_protos_BackgroundTracingMetadata_TriggerRule_NamedRule_descriptor;
        }

        @java.lang.Override
        protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
            internalGetFieldAccessorTable() {
          return perfetto.protos.ChromeMetadata.internal_static_perfetto_protos_BackgroundTracingMetadata_TriggerRule_NamedRule_fieldAccessorTable
              .ensureFieldAccessorsInitialized(
                  perfetto.protos.ChromeMetadata.BackgroundTracingMetadata.TriggerRule.NamedRule.class, perfetto.protos.ChromeMetadata.BackgroundTracingMetadata.TriggerRule.NamedRule.Builder.class);
        }

        /**
         * Protobuf enum {@code perfetto.protos.BackgroundTracingMetadata.TriggerRule.NamedRule.EventType}
         */
        public enum EventType
            implements com.google.protobuf.ProtocolMessageEnum {
          /**
           * <code>UNSPECIFIED = 0;</code>
           */
          UNSPECIFIED(0),
          /**
           * <code>SESSION_RESTORE = 1;</code>
           */
          SESSION_RESTORE(1),
          /**
           * <code>NAVIGATION = 2;</code>
           */
          NAVIGATION(2),
          /**
           * <code>STARTUP = 3;</code>
           */
          STARTUP(3),
          /**
           * <code>REACHED_CODE = 4;</code>
           */
          REACHED_CODE(4),
          /**
           * <code>CONTENT_TRIGGER = 5;</code>
           */
          CONTENT_TRIGGER(5),
          /**
           * <code>TEST_RULE = 1000;</code>
           */
          TEST_RULE(1000),
          ;

          /**
           * <code>UNSPECIFIED = 0;</code>
           */
          public static final int UNSPECIFIED_VALUE = 0;
          /**
           * <code>SESSION_RESTORE = 1;</code>
           */
          public static final int SESSION_RESTORE_VALUE = 1;
          /**
           * <code>NAVIGATION = 2;</code>
           */
          public static final int NAVIGATION_VALUE = 2;
          /**
           * <code>STARTUP = 3;</code>
           */
          public static final int STARTUP_VALUE = 3;
          /**
           * <code>REACHED_CODE = 4;</code>
           */
          public static final int REACHED_CODE_VALUE = 4;
          /**
           * <code>CONTENT_TRIGGER = 5;</code>
           */
          public static final int CONTENT_TRIGGER_VALUE = 5;
          /**
           * <code>TEST_RULE = 1000;</code>
           */
          public static final int TEST_RULE_VALUE = 1000;


          public final int getNumber() {
            return value;
          }

          /**
           * @param value The numeric wire value of the corresponding enum entry.
           * @return The enum associated with the given numeric wire value.
           * @deprecated Use {@link #forNumber(int)} instead.
           */
          @java.lang.Deprecated
          public static EventType valueOf(int value) {
            return forNumber(value);
          }

          /**
           * @param value The numeric wire value of the corresponding enum entry.
           * @return The enum associated with the given numeric wire value.
           */
          public static EventType forNumber(int value) {
            switch (value) {
              case 0: return UNSPECIFIED;
              case 1: return SESSION_RESTORE;
              case 2: return NAVIGATION;
              case 3: return STARTUP;
              case 4: return REACHED_CODE;
              case 5: return CONTENT_TRIGGER;
              case 1000: return TEST_RULE;
              default: return null;
            }
          }

          public static com.google.protobuf.Internal.EnumLiteMap<EventType>
              internalGetValueMap() {
            return internalValueMap;
          }
          private static final com.google.protobuf.Internal.EnumLiteMap<
              EventType> internalValueMap =
                new com.google.protobuf.Internal.EnumLiteMap<EventType>() {
                  public EventType findValueByNumber(int number) {
                    return EventType.forNumber(number);
                  }
                };

          public final com.google.protobuf.Descriptors.EnumValueDescriptor
              getValueDescriptor() {
            return getDescriptor().getValues().get(ordinal());
          }
          public final com.google.protobuf.Descriptors.EnumDescriptor
              getDescriptorForType() {
            return getDescriptor();
          }
          public static final com.google.protobuf.Descriptors.EnumDescriptor
              getDescriptor() {
            return perfetto.protos.ChromeMetadata.BackgroundTracingMetadata.TriggerRule.NamedRule.getDescriptor().getEnumTypes().get(0);
          }

          private static final EventType[] VALUES = values();

          public static EventType valueOf(
              com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
            if (desc.getType() != getDescriptor()) {
              throw new java.lang.IllegalArgumentException(
                "EnumValueDescriptor is not for this type.");
            }
            return VALUES[desc.getIndex()];
          }

          private final int value;

          private EventType(int value) {
            this.value = value;
          }

          // @@protoc_insertion_point(enum_scope:perfetto.protos.BackgroundTracingMetadata.TriggerRule.NamedRule.EventType)
        }

        private int bitField0_;
        public static final int EVENT_TYPE_FIELD_NUMBER = 1;
        private int eventType_ = 0;
        /**
         * <code>optional .perfetto.protos.BackgroundTracingMetadata.TriggerRule.NamedRule.EventType event_type = 1;</code>
         * @return Whether the eventType field is set.
         */
        @java.lang.Override public boolean hasEventType() {
          return ((bitField0_ & 0x00000001) != 0);
        }
        /**
         * <code>optional .perfetto.protos.BackgroundTracingMetadata.TriggerRule.NamedRule.EventType event_type = 1;</code>
         * @return The eventType.
         */
        @java.lang.Override public perfetto.protos.ChromeMetadata.BackgroundTracingMetadata.TriggerRule.NamedRule.EventType getEventType() {
          perfetto.protos.ChromeMetadata.BackgroundTracingMetadata.TriggerRule.NamedRule.EventType result = perfetto.protos.ChromeMetadata.BackgroundTracingMetadata.TriggerRule.NamedRule.EventType.forNumber(eventType_);
          return result == null ? perfetto.protos.ChromeMetadata.BackgroundTracingMetadata.TriggerRule.NamedRule.EventType.UNSPECIFIED : result;
        }

        public static final int CONTENT_TRIGGER_NAME_HASH_FIELD_NUMBER = 2;
        private long contentTriggerNameHash_ = 0L;
        /**
         * <pre>
         * If |event_type| is CONTENT_TRIGGER, then this stores the hash of the
         * content-trigger that actually fired.
         * </pre>
         *
         * <code>optional fixed64 content_trigger_name_hash = 2;</code>
         * @return Whether the contentTriggerNameHash field is set.
         */
        @java.lang.Override
        public boolean hasContentTriggerNameHash() {
          return ((bitField0_ & 0x00000002) != 0);
        }
        /**
         * <pre>
         * If |event_type| is CONTENT_TRIGGER, then this stores the hash of the
         * content-trigger that actually fired.
         * </pre>
         *
         * <code>optional fixed64 content_trigger_name_hash = 2;</code>
         * @return The contentTriggerNameHash.
         */
        @java.lang.Override
        public long getContentTriggerNameHash() {
          return contentTriggerNameHash_;
        }

        private byte memoizedIsInitialized = -1;
        @java.lang.Override
        public final boolean isInitialized() {
          byte isInitialized = memoizedIsInitialized;
          if (isInitialized == 1) return true;
          if (isInitialized == 0) return false;

          memoizedIsInitialized = 1;
          return true;
        }

        @java.lang.Override
        public void writeTo(com.google.protobuf.CodedOutputStream output)
                            throws java.io.IOException {
          if (((bitField0_ & 0x00000001) != 0)) {
            output.writeEnum(1, eventType_);
          }
          if (((bitField0_ & 0x00000002) != 0)) {
            output.writeFixed64(2, contentTriggerNameHash_);
          }
          getUnknownFields().writeTo(output);
        }

        @java.lang.Override
        public int getSerializedSize() {
          int size = memoizedSize;
          if (size != -1) return size;

          size = 0;
          if (((bitField0_ & 0x00000001) != 0)) {
            size += com.google.protobuf.CodedOutputStream
              .computeEnumSize(1, eventType_);
          }
          if (((bitField0_ & 0x00000002) != 0)) {
            size += com.google.protobuf.CodedOutputStream
              .computeFixed64Size(2, contentTriggerNameHash_);
          }
          size += getUnknownFields().getSerializedSize();
          memoizedSize = size;
          return size;
        }

        @java.lang.Override
        public boolean equals(final java.lang.Object obj) {
          if (obj == this) {
           return true;
          }
          if (!(obj instanceof perfetto.protos.ChromeMetadata.BackgroundTracingMetadata.TriggerRule.NamedRule)) {
            return super.equals(obj);
          }
          perfetto.protos.ChromeMetadata.BackgroundTracingMetadata.TriggerRule.NamedRule other = (perfetto.protos.ChromeMetadata.BackgroundTracingMetadata.TriggerRule.NamedRule) obj;

          if (hasEventType() != other.hasEventType()) return false;
          if (hasEventType()) {
            if (eventType_ != other.eventType_) return false;
          }
          if (hasContentTriggerNameHash() != other.hasContentTriggerNameHash()) return false;
          if (hasContentTriggerNameHash()) {
            if (getContentTriggerNameHash()
                != other.getContentTriggerNameHash()) return false;
          }
          if (!getUnknownFields().equals(other.getUnknownFields())) return false;
          return true;
        }

        @java.lang.Override
        public int hashCode() {
          if (memoizedHashCode != 0) {
            return memoizedHashCode;
          }
          int hash = 41;
          hash = (19 * hash) + getDescriptor().hashCode();
          if (hasEventType()) {
            hash = (37 * hash) + EVENT_TYPE_FIELD_NUMBER;
            hash = (53 * hash) + eventType_;
          }
          if (hasContentTriggerNameHash()) {
            hash = (37 * hash) + CONTENT_TRIGGER_NAME_HASH_FIELD_NUMBER;
            hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
                getContentTriggerNameHash());
          }
          hash = (29 * hash) + getUnknownFields().hashCode();
          memoizedHashCode = hash;
          return hash;
        }

        public static perfetto.protos.ChromeMetadata.BackgroundTracingMetadata.TriggerRule.NamedRule parseFrom(
            java.nio.ByteBuffer data)
            throws com.google.protobuf.InvalidProtocolBufferException {
          return PARSER.parseFrom(data);
        }
        public static perfetto.protos.ChromeMetadata.BackgroundTracingMetadata.TriggerRule.NamedRule parseFrom(
            java.nio.ByteBuffer data,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws com.google.protobuf.InvalidProtocolBufferException {
          return PARSER.parseFrom(data, extensionRegistry);
        }
        public static perfetto.protos.ChromeMetadata.BackgroundTracingMetadata.TriggerRule.NamedRule parseFrom(
            com.google.protobuf.ByteString data)
            throws com.google.protobuf.InvalidProtocolBufferException {
          return PARSER.parseFrom(data);
        }
        public static perfetto.protos.ChromeMetadata.BackgroundTracingMetadata.TriggerRule.NamedRule parseFrom(
            com.google.protobuf.ByteString data,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws com.google.protobuf.InvalidProtocolBufferException {
          return PARSER.parseFrom(data, extensionRegistry);
        }
        public static perfetto.protos.ChromeMetadata.BackgroundTracingMetadata.TriggerRule.NamedRule parseFrom(byte[] data)
            throws com.google.protobuf.InvalidProtocolBufferException {
          return PARSER.parseFrom(data);
        }
        public static perfetto.protos.ChromeMetadata.BackgroundTracingMetadata.TriggerRule.NamedRule parseFrom(
            byte[] data,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws com.google.protobuf.InvalidProtocolBufferException {
          return PARSER.parseFrom(data, extensionRegistry);
        }
        public static perfetto.protos.ChromeMetadata.BackgroundTracingMetadata.TriggerRule.NamedRule parseFrom(java.io.InputStream input)
            throws java.io.IOException {
          return com.google.protobuf.GeneratedMessageV3
              .parseWithIOException(PARSER, input);
        }
        public static perfetto.protos.ChromeMetadata.BackgroundTracingMetadata.TriggerRule.NamedRule parseFrom(
            java.io.InputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws java.io.IOException {
          return com.google.protobuf.GeneratedMessageV3
              .parseWithIOException(PARSER, input, extensionRegistry);
        }
        public static perfetto.protos.ChromeMetadata.BackgroundTracingMetadata.TriggerRule.NamedRule parseDelimitedFrom(java.io.InputStream input)
            throws java.io.IOException {
          return com.google.protobuf.GeneratedMessageV3
              .parseDelimitedWithIOException(PARSER, input);
        }
        public static perfetto.protos.ChromeMetadata.BackgroundTracingMetadata.TriggerRule.NamedRule parseDelimitedFrom(
            java.io.InputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws java.io.IOException {
          return com.google.protobuf.GeneratedMessageV3
              .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
        }
        public static perfetto.protos.ChromeMetadata.BackgroundTracingMetadata.TriggerRule.NamedRule parseFrom(
            com.google.protobuf.CodedInputStream input)
            throws java.io.IOException {
          return com.google.protobuf.GeneratedMessageV3
              .parseWithIOException(PARSER, input);
        }
        public static perfetto.protos.ChromeMetadata.BackgroundTracingMetadata.TriggerRule.NamedRule parseFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws java.io.IOException {
          return com.google.protobuf.GeneratedMessageV3
              .parseWithIOException(PARSER, input, extensionRegistry);
        }

        @java.lang.Override
        public Builder newBuilderForType() { return newBuilder(); }
        public static Builder newBuilder() {
          return DEFAULT_INSTANCE.toBuilder();
        }
        public static Builder newBuilder(perfetto.protos.ChromeMetadata.BackgroundTracingMetadata.TriggerRule.NamedRule prototype) {
          return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
        }
        @java.lang.Override
        public Builder toBuilder() {
          return this == DEFAULT_INSTANCE
              ? new Builder() : new Builder().mergeFrom(this);
        }

        @java.lang.Override
        protected Builder newBuilderForType(
            com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
          Builder builder = new Builder(parent);
          return builder;
        }
        /**
         * <pre>
         * Configuration of named trigger.
         * </pre>
         *
         * Protobuf type {@code perfetto.protos.BackgroundTracingMetadata.TriggerRule.NamedRule}
         */
        public static final class Builder extends
            com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
            // @@protoc_insertion_point(builder_implements:perfetto.protos.BackgroundTracingMetadata.TriggerRule.NamedRule)
            perfetto.protos.ChromeMetadata.BackgroundTracingMetadata.TriggerRule.NamedRuleOrBuilder {
          public static final com.google.protobuf.Descriptors.Descriptor
              getDescriptor() {
            return perfetto.protos.ChromeMetadata.internal_static_perfetto_protos_BackgroundTracingMetadata_TriggerRule_NamedRule_descriptor;
          }

          @java.lang.Override
          protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
              internalGetFieldAccessorTable() {
            return perfetto.protos.ChromeMetadata.internal_static_perfetto_protos_BackgroundTracingMetadata_TriggerRule_NamedRule_fieldAccessorTable
                .ensureFieldAccessorsInitialized(
                    perfetto.protos.ChromeMetadata.BackgroundTracingMetadata.TriggerRule.NamedRule.class, perfetto.protos.ChromeMetadata.BackgroundTracingMetadata.TriggerRule.NamedRule.Builder.class);
          }

          // Construct using perfetto.protos.ChromeMetadata.BackgroundTracingMetadata.TriggerRule.NamedRule.newBuilder()
          private Builder() {

          }

          private Builder(
              com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
            super(parent);

          }
          @java.lang.Override
          public Builder clear() {
            super.clear();
            bitField0_ = 0;
            eventType_ = 0;
            contentTriggerNameHash_ = 0L;
            return this;
          }

          @java.lang.Override
          public com.google.protobuf.Descriptors.Descriptor
              getDescriptorForType() {
            return perfetto.protos.ChromeMetadata.internal_static_perfetto_protos_BackgroundTracingMetadata_TriggerRule_NamedRule_descriptor;
          }

          @java.lang.Override
          public perfetto.protos.ChromeMetadata.BackgroundTracingMetadata.TriggerRule.NamedRule getDefaultInstanceForType() {
            return perfetto.protos.ChromeMetadata.BackgroundTracingMetadata.TriggerRule.NamedRule.getDefaultInstance();
          }

          @java.lang.Override
          public perfetto.protos.ChromeMetadata.BackgroundTracingMetadata.TriggerRule.NamedRule build() {
            perfetto.protos.ChromeMetadata.BackgroundTracingMetadata.TriggerRule.NamedRule result = buildPartial();
            if (!result.isInitialized()) {
              throw newUninitializedMessageException(result);
            }
            return result;
          }

          @java.lang.Override
          public perfetto.protos.ChromeMetadata.BackgroundTracingMetadata.TriggerRule.NamedRule buildPartial() {
            perfetto.protos.ChromeMetadata.BackgroundTracingMetadata.TriggerRule.NamedRule result = new perfetto.protos.ChromeMetadata.BackgroundTracingMetadata.TriggerRule.NamedRule(this);
            if (bitField0_ != 0) { buildPartial0(result); }
            onBuilt();
            return result;
          }

          private void buildPartial0(perfetto.protos.ChromeMetadata.BackgroundTracingMetadata.TriggerRule.NamedRule result) {
            int from_bitField0_ = bitField0_;
            int to_bitField0_ = 0;
            if (((from_bitField0_ & 0x00000001) != 0)) {
              result.eventType_ = eventType_;
              to_bitField0_ |= 0x00000001;
            }
            if (((from_bitField0_ & 0x00000002) != 0)) {
              result.contentTriggerNameHash_ = contentTriggerNameHash_;
              to_bitField0_ |= 0x00000002;
            }
            result.bitField0_ |= to_bitField0_;
          }

          @java.lang.Override
          public Builder clone() {
            return super.clone();
          }
          @java.lang.Override
          public Builder setField(
              com.google.protobuf.Descriptors.FieldDescriptor field,
              java.lang.Object value) {
            return super.setField(field, value);
          }
          @java.lang.Override
          public Builder clearField(
              com.google.protobuf.Descriptors.FieldDescriptor field) {
            return super.clearField(field);
          }
          @java.lang.Override
          public Builder clearOneof(
              com.google.protobuf.Descriptors.OneofDescriptor oneof) {
            return super.clearOneof(oneof);
          }
          @java.lang.Override
          public Builder setRepeatedField(
              com.google.protobuf.Descriptors.FieldDescriptor field,
              int index, java.lang.Object value) {
            return super.setRepeatedField(field, index, value);
          }
          @java.lang.Override
          public Builder addRepeatedField(
              com.google.protobuf.Descriptors.FieldDescriptor field,
              java.lang.Object value) {
            return super.addRepeatedField(field, value);
          }
          @java.lang.Override
          public Builder mergeFrom(com.google.protobuf.Message other) {
            if (other instanceof perfetto.protos.ChromeMetadata.BackgroundTracingMetadata.TriggerRule.NamedRule) {
              return mergeFrom((perfetto.protos.ChromeMetadata.BackgroundTracingMetadata.TriggerRule.NamedRule)other);
            } else {
              super.mergeFrom(other);
              return this;
            }
          }

          public Builder mergeFrom(perfetto.protos.ChromeMetadata.BackgroundTracingMetadata.TriggerRule.NamedRule other) {
            if (other == perfetto.protos.ChromeMetadata.BackgroundTracingMetadata.TriggerRule.NamedRule.getDefaultInstance()) return this;
            if (other.hasEventType()) {
              setEventType(other.getEventType());
            }
            if (other.hasContentTriggerNameHash()) {
              setContentTriggerNameHash(other.getContentTriggerNameHash());
            }
            this.mergeUnknownFields(other.getUnknownFields());
            onChanged();
            return this;
          }

          @java.lang.Override
          public final boolean isInitialized() {
            return true;
          }

          @java.lang.Override
          public Builder mergeFrom(
              com.google.protobuf.CodedInputStream input,
              com.google.protobuf.ExtensionRegistryLite extensionRegistry)
              throws java.io.IOException {
            if (extensionRegistry == null) {
              throw new java.lang.NullPointerException();
            }
            try {
              boolean done = false;
              while (!done) {
                int tag = input.readTag();
                switch (tag) {
                  case 0:
                    done = true;
                    break;
                  case 8: {
                    int tmpRaw = input.readEnum();
                    perfetto.protos.ChromeMetadata.BackgroundTracingMetadata.TriggerRule.NamedRule.EventType tmpValue =
                        perfetto.protos.ChromeMetadata.BackgroundTracingMetadata.TriggerRule.NamedRule.EventType.forNumber(tmpRaw);
                    if (tmpValue == null) {
                      mergeUnknownVarintField(1, tmpRaw);
                    } else {
                      eventType_ = tmpRaw;
                      bitField0_ |= 0x00000001;
                    }
                    break;
                  } // case 8
                  case 17: {
                    contentTriggerNameHash_ = input.readFixed64();
                    bitField0_ |= 0x00000002;
                    break;
                  } // case 17
                  default: {
                    if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                      done = true; // was an endgroup tag
                    }
                    break;
                  } // default:
                } // switch (tag)
              } // while (!done)
            } catch (com.google.protobuf.InvalidProtocolBufferException e) {
              throw e.unwrapIOException();
            } finally {
              onChanged();
            } // finally
            return this;
          }
          private int bitField0_;

          private int eventType_ = 0;
          /**
           * <code>optional .perfetto.protos.BackgroundTracingMetadata.TriggerRule.NamedRule.EventType event_type = 1;</code>
           * @return Whether the eventType field is set.
           */
          @java.lang.Override public boolean hasEventType() {
            return ((bitField0_ & 0x00000001) != 0);
          }
          /**
           * <code>optional .perfetto.protos.BackgroundTracingMetadata.TriggerRule.NamedRule.EventType event_type = 1;</code>
           * @return The eventType.
           */
          @java.lang.Override
          public perfetto.protos.ChromeMetadata.BackgroundTracingMetadata.TriggerRule.NamedRule.EventType getEventType() {
            perfetto.protos.ChromeMetadata.BackgroundTracingMetadata.TriggerRule.NamedRule.EventType result = perfetto.protos.ChromeMetadata.BackgroundTracingMetadata.TriggerRule.NamedRule.EventType.forNumber(eventType_);
            return result == null ? perfetto.protos.ChromeMetadata.BackgroundTracingMetadata.TriggerRule.NamedRule.EventType.UNSPECIFIED : result;
          }
          /**
           * <code>optional .perfetto.protos.BackgroundTracingMetadata.TriggerRule.NamedRule.EventType event_type = 1;</code>
           * @param value The eventType to set.
           * @return This builder for chaining.
           */
          public Builder setEventType(perfetto.protos.ChromeMetadata.BackgroundTracingMetadata.TriggerRule.NamedRule.EventType value) {
            if (value == null) {
              throw new NullPointerException();
            }
            bitField0_ |= 0x00000001;
            eventType_ = value.getNumber();
            onChanged();
            return this;
          }
          /**
           * <code>optional .perfetto.protos.BackgroundTracingMetadata.TriggerRule.NamedRule.EventType event_type = 1;</code>
           * @return This builder for chaining.
           */
          public Builder clearEventType() {
            bitField0_ = (bitField0_ & ~0x00000001);
            eventType_ = 0;
            onChanged();
            return this;
          }

          private long contentTriggerNameHash_ ;
          /**
           * <pre>
           * If |event_type| is CONTENT_TRIGGER, then this stores the hash of the
           * content-trigger that actually fired.
           * </pre>
           *
           * <code>optional fixed64 content_trigger_name_hash = 2;</code>
           * @return Whether the contentTriggerNameHash field is set.
           */
          @java.lang.Override
          public boolean hasContentTriggerNameHash() {
            return ((bitField0_ & 0x00000002) != 0);
          }
          /**
           * <pre>
           * If |event_type| is CONTENT_TRIGGER, then this stores the hash of the
           * content-trigger that actually fired.
           * </pre>
           *
           * <code>optional fixed64 content_trigger_name_hash = 2;</code>
           * @return The contentTriggerNameHash.
           */
          @java.lang.Override
          public long getContentTriggerNameHash() {
            return contentTriggerNameHash_;
          }
          /**
           * <pre>
           * If |event_type| is CONTENT_TRIGGER, then this stores the hash of the
           * content-trigger that actually fired.
           * </pre>
           *
           * <code>optional fixed64 content_trigger_name_hash = 2;</code>
           * @param value The contentTriggerNameHash to set.
           * @return This builder for chaining.
           */
          public Builder setContentTriggerNameHash(long value) {
            
            contentTriggerNameHash_ = value;
            bitField0_ |= 0x00000002;
            onChanged();
            return this;
          }
          /**
           * <pre>
           * If |event_type| is CONTENT_TRIGGER, then this stores the hash of the
           * content-trigger that actually fired.
           * </pre>
           *
           * <code>optional fixed64 content_trigger_name_hash = 2;</code>
           * @return This builder for chaining.
           */
          public Builder clearContentTriggerNameHash() {
            bitField0_ = (bitField0_ & ~0x00000002);
            contentTriggerNameHash_ = 0L;
            onChanged();
            return this;
          }
          @java.lang.Override
          public final Builder setUnknownFields(
              final com.google.protobuf.UnknownFieldSet unknownFields) {
            return super.setUnknownFields(unknownFields);
          }

          @java.lang.Override
          public final Builder mergeUnknownFields(
              final com.google.protobuf.UnknownFieldSet unknownFields) {
            return super.mergeUnknownFields(unknownFields);
          }


          // @@protoc_insertion_point(builder_scope:perfetto.protos.BackgroundTracingMetadata.TriggerRule.NamedRule)
        }

        // @@protoc_insertion_point(class_scope:perfetto.protos.BackgroundTracingMetadata.TriggerRule.NamedRule)
        private static final perfetto.protos.ChromeMetadata.BackgroundTracingMetadata.TriggerRule.NamedRule DEFAULT_INSTANCE;
        static {
          DEFAULT_INSTANCE = new perfetto.protos.ChromeMetadata.BackgroundTracingMetadata.TriggerRule.NamedRule();
        }

        public static perfetto.protos.ChromeMetadata.BackgroundTracingMetadata.TriggerRule.NamedRule getDefaultInstance() {
          return DEFAULT_INSTANCE;
        }

        @java.lang.Deprecated public static final com.google.protobuf.Parser<NamedRule>
            PARSER = new com.google.protobuf.AbstractParser<NamedRule>() {
          @java.lang.Override
          public NamedRule parsePartialFrom(
              com.google.protobuf.CodedInputStream input,
              com.google.protobuf.ExtensionRegistryLite extensionRegistry)
              throws com.google.protobuf.InvalidProtocolBufferException {
            Builder builder = newBuilder();
            try {
              builder.mergeFrom(input, extensionRegistry);
            } catch (com.google.protobuf.InvalidProtocolBufferException e) {
              throw e.setUnfinishedMessage(builder.buildPartial());
            } catch (com.google.protobuf.UninitializedMessageException e) {
              throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
            } catch (java.io.IOException e) {
              throw new com.google.protobuf.InvalidProtocolBufferException(e)
                  .setUnfinishedMessage(builder.buildPartial());
            }
            return builder.buildPartial();
          }
        };

        public static com.google.protobuf.Parser<NamedRule> parser() {
          return PARSER;
        }

        @java.lang.Override
        public com.google.protobuf.Parser<NamedRule> getParserForType() {
          return PARSER;
        }

        @java.lang.Override
        public perfetto.protos.ChromeMetadata.BackgroundTracingMetadata.TriggerRule.NamedRule getDefaultInstanceForType() {
          return DEFAULT_INSTANCE;
        }

      }

      private int bitField0_;
      public static final int TRIGGER_TYPE_FIELD_NUMBER = 1;
      private int triggerType_ = 0;
      /**
       * <code>optional .perfetto.protos.BackgroundTracingMetadata.TriggerRule.TriggerType trigger_type = 1;</code>
       * @return Whether the triggerType field is set.
       */
      @java.lang.Override public boolean hasTriggerType() {
        return ((bitField0_ & 0x00000001) != 0);
      }
      /**
       * <code>optional .perfetto.protos.BackgroundTracingMetadata.TriggerRule.TriggerType trigger_type = 1;</code>
       * @return The triggerType.
       */
      @java.lang.Override public perfetto.protos.ChromeMetadata.BackgroundTracingMetadata.TriggerRule.TriggerType getTriggerType() {
        perfetto.protos.ChromeMetadata.BackgroundTracingMetadata.TriggerRule.TriggerType result = perfetto.protos.ChromeMetadata.BackgroundTracingMetadata.TriggerRule.TriggerType.forNumber(triggerType_);
        return result == null ? perfetto.protos.ChromeMetadata.BackgroundTracingMetadata.TriggerRule.TriggerType.TRIGGER_UNSPECIFIED : result;
      }

      public static final int HISTOGRAM_RULE_FIELD_NUMBER = 2;
      private perfetto.protos.ChromeMetadata.BackgroundTracingMetadata.TriggerRule.HistogramRule histogramRule_;
      /**
       * <code>optional .perfetto.protos.BackgroundTracingMetadata.TriggerRule.HistogramRule histogram_rule = 2;</code>
       * @return Whether the histogramRule field is set.
       */
      @java.lang.Override
      public boolean hasHistogramRule() {
        return ((bitField0_ & 0x00000002) != 0);
      }
      /**
       * <code>optional .perfetto.protos.BackgroundTracingMetadata.TriggerRule.HistogramRule histogram_rule = 2;</code>
       * @return The histogramRule.
       */
      @java.lang.Override
      public perfetto.protos.ChromeMetadata.BackgroundTracingMetadata.TriggerRule.HistogramRule getHistogramRule() {
        return histogramRule_ == null ? perfetto.protos.ChromeMetadata.BackgroundTracingMetadata.TriggerRule.HistogramRule.getDefaultInstance() : histogramRule_;
      }
      /**
       * <code>optional .perfetto.protos.BackgroundTracingMetadata.TriggerRule.HistogramRule histogram_rule = 2;</code>
       */
      @java.lang.Override
      public perfetto.protos.ChromeMetadata.BackgroundTracingMetadata.TriggerRule.HistogramRuleOrBuilder getHistogramRuleOrBuilder() {
        return histogramRule_ == null ? perfetto.protos.ChromeMetadata.BackgroundTracingMetadata.TriggerRule.HistogramRule.getDefaultInstance() : histogramRule_;
      }

      public static final int NAMED_RULE_FIELD_NUMBER = 3;
      private perfetto.protos.ChromeMetadata.BackgroundTracingMetadata.TriggerRule.NamedRule namedRule_;
      /**
       * <code>optional .perfetto.protos.BackgroundTracingMetadata.TriggerRule.NamedRule named_rule = 3;</code>
       * @return Whether the namedRule field is set.
       */
      @java.lang.Override
      public boolean hasNamedRule() {
        return ((bitField0_ & 0x00000004) != 0);
      }
      /**
       * <code>optional .perfetto.protos.BackgroundTracingMetadata.TriggerRule.NamedRule named_rule = 3;</code>
       * @return The namedRule.
       */
      @java.lang.Override
      public perfetto.protos.ChromeMetadata.BackgroundTracingMetadata.TriggerRule.NamedRule getNamedRule() {
        return namedRule_ == null ? perfetto.protos.ChromeMetadata.BackgroundTracingMetadata.TriggerRule.NamedRule.getDefaultInstance() : namedRule_;
      }
      /**
       * <code>optional .perfetto.protos.BackgroundTracingMetadata.TriggerRule.NamedRule named_rule = 3;</code>
       */
      @java.lang.Override
      public perfetto.protos.ChromeMetadata.BackgroundTracingMetadata.TriggerRule.NamedRuleOrBuilder getNamedRuleOrBuilder() {
        return namedRule_ == null ? perfetto.protos.ChromeMetadata.BackgroundTracingMetadata.TriggerRule.NamedRule.getDefaultInstance() : namedRule_;
      }

      private byte memoizedIsInitialized = -1;
      @java.lang.Override
      public final boolean isInitialized() {
        byte isInitialized = memoizedIsInitialized;
        if (isInitialized == 1) return true;
        if (isInitialized == 0) return false;

        memoizedIsInitialized = 1;
        return true;
      }

      @java.lang.Override
      public void writeTo(com.google.protobuf.CodedOutputStream output)
                          throws java.io.IOException {
        if (((bitField0_ & 0x00000001) != 0)) {
          output.writeEnum(1, triggerType_);
        }
        if (((bitField0_ & 0x00000002) != 0)) {
          output.writeMessage(2, getHistogramRule());
        }
        if (((bitField0_ & 0x00000004) != 0)) {
          output.writeMessage(3, getNamedRule());
        }
        getUnknownFields().writeTo(output);
      }

      @java.lang.Override
      public int getSerializedSize() {
        int size = memoizedSize;
        if (size != -1) return size;

        size = 0;
        if (((bitField0_ & 0x00000001) != 0)) {
          size += com.google.protobuf.CodedOutputStream
            .computeEnumSize(1, triggerType_);
        }
        if (((bitField0_ & 0x00000002) != 0)) {
          size += com.google.protobuf.CodedOutputStream
            .computeMessageSize(2, getHistogramRule());
        }
        if (((bitField0_ & 0x00000004) != 0)) {
          size += com.google.protobuf.CodedOutputStream
            .computeMessageSize(3, getNamedRule());
        }
        size += getUnknownFields().getSerializedSize();
        memoizedSize = size;
        return size;
      }

      @java.lang.Override
      public boolean equals(final java.lang.Object obj) {
        if (obj == this) {
         return true;
        }
        if (!(obj instanceof perfetto.protos.ChromeMetadata.BackgroundTracingMetadata.TriggerRule)) {
          return super.equals(obj);
        }
        perfetto.protos.ChromeMetadata.BackgroundTracingMetadata.TriggerRule other = (perfetto.protos.ChromeMetadata.BackgroundTracingMetadata.TriggerRule) obj;

        if (hasTriggerType() != other.hasTriggerType()) return false;
        if (hasTriggerType()) {
          if (triggerType_ != other.triggerType_) return false;
        }
        if (hasHistogramRule() != other.hasHistogramRule()) return false;
        if (hasHistogramRule()) {
          if (!getHistogramRule()
              .equals(other.getHistogramRule())) return false;
        }
        if (hasNamedRule() != other.hasNamedRule()) return false;
        if (hasNamedRule()) {
          if (!getNamedRule()
              .equals(other.getNamedRule())) return false;
        }
        if (!getUnknownFields().equals(other.getUnknownFields())) return false;
        return true;
      }

      @java.lang.Override
      public int hashCode() {
        if (memoizedHashCode != 0) {
          return memoizedHashCode;
        }
        int hash = 41;
        hash = (19 * hash) + getDescriptor().hashCode();
        if (hasTriggerType()) {
          hash = (37 * hash) + TRIGGER_TYPE_FIELD_NUMBER;
          hash = (53 * hash) + triggerType_;
        }
        if (hasHistogramRule()) {
          hash = (37 * hash) + HISTOGRAM_RULE_FIELD_NUMBER;
          hash = (53 * hash) + getHistogramRule().hashCode();
        }
        if (hasNamedRule()) {
          hash = (37 * hash) + NAMED_RULE_FIELD_NUMBER;
          hash = (53 * hash) + getNamedRule().hashCode();
        }
        hash = (29 * hash) + getUnknownFields().hashCode();
        memoizedHashCode = hash;
        return hash;
      }

      public static perfetto.protos.ChromeMetadata.BackgroundTracingMetadata.TriggerRule parseFrom(
          java.nio.ByteBuffer data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static perfetto.protos.ChromeMetadata.BackgroundTracingMetadata.TriggerRule parseFrom(
          java.nio.ByteBuffer data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static perfetto.protos.ChromeMetadata.BackgroundTracingMetadata.TriggerRule parseFrom(
          com.google.protobuf.ByteString data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static perfetto.protos.ChromeMetadata.BackgroundTracingMetadata.TriggerRule parseFrom(
          com.google.protobuf.ByteString data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static perfetto.protos.ChromeMetadata.BackgroundTracingMetadata.TriggerRule parseFrom(byte[] data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static perfetto.protos.ChromeMetadata.BackgroundTracingMetadata.TriggerRule parseFrom(
          byte[] data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static perfetto.protos.ChromeMetadata.BackgroundTracingMetadata.TriggerRule parseFrom(java.io.InputStream input)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseWithIOException(PARSER, input);
      }
      public static perfetto.protos.ChromeMetadata.BackgroundTracingMetadata.TriggerRule parseFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseWithIOException(PARSER, input, extensionRegistry);
      }
      public static perfetto.protos.ChromeMetadata.BackgroundTracingMetadata.TriggerRule parseDelimitedFrom(java.io.InputStream input)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseDelimitedWithIOException(PARSER, input);
      }
      public static perfetto.protos.ChromeMetadata.BackgroundTracingMetadata.TriggerRule parseDelimitedFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
      }
      public static perfetto.protos.ChromeMetadata.BackgroundTracingMetadata.TriggerRule parseFrom(
          com.google.protobuf.CodedInputStream input)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseWithIOException(PARSER, input);
      }
      public static perfetto.protos.ChromeMetadata.BackgroundTracingMetadata.TriggerRule parseFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseWithIOException(PARSER, input, extensionRegistry);
      }

      @java.lang.Override
      public Builder newBuilderForType() { return newBuilder(); }
      public static Builder newBuilder() {
        return DEFAULT_INSTANCE.toBuilder();
      }
      public static Builder newBuilder(perfetto.protos.ChromeMetadata.BackgroundTracingMetadata.TriggerRule prototype) {
        return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
      }
      @java.lang.Override
      public Builder toBuilder() {
        return this == DEFAULT_INSTANCE
            ? new Builder() : new Builder().mergeFrom(this);
      }

      @java.lang.Override
      protected Builder newBuilderForType(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        Builder builder = new Builder(parent);
        return builder;
      }
      /**
       * <pre>
       * Information about a trigger rule defined in the experiment config.
       * </pre>
       *
       * Protobuf type {@code perfetto.protos.BackgroundTracingMetadata.TriggerRule}
       */
      public static final class Builder extends
          com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
          // @@protoc_insertion_point(builder_implements:perfetto.protos.BackgroundTracingMetadata.TriggerRule)
          perfetto.protos.ChromeMetadata.BackgroundTracingMetadata.TriggerRuleOrBuilder {
        public static final com.google.protobuf.Descriptors.Descriptor
            getDescriptor() {
          return perfetto.protos.ChromeMetadata.internal_static_perfetto_protos_BackgroundTracingMetadata_TriggerRule_descriptor;
        }

        @java.lang.Override
        protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
            internalGetFieldAccessorTable() {
          return perfetto.protos.ChromeMetadata.internal_static_perfetto_protos_BackgroundTracingMetadata_TriggerRule_fieldAccessorTable
              .ensureFieldAccessorsInitialized(
                  perfetto.protos.ChromeMetadata.BackgroundTracingMetadata.TriggerRule.class, perfetto.protos.ChromeMetadata.BackgroundTracingMetadata.TriggerRule.Builder.class);
        }

        // Construct using perfetto.protos.ChromeMetadata.BackgroundTracingMetadata.TriggerRule.newBuilder()
        private Builder() {
          maybeForceBuilderInitialization();
        }

        private Builder(
            com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
          super(parent);
          maybeForceBuilderInitialization();
        }
        private void maybeForceBuilderInitialization() {
          if (com.google.protobuf.GeneratedMessageV3
                  .alwaysUseFieldBuilders) {
            getHistogramRuleFieldBuilder();
            getNamedRuleFieldBuilder();
          }
        }
        @java.lang.Override
        public Builder clear() {
          super.clear();
          bitField0_ = 0;
          triggerType_ = 0;
          histogramRule_ = null;
          if (histogramRuleBuilder_ != null) {
            histogramRuleBuilder_.dispose();
            histogramRuleBuilder_ = null;
          }
          namedRule_ = null;
          if (namedRuleBuilder_ != null) {
            namedRuleBuilder_.dispose();
            namedRuleBuilder_ = null;
          }
          return this;
        }

        @java.lang.Override
        public com.google.protobuf.Descriptors.Descriptor
            getDescriptorForType() {
          return perfetto.protos.ChromeMetadata.internal_static_perfetto_protos_BackgroundTracingMetadata_TriggerRule_descriptor;
        }

        @java.lang.Override
        public perfetto.protos.ChromeMetadata.BackgroundTracingMetadata.TriggerRule getDefaultInstanceForType() {
          return perfetto.protos.ChromeMetadata.BackgroundTracingMetadata.TriggerRule.getDefaultInstance();
        }

        @java.lang.Override
        public perfetto.protos.ChromeMetadata.BackgroundTracingMetadata.TriggerRule build() {
          perfetto.protos.ChromeMetadata.BackgroundTracingMetadata.TriggerRule result = buildPartial();
          if (!result.isInitialized()) {
            throw newUninitializedMessageException(result);
          }
          return result;
        }

        @java.lang.Override
        public perfetto.protos.ChromeMetadata.BackgroundTracingMetadata.TriggerRule buildPartial() {
          perfetto.protos.ChromeMetadata.BackgroundTracingMetadata.TriggerRule result = new perfetto.protos.ChromeMetadata.BackgroundTracingMetadata.TriggerRule(this);
          if (bitField0_ != 0) { buildPartial0(result); }
          onBuilt();
          return result;
        }

        private void buildPartial0(perfetto.protos.ChromeMetadata.BackgroundTracingMetadata.TriggerRule result) {
          int from_bitField0_ = bitField0_;
          int to_bitField0_ = 0;
          if (((from_bitField0_ & 0x00000001) != 0)) {
            result.triggerType_ = triggerType_;
            to_bitField0_ |= 0x00000001;
          }
          if (((from_bitField0_ & 0x00000002) != 0)) {
            result.histogramRule_ = histogramRuleBuilder_ == null
                ? histogramRule_
                : histogramRuleBuilder_.build();
            to_bitField0_ |= 0x00000002;
          }
          if (((from_bitField0_ & 0x00000004) != 0)) {
            result.namedRule_ = namedRuleBuilder_ == null
                ? namedRule_
                : namedRuleBuilder_.build();
            to_bitField0_ |= 0x00000004;
          }
          result.bitField0_ |= to_bitField0_;
        }

        @java.lang.Override
        public Builder clone() {
          return super.clone();
        }
        @java.lang.Override
        public Builder setField(
            com.google.protobuf.Descriptors.FieldDescriptor field,
            java.lang.Object value) {
          return super.setField(field, value);
        }
        @java.lang.Override
        public Builder clearField(
            com.google.protobuf.Descriptors.FieldDescriptor field) {
          return super.clearField(field);
        }
        @java.lang.Override
        public Builder clearOneof(
            com.google.protobuf.Descriptors.OneofDescriptor oneof) {
          return super.clearOneof(oneof);
        }
        @java.lang.Override
        public Builder setRepeatedField(
            com.google.protobuf.Descriptors.FieldDescriptor field,
            int index, java.lang.Object value) {
          return super.setRepeatedField(field, index, value);
        }
        @java.lang.Override
        public Builder addRepeatedField(
            com.google.protobuf.Descriptors.FieldDescriptor field,
            java.lang.Object value) {
          return super.addRepeatedField(field, value);
        }
        @java.lang.Override
        public Builder mergeFrom(com.google.protobuf.Message other) {
          if (other instanceof perfetto.protos.ChromeMetadata.BackgroundTracingMetadata.TriggerRule) {
            return mergeFrom((perfetto.protos.ChromeMetadata.BackgroundTracingMetadata.TriggerRule)other);
          } else {
            super.mergeFrom(other);
            return this;
          }
        }

        public Builder mergeFrom(perfetto.protos.ChromeMetadata.BackgroundTracingMetadata.TriggerRule other) {
          if (other == perfetto.protos.ChromeMetadata.BackgroundTracingMetadata.TriggerRule.getDefaultInstance()) return this;
          if (other.hasTriggerType()) {
            setTriggerType(other.getTriggerType());
          }
          if (other.hasHistogramRule()) {
            mergeHistogramRule(other.getHistogramRule());
          }
          if (other.hasNamedRule()) {
            mergeNamedRule(other.getNamedRule());
          }
          this.mergeUnknownFields(other.getUnknownFields());
          onChanged();
          return this;
        }

        @java.lang.Override
        public final boolean isInitialized() {
          return true;
        }

        @java.lang.Override
        public Builder mergeFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws java.io.IOException {
          if (extensionRegistry == null) {
            throw new java.lang.NullPointerException();
          }
          try {
            boolean done = false;
            while (!done) {
              int tag = input.readTag();
              switch (tag) {
                case 0:
                  done = true;
                  break;
                case 8: {
                  int tmpRaw = input.readEnum();
                  perfetto.protos.ChromeMetadata.BackgroundTracingMetadata.TriggerRule.TriggerType tmpValue =
                      perfetto.protos.ChromeMetadata.BackgroundTracingMetadata.TriggerRule.TriggerType.forNumber(tmpRaw);
                  if (tmpValue == null) {
                    mergeUnknownVarintField(1, tmpRaw);
                  } else {
                    triggerType_ = tmpRaw;
                    bitField0_ |= 0x00000001;
                  }
                  break;
                } // case 8
                case 18: {
                  input.readMessage(
                      getHistogramRuleFieldBuilder().getBuilder(),
                      extensionRegistry);
                  bitField0_ |= 0x00000002;
                  break;
                } // case 18
                case 26: {
                  input.readMessage(
                      getNamedRuleFieldBuilder().getBuilder(),
                      extensionRegistry);
                  bitField0_ |= 0x00000004;
                  break;
                } // case 26
                default: {
                  if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                    done = true; // was an endgroup tag
                  }
                  break;
                } // default:
              } // switch (tag)
            } // while (!done)
          } catch (com.google.protobuf.InvalidProtocolBufferException e) {
            throw e.unwrapIOException();
          } finally {
            onChanged();
          } // finally
          return this;
        }
        private int bitField0_;

        private int triggerType_ = 0;
        /**
         * <code>optional .perfetto.protos.BackgroundTracingMetadata.TriggerRule.TriggerType trigger_type = 1;</code>
         * @return Whether the triggerType field is set.
         */
        @java.lang.Override public boolean hasTriggerType() {
          return ((bitField0_ & 0x00000001) != 0);
        }
        /**
         * <code>optional .perfetto.protos.BackgroundTracingMetadata.TriggerRule.TriggerType trigger_type = 1;</code>
         * @return The triggerType.
         */
        @java.lang.Override
        public perfetto.protos.ChromeMetadata.BackgroundTracingMetadata.TriggerRule.TriggerType getTriggerType() {
          perfetto.protos.ChromeMetadata.BackgroundTracingMetadata.TriggerRule.TriggerType result = perfetto.protos.ChromeMetadata.BackgroundTracingMetadata.TriggerRule.TriggerType.forNumber(triggerType_);
          return result == null ? perfetto.protos.ChromeMetadata.BackgroundTracingMetadata.TriggerRule.TriggerType.TRIGGER_UNSPECIFIED : result;
        }
        /**
         * <code>optional .perfetto.protos.BackgroundTracingMetadata.TriggerRule.TriggerType trigger_type = 1;</code>
         * @param value The triggerType to set.
         * @return This builder for chaining.
         */
        public Builder setTriggerType(perfetto.protos.ChromeMetadata.BackgroundTracingMetadata.TriggerRule.TriggerType value) {
          if (value == null) {
            throw new NullPointerException();
          }
          bitField0_ |= 0x00000001;
          triggerType_ = value.getNumber();
          onChanged();
          return this;
        }
        /**
         * <code>optional .perfetto.protos.BackgroundTracingMetadata.TriggerRule.TriggerType trigger_type = 1;</code>
         * @return This builder for chaining.
         */
        public Builder clearTriggerType() {
          bitField0_ = (bitField0_ & ~0x00000001);
          triggerType_ = 0;
          onChanged();
          return this;
        }

        private perfetto.protos.ChromeMetadata.BackgroundTracingMetadata.TriggerRule.HistogramRule histogramRule_;
        private com.google.protobuf.SingleFieldBuilderV3<
            perfetto.protos.ChromeMetadata.BackgroundTracingMetadata.TriggerRule.HistogramRule, perfetto.protos.ChromeMetadata.BackgroundTracingMetadata.TriggerRule.HistogramRule.Builder, perfetto.protos.ChromeMetadata.BackgroundTracingMetadata.TriggerRule.HistogramRuleOrBuilder> histogramRuleBuilder_;
        /**
         * <code>optional .perfetto.protos.BackgroundTracingMetadata.TriggerRule.HistogramRule histogram_rule = 2;</code>
         * @return Whether the histogramRule field is set.
         */
        public boolean hasHistogramRule() {
          return ((bitField0_ & 0x00000002) != 0);
        }
        /**
         * <code>optional .perfetto.protos.BackgroundTracingMetadata.TriggerRule.HistogramRule histogram_rule = 2;</code>
         * @return The histogramRule.
         */
        public perfetto.protos.ChromeMetadata.BackgroundTracingMetadata.TriggerRule.HistogramRule getHistogramRule() {
          if (histogramRuleBuilder_ == null) {
            return histogramRule_ == null ? perfetto.protos.ChromeMetadata.BackgroundTracingMetadata.TriggerRule.HistogramRule.getDefaultInstance() : histogramRule_;
          } else {
            return histogramRuleBuilder_.getMessage();
          }
        }
        /**
         * <code>optional .perfetto.protos.BackgroundTracingMetadata.TriggerRule.HistogramRule histogram_rule = 2;</code>
         */
        public Builder setHistogramRule(perfetto.protos.ChromeMetadata.BackgroundTracingMetadata.TriggerRule.HistogramRule value) {
          if (histogramRuleBuilder_ == null) {
            if (value == null) {
              throw new NullPointerException();
            }
            histogramRule_ = value;
          } else {
            histogramRuleBuilder_.setMessage(value);
          }
          bitField0_ |= 0x00000002;
          onChanged();
          return this;
        }
        /**
         * <code>optional .perfetto.protos.BackgroundTracingMetadata.TriggerRule.HistogramRule histogram_rule = 2;</code>
         */
        public Builder setHistogramRule(
            perfetto.protos.ChromeMetadata.BackgroundTracingMetadata.TriggerRule.HistogramRule.Builder builderForValue) {
          if (histogramRuleBuilder_ == null) {
            histogramRule_ = builderForValue.build();
          } else {
            histogramRuleBuilder_.setMessage(builderForValue.build());
          }
          bitField0_ |= 0x00000002;
          onChanged();
          return this;
        }
        /**
         * <code>optional .perfetto.protos.BackgroundTracingMetadata.TriggerRule.HistogramRule histogram_rule = 2;</code>
         */
        public Builder mergeHistogramRule(perfetto.protos.ChromeMetadata.BackgroundTracingMetadata.TriggerRule.HistogramRule value) {
          if (histogramRuleBuilder_ == null) {
            if (((bitField0_ & 0x00000002) != 0) &&
              histogramRule_ != null &&
              histogramRule_ != perfetto.protos.ChromeMetadata.BackgroundTracingMetadata.TriggerRule.HistogramRule.getDefaultInstance()) {
              getHistogramRuleBuilder().mergeFrom(value);
            } else {
              histogramRule_ = value;
            }
          } else {
            histogramRuleBuilder_.mergeFrom(value);
          }
          bitField0_ |= 0x00000002;
          onChanged();
          return this;
        }
        /**
         * <code>optional .perfetto.protos.BackgroundTracingMetadata.TriggerRule.HistogramRule histogram_rule = 2;</code>
         */
        public Builder clearHistogramRule() {
          bitField0_ = (bitField0_ & ~0x00000002);
          histogramRule_ = null;
          if (histogramRuleBuilder_ != null) {
            histogramRuleBuilder_.dispose();
            histogramRuleBuilder_ = null;
          }
          onChanged();
          return this;
        }
        /**
         * <code>optional .perfetto.protos.BackgroundTracingMetadata.TriggerRule.HistogramRule histogram_rule = 2;</code>
         */
        public perfetto.protos.ChromeMetadata.BackgroundTracingMetadata.TriggerRule.HistogramRule.Builder getHistogramRuleBuilder() {
          bitField0_ |= 0x00000002;
          onChanged();
          return getHistogramRuleFieldBuilder().getBuilder();
        }
        /**
         * <code>optional .perfetto.protos.BackgroundTracingMetadata.TriggerRule.HistogramRule histogram_rule = 2;</code>
         */
        public perfetto.protos.ChromeMetadata.BackgroundTracingMetadata.TriggerRule.HistogramRuleOrBuilder getHistogramRuleOrBuilder() {
          if (histogramRuleBuilder_ != null) {
            return histogramRuleBuilder_.getMessageOrBuilder();
          } else {
            return histogramRule_ == null ?
                perfetto.protos.ChromeMetadata.BackgroundTracingMetadata.TriggerRule.HistogramRule.getDefaultInstance() : histogramRule_;
          }
        }
        /**
         * <code>optional .perfetto.protos.BackgroundTracingMetadata.TriggerRule.HistogramRule histogram_rule = 2;</code>
         */
        private com.google.protobuf.SingleFieldBuilderV3<
            perfetto.protos.ChromeMetadata.BackgroundTracingMetadata.TriggerRule.HistogramRule, perfetto.protos.ChromeMetadata.BackgroundTracingMetadata.TriggerRule.HistogramRule.Builder, perfetto.protos.ChromeMetadata.BackgroundTracingMetadata.TriggerRule.HistogramRuleOrBuilder> 
            getHistogramRuleFieldBuilder() {
          if (histogramRuleBuilder_ == null) {
            histogramRuleBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
                perfetto.protos.ChromeMetadata.BackgroundTracingMetadata.TriggerRule.HistogramRule, perfetto.protos.ChromeMetadata.BackgroundTracingMetadata.TriggerRule.HistogramRule.Builder, perfetto.protos.ChromeMetadata.BackgroundTracingMetadata.TriggerRule.HistogramRuleOrBuilder>(
                    getHistogramRule(),
                    getParentForChildren(),
                    isClean());
            histogramRule_ = null;
          }
          return histogramRuleBuilder_;
        }

        private perfetto.protos.ChromeMetadata.BackgroundTracingMetadata.TriggerRule.NamedRule namedRule_;
        private com.google.protobuf.SingleFieldBuilderV3<
            perfetto.protos.ChromeMetadata.BackgroundTracingMetadata.TriggerRule.NamedRule, perfetto.protos.ChromeMetadata.BackgroundTracingMetadata.TriggerRule.NamedRule.Builder, perfetto.protos.ChromeMetadata.BackgroundTracingMetadata.TriggerRule.NamedRuleOrBuilder> namedRuleBuilder_;
        /**
         * <code>optional .perfetto.protos.BackgroundTracingMetadata.TriggerRule.NamedRule named_rule = 3;</code>
         * @return Whether the namedRule field is set.
         */
        public boolean hasNamedRule() {
          return ((bitField0_ & 0x00000004) != 0);
        }
        /**
         * <code>optional .perfetto.protos.BackgroundTracingMetadata.TriggerRule.NamedRule named_rule = 3;</code>
         * @return The namedRule.
         */
        public perfetto.protos.ChromeMetadata.BackgroundTracingMetadata.TriggerRule.NamedRule getNamedRule() {
          if (namedRuleBuilder_ == null) {
            return namedRule_ == null ? perfetto.protos.ChromeMetadata.BackgroundTracingMetadata.TriggerRule.NamedRule.getDefaultInstance() : namedRule_;
          } else {
            return namedRuleBuilder_.getMessage();
          }
        }
        /**
         * <code>optional .perfetto.protos.BackgroundTracingMetadata.TriggerRule.NamedRule named_rule = 3;</code>
         */
        public Builder setNamedRule(perfetto.protos.ChromeMetadata.BackgroundTracingMetadata.TriggerRule.NamedRule value) {
          if (namedRuleBuilder_ == null) {
            if (value == null) {
              throw new NullPointerException();
            }
            namedRule_ = value;
          } else {
            namedRuleBuilder_.setMessage(value);
          }
          bitField0_ |= 0x00000004;
          onChanged();
          return this;
        }
        /**
         * <code>optional .perfetto.protos.BackgroundTracingMetadata.TriggerRule.NamedRule named_rule = 3;</code>
         */
        public Builder setNamedRule(
            perfetto.protos.ChromeMetadata.BackgroundTracingMetadata.TriggerRule.NamedRule.Builder builderForValue) {
          if (namedRuleBuilder_ == null) {
            namedRule_ = builderForValue.build();
          } else {
            namedRuleBuilder_.setMessage(builderForValue.build());
          }
          bitField0_ |= 0x00000004;
          onChanged();
          return this;
        }
        /**
         * <code>optional .perfetto.protos.BackgroundTracingMetadata.TriggerRule.NamedRule named_rule = 3;</code>
         */
        public Builder mergeNamedRule(perfetto.protos.ChromeMetadata.BackgroundTracingMetadata.TriggerRule.NamedRule value) {
          if (namedRuleBuilder_ == null) {
            if (((bitField0_ & 0x00000004) != 0) &&
              namedRule_ != null &&
              namedRule_ != perfetto.protos.ChromeMetadata.BackgroundTracingMetadata.TriggerRule.NamedRule.getDefaultInstance()) {
              getNamedRuleBuilder().mergeFrom(value);
            } else {
              namedRule_ = value;
            }
          } else {
            namedRuleBuilder_.mergeFrom(value);
          }
          bitField0_ |= 0x00000004;
          onChanged();
          return this;
        }
        /**
         * <code>optional .perfetto.protos.BackgroundTracingMetadata.TriggerRule.NamedRule named_rule = 3;</code>
         */
        public Builder clearNamedRule() {
          bitField0_ = (bitField0_ & ~0x00000004);
          namedRule_ = null;
          if (namedRuleBuilder_ != null) {
            namedRuleBuilder_.dispose();
            namedRuleBuilder_ = null;
          }
          onChanged();
          return this;
        }
        /**
         * <code>optional .perfetto.protos.BackgroundTracingMetadata.TriggerRule.NamedRule named_rule = 3;</code>
         */
        public perfetto.protos.ChromeMetadata.BackgroundTracingMetadata.TriggerRule.NamedRule.Builder getNamedRuleBuilder() {
          bitField0_ |= 0x00000004;
          onChanged();
          return getNamedRuleFieldBuilder().getBuilder();
        }
        /**
         * <code>optional .perfetto.protos.BackgroundTracingMetadata.TriggerRule.NamedRule named_rule = 3;</code>
         */
        public perfetto.protos.ChromeMetadata.BackgroundTracingMetadata.TriggerRule.NamedRuleOrBuilder getNamedRuleOrBuilder() {
          if (namedRuleBuilder_ != null) {
            return namedRuleBuilder_.getMessageOrBuilder();
          } else {
            return namedRule_ == null ?
                perfetto.protos.ChromeMetadata.BackgroundTracingMetadata.TriggerRule.NamedRule.getDefaultInstance() : namedRule_;
          }
        }
        /**
         * <code>optional .perfetto.protos.BackgroundTracingMetadata.TriggerRule.NamedRule named_rule = 3;</code>
         */
        private com.google.protobuf.SingleFieldBuilderV3<
            perfetto.protos.ChromeMetadata.BackgroundTracingMetadata.TriggerRule.NamedRule, perfetto.protos.ChromeMetadata.BackgroundTracingMetadata.TriggerRule.NamedRule.Builder, perfetto.protos.ChromeMetadata.BackgroundTracingMetadata.TriggerRule.NamedRuleOrBuilder> 
            getNamedRuleFieldBuilder() {
          if (namedRuleBuilder_ == null) {
            namedRuleBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
                perfetto.protos.ChromeMetadata.BackgroundTracingMetadata.TriggerRule.NamedRule, perfetto.protos.ChromeMetadata.BackgroundTracingMetadata.TriggerRule.NamedRule.Builder, perfetto.protos.ChromeMetadata.BackgroundTracingMetadata.TriggerRule.NamedRuleOrBuilder>(
                    getNamedRule(),
                    getParentForChildren(),
                    isClean());
            namedRule_ = null;
          }
          return namedRuleBuilder_;
        }
        @java.lang.Override
        public final Builder setUnknownFields(
            final com.google.protobuf.UnknownFieldSet unknownFields) {
          return super.setUnknownFields(unknownFields);
        }

        @java.lang.Override
        public final Builder mergeUnknownFields(
            final com.google.protobuf.UnknownFieldSet unknownFields) {
          return super.mergeUnknownFields(unknownFields);
        }


        // @@protoc_insertion_point(builder_scope:perfetto.protos.BackgroundTracingMetadata.TriggerRule)
      }

      // @@protoc_insertion_point(class_scope:perfetto.protos.BackgroundTracingMetadata.TriggerRule)
      private static final perfetto.protos.ChromeMetadata.BackgroundTracingMetadata.TriggerRule DEFAULT_INSTANCE;
      static {
        DEFAULT_INSTANCE = new perfetto.protos.ChromeMetadata.BackgroundTracingMetadata.TriggerRule();
      }

      public static perfetto.protos.ChromeMetadata.BackgroundTracingMetadata.TriggerRule getDefaultInstance() {
        return DEFAULT_INSTANCE;
      }

      @java.lang.Deprecated public static final com.google.protobuf.Parser<TriggerRule>
          PARSER = new com.google.protobuf.AbstractParser<TriggerRule>() {
        @java.lang.Override
        public TriggerRule parsePartialFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws com.google.protobuf.InvalidProtocolBufferException {
          Builder builder = newBuilder();
          try {
            builder.mergeFrom(input, extensionRegistry);
          } catch (com.google.protobuf.InvalidProtocolBufferException e) {
            throw e.setUnfinishedMessage(builder.buildPartial());
          } catch (com.google.protobuf.UninitializedMessageException e) {
            throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
          } catch (java.io.IOException e) {
            throw new com.google.protobuf.InvalidProtocolBufferException(e)
                .setUnfinishedMessage(builder.buildPartial());
          }
          return builder.buildPartial();
        }
      };

      public static com.google.protobuf.Parser<TriggerRule> parser() {
        return PARSER;
      }

      @java.lang.Override
      public com.google.protobuf.Parser<TriggerRule> getParserForType() {
        return PARSER;
      }

      @java.lang.Override
      public perfetto.protos.ChromeMetadata.BackgroundTracingMetadata.TriggerRule getDefaultInstanceForType() {
        return DEFAULT_INSTANCE;
      }

    }

    private int bitField0_;
    public static final int TRIGGERED_RULE_FIELD_NUMBER = 1;
    private perfetto.protos.ChromeMetadata.BackgroundTracingMetadata.TriggerRule triggeredRule_;
    /**
     * <pre>
     * Specifies the rule that caused the trace to be uploaded.
     * </pre>
     *
     * <code>optional .perfetto.protos.BackgroundTracingMetadata.TriggerRule triggered_rule = 1;</code>
     * @return Whether the triggeredRule field is set.
     */
    @java.lang.Override
    public boolean hasTriggeredRule() {
      return ((bitField0_ & 0x00000001) != 0);
    }
    /**
     * <pre>
     * Specifies the rule that caused the trace to be uploaded.
     * </pre>
     *
     * <code>optional .perfetto.protos.BackgroundTracingMetadata.TriggerRule triggered_rule = 1;</code>
     * @return The triggeredRule.
     */
    @java.lang.Override
    public perfetto.protos.ChromeMetadata.BackgroundTracingMetadata.TriggerRule getTriggeredRule() {
      return triggeredRule_ == null ? perfetto.protos.ChromeMetadata.BackgroundTracingMetadata.TriggerRule.getDefaultInstance() : triggeredRule_;
    }
    /**
     * <pre>
     * Specifies the rule that caused the trace to be uploaded.
     * </pre>
     *
     * <code>optional .perfetto.protos.BackgroundTracingMetadata.TriggerRule triggered_rule = 1;</code>
     */
    @java.lang.Override
    public perfetto.protos.ChromeMetadata.BackgroundTracingMetadata.TriggerRuleOrBuilder getTriggeredRuleOrBuilder() {
      return triggeredRule_ == null ? perfetto.protos.ChromeMetadata.BackgroundTracingMetadata.TriggerRule.getDefaultInstance() : triggeredRule_;
    }

    public static final int ACTIVE_RULES_FIELD_NUMBER = 2;
    @SuppressWarnings("serial")
    private java.util.List<perfetto.protos.ChromeMetadata.BackgroundTracingMetadata.TriggerRule> activeRules_;
    /**
     * <pre>
     * List of all active triggers in current session, when trace was triggered.
     * </pre>
     *
     * <code>repeated .perfetto.protos.BackgroundTracingMetadata.TriggerRule active_rules = 2;</code>
     */
    @java.lang.Override
    public java.util.List<perfetto.protos.ChromeMetadata.BackgroundTracingMetadata.TriggerRule> getActiveRulesList() {
      return activeRules_;
    }
    /**
     * <pre>
     * List of all active triggers in current session, when trace was triggered.
     * </pre>
     *
     * <code>repeated .perfetto.protos.BackgroundTracingMetadata.TriggerRule active_rules = 2;</code>
     */
    @java.lang.Override
    public java.util.List<? extends perfetto.protos.ChromeMetadata.BackgroundTracingMetadata.TriggerRuleOrBuilder> 
        getActiveRulesOrBuilderList() {
      return activeRules_;
    }
    /**
     * <pre>
     * List of all active triggers in current session, when trace was triggered.
     * </pre>
     *
     * <code>repeated .perfetto.protos.BackgroundTracingMetadata.TriggerRule active_rules = 2;</code>
     */
    @java.lang.Override
    public int getActiveRulesCount() {
      return activeRules_.size();
    }
    /**
     * <pre>
     * List of all active triggers in current session, when trace was triggered.
     * </pre>
     *
     * <code>repeated .perfetto.protos.BackgroundTracingMetadata.TriggerRule active_rules = 2;</code>
     */
    @java.lang.Override
    public perfetto.protos.ChromeMetadata.BackgroundTracingMetadata.TriggerRule getActiveRules(int index) {
      return activeRules_.get(index);
    }
    /**
     * <pre>
     * List of all active triggers in current session, when trace was triggered.
     * </pre>
     *
     * <code>repeated .perfetto.protos.BackgroundTracingMetadata.TriggerRule active_rules = 2;</code>
     */
    @java.lang.Override
    public perfetto.protos.ChromeMetadata.BackgroundTracingMetadata.TriggerRuleOrBuilder getActiveRulesOrBuilder(
        int index) {
      return activeRules_.get(index);
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (((bitField0_ & 0x00000001) != 0)) {
        output.writeMessage(1, getTriggeredRule());
      }
      for (int i = 0; i < activeRules_.size(); i++) {
        output.writeMessage(2, activeRules_.get(i));
      }
      getUnknownFields().writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) != 0)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(1, getTriggeredRule());
      }
      for (int i = 0; i < activeRules_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(2, activeRules_.get(i));
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof perfetto.protos.ChromeMetadata.BackgroundTracingMetadata)) {
        return super.equals(obj);
      }
      perfetto.protos.ChromeMetadata.BackgroundTracingMetadata other = (perfetto.protos.ChromeMetadata.BackgroundTracingMetadata) obj;

      if (hasTriggeredRule() != other.hasTriggeredRule()) return false;
      if (hasTriggeredRule()) {
        if (!getTriggeredRule()
            .equals(other.getTriggeredRule())) return false;
      }
      if (!getActiveRulesList()
          .equals(other.getActiveRulesList())) return false;
      if (!getUnknownFields().equals(other.getUnknownFields())) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      if (hasTriggeredRule()) {
        hash = (37 * hash) + TRIGGERED_RULE_FIELD_NUMBER;
        hash = (53 * hash) + getTriggeredRule().hashCode();
      }
      if (getActiveRulesCount() > 0) {
        hash = (37 * hash) + ACTIVE_RULES_FIELD_NUMBER;
        hash = (53 * hash) + getActiveRulesList().hashCode();
      }
      hash = (29 * hash) + getUnknownFields().hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static perfetto.protos.ChromeMetadata.BackgroundTracingMetadata parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static perfetto.protos.ChromeMetadata.BackgroundTracingMetadata parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static perfetto.protos.ChromeMetadata.BackgroundTracingMetadata parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static perfetto.protos.ChromeMetadata.BackgroundTracingMetadata parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static perfetto.protos.ChromeMetadata.BackgroundTracingMetadata parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static perfetto.protos.ChromeMetadata.BackgroundTracingMetadata parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static perfetto.protos.ChromeMetadata.BackgroundTracingMetadata parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static perfetto.protos.ChromeMetadata.BackgroundTracingMetadata parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static perfetto.protos.ChromeMetadata.BackgroundTracingMetadata parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static perfetto.protos.ChromeMetadata.BackgroundTracingMetadata parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static perfetto.protos.ChromeMetadata.BackgroundTracingMetadata parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static perfetto.protos.ChromeMetadata.BackgroundTracingMetadata parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(perfetto.protos.ChromeMetadata.BackgroundTracingMetadata prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * <pre>
     * Metadata related to background tracing scenarios, states and triggers.
     * </pre>
     *
     * Protobuf type {@code perfetto.protos.BackgroundTracingMetadata}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:perfetto.protos.BackgroundTracingMetadata)
        perfetto.protos.ChromeMetadata.BackgroundTracingMetadataOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return perfetto.protos.ChromeMetadata.internal_static_perfetto_protos_BackgroundTracingMetadata_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return perfetto.protos.ChromeMetadata.internal_static_perfetto_protos_BackgroundTracingMetadata_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                perfetto.protos.ChromeMetadata.BackgroundTracingMetadata.class, perfetto.protos.ChromeMetadata.BackgroundTracingMetadata.Builder.class);
      }

      // Construct using perfetto.protos.ChromeMetadata.BackgroundTracingMetadata.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
          getTriggeredRuleFieldBuilder();
          getActiveRulesFieldBuilder();
        }
      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        bitField0_ = 0;
        triggeredRule_ = null;
        if (triggeredRuleBuilder_ != null) {
          triggeredRuleBuilder_.dispose();
          triggeredRuleBuilder_ = null;
        }
        if (activeRulesBuilder_ == null) {
          activeRules_ = java.util.Collections.emptyList();
        } else {
          activeRules_ = null;
          activeRulesBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000002);
        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return perfetto.protos.ChromeMetadata.internal_static_perfetto_protos_BackgroundTracingMetadata_descriptor;
      }

      @java.lang.Override
      public perfetto.protos.ChromeMetadata.BackgroundTracingMetadata getDefaultInstanceForType() {
        return perfetto.protos.ChromeMetadata.BackgroundTracingMetadata.getDefaultInstance();
      }

      @java.lang.Override
      public perfetto.protos.ChromeMetadata.BackgroundTracingMetadata build() {
        perfetto.protos.ChromeMetadata.BackgroundTracingMetadata result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public perfetto.protos.ChromeMetadata.BackgroundTracingMetadata buildPartial() {
        perfetto.protos.ChromeMetadata.BackgroundTracingMetadata result = new perfetto.protos.ChromeMetadata.BackgroundTracingMetadata(this);
        buildPartialRepeatedFields(result);
        if (bitField0_ != 0) { buildPartial0(result); }
        onBuilt();
        return result;
      }

      private void buildPartialRepeatedFields(perfetto.protos.ChromeMetadata.BackgroundTracingMetadata result) {
        if (activeRulesBuilder_ == null) {
          if (((bitField0_ & 0x00000002) != 0)) {
            activeRules_ = java.util.Collections.unmodifiableList(activeRules_);
            bitField0_ = (bitField0_ & ~0x00000002);
          }
          result.activeRules_ = activeRules_;
        } else {
          result.activeRules_ = activeRulesBuilder_.build();
        }
      }

      private void buildPartial0(perfetto.protos.ChromeMetadata.BackgroundTracingMetadata result) {
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) != 0)) {
          result.triggeredRule_ = triggeredRuleBuilder_ == null
              ? triggeredRule_
              : triggeredRuleBuilder_.build();
          to_bitField0_ |= 0x00000001;
        }
        result.bitField0_ |= to_bitField0_;
      }

      @java.lang.Override
      public Builder clone() {
        return super.clone();
      }
      @java.lang.Override
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.setField(field, value);
      }
      @java.lang.Override
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return super.clearField(field);
      }
      @java.lang.Override
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return super.clearOneof(oneof);
      }
      @java.lang.Override
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, java.lang.Object value) {
        return super.setRepeatedField(field, index, value);
      }
      @java.lang.Override
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.addRepeatedField(field, value);
      }
      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof perfetto.protos.ChromeMetadata.BackgroundTracingMetadata) {
          return mergeFrom((perfetto.protos.ChromeMetadata.BackgroundTracingMetadata)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(perfetto.protos.ChromeMetadata.BackgroundTracingMetadata other) {
        if (other == perfetto.protos.ChromeMetadata.BackgroundTracingMetadata.getDefaultInstance()) return this;
        if (other.hasTriggeredRule()) {
          mergeTriggeredRule(other.getTriggeredRule());
        }
        if (activeRulesBuilder_ == null) {
          if (!other.activeRules_.isEmpty()) {
            if (activeRules_.isEmpty()) {
              activeRules_ = other.activeRules_;
              bitField0_ = (bitField0_ & ~0x00000002);
            } else {
              ensureActiveRulesIsMutable();
              activeRules_.addAll(other.activeRules_);
            }
            onChanged();
          }
        } else {
          if (!other.activeRules_.isEmpty()) {
            if (activeRulesBuilder_.isEmpty()) {
              activeRulesBuilder_.dispose();
              activeRulesBuilder_ = null;
              activeRules_ = other.activeRules_;
              bitField0_ = (bitField0_ & ~0x00000002);
              activeRulesBuilder_ = 
                com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders ?
                   getActiveRulesFieldBuilder() : null;
            } else {
              activeRulesBuilder_.addAllMessages(other.activeRules_);
            }
          }
        }
        this.mergeUnknownFields(other.getUnknownFields());
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        if (extensionRegistry == null) {
          throw new java.lang.NullPointerException();
        }
        try {
          boolean done = false;
          while (!done) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                done = true;
                break;
              case 10: {
                input.readMessage(
                    getTriggeredRuleFieldBuilder().getBuilder(),
                    extensionRegistry);
                bitField0_ |= 0x00000001;
                break;
              } // case 10
              case 18: {
                perfetto.protos.ChromeMetadata.BackgroundTracingMetadata.TriggerRule m =
                    input.readMessage(
                        perfetto.protos.ChromeMetadata.BackgroundTracingMetadata.TriggerRule.PARSER,
                        extensionRegistry);
                if (activeRulesBuilder_ == null) {
                  ensureActiveRulesIsMutable();
                  activeRules_.add(m);
                } else {
                  activeRulesBuilder_.addMessage(m);
                }
                break;
              } // case 18
              default: {
                if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                  done = true; // was an endgroup tag
                }
                break;
              } // default:
            } // switch (tag)
          } // while (!done)
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.unwrapIOException();
        } finally {
          onChanged();
        } // finally
        return this;
      }
      private int bitField0_;

      private perfetto.protos.ChromeMetadata.BackgroundTracingMetadata.TriggerRule triggeredRule_;
      private com.google.protobuf.SingleFieldBuilderV3<
          perfetto.protos.ChromeMetadata.BackgroundTracingMetadata.TriggerRule, perfetto.protos.ChromeMetadata.BackgroundTracingMetadata.TriggerRule.Builder, perfetto.protos.ChromeMetadata.BackgroundTracingMetadata.TriggerRuleOrBuilder> triggeredRuleBuilder_;
      /**
       * <pre>
       * Specifies the rule that caused the trace to be uploaded.
       * </pre>
       *
       * <code>optional .perfetto.protos.BackgroundTracingMetadata.TriggerRule triggered_rule = 1;</code>
       * @return Whether the triggeredRule field is set.
       */
      public boolean hasTriggeredRule() {
        return ((bitField0_ & 0x00000001) != 0);
      }
      /**
       * <pre>
       * Specifies the rule that caused the trace to be uploaded.
       * </pre>
       *
       * <code>optional .perfetto.protos.BackgroundTracingMetadata.TriggerRule triggered_rule = 1;</code>
       * @return The triggeredRule.
       */
      public perfetto.protos.ChromeMetadata.BackgroundTracingMetadata.TriggerRule getTriggeredRule() {
        if (triggeredRuleBuilder_ == null) {
          return triggeredRule_ == null ? perfetto.protos.ChromeMetadata.BackgroundTracingMetadata.TriggerRule.getDefaultInstance() : triggeredRule_;
        } else {
          return triggeredRuleBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       * Specifies the rule that caused the trace to be uploaded.
       * </pre>
       *
       * <code>optional .perfetto.protos.BackgroundTracingMetadata.TriggerRule triggered_rule = 1;</code>
       */
      public Builder setTriggeredRule(perfetto.protos.ChromeMetadata.BackgroundTracingMetadata.TriggerRule value) {
        if (triggeredRuleBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          triggeredRule_ = value;
        } else {
          triggeredRuleBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000001;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Specifies the rule that caused the trace to be uploaded.
       * </pre>
       *
       * <code>optional .perfetto.protos.BackgroundTracingMetadata.TriggerRule triggered_rule = 1;</code>
       */
      public Builder setTriggeredRule(
          perfetto.protos.ChromeMetadata.BackgroundTracingMetadata.TriggerRule.Builder builderForValue) {
        if (triggeredRuleBuilder_ == null) {
          triggeredRule_ = builderForValue.build();
        } else {
          triggeredRuleBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000001;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Specifies the rule that caused the trace to be uploaded.
       * </pre>
       *
       * <code>optional .perfetto.protos.BackgroundTracingMetadata.TriggerRule triggered_rule = 1;</code>
       */
      public Builder mergeTriggeredRule(perfetto.protos.ChromeMetadata.BackgroundTracingMetadata.TriggerRule value) {
        if (triggeredRuleBuilder_ == null) {
          if (((bitField0_ & 0x00000001) != 0) &&
            triggeredRule_ != null &&
            triggeredRule_ != perfetto.protos.ChromeMetadata.BackgroundTracingMetadata.TriggerRule.getDefaultInstance()) {
            getTriggeredRuleBuilder().mergeFrom(value);
          } else {
            triggeredRule_ = value;
          }
        } else {
          triggeredRuleBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00000001;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Specifies the rule that caused the trace to be uploaded.
       * </pre>
       *
       * <code>optional .perfetto.protos.BackgroundTracingMetadata.TriggerRule triggered_rule = 1;</code>
       */
      public Builder clearTriggeredRule() {
        bitField0_ = (bitField0_ & ~0x00000001);
        triggeredRule_ = null;
        if (triggeredRuleBuilder_ != null) {
          triggeredRuleBuilder_.dispose();
          triggeredRuleBuilder_ = null;
        }
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Specifies the rule that caused the trace to be uploaded.
       * </pre>
       *
       * <code>optional .perfetto.protos.BackgroundTracingMetadata.TriggerRule triggered_rule = 1;</code>
       */
      public perfetto.protos.ChromeMetadata.BackgroundTracingMetadata.TriggerRule.Builder getTriggeredRuleBuilder() {
        bitField0_ |= 0x00000001;
        onChanged();
        return getTriggeredRuleFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       * Specifies the rule that caused the trace to be uploaded.
       * </pre>
       *
       * <code>optional .perfetto.protos.BackgroundTracingMetadata.TriggerRule triggered_rule = 1;</code>
       */
      public perfetto.protos.ChromeMetadata.BackgroundTracingMetadata.TriggerRuleOrBuilder getTriggeredRuleOrBuilder() {
        if (triggeredRuleBuilder_ != null) {
          return triggeredRuleBuilder_.getMessageOrBuilder();
        } else {
          return triggeredRule_ == null ?
              perfetto.protos.ChromeMetadata.BackgroundTracingMetadata.TriggerRule.getDefaultInstance() : triggeredRule_;
        }
      }
      /**
       * <pre>
       * Specifies the rule that caused the trace to be uploaded.
       * </pre>
       *
       * <code>optional .perfetto.protos.BackgroundTracingMetadata.TriggerRule triggered_rule = 1;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          perfetto.protos.ChromeMetadata.BackgroundTracingMetadata.TriggerRule, perfetto.protos.ChromeMetadata.BackgroundTracingMetadata.TriggerRule.Builder, perfetto.protos.ChromeMetadata.BackgroundTracingMetadata.TriggerRuleOrBuilder> 
          getTriggeredRuleFieldBuilder() {
        if (triggeredRuleBuilder_ == null) {
          triggeredRuleBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              perfetto.protos.ChromeMetadata.BackgroundTracingMetadata.TriggerRule, perfetto.protos.ChromeMetadata.BackgroundTracingMetadata.TriggerRule.Builder, perfetto.protos.ChromeMetadata.BackgroundTracingMetadata.TriggerRuleOrBuilder>(
                  getTriggeredRule(),
                  getParentForChildren(),
                  isClean());
          triggeredRule_ = null;
        }
        return triggeredRuleBuilder_;
      }

      private java.util.List<perfetto.protos.ChromeMetadata.BackgroundTracingMetadata.TriggerRule> activeRules_ =
        java.util.Collections.emptyList();
      private void ensureActiveRulesIsMutable() {
        if (!((bitField0_ & 0x00000002) != 0)) {
          activeRules_ = new java.util.ArrayList<perfetto.protos.ChromeMetadata.BackgroundTracingMetadata.TriggerRule>(activeRules_);
          bitField0_ |= 0x00000002;
         }
      }

      private com.google.protobuf.RepeatedFieldBuilderV3<
          perfetto.protos.ChromeMetadata.BackgroundTracingMetadata.TriggerRule, perfetto.protos.ChromeMetadata.BackgroundTracingMetadata.TriggerRule.Builder, perfetto.protos.ChromeMetadata.BackgroundTracingMetadata.TriggerRuleOrBuilder> activeRulesBuilder_;

      /**
       * <pre>
       * List of all active triggers in current session, when trace was triggered.
       * </pre>
       *
       * <code>repeated .perfetto.protos.BackgroundTracingMetadata.TriggerRule active_rules = 2;</code>
       */
      public java.util.List<perfetto.protos.ChromeMetadata.BackgroundTracingMetadata.TriggerRule> getActiveRulesList() {
        if (activeRulesBuilder_ == null) {
          return java.util.Collections.unmodifiableList(activeRules_);
        } else {
          return activeRulesBuilder_.getMessageList();
        }
      }
      /**
       * <pre>
       * List of all active triggers in current session, when trace was triggered.
       * </pre>
       *
       * <code>repeated .perfetto.protos.BackgroundTracingMetadata.TriggerRule active_rules = 2;</code>
       */
      public int getActiveRulesCount() {
        if (activeRulesBuilder_ == null) {
          return activeRules_.size();
        } else {
          return activeRulesBuilder_.getCount();
        }
      }
      /**
       * <pre>
       * List of all active triggers in current session, when trace was triggered.
       * </pre>
       *
       * <code>repeated .perfetto.protos.BackgroundTracingMetadata.TriggerRule active_rules = 2;</code>
       */
      public perfetto.protos.ChromeMetadata.BackgroundTracingMetadata.TriggerRule getActiveRules(int index) {
        if (activeRulesBuilder_ == null) {
          return activeRules_.get(index);
        } else {
          return activeRulesBuilder_.getMessage(index);
        }
      }
      /**
       * <pre>
       * List of all active triggers in current session, when trace was triggered.
       * </pre>
       *
       * <code>repeated .perfetto.protos.BackgroundTracingMetadata.TriggerRule active_rules = 2;</code>
       */
      public Builder setActiveRules(
          int index, perfetto.protos.ChromeMetadata.BackgroundTracingMetadata.TriggerRule value) {
        if (activeRulesBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureActiveRulesIsMutable();
          activeRules_.set(index, value);
          onChanged();
        } else {
          activeRulesBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <pre>
       * List of all active triggers in current session, when trace was triggered.
       * </pre>
       *
       * <code>repeated .perfetto.protos.BackgroundTracingMetadata.TriggerRule active_rules = 2;</code>
       */
      public Builder setActiveRules(
          int index, perfetto.protos.ChromeMetadata.BackgroundTracingMetadata.TriggerRule.Builder builderForValue) {
        if (activeRulesBuilder_ == null) {
          ensureActiveRulesIsMutable();
          activeRules_.set(index, builderForValue.build());
          onChanged();
        } else {
          activeRulesBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * List of all active triggers in current session, when trace was triggered.
       * </pre>
       *
       * <code>repeated .perfetto.protos.BackgroundTracingMetadata.TriggerRule active_rules = 2;</code>
       */
      public Builder addActiveRules(perfetto.protos.ChromeMetadata.BackgroundTracingMetadata.TriggerRule value) {
        if (activeRulesBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureActiveRulesIsMutable();
          activeRules_.add(value);
          onChanged();
        } else {
          activeRulesBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <pre>
       * List of all active triggers in current session, when trace was triggered.
       * </pre>
       *
       * <code>repeated .perfetto.protos.BackgroundTracingMetadata.TriggerRule active_rules = 2;</code>
       */
      public Builder addActiveRules(
          int index, perfetto.protos.ChromeMetadata.BackgroundTracingMetadata.TriggerRule value) {
        if (activeRulesBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureActiveRulesIsMutable();
          activeRules_.add(index, value);
          onChanged();
        } else {
          activeRulesBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <pre>
       * List of all active triggers in current session, when trace was triggered.
       * </pre>
       *
       * <code>repeated .perfetto.protos.BackgroundTracingMetadata.TriggerRule active_rules = 2;</code>
       */
      public Builder addActiveRules(
          perfetto.protos.ChromeMetadata.BackgroundTracingMetadata.TriggerRule.Builder builderForValue) {
        if (activeRulesBuilder_ == null) {
          ensureActiveRulesIsMutable();
          activeRules_.add(builderForValue.build());
          onChanged();
        } else {
          activeRulesBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * List of all active triggers in current session, when trace was triggered.
       * </pre>
       *
       * <code>repeated .perfetto.protos.BackgroundTracingMetadata.TriggerRule active_rules = 2;</code>
       */
      public Builder addActiveRules(
          int index, perfetto.protos.ChromeMetadata.BackgroundTracingMetadata.TriggerRule.Builder builderForValue) {
        if (activeRulesBuilder_ == null) {
          ensureActiveRulesIsMutable();
          activeRules_.add(index, builderForValue.build());
          onChanged();
        } else {
          activeRulesBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * List of all active triggers in current session, when trace was triggered.
       * </pre>
       *
       * <code>repeated .perfetto.protos.BackgroundTracingMetadata.TriggerRule active_rules = 2;</code>
       */
      public Builder addAllActiveRules(
          java.lang.Iterable<? extends perfetto.protos.ChromeMetadata.BackgroundTracingMetadata.TriggerRule> values) {
        if (activeRulesBuilder_ == null) {
          ensureActiveRulesIsMutable();
          com.google.protobuf.AbstractMessageLite.Builder.addAll(
              values, activeRules_);
          onChanged();
        } else {
          activeRulesBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <pre>
       * List of all active triggers in current session, when trace was triggered.
       * </pre>
       *
       * <code>repeated .perfetto.protos.BackgroundTracingMetadata.TriggerRule active_rules = 2;</code>
       */
      public Builder clearActiveRules() {
        if (activeRulesBuilder_ == null) {
          activeRules_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000002);
          onChanged();
        } else {
          activeRulesBuilder_.clear();
        }
        return this;
      }
      /**
       * <pre>
       * List of all active triggers in current session, when trace was triggered.
       * </pre>
       *
       * <code>repeated .perfetto.protos.BackgroundTracingMetadata.TriggerRule active_rules = 2;</code>
       */
      public Builder removeActiveRules(int index) {
        if (activeRulesBuilder_ == null) {
          ensureActiveRulesIsMutable();
          activeRules_.remove(index);
          onChanged();
        } else {
          activeRulesBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <pre>
       * List of all active triggers in current session, when trace was triggered.
       * </pre>
       *
       * <code>repeated .perfetto.protos.BackgroundTracingMetadata.TriggerRule active_rules = 2;</code>
       */
      public perfetto.protos.ChromeMetadata.BackgroundTracingMetadata.TriggerRule.Builder getActiveRulesBuilder(
          int index) {
        return getActiveRulesFieldBuilder().getBuilder(index);
      }
      /**
       * <pre>
       * List of all active triggers in current session, when trace was triggered.
       * </pre>
       *
       * <code>repeated .perfetto.protos.BackgroundTracingMetadata.TriggerRule active_rules = 2;</code>
       */
      public perfetto.protos.ChromeMetadata.BackgroundTracingMetadata.TriggerRuleOrBuilder getActiveRulesOrBuilder(
          int index) {
        if (activeRulesBuilder_ == null) {
          return activeRules_.get(index);  } else {
          return activeRulesBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <pre>
       * List of all active triggers in current session, when trace was triggered.
       * </pre>
       *
       * <code>repeated .perfetto.protos.BackgroundTracingMetadata.TriggerRule active_rules = 2;</code>
       */
      public java.util.List<? extends perfetto.protos.ChromeMetadata.BackgroundTracingMetadata.TriggerRuleOrBuilder> 
           getActiveRulesOrBuilderList() {
        if (activeRulesBuilder_ != null) {
          return activeRulesBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(activeRules_);
        }
      }
      /**
       * <pre>
       * List of all active triggers in current session, when trace was triggered.
       * </pre>
       *
       * <code>repeated .perfetto.protos.BackgroundTracingMetadata.TriggerRule active_rules = 2;</code>
       */
      public perfetto.protos.ChromeMetadata.BackgroundTracingMetadata.TriggerRule.Builder addActiveRulesBuilder() {
        return getActiveRulesFieldBuilder().addBuilder(
            perfetto.protos.ChromeMetadata.BackgroundTracingMetadata.TriggerRule.getDefaultInstance());
      }
      /**
       * <pre>
       * List of all active triggers in current session, when trace was triggered.
       * </pre>
       *
       * <code>repeated .perfetto.protos.BackgroundTracingMetadata.TriggerRule active_rules = 2;</code>
       */
      public perfetto.protos.ChromeMetadata.BackgroundTracingMetadata.TriggerRule.Builder addActiveRulesBuilder(
          int index) {
        return getActiveRulesFieldBuilder().addBuilder(
            index, perfetto.protos.ChromeMetadata.BackgroundTracingMetadata.TriggerRule.getDefaultInstance());
      }
      /**
       * <pre>
       * List of all active triggers in current session, when trace was triggered.
       * </pre>
       *
       * <code>repeated .perfetto.protos.BackgroundTracingMetadata.TriggerRule active_rules = 2;</code>
       */
      public java.util.List<perfetto.protos.ChromeMetadata.BackgroundTracingMetadata.TriggerRule.Builder> 
           getActiveRulesBuilderList() {
        return getActiveRulesFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilderV3<
          perfetto.protos.ChromeMetadata.BackgroundTracingMetadata.TriggerRule, perfetto.protos.ChromeMetadata.BackgroundTracingMetadata.TriggerRule.Builder, perfetto.protos.ChromeMetadata.BackgroundTracingMetadata.TriggerRuleOrBuilder> 
          getActiveRulesFieldBuilder() {
        if (activeRulesBuilder_ == null) {
          activeRulesBuilder_ = new com.google.protobuf.RepeatedFieldBuilderV3<
              perfetto.protos.ChromeMetadata.BackgroundTracingMetadata.TriggerRule, perfetto.protos.ChromeMetadata.BackgroundTracingMetadata.TriggerRule.Builder, perfetto.protos.ChromeMetadata.BackgroundTracingMetadata.TriggerRuleOrBuilder>(
                  activeRules_,
                  ((bitField0_ & 0x00000002) != 0),
                  getParentForChildren(),
                  isClean());
          activeRules_ = null;
        }
        return activeRulesBuilder_;
      }
      @java.lang.Override
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      @java.lang.Override
      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:perfetto.protos.BackgroundTracingMetadata)
    }

    // @@protoc_insertion_point(class_scope:perfetto.protos.BackgroundTracingMetadata)
    private static final perfetto.protos.ChromeMetadata.BackgroundTracingMetadata DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new perfetto.protos.ChromeMetadata.BackgroundTracingMetadata();
    }

    public static perfetto.protos.ChromeMetadata.BackgroundTracingMetadata getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    @java.lang.Deprecated public static final com.google.protobuf.Parser<BackgroundTracingMetadata>
        PARSER = new com.google.protobuf.AbstractParser<BackgroundTracingMetadata>() {
      @java.lang.Override
      public BackgroundTracingMetadata parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        Builder builder = newBuilder();
        try {
          builder.mergeFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.setUnfinishedMessage(builder.buildPartial());
        } catch (com.google.protobuf.UninitializedMessageException e) {
          throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
        } catch (java.io.IOException e) {
          throw new com.google.protobuf.InvalidProtocolBufferException(e)
              .setUnfinishedMessage(builder.buildPartial());
        }
        return builder.buildPartial();
      }
    };

    public static com.google.protobuf.Parser<BackgroundTracingMetadata> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<BackgroundTracingMetadata> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public perfetto.protos.ChromeMetadata.BackgroundTracingMetadata getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_perfetto_protos_ChromeMetadataPacket_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_perfetto_protos_ChromeMetadataPacket_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_perfetto_protos_BackgroundTracingMetadata_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_perfetto_protos_BackgroundTracingMetadata_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_perfetto_protos_BackgroundTracingMetadata_TriggerRule_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_perfetto_protos_BackgroundTracingMetadata_TriggerRule_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_perfetto_protos_BackgroundTracingMetadata_TriggerRule_HistogramRule_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_perfetto_protos_BackgroundTracingMetadata_TriggerRule_HistogramRule_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_perfetto_protos_BackgroundTracingMetadata_TriggerRule_NamedRule_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_perfetto_protos_BackgroundTracingMetadata_TriggerRule_NamedRule_fieldAccessorTable;

  public static com.google.protobuf.Descriptors.FileDescriptor
      getDescriptor() {
    return descriptor;
  }
  private static  com.google.protobuf.Descriptors.FileDescriptor
      descriptor;
  static {
    java.lang.String[] descriptorData = {
      "\n2protos/perfetto/trace/chrome/chrome_me" +
      "tadata.proto\022\017perfetto.protos\"\240\001\n\024Chrome" +
      "MetadataPacket\022O\n\033background_tracing_met" +
      "adata\030\001 \001(\0132*.perfetto.protos.Background" +
      "TracingMetadata\022\033\n\023chrome_version_code\030\002" +
      " \001(\005\022\032\n\022enabled_categories\030\003 \001(\t\"\346\007\n\031Bac" +
      "kgroundTracingMetadata\022N\n\016triggered_rule" +
      "\030\001 \001(\01326.perfetto.protos.BackgroundTraci" +
      "ngMetadata.TriggerRule\022L\n\014active_rules\030\002" +
      " \003(\01326.perfetto.protos.BackgroundTracing" +
      "Metadata.TriggerRule\032\252\006\n\013TriggerRule\022X\n\014" +
      "trigger_type\030\001 \001(\0162B.perfetto.protos.Bac" +
      "kgroundTracingMetadata.TriggerRule.Trigg" +
      "erType\022\\\n\016histogram_rule\030\002 \001(\0132D.perfett" +
      "o.protos.BackgroundTracingMetadata.Trigg" +
      "erRule.HistogramRule\022T\n\nnamed_rule\030\003 \001(\013" +
      "2@.perfetto.protos.BackgroundTracingMeta" +
      "data.TriggerRule.NamedRule\032j\n\rHistogramR" +
      "ule\022\033\n\023histogram_name_hash\030\001 \001(\006\022\035\n\025hist" +
      "ogram_min_trigger\030\002 \001(\003\022\035\n\025histogram_max" +
      "_trigger\030\003 \001(\003\032\226\002\n\tNamedRule\022^\n\nevent_ty" +
      "pe\030\001 \001(\0162J.perfetto.protos.BackgroundTra" +
      "cingMetadata.TriggerRule.NamedRule.Event" +
      "Type\022!\n\031content_trigger_name_hash\030\002 \001(\006\"" +
      "\205\001\n\tEventType\022\017\n\013UNSPECIFIED\020\000\022\023\n\017SESSIO" +
      "N_RESTORE\020\001\022\016\n\nNAVIGATION\020\002\022\013\n\007STARTUP\020\003" +
      "\022\020\n\014REACHED_CODE\020\004\022\023\n\017CONTENT_TRIGGER\020\005\022" +
      "\016\n\tTEST_RULE\020\350\007\"\207\001\n\013TriggerType\022\027\n\023TRIGG" +
      "ER_UNSPECIFIED\020\000\0226\n2MONITOR_AND_DUMP_WHE" +
      "N_SPECIFIC_HISTOGRAM_AND_VALUE\020\001\022\'\n#MONI" +
      "TOR_AND_DUMP_WHEN_TRIGGER_NAMED\020\002"
    };
    descriptor = com.google.protobuf.Descriptors.FileDescriptor
      .internalBuildGeneratedFileFrom(descriptorData,
        new com.google.protobuf.Descriptors.FileDescriptor[] {
        });
    internal_static_perfetto_protos_ChromeMetadataPacket_descriptor =
      getDescriptor().getMessageTypes().get(0);
    internal_static_perfetto_protos_ChromeMetadataPacket_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_perfetto_protos_ChromeMetadataPacket_descriptor,
        new java.lang.String[] { "BackgroundTracingMetadata", "ChromeVersionCode", "EnabledCategories", });
    internal_static_perfetto_protos_BackgroundTracingMetadata_descriptor =
      getDescriptor().getMessageTypes().get(1);
    internal_static_perfetto_protos_BackgroundTracingMetadata_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_perfetto_protos_BackgroundTracingMetadata_descriptor,
        new java.lang.String[] { "TriggeredRule", "ActiveRules", });
    internal_static_perfetto_protos_BackgroundTracingMetadata_TriggerRule_descriptor =
      internal_static_perfetto_protos_BackgroundTracingMetadata_descriptor.getNestedTypes().get(0);
    internal_static_perfetto_protos_BackgroundTracingMetadata_TriggerRule_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_perfetto_protos_BackgroundTracingMetadata_TriggerRule_descriptor,
        new java.lang.String[] { "TriggerType", "HistogramRule", "NamedRule", });
    internal_static_perfetto_protos_BackgroundTracingMetadata_TriggerRule_HistogramRule_descriptor =
      internal_static_perfetto_protos_BackgroundTracingMetadata_TriggerRule_descriptor.getNestedTypes().get(0);
    internal_static_perfetto_protos_BackgroundTracingMetadata_TriggerRule_HistogramRule_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_perfetto_protos_BackgroundTracingMetadata_TriggerRule_HistogramRule_descriptor,
        new java.lang.String[] { "HistogramNameHash", "HistogramMinTrigger", "HistogramMaxTrigger", });
    internal_static_perfetto_protos_BackgroundTracingMetadata_TriggerRule_NamedRule_descriptor =
      internal_static_perfetto_protos_BackgroundTracingMetadata_TriggerRule_descriptor.getNestedTypes().get(1);
    internal_static_perfetto_protos_BackgroundTracingMetadata_TriggerRule_NamedRule_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_perfetto_protos_BackgroundTracingMetadata_TriggerRule_NamedRule_descriptor,
        new java.lang.String[] { "EventType", "ContentTriggerNameHash", });
  }

  // @@protoc_insertion_point(outer_class_scope)
}
