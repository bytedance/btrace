// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: protos/perfetto/trace/track_event/chrome_thread_descriptor.proto

package perfetto.protos;

public final class ChromeThreadDescriptorOuterClass {
  private ChromeThreadDescriptorOuterClass() {}
  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistryLite registry) {
  }

  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistry registry) {
    registerAllExtensions(
        (com.google.protobuf.ExtensionRegistryLite) registry);
  }
  public interface ChromeThreadDescriptorOrBuilder extends
      // @@protoc_insertion_point(interface_extends:perfetto.protos.ChromeThreadDescriptor)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <code>optional .perfetto.protos.ChromeThreadDescriptor.ThreadType thread_type = 1;</code>
     * @return Whether the threadType field is set.
     */
    boolean hasThreadType();
    /**
     * <code>optional .perfetto.protos.ChromeThreadDescriptor.ThreadType thread_type = 1;</code>
     * @return The threadType.
     */
    perfetto.protos.ChromeThreadDescriptorOuterClass.ChromeThreadDescriptor.ThreadType getThreadType();

    /**
     * <pre>
     * To support old UI. New UI should determine default sorting by thread_type.
     * </pre>
     *
     * <code>optional int32 legacy_sort_index = 2;</code>
     * @return Whether the legacySortIndex field is set.
     */
    boolean hasLegacySortIndex();
    /**
     * <pre>
     * To support old UI. New UI should determine default sorting by thread_type.
     * </pre>
     *
     * <code>optional int32 legacy_sort_index = 2;</code>
     * @return The legacySortIndex.
     */
    int getLegacySortIndex();
  }
  /**
   * <pre>
   * Describes a Chrome thread's attributes. Emitted as part of a TrackDescriptor,
   * usually by the thread's trace writer. Must be paired with a ThreadDescriptor
   * in the same TrackDescriptor.
   * Next id: 3.
   * </pre>
   *
   * Protobuf type {@code perfetto.protos.ChromeThreadDescriptor}
   */
  public static final class ChromeThreadDescriptor extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:perfetto.protos.ChromeThreadDescriptor)
      ChromeThreadDescriptorOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use ChromeThreadDescriptor.newBuilder() to construct.
    private ChromeThreadDescriptor(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private ChromeThreadDescriptor() {
      threadType_ = 0;
    }

    @java.lang.Override
    @SuppressWarnings({"unused"})
    protected java.lang.Object newInstance(
        UnusedPrivateParameter unused) {
      return new ChromeThreadDescriptor();
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return perfetto.protos.ChromeThreadDescriptorOuterClass.internal_static_perfetto_protos_ChromeThreadDescriptor_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return perfetto.protos.ChromeThreadDescriptorOuterClass.internal_static_perfetto_protos_ChromeThreadDescriptor_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              perfetto.protos.ChromeThreadDescriptorOuterClass.ChromeThreadDescriptor.class, perfetto.protos.ChromeThreadDescriptorOuterClass.ChromeThreadDescriptor.Builder.class);
    }

    /**
     * Protobuf enum {@code perfetto.protos.ChromeThreadDescriptor.ThreadType}
     */
    public enum ThreadType
        implements com.google.protobuf.ProtocolMessageEnum {
      /**
       * <code>THREAD_UNSPECIFIED = 0;</code>
       */
      THREAD_UNSPECIFIED(0),
      /**
       * <code>THREAD_MAIN = 1;</code>
       */
      THREAD_MAIN(1),
      /**
       * <code>THREAD_IO = 2;</code>
       */
      THREAD_IO(2),
      /**
       * <code>THREAD_POOL_BG_WORKER = 3;</code>
       */
      THREAD_POOL_BG_WORKER(3),
      /**
       * <code>THREAD_POOL_FG_WORKER = 4;</code>
       */
      THREAD_POOL_FG_WORKER(4),
      /**
       * <code>THREAD_POOL_FG_BLOCKING = 5;</code>
       */
      THREAD_POOL_FG_BLOCKING(5),
      /**
       * <code>THREAD_POOL_BG_BLOCKING = 6;</code>
       */
      THREAD_POOL_BG_BLOCKING(6),
      /**
       * <code>THREAD_POOL_SERVICE = 7;</code>
       */
      THREAD_POOL_SERVICE(7),
      /**
       * <code>THREAD_COMPOSITOR = 8;</code>
       */
      THREAD_COMPOSITOR(8),
      /**
       * <code>THREAD_VIZ_COMPOSITOR = 9;</code>
       */
      THREAD_VIZ_COMPOSITOR(9),
      /**
       * <code>THREAD_COMPOSITOR_WORKER = 10;</code>
       */
      THREAD_COMPOSITOR_WORKER(10),
      /**
       * <code>THREAD_SERVICE_WORKER = 11;</code>
       */
      THREAD_SERVICE_WORKER(11),
      /**
       * <code>THREAD_NETWORK_SERVICE = 12;</code>
       */
      THREAD_NETWORK_SERVICE(12),
      /**
       * <code>THREAD_CHILD_IO = 13;</code>
       */
      THREAD_CHILD_IO(13),
      /**
       * <code>THREAD_BROWSER_IO = 14;</code>
       */
      THREAD_BROWSER_IO(14),
      /**
       * <code>THREAD_BROWSER_MAIN = 15;</code>
       */
      THREAD_BROWSER_MAIN(15),
      /**
       * <code>THREAD_RENDERER_MAIN = 16;</code>
       */
      THREAD_RENDERER_MAIN(16),
      /**
       * <code>THREAD_UTILITY_MAIN = 17;</code>
       */
      THREAD_UTILITY_MAIN(17),
      /**
       * <code>THREAD_GPU_MAIN = 18;</code>
       */
      THREAD_GPU_MAIN(18),
      /**
       * <code>THREAD_CACHE_BLOCKFILE = 19;</code>
       */
      THREAD_CACHE_BLOCKFILE(19),
      /**
       * <code>THREAD_MEDIA = 20;</code>
       */
      THREAD_MEDIA(20),
      /**
       * <code>THREAD_AUDIO_OUTPUTDEVICE = 21;</code>
       */
      THREAD_AUDIO_OUTPUTDEVICE(21),
      /**
       * <code>THREAD_AUDIO_INPUTDEVICE = 22;</code>
       */
      THREAD_AUDIO_INPUTDEVICE(22),
      /**
       * <code>THREAD_GPU_MEMORY = 23;</code>
       */
      THREAD_GPU_MEMORY(23),
      /**
       * <code>THREAD_GPU_VSYNC = 24;</code>
       */
      THREAD_GPU_VSYNC(24),
      /**
       * <code>THREAD_DXA_VIDEODECODER = 25;</code>
       */
      THREAD_DXA_VIDEODECODER(25),
      /**
       * <code>THREAD_BROWSER_WATCHDOG = 26;</code>
       */
      THREAD_BROWSER_WATCHDOG(26),
      /**
       * <code>THREAD_WEBRTC_NETWORK = 27;</code>
       */
      THREAD_WEBRTC_NETWORK(27),
      /**
       * <code>THREAD_WINDOW_OWNER = 28;</code>
       */
      THREAD_WINDOW_OWNER(28),
      /**
       * <code>THREAD_WEBRTC_SIGNALING = 29;</code>
       */
      THREAD_WEBRTC_SIGNALING(29),
      /**
       * <code>THREAD_WEBRTC_WORKER = 30;</code>
       */
      THREAD_WEBRTC_WORKER(30),
      /**
       * <code>THREAD_PPAPI_MAIN = 31;</code>
       */
      THREAD_PPAPI_MAIN(31),
      /**
       * <code>THREAD_GPU_WATCHDOG = 32;</code>
       */
      THREAD_GPU_WATCHDOG(32),
      /**
       * <code>THREAD_SWAPPER = 33;</code>
       */
      THREAD_SWAPPER(33),
      /**
       * <code>THREAD_GAMEPAD_POLLING = 34;</code>
       */
      THREAD_GAMEPAD_POLLING(34),
      /**
       * <code>THREAD_WEBCRYPTO = 35;</code>
       */
      THREAD_WEBCRYPTO(35),
      /**
       * <code>THREAD_DATABASE = 36;</code>
       */
      THREAD_DATABASE(36),
      /**
       * <code>THREAD_PROXYRESOLVER = 37;</code>
       */
      THREAD_PROXYRESOLVER(37),
      /**
       * <code>THREAD_DEVTOOLSADB = 38;</code>
       */
      THREAD_DEVTOOLSADB(38),
      /**
       * <code>THREAD_NETWORKCONFIGWATCHER = 39;</code>
       */
      THREAD_NETWORKCONFIGWATCHER(39),
      /**
       * <code>THREAD_WASAPI_RENDER = 40;</code>
       */
      THREAD_WASAPI_RENDER(40),
      /**
       * <code>THREAD_LOADER_LOCK_SAMPLER = 41;</code>
       */
      THREAD_LOADER_LOCK_SAMPLER(41),
      /**
       * <code>THREAD_MEMORY_INFRA = 50;</code>
       */
      THREAD_MEMORY_INFRA(50),
      /**
       * <code>THREAD_SAMPLING_PROFILER = 51;</code>
       */
      THREAD_SAMPLING_PROFILER(51),
      ;

      /**
       * <code>THREAD_UNSPECIFIED = 0;</code>
       */
      public static final int THREAD_UNSPECIFIED_VALUE = 0;
      /**
       * <code>THREAD_MAIN = 1;</code>
       */
      public static final int THREAD_MAIN_VALUE = 1;
      /**
       * <code>THREAD_IO = 2;</code>
       */
      public static final int THREAD_IO_VALUE = 2;
      /**
       * <code>THREAD_POOL_BG_WORKER = 3;</code>
       */
      public static final int THREAD_POOL_BG_WORKER_VALUE = 3;
      /**
       * <code>THREAD_POOL_FG_WORKER = 4;</code>
       */
      public static final int THREAD_POOL_FG_WORKER_VALUE = 4;
      /**
       * <code>THREAD_POOL_FG_BLOCKING = 5;</code>
       */
      public static final int THREAD_POOL_FG_BLOCKING_VALUE = 5;
      /**
       * <code>THREAD_POOL_BG_BLOCKING = 6;</code>
       */
      public static final int THREAD_POOL_BG_BLOCKING_VALUE = 6;
      /**
       * <code>THREAD_POOL_SERVICE = 7;</code>
       */
      public static final int THREAD_POOL_SERVICE_VALUE = 7;
      /**
       * <code>THREAD_COMPOSITOR = 8;</code>
       */
      public static final int THREAD_COMPOSITOR_VALUE = 8;
      /**
       * <code>THREAD_VIZ_COMPOSITOR = 9;</code>
       */
      public static final int THREAD_VIZ_COMPOSITOR_VALUE = 9;
      /**
       * <code>THREAD_COMPOSITOR_WORKER = 10;</code>
       */
      public static final int THREAD_COMPOSITOR_WORKER_VALUE = 10;
      /**
       * <code>THREAD_SERVICE_WORKER = 11;</code>
       */
      public static final int THREAD_SERVICE_WORKER_VALUE = 11;
      /**
       * <code>THREAD_NETWORK_SERVICE = 12;</code>
       */
      public static final int THREAD_NETWORK_SERVICE_VALUE = 12;
      /**
       * <code>THREAD_CHILD_IO = 13;</code>
       */
      public static final int THREAD_CHILD_IO_VALUE = 13;
      /**
       * <code>THREAD_BROWSER_IO = 14;</code>
       */
      public static final int THREAD_BROWSER_IO_VALUE = 14;
      /**
       * <code>THREAD_BROWSER_MAIN = 15;</code>
       */
      public static final int THREAD_BROWSER_MAIN_VALUE = 15;
      /**
       * <code>THREAD_RENDERER_MAIN = 16;</code>
       */
      public static final int THREAD_RENDERER_MAIN_VALUE = 16;
      /**
       * <code>THREAD_UTILITY_MAIN = 17;</code>
       */
      public static final int THREAD_UTILITY_MAIN_VALUE = 17;
      /**
       * <code>THREAD_GPU_MAIN = 18;</code>
       */
      public static final int THREAD_GPU_MAIN_VALUE = 18;
      /**
       * <code>THREAD_CACHE_BLOCKFILE = 19;</code>
       */
      public static final int THREAD_CACHE_BLOCKFILE_VALUE = 19;
      /**
       * <code>THREAD_MEDIA = 20;</code>
       */
      public static final int THREAD_MEDIA_VALUE = 20;
      /**
       * <code>THREAD_AUDIO_OUTPUTDEVICE = 21;</code>
       */
      public static final int THREAD_AUDIO_OUTPUTDEVICE_VALUE = 21;
      /**
       * <code>THREAD_AUDIO_INPUTDEVICE = 22;</code>
       */
      public static final int THREAD_AUDIO_INPUTDEVICE_VALUE = 22;
      /**
       * <code>THREAD_GPU_MEMORY = 23;</code>
       */
      public static final int THREAD_GPU_MEMORY_VALUE = 23;
      /**
       * <code>THREAD_GPU_VSYNC = 24;</code>
       */
      public static final int THREAD_GPU_VSYNC_VALUE = 24;
      /**
       * <code>THREAD_DXA_VIDEODECODER = 25;</code>
       */
      public static final int THREAD_DXA_VIDEODECODER_VALUE = 25;
      /**
       * <code>THREAD_BROWSER_WATCHDOG = 26;</code>
       */
      public static final int THREAD_BROWSER_WATCHDOG_VALUE = 26;
      /**
       * <code>THREAD_WEBRTC_NETWORK = 27;</code>
       */
      public static final int THREAD_WEBRTC_NETWORK_VALUE = 27;
      /**
       * <code>THREAD_WINDOW_OWNER = 28;</code>
       */
      public static final int THREAD_WINDOW_OWNER_VALUE = 28;
      /**
       * <code>THREAD_WEBRTC_SIGNALING = 29;</code>
       */
      public static final int THREAD_WEBRTC_SIGNALING_VALUE = 29;
      /**
       * <code>THREAD_WEBRTC_WORKER = 30;</code>
       */
      public static final int THREAD_WEBRTC_WORKER_VALUE = 30;
      /**
       * <code>THREAD_PPAPI_MAIN = 31;</code>
       */
      public static final int THREAD_PPAPI_MAIN_VALUE = 31;
      /**
       * <code>THREAD_GPU_WATCHDOG = 32;</code>
       */
      public static final int THREAD_GPU_WATCHDOG_VALUE = 32;
      /**
       * <code>THREAD_SWAPPER = 33;</code>
       */
      public static final int THREAD_SWAPPER_VALUE = 33;
      /**
       * <code>THREAD_GAMEPAD_POLLING = 34;</code>
       */
      public static final int THREAD_GAMEPAD_POLLING_VALUE = 34;
      /**
       * <code>THREAD_WEBCRYPTO = 35;</code>
       */
      public static final int THREAD_WEBCRYPTO_VALUE = 35;
      /**
       * <code>THREAD_DATABASE = 36;</code>
       */
      public static final int THREAD_DATABASE_VALUE = 36;
      /**
       * <code>THREAD_PROXYRESOLVER = 37;</code>
       */
      public static final int THREAD_PROXYRESOLVER_VALUE = 37;
      /**
       * <code>THREAD_DEVTOOLSADB = 38;</code>
       */
      public static final int THREAD_DEVTOOLSADB_VALUE = 38;
      /**
       * <code>THREAD_NETWORKCONFIGWATCHER = 39;</code>
       */
      public static final int THREAD_NETWORKCONFIGWATCHER_VALUE = 39;
      /**
       * <code>THREAD_WASAPI_RENDER = 40;</code>
       */
      public static final int THREAD_WASAPI_RENDER_VALUE = 40;
      /**
       * <code>THREAD_LOADER_LOCK_SAMPLER = 41;</code>
       */
      public static final int THREAD_LOADER_LOCK_SAMPLER_VALUE = 41;
      /**
       * <code>THREAD_MEMORY_INFRA = 50;</code>
       */
      public static final int THREAD_MEMORY_INFRA_VALUE = 50;
      /**
       * <code>THREAD_SAMPLING_PROFILER = 51;</code>
       */
      public static final int THREAD_SAMPLING_PROFILER_VALUE = 51;


      public final int getNumber() {
        return value;
      }

      /**
       * @param value The numeric wire value of the corresponding enum entry.
       * @return The enum associated with the given numeric wire value.
       * @deprecated Use {@link #forNumber(int)} instead.
       */
      @java.lang.Deprecated
      public static ThreadType valueOf(int value) {
        return forNumber(value);
      }

      /**
       * @param value The numeric wire value of the corresponding enum entry.
       * @return The enum associated with the given numeric wire value.
       */
      public static ThreadType forNumber(int value) {
        switch (value) {
          case 0: return THREAD_UNSPECIFIED;
          case 1: return THREAD_MAIN;
          case 2: return THREAD_IO;
          case 3: return THREAD_POOL_BG_WORKER;
          case 4: return THREAD_POOL_FG_WORKER;
          case 5: return THREAD_POOL_FG_BLOCKING;
          case 6: return THREAD_POOL_BG_BLOCKING;
          case 7: return THREAD_POOL_SERVICE;
          case 8: return THREAD_COMPOSITOR;
          case 9: return THREAD_VIZ_COMPOSITOR;
          case 10: return THREAD_COMPOSITOR_WORKER;
          case 11: return THREAD_SERVICE_WORKER;
          case 12: return THREAD_NETWORK_SERVICE;
          case 13: return THREAD_CHILD_IO;
          case 14: return THREAD_BROWSER_IO;
          case 15: return THREAD_BROWSER_MAIN;
          case 16: return THREAD_RENDERER_MAIN;
          case 17: return THREAD_UTILITY_MAIN;
          case 18: return THREAD_GPU_MAIN;
          case 19: return THREAD_CACHE_BLOCKFILE;
          case 20: return THREAD_MEDIA;
          case 21: return THREAD_AUDIO_OUTPUTDEVICE;
          case 22: return THREAD_AUDIO_INPUTDEVICE;
          case 23: return THREAD_GPU_MEMORY;
          case 24: return THREAD_GPU_VSYNC;
          case 25: return THREAD_DXA_VIDEODECODER;
          case 26: return THREAD_BROWSER_WATCHDOG;
          case 27: return THREAD_WEBRTC_NETWORK;
          case 28: return THREAD_WINDOW_OWNER;
          case 29: return THREAD_WEBRTC_SIGNALING;
          case 30: return THREAD_WEBRTC_WORKER;
          case 31: return THREAD_PPAPI_MAIN;
          case 32: return THREAD_GPU_WATCHDOG;
          case 33: return THREAD_SWAPPER;
          case 34: return THREAD_GAMEPAD_POLLING;
          case 35: return THREAD_WEBCRYPTO;
          case 36: return THREAD_DATABASE;
          case 37: return THREAD_PROXYRESOLVER;
          case 38: return THREAD_DEVTOOLSADB;
          case 39: return THREAD_NETWORKCONFIGWATCHER;
          case 40: return THREAD_WASAPI_RENDER;
          case 41: return THREAD_LOADER_LOCK_SAMPLER;
          case 50: return THREAD_MEMORY_INFRA;
          case 51: return THREAD_SAMPLING_PROFILER;
          default: return null;
        }
      }

      public static com.google.protobuf.Internal.EnumLiteMap<ThreadType>
          internalGetValueMap() {
        return internalValueMap;
      }
      private static final com.google.protobuf.Internal.EnumLiteMap<
          ThreadType> internalValueMap =
            new com.google.protobuf.Internal.EnumLiteMap<ThreadType>() {
              public ThreadType findValueByNumber(int number) {
                return ThreadType.forNumber(number);
              }
            };

      public final com.google.protobuf.Descriptors.EnumValueDescriptor
          getValueDescriptor() {
        return getDescriptor().getValues().get(ordinal());
      }
      public final com.google.protobuf.Descriptors.EnumDescriptor
          getDescriptorForType() {
        return getDescriptor();
      }
      public static final com.google.protobuf.Descriptors.EnumDescriptor
          getDescriptor() {
        return perfetto.protos.ChromeThreadDescriptorOuterClass.ChromeThreadDescriptor.getDescriptor().getEnumTypes().get(0);
      }

      private static final ThreadType[] VALUES = values();

      public static ThreadType valueOf(
          com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
        if (desc.getType() != getDescriptor()) {
          throw new java.lang.IllegalArgumentException(
            "EnumValueDescriptor is not for this type.");
        }
        return VALUES[desc.getIndex()];
      }

      private final int value;

      private ThreadType(int value) {
        this.value = value;
      }

      // @@protoc_insertion_point(enum_scope:perfetto.protos.ChromeThreadDescriptor.ThreadType)
    }

    private int bitField0_;
    public static final int THREAD_TYPE_FIELD_NUMBER = 1;
    private int threadType_ = 0;
    /**
     * <code>optional .perfetto.protos.ChromeThreadDescriptor.ThreadType thread_type = 1;</code>
     * @return Whether the threadType field is set.
     */
    @java.lang.Override public boolean hasThreadType() {
      return ((bitField0_ & 0x00000001) != 0);
    }
    /**
     * <code>optional .perfetto.protos.ChromeThreadDescriptor.ThreadType thread_type = 1;</code>
     * @return The threadType.
     */
    @java.lang.Override public perfetto.protos.ChromeThreadDescriptorOuterClass.ChromeThreadDescriptor.ThreadType getThreadType() {
      perfetto.protos.ChromeThreadDescriptorOuterClass.ChromeThreadDescriptor.ThreadType result = perfetto.protos.ChromeThreadDescriptorOuterClass.ChromeThreadDescriptor.ThreadType.forNumber(threadType_);
      return result == null ? perfetto.protos.ChromeThreadDescriptorOuterClass.ChromeThreadDescriptor.ThreadType.THREAD_UNSPECIFIED : result;
    }

    public static final int LEGACY_SORT_INDEX_FIELD_NUMBER = 2;
    private int legacySortIndex_ = 0;
    /**
     * <pre>
     * To support old UI. New UI should determine default sorting by thread_type.
     * </pre>
     *
     * <code>optional int32 legacy_sort_index = 2;</code>
     * @return Whether the legacySortIndex field is set.
     */
    @java.lang.Override
    public boolean hasLegacySortIndex() {
      return ((bitField0_ & 0x00000002) != 0);
    }
    /**
     * <pre>
     * To support old UI. New UI should determine default sorting by thread_type.
     * </pre>
     *
     * <code>optional int32 legacy_sort_index = 2;</code>
     * @return The legacySortIndex.
     */
    @java.lang.Override
    public int getLegacySortIndex() {
      return legacySortIndex_;
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (((bitField0_ & 0x00000001) != 0)) {
        output.writeEnum(1, threadType_);
      }
      if (((bitField0_ & 0x00000002) != 0)) {
        output.writeInt32(2, legacySortIndex_);
      }
      getUnknownFields().writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) != 0)) {
        size += com.google.protobuf.CodedOutputStream
          .computeEnumSize(1, threadType_);
      }
      if (((bitField0_ & 0x00000002) != 0)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(2, legacySortIndex_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof perfetto.protos.ChromeThreadDescriptorOuterClass.ChromeThreadDescriptor)) {
        return super.equals(obj);
      }
      perfetto.protos.ChromeThreadDescriptorOuterClass.ChromeThreadDescriptor other = (perfetto.protos.ChromeThreadDescriptorOuterClass.ChromeThreadDescriptor) obj;

      if (hasThreadType() != other.hasThreadType()) return false;
      if (hasThreadType()) {
        if (threadType_ != other.threadType_) return false;
      }
      if (hasLegacySortIndex() != other.hasLegacySortIndex()) return false;
      if (hasLegacySortIndex()) {
        if (getLegacySortIndex()
            != other.getLegacySortIndex()) return false;
      }
      if (!getUnknownFields().equals(other.getUnknownFields())) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      if (hasThreadType()) {
        hash = (37 * hash) + THREAD_TYPE_FIELD_NUMBER;
        hash = (53 * hash) + threadType_;
      }
      if (hasLegacySortIndex()) {
        hash = (37 * hash) + LEGACY_SORT_INDEX_FIELD_NUMBER;
        hash = (53 * hash) + getLegacySortIndex();
      }
      hash = (29 * hash) + getUnknownFields().hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static perfetto.protos.ChromeThreadDescriptorOuterClass.ChromeThreadDescriptor parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static perfetto.protos.ChromeThreadDescriptorOuterClass.ChromeThreadDescriptor parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static perfetto.protos.ChromeThreadDescriptorOuterClass.ChromeThreadDescriptor parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static perfetto.protos.ChromeThreadDescriptorOuterClass.ChromeThreadDescriptor parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static perfetto.protos.ChromeThreadDescriptorOuterClass.ChromeThreadDescriptor parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static perfetto.protos.ChromeThreadDescriptorOuterClass.ChromeThreadDescriptor parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static perfetto.protos.ChromeThreadDescriptorOuterClass.ChromeThreadDescriptor parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static perfetto.protos.ChromeThreadDescriptorOuterClass.ChromeThreadDescriptor parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static perfetto.protos.ChromeThreadDescriptorOuterClass.ChromeThreadDescriptor parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static perfetto.protos.ChromeThreadDescriptorOuterClass.ChromeThreadDescriptor parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static perfetto.protos.ChromeThreadDescriptorOuterClass.ChromeThreadDescriptor parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static perfetto.protos.ChromeThreadDescriptorOuterClass.ChromeThreadDescriptor parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(perfetto.protos.ChromeThreadDescriptorOuterClass.ChromeThreadDescriptor prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * <pre>
     * Describes a Chrome thread's attributes. Emitted as part of a TrackDescriptor,
     * usually by the thread's trace writer. Must be paired with a ThreadDescriptor
     * in the same TrackDescriptor.
     * Next id: 3.
     * </pre>
     *
     * Protobuf type {@code perfetto.protos.ChromeThreadDescriptor}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:perfetto.protos.ChromeThreadDescriptor)
        perfetto.protos.ChromeThreadDescriptorOuterClass.ChromeThreadDescriptorOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return perfetto.protos.ChromeThreadDescriptorOuterClass.internal_static_perfetto_protos_ChromeThreadDescriptor_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return perfetto.protos.ChromeThreadDescriptorOuterClass.internal_static_perfetto_protos_ChromeThreadDescriptor_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                perfetto.protos.ChromeThreadDescriptorOuterClass.ChromeThreadDescriptor.class, perfetto.protos.ChromeThreadDescriptorOuterClass.ChromeThreadDescriptor.Builder.class);
      }

      // Construct using perfetto.protos.ChromeThreadDescriptorOuterClass.ChromeThreadDescriptor.newBuilder()
      private Builder() {

      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);

      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        bitField0_ = 0;
        threadType_ = 0;
        legacySortIndex_ = 0;
        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return perfetto.protos.ChromeThreadDescriptorOuterClass.internal_static_perfetto_protos_ChromeThreadDescriptor_descriptor;
      }

      @java.lang.Override
      public perfetto.protos.ChromeThreadDescriptorOuterClass.ChromeThreadDescriptor getDefaultInstanceForType() {
        return perfetto.protos.ChromeThreadDescriptorOuterClass.ChromeThreadDescriptor.getDefaultInstance();
      }

      @java.lang.Override
      public perfetto.protos.ChromeThreadDescriptorOuterClass.ChromeThreadDescriptor build() {
        perfetto.protos.ChromeThreadDescriptorOuterClass.ChromeThreadDescriptor result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public perfetto.protos.ChromeThreadDescriptorOuterClass.ChromeThreadDescriptor buildPartial() {
        perfetto.protos.ChromeThreadDescriptorOuterClass.ChromeThreadDescriptor result = new perfetto.protos.ChromeThreadDescriptorOuterClass.ChromeThreadDescriptor(this);
        if (bitField0_ != 0) { buildPartial0(result); }
        onBuilt();
        return result;
      }

      private void buildPartial0(perfetto.protos.ChromeThreadDescriptorOuterClass.ChromeThreadDescriptor result) {
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) != 0)) {
          result.threadType_ = threadType_;
          to_bitField0_ |= 0x00000001;
        }
        if (((from_bitField0_ & 0x00000002) != 0)) {
          result.legacySortIndex_ = legacySortIndex_;
          to_bitField0_ |= 0x00000002;
        }
        result.bitField0_ |= to_bitField0_;
      }

      @java.lang.Override
      public Builder clone() {
        return super.clone();
      }
      @java.lang.Override
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.setField(field, value);
      }
      @java.lang.Override
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return super.clearField(field);
      }
      @java.lang.Override
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return super.clearOneof(oneof);
      }
      @java.lang.Override
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, java.lang.Object value) {
        return super.setRepeatedField(field, index, value);
      }
      @java.lang.Override
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.addRepeatedField(field, value);
      }
      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof perfetto.protos.ChromeThreadDescriptorOuterClass.ChromeThreadDescriptor) {
          return mergeFrom((perfetto.protos.ChromeThreadDescriptorOuterClass.ChromeThreadDescriptor)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(perfetto.protos.ChromeThreadDescriptorOuterClass.ChromeThreadDescriptor other) {
        if (other == perfetto.protos.ChromeThreadDescriptorOuterClass.ChromeThreadDescriptor.getDefaultInstance()) return this;
        if (other.hasThreadType()) {
          setThreadType(other.getThreadType());
        }
        if (other.hasLegacySortIndex()) {
          setLegacySortIndex(other.getLegacySortIndex());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        if (extensionRegistry == null) {
          throw new java.lang.NullPointerException();
        }
        try {
          boolean done = false;
          while (!done) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                done = true;
                break;
              case 8: {
                int tmpRaw = input.readEnum();
                perfetto.protos.ChromeThreadDescriptorOuterClass.ChromeThreadDescriptor.ThreadType tmpValue =
                    perfetto.protos.ChromeThreadDescriptorOuterClass.ChromeThreadDescriptor.ThreadType.forNumber(tmpRaw);
                if (tmpValue == null) {
                  mergeUnknownVarintField(1, tmpRaw);
                } else {
                  threadType_ = tmpRaw;
                  bitField0_ |= 0x00000001;
                }
                break;
              } // case 8
              case 16: {
                legacySortIndex_ = input.readInt32();
                bitField0_ |= 0x00000002;
                break;
              } // case 16
              default: {
                if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                  done = true; // was an endgroup tag
                }
                break;
              } // default:
            } // switch (tag)
          } // while (!done)
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.unwrapIOException();
        } finally {
          onChanged();
        } // finally
        return this;
      }
      private int bitField0_;

      private int threadType_ = 0;
      /**
       * <code>optional .perfetto.protos.ChromeThreadDescriptor.ThreadType thread_type = 1;</code>
       * @return Whether the threadType field is set.
       */
      @java.lang.Override public boolean hasThreadType() {
        return ((bitField0_ & 0x00000001) != 0);
      }
      /**
       * <code>optional .perfetto.protos.ChromeThreadDescriptor.ThreadType thread_type = 1;</code>
       * @return The threadType.
       */
      @java.lang.Override
      public perfetto.protos.ChromeThreadDescriptorOuterClass.ChromeThreadDescriptor.ThreadType getThreadType() {
        perfetto.protos.ChromeThreadDescriptorOuterClass.ChromeThreadDescriptor.ThreadType result = perfetto.protos.ChromeThreadDescriptorOuterClass.ChromeThreadDescriptor.ThreadType.forNumber(threadType_);
        return result == null ? perfetto.protos.ChromeThreadDescriptorOuterClass.ChromeThreadDescriptor.ThreadType.THREAD_UNSPECIFIED : result;
      }
      /**
       * <code>optional .perfetto.protos.ChromeThreadDescriptor.ThreadType thread_type = 1;</code>
       * @param value The threadType to set.
       * @return This builder for chaining.
       */
      public Builder setThreadType(perfetto.protos.ChromeThreadDescriptorOuterClass.ChromeThreadDescriptor.ThreadType value) {
        if (value == null) {
          throw new NullPointerException();
        }
        bitField0_ |= 0x00000001;
        threadType_ = value.getNumber();
        onChanged();
        return this;
      }
      /**
       * <code>optional .perfetto.protos.ChromeThreadDescriptor.ThreadType thread_type = 1;</code>
       * @return This builder for chaining.
       */
      public Builder clearThreadType() {
        bitField0_ = (bitField0_ & ~0x00000001);
        threadType_ = 0;
        onChanged();
        return this;
      }

      private int legacySortIndex_ ;
      /**
       * <pre>
       * To support old UI. New UI should determine default sorting by thread_type.
       * </pre>
       *
       * <code>optional int32 legacy_sort_index = 2;</code>
       * @return Whether the legacySortIndex field is set.
       */
      @java.lang.Override
      public boolean hasLegacySortIndex() {
        return ((bitField0_ & 0x00000002) != 0);
      }
      /**
       * <pre>
       * To support old UI. New UI should determine default sorting by thread_type.
       * </pre>
       *
       * <code>optional int32 legacy_sort_index = 2;</code>
       * @return The legacySortIndex.
       */
      @java.lang.Override
      public int getLegacySortIndex() {
        return legacySortIndex_;
      }
      /**
       * <pre>
       * To support old UI. New UI should determine default sorting by thread_type.
       * </pre>
       *
       * <code>optional int32 legacy_sort_index = 2;</code>
       * @param value The legacySortIndex to set.
       * @return This builder for chaining.
       */
      public Builder setLegacySortIndex(int value) {
        
        legacySortIndex_ = value;
        bitField0_ |= 0x00000002;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * To support old UI. New UI should determine default sorting by thread_type.
       * </pre>
       *
       * <code>optional int32 legacy_sort_index = 2;</code>
       * @return This builder for chaining.
       */
      public Builder clearLegacySortIndex() {
        bitField0_ = (bitField0_ & ~0x00000002);
        legacySortIndex_ = 0;
        onChanged();
        return this;
      }
      @java.lang.Override
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      @java.lang.Override
      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:perfetto.protos.ChromeThreadDescriptor)
    }

    // @@protoc_insertion_point(class_scope:perfetto.protos.ChromeThreadDescriptor)
    private static final perfetto.protos.ChromeThreadDescriptorOuterClass.ChromeThreadDescriptor DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new perfetto.protos.ChromeThreadDescriptorOuterClass.ChromeThreadDescriptor();
    }

    public static perfetto.protos.ChromeThreadDescriptorOuterClass.ChromeThreadDescriptor getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    @java.lang.Deprecated public static final com.google.protobuf.Parser<ChromeThreadDescriptor>
        PARSER = new com.google.protobuf.AbstractParser<ChromeThreadDescriptor>() {
      @java.lang.Override
      public ChromeThreadDescriptor parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        Builder builder = newBuilder();
        try {
          builder.mergeFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.setUnfinishedMessage(builder.buildPartial());
        } catch (com.google.protobuf.UninitializedMessageException e) {
          throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
        } catch (java.io.IOException e) {
          throw new com.google.protobuf.InvalidProtocolBufferException(e)
              .setUnfinishedMessage(builder.buildPartial());
        }
        return builder.buildPartial();
      }
    };

    public static com.google.protobuf.Parser<ChromeThreadDescriptor> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<ChromeThreadDescriptor> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public perfetto.protos.ChromeThreadDescriptorOuterClass.ChromeThreadDescriptor getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_perfetto_protos_ChromeThreadDescriptor_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_perfetto_protos_ChromeThreadDescriptor_fieldAccessorTable;

  public static com.google.protobuf.Descriptors.FileDescriptor
      getDescriptor() {
    return descriptor;
  }
  private static  com.google.protobuf.Descriptors.FileDescriptor
      descriptor;
  static {
    java.lang.String[] descriptorData = {
      "\n@protos/perfetto/trace/track_event/chro" +
      "me_thread_descriptor.proto\022\017perfetto.pro" +
      "tos\"\354\t\n\026ChromeThreadDescriptor\022G\n\013thread" +
      "_type\030\001 \001(\01622.perfetto.protos.ChromeThre" +
      "adDescriptor.ThreadType\022\031\n\021legacy_sort_i" +
      "ndex\030\002 \001(\005\"\355\010\n\nThreadType\022\026\n\022THREAD_UNSP" +
      "ECIFIED\020\000\022\017\n\013THREAD_MAIN\020\001\022\r\n\tTHREAD_IO\020" +
      "\002\022\031\n\025THREAD_POOL_BG_WORKER\020\003\022\031\n\025THREAD_P" +
      "OOL_FG_WORKER\020\004\022\033\n\027THREAD_POOL_FG_BLOCKI" +
      "NG\020\005\022\033\n\027THREAD_POOL_BG_BLOCKING\020\006\022\027\n\023THR" +
      "EAD_POOL_SERVICE\020\007\022\025\n\021THREAD_COMPOSITOR\020" +
      "\010\022\031\n\025THREAD_VIZ_COMPOSITOR\020\t\022\034\n\030THREAD_C" +
      "OMPOSITOR_WORKER\020\n\022\031\n\025THREAD_SERVICE_WOR" +
      "KER\020\013\022\032\n\026THREAD_NETWORK_SERVICE\020\014\022\023\n\017THR" +
      "EAD_CHILD_IO\020\r\022\025\n\021THREAD_BROWSER_IO\020\016\022\027\n" +
      "\023THREAD_BROWSER_MAIN\020\017\022\030\n\024THREAD_RENDERE" +
      "R_MAIN\020\020\022\027\n\023THREAD_UTILITY_MAIN\020\021\022\023\n\017THR" +
      "EAD_GPU_MAIN\020\022\022\032\n\026THREAD_CACHE_BLOCKFILE" +
      "\020\023\022\020\n\014THREAD_MEDIA\020\024\022\035\n\031THREAD_AUDIO_OUT" +
      "PUTDEVICE\020\025\022\034\n\030THREAD_AUDIO_INPUTDEVICE\020" +
      "\026\022\025\n\021THREAD_GPU_MEMORY\020\027\022\024\n\020THREAD_GPU_V" +
      "SYNC\020\030\022\033\n\027THREAD_DXA_VIDEODECODER\020\031\022\033\n\027T" +
      "HREAD_BROWSER_WATCHDOG\020\032\022\031\n\025THREAD_WEBRT" +
      "C_NETWORK\020\033\022\027\n\023THREAD_WINDOW_OWNER\020\034\022\033\n\027" +
      "THREAD_WEBRTC_SIGNALING\020\035\022\030\n\024THREAD_WEBR" +
      "TC_WORKER\020\036\022\025\n\021THREAD_PPAPI_MAIN\020\037\022\027\n\023TH" +
      "READ_GPU_WATCHDOG\020 \022\022\n\016THREAD_SWAPPER\020!\022" +
      "\032\n\026THREAD_GAMEPAD_POLLING\020\"\022\024\n\020THREAD_WE" +
      "BCRYPTO\020#\022\023\n\017THREAD_DATABASE\020$\022\030\n\024THREAD" +
      "_PROXYRESOLVER\020%\022\026\n\022THREAD_DEVTOOLSADB\020&" +
      "\022\037\n\033THREAD_NETWORKCONFIGWATCHER\020\'\022\030\n\024THR" +
      "EAD_WASAPI_RENDER\020(\022\036\n\032THREAD_LOADER_LOC" +
      "K_SAMPLER\020)\022\027\n\023THREAD_MEMORY_INFRA\0202\022\034\n\030" +
      "THREAD_SAMPLING_PROFILER\0203"
    };
    descriptor = com.google.protobuf.Descriptors.FileDescriptor
      .internalBuildGeneratedFileFrom(descriptorData,
        new com.google.protobuf.Descriptors.FileDescriptor[] {
        });
    internal_static_perfetto_protos_ChromeThreadDescriptor_descriptor =
      getDescriptor().getMessageTypes().get(0);
    internal_static_perfetto_protos_ChromeThreadDescriptor_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_perfetto_protos_ChromeThreadDescriptor_descriptor,
        new java.lang.String[] { "ThreadType", "LegacySortIndex", });
  }

  // @@protoc_insertion_point(outer_class_scope)
}
