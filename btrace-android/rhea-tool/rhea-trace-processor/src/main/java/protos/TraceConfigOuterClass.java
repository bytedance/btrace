// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: protos/perfetto/config/trace_config.proto

package perfetto.protos;

public final class TraceConfigOuterClass {
  private TraceConfigOuterClass() {}
  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistryLite registry) {
  }

  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistry registry) {
    registerAllExtensions(
        (com.google.protobuf.ExtensionRegistryLite) registry);
  }
  public interface TraceConfigOrBuilder extends
      // @@protoc_insertion_point(interface_extends:perfetto.protos.TraceConfig)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <code>repeated .perfetto.protos.TraceConfig.BufferConfig buffers = 1;</code>
     */
    java.util.List<perfetto.protos.TraceConfigOuterClass.TraceConfig.BufferConfig> 
        getBuffersList();
    /**
     * <code>repeated .perfetto.protos.TraceConfig.BufferConfig buffers = 1;</code>
     */
    perfetto.protos.TraceConfigOuterClass.TraceConfig.BufferConfig getBuffers(int index);
    /**
     * <code>repeated .perfetto.protos.TraceConfig.BufferConfig buffers = 1;</code>
     */
    int getBuffersCount();
    /**
     * <code>repeated .perfetto.protos.TraceConfig.BufferConfig buffers = 1;</code>
     */
    java.util.List<? extends perfetto.protos.TraceConfigOuterClass.TraceConfig.BufferConfigOrBuilder> 
        getBuffersOrBuilderList();
    /**
     * <code>repeated .perfetto.protos.TraceConfig.BufferConfig buffers = 1;</code>
     */
    perfetto.protos.TraceConfigOuterClass.TraceConfig.BufferConfigOrBuilder getBuffersOrBuilder(
        int index);

    /**
     * <code>repeated .perfetto.protos.TraceConfig.DataSource data_sources = 2;</code>
     */
    java.util.List<perfetto.protos.TraceConfigOuterClass.TraceConfig.DataSource> 
        getDataSourcesList();
    /**
     * <code>repeated .perfetto.protos.TraceConfig.DataSource data_sources = 2;</code>
     */
    perfetto.protos.TraceConfigOuterClass.TraceConfig.DataSource getDataSources(int index);
    /**
     * <code>repeated .perfetto.protos.TraceConfig.DataSource data_sources = 2;</code>
     */
    int getDataSourcesCount();
    /**
     * <code>repeated .perfetto.protos.TraceConfig.DataSource data_sources = 2;</code>
     */
    java.util.List<? extends perfetto.protos.TraceConfigOuterClass.TraceConfig.DataSourceOrBuilder> 
        getDataSourcesOrBuilderList();
    /**
     * <code>repeated .perfetto.protos.TraceConfig.DataSource data_sources = 2;</code>
     */
    perfetto.protos.TraceConfigOuterClass.TraceConfig.DataSourceOrBuilder getDataSourcesOrBuilder(
        int index);

    /**
     * <code>optional .perfetto.protos.TraceConfig.BuiltinDataSource builtin_data_sources = 20;</code>
     * @return Whether the builtinDataSources field is set.
     */
    boolean hasBuiltinDataSources();
    /**
     * <code>optional .perfetto.protos.TraceConfig.BuiltinDataSource builtin_data_sources = 20;</code>
     * @return The builtinDataSources.
     */
    perfetto.protos.TraceConfigOuterClass.TraceConfig.BuiltinDataSource getBuiltinDataSources();
    /**
     * <code>optional .perfetto.protos.TraceConfig.BuiltinDataSource builtin_data_sources = 20;</code>
     */
    perfetto.protos.TraceConfigOuterClass.TraceConfig.BuiltinDataSourceOrBuilder getBuiltinDataSourcesOrBuilder();

    /**
     * <pre>
     * If specified, the trace will be stopped |duration_ms| after starting.
     * This does *not* count the time the system is suspended, so we will run
     * for duration_ms of system activity, not wall time.
     * However in case of traces with triggers, see
     * TriggerConfig.trigger_timeout_ms instead.
     * </pre>
     *
     * <code>optional uint32 duration_ms = 3;</code>
     * @return Whether the durationMs field is set.
     */
    boolean hasDurationMs();
    /**
     * <pre>
     * If specified, the trace will be stopped |duration_ms| after starting.
     * This does *not* count the time the system is suspended, so we will run
     * for duration_ms of system activity, not wall time.
     * However in case of traces with triggers, see
     * TriggerConfig.trigger_timeout_ms instead.
     * </pre>
     *
     * <code>optional uint32 duration_ms = 3;</code>
     * @return The durationMs.
     */
    int getDurationMs();

    /**
     * <pre>
     * This is set when --dropbox is passed to the Perfetto command line client
     * and enables guardrails that limit resource usage for traces requested
     * by statsd.
     * </pre>
     *
     * <code>optional bool enable_extra_guardrails = 4;</code>
     * @return Whether the enableExtraGuardrails field is set.
     */
    boolean hasEnableExtraGuardrails();
    /**
     * <pre>
     * This is set when --dropbox is passed to the Perfetto command line client
     * and enables guardrails that limit resource usage for traces requested
     * by statsd.
     * </pre>
     *
     * <code>optional bool enable_extra_guardrails = 4;</code>
     * @return The enableExtraGuardrails.
     */
    boolean getEnableExtraGuardrails();

    /**
     * <pre>
     * Reject producers that are not running under the same UID as the tracing
     * service.
     * </pre>
     *
     * <code>optional .perfetto.protos.TraceConfig.LockdownModeOperation lockdown_mode = 5;</code>
     * @return Whether the lockdownMode field is set.
     */
    boolean hasLockdownMode();
    /**
     * <pre>
     * Reject producers that are not running under the same UID as the tracing
     * service.
     * </pre>
     *
     * <code>optional .perfetto.protos.TraceConfig.LockdownModeOperation lockdown_mode = 5;</code>
     * @return The lockdownMode.
     */
    perfetto.protos.TraceConfigOuterClass.TraceConfig.LockdownModeOperation getLockdownMode();

    /**
     * <code>repeated .perfetto.protos.TraceConfig.ProducerConfig producers = 6;</code>
     */
    java.util.List<perfetto.protos.TraceConfigOuterClass.TraceConfig.ProducerConfig> 
        getProducersList();
    /**
     * <code>repeated .perfetto.protos.TraceConfig.ProducerConfig producers = 6;</code>
     */
    perfetto.protos.TraceConfigOuterClass.TraceConfig.ProducerConfig getProducers(int index);
    /**
     * <code>repeated .perfetto.protos.TraceConfig.ProducerConfig producers = 6;</code>
     */
    int getProducersCount();
    /**
     * <code>repeated .perfetto.protos.TraceConfig.ProducerConfig producers = 6;</code>
     */
    java.util.List<? extends perfetto.protos.TraceConfigOuterClass.TraceConfig.ProducerConfigOrBuilder> 
        getProducersOrBuilderList();
    /**
     * <code>repeated .perfetto.protos.TraceConfig.ProducerConfig producers = 6;</code>
     */
    perfetto.protos.TraceConfigOuterClass.TraceConfig.ProducerConfigOrBuilder getProducersOrBuilder(
        int index);

    /**
     * <pre>
     * Statsd-specific metadata.
     * </pre>
     *
     * <code>optional .perfetto.protos.TraceConfig.StatsdMetadata statsd_metadata = 7;</code>
     * @return Whether the statsdMetadata field is set.
     */
    boolean hasStatsdMetadata();
    /**
     * <pre>
     * Statsd-specific metadata.
     * </pre>
     *
     * <code>optional .perfetto.protos.TraceConfig.StatsdMetadata statsd_metadata = 7;</code>
     * @return The statsdMetadata.
     */
    perfetto.protos.TraceConfigOuterClass.TraceConfig.StatsdMetadata getStatsdMetadata();
    /**
     * <pre>
     * Statsd-specific metadata.
     * </pre>
     *
     * <code>optional .perfetto.protos.TraceConfig.StatsdMetadata statsd_metadata = 7;</code>
     */
    perfetto.protos.TraceConfigOuterClass.TraceConfig.StatsdMetadataOrBuilder getStatsdMetadataOrBuilder();

    /**
     * <pre>
     * When true &amp;&amp; |output_path| is empty, the EnableTracing() request must
     * provide a file descriptor. The service will then periodically read packets
     * out of the trace buffer and store it into the passed file.
     * If |output_path| is not empty no fd should be passed, the service
     * will create a new file and write into that (see comment below).
     * </pre>
     *
     * <code>optional bool write_into_file = 8;</code>
     * @return Whether the writeIntoFile field is set.
     */
    boolean hasWriteIntoFile();
    /**
     * <pre>
     * When true &amp;&amp; |output_path| is empty, the EnableTracing() request must
     * provide a file descriptor. The service will then periodically read packets
     * out of the trace buffer and store it into the passed file.
     * If |output_path| is not empty no fd should be passed, the service
     * will create a new file and write into that (see comment below).
     * </pre>
     *
     * <code>optional bool write_into_file = 8;</code>
     * @return The writeIntoFile.
     */
    boolean getWriteIntoFile();

    /**
     * <pre>
     * This must point to a non-existing file. If the file exists the service
     * will NOT overwrite and will fail instead as a security precaution.
     * On Android, when this is used with the system traced, the path must be
     * within /data/misc/perfetto-traces/ or the trace will fail.
     * This option has been introduced in Android R. Before R write_into_file
     * can be used only with the "pass a file descriptor over IPC" mode.
     * </pre>
     *
     * <code>optional string output_path = 29;</code>
     * @return Whether the outputPath field is set.
     */
    boolean hasOutputPath();
    /**
     * <pre>
     * This must point to a non-existing file. If the file exists the service
     * will NOT overwrite and will fail instead as a security precaution.
     * On Android, when this is used with the system traced, the path must be
     * within /data/misc/perfetto-traces/ or the trace will fail.
     * This option has been introduced in Android R. Before R write_into_file
     * can be used only with the "pass a file descriptor over IPC" mode.
     * </pre>
     *
     * <code>optional string output_path = 29;</code>
     * @return The outputPath.
     */
    java.lang.String getOutputPath();
    /**
     * <pre>
     * This must point to a non-existing file. If the file exists the service
     * will NOT overwrite and will fail instead as a security precaution.
     * On Android, when this is used with the system traced, the path must be
     * within /data/misc/perfetto-traces/ or the trace will fail.
     * This option has been introduced in Android R. Before R write_into_file
     * can be used only with the "pass a file descriptor over IPC" mode.
     * </pre>
     *
     * <code>optional string output_path = 29;</code>
     * @return The bytes for outputPath.
     */
    com.google.protobuf.ByteString
        getOutputPathBytes();

    /**
     * <pre>
     * Optional. If non-zero tunes the write period. A min value of 100ms is
     * enforced (i.e. smaller values are ignored).
     * </pre>
     *
     * <code>optional uint32 file_write_period_ms = 9;</code>
     * @return Whether the fileWritePeriodMs field is set.
     */
    boolean hasFileWritePeriodMs();
    /**
     * <pre>
     * Optional. If non-zero tunes the write period. A min value of 100ms is
     * enforced (i.e. smaller values are ignored).
     * </pre>
     *
     * <code>optional uint32 file_write_period_ms = 9;</code>
     * @return The fileWritePeriodMs.
     */
    int getFileWritePeriodMs();

    /**
     * <pre>
     * Optional. When non zero the periodic write stops once at most X bytes
     * have been written into the file. Tracing is disabled when this limit is
     * reached, even if |duration_ms| has not been reached yet.
     * </pre>
     *
     * <code>optional uint64 max_file_size_bytes = 10;</code>
     * @return Whether the maxFileSizeBytes field is set.
     */
    boolean hasMaxFileSizeBytes();
    /**
     * <pre>
     * Optional. When non zero the periodic write stops once at most X bytes
     * have been written into the file. Tracing is disabled when this limit is
     * reached, even if |duration_ms| has not been reached yet.
     * </pre>
     *
     * <code>optional uint64 max_file_size_bytes = 10;</code>
     * @return The maxFileSizeBytes.
     */
    long getMaxFileSizeBytes();

    /**
     * <code>optional .perfetto.protos.TraceConfig.GuardrailOverrides guardrail_overrides = 11;</code>
     * @return Whether the guardrailOverrides field is set.
     */
    boolean hasGuardrailOverrides();
    /**
     * <code>optional .perfetto.protos.TraceConfig.GuardrailOverrides guardrail_overrides = 11;</code>
     * @return The guardrailOverrides.
     */
    perfetto.protos.TraceConfigOuterClass.TraceConfig.GuardrailOverrides getGuardrailOverrides();
    /**
     * <code>optional .perfetto.protos.TraceConfig.GuardrailOverrides guardrail_overrides = 11;</code>
     */
    perfetto.protos.TraceConfigOuterClass.TraceConfig.GuardrailOverridesOrBuilder getGuardrailOverridesOrBuilder();

    /**
     * <pre>
     * When true, data sources are not started until an explicit call to
     * StartTracing() on the consumer port. This is to support early
     * initialization and fast trace triggering. This can be used only when the
     * Consumer explicitly triggers the StartTracing() method.
     * This should not be used in a remote trace config via statsd, doing so will
     * result in a hung trace session.
     * </pre>
     *
     * <code>optional bool deferred_start = 12;</code>
     * @return Whether the deferredStart field is set.
     */
    boolean hasDeferredStart();
    /**
     * <pre>
     * When true, data sources are not started until an explicit call to
     * StartTracing() on the consumer port. This is to support early
     * initialization and fast trace triggering. This can be used only when the
     * Consumer explicitly triggers the StartTracing() method.
     * This should not be used in a remote trace config via statsd, doing so will
     * result in a hung trace session.
     * </pre>
     *
     * <code>optional bool deferred_start = 12;</code>
     * @return The deferredStart.
     */
    boolean getDeferredStart();

    /**
     * <pre>
     * When set, it periodically issues a Flush() to all data source, forcing them
     * to commit their data into the tracing service. This can be used for
     * quasi-real-time streaming mode and to guarantee some partial ordering of
     * events in the trace in windows of X ms.
     * </pre>
     *
     * <code>optional uint32 flush_period_ms = 13;</code>
     * @return Whether the flushPeriodMs field is set.
     */
    boolean hasFlushPeriodMs();
    /**
     * <pre>
     * When set, it periodically issues a Flush() to all data source, forcing them
     * to commit their data into the tracing service. This can be used for
     * quasi-real-time streaming mode and to guarantee some partial ordering of
     * events in the trace in windows of X ms.
     * </pre>
     *
     * <code>optional uint32 flush_period_ms = 13;</code>
     * @return The flushPeriodMs.
     */
    int getFlushPeriodMs();

    /**
     * <pre>
     * Wait for this long for producers to acknowledge flush requests.
     * Default 5s.
     * </pre>
     *
     * <code>optional uint32 flush_timeout_ms = 14;</code>
     * @return Whether the flushTimeoutMs field is set.
     */
    boolean hasFlushTimeoutMs();
    /**
     * <pre>
     * Wait for this long for producers to acknowledge flush requests.
     * Default 5s.
     * </pre>
     *
     * <code>optional uint32 flush_timeout_ms = 14;</code>
     * @return The flushTimeoutMs.
     */
    int getFlushTimeoutMs();

    /**
     * <pre>
     * Wait for this long for producers to acknowledge stop requests.
     * Default 5s.
     * </pre>
     *
     * <code>optional uint32 data_source_stop_timeout_ms = 23;</code>
     * @return Whether the dataSourceStopTimeoutMs field is set.
     */
    boolean hasDataSourceStopTimeoutMs();
    /**
     * <pre>
     * Wait for this long for producers to acknowledge stop requests.
     * Default 5s.
     * </pre>
     *
     * <code>optional uint32 data_source_stop_timeout_ms = 23;</code>
     * @return The dataSourceStopTimeoutMs.
     */
    int getDataSourceStopTimeoutMs();

    /**
     * <pre>
     * Android-only. If set, sends an intent to the Traceur system app when the
     * trace ends to notify it about the trace readiness.
     * </pre>
     *
     * <code>optional bool notify_traceur = 16;</code>
     * @return Whether the notifyTraceur field is set.
     */
    boolean hasNotifyTraceur();
    /**
     * <pre>
     * Android-only. If set, sends an intent to the Traceur system app when the
     * trace ends to notify it about the trace readiness.
     * </pre>
     *
     * <code>optional bool notify_traceur = 16;</code>
     * @return The notifyTraceur.
     */
    boolean getNotifyTraceur();

    /**
     * <pre>
     * Android-only. If set to a value &gt; 0, marks the trace session as a candidate
     * for being attached to a bugreport. This field effectively acts as a z-index
     * for bugreports. When Android's dumpstate runs perfetto
     * --save-for-bugreport, traced will pick the tracing session with the highest
     * score (score &lt;= 0 is ignored), will steal its contents, save the trace into
     * a known path and stop prematurely.
     * This field was introduced in Android S.
     * </pre>
     *
     * <code>optional int32 bugreport_score = 30;</code>
     * @return Whether the bugreportScore field is set.
     */
    boolean hasBugreportScore();
    /**
     * <pre>
     * Android-only. If set to a value &gt; 0, marks the trace session as a candidate
     * for being attached to a bugreport. This field effectively acts as a z-index
     * for bugreports. When Android's dumpstate runs perfetto
     * --save-for-bugreport, traced will pick the tracing session with the highest
     * score (score &lt;= 0 is ignored), will steal its contents, save the trace into
     * a known path and stop prematurely.
     * This field was introduced in Android S.
     * </pre>
     *
     * <code>optional int32 bugreport_score = 30;</code>
     * @return The bugreportScore.
     */
    int getBugreportScore();

    /**
     * <code>optional .perfetto.protos.TraceConfig.TriggerConfig trigger_config = 17;</code>
     * @return Whether the triggerConfig field is set.
     */
    boolean hasTriggerConfig();
    /**
     * <code>optional .perfetto.protos.TraceConfig.TriggerConfig trigger_config = 17;</code>
     * @return The triggerConfig.
     */
    perfetto.protos.TraceConfigOuterClass.TraceConfig.TriggerConfig getTriggerConfig();
    /**
     * <code>optional .perfetto.protos.TraceConfig.TriggerConfig trigger_config = 17;</code>
     */
    perfetto.protos.TraceConfigOuterClass.TraceConfig.TriggerConfigOrBuilder getTriggerConfigOrBuilder();

    /**
     * <pre>
     * When this is non-empty the perfetto command line tool will ignore the rest
     * of this TraceConfig and instead connect to the perfetto service as a
     * producer and send these triggers, potentially stopping or starting traces
     * that were previous configured to use a TriggerConfig.
     * </pre>
     *
     * <code>repeated string activate_triggers = 18;</code>
     * @return A list containing the activateTriggers.
     */
    java.util.List<java.lang.String>
        getActivateTriggersList();
    /**
     * <pre>
     * When this is non-empty the perfetto command line tool will ignore the rest
     * of this TraceConfig and instead connect to the perfetto service as a
     * producer and send these triggers, potentially stopping or starting traces
     * that were previous configured to use a TriggerConfig.
     * </pre>
     *
     * <code>repeated string activate_triggers = 18;</code>
     * @return The count of activateTriggers.
     */
    int getActivateTriggersCount();
    /**
     * <pre>
     * When this is non-empty the perfetto command line tool will ignore the rest
     * of this TraceConfig and instead connect to the perfetto service as a
     * producer and send these triggers, potentially stopping or starting traces
     * that were previous configured to use a TriggerConfig.
     * </pre>
     *
     * <code>repeated string activate_triggers = 18;</code>
     * @param index The index of the element to return.
     * @return The activateTriggers at the given index.
     */
    java.lang.String getActivateTriggers(int index);
    /**
     * <pre>
     * When this is non-empty the perfetto command line tool will ignore the rest
     * of this TraceConfig and instead connect to the perfetto service as a
     * producer and send these triggers, potentially stopping or starting traces
     * that were previous configured to use a TriggerConfig.
     * </pre>
     *
     * <code>repeated string activate_triggers = 18;</code>
     * @param index The index of the value to return.
     * @return The bytes of the activateTriggers at the given index.
     */
    com.google.protobuf.ByteString
        getActivateTriggersBytes(int index);

    /**
     * <code>optional .perfetto.protos.TraceConfig.IncrementalStateConfig incremental_state_config = 21;</code>
     * @return Whether the incrementalStateConfig field is set.
     */
    boolean hasIncrementalStateConfig();
    /**
     * <code>optional .perfetto.protos.TraceConfig.IncrementalStateConfig incremental_state_config = 21;</code>
     * @return The incrementalStateConfig.
     */
    perfetto.protos.TraceConfigOuterClass.TraceConfig.IncrementalStateConfig getIncrementalStateConfig();
    /**
     * <code>optional .perfetto.protos.TraceConfig.IncrementalStateConfig incremental_state_config = 21;</code>
     */
    perfetto.protos.TraceConfigOuterClass.TraceConfig.IncrementalStateConfigOrBuilder getIncrementalStateConfigOrBuilder();

    /**
     * <pre>
     * Additional guardrail used by the Perfetto command line client.
     * On user builds when --dropbox is set perfetto will refuse to trace unless
     * this is also set.
     * Added in Q.
     * </pre>
     *
     * <code>optional bool allow_user_build_tracing = 19;</code>
     * @return Whether the allowUserBuildTracing field is set.
     */
    boolean hasAllowUserBuildTracing();
    /**
     * <pre>
     * Additional guardrail used by the Perfetto command line client.
     * On user builds when --dropbox is set perfetto will refuse to trace unless
     * this is also set.
     * Added in Q.
     * </pre>
     *
     * <code>optional bool allow_user_build_tracing = 19;</code>
     * @return The allowUserBuildTracing.
     */
    boolean getAllowUserBuildTracing();

    /**
     * <pre>
     * If set the tracing service will ensure there is at most one tracing session
     * with this key.
     * </pre>
     *
     * <code>optional string unique_session_name = 22;</code>
     * @return Whether the uniqueSessionName field is set.
     */
    boolean hasUniqueSessionName();
    /**
     * <pre>
     * If set the tracing service will ensure there is at most one tracing session
     * with this key.
     * </pre>
     *
     * <code>optional string unique_session_name = 22;</code>
     * @return The uniqueSessionName.
     */
    java.lang.String getUniqueSessionName();
    /**
     * <pre>
     * If set the tracing service will ensure there is at most one tracing session
     * with this key.
     * </pre>
     *
     * <code>optional string unique_session_name = 22;</code>
     * @return The bytes for uniqueSessionName.
     */
    com.google.protobuf.ByteString
        getUniqueSessionNameBytes();

    /**
     * <code>optional .perfetto.protos.TraceConfig.CompressionType compression_type = 24;</code>
     * @return Whether the compressionType field is set.
     */
    boolean hasCompressionType();
    /**
     * <code>optional .perfetto.protos.TraceConfig.CompressionType compression_type = 24;</code>
     * @return The compressionType.
     */
    perfetto.protos.TraceConfigOuterClass.TraceConfig.CompressionType getCompressionType();

    /**
     * <code>optional .perfetto.protos.TraceConfig.IncidentReportConfig incident_report_config = 25;</code>
     * @return Whether the incidentReportConfig field is set.
     */
    boolean hasIncidentReportConfig();
    /**
     * <code>optional .perfetto.protos.TraceConfig.IncidentReportConfig incident_report_config = 25;</code>
     * @return The incidentReportConfig.
     */
    perfetto.protos.TraceConfigOuterClass.TraceConfig.IncidentReportConfig getIncidentReportConfig();
    /**
     * <code>optional .perfetto.protos.TraceConfig.IncidentReportConfig incident_report_config = 25;</code>
     */
    perfetto.protos.TraceConfigOuterClass.TraceConfig.IncidentReportConfigOrBuilder getIncidentReportConfigOrBuilder();

    /**
     * <pre>
     * Android-only. Not for general use. If specified, sets the logging to statsd
     * of guardrails and checkpoints in the tracing service. perfetto_cmd sets
     * this to enabled (if not explicitly set in the config) when specifying
     * --upload.
     * </pre>
     *
     * <code>optional .perfetto.protos.TraceConfig.StatsdLogging statsd_logging = 31;</code>
     * @return Whether the statsdLogging field is set.
     */
    boolean hasStatsdLogging();
    /**
     * <pre>
     * Android-only. Not for general use. If specified, sets the logging to statsd
     * of guardrails and checkpoints in the tracing service. perfetto_cmd sets
     * this to enabled (if not explicitly set in the config) when specifying
     * --upload.
     * </pre>
     *
     * <code>optional .perfetto.protos.TraceConfig.StatsdLogging statsd_logging = 31;</code>
     * @return The statsdLogging.
     */
    perfetto.protos.TraceConfigOuterClass.TraceConfig.StatsdLogging getStatsdLogging();

    /**
     * <pre>
     * An identifier clients can use to tie this trace to other logging.
     * DEPRECATED as per v32. See TracePacket.trace_uuid for the authoritative
     * Trace UUID. If this field is set, the tracing service will respect the
     * requested UUID (i.e. TracePacket.trace_uuid == this field) but only if
     * gap-less snapshotting is not used.
     * </pre>
     *
     * <code>optional int64 trace_uuid_msb = 27 [deprecated = true];</code>
     * @deprecated perfetto.protos.TraceConfig.trace_uuid_msb is deprecated.
     *     See protos/perfetto/config/trace_config.proto;l=429
     * @return Whether the traceUuidMsb field is set.
     */
    @java.lang.Deprecated boolean hasTraceUuidMsb();
    /**
     * <pre>
     * An identifier clients can use to tie this trace to other logging.
     * DEPRECATED as per v32. See TracePacket.trace_uuid for the authoritative
     * Trace UUID. If this field is set, the tracing service will respect the
     * requested UUID (i.e. TracePacket.trace_uuid == this field) but only if
     * gap-less snapshotting is not used.
     * </pre>
     *
     * <code>optional int64 trace_uuid_msb = 27 [deprecated = true];</code>
     * @deprecated perfetto.protos.TraceConfig.trace_uuid_msb is deprecated.
     *     See protos/perfetto/config/trace_config.proto;l=429
     * @return The traceUuidMsb.
     */
    @java.lang.Deprecated long getTraceUuidMsb();

    /**
     * <code>optional int64 trace_uuid_lsb = 28 [deprecated = true];</code>
     * @deprecated perfetto.protos.TraceConfig.trace_uuid_lsb is deprecated.
     *     See protos/perfetto/config/trace_config.proto;l=430
     * @return Whether the traceUuidLsb field is set.
     */
    @java.lang.Deprecated boolean hasTraceUuidLsb();
    /**
     * <code>optional int64 trace_uuid_lsb = 28 [deprecated = true];</code>
     * @deprecated perfetto.protos.TraceConfig.trace_uuid_lsb is deprecated.
     *     See protos/perfetto/config/trace_config.proto;l=430
     * @return The traceUuidLsb.
     */
    @java.lang.Deprecated long getTraceUuidLsb();

    /**
     * <code>optional .perfetto.protos.TraceConfig.TraceFilter trace_filter = 33;</code>
     * @return Whether the traceFilter field is set.
     */
    boolean hasTraceFilter();
    /**
     * <code>optional .perfetto.protos.TraceConfig.TraceFilter trace_filter = 33;</code>
     * @return The traceFilter.
     */
    perfetto.protos.TraceConfigOuterClass.TraceConfig.TraceFilter getTraceFilter();
    /**
     * <code>optional .perfetto.protos.TraceConfig.TraceFilter trace_filter = 33;</code>
     */
    perfetto.protos.TraceConfigOuterClass.TraceConfig.TraceFilterOrBuilder getTraceFilterOrBuilder();

    /**
     * <code>optional .perfetto.protos.TraceConfig.AndroidReportConfig android_report_config = 34;</code>
     * @return Whether the androidReportConfig field is set.
     */
    boolean hasAndroidReportConfig();
    /**
     * <code>optional .perfetto.protos.TraceConfig.AndroidReportConfig android_report_config = 34;</code>
     * @return The androidReportConfig.
     */
    perfetto.protos.TraceConfigOuterClass.TraceConfig.AndroidReportConfig getAndroidReportConfig();
    /**
     * <code>optional .perfetto.protos.TraceConfig.AndroidReportConfig android_report_config = 34;</code>
     */
    perfetto.protos.TraceConfigOuterClass.TraceConfig.AndroidReportConfigOrBuilder getAndroidReportConfigOrBuilder();

    /**
     * <code>optional .perfetto.protos.TraceConfig.CmdTraceStartDelay cmd_trace_start_delay = 35;</code>
     * @return Whether the cmdTraceStartDelay field is set.
     */
    boolean hasCmdTraceStartDelay();
    /**
     * <code>optional .perfetto.protos.TraceConfig.CmdTraceStartDelay cmd_trace_start_delay = 35;</code>
     * @return The cmdTraceStartDelay.
     */
    perfetto.protos.TraceConfigOuterClass.TraceConfig.CmdTraceStartDelay getCmdTraceStartDelay();
    /**
     * <code>optional .perfetto.protos.TraceConfig.CmdTraceStartDelay cmd_trace_start_delay = 35;</code>
     */
    perfetto.protos.TraceConfigOuterClass.TraceConfig.CmdTraceStartDelayOrBuilder getCmdTraceStartDelayOrBuilder();
  }
  /**
   * <pre>
   * The overall config that is used when starting a new tracing session through
   * ProducerPort::StartTracing().
   * It contains the general config for the logging buffer(s) and the configs for
   * all the data source being enabled.
   * Next id: 35.
   * </pre>
   *
   * Protobuf type {@code perfetto.protos.TraceConfig}
   */
  public static final class TraceConfig extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:perfetto.protos.TraceConfig)
      TraceConfigOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use TraceConfig.newBuilder() to construct.
    private TraceConfig(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private TraceConfig() {
      buffers_ = java.util.Collections.emptyList();
      dataSources_ = java.util.Collections.emptyList();
      lockdownMode_ = 0;
      producers_ = java.util.Collections.emptyList();
      outputPath_ = "";
      activateTriggers_ = com.google.protobuf.LazyStringArrayList.EMPTY;
      uniqueSessionName_ = "";
      compressionType_ = 0;
      statsdLogging_ = 0;
    }

    @java.lang.Override
    @SuppressWarnings({"unused"})
    protected java.lang.Object newInstance(
        UnusedPrivateParameter unused) {
      return new TraceConfig();
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return perfetto.protos.TraceConfigOuterClass.internal_static_perfetto_protos_TraceConfig_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return perfetto.protos.TraceConfigOuterClass.internal_static_perfetto_protos_TraceConfig_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              perfetto.protos.TraceConfigOuterClass.TraceConfig.class, perfetto.protos.TraceConfigOuterClass.TraceConfig.Builder.class);
    }

    /**
     * Protobuf enum {@code perfetto.protos.TraceConfig.LockdownModeOperation}
     */
    public enum LockdownModeOperation
        implements com.google.protobuf.ProtocolMessageEnum {
      /**
       * <code>LOCKDOWN_UNCHANGED = 0;</code>
       */
      LOCKDOWN_UNCHANGED(0),
      /**
       * <code>LOCKDOWN_CLEAR = 1;</code>
       */
      LOCKDOWN_CLEAR(1),
      /**
       * <code>LOCKDOWN_SET = 2;</code>
       */
      LOCKDOWN_SET(2),
      ;

      /**
       * <code>LOCKDOWN_UNCHANGED = 0;</code>
       */
      public static final int LOCKDOWN_UNCHANGED_VALUE = 0;
      /**
       * <code>LOCKDOWN_CLEAR = 1;</code>
       */
      public static final int LOCKDOWN_CLEAR_VALUE = 1;
      /**
       * <code>LOCKDOWN_SET = 2;</code>
       */
      public static final int LOCKDOWN_SET_VALUE = 2;


      public final int getNumber() {
        return value;
      }

      /**
       * @param value The numeric wire value of the corresponding enum entry.
       * @return The enum associated with the given numeric wire value.
       * @deprecated Use {@link #forNumber(int)} instead.
       */
      @java.lang.Deprecated
      public static LockdownModeOperation valueOf(int value) {
        return forNumber(value);
      }

      /**
       * @param value The numeric wire value of the corresponding enum entry.
       * @return The enum associated with the given numeric wire value.
       */
      public static LockdownModeOperation forNumber(int value) {
        switch (value) {
          case 0: return LOCKDOWN_UNCHANGED;
          case 1: return LOCKDOWN_CLEAR;
          case 2: return LOCKDOWN_SET;
          default: return null;
        }
      }

      public static com.google.protobuf.Internal.EnumLiteMap<LockdownModeOperation>
          internalGetValueMap() {
        return internalValueMap;
      }
      private static final com.google.protobuf.Internal.EnumLiteMap<
          LockdownModeOperation> internalValueMap =
            new com.google.protobuf.Internal.EnumLiteMap<LockdownModeOperation>() {
              public LockdownModeOperation findValueByNumber(int number) {
                return LockdownModeOperation.forNumber(number);
              }
            };

      public final com.google.protobuf.Descriptors.EnumValueDescriptor
          getValueDescriptor() {
        return getDescriptor().getValues().get(ordinal());
      }
      public final com.google.protobuf.Descriptors.EnumDescriptor
          getDescriptorForType() {
        return getDescriptor();
      }
      public static final com.google.protobuf.Descriptors.EnumDescriptor
          getDescriptor() {
        return perfetto.protos.TraceConfigOuterClass.TraceConfig.getDescriptor().getEnumTypes().get(0);
      }

      private static final LockdownModeOperation[] VALUES = values();

      public static LockdownModeOperation valueOf(
          com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
        if (desc.getType() != getDescriptor()) {
          throw new java.lang.IllegalArgumentException(
            "EnumValueDescriptor is not for this type.");
        }
        return VALUES[desc.getIndex()];
      }

      private final int value;

      private LockdownModeOperation(int value) {
        this.value = value;
      }

      // @@protoc_insertion_point(enum_scope:perfetto.protos.TraceConfig.LockdownModeOperation)
    }

    /**
     * <pre>
     * Compress trace with the given method. Best effort.
     * </pre>
     *
     * Protobuf enum {@code perfetto.protos.TraceConfig.CompressionType}
     */
    public enum CompressionType
        implements com.google.protobuf.ProtocolMessageEnum {
      /**
       * <code>COMPRESSION_TYPE_UNSPECIFIED = 0;</code>
       */
      COMPRESSION_TYPE_UNSPECIFIED(0),
      /**
       * <code>COMPRESSION_TYPE_DEFLATE = 1;</code>
       */
      COMPRESSION_TYPE_DEFLATE(1),
      ;

      /**
       * <code>COMPRESSION_TYPE_UNSPECIFIED = 0;</code>
       */
      public static final int COMPRESSION_TYPE_UNSPECIFIED_VALUE = 0;
      /**
       * <code>COMPRESSION_TYPE_DEFLATE = 1;</code>
       */
      public static final int COMPRESSION_TYPE_DEFLATE_VALUE = 1;


      public final int getNumber() {
        return value;
      }

      /**
       * @param value The numeric wire value of the corresponding enum entry.
       * @return The enum associated with the given numeric wire value.
       * @deprecated Use {@link #forNumber(int)} instead.
       */
      @java.lang.Deprecated
      public static CompressionType valueOf(int value) {
        return forNumber(value);
      }

      /**
       * @param value The numeric wire value of the corresponding enum entry.
       * @return The enum associated with the given numeric wire value.
       */
      public static CompressionType forNumber(int value) {
        switch (value) {
          case 0: return COMPRESSION_TYPE_UNSPECIFIED;
          case 1: return COMPRESSION_TYPE_DEFLATE;
          default: return null;
        }
      }

      public static com.google.protobuf.Internal.EnumLiteMap<CompressionType>
          internalGetValueMap() {
        return internalValueMap;
      }
      private static final com.google.protobuf.Internal.EnumLiteMap<
          CompressionType> internalValueMap =
            new com.google.protobuf.Internal.EnumLiteMap<CompressionType>() {
              public CompressionType findValueByNumber(int number) {
                return CompressionType.forNumber(number);
              }
            };

      public final com.google.protobuf.Descriptors.EnumValueDescriptor
          getValueDescriptor() {
        return getDescriptor().getValues().get(ordinal());
      }
      public final com.google.protobuf.Descriptors.EnumDescriptor
          getDescriptorForType() {
        return getDescriptor();
      }
      public static final com.google.protobuf.Descriptors.EnumDescriptor
          getDescriptor() {
        return perfetto.protos.TraceConfigOuterClass.TraceConfig.getDescriptor().getEnumTypes().get(1);
      }

      private static final CompressionType[] VALUES = values();

      public static CompressionType valueOf(
          com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
        if (desc.getType() != getDescriptor()) {
          throw new java.lang.IllegalArgumentException(
            "EnumValueDescriptor is not for this type.");
        }
        return VALUES[desc.getIndex()];
      }

      private final int value;

      private CompressionType(int value) {
        this.value = value;
      }

      // @@protoc_insertion_point(enum_scope:perfetto.protos.TraceConfig.CompressionType)
    }

    /**
     * Protobuf enum {@code perfetto.protos.TraceConfig.StatsdLogging}
     */
    public enum StatsdLogging
        implements com.google.protobuf.ProtocolMessageEnum {
      /**
       * <code>STATSD_LOGGING_UNSPECIFIED = 0;</code>
       */
      STATSD_LOGGING_UNSPECIFIED(0),
      /**
       * <code>STATSD_LOGGING_ENABLED = 1;</code>
       */
      STATSD_LOGGING_ENABLED(1),
      /**
       * <code>STATSD_LOGGING_DISABLED = 2;</code>
       */
      STATSD_LOGGING_DISABLED(2),
      ;

      /**
       * <code>STATSD_LOGGING_UNSPECIFIED = 0;</code>
       */
      public static final int STATSD_LOGGING_UNSPECIFIED_VALUE = 0;
      /**
       * <code>STATSD_LOGGING_ENABLED = 1;</code>
       */
      public static final int STATSD_LOGGING_ENABLED_VALUE = 1;
      /**
       * <code>STATSD_LOGGING_DISABLED = 2;</code>
       */
      public static final int STATSD_LOGGING_DISABLED_VALUE = 2;


      public final int getNumber() {
        return value;
      }

      /**
       * @param value The numeric wire value of the corresponding enum entry.
       * @return The enum associated with the given numeric wire value.
       * @deprecated Use {@link #forNumber(int)} instead.
       */
      @java.lang.Deprecated
      public static StatsdLogging valueOf(int value) {
        return forNumber(value);
      }

      /**
       * @param value The numeric wire value of the corresponding enum entry.
       * @return The enum associated with the given numeric wire value.
       */
      public static StatsdLogging forNumber(int value) {
        switch (value) {
          case 0: return STATSD_LOGGING_UNSPECIFIED;
          case 1: return STATSD_LOGGING_ENABLED;
          case 2: return STATSD_LOGGING_DISABLED;
          default: return null;
        }
      }

      public static com.google.protobuf.Internal.EnumLiteMap<StatsdLogging>
          internalGetValueMap() {
        return internalValueMap;
      }
      private static final com.google.protobuf.Internal.EnumLiteMap<
          StatsdLogging> internalValueMap =
            new com.google.protobuf.Internal.EnumLiteMap<StatsdLogging>() {
              public StatsdLogging findValueByNumber(int number) {
                return StatsdLogging.forNumber(number);
              }
            };

      public final com.google.protobuf.Descriptors.EnumValueDescriptor
          getValueDescriptor() {
        return getDescriptor().getValues().get(ordinal());
      }
      public final com.google.protobuf.Descriptors.EnumDescriptor
          getDescriptorForType() {
        return getDescriptor();
      }
      public static final com.google.protobuf.Descriptors.EnumDescriptor
          getDescriptor() {
        return perfetto.protos.TraceConfigOuterClass.TraceConfig.getDescriptor().getEnumTypes().get(2);
      }

      private static final StatsdLogging[] VALUES = values();

      public static StatsdLogging valueOf(
          com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
        if (desc.getType() != getDescriptor()) {
          throw new java.lang.IllegalArgumentException(
            "EnumValueDescriptor is not for this type.");
        }
        return VALUES[desc.getIndex()];
      }

      private final int value;

      private StatsdLogging(int value) {
        this.value = value;
      }

      // @@protoc_insertion_point(enum_scope:perfetto.protos.TraceConfig.StatsdLogging)
    }

    public interface BufferConfigOrBuilder extends
        // @@protoc_insertion_point(interface_extends:perfetto.protos.TraceConfig.BufferConfig)
        com.google.protobuf.MessageOrBuilder {

      /**
       * <code>optional uint32 size_kb = 1;</code>
       * @return Whether the sizeKb field is set.
       */
      boolean hasSizeKb();
      /**
       * <code>optional uint32 size_kb = 1;</code>
       * @return The sizeKb.
       */
      int getSizeKb();

      /**
       * <code>optional .perfetto.protos.TraceConfig.BufferConfig.FillPolicy fill_policy = 4;</code>
       * @return Whether the fillPolicy field is set.
       */
      boolean hasFillPolicy();
      /**
       * <code>optional .perfetto.protos.TraceConfig.BufferConfig.FillPolicy fill_policy = 4;</code>
       * @return The fillPolicy.
       */
      perfetto.protos.TraceConfigOuterClass.TraceConfig.BufferConfig.FillPolicy getFillPolicy();
    }
    /**
     * Protobuf type {@code perfetto.protos.TraceConfig.BufferConfig}
     */
    public static final class BufferConfig extends
        com.google.protobuf.GeneratedMessageV3 implements
        // @@protoc_insertion_point(message_implements:perfetto.protos.TraceConfig.BufferConfig)
        BufferConfigOrBuilder {
    private static final long serialVersionUID = 0L;
      // Use BufferConfig.newBuilder() to construct.
      private BufferConfig(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
        super(builder);
      }
      private BufferConfig() {
        fillPolicy_ = 0;
      }

      @java.lang.Override
      @SuppressWarnings({"unused"})
      protected java.lang.Object newInstance(
          UnusedPrivateParameter unused) {
        return new BufferConfig();
      }

      @java.lang.Override
      public final com.google.protobuf.UnknownFieldSet
      getUnknownFields() {
        return this.unknownFields;
      }
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return perfetto.protos.TraceConfigOuterClass.internal_static_perfetto_protos_TraceConfig_BufferConfig_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return perfetto.protos.TraceConfigOuterClass.internal_static_perfetto_protos_TraceConfig_BufferConfig_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                perfetto.protos.TraceConfigOuterClass.TraceConfig.BufferConfig.class, perfetto.protos.TraceConfigOuterClass.TraceConfig.BufferConfig.Builder.class);
      }

      /**
       * Protobuf enum {@code perfetto.protos.TraceConfig.BufferConfig.FillPolicy}
       */
      public enum FillPolicy
          implements com.google.protobuf.ProtocolMessageEnum {
        /**
         * <code>UNSPECIFIED = 0;</code>
         */
        UNSPECIFIED(0),
        /**
         * <pre>
         * Default behavior. The buffer operates as a conventional ring buffer.
         * If the writer is faster than the reader (or if the reader reads only
         * after tracing is stopped) newly written packets will overwrite old
         * packets.
         * </pre>
         *
         * <code>RING_BUFFER = 1;</code>
         */
        RING_BUFFER(1),
        /**
         * <pre>
         * Behaves like RING_BUFFER as long as there is space in the buffer or
         * the reader catches up with the writer. As soon as the writer hits
         * an unread chunk, it stops accepting new data in the buffer.
         * </pre>
         *
         * <code>DISCARD = 2;</code>
         */
        DISCARD(2),
        ;

        /**
         * <code>UNSPECIFIED = 0;</code>
         */
        public static final int UNSPECIFIED_VALUE = 0;
        /**
         * <pre>
         * Default behavior. The buffer operates as a conventional ring buffer.
         * If the writer is faster than the reader (or if the reader reads only
         * after tracing is stopped) newly written packets will overwrite old
         * packets.
         * </pre>
         *
         * <code>RING_BUFFER = 1;</code>
         */
        public static final int RING_BUFFER_VALUE = 1;
        /**
         * <pre>
         * Behaves like RING_BUFFER as long as there is space in the buffer or
         * the reader catches up with the writer. As soon as the writer hits
         * an unread chunk, it stops accepting new data in the buffer.
         * </pre>
         *
         * <code>DISCARD = 2;</code>
         */
        public static final int DISCARD_VALUE = 2;


        public final int getNumber() {
          return value;
        }

        /**
         * @param value The numeric wire value of the corresponding enum entry.
         * @return The enum associated with the given numeric wire value.
         * @deprecated Use {@link #forNumber(int)} instead.
         */
        @java.lang.Deprecated
        public static FillPolicy valueOf(int value) {
          return forNumber(value);
        }

        /**
         * @param value The numeric wire value of the corresponding enum entry.
         * @return The enum associated with the given numeric wire value.
         */
        public static FillPolicy forNumber(int value) {
          switch (value) {
            case 0: return UNSPECIFIED;
            case 1: return RING_BUFFER;
            case 2: return DISCARD;
            default: return null;
          }
        }

        public static com.google.protobuf.Internal.EnumLiteMap<FillPolicy>
            internalGetValueMap() {
          return internalValueMap;
        }
        private static final com.google.protobuf.Internal.EnumLiteMap<
            FillPolicy> internalValueMap =
              new com.google.protobuf.Internal.EnumLiteMap<FillPolicy>() {
                public FillPolicy findValueByNumber(int number) {
                  return FillPolicy.forNumber(number);
                }
              };

        public final com.google.protobuf.Descriptors.EnumValueDescriptor
            getValueDescriptor() {
          return getDescriptor().getValues().get(ordinal());
        }
        public final com.google.protobuf.Descriptors.EnumDescriptor
            getDescriptorForType() {
          return getDescriptor();
        }
        public static final com.google.protobuf.Descriptors.EnumDescriptor
            getDescriptor() {
          return perfetto.protos.TraceConfigOuterClass.TraceConfig.BufferConfig.getDescriptor().getEnumTypes().get(0);
        }

        private static final FillPolicy[] VALUES = values();

        public static FillPolicy valueOf(
            com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
          if (desc.getType() != getDescriptor()) {
            throw new java.lang.IllegalArgumentException(
              "EnumValueDescriptor is not for this type.");
          }
          return VALUES[desc.getIndex()];
        }

        private final int value;

        private FillPolicy(int value) {
          this.value = value;
        }

        // @@protoc_insertion_point(enum_scope:perfetto.protos.TraceConfig.BufferConfig.FillPolicy)
      }

      private int bitField0_;
      public static final int SIZE_KB_FIELD_NUMBER = 1;
      private int sizeKb_ = 0;
      /**
       * <code>optional uint32 size_kb = 1;</code>
       * @return Whether the sizeKb field is set.
       */
      @java.lang.Override
      public boolean hasSizeKb() {
        return ((bitField0_ & 0x00000001) != 0);
      }
      /**
       * <code>optional uint32 size_kb = 1;</code>
       * @return The sizeKb.
       */
      @java.lang.Override
      public int getSizeKb() {
        return sizeKb_;
      }

      public static final int FILL_POLICY_FIELD_NUMBER = 4;
      private int fillPolicy_ = 0;
      /**
       * <code>optional .perfetto.protos.TraceConfig.BufferConfig.FillPolicy fill_policy = 4;</code>
       * @return Whether the fillPolicy field is set.
       */
      @java.lang.Override public boolean hasFillPolicy() {
        return ((bitField0_ & 0x00000002) != 0);
      }
      /**
       * <code>optional .perfetto.protos.TraceConfig.BufferConfig.FillPolicy fill_policy = 4;</code>
       * @return The fillPolicy.
       */
      @java.lang.Override public perfetto.protos.TraceConfigOuterClass.TraceConfig.BufferConfig.FillPolicy getFillPolicy() {
        perfetto.protos.TraceConfigOuterClass.TraceConfig.BufferConfig.FillPolicy result = perfetto.protos.TraceConfigOuterClass.TraceConfig.BufferConfig.FillPolicy.forNumber(fillPolicy_);
        return result == null ? perfetto.protos.TraceConfigOuterClass.TraceConfig.BufferConfig.FillPolicy.UNSPECIFIED : result;
      }

      private byte memoizedIsInitialized = -1;
      @java.lang.Override
      public final boolean isInitialized() {
        byte isInitialized = memoizedIsInitialized;
        if (isInitialized == 1) return true;
        if (isInitialized == 0) return false;

        memoizedIsInitialized = 1;
        return true;
      }

      @java.lang.Override
      public void writeTo(com.google.protobuf.CodedOutputStream output)
                          throws java.io.IOException {
        if (((bitField0_ & 0x00000001) != 0)) {
          output.writeUInt32(1, sizeKb_);
        }
        if (((bitField0_ & 0x00000002) != 0)) {
          output.writeEnum(4, fillPolicy_);
        }
        getUnknownFields().writeTo(output);
      }

      @java.lang.Override
      public int getSerializedSize() {
        int size = memoizedSize;
        if (size != -1) return size;

        size = 0;
        if (((bitField0_ & 0x00000001) != 0)) {
          size += com.google.protobuf.CodedOutputStream
            .computeUInt32Size(1, sizeKb_);
        }
        if (((bitField0_ & 0x00000002) != 0)) {
          size += com.google.protobuf.CodedOutputStream
            .computeEnumSize(4, fillPolicy_);
        }
        size += getUnknownFields().getSerializedSize();
        memoizedSize = size;
        return size;
      }

      @java.lang.Override
      public boolean equals(final java.lang.Object obj) {
        if (obj == this) {
         return true;
        }
        if (!(obj instanceof perfetto.protos.TraceConfigOuterClass.TraceConfig.BufferConfig)) {
          return super.equals(obj);
        }
        perfetto.protos.TraceConfigOuterClass.TraceConfig.BufferConfig other = (perfetto.protos.TraceConfigOuterClass.TraceConfig.BufferConfig) obj;

        if (hasSizeKb() != other.hasSizeKb()) return false;
        if (hasSizeKb()) {
          if (getSizeKb()
              != other.getSizeKb()) return false;
        }
        if (hasFillPolicy() != other.hasFillPolicy()) return false;
        if (hasFillPolicy()) {
          if (fillPolicy_ != other.fillPolicy_) return false;
        }
        if (!getUnknownFields().equals(other.getUnknownFields())) return false;
        return true;
      }

      @java.lang.Override
      public int hashCode() {
        if (memoizedHashCode != 0) {
          return memoizedHashCode;
        }
        int hash = 41;
        hash = (19 * hash) + getDescriptor().hashCode();
        if (hasSizeKb()) {
          hash = (37 * hash) + SIZE_KB_FIELD_NUMBER;
          hash = (53 * hash) + getSizeKb();
        }
        if (hasFillPolicy()) {
          hash = (37 * hash) + FILL_POLICY_FIELD_NUMBER;
          hash = (53 * hash) + fillPolicy_;
        }
        hash = (29 * hash) + getUnknownFields().hashCode();
        memoizedHashCode = hash;
        return hash;
      }

      public static perfetto.protos.TraceConfigOuterClass.TraceConfig.BufferConfig parseFrom(
          java.nio.ByteBuffer data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static perfetto.protos.TraceConfigOuterClass.TraceConfig.BufferConfig parseFrom(
          java.nio.ByteBuffer data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static perfetto.protos.TraceConfigOuterClass.TraceConfig.BufferConfig parseFrom(
          com.google.protobuf.ByteString data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static perfetto.protos.TraceConfigOuterClass.TraceConfig.BufferConfig parseFrom(
          com.google.protobuf.ByteString data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static perfetto.protos.TraceConfigOuterClass.TraceConfig.BufferConfig parseFrom(byte[] data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static perfetto.protos.TraceConfigOuterClass.TraceConfig.BufferConfig parseFrom(
          byte[] data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static perfetto.protos.TraceConfigOuterClass.TraceConfig.BufferConfig parseFrom(java.io.InputStream input)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseWithIOException(PARSER, input);
      }
      public static perfetto.protos.TraceConfigOuterClass.TraceConfig.BufferConfig parseFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseWithIOException(PARSER, input, extensionRegistry);
      }
      public static perfetto.protos.TraceConfigOuterClass.TraceConfig.BufferConfig parseDelimitedFrom(java.io.InputStream input)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseDelimitedWithIOException(PARSER, input);
      }
      public static perfetto.protos.TraceConfigOuterClass.TraceConfig.BufferConfig parseDelimitedFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
      }
      public static perfetto.protos.TraceConfigOuterClass.TraceConfig.BufferConfig parseFrom(
          com.google.protobuf.CodedInputStream input)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseWithIOException(PARSER, input);
      }
      public static perfetto.protos.TraceConfigOuterClass.TraceConfig.BufferConfig parseFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseWithIOException(PARSER, input, extensionRegistry);
      }

      @java.lang.Override
      public Builder newBuilderForType() { return newBuilder(); }
      public static Builder newBuilder() {
        return DEFAULT_INSTANCE.toBuilder();
      }
      public static Builder newBuilder(perfetto.protos.TraceConfigOuterClass.TraceConfig.BufferConfig prototype) {
        return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
      }
      @java.lang.Override
      public Builder toBuilder() {
        return this == DEFAULT_INSTANCE
            ? new Builder() : new Builder().mergeFrom(this);
      }

      @java.lang.Override
      protected Builder newBuilderForType(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        Builder builder = new Builder(parent);
        return builder;
      }
      /**
       * Protobuf type {@code perfetto.protos.TraceConfig.BufferConfig}
       */
      public static final class Builder extends
          com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
          // @@protoc_insertion_point(builder_implements:perfetto.protos.TraceConfig.BufferConfig)
          perfetto.protos.TraceConfigOuterClass.TraceConfig.BufferConfigOrBuilder {
        public static final com.google.protobuf.Descriptors.Descriptor
            getDescriptor() {
          return perfetto.protos.TraceConfigOuterClass.internal_static_perfetto_protos_TraceConfig_BufferConfig_descriptor;
        }

        @java.lang.Override
        protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
            internalGetFieldAccessorTable() {
          return perfetto.protos.TraceConfigOuterClass.internal_static_perfetto_protos_TraceConfig_BufferConfig_fieldAccessorTable
              .ensureFieldAccessorsInitialized(
                  perfetto.protos.TraceConfigOuterClass.TraceConfig.BufferConfig.class, perfetto.protos.TraceConfigOuterClass.TraceConfig.BufferConfig.Builder.class);
        }

        // Construct using perfetto.protos.TraceConfigOuterClass.TraceConfig.BufferConfig.newBuilder()
        private Builder() {

        }

        private Builder(
            com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
          super(parent);

        }
        @java.lang.Override
        public Builder clear() {
          super.clear();
          bitField0_ = 0;
          sizeKb_ = 0;
          fillPolicy_ = 0;
          return this;
        }

        @java.lang.Override
        public com.google.protobuf.Descriptors.Descriptor
            getDescriptorForType() {
          return perfetto.protos.TraceConfigOuterClass.internal_static_perfetto_protos_TraceConfig_BufferConfig_descriptor;
        }

        @java.lang.Override
        public perfetto.protos.TraceConfigOuterClass.TraceConfig.BufferConfig getDefaultInstanceForType() {
          return perfetto.protos.TraceConfigOuterClass.TraceConfig.BufferConfig.getDefaultInstance();
        }

        @java.lang.Override
        public perfetto.protos.TraceConfigOuterClass.TraceConfig.BufferConfig build() {
          perfetto.protos.TraceConfigOuterClass.TraceConfig.BufferConfig result = buildPartial();
          if (!result.isInitialized()) {
            throw newUninitializedMessageException(result);
          }
          return result;
        }

        @java.lang.Override
        public perfetto.protos.TraceConfigOuterClass.TraceConfig.BufferConfig buildPartial() {
          perfetto.protos.TraceConfigOuterClass.TraceConfig.BufferConfig result = new perfetto.protos.TraceConfigOuterClass.TraceConfig.BufferConfig(this);
          if (bitField0_ != 0) { buildPartial0(result); }
          onBuilt();
          return result;
        }

        private void buildPartial0(perfetto.protos.TraceConfigOuterClass.TraceConfig.BufferConfig result) {
          int from_bitField0_ = bitField0_;
          int to_bitField0_ = 0;
          if (((from_bitField0_ & 0x00000001) != 0)) {
            result.sizeKb_ = sizeKb_;
            to_bitField0_ |= 0x00000001;
          }
          if (((from_bitField0_ & 0x00000002) != 0)) {
            result.fillPolicy_ = fillPolicy_;
            to_bitField0_ |= 0x00000002;
          }
          result.bitField0_ |= to_bitField0_;
        }

        @java.lang.Override
        public Builder clone() {
          return super.clone();
        }
        @java.lang.Override
        public Builder setField(
            com.google.protobuf.Descriptors.FieldDescriptor field,
            java.lang.Object value) {
          return super.setField(field, value);
        }
        @java.lang.Override
        public Builder clearField(
            com.google.protobuf.Descriptors.FieldDescriptor field) {
          return super.clearField(field);
        }
        @java.lang.Override
        public Builder clearOneof(
            com.google.protobuf.Descriptors.OneofDescriptor oneof) {
          return super.clearOneof(oneof);
        }
        @java.lang.Override
        public Builder setRepeatedField(
            com.google.protobuf.Descriptors.FieldDescriptor field,
            int index, java.lang.Object value) {
          return super.setRepeatedField(field, index, value);
        }
        @java.lang.Override
        public Builder addRepeatedField(
            com.google.protobuf.Descriptors.FieldDescriptor field,
            java.lang.Object value) {
          return super.addRepeatedField(field, value);
        }
        @java.lang.Override
        public Builder mergeFrom(com.google.protobuf.Message other) {
          if (other instanceof perfetto.protos.TraceConfigOuterClass.TraceConfig.BufferConfig) {
            return mergeFrom((perfetto.protos.TraceConfigOuterClass.TraceConfig.BufferConfig)other);
          } else {
            super.mergeFrom(other);
            return this;
          }
        }

        public Builder mergeFrom(perfetto.protos.TraceConfigOuterClass.TraceConfig.BufferConfig other) {
          if (other == perfetto.protos.TraceConfigOuterClass.TraceConfig.BufferConfig.getDefaultInstance()) return this;
          if (other.hasSizeKb()) {
            setSizeKb(other.getSizeKb());
          }
          if (other.hasFillPolicy()) {
            setFillPolicy(other.getFillPolicy());
          }
          this.mergeUnknownFields(other.getUnknownFields());
          onChanged();
          return this;
        }

        @java.lang.Override
        public final boolean isInitialized() {
          return true;
        }

        @java.lang.Override
        public Builder mergeFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws java.io.IOException {
          if (extensionRegistry == null) {
            throw new java.lang.NullPointerException();
          }
          try {
            boolean done = false;
            while (!done) {
              int tag = input.readTag();
              switch (tag) {
                case 0:
                  done = true;
                  break;
                case 8: {
                  sizeKb_ = input.readUInt32();
                  bitField0_ |= 0x00000001;
                  break;
                } // case 8
                case 32: {
                  int tmpRaw = input.readEnum();
                  perfetto.protos.TraceConfigOuterClass.TraceConfig.BufferConfig.FillPolicy tmpValue =
                      perfetto.protos.TraceConfigOuterClass.TraceConfig.BufferConfig.FillPolicy.forNumber(tmpRaw);
                  if (tmpValue == null) {
                    mergeUnknownVarintField(4, tmpRaw);
                  } else {
                    fillPolicy_ = tmpRaw;
                    bitField0_ |= 0x00000002;
                  }
                  break;
                } // case 32
                default: {
                  if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                    done = true; // was an endgroup tag
                  }
                  break;
                } // default:
              } // switch (tag)
            } // while (!done)
          } catch (com.google.protobuf.InvalidProtocolBufferException e) {
            throw e.unwrapIOException();
          } finally {
            onChanged();
          } // finally
          return this;
        }
        private int bitField0_;

        private int sizeKb_ ;
        /**
         * <code>optional uint32 size_kb = 1;</code>
         * @return Whether the sizeKb field is set.
         */
        @java.lang.Override
        public boolean hasSizeKb() {
          return ((bitField0_ & 0x00000001) != 0);
        }
        /**
         * <code>optional uint32 size_kb = 1;</code>
         * @return The sizeKb.
         */
        @java.lang.Override
        public int getSizeKb() {
          return sizeKb_;
        }
        /**
         * <code>optional uint32 size_kb = 1;</code>
         * @param value The sizeKb to set.
         * @return This builder for chaining.
         */
        public Builder setSizeKb(int value) {
          
          sizeKb_ = value;
          bitField0_ |= 0x00000001;
          onChanged();
          return this;
        }
        /**
         * <code>optional uint32 size_kb = 1;</code>
         * @return This builder for chaining.
         */
        public Builder clearSizeKb() {
          bitField0_ = (bitField0_ & ~0x00000001);
          sizeKb_ = 0;
          onChanged();
          return this;
        }

        private int fillPolicy_ = 0;
        /**
         * <code>optional .perfetto.protos.TraceConfig.BufferConfig.FillPolicy fill_policy = 4;</code>
         * @return Whether the fillPolicy field is set.
         */
        @java.lang.Override public boolean hasFillPolicy() {
          return ((bitField0_ & 0x00000002) != 0);
        }
        /**
         * <code>optional .perfetto.protos.TraceConfig.BufferConfig.FillPolicy fill_policy = 4;</code>
         * @return The fillPolicy.
         */
        @java.lang.Override
        public perfetto.protos.TraceConfigOuterClass.TraceConfig.BufferConfig.FillPolicy getFillPolicy() {
          perfetto.protos.TraceConfigOuterClass.TraceConfig.BufferConfig.FillPolicy result = perfetto.protos.TraceConfigOuterClass.TraceConfig.BufferConfig.FillPolicy.forNumber(fillPolicy_);
          return result == null ? perfetto.protos.TraceConfigOuterClass.TraceConfig.BufferConfig.FillPolicy.UNSPECIFIED : result;
        }
        /**
         * <code>optional .perfetto.protos.TraceConfig.BufferConfig.FillPolicy fill_policy = 4;</code>
         * @param value The fillPolicy to set.
         * @return This builder for chaining.
         */
        public Builder setFillPolicy(perfetto.protos.TraceConfigOuterClass.TraceConfig.BufferConfig.FillPolicy value) {
          if (value == null) {
            throw new NullPointerException();
          }
          bitField0_ |= 0x00000002;
          fillPolicy_ = value.getNumber();
          onChanged();
          return this;
        }
        /**
         * <code>optional .perfetto.protos.TraceConfig.BufferConfig.FillPolicy fill_policy = 4;</code>
         * @return This builder for chaining.
         */
        public Builder clearFillPolicy() {
          bitField0_ = (bitField0_ & ~0x00000002);
          fillPolicy_ = 0;
          onChanged();
          return this;
        }
        @java.lang.Override
        public final Builder setUnknownFields(
            final com.google.protobuf.UnknownFieldSet unknownFields) {
          return super.setUnknownFields(unknownFields);
        }

        @java.lang.Override
        public final Builder mergeUnknownFields(
            final com.google.protobuf.UnknownFieldSet unknownFields) {
          return super.mergeUnknownFields(unknownFields);
        }


        // @@protoc_insertion_point(builder_scope:perfetto.protos.TraceConfig.BufferConfig)
      }

      // @@protoc_insertion_point(class_scope:perfetto.protos.TraceConfig.BufferConfig)
      private static final perfetto.protos.TraceConfigOuterClass.TraceConfig.BufferConfig DEFAULT_INSTANCE;
      static {
        DEFAULT_INSTANCE = new perfetto.protos.TraceConfigOuterClass.TraceConfig.BufferConfig();
      }

      public static perfetto.protos.TraceConfigOuterClass.TraceConfig.BufferConfig getDefaultInstance() {
        return DEFAULT_INSTANCE;
      }

      @java.lang.Deprecated public static final com.google.protobuf.Parser<BufferConfig>
          PARSER = new com.google.protobuf.AbstractParser<BufferConfig>() {
        @java.lang.Override
        public BufferConfig parsePartialFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws com.google.protobuf.InvalidProtocolBufferException {
          Builder builder = newBuilder();
          try {
            builder.mergeFrom(input, extensionRegistry);
          } catch (com.google.protobuf.InvalidProtocolBufferException e) {
            throw e.setUnfinishedMessage(builder.buildPartial());
          } catch (com.google.protobuf.UninitializedMessageException e) {
            throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
          } catch (java.io.IOException e) {
            throw new com.google.protobuf.InvalidProtocolBufferException(e)
                .setUnfinishedMessage(builder.buildPartial());
          }
          return builder.buildPartial();
        }
      };

      public static com.google.protobuf.Parser<BufferConfig> parser() {
        return PARSER;
      }

      @java.lang.Override
      public com.google.protobuf.Parser<BufferConfig> getParserForType() {
        return PARSER;
      }

      @java.lang.Override
      public perfetto.protos.TraceConfigOuterClass.TraceConfig.BufferConfig getDefaultInstanceForType() {
        return DEFAULT_INSTANCE;
      }

    }

    public interface DataSourceOrBuilder extends
        // @@protoc_insertion_point(interface_extends:perfetto.protos.TraceConfig.DataSource)
        com.google.protobuf.MessageOrBuilder {

      /**
       * <pre>
       * Filters and data-source specific config. It contains also the unique name
       * of the data source, the one passed in the  DataSourceDescriptor when they
       * register on the service.
       * </pre>
       *
       * <code>optional .perfetto.protos.DataSourceConfig config = 1;</code>
       * @return Whether the config field is set.
       */
      boolean hasConfig();
      /**
       * <pre>
       * Filters and data-source specific config. It contains also the unique name
       * of the data source, the one passed in the  DataSourceDescriptor when they
       * register on the service.
       * </pre>
       *
       * <code>optional .perfetto.protos.DataSourceConfig config = 1;</code>
       * @return The config.
       */
      perfetto.protos.DataSourceConfigOuterClass.DataSourceConfig getConfig();
      /**
       * <pre>
       * Filters and data-source specific config. It contains also the unique name
       * of the data source, the one passed in the  DataSourceDescriptor when they
       * register on the service.
       * </pre>
       *
       * <code>optional .perfetto.protos.DataSourceConfig config = 1;</code>
       */
      perfetto.protos.DataSourceConfigOuterClass.DataSourceConfigOrBuilder getConfigOrBuilder();

      /**
       * <pre>
       * Optional. If multiple producers (~processes) expose the same data source
       * and either |producer_name_filter| or |producer_name_regex_filter| is set,
       * the data source is enabled only for producers whose names match any of
       * the filters.
       * |producer_name_filter| has to be an exact match, while
       * |producer_name_regex_filter| is a regular expression.
       * This allows to enable a data source only for specific processes.
       * The "repeated" fields have OR semantics: specifying a filter ["foo",
       * "bar"] will enable data sources on both "foo" and "bar" (if they exist).
       * </pre>
       *
       * <code>repeated string producer_name_filter = 2;</code>
       * @return A list containing the producerNameFilter.
       */
      java.util.List<java.lang.String>
          getProducerNameFilterList();
      /**
       * <pre>
       * Optional. If multiple producers (~processes) expose the same data source
       * and either |producer_name_filter| or |producer_name_regex_filter| is set,
       * the data source is enabled only for producers whose names match any of
       * the filters.
       * |producer_name_filter| has to be an exact match, while
       * |producer_name_regex_filter| is a regular expression.
       * This allows to enable a data source only for specific processes.
       * The "repeated" fields have OR semantics: specifying a filter ["foo",
       * "bar"] will enable data sources on both "foo" and "bar" (if they exist).
       * </pre>
       *
       * <code>repeated string producer_name_filter = 2;</code>
       * @return The count of producerNameFilter.
       */
      int getProducerNameFilterCount();
      /**
       * <pre>
       * Optional. If multiple producers (~processes) expose the same data source
       * and either |producer_name_filter| or |producer_name_regex_filter| is set,
       * the data source is enabled only for producers whose names match any of
       * the filters.
       * |producer_name_filter| has to be an exact match, while
       * |producer_name_regex_filter| is a regular expression.
       * This allows to enable a data source only for specific processes.
       * The "repeated" fields have OR semantics: specifying a filter ["foo",
       * "bar"] will enable data sources on both "foo" and "bar" (if they exist).
       * </pre>
       *
       * <code>repeated string producer_name_filter = 2;</code>
       * @param index The index of the element to return.
       * @return The producerNameFilter at the given index.
       */
      java.lang.String getProducerNameFilter(int index);
      /**
       * <pre>
       * Optional. If multiple producers (~processes) expose the same data source
       * and either |producer_name_filter| or |producer_name_regex_filter| is set,
       * the data source is enabled only for producers whose names match any of
       * the filters.
       * |producer_name_filter| has to be an exact match, while
       * |producer_name_regex_filter| is a regular expression.
       * This allows to enable a data source only for specific processes.
       * The "repeated" fields have OR semantics: specifying a filter ["foo",
       * "bar"] will enable data sources on both "foo" and "bar" (if they exist).
       * </pre>
       *
       * <code>repeated string producer_name_filter = 2;</code>
       * @param index The index of the value to return.
       * @return The bytes of the producerNameFilter at the given index.
       */
      com.google.protobuf.ByteString
          getProducerNameFilterBytes(int index);

      /**
       * <code>repeated string producer_name_regex_filter = 3;</code>
       * @return A list containing the producerNameRegexFilter.
       */
      java.util.List<java.lang.String>
          getProducerNameRegexFilterList();
      /**
       * <code>repeated string producer_name_regex_filter = 3;</code>
       * @return The count of producerNameRegexFilter.
       */
      int getProducerNameRegexFilterCount();
      /**
       * <code>repeated string producer_name_regex_filter = 3;</code>
       * @param index The index of the element to return.
       * @return The producerNameRegexFilter at the given index.
       */
      java.lang.String getProducerNameRegexFilter(int index);
      /**
       * <code>repeated string producer_name_regex_filter = 3;</code>
       * @param index The index of the value to return.
       * @return The bytes of the producerNameRegexFilter at the given index.
       */
      com.google.protobuf.ByteString
          getProducerNameRegexFilterBytes(int index);
    }
    /**
     * Protobuf type {@code perfetto.protos.TraceConfig.DataSource}
     */
    public static final class DataSource extends
        com.google.protobuf.GeneratedMessageV3 implements
        // @@protoc_insertion_point(message_implements:perfetto.protos.TraceConfig.DataSource)
        DataSourceOrBuilder {
    private static final long serialVersionUID = 0L;
      // Use DataSource.newBuilder() to construct.
      private DataSource(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
        super(builder);
      }
      private DataSource() {
        producerNameFilter_ = com.google.protobuf.LazyStringArrayList.EMPTY;
        producerNameRegexFilter_ = com.google.protobuf.LazyStringArrayList.EMPTY;
      }

      @java.lang.Override
      @SuppressWarnings({"unused"})
      protected java.lang.Object newInstance(
          UnusedPrivateParameter unused) {
        return new DataSource();
      }

      @java.lang.Override
      public final com.google.protobuf.UnknownFieldSet
      getUnknownFields() {
        return this.unknownFields;
      }
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return perfetto.protos.TraceConfigOuterClass.internal_static_perfetto_protos_TraceConfig_DataSource_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return perfetto.protos.TraceConfigOuterClass.internal_static_perfetto_protos_TraceConfig_DataSource_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                perfetto.protos.TraceConfigOuterClass.TraceConfig.DataSource.class, perfetto.protos.TraceConfigOuterClass.TraceConfig.DataSource.Builder.class);
      }

      private int bitField0_;
      public static final int CONFIG_FIELD_NUMBER = 1;
      private perfetto.protos.DataSourceConfigOuterClass.DataSourceConfig config_;
      /**
       * <pre>
       * Filters and data-source specific config. It contains also the unique name
       * of the data source, the one passed in the  DataSourceDescriptor when they
       * register on the service.
       * </pre>
       *
       * <code>optional .perfetto.protos.DataSourceConfig config = 1;</code>
       * @return Whether the config field is set.
       */
      @java.lang.Override
      public boolean hasConfig() {
        return ((bitField0_ & 0x00000001) != 0);
      }
      /**
       * <pre>
       * Filters and data-source specific config. It contains also the unique name
       * of the data source, the one passed in the  DataSourceDescriptor when they
       * register on the service.
       * </pre>
       *
       * <code>optional .perfetto.protos.DataSourceConfig config = 1;</code>
       * @return The config.
       */
      @java.lang.Override
      public perfetto.protos.DataSourceConfigOuterClass.DataSourceConfig getConfig() {
        return config_ == null ? perfetto.protos.DataSourceConfigOuterClass.DataSourceConfig.getDefaultInstance() : config_;
      }
      /**
       * <pre>
       * Filters and data-source specific config. It contains also the unique name
       * of the data source, the one passed in the  DataSourceDescriptor when they
       * register on the service.
       * </pre>
       *
       * <code>optional .perfetto.protos.DataSourceConfig config = 1;</code>
       */
      @java.lang.Override
      public perfetto.protos.DataSourceConfigOuterClass.DataSourceConfigOrBuilder getConfigOrBuilder() {
        return config_ == null ? perfetto.protos.DataSourceConfigOuterClass.DataSourceConfig.getDefaultInstance() : config_;
      }

      public static final int PRODUCER_NAME_FILTER_FIELD_NUMBER = 2;
      @SuppressWarnings("serial")
      private com.google.protobuf.LazyStringList producerNameFilter_;
      /**
       * <pre>
       * Optional. If multiple producers (~processes) expose the same data source
       * and either |producer_name_filter| or |producer_name_regex_filter| is set,
       * the data source is enabled only for producers whose names match any of
       * the filters.
       * |producer_name_filter| has to be an exact match, while
       * |producer_name_regex_filter| is a regular expression.
       * This allows to enable a data source only for specific processes.
       * The "repeated" fields have OR semantics: specifying a filter ["foo",
       * "bar"] will enable data sources on both "foo" and "bar" (if they exist).
       * </pre>
       *
       * <code>repeated string producer_name_filter = 2;</code>
       * @return A list containing the producerNameFilter.
       */
      public com.google.protobuf.ProtocolStringList
          getProducerNameFilterList() {
        return producerNameFilter_;
      }
      /**
       * <pre>
       * Optional. If multiple producers (~processes) expose the same data source
       * and either |producer_name_filter| or |producer_name_regex_filter| is set,
       * the data source is enabled only for producers whose names match any of
       * the filters.
       * |producer_name_filter| has to be an exact match, while
       * |producer_name_regex_filter| is a regular expression.
       * This allows to enable a data source only for specific processes.
       * The "repeated" fields have OR semantics: specifying a filter ["foo",
       * "bar"] will enable data sources on both "foo" and "bar" (if they exist).
       * </pre>
       *
       * <code>repeated string producer_name_filter = 2;</code>
       * @return The count of producerNameFilter.
       */
      public int getProducerNameFilterCount() {
        return producerNameFilter_.size();
      }
      /**
       * <pre>
       * Optional. If multiple producers (~processes) expose the same data source
       * and either |producer_name_filter| or |producer_name_regex_filter| is set,
       * the data source is enabled only for producers whose names match any of
       * the filters.
       * |producer_name_filter| has to be an exact match, while
       * |producer_name_regex_filter| is a regular expression.
       * This allows to enable a data source only for specific processes.
       * The "repeated" fields have OR semantics: specifying a filter ["foo",
       * "bar"] will enable data sources on both "foo" and "bar" (if they exist).
       * </pre>
       *
       * <code>repeated string producer_name_filter = 2;</code>
       * @param index The index of the element to return.
       * @return The producerNameFilter at the given index.
       */
      public java.lang.String getProducerNameFilter(int index) {
        return producerNameFilter_.get(index);
      }
      /**
       * <pre>
       * Optional. If multiple producers (~processes) expose the same data source
       * and either |producer_name_filter| or |producer_name_regex_filter| is set,
       * the data source is enabled only for producers whose names match any of
       * the filters.
       * |producer_name_filter| has to be an exact match, while
       * |producer_name_regex_filter| is a regular expression.
       * This allows to enable a data source only for specific processes.
       * The "repeated" fields have OR semantics: specifying a filter ["foo",
       * "bar"] will enable data sources on both "foo" and "bar" (if they exist).
       * </pre>
       *
       * <code>repeated string producer_name_filter = 2;</code>
       * @param index The index of the value to return.
       * @return The bytes of the producerNameFilter at the given index.
       */
      public com.google.protobuf.ByteString
          getProducerNameFilterBytes(int index) {
        return producerNameFilter_.getByteString(index);
      }

      public static final int PRODUCER_NAME_REGEX_FILTER_FIELD_NUMBER = 3;
      @SuppressWarnings("serial")
      private com.google.protobuf.LazyStringList producerNameRegexFilter_;
      /**
       * <code>repeated string producer_name_regex_filter = 3;</code>
       * @return A list containing the producerNameRegexFilter.
       */
      public com.google.protobuf.ProtocolStringList
          getProducerNameRegexFilterList() {
        return producerNameRegexFilter_;
      }
      /**
       * <code>repeated string producer_name_regex_filter = 3;</code>
       * @return The count of producerNameRegexFilter.
       */
      public int getProducerNameRegexFilterCount() {
        return producerNameRegexFilter_.size();
      }
      /**
       * <code>repeated string producer_name_regex_filter = 3;</code>
       * @param index The index of the element to return.
       * @return The producerNameRegexFilter at the given index.
       */
      public java.lang.String getProducerNameRegexFilter(int index) {
        return producerNameRegexFilter_.get(index);
      }
      /**
       * <code>repeated string producer_name_regex_filter = 3;</code>
       * @param index The index of the value to return.
       * @return The bytes of the producerNameRegexFilter at the given index.
       */
      public com.google.protobuf.ByteString
          getProducerNameRegexFilterBytes(int index) {
        return producerNameRegexFilter_.getByteString(index);
      }

      private byte memoizedIsInitialized = -1;
      @java.lang.Override
      public final boolean isInitialized() {
        byte isInitialized = memoizedIsInitialized;
        if (isInitialized == 1) return true;
        if (isInitialized == 0) return false;

        memoizedIsInitialized = 1;
        return true;
      }

      @java.lang.Override
      public void writeTo(com.google.protobuf.CodedOutputStream output)
                          throws java.io.IOException {
        if (((bitField0_ & 0x00000001) != 0)) {
          output.writeMessage(1, getConfig());
        }
        for (int i = 0; i < producerNameFilter_.size(); i++) {
          com.google.protobuf.GeneratedMessageV3.writeString(output, 2, producerNameFilter_.getRaw(i));
        }
        for (int i = 0; i < producerNameRegexFilter_.size(); i++) {
          com.google.protobuf.GeneratedMessageV3.writeString(output, 3, producerNameRegexFilter_.getRaw(i));
        }
        getUnknownFields().writeTo(output);
      }

      @java.lang.Override
      public int getSerializedSize() {
        int size = memoizedSize;
        if (size != -1) return size;

        size = 0;
        if (((bitField0_ & 0x00000001) != 0)) {
          size += com.google.protobuf.CodedOutputStream
            .computeMessageSize(1, getConfig());
        }
        {
          int dataSize = 0;
          for (int i = 0; i < producerNameFilter_.size(); i++) {
            dataSize += computeStringSizeNoTag(producerNameFilter_.getRaw(i));
          }
          size += dataSize;
          size += 1 * getProducerNameFilterList().size();
        }
        {
          int dataSize = 0;
          for (int i = 0; i < producerNameRegexFilter_.size(); i++) {
            dataSize += computeStringSizeNoTag(producerNameRegexFilter_.getRaw(i));
          }
          size += dataSize;
          size += 1 * getProducerNameRegexFilterList().size();
        }
        size += getUnknownFields().getSerializedSize();
        memoizedSize = size;
        return size;
      }

      @java.lang.Override
      public boolean equals(final java.lang.Object obj) {
        if (obj == this) {
         return true;
        }
        if (!(obj instanceof perfetto.protos.TraceConfigOuterClass.TraceConfig.DataSource)) {
          return super.equals(obj);
        }
        perfetto.protos.TraceConfigOuterClass.TraceConfig.DataSource other = (perfetto.protos.TraceConfigOuterClass.TraceConfig.DataSource) obj;

        if (hasConfig() != other.hasConfig()) return false;
        if (hasConfig()) {
          if (!getConfig()
              .equals(other.getConfig())) return false;
        }
        if (!getProducerNameFilterList()
            .equals(other.getProducerNameFilterList())) return false;
        if (!getProducerNameRegexFilterList()
            .equals(other.getProducerNameRegexFilterList())) return false;
        if (!getUnknownFields().equals(other.getUnknownFields())) return false;
        return true;
      }

      @java.lang.Override
      public int hashCode() {
        if (memoizedHashCode != 0) {
          return memoizedHashCode;
        }
        int hash = 41;
        hash = (19 * hash) + getDescriptor().hashCode();
        if (hasConfig()) {
          hash = (37 * hash) + CONFIG_FIELD_NUMBER;
          hash = (53 * hash) + getConfig().hashCode();
        }
        if (getProducerNameFilterCount() > 0) {
          hash = (37 * hash) + PRODUCER_NAME_FILTER_FIELD_NUMBER;
          hash = (53 * hash) + getProducerNameFilterList().hashCode();
        }
        if (getProducerNameRegexFilterCount() > 0) {
          hash = (37 * hash) + PRODUCER_NAME_REGEX_FILTER_FIELD_NUMBER;
          hash = (53 * hash) + getProducerNameRegexFilterList().hashCode();
        }
        hash = (29 * hash) + getUnknownFields().hashCode();
        memoizedHashCode = hash;
        return hash;
      }

      public static perfetto.protos.TraceConfigOuterClass.TraceConfig.DataSource parseFrom(
          java.nio.ByteBuffer data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static perfetto.protos.TraceConfigOuterClass.TraceConfig.DataSource parseFrom(
          java.nio.ByteBuffer data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static perfetto.protos.TraceConfigOuterClass.TraceConfig.DataSource parseFrom(
          com.google.protobuf.ByteString data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static perfetto.protos.TraceConfigOuterClass.TraceConfig.DataSource parseFrom(
          com.google.protobuf.ByteString data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static perfetto.protos.TraceConfigOuterClass.TraceConfig.DataSource parseFrom(byte[] data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static perfetto.protos.TraceConfigOuterClass.TraceConfig.DataSource parseFrom(
          byte[] data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static perfetto.protos.TraceConfigOuterClass.TraceConfig.DataSource parseFrom(java.io.InputStream input)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseWithIOException(PARSER, input);
      }
      public static perfetto.protos.TraceConfigOuterClass.TraceConfig.DataSource parseFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseWithIOException(PARSER, input, extensionRegistry);
      }
      public static perfetto.protos.TraceConfigOuterClass.TraceConfig.DataSource parseDelimitedFrom(java.io.InputStream input)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseDelimitedWithIOException(PARSER, input);
      }
      public static perfetto.protos.TraceConfigOuterClass.TraceConfig.DataSource parseDelimitedFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
      }
      public static perfetto.protos.TraceConfigOuterClass.TraceConfig.DataSource parseFrom(
          com.google.protobuf.CodedInputStream input)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseWithIOException(PARSER, input);
      }
      public static perfetto.protos.TraceConfigOuterClass.TraceConfig.DataSource parseFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseWithIOException(PARSER, input, extensionRegistry);
      }

      @java.lang.Override
      public Builder newBuilderForType() { return newBuilder(); }
      public static Builder newBuilder() {
        return DEFAULT_INSTANCE.toBuilder();
      }
      public static Builder newBuilder(perfetto.protos.TraceConfigOuterClass.TraceConfig.DataSource prototype) {
        return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
      }
      @java.lang.Override
      public Builder toBuilder() {
        return this == DEFAULT_INSTANCE
            ? new Builder() : new Builder().mergeFrom(this);
      }

      @java.lang.Override
      protected Builder newBuilderForType(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        Builder builder = new Builder(parent);
        return builder;
      }
      /**
       * Protobuf type {@code perfetto.protos.TraceConfig.DataSource}
       */
      public static final class Builder extends
          com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
          // @@protoc_insertion_point(builder_implements:perfetto.protos.TraceConfig.DataSource)
          perfetto.protos.TraceConfigOuterClass.TraceConfig.DataSourceOrBuilder {
        public static final com.google.protobuf.Descriptors.Descriptor
            getDescriptor() {
          return perfetto.protos.TraceConfigOuterClass.internal_static_perfetto_protos_TraceConfig_DataSource_descriptor;
        }

        @java.lang.Override
        protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
            internalGetFieldAccessorTable() {
          return perfetto.protos.TraceConfigOuterClass.internal_static_perfetto_protos_TraceConfig_DataSource_fieldAccessorTable
              .ensureFieldAccessorsInitialized(
                  perfetto.protos.TraceConfigOuterClass.TraceConfig.DataSource.class, perfetto.protos.TraceConfigOuterClass.TraceConfig.DataSource.Builder.class);
        }

        // Construct using perfetto.protos.TraceConfigOuterClass.TraceConfig.DataSource.newBuilder()
        private Builder() {
          maybeForceBuilderInitialization();
        }

        private Builder(
            com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
          super(parent);
          maybeForceBuilderInitialization();
        }
        private void maybeForceBuilderInitialization() {
          if (com.google.protobuf.GeneratedMessageV3
                  .alwaysUseFieldBuilders) {
            getConfigFieldBuilder();
          }
        }
        @java.lang.Override
        public Builder clear() {
          super.clear();
          bitField0_ = 0;
          config_ = null;
          if (configBuilder_ != null) {
            configBuilder_.dispose();
            configBuilder_ = null;
          }
          producerNameFilter_ = com.google.protobuf.LazyStringArrayList.EMPTY;
          bitField0_ = (bitField0_ & ~0x00000002);
          producerNameRegexFilter_ = com.google.protobuf.LazyStringArrayList.EMPTY;
          bitField0_ = (bitField0_ & ~0x00000004);
          return this;
        }

        @java.lang.Override
        public com.google.protobuf.Descriptors.Descriptor
            getDescriptorForType() {
          return perfetto.protos.TraceConfigOuterClass.internal_static_perfetto_protos_TraceConfig_DataSource_descriptor;
        }

        @java.lang.Override
        public perfetto.protos.TraceConfigOuterClass.TraceConfig.DataSource getDefaultInstanceForType() {
          return perfetto.protos.TraceConfigOuterClass.TraceConfig.DataSource.getDefaultInstance();
        }

        @java.lang.Override
        public perfetto.protos.TraceConfigOuterClass.TraceConfig.DataSource build() {
          perfetto.protos.TraceConfigOuterClass.TraceConfig.DataSource result = buildPartial();
          if (!result.isInitialized()) {
            throw newUninitializedMessageException(result);
          }
          return result;
        }

        @java.lang.Override
        public perfetto.protos.TraceConfigOuterClass.TraceConfig.DataSource buildPartial() {
          perfetto.protos.TraceConfigOuterClass.TraceConfig.DataSource result = new perfetto.protos.TraceConfigOuterClass.TraceConfig.DataSource(this);
          buildPartialRepeatedFields(result);
          if (bitField0_ != 0) { buildPartial0(result); }
          onBuilt();
          return result;
        }

        private void buildPartialRepeatedFields(perfetto.protos.TraceConfigOuterClass.TraceConfig.DataSource result) {
          if (((bitField0_ & 0x00000002) != 0)) {
            producerNameFilter_ = producerNameFilter_.getUnmodifiableView();
            bitField0_ = (bitField0_ & ~0x00000002);
          }
          result.producerNameFilter_ = producerNameFilter_;
          if (((bitField0_ & 0x00000004) != 0)) {
            producerNameRegexFilter_ = producerNameRegexFilter_.getUnmodifiableView();
            bitField0_ = (bitField0_ & ~0x00000004);
          }
          result.producerNameRegexFilter_ = producerNameRegexFilter_;
        }

        private void buildPartial0(perfetto.protos.TraceConfigOuterClass.TraceConfig.DataSource result) {
          int from_bitField0_ = bitField0_;
          int to_bitField0_ = 0;
          if (((from_bitField0_ & 0x00000001) != 0)) {
            result.config_ = configBuilder_ == null
                ? config_
                : configBuilder_.build();
            to_bitField0_ |= 0x00000001;
          }
          result.bitField0_ |= to_bitField0_;
        }

        @java.lang.Override
        public Builder clone() {
          return super.clone();
        }
        @java.lang.Override
        public Builder setField(
            com.google.protobuf.Descriptors.FieldDescriptor field,
            java.lang.Object value) {
          return super.setField(field, value);
        }
        @java.lang.Override
        public Builder clearField(
            com.google.protobuf.Descriptors.FieldDescriptor field) {
          return super.clearField(field);
        }
        @java.lang.Override
        public Builder clearOneof(
            com.google.protobuf.Descriptors.OneofDescriptor oneof) {
          return super.clearOneof(oneof);
        }
        @java.lang.Override
        public Builder setRepeatedField(
            com.google.protobuf.Descriptors.FieldDescriptor field,
            int index, java.lang.Object value) {
          return super.setRepeatedField(field, index, value);
        }
        @java.lang.Override
        public Builder addRepeatedField(
            com.google.protobuf.Descriptors.FieldDescriptor field,
            java.lang.Object value) {
          return super.addRepeatedField(field, value);
        }
        @java.lang.Override
        public Builder mergeFrom(com.google.protobuf.Message other) {
          if (other instanceof perfetto.protos.TraceConfigOuterClass.TraceConfig.DataSource) {
            return mergeFrom((perfetto.protos.TraceConfigOuterClass.TraceConfig.DataSource)other);
          } else {
            super.mergeFrom(other);
            return this;
          }
        }

        public Builder mergeFrom(perfetto.protos.TraceConfigOuterClass.TraceConfig.DataSource other) {
          if (other == perfetto.protos.TraceConfigOuterClass.TraceConfig.DataSource.getDefaultInstance()) return this;
          if (other.hasConfig()) {
            mergeConfig(other.getConfig());
          }
          if (!other.producerNameFilter_.isEmpty()) {
            if (producerNameFilter_.isEmpty()) {
              producerNameFilter_ = other.producerNameFilter_;
              bitField0_ = (bitField0_ & ~0x00000002);
            } else {
              ensureProducerNameFilterIsMutable();
              producerNameFilter_.addAll(other.producerNameFilter_);
            }
            onChanged();
          }
          if (!other.producerNameRegexFilter_.isEmpty()) {
            if (producerNameRegexFilter_.isEmpty()) {
              producerNameRegexFilter_ = other.producerNameRegexFilter_;
              bitField0_ = (bitField0_ & ~0x00000004);
            } else {
              ensureProducerNameRegexFilterIsMutable();
              producerNameRegexFilter_.addAll(other.producerNameRegexFilter_);
            }
            onChanged();
          }
          this.mergeUnknownFields(other.getUnknownFields());
          onChanged();
          return this;
        }

        @java.lang.Override
        public final boolean isInitialized() {
          return true;
        }

        @java.lang.Override
        public Builder mergeFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws java.io.IOException {
          if (extensionRegistry == null) {
            throw new java.lang.NullPointerException();
          }
          try {
            boolean done = false;
            while (!done) {
              int tag = input.readTag();
              switch (tag) {
                case 0:
                  done = true;
                  break;
                case 10: {
                  input.readMessage(
                      getConfigFieldBuilder().getBuilder(),
                      extensionRegistry);
                  bitField0_ |= 0x00000001;
                  break;
                } // case 10
                case 18: {
                  com.google.protobuf.ByteString bs = input.readBytes();
                  ensureProducerNameFilterIsMutable();
                  producerNameFilter_.add(bs);
                  break;
                } // case 18
                case 26: {
                  com.google.protobuf.ByteString bs = input.readBytes();
                  ensureProducerNameRegexFilterIsMutable();
                  producerNameRegexFilter_.add(bs);
                  break;
                } // case 26
                default: {
                  if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                    done = true; // was an endgroup tag
                  }
                  break;
                } // default:
              } // switch (tag)
            } // while (!done)
          } catch (com.google.protobuf.InvalidProtocolBufferException e) {
            throw e.unwrapIOException();
          } finally {
            onChanged();
          } // finally
          return this;
        }
        private int bitField0_;

        private perfetto.protos.DataSourceConfigOuterClass.DataSourceConfig config_;
        private com.google.protobuf.SingleFieldBuilderV3<
            perfetto.protos.DataSourceConfigOuterClass.DataSourceConfig, perfetto.protos.DataSourceConfigOuterClass.DataSourceConfig.Builder, perfetto.protos.DataSourceConfigOuterClass.DataSourceConfigOrBuilder> configBuilder_;
        /**
         * <pre>
         * Filters and data-source specific config. It contains also the unique name
         * of the data source, the one passed in the  DataSourceDescriptor when they
         * register on the service.
         * </pre>
         *
         * <code>optional .perfetto.protos.DataSourceConfig config = 1;</code>
         * @return Whether the config field is set.
         */
        public boolean hasConfig() {
          return ((bitField0_ & 0x00000001) != 0);
        }
        /**
         * <pre>
         * Filters and data-source specific config. It contains also the unique name
         * of the data source, the one passed in the  DataSourceDescriptor when they
         * register on the service.
         * </pre>
         *
         * <code>optional .perfetto.protos.DataSourceConfig config = 1;</code>
         * @return The config.
         */
        public perfetto.protos.DataSourceConfigOuterClass.DataSourceConfig getConfig() {
          if (configBuilder_ == null) {
            return config_ == null ? perfetto.protos.DataSourceConfigOuterClass.DataSourceConfig.getDefaultInstance() : config_;
          } else {
            return configBuilder_.getMessage();
          }
        }
        /**
         * <pre>
         * Filters and data-source specific config. It contains also the unique name
         * of the data source, the one passed in the  DataSourceDescriptor when they
         * register on the service.
         * </pre>
         *
         * <code>optional .perfetto.protos.DataSourceConfig config = 1;</code>
         */
        public Builder setConfig(perfetto.protos.DataSourceConfigOuterClass.DataSourceConfig value) {
          if (configBuilder_ == null) {
            if (value == null) {
              throw new NullPointerException();
            }
            config_ = value;
          } else {
            configBuilder_.setMessage(value);
          }
          bitField0_ |= 0x00000001;
          onChanged();
          return this;
        }
        /**
         * <pre>
         * Filters and data-source specific config. It contains also the unique name
         * of the data source, the one passed in the  DataSourceDescriptor when they
         * register on the service.
         * </pre>
         *
         * <code>optional .perfetto.protos.DataSourceConfig config = 1;</code>
         */
        public Builder setConfig(
            perfetto.protos.DataSourceConfigOuterClass.DataSourceConfig.Builder builderForValue) {
          if (configBuilder_ == null) {
            config_ = builderForValue.build();
          } else {
            configBuilder_.setMessage(builderForValue.build());
          }
          bitField0_ |= 0x00000001;
          onChanged();
          return this;
        }
        /**
         * <pre>
         * Filters and data-source specific config. It contains also the unique name
         * of the data source, the one passed in the  DataSourceDescriptor when they
         * register on the service.
         * </pre>
         *
         * <code>optional .perfetto.protos.DataSourceConfig config = 1;</code>
         */
        public Builder mergeConfig(perfetto.protos.DataSourceConfigOuterClass.DataSourceConfig value) {
          if (configBuilder_ == null) {
            if (((bitField0_ & 0x00000001) != 0) &&
              config_ != null &&
              config_ != perfetto.protos.DataSourceConfigOuterClass.DataSourceConfig.getDefaultInstance()) {
              getConfigBuilder().mergeFrom(value);
            } else {
              config_ = value;
            }
          } else {
            configBuilder_.mergeFrom(value);
          }
          bitField0_ |= 0x00000001;
          onChanged();
          return this;
        }
        /**
         * <pre>
         * Filters and data-source specific config. It contains also the unique name
         * of the data source, the one passed in the  DataSourceDescriptor when they
         * register on the service.
         * </pre>
         *
         * <code>optional .perfetto.protos.DataSourceConfig config = 1;</code>
         */
        public Builder clearConfig() {
          bitField0_ = (bitField0_ & ~0x00000001);
          config_ = null;
          if (configBuilder_ != null) {
            configBuilder_.dispose();
            configBuilder_ = null;
          }
          onChanged();
          return this;
        }
        /**
         * <pre>
         * Filters and data-source specific config. It contains also the unique name
         * of the data source, the one passed in the  DataSourceDescriptor when they
         * register on the service.
         * </pre>
         *
         * <code>optional .perfetto.protos.DataSourceConfig config = 1;</code>
         */
        public perfetto.protos.DataSourceConfigOuterClass.DataSourceConfig.Builder getConfigBuilder() {
          bitField0_ |= 0x00000001;
          onChanged();
          return getConfigFieldBuilder().getBuilder();
        }
        /**
         * <pre>
         * Filters and data-source specific config. It contains also the unique name
         * of the data source, the one passed in the  DataSourceDescriptor when they
         * register on the service.
         * </pre>
         *
         * <code>optional .perfetto.protos.DataSourceConfig config = 1;</code>
         */
        public perfetto.protos.DataSourceConfigOuterClass.DataSourceConfigOrBuilder getConfigOrBuilder() {
          if (configBuilder_ != null) {
            return configBuilder_.getMessageOrBuilder();
          } else {
            return config_ == null ?
                perfetto.protos.DataSourceConfigOuterClass.DataSourceConfig.getDefaultInstance() : config_;
          }
        }
        /**
         * <pre>
         * Filters and data-source specific config. It contains also the unique name
         * of the data source, the one passed in the  DataSourceDescriptor when they
         * register on the service.
         * </pre>
         *
         * <code>optional .perfetto.protos.DataSourceConfig config = 1;</code>
         */
        private com.google.protobuf.SingleFieldBuilderV3<
            perfetto.protos.DataSourceConfigOuterClass.DataSourceConfig, perfetto.protos.DataSourceConfigOuterClass.DataSourceConfig.Builder, perfetto.protos.DataSourceConfigOuterClass.DataSourceConfigOrBuilder> 
            getConfigFieldBuilder() {
          if (configBuilder_ == null) {
            configBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
                perfetto.protos.DataSourceConfigOuterClass.DataSourceConfig, perfetto.protos.DataSourceConfigOuterClass.DataSourceConfig.Builder, perfetto.protos.DataSourceConfigOuterClass.DataSourceConfigOrBuilder>(
                    getConfig(),
                    getParentForChildren(),
                    isClean());
            config_ = null;
          }
          return configBuilder_;
        }

        private com.google.protobuf.LazyStringList producerNameFilter_ = com.google.protobuf.LazyStringArrayList.EMPTY;
        private void ensureProducerNameFilterIsMutable() {
          if (!((bitField0_ & 0x00000002) != 0)) {
            producerNameFilter_ = new com.google.protobuf.LazyStringArrayList(producerNameFilter_);
            bitField0_ |= 0x00000002;
           }
        }
        /**
         * <pre>
         * Optional. If multiple producers (~processes) expose the same data source
         * and either |producer_name_filter| or |producer_name_regex_filter| is set,
         * the data source is enabled only for producers whose names match any of
         * the filters.
         * |producer_name_filter| has to be an exact match, while
         * |producer_name_regex_filter| is a regular expression.
         * This allows to enable a data source only for specific processes.
         * The "repeated" fields have OR semantics: specifying a filter ["foo",
         * "bar"] will enable data sources on both "foo" and "bar" (if they exist).
         * </pre>
         *
         * <code>repeated string producer_name_filter = 2;</code>
         * @return A list containing the producerNameFilter.
         */
        public com.google.protobuf.ProtocolStringList
            getProducerNameFilterList() {
          return producerNameFilter_.getUnmodifiableView();
        }
        /**
         * <pre>
         * Optional. If multiple producers (~processes) expose the same data source
         * and either |producer_name_filter| or |producer_name_regex_filter| is set,
         * the data source is enabled only for producers whose names match any of
         * the filters.
         * |producer_name_filter| has to be an exact match, while
         * |producer_name_regex_filter| is a regular expression.
         * This allows to enable a data source only for specific processes.
         * The "repeated" fields have OR semantics: specifying a filter ["foo",
         * "bar"] will enable data sources on both "foo" and "bar" (if they exist).
         * </pre>
         *
         * <code>repeated string producer_name_filter = 2;</code>
         * @return The count of producerNameFilter.
         */
        public int getProducerNameFilterCount() {
          return producerNameFilter_.size();
        }
        /**
         * <pre>
         * Optional. If multiple producers (~processes) expose the same data source
         * and either |producer_name_filter| or |producer_name_regex_filter| is set,
         * the data source is enabled only for producers whose names match any of
         * the filters.
         * |producer_name_filter| has to be an exact match, while
         * |producer_name_regex_filter| is a regular expression.
         * This allows to enable a data source only for specific processes.
         * The "repeated" fields have OR semantics: specifying a filter ["foo",
         * "bar"] will enable data sources on both "foo" and "bar" (if they exist).
         * </pre>
         *
         * <code>repeated string producer_name_filter = 2;</code>
         * @param index The index of the element to return.
         * @return The producerNameFilter at the given index.
         */
        public java.lang.String getProducerNameFilter(int index) {
          return producerNameFilter_.get(index);
        }
        /**
         * <pre>
         * Optional. If multiple producers (~processes) expose the same data source
         * and either |producer_name_filter| or |producer_name_regex_filter| is set,
         * the data source is enabled only for producers whose names match any of
         * the filters.
         * |producer_name_filter| has to be an exact match, while
         * |producer_name_regex_filter| is a regular expression.
         * This allows to enable a data source only for specific processes.
         * The "repeated" fields have OR semantics: specifying a filter ["foo",
         * "bar"] will enable data sources on both "foo" and "bar" (if they exist).
         * </pre>
         *
         * <code>repeated string producer_name_filter = 2;</code>
         * @param index The index of the value to return.
         * @return The bytes of the producerNameFilter at the given index.
         */
        public com.google.protobuf.ByteString
            getProducerNameFilterBytes(int index) {
          return producerNameFilter_.getByteString(index);
        }
        /**
         * <pre>
         * Optional. If multiple producers (~processes) expose the same data source
         * and either |producer_name_filter| or |producer_name_regex_filter| is set,
         * the data source is enabled only for producers whose names match any of
         * the filters.
         * |producer_name_filter| has to be an exact match, while
         * |producer_name_regex_filter| is a regular expression.
         * This allows to enable a data source only for specific processes.
         * The "repeated" fields have OR semantics: specifying a filter ["foo",
         * "bar"] will enable data sources on both "foo" and "bar" (if they exist).
         * </pre>
         *
         * <code>repeated string producer_name_filter = 2;</code>
         * @param index The index to set the value at.
         * @param value The producerNameFilter to set.
         * @return This builder for chaining.
         */
        public Builder setProducerNameFilter(
            int index, java.lang.String value) {
          if (value == null) { throw new NullPointerException(); }
          ensureProducerNameFilterIsMutable();
          producerNameFilter_.set(index, value);
          onChanged();
          return this;
        }
        /**
         * <pre>
         * Optional. If multiple producers (~processes) expose the same data source
         * and either |producer_name_filter| or |producer_name_regex_filter| is set,
         * the data source is enabled only for producers whose names match any of
         * the filters.
         * |producer_name_filter| has to be an exact match, while
         * |producer_name_regex_filter| is a regular expression.
         * This allows to enable a data source only for specific processes.
         * The "repeated" fields have OR semantics: specifying a filter ["foo",
         * "bar"] will enable data sources on both "foo" and "bar" (if they exist).
         * </pre>
         *
         * <code>repeated string producer_name_filter = 2;</code>
         * @param value The producerNameFilter to add.
         * @return This builder for chaining.
         */
        public Builder addProducerNameFilter(
            java.lang.String value) {
          if (value == null) { throw new NullPointerException(); }
          ensureProducerNameFilterIsMutable();
          producerNameFilter_.add(value);
          onChanged();
          return this;
        }
        /**
         * <pre>
         * Optional. If multiple producers (~processes) expose the same data source
         * and either |producer_name_filter| or |producer_name_regex_filter| is set,
         * the data source is enabled only for producers whose names match any of
         * the filters.
         * |producer_name_filter| has to be an exact match, while
         * |producer_name_regex_filter| is a regular expression.
         * This allows to enable a data source only for specific processes.
         * The "repeated" fields have OR semantics: specifying a filter ["foo",
         * "bar"] will enable data sources on both "foo" and "bar" (if they exist).
         * </pre>
         *
         * <code>repeated string producer_name_filter = 2;</code>
         * @param values The producerNameFilter to add.
         * @return This builder for chaining.
         */
        public Builder addAllProducerNameFilter(
            java.lang.Iterable<java.lang.String> values) {
          ensureProducerNameFilterIsMutable();
          com.google.protobuf.AbstractMessageLite.Builder.addAll(
              values, producerNameFilter_);
          onChanged();
          return this;
        }
        /**
         * <pre>
         * Optional. If multiple producers (~processes) expose the same data source
         * and either |producer_name_filter| or |producer_name_regex_filter| is set,
         * the data source is enabled only for producers whose names match any of
         * the filters.
         * |producer_name_filter| has to be an exact match, while
         * |producer_name_regex_filter| is a regular expression.
         * This allows to enable a data source only for specific processes.
         * The "repeated" fields have OR semantics: specifying a filter ["foo",
         * "bar"] will enable data sources on both "foo" and "bar" (if they exist).
         * </pre>
         *
         * <code>repeated string producer_name_filter = 2;</code>
         * @return This builder for chaining.
         */
        public Builder clearProducerNameFilter() {
          producerNameFilter_ = com.google.protobuf.LazyStringArrayList.EMPTY;
          bitField0_ = (bitField0_ & ~0x00000002);
          onChanged();
          return this;
        }
        /**
         * <pre>
         * Optional. If multiple producers (~processes) expose the same data source
         * and either |producer_name_filter| or |producer_name_regex_filter| is set,
         * the data source is enabled only for producers whose names match any of
         * the filters.
         * |producer_name_filter| has to be an exact match, while
         * |producer_name_regex_filter| is a regular expression.
         * This allows to enable a data source only for specific processes.
         * The "repeated" fields have OR semantics: specifying a filter ["foo",
         * "bar"] will enable data sources on both "foo" and "bar" (if they exist).
         * </pre>
         *
         * <code>repeated string producer_name_filter = 2;</code>
         * @param value The bytes of the producerNameFilter to add.
         * @return This builder for chaining.
         */
        public Builder addProducerNameFilterBytes(
            com.google.protobuf.ByteString value) {
          if (value == null) { throw new NullPointerException(); }
          ensureProducerNameFilterIsMutable();
          producerNameFilter_.add(value);
          onChanged();
          return this;
        }

        private com.google.protobuf.LazyStringList producerNameRegexFilter_ = com.google.protobuf.LazyStringArrayList.EMPTY;
        private void ensureProducerNameRegexFilterIsMutable() {
          if (!((bitField0_ & 0x00000004) != 0)) {
            producerNameRegexFilter_ = new com.google.protobuf.LazyStringArrayList(producerNameRegexFilter_);
            bitField0_ |= 0x00000004;
           }
        }
        /**
         * <code>repeated string producer_name_regex_filter = 3;</code>
         * @return A list containing the producerNameRegexFilter.
         */
        public com.google.protobuf.ProtocolStringList
            getProducerNameRegexFilterList() {
          return producerNameRegexFilter_.getUnmodifiableView();
        }
        /**
         * <code>repeated string producer_name_regex_filter = 3;</code>
         * @return The count of producerNameRegexFilter.
         */
        public int getProducerNameRegexFilterCount() {
          return producerNameRegexFilter_.size();
        }
        /**
         * <code>repeated string producer_name_regex_filter = 3;</code>
         * @param index The index of the element to return.
         * @return The producerNameRegexFilter at the given index.
         */
        public java.lang.String getProducerNameRegexFilter(int index) {
          return producerNameRegexFilter_.get(index);
        }
        /**
         * <code>repeated string producer_name_regex_filter = 3;</code>
         * @param index The index of the value to return.
         * @return The bytes of the producerNameRegexFilter at the given index.
         */
        public com.google.protobuf.ByteString
            getProducerNameRegexFilterBytes(int index) {
          return producerNameRegexFilter_.getByteString(index);
        }
        /**
         * <code>repeated string producer_name_regex_filter = 3;</code>
         * @param index The index to set the value at.
         * @param value The producerNameRegexFilter to set.
         * @return This builder for chaining.
         */
        public Builder setProducerNameRegexFilter(
            int index, java.lang.String value) {
          if (value == null) { throw new NullPointerException(); }
          ensureProducerNameRegexFilterIsMutable();
          producerNameRegexFilter_.set(index, value);
          onChanged();
          return this;
        }
        /**
         * <code>repeated string producer_name_regex_filter = 3;</code>
         * @param value The producerNameRegexFilter to add.
         * @return This builder for chaining.
         */
        public Builder addProducerNameRegexFilter(
            java.lang.String value) {
          if (value == null) { throw new NullPointerException(); }
          ensureProducerNameRegexFilterIsMutable();
          producerNameRegexFilter_.add(value);
          onChanged();
          return this;
        }
        /**
         * <code>repeated string producer_name_regex_filter = 3;</code>
         * @param values The producerNameRegexFilter to add.
         * @return This builder for chaining.
         */
        public Builder addAllProducerNameRegexFilter(
            java.lang.Iterable<java.lang.String> values) {
          ensureProducerNameRegexFilterIsMutable();
          com.google.protobuf.AbstractMessageLite.Builder.addAll(
              values, producerNameRegexFilter_);
          onChanged();
          return this;
        }
        /**
         * <code>repeated string producer_name_regex_filter = 3;</code>
         * @return This builder for chaining.
         */
        public Builder clearProducerNameRegexFilter() {
          producerNameRegexFilter_ = com.google.protobuf.LazyStringArrayList.EMPTY;
          bitField0_ = (bitField0_ & ~0x00000004);
          onChanged();
          return this;
        }
        /**
         * <code>repeated string producer_name_regex_filter = 3;</code>
         * @param value The bytes of the producerNameRegexFilter to add.
         * @return This builder for chaining.
         */
        public Builder addProducerNameRegexFilterBytes(
            com.google.protobuf.ByteString value) {
          if (value == null) { throw new NullPointerException(); }
          ensureProducerNameRegexFilterIsMutable();
          producerNameRegexFilter_.add(value);
          onChanged();
          return this;
        }
        @java.lang.Override
        public final Builder setUnknownFields(
            final com.google.protobuf.UnknownFieldSet unknownFields) {
          return super.setUnknownFields(unknownFields);
        }

        @java.lang.Override
        public final Builder mergeUnknownFields(
            final com.google.protobuf.UnknownFieldSet unknownFields) {
          return super.mergeUnknownFields(unknownFields);
        }


        // @@protoc_insertion_point(builder_scope:perfetto.protos.TraceConfig.DataSource)
      }

      // @@protoc_insertion_point(class_scope:perfetto.protos.TraceConfig.DataSource)
      private static final perfetto.protos.TraceConfigOuterClass.TraceConfig.DataSource DEFAULT_INSTANCE;
      static {
        DEFAULT_INSTANCE = new perfetto.protos.TraceConfigOuterClass.TraceConfig.DataSource();
      }

      public static perfetto.protos.TraceConfigOuterClass.TraceConfig.DataSource getDefaultInstance() {
        return DEFAULT_INSTANCE;
      }

      @java.lang.Deprecated public static final com.google.protobuf.Parser<DataSource>
          PARSER = new com.google.protobuf.AbstractParser<DataSource>() {
        @java.lang.Override
        public DataSource parsePartialFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws com.google.protobuf.InvalidProtocolBufferException {
          Builder builder = newBuilder();
          try {
            builder.mergeFrom(input, extensionRegistry);
          } catch (com.google.protobuf.InvalidProtocolBufferException e) {
            throw e.setUnfinishedMessage(builder.buildPartial());
          } catch (com.google.protobuf.UninitializedMessageException e) {
            throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
          } catch (java.io.IOException e) {
            throw new com.google.protobuf.InvalidProtocolBufferException(e)
                .setUnfinishedMessage(builder.buildPartial());
          }
          return builder.buildPartial();
        }
      };

      public static com.google.protobuf.Parser<DataSource> parser() {
        return PARSER;
      }

      @java.lang.Override
      public com.google.protobuf.Parser<DataSource> getParserForType() {
        return PARSER;
      }

      @java.lang.Override
      public perfetto.protos.TraceConfigOuterClass.TraceConfig.DataSource getDefaultInstanceForType() {
        return DEFAULT_INSTANCE;
      }

    }

    public interface BuiltinDataSourceOrBuilder extends
        // @@protoc_insertion_point(interface_extends:perfetto.protos.TraceConfig.BuiltinDataSource)
        com.google.protobuf.MessageOrBuilder {

      /**
       * <pre>
       * Disable emitting clock timestamps into the trace.
       * </pre>
       *
       * <code>optional bool disable_clock_snapshotting = 1;</code>
       * @return Whether the disableClockSnapshotting field is set.
       */
      boolean hasDisableClockSnapshotting();
      /**
       * <pre>
       * Disable emitting clock timestamps into the trace.
       * </pre>
       *
       * <code>optional bool disable_clock_snapshotting = 1;</code>
       * @return The disableClockSnapshotting.
       */
      boolean getDisableClockSnapshotting();

      /**
       * <pre>
       * Disable echoing the original trace config in the trace.
       * </pre>
       *
       * <code>optional bool disable_trace_config = 2;</code>
       * @return Whether the disableTraceConfig field is set.
       */
      boolean hasDisableTraceConfig();
      /**
       * <pre>
       * Disable echoing the original trace config in the trace.
       * </pre>
       *
       * <code>optional bool disable_trace_config = 2;</code>
       * @return The disableTraceConfig.
       */
      boolean getDisableTraceConfig();

      /**
       * <pre>
       * Disable emitting system info (build fingerprint, cpuinfo, etc).
       * </pre>
       *
       * <code>optional bool disable_system_info = 3;</code>
       * @return Whether the disableSystemInfo field is set.
       */
      boolean hasDisableSystemInfo();
      /**
       * <pre>
       * Disable emitting system info (build fingerprint, cpuinfo, etc).
       * </pre>
       *
       * <code>optional bool disable_system_info = 3;</code>
       * @return The disableSystemInfo.
       */
      boolean getDisableSystemInfo();

      /**
       * <pre>
       * Disable emitting events for data-source state changes (e.g. the marker
       * for all data sources having ACKed the start of the trace).
       * </pre>
       *
       * <code>optional bool disable_service_events = 4;</code>
       * @return Whether the disableServiceEvents field is set.
       */
      boolean hasDisableServiceEvents();
      /**
       * <pre>
       * Disable emitting events for data-source state changes (e.g. the marker
       * for all data sources having ACKed the start of the trace).
       * </pre>
       *
       * <code>optional bool disable_service_events = 4;</code>
       * @return The disableServiceEvents.
       */
      boolean getDisableServiceEvents();

      /**
       * <pre>
       * The authoritative clock domain for the trace. Defaults to BOOTTIME. See
       * also ClockSnapshot's primary_trace_clock. The configured value is written
       * into the trace as part of the ClockSnapshots emitted by the service.
       * Trace processor will attempt to translate packet/event timestamps from
       * various data sources (and their chosen clock domains) to this domain
       * during import. Added in Android R.
       * </pre>
       *
       * <code>optional .perfetto.protos.BuiltinClock primary_trace_clock = 5;</code>
       * @return Whether the primaryTraceClock field is set.
       */
      boolean hasPrimaryTraceClock();
      /**
       * <pre>
       * The authoritative clock domain for the trace. Defaults to BOOTTIME. See
       * also ClockSnapshot's primary_trace_clock. The configured value is written
       * into the trace as part of the ClockSnapshots emitted by the service.
       * Trace processor will attempt to translate packet/event timestamps from
       * various data sources (and their chosen clock domains) to this domain
       * during import. Added in Android R.
       * </pre>
       *
       * <code>optional .perfetto.protos.BuiltinClock primary_trace_clock = 5;</code>
       * @return The primaryTraceClock.
       */
      perfetto.protos.BuiltinClockOuterClass.BuiltinClock getPrimaryTraceClock();

      /**
       * <pre>
       * Time interval in between snapshotting of sync markers, clock snapshots,
       * stats, and other periodic service-emitted events. Note that the service
       * only keeps track of the first and the most recent snapshot until
       * ReadBuffers() is called.
       * </pre>
       *
       * <code>optional uint32 snapshot_interval_ms = 6;</code>
       * @return Whether the snapshotIntervalMs field is set.
       */
      boolean hasSnapshotIntervalMs();
      /**
       * <pre>
       * Time interval in between snapshotting of sync markers, clock snapshots,
       * stats, and other periodic service-emitted events. Note that the service
       * only keeps track of the first and the most recent snapshot until
       * ReadBuffers() is called.
       * </pre>
       *
       * <code>optional uint32 snapshot_interval_ms = 6;</code>
       * @return The snapshotIntervalMs.
       */
      int getSnapshotIntervalMs();

      /**
       * <pre>
       * Hints to the service that a suspend-aware (i.e. counting time in suspend)
       * clock should be used for periodic snapshots of service-emitted events.
       * This means, if a snapshot *should* have happened during suspend, it will
       * happen immediately after the device resumes.
       * Choosing a clock like this is done on best-effort basis; not all
       * platforms (e.g. Windows) expose a clock which can be used for periodic
       * tasks counting suspend. If such a clock is not available, the service
       * falls back to the best-available alternative.
       * Introduced in Android S.
       * TODO(lalitm): deprecate this in T and make this the default if nothing
       * crashes in S.
       * </pre>
       *
       * <code>optional bool prefer_suspend_clock_for_snapshot = 7;</code>
       * @return Whether the preferSuspendClockForSnapshot field is set.
       */
      boolean hasPreferSuspendClockForSnapshot();
      /**
       * <pre>
       * Hints to the service that a suspend-aware (i.e. counting time in suspend)
       * clock should be used for periodic snapshots of service-emitted events.
       * This means, if a snapshot *should* have happened during suspend, it will
       * happen immediately after the device resumes.
       * Choosing a clock like this is done on best-effort basis; not all
       * platforms (e.g. Windows) expose a clock which can be used for periodic
       * tasks counting suspend. If such a clock is not available, the service
       * falls back to the best-available alternative.
       * Introduced in Android S.
       * TODO(lalitm): deprecate this in T and make this the default if nothing
       * crashes in S.
       * </pre>
       *
       * <code>optional bool prefer_suspend_clock_for_snapshot = 7;</code>
       * @return The preferSuspendClockForSnapshot.
       */
      boolean getPreferSuspendClockForSnapshot();
    }
    /**
     * <pre>
     * Config for disabling builtin data sources in the tracing service.
     * </pre>
     *
     * Protobuf type {@code perfetto.protos.TraceConfig.BuiltinDataSource}
     */
    public static final class BuiltinDataSource extends
        com.google.protobuf.GeneratedMessageV3 implements
        // @@protoc_insertion_point(message_implements:perfetto.protos.TraceConfig.BuiltinDataSource)
        BuiltinDataSourceOrBuilder {
    private static final long serialVersionUID = 0L;
      // Use BuiltinDataSource.newBuilder() to construct.
      private BuiltinDataSource(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
        super(builder);
      }
      private BuiltinDataSource() {
        primaryTraceClock_ = 0;
      }

      @java.lang.Override
      @SuppressWarnings({"unused"})
      protected java.lang.Object newInstance(
          UnusedPrivateParameter unused) {
        return new BuiltinDataSource();
      }

      @java.lang.Override
      public final com.google.protobuf.UnknownFieldSet
      getUnknownFields() {
        return this.unknownFields;
      }
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return perfetto.protos.TraceConfigOuterClass.internal_static_perfetto_protos_TraceConfig_BuiltinDataSource_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return perfetto.protos.TraceConfigOuterClass.internal_static_perfetto_protos_TraceConfig_BuiltinDataSource_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                perfetto.protos.TraceConfigOuterClass.TraceConfig.BuiltinDataSource.class, perfetto.protos.TraceConfigOuterClass.TraceConfig.BuiltinDataSource.Builder.class);
      }

      private int bitField0_;
      public static final int DISABLE_CLOCK_SNAPSHOTTING_FIELD_NUMBER = 1;
      private boolean disableClockSnapshotting_ = false;
      /**
       * <pre>
       * Disable emitting clock timestamps into the trace.
       * </pre>
       *
       * <code>optional bool disable_clock_snapshotting = 1;</code>
       * @return Whether the disableClockSnapshotting field is set.
       */
      @java.lang.Override
      public boolean hasDisableClockSnapshotting() {
        return ((bitField0_ & 0x00000001) != 0);
      }
      /**
       * <pre>
       * Disable emitting clock timestamps into the trace.
       * </pre>
       *
       * <code>optional bool disable_clock_snapshotting = 1;</code>
       * @return The disableClockSnapshotting.
       */
      @java.lang.Override
      public boolean getDisableClockSnapshotting() {
        return disableClockSnapshotting_;
      }

      public static final int DISABLE_TRACE_CONFIG_FIELD_NUMBER = 2;
      private boolean disableTraceConfig_ = false;
      /**
       * <pre>
       * Disable echoing the original trace config in the trace.
       * </pre>
       *
       * <code>optional bool disable_trace_config = 2;</code>
       * @return Whether the disableTraceConfig field is set.
       */
      @java.lang.Override
      public boolean hasDisableTraceConfig() {
        return ((bitField0_ & 0x00000002) != 0);
      }
      /**
       * <pre>
       * Disable echoing the original trace config in the trace.
       * </pre>
       *
       * <code>optional bool disable_trace_config = 2;</code>
       * @return The disableTraceConfig.
       */
      @java.lang.Override
      public boolean getDisableTraceConfig() {
        return disableTraceConfig_;
      }

      public static final int DISABLE_SYSTEM_INFO_FIELD_NUMBER = 3;
      private boolean disableSystemInfo_ = false;
      /**
       * <pre>
       * Disable emitting system info (build fingerprint, cpuinfo, etc).
       * </pre>
       *
       * <code>optional bool disable_system_info = 3;</code>
       * @return Whether the disableSystemInfo field is set.
       */
      @java.lang.Override
      public boolean hasDisableSystemInfo() {
        return ((bitField0_ & 0x00000004) != 0);
      }
      /**
       * <pre>
       * Disable emitting system info (build fingerprint, cpuinfo, etc).
       * </pre>
       *
       * <code>optional bool disable_system_info = 3;</code>
       * @return The disableSystemInfo.
       */
      @java.lang.Override
      public boolean getDisableSystemInfo() {
        return disableSystemInfo_;
      }

      public static final int DISABLE_SERVICE_EVENTS_FIELD_NUMBER = 4;
      private boolean disableServiceEvents_ = false;
      /**
       * <pre>
       * Disable emitting events for data-source state changes (e.g. the marker
       * for all data sources having ACKed the start of the trace).
       * </pre>
       *
       * <code>optional bool disable_service_events = 4;</code>
       * @return Whether the disableServiceEvents field is set.
       */
      @java.lang.Override
      public boolean hasDisableServiceEvents() {
        return ((bitField0_ & 0x00000008) != 0);
      }
      /**
       * <pre>
       * Disable emitting events for data-source state changes (e.g. the marker
       * for all data sources having ACKed the start of the trace).
       * </pre>
       *
       * <code>optional bool disable_service_events = 4;</code>
       * @return The disableServiceEvents.
       */
      @java.lang.Override
      public boolean getDisableServiceEvents() {
        return disableServiceEvents_;
      }

      public static final int PRIMARY_TRACE_CLOCK_FIELD_NUMBER = 5;
      private int primaryTraceClock_ = 0;
      /**
       * <pre>
       * The authoritative clock domain for the trace. Defaults to BOOTTIME. See
       * also ClockSnapshot's primary_trace_clock. The configured value is written
       * into the trace as part of the ClockSnapshots emitted by the service.
       * Trace processor will attempt to translate packet/event timestamps from
       * various data sources (and their chosen clock domains) to this domain
       * during import. Added in Android R.
       * </pre>
       *
       * <code>optional .perfetto.protos.BuiltinClock primary_trace_clock = 5;</code>
       * @return Whether the primaryTraceClock field is set.
       */
      @java.lang.Override public boolean hasPrimaryTraceClock() {
        return ((bitField0_ & 0x00000010) != 0);
      }
      /**
       * <pre>
       * The authoritative clock domain for the trace. Defaults to BOOTTIME. See
       * also ClockSnapshot's primary_trace_clock. The configured value is written
       * into the trace as part of the ClockSnapshots emitted by the service.
       * Trace processor will attempt to translate packet/event timestamps from
       * various data sources (and their chosen clock domains) to this domain
       * during import. Added in Android R.
       * </pre>
       *
       * <code>optional .perfetto.protos.BuiltinClock primary_trace_clock = 5;</code>
       * @return The primaryTraceClock.
       */
      @java.lang.Override public perfetto.protos.BuiltinClockOuterClass.BuiltinClock getPrimaryTraceClock() {
        perfetto.protos.BuiltinClockOuterClass.BuiltinClock result = perfetto.protos.BuiltinClockOuterClass.BuiltinClock.forNumber(primaryTraceClock_);
        return result == null ? perfetto.protos.BuiltinClockOuterClass.BuiltinClock.BUILTIN_CLOCK_UNKNOWN : result;
      }

      public static final int SNAPSHOT_INTERVAL_MS_FIELD_NUMBER = 6;
      private int snapshotIntervalMs_ = 0;
      /**
       * <pre>
       * Time interval in between snapshotting of sync markers, clock snapshots,
       * stats, and other periodic service-emitted events. Note that the service
       * only keeps track of the first and the most recent snapshot until
       * ReadBuffers() is called.
       * </pre>
       *
       * <code>optional uint32 snapshot_interval_ms = 6;</code>
       * @return Whether the snapshotIntervalMs field is set.
       */
      @java.lang.Override
      public boolean hasSnapshotIntervalMs() {
        return ((bitField0_ & 0x00000020) != 0);
      }
      /**
       * <pre>
       * Time interval in between snapshotting of sync markers, clock snapshots,
       * stats, and other periodic service-emitted events. Note that the service
       * only keeps track of the first and the most recent snapshot until
       * ReadBuffers() is called.
       * </pre>
       *
       * <code>optional uint32 snapshot_interval_ms = 6;</code>
       * @return The snapshotIntervalMs.
       */
      @java.lang.Override
      public int getSnapshotIntervalMs() {
        return snapshotIntervalMs_;
      }

      public static final int PREFER_SUSPEND_CLOCK_FOR_SNAPSHOT_FIELD_NUMBER = 7;
      private boolean preferSuspendClockForSnapshot_ = false;
      /**
       * <pre>
       * Hints to the service that a suspend-aware (i.e. counting time in suspend)
       * clock should be used for periodic snapshots of service-emitted events.
       * This means, if a snapshot *should* have happened during suspend, it will
       * happen immediately after the device resumes.
       * Choosing a clock like this is done on best-effort basis; not all
       * platforms (e.g. Windows) expose a clock which can be used for periodic
       * tasks counting suspend. If such a clock is not available, the service
       * falls back to the best-available alternative.
       * Introduced in Android S.
       * TODO(lalitm): deprecate this in T and make this the default if nothing
       * crashes in S.
       * </pre>
       *
       * <code>optional bool prefer_suspend_clock_for_snapshot = 7;</code>
       * @return Whether the preferSuspendClockForSnapshot field is set.
       */
      @java.lang.Override
      public boolean hasPreferSuspendClockForSnapshot() {
        return ((bitField0_ & 0x00000040) != 0);
      }
      /**
       * <pre>
       * Hints to the service that a suspend-aware (i.e. counting time in suspend)
       * clock should be used for periodic snapshots of service-emitted events.
       * This means, if a snapshot *should* have happened during suspend, it will
       * happen immediately after the device resumes.
       * Choosing a clock like this is done on best-effort basis; not all
       * platforms (e.g. Windows) expose a clock which can be used for periodic
       * tasks counting suspend. If such a clock is not available, the service
       * falls back to the best-available alternative.
       * Introduced in Android S.
       * TODO(lalitm): deprecate this in T and make this the default if nothing
       * crashes in S.
       * </pre>
       *
       * <code>optional bool prefer_suspend_clock_for_snapshot = 7;</code>
       * @return The preferSuspendClockForSnapshot.
       */
      @java.lang.Override
      public boolean getPreferSuspendClockForSnapshot() {
        return preferSuspendClockForSnapshot_;
      }

      private byte memoizedIsInitialized = -1;
      @java.lang.Override
      public final boolean isInitialized() {
        byte isInitialized = memoizedIsInitialized;
        if (isInitialized == 1) return true;
        if (isInitialized == 0) return false;

        memoizedIsInitialized = 1;
        return true;
      }

      @java.lang.Override
      public void writeTo(com.google.protobuf.CodedOutputStream output)
                          throws java.io.IOException {
        if (((bitField0_ & 0x00000001) != 0)) {
          output.writeBool(1, disableClockSnapshotting_);
        }
        if (((bitField0_ & 0x00000002) != 0)) {
          output.writeBool(2, disableTraceConfig_);
        }
        if (((bitField0_ & 0x00000004) != 0)) {
          output.writeBool(3, disableSystemInfo_);
        }
        if (((bitField0_ & 0x00000008) != 0)) {
          output.writeBool(4, disableServiceEvents_);
        }
        if (((bitField0_ & 0x00000010) != 0)) {
          output.writeEnum(5, primaryTraceClock_);
        }
        if (((bitField0_ & 0x00000020) != 0)) {
          output.writeUInt32(6, snapshotIntervalMs_);
        }
        if (((bitField0_ & 0x00000040) != 0)) {
          output.writeBool(7, preferSuspendClockForSnapshot_);
        }
        getUnknownFields().writeTo(output);
      }

      @java.lang.Override
      public int getSerializedSize() {
        int size = memoizedSize;
        if (size != -1) return size;

        size = 0;
        if (((bitField0_ & 0x00000001) != 0)) {
          size += com.google.protobuf.CodedOutputStream
            .computeBoolSize(1, disableClockSnapshotting_);
        }
        if (((bitField0_ & 0x00000002) != 0)) {
          size += com.google.protobuf.CodedOutputStream
            .computeBoolSize(2, disableTraceConfig_);
        }
        if (((bitField0_ & 0x00000004) != 0)) {
          size += com.google.protobuf.CodedOutputStream
            .computeBoolSize(3, disableSystemInfo_);
        }
        if (((bitField0_ & 0x00000008) != 0)) {
          size += com.google.protobuf.CodedOutputStream
            .computeBoolSize(4, disableServiceEvents_);
        }
        if (((bitField0_ & 0x00000010) != 0)) {
          size += com.google.protobuf.CodedOutputStream
            .computeEnumSize(5, primaryTraceClock_);
        }
        if (((bitField0_ & 0x00000020) != 0)) {
          size += com.google.protobuf.CodedOutputStream
            .computeUInt32Size(6, snapshotIntervalMs_);
        }
        if (((bitField0_ & 0x00000040) != 0)) {
          size += com.google.protobuf.CodedOutputStream
            .computeBoolSize(7, preferSuspendClockForSnapshot_);
        }
        size += getUnknownFields().getSerializedSize();
        memoizedSize = size;
        return size;
      }

      @java.lang.Override
      public boolean equals(final java.lang.Object obj) {
        if (obj == this) {
         return true;
        }
        if (!(obj instanceof perfetto.protos.TraceConfigOuterClass.TraceConfig.BuiltinDataSource)) {
          return super.equals(obj);
        }
        perfetto.protos.TraceConfigOuterClass.TraceConfig.BuiltinDataSource other = (perfetto.protos.TraceConfigOuterClass.TraceConfig.BuiltinDataSource) obj;

        if (hasDisableClockSnapshotting() != other.hasDisableClockSnapshotting()) return false;
        if (hasDisableClockSnapshotting()) {
          if (getDisableClockSnapshotting()
              != other.getDisableClockSnapshotting()) return false;
        }
        if (hasDisableTraceConfig() != other.hasDisableTraceConfig()) return false;
        if (hasDisableTraceConfig()) {
          if (getDisableTraceConfig()
              != other.getDisableTraceConfig()) return false;
        }
        if (hasDisableSystemInfo() != other.hasDisableSystemInfo()) return false;
        if (hasDisableSystemInfo()) {
          if (getDisableSystemInfo()
              != other.getDisableSystemInfo()) return false;
        }
        if (hasDisableServiceEvents() != other.hasDisableServiceEvents()) return false;
        if (hasDisableServiceEvents()) {
          if (getDisableServiceEvents()
              != other.getDisableServiceEvents()) return false;
        }
        if (hasPrimaryTraceClock() != other.hasPrimaryTraceClock()) return false;
        if (hasPrimaryTraceClock()) {
          if (primaryTraceClock_ != other.primaryTraceClock_) return false;
        }
        if (hasSnapshotIntervalMs() != other.hasSnapshotIntervalMs()) return false;
        if (hasSnapshotIntervalMs()) {
          if (getSnapshotIntervalMs()
              != other.getSnapshotIntervalMs()) return false;
        }
        if (hasPreferSuspendClockForSnapshot() != other.hasPreferSuspendClockForSnapshot()) return false;
        if (hasPreferSuspendClockForSnapshot()) {
          if (getPreferSuspendClockForSnapshot()
              != other.getPreferSuspendClockForSnapshot()) return false;
        }
        if (!getUnknownFields().equals(other.getUnknownFields())) return false;
        return true;
      }

      @java.lang.Override
      public int hashCode() {
        if (memoizedHashCode != 0) {
          return memoizedHashCode;
        }
        int hash = 41;
        hash = (19 * hash) + getDescriptor().hashCode();
        if (hasDisableClockSnapshotting()) {
          hash = (37 * hash) + DISABLE_CLOCK_SNAPSHOTTING_FIELD_NUMBER;
          hash = (53 * hash) + com.google.protobuf.Internal.hashBoolean(
              getDisableClockSnapshotting());
        }
        if (hasDisableTraceConfig()) {
          hash = (37 * hash) + DISABLE_TRACE_CONFIG_FIELD_NUMBER;
          hash = (53 * hash) + com.google.protobuf.Internal.hashBoolean(
              getDisableTraceConfig());
        }
        if (hasDisableSystemInfo()) {
          hash = (37 * hash) + DISABLE_SYSTEM_INFO_FIELD_NUMBER;
          hash = (53 * hash) + com.google.protobuf.Internal.hashBoolean(
              getDisableSystemInfo());
        }
        if (hasDisableServiceEvents()) {
          hash = (37 * hash) + DISABLE_SERVICE_EVENTS_FIELD_NUMBER;
          hash = (53 * hash) + com.google.protobuf.Internal.hashBoolean(
              getDisableServiceEvents());
        }
        if (hasPrimaryTraceClock()) {
          hash = (37 * hash) + PRIMARY_TRACE_CLOCK_FIELD_NUMBER;
          hash = (53 * hash) + primaryTraceClock_;
        }
        if (hasSnapshotIntervalMs()) {
          hash = (37 * hash) + SNAPSHOT_INTERVAL_MS_FIELD_NUMBER;
          hash = (53 * hash) + getSnapshotIntervalMs();
        }
        if (hasPreferSuspendClockForSnapshot()) {
          hash = (37 * hash) + PREFER_SUSPEND_CLOCK_FOR_SNAPSHOT_FIELD_NUMBER;
          hash = (53 * hash) + com.google.protobuf.Internal.hashBoolean(
              getPreferSuspendClockForSnapshot());
        }
        hash = (29 * hash) + getUnknownFields().hashCode();
        memoizedHashCode = hash;
        return hash;
      }

      public static perfetto.protos.TraceConfigOuterClass.TraceConfig.BuiltinDataSource parseFrom(
          java.nio.ByteBuffer data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static perfetto.protos.TraceConfigOuterClass.TraceConfig.BuiltinDataSource parseFrom(
          java.nio.ByteBuffer data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static perfetto.protos.TraceConfigOuterClass.TraceConfig.BuiltinDataSource parseFrom(
          com.google.protobuf.ByteString data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static perfetto.protos.TraceConfigOuterClass.TraceConfig.BuiltinDataSource parseFrom(
          com.google.protobuf.ByteString data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static perfetto.protos.TraceConfigOuterClass.TraceConfig.BuiltinDataSource parseFrom(byte[] data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static perfetto.protos.TraceConfigOuterClass.TraceConfig.BuiltinDataSource parseFrom(
          byte[] data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static perfetto.protos.TraceConfigOuterClass.TraceConfig.BuiltinDataSource parseFrom(java.io.InputStream input)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseWithIOException(PARSER, input);
      }
      public static perfetto.protos.TraceConfigOuterClass.TraceConfig.BuiltinDataSource parseFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseWithIOException(PARSER, input, extensionRegistry);
      }
      public static perfetto.protos.TraceConfigOuterClass.TraceConfig.BuiltinDataSource parseDelimitedFrom(java.io.InputStream input)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseDelimitedWithIOException(PARSER, input);
      }
      public static perfetto.protos.TraceConfigOuterClass.TraceConfig.BuiltinDataSource parseDelimitedFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
      }
      public static perfetto.protos.TraceConfigOuterClass.TraceConfig.BuiltinDataSource parseFrom(
          com.google.protobuf.CodedInputStream input)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseWithIOException(PARSER, input);
      }
      public static perfetto.protos.TraceConfigOuterClass.TraceConfig.BuiltinDataSource parseFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseWithIOException(PARSER, input, extensionRegistry);
      }

      @java.lang.Override
      public Builder newBuilderForType() { return newBuilder(); }
      public static Builder newBuilder() {
        return DEFAULT_INSTANCE.toBuilder();
      }
      public static Builder newBuilder(perfetto.protos.TraceConfigOuterClass.TraceConfig.BuiltinDataSource prototype) {
        return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
      }
      @java.lang.Override
      public Builder toBuilder() {
        return this == DEFAULT_INSTANCE
            ? new Builder() : new Builder().mergeFrom(this);
      }

      @java.lang.Override
      protected Builder newBuilderForType(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        Builder builder = new Builder(parent);
        return builder;
      }
      /**
       * <pre>
       * Config for disabling builtin data sources in the tracing service.
       * </pre>
       *
       * Protobuf type {@code perfetto.protos.TraceConfig.BuiltinDataSource}
       */
      public static final class Builder extends
          com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
          // @@protoc_insertion_point(builder_implements:perfetto.protos.TraceConfig.BuiltinDataSource)
          perfetto.protos.TraceConfigOuterClass.TraceConfig.BuiltinDataSourceOrBuilder {
        public static final com.google.protobuf.Descriptors.Descriptor
            getDescriptor() {
          return perfetto.protos.TraceConfigOuterClass.internal_static_perfetto_protos_TraceConfig_BuiltinDataSource_descriptor;
        }

        @java.lang.Override
        protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
            internalGetFieldAccessorTable() {
          return perfetto.protos.TraceConfigOuterClass.internal_static_perfetto_protos_TraceConfig_BuiltinDataSource_fieldAccessorTable
              .ensureFieldAccessorsInitialized(
                  perfetto.protos.TraceConfigOuterClass.TraceConfig.BuiltinDataSource.class, perfetto.protos.TraceConfigOuterClass.TraceConfig.BuiltinDataSource.Builder.class);
        }

        // Construct using perfetto.protos.TraceConfigOuterClass.TraceConfig.BuiltinDataSource.newBuilder()
        private Builder() {

        }

        private Builder(
            com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
          super(parent);

        }
        @java.lang.Override
        public Builder clear() {
          super.clear();
          bitField0_ = 0;
          disableClockSnapshotting_ = false;
          disableTraceConfig_ = false;
          disableSystemInfo_ = false;
          disableServiceEvents_ = false;
          primaryTraceClock_ = 0;
          snapshotIntervalMs_ = 0;
          preferSuspendClockForSnapshot_ = false;
          return this;
        }

        @java.lang.Override
        public com.google.protobuf.Descriptors.Descriptor
            getDescriptorForType() {
          return perfetto.protos.TraceConfigOuterClass.internal_static_perfetto_protos_TraceConfig_BuiltinDataSource_descriptor;
        }

        @java.lang.Override
        public perfetto.protos.TraceConfigOuterClass.TraceConfig.BuiltinDataSource getDefaultInstanceForType() {
          return perfetto.protos.TraceConfigOuterClass.TraceConfig.BuiltinDataSource.getDefaultInstance();
        }

        @java.lang.Override
        public perfetto.protos.TraceConfigOuterClass.TraceConfig.BuiltinDataSource build() {
          perfetto.protos.TraceConfigOuterClass.TraceConfig.BuiltinDataSource result = buildPartial();
          if (!result.isInitialized()) {
            throw newUninitializedMessageException(result);
          }
          return result;
        }

        @java.lang.Override
        public perfetto.protos.TraceConfigOuterClass.TraceConfig.BuiltinDataSource buildPartial() {
          perfetto.protos.TraceConfigOuterClass.TraceConfig.BuiltinDataSource result = new perfetto.protos.TraceConfigOuterClass.TraceConfig.BuiltinDataSource(this);
          if (bitField0_ != 0) { buildPartial0(result); }
          onBuilt();
          return result;
        }

        private void buildPartial0(perfetto.protos.TraceConfigOuterClass.TraceConfig.BuiltinDataSource result) {
          int from_bitField0_ = bitField0_;
          int to_bitField0_ = 0;
          if (((from_bitField0_ & 0x00000001) != 0)) {
            result.disableClockSnapshotting_ = disableClockSnapshotting_;
            to_bitField0_ |= 0x00000001;
          }
          if (((from_bitField0_ & 0x00000002) != 0)) {
            result.disableTraceConfig_ = disableTraceConfig_;
            to_bitField0_ |= 0x00000002;
          }
          if (((from_bitField0_ & 0x00000004) != 0)) {
            result.disableSystemInfo_ = disableSystemInfo_;
            to_bitField0_ |= 0x00000004;
          }
          if (((from_bitField0_ & 0x00000008) != 0)) {
            result.disableServiceEvents_ = disableServiceEvents_;
            to_bitField0_ |= 0x00000008;
          }
          if (((from_bitField0_ & 0x00000010) != 0)) {
            result.primaryTraceClock_ = primaryTraceClock_;
            to_bitField0_ |= 0x00000010;
          }
          if (((from_bitField0_ & 0x00000020) != 0)) {
            result.snapshotIntervalMs_ = snapshotIntervalMs_;
            to_bitField0_ |= 0x00000020;
          }
          if (((from_bitField0_ & 0x00000040) != 0)) {
            result.preferSuspendClockForSnapshot_ = preferSuspendClockForSnapshot_;
            to_bitField0_ |= 0x00000040;
          }
          result.bitField0_ |= to_bitField0_;
        }

        @java.lang.Override
        public Builder clone() {
          return super.clone();
        }
        @java.lang.Override
        public Builder setField(
            com.google.protobuf.Descriptors.FieldDescriptor field,
            java.lang.Object value) {
          return super.setField(field, value);
        }
        @java.lang.Override
        public Builder clearField(
            com.google.protobuf.Descriptors.FieldDescriptor field) {
          return super.clearField(field);
        }
        @java.lang.Override
        public Builder clearOneof(
            com.google.protobuf.Descriptors.OneofDescriptor oneof) {
          return super.clearOneof(oneof);
        }
        @java.lang.Override
        public Builder setRepeatedField(
            com.google.protobuf.Descriptors.FieldDescriptor field,
            int index, java.lang.Object value) {
          return super.setRepeatedField(field, index, value);
        }
        @java.lang.Override
        public Builder addRepeatedField(
            com.google.protobuf.Descriptors.FieldDescriptor field,
            java.lang.Object value) {
          return super.addRepeatedField(field, value);
        }
        @java.lang.Override
        public Builder mergeFrom(com.google.protobuf.Message other) {
          if (other instanceof perfetto.protos.TraceConfigOuterClass.TraceConfig.BuiltinDataSource) {
            return mergeFrom((perfetto.protos.TraceConfigOuterClass.TraceConfig.BuiltinDataSource)other);
          } else {
            super.mergeFrom(other);
            return this;
          }
        }

        public Builder mergeFrom(perfetto.protos.TraceConfigOuterClass.TraceConfig.BuiltinDataSource other) {
          if (other == perfetto.protos.TraceConfigOuterClass.TraceConfig.BuiltinDataSource.getDefaultInstance()) return this;
          if (other.hasDisableClockSnapshotting()) {
            setDisableClockSnapshotting(other.getDisableClockSnapshotting());
          }
          if (other.hasDisableTraceConfig()) {
            setDisableTraceConfig(other.getDisableTraceConfig());
          }
          if (other.hasDisableSystemInfo()) {
            setDisableSystemInfo(other.getDisableSystemInfo());
          }
          if (other.hasDisableServiceEvents()) {
            setDisableServiceEvents(other.getDisableServiceEvents());
          }
          if (other.hasPrimaryTraceClock()) {
            setPrimaryTraceClock(other.getPrimaryTraceClock());
          }
          if (other.hasSnapshotIntervalMs()) {
            setSnapshotIntervalMs(other.getSnapshotIntervalMs());
          }
          if (other.hasPreferSuspendClockForSnapshot()) {
            setPreferSuspendClockForSnapshot(other.getPreferSuspendClockForSnapshot());
          }
          this.mergeUnknownFields(other.getUnknownFields());
          onChanged();
          return this;
        }

        @java.lang.Override
        public final boolean isInitialized() {
          return true;
        }

        @java.lang.Override
        public Builder mergeFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws java.io.IOException {
          if (extensionRegistry == null) {
            throw new java.lang.NullPointerException();
          }
          try {
            boolean done = false;
            while (!done) {
              int tag = input.readTag();
              switch (tag) {
                case 0:
                  done = true;
                  break;
                case 8: {
                  disableClockSnapshotting_ = input.readBool();
                  bitField0_ |= 0x00000001;
                  break;
                } // case 8
                case 16: {
                  disableTraceConfig_ = input.readBool();
                  bitField0_ |= 0x00000002;
                  break;
                } // case 16
                case 24: {
                  disableSystemInfo_ = input.readBool();
                  bitField0_ |= 0x00000004;
                  break;
                } // case 24
                case 32: {
                  disableServiceEvents_ = input.readBool();
                  bitField0_ |= 0x00000008;
                  break;
                } // case 32
                case 40: {
                  int tmpRaw = input.readEnum();
                  perfetto.protos.BuiltinClockOuterClass.BuiltinClock tmpValue =
                      perfetto.protos.BuiltinClockOuterClass.BuiltinClock.forNumber(tmpRaw);
                  if (tmpValue == null) {
                    mergeUnknownVarintField(5, tmpRaw);
                  } else {
                    primaryTraceClock_ = tmpRaw;
                    bitField0_ |= 0x00000010;
                  }
                  break;
                } // case 40
                case 48: {
                  snapshotIntervalMs_ = input.readUInt32();
                  bitField0_ |= 0x00000020;
                  break;
                } // case 48
                case 56: {
                  preferSuspendClockForSnapshot_ = input.readBool();
                  bitField0_ |= 0x00000040;
                  break;
                } // case 56
                default: {
                  if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                    done = true; // was an endgroup tag
                  }
                  break;
                } // default:
              } // switch (tag)
            } // while (!done)
          } catch (com.google.protobuf.InvalidProtocolBufferException e) {
            throw e.unwrapIOException();
          } finally {
            onChanged();
          } // finally
          return this;
        }
        private int bitField0_;

        private boolean disableClockSnapshotting_ ;
        /**
         * <pre>
         * Disable emitting clock timestamps into the trace.
         * </pre>
         *
         * <code>optional bool disable_clock_snapshotting = 1;</code>
         * @return Whether the disableClockSnapshotting field is set.
         */
        @java.lang.Override
        public boolean hasDisableClockSnapshotting() {
          return ((bitField0_ & 0x00000001) != 0);
        }
        /**
         * <pre>
         * Disable emitting clock timestamps into the trace.
         * </pre>
         *
         * <code>optional bool disable_clock_snapshotting = 1;</code>
         * @return The disableClockSnapshotting.
         */
        @java.lang.Override
        public boolean getDisableClockSnapshotting() {
          return disableClockSnapshotting_;
        }
        /**
         * <pre>
         * Disable emitting clock timestamps into the trace.
         * </pre>
         *
         * <code>optional bool disable_clock_snapshotting = 1;</code>
         * @param value The disableClockSnapshotting to set.
         * @return This builder for chaining.
         */
        public Builder setDisableClockSnapshotting(boolean value) {
          
          disableClockSnapshotting_ = value;
          bitField0_ |= 0x00000001;
          onChanged();
          return this;
        }
        /**
         * <pre>
         * Disable emitting clock timestamps into the trace.
         * </pre>
         *
         * <code>optional bool disable_clock_snapshotting = 1;</code>
         * @return This builder for chaining.
         */
        public Builder clearDisableClockSnapshotting() {
          bitField0_ = (bitField0_ & ~0x00000001);
          disableClockSnapshotting_ = false;
          onChanged();
          return this;
        }

        private boolean disableTraceConfig_ ;
        /**
         * <pre>
         * Disable echoing the original trace config in the trace.
         * </pre>
         *
         * <code>optional bool disable_trace_config = 2;</code>
         * @return Whether the disableTraceConfig field is set.
         */
        @java.lang.Override
        public boolean hasDisableTraceConfig() {
          return ((bitField0_ & 0x00000002) != 0);
        }
        /**
         * <pre>
         * Disable echoing the original trace config in the trace.
         * </pre>
         *
         * <code>optional bool disable_trace_config = 2;</code>
         * @return The disableTraceConfig.
         */
        @java.lang.Override
        public boolean getDisableTraceConfig() {
          return disableTraceConfig_;
        }
        /**
         * <pre>
         * Disable echoing the original trace config in the trace.
         * </pre>
         *
         * <code>optional bool disable_trace_config = 2;</code>
         * @param value The disableTraceConfig to set.
         * @return This builder for chaining.
         */
        public Builder setDisableTraceConfig(boolean value) {
          
          disableTraceConfig_ = value;
          bitField0_ |= 0x00000002;
          onChanged();
          return this;
        }
        /**
         * <pre>
         * Disable echoing the original trace config in the trace.
         * </pre>
         *
         * <code>optional bool disable_trace_config = 2;</code>
         * @return This builder for chaining.
         */
        public Builder clearDisableTraceConfig() {
          bitField0_ = (bitField0_ & ~0x00000002);
          disableTraceConfig_ = false;
          onChanged();
          return this;
        }

        private boolean disableSystemInfo_ ;
        /**
         * <pre>
         * Disable emitting system info (build fingerprint, cpuinfo, etc).
         * </pre>
         *
         * <code>optional bool disable_system_info = 3;</code>
         * @return Whether the disableSystemInfo field is set.
         */
        @java.lang.Override
        public boolean hasDisableSystemInfo() {
          return ((bitField0_ & 0x00000004) != 0);
        }
        /**
         * <pre>
         * Disable emitting system info (build fingerprint, cpuinfo, etc).
         * </pre>
         *
         * <code>optional bool disable_system_info = 3;</code>
         * @return The disableSystemInfo.
         */
        @java.lang.Override
        public boolean getDisableSystemInfo() {
          return disableSystemInfo_;
        }
        /**
         * <pre>
         * Disable emitting system info (build fingerprint, cpuinfo, etc).
         * </pre>
         *
         * <code>optional bool disable_system_info = 3;</code>
         * @param value The disableSystemInfo to set.
         * @return This builder for chaining.
         */
        public Builder setDisableSystemInfo(boolean value) {
          
          disableSystemInfo_ = value;
          bitField0_ |= 0x00000004;
          onChanged();
          return this;
        }
        /**
         * <pre>
         * Disable emitting system info (build fingerprint, cpuinfo, etc).
         * </pre>
         *
         * <code>optional bool disable_system_info = 3;</code>
         * @return This builder for chaining.
         */
        public Builder clearDisableSystemInfo() {
          bitField0_ = (bitField0_ & ~0x00000004);
          disableSystemInfo_ = false;
          onChanged();
          return this;
        }

        private boolean disableServiceEvents_ ;
        /**
         * <pre>
         * Disable emitting events for data-source state changes (e.g. the marker
         * for all data sources having ACKed the start of the trace).
         * </pre>
         *
         * <code>optional bool disable_service_events = 4;</code>
         * @return Whether the disableServiceEvents field is set.
         */
        @java.lang.Override
        public boolean hasDisableServiceEvents() {
          return ((bitField0_ & 0x00000008) != 0);
        }
        /**
         * <pre>
         * Disable emitting events for data-source state changes (e.g. the marker
         * for all data sources having ACKed the start of the trace).
         * </pre>
         *
         * <code>optional bool disable_service_events = 4;</code>
         * @return The disableServiceEvents.
         */
        @java.lang.Override
        public boolean getDisableServiceEvents() {
          return disableServiceEvents_;
        }
        /**
         * <pre>
         * Disable emitting events for data-source state changes (e.g. the marker
         * for all data sources having ACKed the start of the trace).
         * </pre>
         *
         * <code>optional bool disable_service_events = 4;</code>
         * @param value The disableServiceEvents to set.
         * @return This builder for chaining.
         */
        public Builder setDisableServiceEvents(boolean value) {
          
          disableServiceEvents_ = value;
          bitField0_ |= 0x00000008;
          onChanged();
          return this;
        }
        /**
         * <pre>
         * Disable emitting events for data-source state changes (e.g. the marker
         * for all data sources having ACKed the start of the trace).
         * </pre>
         *
         * <code>optional bool disable_service_events = 4;</code>
         * @return This builder for chaining.
         */
        public Builder clearDisableServiceEvents() {
          bitField0_ = (bitField0_ & ~0x00000008);
          disableServiceEvents_ = false;
          onChanged();
          return this;
        }

        private int primaryTraceClock_ = 0;
        /**
         * <pre>
         * The authoritative clock domain for the trace. Defaults to BOOTTIME. See
         * also ClockSnapshot's primary_trace_clock. The configured value is written
         * into the trace as part of the ClockSnapshots emitted by the service.
         * Trace processor will attempt to translate packet/event timestamps from
         * various data sources (and their chosen clock domains) to this domain
         * during import. Added in Android R.
         * </pre>
         *
         * <code>optional .perfetto.protos.BuiltinClock primary_trace_clock = 5;</code>
         * @return Whether the primaryTraceClock field is set.
         */
        @java.lang.Override public boolean hasPrimaryTraceClock() {
          return ((bitField0_ & 0x00000010) != 0);
        }
        /**
         * <pre>
         * The authoritative clock domain for the trace. Defaults to BOOTTIME. See
         * also ClockSnapshot's primary_trace_clock. The configured value is written
         * into the trace as part of the ClockSnapshots emitted by the service.
         * Trace processor will attempt to translate packet/event timestamps from
         * various data sources (and their chosen clock domains) to this domain
         * during import. Added in Android R.
         * </pre>
         *
         * <code>optional .perfetto.protos.BuiltinClock primary_trace_clock = 5;</code>
         * @return The primaryTraceClock.
         */
        @java.lang.Override
        public perfetto.protos.BuiltinClockOuterClass.BuiltinClock getPrimaryTraceClock() {
          perfetto.protos.BuiltinClockOuterClass.BuiltinClock result = perfetto.protos.BuiltinClockOuterClass.BuiltinClock.forNumber(primaryTraceClock_);
          return result == null ? perfetto.protos.BuiltinClockOuterClass.BuiltinClock.BUILTIN_CLOCK_UNKNOWN : result;
        }
        /**
         * <pre>
         * The authoritative clock domain for the trace. Defaults to BOOTTIME. See
         * also ClockSnapshot's primary_trace_clock. The configured value is written
         * into the trace as part of the ClockSnapshots emitted by the service.
         * Trace processor will attempt to translate packet/event timestamps from
         * various data sources (and their chosen clock domains) to this domain
         * during import. Added in Android R.
         * </pre>
         *
         * <code>optional .perfetto.protos.BuiltinClock primary_trace_clock = 5;</code>
         * @param value The primaryTraceClock to set.
         * @return This builder for chaining.
         */
        public Builder setPrimaryTraceClock(perfetto.protos.BuiltinClockOuterClass.BuiltinClock value) {
          if (value == null) {
            throw new NullPointerException();
          }
          bitField0_ |= 0x00000010;
          primaryTraceClock_ = value.getNumber();
          onChanged();
          return this;
        }
        /**
         * <pre>
         * The authoritative clock domain for the trace. Defaults to BOOTTIME. See
         * also ClockSnapshot's primary_trace_clock. The configured value is written
         * into the trace as part of the ClockSnapshots emitted by the service.
         * Trace processor will attempt to translate packet/event timestamps from
         * various data sources (and their chosen clock domains) to this domain
         * during import. Added in Android R.
         * </pre>
         *
         * <code>optional .perfetto.protos.BuiltinClock primary_trace_clock = 5;</code>
         * @return This builder for chaining.
         */
        public Builder clearPrimaryTraceClock() {
          bitField0_ = (bitField0_ & ~0x00000010);
          primaryTraceClock_ = 0;
          onChanged();
          return this;
        }

        private int snapshotIntervalMs_ ;
        /**
         * <pre>
         * Time interval in between snapshotting of sync markers, clock snapshots,
         * stats, and other periodic service-emitted events. Note that the service
         * only keeps track of the first and the most recent snapshot until
         * ReadBuffers() is called.
         * </pre>
         *
         * <code>optional uint32 snapshot_interval_ms = 6;</code>
         * @return Whether the snapshotIntervalMs field is set.
         */
        @java.lang.Override
        public boolean hasSnapshotIntervalMs() {
          return ((bitField0_ & 0x00000020) != 0);
        }
        /**
         * <pre>
         * Time interval in between snapshotting of sync markers, clock snapshots,
         * stats, and other periodic service-emitted events. Note that the service
         * only keeps track of the first and the most recent snapshot until
         * ReadBuffers() is called.
         * </pre>
         *
         * <code>optional uint32 snapshot_interval_ms = 6;</code>
         * @return The snapshotIntervalMs.
         */
        @java.lang.Override
        public int getSnapshotIntervalMs() {
          return snapshotIntervalMs_;
        }
        /**
         * <pre>
         * Time interval in between snapshotting of sync markers, clock snapshots,
         * stats, and other periodic service-emitted events. Note that the service
         * only keeps track of the first and the most recent snapshot until
         * ReadBuffers() is called.
         * </pre>
         *
         * <code>optional uint32 snapshot_interval_ms = 6;</code>
         * @param value The snapshotIntervalMs to set.
         * @return This builder for chaining.
         */
        public Builder setSnapshotIntervalMs(int value) {
          
          snapshotIntervalMs_ = value;
          bitField0_ |= 0x00000020;
          onChanged();
          return this;
        }
        /**
         * <pre>
         * Time interval in between snapshotting of sync markers, clock snapshots,
         * stats, and other periodic service-emitted events. Note that the service
         * only keeps track of the first and the most recent snapshot until
         * ReadBuffers() is called.
         * </pre>
         *
         * <code>optional uint32 snapshot_interval_ms = 6;</code>
         * @return This builder for chaining.
         */
        public Builder clearSnapshotIntervalMs() {
          bitField0_ = (bitField0_ & ~0x00000020);
          snapshotIntervalMs_ = 0;
          onChanged();
          return this;
        }

        private boolean preferSuspendClockForSnapshot_ ;
        /**
         * <pre>
         * Hints to the service that a suspend-aware (i.e. counting time in suspend)
         * clock should be used for periodic snapshots of service-emitted events.
         * This means, if a snapshot *should* have happened during suspend, it will
         * happen immediately after the device resumes.
         * Choosing a clock like this is done on best-effort basis; not all
         * platforms (e.g. Windows) expose a clock which can be used for periodic
         * tasks counting suspend. If such a clock is not available, the service
         * falls back to the best-available alternative.
         * Introduced in Android S.
         * TODO(lalitm): deprecate this in T and make this the default if nothing
         * crashes in S.
         * </pre>
         *
         * <code>optional bool prefer_suspend_clock_for_snapshot = 7;</code>
         * @return Whether the preferSuspendClockForSnapshot field is set.
         */
        @java.lang.Override
        public boolean hasPreferSuspendClockForSnapshot() {
          return ((bitField0_ & 0x00000040) != 0);
        }
        /**
         * <pre>
         * Hints to the service that a suspend-aware (i.e. counting time in suspend)
         * clock should be used for periodic snapshots of service-emitted events.
         * This means, if a snapshot *should* have happened during suspend, it will
         * happen immediately after the device resumes.
         * Choosing a clock like this is done on best-effort basis; not all
         * platforms (e.g. Windows) expose a clock which can be used for periodic
         * tasks counting suspend. If such a clock is not available, the service
         * falls back to the best-available alternative.
         * Introduced in Android S.
         * TODO(lalitm): deprecate this in T and make this the default if nothing
         * crashes in S.
         * </pre>
         *
         * <code>optional bool prefer_suspend_clock_for_snapshot = 7;</code>
         * @return The preferSuspendClockForSnapshot.
         */
        @java.lang.Override
        public boolean getPreferSuspendClockForSnapshot() {
          return preferSuspendClockForSnapshot_;
        }
        /**
         * <pre>
         * Hints to the service that a suspend-aware (i.e. counting time in suspend)
         * clock should be used for periodic snapshots of service-emitted events.
         * This means, if a snapshot *should* have happened during suspend, it will
         * happen immediately after the device resumes.
         * Choosing a clock like this is done on best-effort basis; not all
         * platforms (e.g. Windows) expose a clock which can be used for periodic
         * tasks counting suspend. If such a clock is not available, the service
         * falls back to the best-available alternative.
         * Introduced in Android S.
         * TODO(lalitm): deprecate this in T and make this the default if nothing
         * crashes in S.
         * </pre>
         *
         * <code>optional bool prefer_suspend_clock_for_snapshot = 7;</code>
         * @param value The preferSuspendClockForSnapshot to set.
         * @return This builder for chaining.
         */
        public Builder setPreferSuspendClockForSnapshot(boolean value) {
          
          preferSuspendClockForSnapshot_ = value;
          bitField0_ |= 0x00000040;
          onChanged();
          return this;
        }
        /**
         * <pre>
         * Hints to the service that a suspend-aware (i.e. counting time in suspend)
         * clock should be used for periodic snapshots of service-emitted events.
         * This means, if a snapshot *should* have happened during suspend, it will
         * happen immediately after the device resumes.
         * Choosing a clock like this is done on best-effort basis; not all
         * platforms (e.g. Windows) expose a clock which can be used for periodic
         * tasks counting suspend. If such a clock is not available, the service
         * falls back to the best-available alternative.
         * Introduced in Android S.
         * TODO(lalitm): deprecate this in T and make this the default if nothing
         * crashes in S.
         * </pre>
         *
         * <code>optional bool prefer_suspend_clock_for_snapshot = 7;</code>
         * @return This builder for chaining.
         */
        public Builder clearPreferSuspendClockForSnapshot() {
          bitField0_ = (bitField0_ & ~0x00000040);
          preferSuspendClockForSnapshot_ = false;
          onChanged();
          return this;
        }
        @java.lang.Override
        public final Builder setUnknownFields(
            final com.google.protobuf.UnknownFieldSet unknownFields) {
          return super.setUnknownFields(unknownFields);
        }

        @java.lang.Override
        public final Builder mergeUnknownFields(
            final com.google.protobuf.UnknownFieldSet unknownFields) {
          return super.mergeUnknownFields(unknownFields);
        }


        // @@protoc_insertion_point(builder_scope:perfetto.protos.TraceConfig.BuiltinDataSource)
      }

      // @@protoc_insertion_point(class_scope:perfetto.protos.TraceConfig.BuiltinDataSource)
      private static final perfetto.protos.TraceConfigOuterClass.TraceConfig.BuiltinDataSource DEFAULT_INSTANCE;
      static {
        DEFAULT_INSTANCE = new perfetto.protos.TraceConfigOuterClass.TraceConfig.BuiltinDataSource();
      }

      public static perfetto.protos.TraceConfigOuterClass.TraceConfig.BuiltinDataSource getDefaultInstance() {
        return DEFAULT_INSTANCE;
      }

      @java.lang.Deprecated public static final com.google.protobuf.Parser<BuiltinDataSource>
          PARSER = new com.google.protobuf.AbstractParser<BuiltinDataSource>() {
        @java.lang.Override
        public BuiltinDataSource parsePartialFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws com.google.protobuf.InvalidProtocolBufferException {
          Builder builder = newBuilder();
          try {
            builder.mergeFrom(input, extensionRegistry);
          } catch (com.google.protobuf.InvalidProtocolBufferException e) {
            throw e.setUnfinishedMessage(builder.buildPartial());
          } catch (com.google.protobuf.UninitializedMessageException e) {
            throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
          } catch (java.io.IOException e) {
            throw new com.google.protobuf.InvalidProtocolBufferException(e)
                .setUnfinishedMessage(builder.buildPartial());
          }
          return builder.buildPartial();
        }
      };

      public static com.google.protobuf.Parser<BuiltinDataSource> parser() {
        return PARSER;
      }

      @java.lang.Override
      public com.google.protobuf.Parser<BuiltinDataSource> getParserForType() {
        return PARSER;
      }

      @java.lang.Override
      public perfetto.protos.TraceConfigOuterClass.TraceConfig.BuiltinDataSource getDefaultInstanceForType() {
        return DEFAULT_INSTANCE;
      }

    }

    public interface ProducerConfigOrBuilder extends
        // @@protoc_insertion_point(interface_extends:perfetto.protos.TraceConfig.ProducerConfig)
        com.google.protobuf.MessageOrBuilder {

      /**
       * <pre>
       * Identifies the producer for which this config is for.
       * </pre>
       *
       * <code>optional string producer_name = 1;</code>
       * @return Whether the producerName field is set.
       */
      boolean hasProducerName();
      /**
       * <pre>
       * Identifies the producer for which this config is for.
       * </pre>
       *
       * <code>optional string producer_name = 1;</code>
       * @return The producerName.
       */
      java.lang.String getProducerName();
      /**
       * <pre>
       * Identifies the producer for which this config is for.
       * </pre>
       *
       * <code>optional string producer_name = 1;</code>
       * @return The bytes for producerName.
       */
      com.google.protobuf.ByteString
          getProducerNameBytes();

      /**
       * <pre>
       * Specifies the preferred size of the shared memory buffer. If the size is
       * larger than the max size, the max will be used. If it is smaller than
       * the page size or doesn't fit pages evenly into it, it will fall back to
       * the size specified by the producer or finally the default shared memory
       * size.
       * </pre>
       *
       * <code>optional uint32 shm_size_kb = 2;</code>
       * @return Whether the shmSizeKb field is set.
       */
      boolean hasShmSizeKb();
      /**
       * <pre>
       * Specifies the preferred size of the shared memory buffer. If the size is
       * larger than the max size, the max will be used. If it is smaller than
       * the page size or doesn't fit pages evenly into it, it will fall back to
       * the size specified by the producer or finally the default shared memory
       * size.
       * </pre>
       *
       * <code>optional uint32 shm_size_kb = 2;</code>
       * @return The shmSizeKb.
       */
      int getShmSizeKb();

      /**
       * <pre>
       * Specifies the preferred size of each page in the shared memory buffer.
       * Must be an integer multiple of 4K.
       * </pre>
       *
       * <code>optional uint32 page_size_kb = 3;</code>
       * @return Whether the pageSizeKb field is set.
       */
      boolean hasPageSizeKb();
      /**
       * <pre>
       * Specifies the preferred size of each page in the shared memory buffer.
       * Must be an integer multiple of 4K.
       * </pre>
       *
       * <code>optional uint32 page_size_kb = 3;</code>
       * @return The pageSizeKb.
       */
      int getPageSizeKb();
    }
    /**
     * Protobuf type {@code perfetto.protos.TraceConfig.ProducerConfig}
     */
    public static final class ProducerConfig extends
        com.google.protobuf.GeneratedMessageV3 implements
        // @@protoc_insertion_point(message_implements:perfetto.protos.TraceConfig.ProducerConfig)
        ProducerConfigOrBuilder {
    private static final long serialVersionUID = 0L;
      // Use ProducerConfig.newBuilder() to construct.
      private ProducerConfig(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
        super(builder);
      }
      private ProducerConfig() {
        producerName_ = "";
      }

      @java.lang.Override
      @SuppressWarnings({"unused"})
      protected java.lang.Object newInstance(
          UnusedPrivateParameter unused) {
        return new ProducerConfig();
      }

      @java.lang.Override
      public final com.google.protobuf.UnknownFieldSet
      getUnknownFields() {
        return this.unknownFields;
      }
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return perfetto.protos.TraceConfigOuterClass.internal_static_perfetto_protos_TraceConfig_ProducerConfig_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return perfetto.protos.TraceConfigOuterClass.internal_static_perfetto_protos_TraceConfig_ProducerConfig_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                perfetto.protos.TraceConfigOuterClass.TraceConfig.ProducerConfig.class, perfetto.protos.TraceConfigOuterClass.TraceConfig.ProducerConfig.Builder.class);
      }

      private int bitField0_;
      public static final int PRODUCER_NAME_FIELD_NUMBER = 1;
      @SuppressWarnings("serial")
      private volatile java.lang.Object producerName_ = "";
      /**
       * <pre>
       * Identifies the producer for which this config is for.
       * </pre>
       *
       * <code>optional string producer_name = 1;</code>
       * @return Whether the producerName field is set.
       */
      @java.lang.Override
      public boolean hasProducerName() {
        return ((bitField0_ & 0x00000001) != 0);
      }
      /**
       * <pre>
       * Identifies the producer for which this config is for.
       * </pre>
       *
       * <code>optional string producer_name = 1;</code>
       * @return The producerName.
       */
      @java.lang.Override
      public java.lang.String getProducerName() {
        java.lang.Object ref = producerName_;
        if (ref instanceof java.lang.String) {
          return (java.lang.String) ref;
        } else {
          com.google.protobuf.ByteString bs = 
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          if (bs.isValidUtf8()) {
            producerName_ = s;
          }
          return s;
        }
      }
      /**
       * <pre>
       * Identifies the producer for which this config is for.
       * </pre>
       *
       * <code>optional string producer_name = 1;</code>
       * @return The bytes for producerName.
       */
      @java.lang.Override
      public com.google.protobuf.ByteString
          getProducerNameBytes() {
        java.lang.Object ref = producerName_;
        if (ref instanceof java.lang.String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          producerName_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }

      public static final int SHM_SIZE_KB_FIELD_NUMBER = 2;
      private int shmSizeKb_ = 0;
      /**
       * <pre>
       * Specifies the preferred size of the shared memory buffer. If the size is
       * larger than the max size, the max will be used. If it is smaller than
       * the page size or doesn't fit pages evenly into it, it will fall back to
       * the size specified by the producer or finally the default shared memory
       * size.
       * </pre>
       *
       * <code>optional uint32 shm_size_kb = 2;</code>
       * @return Whether the shmSizeKb field is set.
       */
      @java.lang.Override
      public boolean hasShmSizeKb() {
        return ((bitField0_ & 0x00000002) != 0);
      }
      /**
       * <pre>
       * Specifies the preferred size of the shared memory buffer. If the size is
       * larger than the max size, the max will be used. If it is smaller than
       * the page size or doesn't fit pages evenly into it, it will fall back to
       * the size specified by the producer or finally the default shared memory
       * size.
       * </pre>
       *
       * <code>optional uint32 shm_size_kb = 2;</code>
       * @return The shmSizeKb.
       */
      @java.lang.Override
      public int getShmSizeKb() {
        return shmSizeKb_;
      }

      public static final int PAGE_SIZE_KB_FIELD_NUMBER = 3;
      private int pageSizeKb_ = 0;
      /**
       * <pre>
       * Specifies the preferred size of each page in the shared memory buffer.
       * Must be an integer multiple of 4K.
       * </pre>
       *
       * <code>optional uint32 page_size_kb = 3;</code>
       * @return Whether the pageSizeKb field is set.
       */
      @java.lang.Override
      public boolean hasPageSizeKb() {
        return ((bitField0_ & 0x00000004) != 0);
      }
      /**
       * <pre>
       * Specifies the preferred size of each page in the shared memory buffer.
       * Must be an integer multiple of 4K.
       * </pre>
       *
       * <code>optional uint32 page_size_kb = 3;</code>
       * @return The pageSizeKb.
       */
      @java.lang.Override
      public int getPageSizeKb() {
        return pageSizeKb_;
      }

      private byte memoizedIsInitialized = -1;
      @java.lang.Override
      public final boolean isInitialized() {
        byte isInitialized = memoizedIsInitialized;
        if (isInitialized == 1) return true;
        if (isInitialized == 0) return false;

        memoizedIsInitialized = 1;
        return true;
      }

      @java.lang.Override
      public void writeTo(com.google.protobuf.CodedOutputStream output)
                          throws java.io.IOException {
        if (((bitField0_ & 0x00000001) != 0)) {
          com.google.protobuf.GeneratedMessageV3.writeString(output, 1, producerName_);
        }
        if (((bitField0_ & 0x00000002) != 0)) {
          output.writeUInt32(2, shmSizeKb_);
        }
        if (((bitField0_ & 0x00000004) != 0)) {
          output.writeUInt32(3, pageSizeKb_);
        }
        getUnknownFields().writeTo(output);
      }

      @java.lang.Override
      public int getSerializedSize() {
        int size = memoizedSize;
        if (size != -1) return size;

        size = 0;
        if (((bitField0_ & 0x00000001) != 0)) {
          size += com.google.protobuf.GeneratedMessageV3.computeStringSize(1, producerName_);
        }
        if (((bitField0_ & 0x00000002) != 0)) {
          size += com.google.protobuf.CodedOutputStream
            .computeUInt32Size(2, shmSizeKb_);
        }
        if (((bitField0_ & 0x00000004) != 0)) {
          size += com.google.protobuf.CodedOutputStream
            .computeUInt32Size(3, pageSizeKb_);
        }
        size += getUnknownFields().getSerializedSize();
        memoizedSize = size;
        return size;
      }

      @java.lang.Override
      public boolean equals(final java.lang.Object obj) {
        if (obj == this) {
         return true;
        }
        if (!(obj instanceof perfetto.protos.TraceConfigOuterClass.TraceConfig.ProducerConfig)) {
          return super.equals(obj);
        }
        perfetto.protos.TraceConfigOuterClass.TraceConfig.ProducerConfig other = (perfetto.protos.TraceConfigOuterClass.TraceConfig.ProducerConfig) obj;

        if (hasProducerName() != other.hasProducerName()) return false;
        if (hasProducerName()) {
          if (!getProducerName()
              .equals(other.getProducerName())) return false;
        }
        if (hasShmSizeKb() != other.hasShmSizeKb()) return false;
        if (hasShmSizeKb()) {
          if (getShmSizeKb()
              != other.getShmSizeKb()) return false;
        }
        if (hasPageSizeKb() != other.hasPageSizeKb()) return false;
        if (hasPageSizeKb()) {
          if (getPageSizeKb()
              != other.getPageSizeKb()) return false;
        }
        if (!getUnknownFields().equals(other.getUnknownFields())) return false;
        return true;
      }

      @java.lang.Override
      public int hashCode() {
        if (memoizedHashCode != 0) {
          return memoizedHashCode;
        }
        int hash = 41;
        hash = (19 * hash) + getDescriptor().hashCode();
        if (hasProducerName()) {
          hash = (37 * hash) + PRODUCER_NAME_FIELD_NUMBER;
          hash = (53 * hash) + getProducerName().hashCode();
        }
        if (hasShmSizeKb()) {
          hash = (37 * hash) + SHM_SIZE_KB_FIELD_NUMBER;
          hash = (53 * hash) + getShmSizeKb();
        }
        if (hasPageSizeKb()) {
          hash = (37 * hash) + PAGE_SIZE_KB_FIELD_NUMBER;
          hash = (53 * hash) + getPageSizeKb();
        }
        hash = (29 * hash) + getUnknownFields().hashCode();
        memoizedHashCode = hash;
        return hash;
      }

      public static perfetto.protos.TraceConfigOuterClass.TraceConfig.ProducerConfig parseFrom(
          java.nio.ByteBuffer data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static perfetto.protos.TraceConfigOuterClass.TraceConfig.ProducerConfig parseFrom(
          java.nio.ByteBuffer data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static perfetto.protos.TraceConfigOuterClass.TraceConfig.ProducerConfig parseFrom(
          com.google.protobuf.ByteString data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static perfetto.protos.TraceConfigOuterClass.TraceConfig.ProducerConfig parseFrom(
          com.google.protobuf.ByteString data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static perfetto.protos.TraceConfigOuterClass.TraceConfig.ProducerConfig parseFrom(byte[] data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static perfetto.protos.TraceConfigOuterClass.TraceConfig.ProducerConfig parseFrom(
          byte[] data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static perfetto.protos.TraceConfigOuterClass.TraceConfig.ProducerConfig parseFrom(java.io.InputStream input)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseWithIOException(PARSER, input);
      }
      public static perfetto.protos.TraceConfigOuterClass.TraceConfig.ProducerConfig parseFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseWithIOException(PARSER, input, extensionRegistry);
      }
      public static perfetto.protos.TraceConfigOuterClass.TraceConfig.ProducerConfig parseDelimitedFrom(java.io.InputStream input)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseDelimitedWithIOException(PARSER, input);
      }
      public static perfetto.protos.TraceConfigOuterClass.TraceConfig.ProducerConfig parseDelimitedFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
      }
      public static perfetto.protos.TraceConfigOuterClass.TraceConfig.ProducerConfig parseFrom(
          com.google.protobuf.CodedInputStream input)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseWithIOException(PARSER, input);
      }
      public static perfetto.protos.TraceConfigOuterClass.TraceConfig.ProducerConfig parseFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseWithIOException(PARSER, input, extensionRegistry);
      }

      @java.lang.Override
      public Builder newBuilderForType() { return newBuilder(); }
      public static Builder newBuilder() {
        return DEFAULT_INSTANCE.toBuilder();
      }
      public static Builder newBuilder(perfetto.protos.TraceConfigOuterClass.TraceConfig.ProducerConfig prototype) {
        return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
      }
      @java.lang.Override
      public Builder toBuilder() {
        return this == DEFAULT_INSTANCE
            ? new Builder() : new Builder().mergeFrom(this);
      }

      @java.lang.Override
      protected Builder newBuilderForType(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        Builder builder = new Builder(parent);
        return builder;
      }
      /**
       * Protobuf type {@code perfetto.protos.TraceConfig.ProducerConfig}
       */
      public static final class Builder extends
          com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
          // @@protoc_insertion_point(builder_implements:perfetto.protos.TraceConfig.ProducerConfig)
          perfetto.protos.TraceConfigOuterClass.TraceConfig.ProducerConfigOrBuilder {
        public static final com.google.protobuf.Descriptors.Descriptor
            getDescriptor() {
          return perfetto.protos.TraceConfigOuterClass.internal_static_perfetto_protos_TraceConfig_ProducerConfig_descriptor;
        }

        @java.lang.Override
        protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
            internalGetFieldAccessorTable() {
          return perfetto.protos.TraceConfigOuterClass.internal_static_perfetto_protos_TraceConfig_ProducerConfig_fieldAccessorTable
              .ensureFieldAccessorsInitialized(
                  perfetto.protos.TraceConfigOuterClass.TraceConfig.ProducerConfig.class, perfetto.protos.TraceConfigOuterClass.TraceConfig.ProducerConfig.Builder.class);
        }

        // Construct using perfetto.protos.TraceConfigOuterClass.TraceConfig.ProducerConfig.newBuilder()
        private Builder() {

        }

        private Builder(
            com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
          super(parent);

        }
        @java.lang.Override
        public Builder clear() {
          super.clear();
          bitField0_ = 0;
          producerName_ = "";
          shmSizeKb_ = 0;
          pageSizeKb_ = 0;
          return this;
        }

        @java.lang.Override
        public com.google.protobuf.Descriptors.Descriptor
            getDescriptorForType() {
          return perfetto.protos.TraceConfigOuterClass.internal_static_perfetto_protos_TraceConfig_ProducerConfig_descriptor;
        }

        @java.lang.Override
        public perfetto.protos.TraceConfigOuterClass.TraceConfig.ProducerConfig getDefaultInstanceForType() {
          return perfetto.protos.TraceConfigOuterClass.TraceConfig.ProducerConfig.getDefaultInstance();
        }

        @java.lang.Override
        public perfetto.protos.TraceConfigOuterClass.TraceConfig.ProducerConfig build() {
          perfetto.protos.TraceConfigOuterClass.TraceConfig.ProducerConfig result = buildPartial();
          if (!result.isInitialized()) {
            throw newUninitializedMessageException(result);
          }
          return result;
        }

        @java.lang.Override
        public perfetto.protos.TraceConfigOuterClass.TraceConfig.ProducerConfig buildPartial() {
          perfetto.protos.TraceConfigOuterClass.TraceConfig.ProducerConfig result = new perfetto.protos.TraceConfigOuterClass.TraceConfig.ProducerConfig(this);
          if (bitField0_ != 0) { buildPartial0(result); }
          onBuilt();
          return result;
        }

        private void buildPartial0(perfetto.protos.TraceConfigOuterClass.TraceConfig.ProducerConfig result) {
          int from_bitField0_ = bitField0_;
          int to_bitField0_ = 0;
          if (((from_bitField0_ & 0x00000001) != 0)) {
            result.producerName_ = producerName_;
            to_bitField0_ |= 0x00000001;
          }
          if (((from_bitField0_ & 0x00000002) != 0)) {
            result.shmSizeKb_ = shmSizeKb_;
            to_bitField0_ |= 0x00000002;
          }
          if (((from_bitField0_ & 0x00000004) != 0)) {
            result.pageSizeKb_ = pageSizeKb_;
            to_bitField0_ |= 0x00000004;
          }
          result.bitField0_ |= to_bitField0_;
        }

        @java.lang.Override
        public Builder clone() {
          return super.clone();
        }
        @java.lang.Override
        public Builder setField(
            com.google.protobuf.Descriptors.FieldDescriptor field,
            java.lang.Object value) {
          return super.setField(field, value);
        }
        @java.lang.Override
        public Builder clearField(
            com.google.protobuf.Descriptors.FieldDescriptor field) {
          return super.clearField(field);
        }
        @java.lang.Override
        public Builder clearOneof(
            com.google.protobuf.Descriptors.OneofDescriptor oneof) {
          return super.clearOneof(oneof);
        }
        @java.lang.Override
        public Builder setRepeatedField(
            com.google.protobuf.Descriptors.FieldDescriptor field,
            int index, java.lang.Object value) {
          return super.setRepeatedField(field, index, value);
        }
        @java.lang.Override
        public Builder addRepeatedField(
            com.google.protobuf.Descriptors.FieldDescriptor field,
            java.lang.Object value) {
          return super.addRepeatedField(field, value);
        }
        @java.lang.Override
        public Builder mergeFrom(com.google.protobuf.Message other) {
          if (other instanceof perfetto.protos.TraceConfigOuterClass.TraceConfig.ProducerConfig) {
            return mergeFrom((perfetto.protos.TraceConfigOuterClass.TraceConfig.ProducerConfig)other);
          } else {
            super.mergeFrom(other);
            return this;
          }
        }

        public Builder mergeFrom(perfetto.protos.TraceConfigOuterClass.TraceConfig.ProducerConfig other) {
          if (other == perfetto.protos.TraceConfigOuterClass.TraceConfig.ProducerConfig.getDefaultInstance()) return this;
          if (other.hasProducerName()) {
            producerName_ = other.producerName_;
            bitField0_ |= 0x00000001;
            onChanged();
          }
          if (other.hasShmSizeKb()) {
            setShmSizeKb(other.getShmSizeKb());
          }
          if (other.hasPageSizeKb()) {
            setPageSizeKb(other.getPageSizeKb());
          }
          this.mergeUnknownFields(other.getUnknownFields());
          onChanged();
          return this;
        }

        @java.lang.Override
        public final boolean isInitialized() {
          return true;
        }

        @java.lang.Override
        public Builder mergeFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws java.io.IOException {
          if (extensionRegistry == null) {
            throw new java.lang.NullPointerException();
          }
          try {
            boolean done = false;
            while (!done) {
              int tag = input.readTag();
              switch (tag) {
                case 0:
                  done = true;
                  break;
                case 10: {
                  producerName_ = input.readBytes();
                  bitField0_ |= 0x00000001;
                  break;
                } // case 10
                case 16: {
                  shmSizeKb_ = input.readUInt32();
                  bitField0_ |= 0x00000002;
                  break;
                } // case 16
                case 24: {
                  pageSizeKb_ = input.readUInt32();
                  bitField0_ |= 0x00000004;
                  break;
                } // case 24
                default: {
                  if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                    done = true; // was an endgroup tag
                  }
                  break;
                } // default:
              } // switch (tag)
            } // while (!done)
          } catch (com.google.protobuf.InvalidProtocolBufferException e) {
            throw e.unwrapIOException();
          } finally {
            onChanged();
          } // finally
          return this;
        }
        private int bitField0_;

        private java.lang.Object producerName_ = "";
        /**
         * <pre>
         * Identifies the producer for which this config is for.
         * </pre>
         *
         * <code>optional string producer_name = 1;</code>
         * @return Whether the producerName field is set.
         */
        public boolean hasProducerName() {
          return ((bitField0_ & 0x00000001) != 0);
        }
        /**
         * <pre>
         * Identifies the producer for which this config is for.
         * </pre>
         *
         * <code>optional string producer_name = 1;</code>
         * @return The producerName.
         */
        public java.lang.String getProducerName() {
          java.lang.Object ref = producerName_;
          if (!(ref instanceof java.lang.String)) {
            com.google.protobuf.ByteString bs =
                (com.google.protobuf.ByteString) ref;
            java.lang.String s = bs.toStringUtf8();
            if (bs.isValidUtf8()) {
              producerName_ = s;
            }
            return s;
          } else {
            return (java.lang.String) ref;
          }
        }
        /**
         * <pre>
         * Identifies the producer for which this config is for.
         * </pre>
         *
         * <code>optional string producer_name = 1;</code>
         * @return The bytes for producerName.
         */
        public com.google.protobuf.ByteString
            getProducerNameBytes() {
          java.lang.Object ref = producerName_;
          if (ref instanceof String) {
            com.google.protobuf.ByteString b = 
                com.google.protobuf.ByteString.copyFromUtf8(
                    (java.lang.String) ref);
            producerName_ = b;
            return b;
          } else {
            return (com.google.protobuf.ByteString) ref;
          }
        }
        /**
         * <pre>
         * Identifies the producer for which this config is for.
         * </pre>
         *
         * <code>optional string producer_name = 1;</code>
         * @param value The producerName to set.
         * @return This builder for chaining.
         */
        public Builder setProducerName(
            java.lang.String value) {
          if (value == null) { throw new NullPointerException(); }
          producerName_ = value;
          bitField0_ |= 0x00000001;
          onChanged();
          return this;
        }
        /**
         * <pre>
         * Identifies the producer for which this config is for.
         * </pre>
         *
         * <code>optional string producer_name = 1;</code>
         * @return This builder for chaining.
         */
        public Builder clearProducerName() {
          producerName_ = getDefaultInstance().getProducerName();
          bitField0_ = (bitField0_ & ~0x00000001);
          onChanged();
          return this;
        }
        /**
         * <pre>
         * Identifies the producer for which this config is for.
         * </pre>
         *
         * <code>optional string producer_name = 1;</code>
         * @param value The bytes for producerName to set.
         * @return This builder for chaining.
         */
        public Builder setProducerNameBytes(
            com.google.protobuf.ByteString value) {
          if (value == null) { throw new NullPointerException(); }
          producerName_ = value;
          bitField0_ |= 0x00000001;
          onChanged();
          return this;
        }

        private int shmSizeKb_ ;
        /**
         * <pre>
         * Specifies the preferred size of the shared memory buffer. If the size is
         * larger than the max size, the max will be used. If it is smaller than
         * the page size or doesn't fit pages evenly into it, it will fall back to
         * the size specified by the producer or finally the default shared memory
         * size.
         * </pre>
         *
         * <code>optional uint32 shm_size_kb = 2;</code>
         * @return Whether the shmSizeKb field is set.
         */
        @java.lang.Override
        public boolean hasShmSizeKb() {
          return ((bitField0_ & 0x00000002) != 0);
        }
        /**
         * <pre>
         * Specifies the preferred size of the shared memory buffer. If the size is
         * larger than the max size, the max will be used. If it is smaller than
         * the page size or doesn't fit pages evenly into it, it will fall back to
         * the size specified by the producer or finally the default shared memory
         * size.
         * </pre>
         *
         * <code>optional uint32 shm_size_kb = 2;</code>
         * @return The shmSizeKb.
         */
        @java.lang.Override
        public int getShmSizeKb() {
          return shmSizeKb_;
        }
        /**
         * <pre>
         * Specifies the preferred size of the shared memory buffer. If the size is
         * larger than the max size, the max will be used. If it is smaller than
         * the page size or doesn't fit pages evenly into it, it will fall back to
         * the size specified by the producer or finally the default shared memory
         * size.
         * </pre>
         *
         * <code>optional uint32 shm_size_kb = 2;</code>
         * @param value The shmSizeKb to set.
         * @return This builder for chaining.
         */
        public Builder setShmSizeKb(int value) {
          
          shmSizeKb_ = value;
          bitField0_ |= 0x00000002;
          onChanged();
          return this;
        }
        /**
         * <pre>
         * Specifies the preferred size of the shared memory buffer. If the size is
         * larger than the max size, the max will be used. If it is smaller than
         * the page size or doesn't fit pages evenly into it, it will fall back to
         * the size specified by the producer or finally the default shared memory
         * size.
         * </pre>
         *
         * <code>optional uint32 shm_size_kb = 2;</code>
         * @return This builder for chaining.
         */
        public Builder clearShmSizeKb() {
          bitField0_ = (bitField0_ & ~0x00000002);
          shmSizeKb_ = 0;
          onChanged();
          return this;
        }

        private int pageSizeKb_ ;
        /**
         * <pre>
         * Specifies the preferred size of each page in the shared memory buffer.
         * Must be an integer multiple of 4K.
         * </pre>
         *
         * <code>optional uint32 page_size_kb = 3;</code>
         * @return Whether the pageSizeKb field is set.
         */
        @java.lang.Override
        public boolean hasPageSizeKb() {
          return ((bitField0_ & 0x00000004) != 0);
        }
        /**
         * <pre>
         * Specifies the preferred size of each page in the shared memory buffer.
         * Must be an integer multiple of 4K.
         * </pre>
         *
         * <code>optional uint32 page_size_kb = 3;</code>
         * @return The pageSizeKb.
         */
        @java.lang.Override
        public int getPageSizeKb() {
          return pageSizeKb_;
        }
        /**
         * <pre>
         * Specifies the preferred size of each page in the shared memory buffer.
         * Must be an integer multiple of 4K.
         * </pre>
         *
         * <code>optional uint32 page_size_kb = 3;</code>
         * @param value The pageSizeKb to set.
         * @return This builder for chaining.
         */
        public Builder setPageSizeKb(int value) {
          
          pageSizeKb_ = value;
          bitField0_ |= 0x00000004;
          onChanged();
          return this;
        }
        /**
         * <pre>
         * Specifies the preferred size of each page in the shared memory buffer.
         * Must be an integer multiple of 4K.
         * </pre>
         *
         * <code>optional uint32 page_size_kb = 3;</code>
         * @return This builder for chaining.
         */
        public Builder clearPageSizeKb() {
          bitField0_ = (bitField0_ & ~0x00000004);
          pageSizeKb_ = 0;
          onChanged();
          return this;
        }
        @java.lang.Override
        public final Builder setUnknownFields(
            final com.google.protobuf.UnknownFieldSet unknownFields) {
          return super.setUnknownFields(unknownFields);
        }

        @java.lang.Override
        public final Builder mergeUnknownFields(
            final com.google.protobuf.UnknownFieldSet unknownFields) {
          return super.mergeUnknownFields(unknownFields);
        }


        // @@protoc_insertion_point(builder_scope:perfetto.protos.TraceConfig.ProducerConfig)
      }

      // @@protoc_insertion_point(class_scope:perfetto.protos.TraceConfig.ProducerConfig)
      private static final perfetto.protos.TraceConfigOuterClass.TraceConfig.ProducerConfig DEFAULT_INSTANCE;
      static {
        DEFAULT_INSTANCE = new perfetto.protos.TraceConfigOuterClass.TraceConfig.ProducerConfig();
      }

      public static perfetto.protos.TraceConfigOuterClass.TraceConfig.ProducerConfig getDefaultInstance() {
        return DEFAULT_INSTANCE;
      }

      @java.lang.Deprecated public static final com.google.protobuf.Parser<ProducerConfig>
          PARSER = new com.google.protobuf.AbstractParser<ProducerConfig>() {
        @java.lang.Override
        public ProducerConfig parsePartialFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws com.google.protobuf.InvalidProtocolBufferException {
          Builder builder = newBuilder();
          try {
            builder.mergeFrom(input, extensionRegistry);
          } catch (com.google.protobuf.InvalidProtocolBufferException e) {
            throw e.setUnfinishedMessage(builder.buildPartial());
          } catch (com.google.protobuf.UninitializedMessageException e) {
            throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
          } catch (java.io.IOException e) {
            throw new com.google.protobuf.InvalidProtocolBufferException(e)
                .setUnfinishedMessage(builder.buildPartial());
          }
          return builder.buildPartial();
        }
      };

      public static com.google.protobuf.Parser<ProducerConfig> parser() {
        return PARSER;
      }

      @java.lang.Override
      public com.google.protobuf.Parser<ProducerConfig> getParserForType() {
        return PARSER;
      }

      @java.lang.Override
      public perfetto.protos.TraceConfigOuterClass.TraceConfig.ProducerConfig getDefaultInstanceForType() {
        return DEFAULT_INSTANCE;
      }

    }

    public interface StatsdMetadataOrBuilder extends
        // @@protoc_insertion_point(interface_extends:perfetto.protos.TraceConfig.StatsdMetadata)
        com.google.protobuf.MessageOrBuilder {

      /**
       * <pre>
       * The identifier of the alert which triggered this trace.
       * </pre>
       *
       * <code>optional int64 triggering_alert_id = 1;</code>
       * @return Whether the triggeringAlertId field is set.
       */
      boolean hasTriggeringAlertId();
      /**
       * <pre>
       * The identifier of the alert which triggered this trace.
       * </pre>
       *
       * <code>optional int64 triggering_alert_id = 1;</code>
       * @return The triggeringAlertId.
       */
      long getTriggeringAlertId();

      /**
       * <pre>
       * The uid which registered the triggering configuration with statsd.
       * </pre>
       *
       * <code>optional int32 triggering_config_uid = 2;</code>
       * @return Whether the triggeringConfigUid field is set.
       */
      boolean hasTriggeringConfigUid();
      /**
       * <pre>
       * The uid which registered the triggering configuration with statsd.
       * </pre>
       *
       * <code>optional int32 triggering_config_uid = 2;</code>
       * @return The triggeringConfigUid.
       */
      int getTriggeringConfigUid();

      /**
       * <pre>
       * The identifier of the config which triggered the alert.
       * </pre>
       *
       * <code>optional int64 triggering_config_id = 3;</code>
       * @return Whether the triggeringConfigId field is set.
       */
      boolean hasTriggeringConfigId();
      /**
       * <pre>
       * The identifier of the config which triggered the alert.
       * </pre>
       *
       * <code>optional int64 triggering_config_id = 3;</code>
       * @return The triggeringConfigId.
       */
      long getTriggeringConfigId();

      /**
       * <pre>
       * The identifier of the subscription which triggered this trace.
       * </pre>
       *
       * <code>optional int64 triggering_subscription_id = 4;</code>
       * @return Whether the triggeringSubscriptionId field is set.
       */
      boolean hasTriggeringSubscriptionId();
      /**
       * <pre>
       * The identifier of the subscription which triggered this trace.
       * </pre>
       *
       * <code>optional int64 triggering_subscription_id = 4;</code>
       * @return The triggeringSubscriptionId.
       */
      long getTriggeringSubscriptionId();
    }
    /**
     * <pre>
     * Contains statsd-specific metadata about an alert associated with the trace.
     * </pre>
     *
     * Protobuf type {@code perfetto.protos.TraceConfig.StatsdMetadata}
     */
    public static final class StatsdMetadata extends
        com.google.protobuf.GeneratedMessageV3 implements
        // @@protoc_insertion_point(message_implements:perfetto.protos.TraceConfig.StatsdMetadata)
        StatsdMetadataOrBuilder {
    private static final long serialVersionUID = 0L;
      // Use StatsdMetadata.newBuilder() to construct.
      private StatsdMetadata(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
        super(builder);
      }
      private StatsdMetadata() {
      }

      @java.lang.Override
      @SuppressWarnings({"unused"})
      protected java.lang.Object newInstance(
          UnusedPrivateParameter unused) {
        return new StatsdMetadata();
      }

      @java.lang.Override
      public final com.google.protobuf.UnknownFieldSet
      getUnknownFields() {
        return this.unknownFields;
      }
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return perfetto.protos.TraceConfigOuterClass.internal_static_perfetto_protos_TraceConfig_StatsdMetadata_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return perfetto.protos.TraceConfigOuterClass.internal_static_perfetto_protos_TraceConfig_StatsdMetadata_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                perfetto.protos.TraceConfigOuterClass.TraceConfig.StatsdMetadata.class, perfetto.protos.TraceConfigOuterClass.TraceConfig.StatsdMetadata.Builder.class);
      }

      private int bitField0_;
      public static final int TRIGGERING_ALERT_ID_FIELD_NUMBER = 1;
      private long triggeringAlertId_ = 0L;
      /**
       * <pre>
       * The identifier of the alert which triggered this trace.
       * </pre>
       *
       * <code>optional int64 triggering_alert_id = 1;</code>
       * @return Whether the triggeringAlertId field is set.
       */
      @java.lang.Override
      public boolean hasTriggeringAlertId() {
        return ((bitField0_ & 0x00000001) != 0);
      }
      /**
       * <pre>
       * The identifier of the alert which triggered this trace.
       * </pre>
       *
       * <code>optional int64 triggering_alert_id = 1;</code>
       * @return The triggeringAlertId.
       */
      @java.lang.Override
      public long getTriggeringAlertId() {
        return triggeringAlertId_;
      }

      public static final int TRIGGERING_CONFIG_UID_FIELD_NUMBER = 2;
      private int triggeringConfigUid_ = 0;
      /**
       * <pre>
       * The uid which registered the triggering configuration with statsd.
       * </pre>
       *
       * <code>optional int32 triggering_config_uid = 2;</code>
       * @return Whether the triggeringConfigUid field is set.
       */
      @java.lang.Override
      public boolean hasTriggeringConfigUid() {
        return ((bitField0_ & 0x00000002) != 0);
      }
      /**
       * <pre>
       * The uid which registered the triggering configuration with statsd.
       * </pre>
       *
       * <code>optional int32 triggering_config_uid = 2;</code>
       * @return The triggeringConfigUid.
       */
      @java.lang.Override
      public int getTriggeringConfigUid() {
        return triggeringConfigUid_;
      }

      public static final int TRIGGERING_CONFIG_ID_FIELD_NUMBER = 3;
      private long triggeringConfigId_ = 0L;
      /**
       * <pre>
       * The identifier of the config which triggered the alert.
       * </pre>
       *
       * <code>optional int64 triggering_config_id = 3;</code>
       * @return Whether the triggeringConfigId field is set.
       */
      @java.lang.Override
      public boolean hasTriggeringConfigId() {
        return ((bitField0_ & 0x00000004) != 0);
      }
      /**
       * <pre>
       * The identifier of the config which triggered the alert.
       * </pre>
       *
       * <code>optional int64 triggering_config_id = 3;</code>
       * @return The triggeringConfigId.
       */
      @java.lang.Override
      public long getTriggeringConfigId() {
        return triggeringConfigId_;
      }

      public static final int TRIGGERING_SUBSCRIPTION_ID_FIELD_NUMBER = 4;
      private long triggeringSubscriptionId_ = 0L;
      /**
       * <pre>
       * The identifier of the subscription which triggered this trace.
       * </pre>
       *
       * <code>optional int64 triggering_subscription_id = 4;</code>
       * @return Whether the triggeringSubscriptionId field is set.
       */
      @java.lang.Override
      public boolean hasTriggeringSubscriptionId() {
        return ((bitField0_ & 0x00000008) != 0);
      }
      /**
       * <pre>
       * The identifier of the subscription which triggered this trace.
       * </pre>
       *
       * <code>optional int64 triggering_subscription_id = 4;</code>
       * @return The triggeringSubscriptionId.
       */
      @java.lang.Override
      public long getTriggeringSubscriptionId() {
        return triggeringSubscriptionId_;
      }

      private byte memoizedIsInitialized = -1;
      @java.lang.Override
      public final boolean isInitialized() {
        byte isInitialized = memoizedIsInitialized;
        if (isInitialized == 1) return true;
        if (isInitialized == 0) return false;

        memoizedIsInitialized = 1;
        return true;
      }

      @java.lang.Override
      public void writeTo(com.google.protobuf.CodedOutputStream output)
                          throws java.io.IOException {
        if (((bitField0_ & 0x00000001) != 0)) {
          output.writeInt64(1, triggeringAlertId_);
        }
        if (((bitField0_ & 0x00000002) != 0)) {
          output.writeInt32(2, triggeringConfigUid_);
        }
        if (((bitField0_ & 0x00000004) != 0)) {
          output.writeInt64(3, triggeringConfigId_);
        }
        if (((bitField0_ & 0x00000008) != 0)) {
          output.writeInt64(4, triggeringSubscriptionId_);
        }
        getUnknownFields().writeTo(output);
      }

      @java.lang.Override
      public int getSerializedSize() {
        int size = memoizedSize;
        if (size != -1) return size;

        size = 0;
        if (((bitField0_ & 0x00000001) != 0)) {
          size += com.google.protobuf.CodedOutputStream
            .computeInt64Size(1, triggeringAlertId_);
        }
        if (((bitField0_ & 0x00000002) != 0)) {
          size += com.google.protobuf.CodedOutputStream
            .computeInt32Size(2, triggeringConfigUid_);
        }
        if (((bitField0_ & 0x00000004) != 0)) {
          size += com.google.protobuf.CodedOutputStream
            .computeInt64Size(3, triggeringConfigId_);
        }
        if (((bitField0_ & 0x00000008) != 0)) {
          size += com.google.protobuf.CodedOutputStream
            .computeInt64Size(4, triggeringSubscriptionId_);
        }
        size += getUnknownFields().getSerializedSize();
        memoizedSize = size;
        return size;
      }

      @java.lang.Override
      public boolean equals(final java.lang.Object obj) {
        if (obj == this) {
         return true;
        }
        if (!(obj instanceof perfetto.protos.TraceConfigOuterClass.TraceConfig.StatsdMetadata)) {
          return super.equals(obj);
        }
        perfetto.protos.TraceConfigOuterClass.TraceConfig.StatsdMetadata other = (perfetto.protos.TraceConfigOuterClass.TraceConfig.StatsdMetadata) obj;

        if (hasTriggeringAlertId() != other.hasTriggeringAlertId()) return false;
        if (hasTriggeringAlertId()) {
          if (getTriggeringAlertId()
              != other.getTriggeringAlertId()) return false;
        }
        if (hasTriggeringConfigUid() != other.hasTriggeringConfigUid()) return false;
        if (hasTriggeringConfigUid()) {
          if (getTriggeringConfigUid()
              != other.getTriggeringConfigUid()) return false;
        }
        if (hasTriggeringConfigId() != other.hasTriggeringConfigId()) return false;
        if (hasTriggeringConfigId()) {
          if (getTriggeringConfigId()
              != other.getTriggeringConfigId()) return false;
        }
        if (hasTriggeringSubscriptionId() != other.hasTriggeringSubscriptionId()) return false;
        if (hasTriggeringSubscriptionId()) {
          if (getTriggeringSubscriptionId()
              != other.getTriggeringSubscriptionId()) return false;
        }
        if (!getUnknownFields().equals(other.getUnknownFields())) return false;
        return true;
      }

      @java.lang.Override
      public int hashCode() {
        if (memoizedHashCode != 0) {
          return memoizedHashCode;
        }
        int hash = 41;
        hash = (19 * hash) + getDescriptor().hashCode();
        if (hasTriggeringAlertId()) {
          hash = (37 * hash) + TRIGGERING_ALERT_ID_FIELD_NUMBER;
          hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
              getTriggeringAlertId());
        }
        if (hasTriggeringConfigUid()) {
          hash = (37 * hash) + TRIGGERING_CONFIG_UID_FIELD_NUMBER;
          hash = (53 * hash) + getTriggeringConfigUid();
        }
        if (hasTriggeringConfigId()) {
          hash = (37 * hash) + TRIGGERING_CONFIG_ID_FIELD_NUMBER;
          hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
              getTriggeringConfigId());
        }
        if (hasTriggeringSubscriptionId()) {
          hash = (37 * hash) + TRIGGERING_SUBSCRIPTION_ID_FIELD_NUMBER;
          hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
              getTriggeringSubscriptionId());
        }
        hash = (29 * hash) + getUnknownFields().hashCode();
        memoizedHashCode = hash;
        return hash;
      }

      public static perfetto.protos.TraceConfigOuterClass.TraceConfig.StatsdMetadata parseFrom(
          java.nio.ByteBuffer data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static perfetto.protos.TraceConfigOuterClass.TraceConfig.StatsdMetadata parseFrom(
          java.nio.ByteBuffer data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static perfetto.protos.TraceConfigOuterClass.TraceConfig.StatsdMetadata parseFrom(
          com.google.protobuf.ByteString data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static perfetto.protos.TraceConfigOuterClass.TraceConfig.StatsdMetadata parseFrom(
          com.google.protobuf.ByteString data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static perfetto.protos.TraceConfigOuterClass.TraceConfig.StatsdMetadata parseFrom(byte[] data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static perfetto.protos.TraceConfigOuterClass.TraceConfig.StatsdMetadata parseFrom(
          byte[] data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static perfetto.protos.TraceConfigOuterClass.TraceConfig.StatsdMetadata parseFrom(java.io.InputStream input)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseWithIOException(PARSER, input);
      }
      public static perfetto.protos.TraceConfigOuterClass.TraceConfig.StatsdMetadata parseFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseWithIOException(PARSER, input, extensionRegistry);
      }
      public static perfetto.protos.TraceConfigOuterClass.TraceConfig.StatsdMetadata parseDelimitedFrom(java.io.InputStream input)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseDelimitedWithIOException(PARSER, input);
      }
      public static perfetto.protos.TraceConfigOuterClass.TraceConfig.StatsdMetadata parseDelimitedFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
      }
      public static perfetto.protos.TraceConfigOuterClass.TraceConfig.StatsdMetadata parseFrom(
          com.google.protobuf.CodedInputStream input)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseWithIOException(PARSER, input);
      }
      public static perfetto.protos.TraceConfigOuterClass.TraceConfig.StatsdMetadata parseFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseWithIOException(PARSER, input, extensionRegistry);
      }

      @java.lang.Override
      public Builder newBuilderForType() { return newBuilder(); }
      public static Builder newBuilder() {
        return DEFAULT_INSTANCE.toBuilder();
      }
      public static Builder newBuilder(perfetto.protos.TraceConfigOuterClass.TraceConfig.StatsdMetadata prototype) {
        return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
      }
      @java.lang.Override
      public Builder toBuilder() {
        return this == DEFAULT_INSTANCE
            ? new Builder() : new Builder().mergeFrom(this);
      }

      @java.lang.Override
      protected Builder newBuilderForType(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        Builder builder = new Builder(parent);
        return builder;
      }
      /**
       * <pre>
       * Contains statsd-specific metadata about an alert associated with the trace.
       * </pre>
       *
       * Protobuf type {@code perfetto.protos.TraceConfig.StatsdMetadata}
       */
      public static final class Builder extends
          com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
          // @@protoc_insertion_point(builder_implements:perfetto.protos.TraceConfig.StatsdMetadata)
          perfetto.protos.TraceConfigOuterClass.TraceConfig.StatsdMetadataOrBuilder {
        public static final com.google.protobuf.Descriptors.Descriptor
            getDescriptor() {
          return perfetto.protos.TraceConfigOuterClass.internal_static_perfetto_protos_TraceConfig_StatsdMetadata_descriptor;
        }

        @java.lang.Override
        protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
            internalGetFieldAccessorTable() {
          return perfetto.protos.TraceConfigOuterClass.internal_static_perfetto_protos_TraceConfig_StatsdMetadata_fieldAccessorTable
              .ensureFieldAccessorsInitialized(
                  perfetto.protos.TraceConfigOuterClass.TraceConfig.StatsdMetadata.class, perfetto.protos.TraceConfigOuterClass.TraceConfig.StatsdMetadata.Builder.class);
        }

        // Construct using perfetto.protos.TraceConfigOuterClass.TraceConfig.StatsdMetadata.newBuilder()
        private Builder() {

        }

        private Builder(
            com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
          super(parent);

        }
        @java.lang.Override
        public Builder clear() {
          super.clear();
          bitField0_ = 0;
          triggeringAlertId_ = 0L;
          triggeringConfigUid_ = 0;
          triggeringConfigId_ = 0L;
          triggeringSubscriptionId_ = 0L;
          return this;
        }

        @java.lang.Override
        public com.google.protobuf.Descriptors.Descriptor
            getDescriptorForType() {
          return perfetto.protos.TraceConfigOuterClass.internal_static_perfetto_protos_TraceConfig_StatsdMetadata_descriptor;
        }

        @java.lang.Override
        public perfetto.protos.TraceConfigOuterClass.TraceConfig.StatsdMetadata getDefaultInstanceForType() {
          return perfetto.protos.TraceConfigOuterClass.TraceConfig.StatsdMetadata.getDefaultInstance();
        }

        @java.lang.Override
        public perfetto.protos.TraceConfigOuterClass.TraceConfig.StatsdMetadata build() {
          perfetto.protos.TraceConfigOuterClass.TraceConfig.StatsdMetadata result = buildPartial();
          if (!result.isInitialized()) {
            throw newUninitializedMessageException(result);
          }
          return result;
        }

        @java.lang.Override
        public perfetto.protos.TraceConfigOuterClass.TraceConfig.StatsdMetadata buildPartial() {
          perfetto.protos.TraceConfigOuterClass.TraceConfig.StatsdMetadata result = new perfetto.protos.TraceConfigOuterClass.TraceConfig.StatsdMetadata(this);
          if (bitField0_ != 0) { buildPartial0(result); }
          onBuilt();
          return result;
        }

        private void buildPartial0(perfetto.protos.TraceConfigOuterClass.TraceConfig.StatsdMetadata result) {
          int from_bitField0_ = bitField0_;
          int to_bitField0_ = 0;
          if (((from_bitField0_ & 0x00000001) != 0)) {
            result.triggeringAlertId_ = triggeringAlertId_;
            to_bitField0_ |= 0x00000001;
          }
          if (((from_bitField0_ & 0x00000002) != 0)) {
            result.triggeringConfigUid_ = triggeringConfigUid_;
            to_bitField0_ |= 0x00000002;
          }
          if (((from_bitField0_ & 0x00000004) != 0)) {
            result.triggeringConfigId_ = triggeringConfigId_;
            to_bitField0_ |= 0x00000004;
          }
          if (((from_bitField0_ & 0x00000008) != 0)) {
            result.triggeringSubscriptionId_ = triggeringSubscriptionId_;
            to_bitField0_ |= 0x00000008;
          }
          result.bitField0_ |= to_bitField0_;
        }

        @java.lang.Override
        public Builder clone() {
          return super.clone();
        }
        @java.lang.Override
        public Builder setField(
            com.google.protobuf.Descriptors.FieldDescriptor field,
            java.lang.Object value) {
          return super.setField(field, value);
        }
        @java.lang.Override
        public Builder clearField(
            com.google.protobuf.Descriptors.FieldDescriptor field) {
          return super.clearField(field);
        }
        @java.lang.Override
        public Builder clearOneof(
            com.google.protobuf.Descriptors.OneofDescriptor oneof) {
          return super.clearOneof(oneof);
        }
        @java.lang.Override
        public Builder setRepeatedField(
            com.google.protobuf.Descriptors.FieldDescriptor field,
            int index, java.lang.Object value) {
          return super.setRepeatedField(field, index, value);
        }
        @java.lang.Override
        public Builder addRepeatedField(
            com.google.protobuf.Descriptors.FieldDescriptor field,
            java.lang.Object value) {
          return super.addRepeatedField(field, value);
        }
        @java.lang.Override
        public Builder mergeFrom(com.google.protobuf.Message other) {
          if (other instanceof perfetto.protos.TraceConfigOuterClass.TraceConfig.StatsdMetadata) {
            return mergeFrom((perfetto.protos.TraceConfigOuterClass.TraceConfig.StatsdMetadata)other);
          } else {
            super.mergeFrom(other);
            return this;
          }
        }

        public Builder mergeFrom(perfetto.protos.TraceConfigOuterClass.TraceConfig.StatsdMetadata other) {
          if (other == perfetto.protos.TraceConfigOuterClass.TraceConfig.StatsdMetadata.getDefaultInstance()) return this;
          if (other.hasTriggeringAlertId()) {
            setTriggeringAlertId(other.getTriggeringAlertId());
          }
          if (other.hasTriggeringConfigUid()) {
            setTriggeringConfigUid(other.getTriggeringConfigUid());
          }
          if (other.hasTriggeringConfigId()) {
            setTriggeringConfigId(other.getTriggeringConfigId());
          }
          if (other.hasTriggeringSubscriptionId()) {
            setTriggeringSubscriptionId(other.getTriggeringSubscriptionId());
          }
          this.mergeUnknownFields(other.getUnknownFields());
          onChanged();
          return this;
        }

        @java.lang.Override
        public final boolean isInitialized() {
          return true;
        }

        @java.lang.Override
        public Builder mergeFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws java.io.IOException {
          if (extensionRegistry == null) {
            throw new java.lang.NullPointerException();
          }
          try {
            boolean done = false;
            while (!done) {
              int tag = input.readTag();
              switch (tag) {
                case 0:
                  done = true;
                  break;
                case 8: {
                  triggeringAlertId_ = input.readInt64();
                  bitField0_ |= 0x00000001;
                  break;
                } // case 8
                case 16: {
                  triggeringConfigUid_ = input.readInt32();
                  bitField0_ |= 0x00000002;
                  break;
                } // case 16
                case 24: {
                  triggeringConfigId_ = input.readInt64();
                  bitField0_ |= 0x00000004;
                  break;
                } // case 24
                case 32: {
                  triggeringSubscriptionId_ = input.readInt64();
                  bitField0_ |= 0x00000008;
                  break;
                } // case 32
                default: {
                  if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                    done = true; // was an endgroup tag
                  }
                  break;
                } // default:
              } // switch (tag)
            } // while (!done)
          } catch (com.google.protobuf.InvalidProtocolBufferException e) {
            throw e.unwrapIOException();
          } finally {
            onChanged();
          } // finally
          return this;
        }
        private int bitField0_;

        private long triggeringAlertId_ ;
        /**
         * <pre>
         * The identifier of the alert which triggered this trace.
         * </pre>
         *
         * <code>optional int64 triggering_alert_id = 1;</code>
         * @return Whether the triggeringAlertId field is set.
         */
        @java.lang.Override
        public boolean hasTriggeringAlertId() {
          return ((bitField0_ & 0x00000001) != 0);
        }
        /**
         * <pre>
         * The identifier of the alert which triggered this trace.
         * </pre>
         *
         * <code>optional int64 triggering_alert_id = 1;</code>
         * @return The triggeringAlertId.
         */
        @java.lang.Override
        public long getTriggeringAlertId() {
          return triggeringAlertId_;
        }
        /**
         * <pre>
         * The identifier of the alert which triggered this trace.
         * </pre>
         *
         * <code>optional int64 triggering_alert_id = 1;</code>
         * @param value The triggeringAlertId to set.
         * @return This builder for chaining.
         */
        public Builder setTriggeringAlertId(long value) {
          
          triggeringAlertId_ = value;
          bitField0_ |= 0x00000001;
          onChanged();
          return this;
        }
        /**
         * <pre>
         * The identifier of the alert which triggered this trace.
         * </pre>
         *
         * <code>optional int64 triggering_alert_id = 1;</code>
         * @return This builder for chaining.
         */
        public Builder clearTriggeringAlertId() {
          bitField0_ = (bitField0_ & ~0x00000001);
          triggeringAlertId_ = 0L;
          onChanged();
          return this;
        }

        private int triggeringConfigUid_ ;
        /**
         * <pre>
         * The uid which registered the triggering configuration with statsd.
         * </pre>
         *
         * <code>optional int32 triggering_config_uid = 2;</code>
         * @return Whether the triggeringConfigUid field is set.
         */
        @java.lang.Override
        public boolean hasTriggeringConfigUid() {
          return ((bitField0_ & 0x00000002) != 0);
        }
        /**
         * <pre>
         * The uid which registered the triggering configuration with statsd.
         * </pre>
         *
         * <code>optional int32 triggering_config_uid = 2;</code>
         * @return The triggeringConfigUid.
         */
        @java.lang.Override
        public int getTriggeringConfigUid() {
          return triggeringConfigUid_;
        }
        /**
         * <pre>
         * The uid which registered the triggering configuration with statsd.
         * </pre>
         *
         * <code>optional int32 triggering_config_uid = 2;</code>
         * @param value The triggeringConfigUid to set.
         * @return This builder for chaining.
         */
        public Builder setTriggeringConfigUid(int value) {
          
          triggeringConfigUid_ = value;
          bitField0_ |= 0x00000002;
          onChanged();
          return this;
        }
        /**
         * <pre>
         * The uid which registered the triggering configuration with statsd.
         * </pre>
         *
         * <code>optional int32 triggering_config_uid = 2;</code>
         * @return This builder for chaining.
         */
        public Builder clearTriggeringConfigUid() {
          bitField0_ = (bitField0_ & ~0x00000002);
          triggeringConfigUid_ = 0;
          onChanged();
          return this;
        }

        private long triggeringConfigId_ ;
        /**
         * <pre>
         * The identifier of the config which triggered the alert.
         * </pre>
         *
         * <code>optional int64 triggering_config_id = 3;</code>
         * @return Whether the triggeringConfigId field is set.
         */
        @java.lang.Override
        public boolean hasTriggeringConfigId() {
          return ((bitField0_ & 0x00000004) != 0);
        }
        /**
         * <pre>
         * The identifier of the config which triggered the alert.
         * </pre>
         *
         * <code>optional int64 triggering_config_id = 3;</code>
         * @return The triggeringConfigId.
         */
        @java.lang.Override
        public long getTriggeringConfigId() {
          return triggeringConfigId_;
        }
        /**
         * <pre>
         * The identifier of the config which triggered the alert.
         * </pre>
         *
         * <code>optional int64 triggering_config_id = 3;</code>
         * @param value The triggeringConfigId to set.
         * @return This builder for chaining.
         */
        public Builder setTriggeringConfigId(long value) {
          
          triggeringConfigId_ = value;
          bitField0_ |= 0x00000004;
          onChanged();
          return this;
        }
        /**
         * <pre>
         * The identifier of the config which triggered the alert.
         * </pre>
         *
         * <code>optional int64 triggering_config_id = 3;</code>
         * @return This builder for chaining.
         */
        public Builder clearTriggeringConfigId() {
          bitField0_ = (bitField0_ & ~0x00000004);
          triggeringConfigId_ = 0L;
          onChanged();
          return this;
        }

        private long triggeringSubscriptionId_ ;
        /**
         * <pre>
         * The identifier of the subscription which triggered this trace.
         * </pre>
         *
         * <code>optional int64 triggering_subscription_id = 4;</code>
         * @return Whether the triggeringSubscriptionId field is set.
         */
        @java.lang.Override
        public boolean hasTriggeringSubscriptionId() {
          return ((bitField0_ & 0x00000008) != 0);
        }
        /**
         * <pre>
         * The identifier of the subscription which triggered this trace.
         * </pre>
         *
         * <code>optional int64 triggering_subscription_id = 4;</code>
         * @return The triggeringSubscriptionId.
         */
        @java.lang.Override
        public long getTriggeringSubscriptionId() {
          return triggeringSubscriptionId_;
        }
        /**
         * <pre>
         * The identifier of the subscription which triggered this trace.
         * </pre>
         *
         * <code>optional int64 triggering_subscription_id = 4;</code>
         * @param value The triggeringSubscriptionId to set.
         * @return This builder for chaining.
         */
        public Builder setTriggeringSubscriptionId(long value) {
          
          triggeringSubscriptionId_ = value;
          bitField0_ |= 0x00000008;
          onChanged();
          return this;
        }
        /**
         * <pre>
         * The identifier of the subscription which triggered this trace.
         * </pre>
         *
         * <code>optional int64 triggering_subscription_id = 4;</code>
         * @return This builder for chaining.
         */
        public Builder clearTriggeringSubscriptionId() {
          bitField0_ = (bitField0_ & ~0x00000008);
          triggeringSubscriptionId_ = 0L;
          onChanged();
          return this;
        }
        @java.lang.Override
        public final Builder setUnknownFields(
            final com.google.protobuf.UnknownFieldSet unknownFields) {
          return super.setUnknownFields(unknownFields);
        }

        @java.lang.Override
        public final Builder mergeUnknownFields(
            final com.google.protobuf.UnknownFieldSet unknownFields) {
          return super.mergeUnknownFields(unknownFields);
        }


        // @@protoc_insertion_point(builder_scope:perfetto.protos.TraceConfig.StatsdMetadata)
      }

      // @@protoc_insertion_point(class_scope:perfetto.protos.TraceConfig.StatsdMetadata)
      private static final perfetto.protos.TraceConfigOuterClass.TraceConfig.StatsdMetadata DEFAULT_INSTANCE;
      static {
        DEFAULT_INSTANCE = new perfetto.protos.TraceConfigOuterClass.TraceConfig.StatsdMetadata();
      }

      public static perfetto.protos.TraceConfigOuterClass.TraceConfig.StatsdMetadata getDefaultInstance() {
        return DEFAULT_INSTANCE;
      }

      @java.lang.Deprecated public static final com.google.protobuf.Parser<StatsdMetadata>
          PARSER = new com.google.protobuf.AbstractParser<StatsdMetadata>() {
        @java.lang.Override
        public StatsdMetadata parsePartialFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws com.google.protobuf.InvalidProtocolBufferException {
          Builder builder = newBuilder();
          try {
            builder.mergeFrom(input, extensionRegistry);
          } catch (com.google.protobuf.InvalidProtocolBufferException e) {
            throw e.setUnfinishedMessage(builder.buildPartial());
          } catch (com.google.protobuf.UninitializedMessageException e) {
            throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
          } catch (java.io.IOException e) {
            throw new com.google.protobuf.InvalidProtocolBufferException(e)
                .setUnfinishedMessage(builder.buildPartial());
          }
          return builder.buildPartial();
        }
      };

      public static com.google.protobuf.Parser<StatsdMetadata> parser() {
        return PARSER;
      }

      @java.lang.Override
      public com.google.protobuf.Parser<StatsdMetadata> getParserForType() {
        return PARSER;
      }

      @java.lang.Override
      public perfetto.protos.TraceConfigOuterClass.TraceConfig.StatsdMetadata getDefaultInstanceForType() {
        return DEFAULT_INSTANCE;
      }

    }

    public interface GuardrailOverridesOrBuilder extends
        // @@protoc_insertion_point(interface_extends:perfetto.protos.TraceConfig.GuardrailOverrides)
        com.google.protobuf.MessageOrBuilder {

      /**
       * <pre>
       * Override the default limit (in bytes) for uploading data to server within
       * a 24 hour period.
       * On R-, this override only affected userdebug builds. Since S, it also
       * affects user builds.
       * </pre>
       *
       * <code>optional uint64 max_upload_per_day_bytes = 1;</code>
       * @return Whether the maxUploadPerDayBytes field is set.
       */
      boolean hasMaxUploadPerDayBytes();
      /**
       * <pre>
       * Override the default limit (in bytes) for uploading data to server within
       * a 24 hour period.
       * On R-, this override only affected userdebug builds. Since S, it also
       * affects user builds.
       * </pre>
       *
       * <code>optional uint64 max_upload_per_day_bytes = 1;</code>
       * @return The maxUploadPerDayBytes.
       */
      long getMaxUploadPerDayBytes();

      /**
       * <pre>
       * Overrides the guardrail for maximum trace buffer size.
       * Available on U+
       * </pre>
       *
       * <code>optional uint32 max_tracing_buffer_size_kb = 2;</code>
       * @return Whether the maxTracingBufferSizeKb field is set.
       */
      boolean hasMaxTracingBufferSizeKb();
      /**
       * <pre>
       * Overrides the guardrail for maximum trace buffer size.
       * Available on U+
       * </pre>
       *
       * <code>optional uint32 max_tracing_buffer_size_kb = 2;</code>
       * @return The maxTracingBufferSizeKb.
       */
      int getMaxTracingBufferSizeKb();
    }
    /**
     * <pre>
     * Contains flags which override the default values of the guardrails inside
     * Perfetto.
     * </pre>
     *
     * Protobuf type {@code perfetto.protos.TraceConfig.GuardrailOverrides}
     */
    public static final class GuardrailOverrides extends
        com.google.protobuf.GeneratedMessageV3 implements
        // @@protoc_insertion_point(message_implements:perfetto.protos.TraceConfig.GuardrailOverrides)
        GuardrailOverridesOrBuilder {
    private static final long serialVersionUID = 0L;
      // Use GuardrailOverrides.newBuilder() to construct.
      private GuardrailOverrides(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
        super(builder);
      }
      private GuardrailOverrides() {
      }

      @java.lang.Override
      @SuppressWarnings({"unused"})
      protected java.lang.Object newInstance(
          UnusedPrivateParameter unused) {
        return new GuardrailOverrides();
      }

      @java.lang.Override
      public final com.google.protobuf.UnknownFieldSet
      getUnknownFields() {
        return this.unknownFields;
      }
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return perfetto.protos.TraceConfigOuterClass.internal_static_perfetto_protos_TraceConfig_GuardrailOverrides_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return perfetto.protos.TraceConfigOuterClass.internal_static_perfetto_protos_TraceConfig_GuardrailOverrides_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                perfetto.protos.TraceConfigOuterClass.TraceConfig.GuardrailOverrides.class, perfetto.protos.TraceConfigOuterClass.TraceConfig.GuardrailOverrides.Builder.class);
      }

      private int bitField0_;
      public static final int MAX_UPLOAD_PER_DAY_BYTES_FIELD_NUMBER = 1;
      private long maxUploadPerDayBytes_ = 0L;
      /**
       * <pre>
       * Override the default limit (in bytes) for uploading data to server within
       * a 24 hour period.
       * On R-, this override only affected userdebug builds. Since S, it also
       * affects user builds.
       * </pre>
       *
       * <code>optional uint64 max_upload_per_day_bytes = 1;</code>
       * @return Whether the maxUploadPerDayBytes field is set.
       */
      @java.lang.Override
      public boolean hasMaxUploadPerDayBytes() {
        return ((bitField0_ & 0x00000001) != 0);
      }
      /**
       * <pre>
       * Override the default limit (in bytes) for uploading data to server within
       * a 24 hour period.
       * On R-, this override only affected userdebug builds. Since S, it also
       * affects user builds.
       * </pre>
       *
       * <code>optional uint64 max_upload_per_day_bytes = 1;</code>
       * @return The maxUploadPerDayBytes.
       */
      @java.lang.Override
      public long getMaxUploadPerDayBytes() {
        return maxUploadPerDayBytes_;
      }

      public static final int MAX_TRACING_BUFFER_SIZE_KB_FIELD_NUMBER = 2;
      private int maxTracingBufferSizeKb_ = 0;
      /**
       * <pre>
       * Overrides the guardrail for maximum trace buffer size.
       * Available on U+
       * </pre>
       *
       * <code>optional uint32 max_tracing_buffer_size_kb = 2;</code>
       * @return Whether the maxTracingBufferSizeKb field is set.
       */
      @java.lang.Override
      public boolean hasMaxTracingBufferSizeKb() {
        return ((bitField0_ & 0x00000002) != 0);
      }
      /**
       * <pre>
       * Overrides the guardrail for maximum trace buffer size.
       * Available on U+
       * </pre>
       *
       * <code>optional uint32 max_tracing_buffer_size_kb = 2;</code>
       * @return The maxTracingBufferSizeKb.
       */
      @java.lang.Override
      public int getMaxTracingBufferSizeKb() {
        return maxTracingBufferSizeKb_;
      }

      private byte memoizedIsInitialized = -1;
      @java.lang.Override
      public final boolean isInitialized() {
        byte isInitialized = memoizedIsInitialized;
        if (isInitialized == 1) return true;
        if (isInitialized == 0) return false;

        memoizedIsInitialized = 1;
        return true;
      }

      @java.lang.Override
      public void writeTo(com.google.protobuf.CodedOutputStream output)
                          throws java.io.IOException {
        if (((bitField0_ & 0x00000001) != 0)) {
          output.writeUInt64(1, maxUploadPerDayBytes_);
        }
        if (((bitField0_ & 0x00000002) != 0)) {
          output.writeUInt32(2, maxTracingBufferSizeKb_);
        }
        getUnknownFields().writeTo(output);
      }

      @java.lang.Override
      public int getSerializedSize() {
        int size = memoizedSize;
        if (size != -1) return size;

        size = 0;
        if (((bitField0_ & 0x00000001) != 0)) {
          size += com.google.protobuf.CodedOutputStream
            .computeUInt64Size(1, maxUploadPerDayBytes_);
        }
        if (((bitField0_ & 0x00000002) != 0)) {
          size += com.google.protobuf.CodedOutputStream
            .computeUInt32Size(2, maxTracingBufferSizeKb_);
        }
        size += getUnknownFields().getSerializedSize();
        memoizedSize = size;
        return size;
      }

      @java.lang.Override
      public boolean equals(final java.lang.Object obj) {
        if (obj == this) {
         return true;
        }
        if (!(obj instanceof perfetto.protos.TraceConfigOuterClass.TraceConfig.GuardrailOverrides)) {
          return super.equals(obj);
        }
        perfetto.protos.TraceConfigOuterClass.TraceConfig.GuardrailOverrides other = (perfetto.protos.TraceConfigOuterClass.TraceConfig.GuardrailOverrides) obj;

        if (hasMaxUploadPerDayBytes() != other.hasMaxUploadPerDayBytes()) return false;
        if (hasMaxUploadPerDayBytes()) {
          if (getMaxUploadPerDayBytes()
              != other.getMaxUploadPerDayBytes()) return false;
        }
        if (hasMaxTracingBufferSizeKb() != other.hasMaxTracingBufferSizeKb()) return false;
        if (hasMaxTracingBufferSizeKb()) {
          if (getMaxTracingBufferSizeKb()
              != other.getMaxTracingBufferSizeKb()) return false;
        }
        if (!getUnknownFields().equals(other.getUnknownFields())) return false;
        return true;
      }

      @java.lang.Override
      public int hashCode() {
        if (memoizedHashCode != 0) {
          return memoizedHashCode;
        }
        int hash = 41;
        hash = (19 * hash) + getDescriptor().hashCode();
        if (hasMaxUploadPerDayBytes()) {
          hash = (37 * hash) + MAX_UPLOAD_PER_DAY_BYTES_FIELD_NUMBER;
          hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
              getMaxUploadPerDayBytes());
        }
        if (hasMaxTracingBufferSizeKb()) {
          hash = (37 * hash) + MAX_TRACING_BUFFER_SIZE_KB_FIELD_NUMBER;
          hash = (53 * hash) + getMaxTracingBufferSizeKb();
        }
        hash = (29 * hash) + getUnknownFields().hashCode();
        memoizedHashCode = hash;
        return hash;
      }

      public static perfetto.protos.TraceConfigOuterClass.TraceConfig.GuardrailOverrides parseFrom(
          java.nio.ByteBuffer data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static perfetto.protos.TraceConfigOuterClass.TraceConfig.GuardrailOverrides parseFrom(
          java.nio.ByteBuffer data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static perfetto.protos.TraceConfigOuterClass.TraceConfig.GuardrailOverrides parseFrom(
          com.google.protobuf.ByteString data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static perfetto.protos.TraceConfigOuterClass.TraceConfig.GuardrailOverrides parseFrom(
          com.google.protobuf.ByteString data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static perfetto.protos.TraceConfigOuterClass.TraceConfig.GuardrailOverrides parseFrom(byte[] data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static perfetto.protos.TraceConfigOuterClass.TraceConfig.GuardrailOverrides parseFrom(
          byte[] data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static perfetto.protos.TraceConfigOuterClass.TraceConfig.GuardrailOverrides parseFrom(java.io.InputStream input)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseWithIOException(PARSER, input);
      }
      public static perfetto.protos.TraceConfigOuterClass.TraceConfig.GuardrailOverrides parseFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseWithIOException(PARSER, input, extensionRegistry);
      }
      public static perfetto.protos.TraceConfigOuterClass.TraceConfig.GuardrailOverrides parseDelimitedFrom(java.io.InputStream input)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseDelimitedWithIOException(PARSER, input);
      }
      public static perfetto.protos.TraceConfigOuterClass.TraceConfig.GuardrailOverrides parseDelimitedFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
      }
      public static perfetto.protos.TraceConfigOuterClass.TraceConfig.GuardrailOverrides parseFrom(
          com.google.protobuf.CodedInputStream input)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseWithIOException(PARSER, input);
      }
      public static perfetto.protos.TraceConfigOuterClass.TraceConfig.GuardrailOverrides parseFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseWithIOException(PARSER, input, extensionRegistry);
      }

      @java.lang.Override
      public Builder newBuilderForType() { return newBuilder(); }
      public static Builder newBuilder() {
        return DEFAULT_INSTANCE.toBuilder();
      }
      public static Builder newBuilder(perfetto.protos.TraceConfigOuterClass.TraceConfig.GuardrailOverrides prototype) {
        return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
      }
      @java.lang.Override
      public Builder toBuilder() {
        return this == DEFAULT_INSTANCE
            ? new Builder() : new Builder().mergeFrom(this);
      }

      @java.lang.Override
      protected Builder newBuilderForType(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        Builder builder = new Builder(parent);
        return builder;
      }
      /**
       * <pre>
       * Contains flags which override the default values of the guardrails inside
       * Perfetto.
       * </pre>
       *
       * Protobuf type {@code perfetto.protos.TraceConfig.GuardrailOverrides}
       */
      public static final class Builder extends
          com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
          // @@protoc_insertion_point(builder_implements:perfetto.protos.TraceConfig.GuardrailOverrides)
          perfetto.protos.TraceConfigOuterClass.TraceConfig.GuardrailOverridesOrBuilder {
        public static final com.google.protobuf.Descriptors.Descriptor
            getDescriptor() {
          return perfetto.protos.TraceConfigOuterClass.internal_static_perfetto_protos_TraceConfig_GuardrailOverrides_descriptor;
        }

        @java.lang.Override
        protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
            internalGetFieldAccessorTable() {
          return perfetto.protos.TraceConfigOuterClass.internal_static_perfetto_protos_TraceConfig_GuardrailOverrides_fieldAccessorTable
              .ensureFieldAccessorsInitialized(
                  perfetto.protos.TraceConfigOuterClass.TraceConfig.GuardrailOverrides.class, perfetto.protos.TraceConfigOuterClass.TraceConfig.GuardrailOverrides.Builder.class);
        }

        // Construct using perfetto.protos.TraceConfigOuterClass.TraceConfig.GuardrailOverrides.newBuilder()
        private Builder() {

        }

        private Builder(
            com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
          super(parent);

        }
        @java.lang.Override
        public Builder clear() {
          super.clear();
          bitField0_ = 0;
          maxUploadPerDayBytes_ = 0L;
          maxTracingBufferSizeKb_ = 0;
          return this;
        }

        @java.lang.Override
        public com.google.protobuf.Descriptors.Descriptor
            getDescriptorForType() {
          return perfetto.protos.TraceConfigOuterClass.internal_static_perfetto_protos_TraceConfig_GuardrailOverrides_descriptor;
        }

        @java.lang.Override
        public perfetto.protos.TraceConfigOuterClass.TraceConfig.GuardrailOverrides getDefaultInstanceForType() {
          return perfetto.protos.TraceConfigOuterClass.TraceConfig.GuardrailOverrides.getDefaultInstance();
        }

        @java.lang.Override
        public perfetto.protos.TraceConfigOuterClass.TraceConfig.GuardrailOverrides build() {
          perfetto.protos.TraceConfigOuterClass.TraceConfig.GuardrailOverrides result = buildPartial();
          if (!result.isInitialized()) {
            throw newUninitializedMessageException(result);
          }
          return result;
        }

        @java.lang.Override
        public perfetto.protos.TraceConfigOuterClass.TraceConfig.GuardrailOverrides buildPartial() {
          perfetto.protos.TraceConfigOuterClass.TraceConfig.GuardrailOverrides result = new perfetto.protos.TraceConfigOuterClass.TraceConfig.GuardrailOverrides(this);
          if (bitField0_ != 0) { buildPartial0(result); }
          onBuilt();
          return result;
        }

        private void buildPartial0(perfetto.protos.TraceConfigOuterClass.TraceConfig.GuardrailOverrides result) {
          int from_bitField0_ = bitField0_;
          int to_bitField0_ = 0;
          if (((from_bitField0_ & 0x00000001) != 0)) {
            result.maxUploadPerDayBytes_ = maxUploadPerDayBytes_;
            to_bitField0_ |= 0x00000001;
          }
          if (((from_bitField0_ & 0x00000002) != 0)) {
            result.maxTracingBufferSizeKb_ = maxTracingBufferSizeKb_;
            to_bitField0_ |= 0x00000002;
          }
          result.bitField0_ |= to_bitField0_;
        }

        @java.lang.Override
        public Builder clone() {
          return super.clone();
        }
        @java.lang.Override
        public Builder setField(
            com.google.protobuf.Descriptors.FieldDescriptor field,
            java.lang.Object value) {
          return super.setField(field, value);
        }
        @java.lang.Override
        public Builder clearField(
            com.google.protobuf.Descriptors.FieldDescriptor field) {
          return super.clearField(field);
        }
        @java.lang.Override
        public Builder clearOneof(
            com.google.protobuf.Descriptors.OneofDescriptor oneof) {
          return super.clearOneof(oneof);
        }
        @java.lang.Override
        public Builder setRepeatedField(
            com.google.protobuf.Descriptors.FieldDescriptor field,
            int index, java.lang.Object value) {
          return super.setRepeatedField(field, index, value);
        }
        @java.lang.Override
        public Builder addRepeatedField(
            com.google.protobuf.Descriptors.FieldDescriptor field,
            java.lang.Object value) {
          return super.addRepeatedField(field, value);
        }
        @java.lang.Override
        public Builder mergeFrom(com.google.protobuf.Message other) {
          if (other instanceof perfetto.protos.TraceConfigOuterClass.TraceConfig.GuardrailOverrides) {
            return mergeFrom((perfetto.protos.TraceConfigOuterClass.TraceConfig.GuardrailOverrides)other);
          } else {
            super.mergeFrom(other);
            return this;
          }
        }

        public Builder mergeFrom(perfetto.protos.TraceConfigOuterClass.TraceConfig.GuardrailOverrides other) {
          if (other == perfetto.protos.TraceConfigOuterClass.TraceConfig.GuardrailOverrides.getDefaultInstance()) return this;
          if (other.hasMaxUploadPerDayBytes()) {
            setMaxUploadPerDayBytes(other.getMaxUploadPerDayBytes());
          }
          if (other.hasMaxTracingBufferSizeKb()) {
            setMaxTracingBufferSizeKb(other.getMaxTracingBufferSizeKb());
          }
          this.mergeUnknownFields(other.getUnknownFields());
          onChanged();
          return this;
        }

        @java.lang.Override
        public final boolean isInitialized() {
          return true;
        }

        @java.lang.Override
        public Builder mergeFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws java.io.IOException {
          if (extensionRegistry == null) {
            throw new java.lang.NullPointerException();
          }
          try {
            boolean done = false;
            while (!done) {
              int tag = input.readTag();
              switch (tag) {
                case 0:
                  done = true;
                  break;
                case 8: {
                  maxUploadPerDayBytes_ = input.readUInt64();
                  bitField0_ |= 0x00000001;
                  break;
                } // case 8
                case 16: {
                  maxTracingBufferSizeKb_ = input.readUInt32();
                  bitField0_ |= 0x00000002;
                  break;
                } // case 16
                default: {
                  if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                    done = true; // was an endgroup tag
                  }
                  break;
                } // default:
              } // switch (tag)
            } // while (!done)
          } catch (com.google.protobuf.InvalidProtocolBufferException e) {
            throw e.unwrapIOException();
          } finally {
            onChanged();
          } // finally
          return this;
        }
        private int bitField0_;

        private long maxUploadPerDayBytes_ ;
        /**
         * <pre>
         * Override the default limit (in bytes) for uploading data to server within
         * a 24 hour period.
         * On R-, this override only affected userdebug builds. Since S, it also
         * affects user builds.
         * </pre>
         *
         * <code>optional uint64 max_upload_per_day_bytes = 1;</code>
         * @return Whether the maxUploadPerDayBytes field is set.
         */
        @java.lang.Override
        public boolean hasMaxUploadPerDayBytes() {
          return ((bitField0_ & 0x00000001) != 0);
        }
        /**
         * <pre>
         * Override the default limit (in bytes) for uploading data to server within
         * a 24 hour period.
         * On R-, this override only affected userdebug builds. Since S, it also
         * affects user builds.
         * </pre>
         *
         * <code>optional uint64 max_upload_per_day_bytes = 1;</code>
         * @return The maxUploadPerDayBytes.
         */
        @java.lang.Override
        public long getMaxUploadPerDayBytes() {
          return maxUploadPerDayBytes_;
        }
        /**
         * <pre>
         * Override the default limit (in bytes) for uploading data to server within
         * a 24 hour period.
         * On R-, this override only affected userdebug builds. Since S, it also
         * affects user builds.
         * </pre>
         *
         * <code>optional uint64 max_upload_per_day_bytes = 1;</code>
         * @param value The maxUploadPerDayBytes to set.
         * @return This builder for chaining.
         */
        public Builder setMaxUploadPerDayBytes(long value) {
          
          maxUploadPerDayBytes_ = value;
          bitField0_ |= 0x00000001;
          onChanged();
          return this;
        }
        /**
         * <pre>
         * Override the default limit (in bytes) for uploading data to server within
         * a 24 hour period.
         * On R-, this override only affected userdebug builds. Since S, it also
         * affects user builds.
         * </pre>
         *
         * <code>optional uint64 max_upload_per_day_bytes = 1;</code>
         * @return This builder for chaining.
         */
        public Builder clearMaxUploadPerDayBytes() {
          bitField0_ = (bitField0_ & ~0x00000001);
          maxUploadPerDayBytes_ = 0L;
          onChanged();
          return this;
        }

        private int maxTracingBufferSizeKb_ ;
        /**
         * <pre>
         * Overrides the guardrail for maximum trace buffer size.
         * Available on U+
         * </pre>
         *
         * <code>optional uint32 max_tracing_buffer_size_kb = 2;</code>
         * @return Whether the maxTracingBufferSizeKb field is set.
         */
        @java.lang.Override
        public boolean hasMaxTracingBufferSizeKb() {
          return ((bitField0_ & 0x00000002) != 0);
        }
        /**
         * <pre>
         * Overrides the guardrail for maximum trace buffer size.
         * Available on U+
         * </pre>
         *
         * <code>optional uint32 max_tracing_buffer_size_kb = 2;</code>
         * @return The maxTracingBufferSizeKb.
         */
        @java.lang.Override
        public int getMaxTracingBufferSizeKb() {
          return maxTracingBufferSizeKb_;
        }
        /**
         * <pre>
         * Overrides the guardrail for maximum trace buffer size.
         * Available on U+
         * </pre>
         *
         * <code>optional uint32 max_tracing_buffer_size_kb = 2;</code>
         * @param value The maxTracingBufferSizeKb to set.
         * @return This builder for chaining.
         */
        public Builder setMaxTracingBufferSizeKb(int value) {
          
          maxTracingBufferSizeKb_ = value;
          bitField0_ |= 0x00000002;
          onChanged();
          return this;
        }
        /**
         * <pre>
         * Overrides the guardrail for maximum trace buffer size.
         * Available on U+
         * </pre>
         *
         * <code>optional uint32 max_tracing_buffer_size_kb = 2;</code>
         * @return This builder for chaining.
         */
        public Builder clearMaxTracingBufferSizeKb() {
          bitField0_ = (bitField0_ & ~0x00000002);
          maxTracingBufferSizeKb_ = 0;
          onChanged();
          return this;
        }
        @java.lang.Override
        public final Builder setUnknownFields(
            final com.google.protobuf.UnknownFieldSet unknownFields) {
          return super.setUnknownFields(unknownFields);
        }

        @java.lang.Override
        public final Builder mergeUnknownFields(
            final com.google.protobuf.UnknownFieldSet unknownFields) {
          return super.mergeUnknownFields(unknownFields);
        }


        // @@protoc_insertion_point(builder_scope:perfetto.protos.TraceConfig.GuardrailOverrides)
      }

      // @@protoc_insertion_point(class_scope:perfetto.protos.TraceConfig.GuardrailOverrides)
      private static final perfetto.protos.TraceConfigOuterClass.TraceConfig.GuardrailOverrides DEFAULT_INSTANCE;
      static {
        DEFAULT_INSTANCE = new perfetto.protos.TraceConfigOuterClass.TraceConfig.GuardrailOverrides();
      }

      public static perfetto.protos.TraceConfigOuterClass.TraceConfig.GuardrailOverrides getDefaultInstance() {
        return DEFAULT_INSTANCE;
      }

      @java.lang.Deprecated public static final com.google.protobuf.Parser<GuardrailOverrides>
          PARSER = new com.google.protobuf.AbstractParser<GuardrailOverrides>() {
        @java.lang.Override
        public GuardrailOverrides parsePartialFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws com.google.protobuf.InvalidProtocolBufferException {
          Builder builder = newBuilder();
          try {
            builder.mergeFrom(input, extensionRegistry);
          } catch (com.google.protobuf.InvalidProtocolBufferException e) {
            throw e.setUnfinishedMessage(builder.buildPartial());
          } catch (com.google.protobuf.UninitializedMessageException e) {
            throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
          } catch (java.io.IOException e) {
            throw new com.google.protobuf.InvalidProtocolBufferException(e)
                .setUnfinishedMessage(builder.buildPartial());
          }
          return builder.buildPartial();
        }
      };

      public static com.google.protobuf.Parser<GuardrailOverrides> parser() {
        return PARSER;
      }

      @java.lang.Override
      public com.google.protobuf.Parser<GuardrailOverrides> getParserForType() {
        return PARSER;
      }

      @java.lang.Override
      public perfetto.protos.TraceConfigOuterClass.TraceConfig.GuardrailOverrides getDefaultInstanceForType() {
        return DEFAULT_INSTANCE;
      }

    }

    public interface TriggerConfigOrBuilder extends
        // @@protoc_insertion_point(interface_extends:perfetto.protos.TraceConfig.TriggerConfig)
        com.google.protobuf.MessageOrBuilder {

      /**
       * <code>optional .perfetto.protos.TraceConfig.TriggerConfig.TriggerMode trigger_mode = 1;</code>
       * @return Whether the triggerMode field is set.
       */
      boolean hasTriggerMode();
      /**
       * <code>optional .perfetto.protos.TraceConfig.TriggerConfig.TriggerMode trigger_mode = 1;</code>
       * @return The triggerMode.
       */
      perfetto.protos.TraceConfigOuterClass.TraceConfig.TriggerConfig.TriggerMode getTriggerMode();

      /**
       * <pre>
       * A list of triggers which are related to this configuration. If ANY
       * trigger is seen then an action will be performed based on |trigger_mode|.
       * </pre>
       *
       * <code>repeated .perfetto.protos.TraceConfig.TriggerConfig.Trigger triggers = 2;</code>
       */
      java.util.List<perfetto.protos.TraceConfigOuterClass.TraceConfig.TriggerConfig.Trigger> 
          getTriggersList();
      /**
       * <pre>
       * A list of triggers which are related to this configuration. If ANY
       * trigger is seen then an action will be performed based on |trigger_mode|.
       * </pre>
       *
       * <code>repeated .perfetto.protos.TraceConfig.TriggerConfig.Trigger triggers = 2;</code>
       */
      perfetto.protos.TraceConfigOuterClass.TraceConfig.TriggerConfig.Trigger getTriggers(int index);
      /**
       * <pre>
       * A list of triggers which are related to this configuration. If ANY
       * trigger is seen then an action will be performed based on |trigger_mode|.
       * </pre>
       *
       * <code>repeated .perfetto.protos.TraceConfig.TriggerConfig.Trigger triggers = 2;</code>
       */
      int getTriggersCount();
      /**
       * <pre>
       * A list of triggers which are related to this configuration. If ANY
       * trigger is seen then an action will be performed based on |trigger_mode|.
       * </pre>
       *
       * <code>repeated .perfetto.protos.TraceConfig.TriggerConfig.Trigger triggers = 2;</code>
       */
      java.util.List<? extends perfetto.protos.TraceConfigOuterClass.TraceConfig.TriggerConfig.TriggerOrBuilder> 
          getTriggersOrBuilderList();
      /**
       * <pre>
       * A list of triggers which are related to this configuration. If ANY
       * trigger is seen then an action will be performed based on |trigger_mode|.
       * </pre>
       *
       * <code>repeated .perfetto.protos.TraceConfig.TriggerConfig.Trigger triggers = 2;</code>
       */
      perfetto.protos.TraceConfigOuterClass.TraceConfig.TriggerConfig.TriggerOrBuilder getTriggersOrBuilder(
          int index);

      /**
       * <pre>
       * Required and must be positive if a TriggerConfig is specified. This is
       * how long this TraceConfig should wait for a trigger to arrive. After this
       * period of time if no trigger is seen the TracingSession will be cleaned
       * up.
       * </pre>
       *
       * <code>optional uint32 trigger_timeout_ms = 3;</code>
       * @return Whether the triggerTimeoutMs field is set.
       */
      boolean hasTriggerTimeoutMs();
      /**
       * <pre>
       * Required and must be positive if a TriggerConfig is specified. This is
       * how long this TraceConfig should wait for a trigger to arrive. After this
       * period of time if no trigger is seen the TracingSession will be cleaned
       * up.
       * </pre>
       *
       * <code>optional uint32 trigger_timeout_ms = 3;</code>
       * @return The triggerTimeoutMs.
       */
      int getTriggerTimeoutMs();
    }
    /**
     * <pre>
     * Triggers allow producers to start or stop the tracing session when an event
     * occurs.
     * For example if we are tracing probabilistically, most traces will be
     * uninteresting. Triggers allow us to keep only the interesting ones such as
     * those traces during which the device temperature reached a certain
     * threshold. In this case the producer can activate a trigger to keep
     * (STOP_TRACING) the trace, otherwise it can also begin a trace
     * (START_TRACING) because it knows something is about to happen.
     * </pre>
     *
     * Protobuf type {@code perfetto.protos.TraceConfig.TriggerConfig}
     */
    public static final class TriggerConfig extends
        com.google.protobuf.GeneratedMessageV3 implements
        // @@protoc_insertion_point(message_implements:perfetto.protos.TraceConfig.TriggerConfig)
        TriggerConfigOrBuilder {
    private static final long serialVersionUID = 0L;
      // Use TriggerConfig.newBuilder() to construct.
      private TriggerConfig(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
        super(builder);
      }
      private TriggerConfig() {
        triggerMode_ = 0;
        triggers_ = java.util.Collections.emptyList();
      }

      @java.lang.Override
      @SuppressWarnings({"unused"})
      protected java.lang.Object newInstance(
          UnusedPrivateParameter unused) {
        return new TriggerConfig();
      }

      @java.lang.Override
      public final com.google.protobuf.UnknownFieldSet
      getUnknownFields() {
        return this.unknownFields;
      }
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return perfetto.protos.TraceConfigOuterClass.internal_static_perfetto_protos_TraceConfig_TriggerConfig_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return perfetto.protos.TraceConfigOuterClass.internal_static_perfetto_protos_TraceConfig_TriggerConfig_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                perfetto.protos.TraceConfigOuterClass.TraceConfig.TriggerConfig.class, perfetto.protos.TraceConfigOuterClass.TraceConfig.TriggerConfig.Builder.class);
      }

      /**
       * Protobuf enum {@code perfetto.protos.TraceConfig.TriggerConfig.TriggerMode}
       */
      public enum TriggerMode
          implements com.google.protobuf.ProtocolMessageEnum {
        /**
         * <code>UNSPECIFIED = 0;</code>
         */
        UNSPECIFIED(0),
        /**
         * <pre>
         * When this mode is chosen, data sources are not started until one of the
         * |triggers| are received. This supports early initialization and fast
         * starting of the tracing system. On triggering, the session will then
         * record for |stop_delay_ms|. However if no trigger is seen
         * after |trigger_timeout_ms| the session will be stopped and no data will
         * be returned.
         * </pre>
         *
         * <code>START_TRACING = 1;</code>
         */
        START_TRACING(1),
        /**
         * <pre>
         * When this mode is chosen, the session will be started via the normal
         * EnableTracing() &amp; StartTracing(). If no trigger is ever seen
         * the session will be stopped after |trigger_timeout_ms| and no data will
         * be returned. However if triggered the trace will stop after
         * |stop_delay_ms| and any data in the buffer will be returned to the
         * consumer.
         * </pre>
         *
         * <code>STOP_TRACING = 2;</code>
         */
        STOP_TRACING(2),
        ;

        /**
         * <code>UNSPECIFIED = 0;</code>
         */
        public static final int UNSPECIFIED_VALUE = 0;
        /**
         * <pre>
         * When this mode is chosen, data sources are not started until one of the
         * |triggers| are received. This supports early initialization and fast
         * starting of the tracing system. On triggering, the session will then
         * record for |stop_delay_ms|. However if no trigger is seen
         * after |trigger_timeout_ms| the session will be stopped and no data will
         * be returned.
         * </pre>
         *
         * <code>START_TRACING = 1;</code>
         */
        public static final int START_TRACING_VALUE = 1;
        /**
         * <pre>
         * When this mode is chosen, the session will be started via the normal
         * EnableTracing() &amp; StartTracing(). If no trigger is ever seen
         * the session will be stopped after |trigger_timeout_ms| and no data will
         * be returned. However if triggered the trace will stop after
         * |stop_delay_ms| and any data in the buffer will be returned to the
         * consumer.
         * </pre>
         *
         * <code>STOP_TRACING = 2;</code>
         */
        public static final int STOP_TRACING_VALUE = 2;


        public final int getNumber() {
          return value;
        }

        /**
         * @param value The numeric wire value of the corresponding enum entry.
         * @return The enum associated with the given numeric wire value.
         * @deprecated Use {@link #forNumber(int)} instead.
         */
        @java.lang.Deprecated
        public static TriggerMode valueOf(int value) {
          return forNumber(value);
        }

        /**
         * @param value The numeric wire value of the corresponding enum entry.
         * @return The enum associated with the given numeric wire value.
         */
        public static TriggerMode forNumber(int value) {
          switch (value) {
            case 0: return UNSPECIFIED;
            case 1: return START_TRACING;
            case 2: return STOP_TRACING;
            default: return null;
          }
        }

        public static com.google.protobuf.Internal.EnumLiteMap<TriggerMode>
            internalGetValueMap() {
          return internalValueMap;
        }
        private static final com.google.protobuf.Internal.EnumLiteMap<
            TriggerMode> internalValueMap =
              new com.google.protobuf.Internal.EnumLiteMap<TriggerMode>() {
                public TriggerMode findValueByNumber(int number) {
                  return TriggerMode.forNumber(number);
                }
              };

        public final com.google.protobuf.Descriptors.EnumValueDescriptor
            getValueDescriptor() {
          return getDescriptor().getValues().get(ordinal());
        }
        public final com.google.protobuf.Descriptors.EnumDescriptor
            getDescriptorForType() {
          return getDescriptor();
        }
        public static final com.google.protobuf.Descriptors.EnumDescriptor
            getDescriptor() {
          return perfetto.protos.TraceConfigOuterClass.TraceConfig.TriggerConfig.getDescriptor().getEnumTypes().get(0);
        }

        private static final TriggerMode[] VALUES = values();

        public static TriggerMode valueOf(
            com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
          if (desc.getType() != getDescriptor()) {
            throw new java.lang.IllegalArgumentException(
              "EnumValueDescriptor is not for this type.");
          }
          return VALUES[desc.getIndex()];
        }

        private final int value;

        private TriggerMode(int value) {
          this.value = value;
        }

        // @@protoc_insertion_point(enum_scope:perfetto.protos.TraceConfig.TriggerConfig.TriggerMode)
      }

      public interface TriggerOrBuilder extends
          // @@protoc_insertion_point(interface_extends:perfetto.protos.TraceConfig.TriggerConfig.Trigger)
          com.google.protobuf.MessageOrBuilder {

        /**
         * <pre>
         * The producer must specify this name to activate the trigger.
         * </pre>
         *
         * <code>optional string name = 1;</code>
         * @return Whether the name field is set.
         */
        boolean hasName();
        /**
         * <pre>
         * The producer must specify this name to activate the trigger.
         * </pre>
         *
         * <code>optional string name = 1;</code>
         * @return The name.
         */
        java.lang.String getName();
        /**
         * <pre>
         * The producer must specify this name to activate the trigger.
         * </pre>
         *
         * <code>optional string name = 1;</code>
         * @return The bytes for name.
         */
        com.google.protobuf.ByteString
            getNameBytes();

        /**
         * <pre>
         * An std::regex that will match the producer that can activate this
         * trigger. This is optional. If unset any producers can activate this
         * trigger.
         * </pre>
         *
         * <code>optional string producer_name_regex = 2;</code>
         * @return Whether the producerNameRegex field is set.
         */
        boolean hasProducerNameRegex();
        /**
         * <pre>
         * An std::regex that will match the producer that can activate this
         * trigger. This is optional. If unset any producers can activate this
         * trigger.
         * </pre>
         *
         * <code>optional string producer_name_regex = 2;</code>
         * @return The producerNameRegex.
         */
        java.lang.String getProducerNameRegex();
        /**
         * <pre>
         * An std::regex that will match the producer that can activate this
         * trigger. This is optional. If unset any producers can activate this
         * trigger.
         * </pre>
         *
         * <code>optional string producer_name_regex = 2;</code>
         * @return The bytes for producerNameRegex.
         */
        com.google.protobuf.ByteString
            getProducerNameRegexBytes();

        /**
         * <pre>
         * After a trigger is received either in START_TRACING or STOP_TRACING
         * mode then the trace will end |stop_delay_ms| after triggering.
         * </pre>
         *
         * <code>optional uint32 stop_delay_ms = 3;</code>
         * @return Whether the stopDelayMs field is set.
         */
        boolean hasStopDelayMs();
        /**
         * <pre>
         * After a trigger is received either in START_TRACING or STOP_TRACING
         * mode then the trace will end |stop_delay_ms| after triggering.
         * </pre>
         *
         * <code>optional uint32 stop_delay_ms = 3;</code>
         * @return The stopDelayMs.
         */
        int getStopDelayMs();

        /**
         * <pre>
         * Limits the number of traces this trigger can start/stop in a rolling
         * 24 hour window. If this field is unset or zero, no limit is applied and
         * activiation of this trigger *always* starts/stops the trace.
         * </pre>
         *
         * <code>optional uint32 max_per_24_h = 4;</code>
         * @return Whether the maxPer24H field is set.
         */
        boolean hasMaxPer24H();
        /**
         * <pre>
         * Limits the number of traces this trigger can start/stop in a rolling
         * 24 hour window. If this field is unset or zero, no limit is applied and
         * activiation of this trigger *always* starts/stops the trace.
         * </pre>
         *
         * <code>optional uint32 max_per_24_h = 4;</code>
         * @return The maxPer24H.
         */
        int getMaxPer24H();

        /**
         * <pre>
         * A value between 0 and 1 which encodes the probability of skipping a
         * trigger with this name. This is useful for reducing the probability
         * of high-frequency triggers from dominating trace finaization. If this
         * field is unset or zero, the trigger will *never* be skipped. If this
         * field is greater than or equal to 1, this trigger will *always* be
         * skipped i.e. it will be as if this trigger was never included in the
         * first place.
         * This probability check is applied *before* any other limits. For
         * example, if |max_per_24_h| is also set, first we will check if the
         * probability bar is met and only then will we check the |max_per_24_h|
         * limit.
         * </pre>
         *
         * <code>optional double skip_probability = 5;</code>
         * @return Whether the skipProbability field is set.
         */
        boolean hasSkipProbability();
        /**
         * <pre>
         * A value between 0 and 1 which encodes the probability of skipping a
         * trigger with this name. This is useful for reducing the probability
         * of high-frequency triggers from dominating trace finaization. If this
         * field is unset or zero, the trigger will *never* be skipped. If this
         * field is greater than or equal to 1, this trigger will *always* be
         * skipped i.e. it will be as if this trigger was never included in the
         * first place.
         * This probability check is applied *before* any other limits. For
         * example, if |max_per_24_h| is also set, first we will check if the
         * probability bar is met and only then will we check the |max_per_24_h|
         * limit.
         * </pre>
         *
         * <code>optional double skip_probability = 5;</code>
         * @return The skipProbability.
         */
        double getSkipProbability();
      }
      /**
       * Protobuf type {@code perfetto.protos.TraceConfig.TriggerConfig.Trigger}
       */
      public static final class Trigger extends
          com.google.protobuf.GeneratedMessageV3 implements
          // @@protoc_insertion_point(message_implements:perfetto.protos.TraceConfig.TriggerConfig.Trigger)
          TriggerOrBuilder {
      private static final long serialVersionUID = 0L;
        // Use Trigger.newBuilder() to construct.
        private Trigger(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
          super(builder);
        }
        private Trigger() {
          name_ = "";
          producerNameRegex_ = "";
        }

        @java.lang.Override
        @SuppressWarnings({"unused"})
        protected java.lang.Object newInstance(
            UnusedPrivateParameter unused) {
          return new Trigger();
        }

        @java.lang.Override
        public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
          return this.unknownFields;
        }
        public static final com.google.protobuf.Descriptors.Descriptor
            getDescriptor() {
          return perfetto.protos.TraceConfigOuterClass.internal_static_perfetto_protos_TraceConfig_TriggerConfig_Trigger_descriptor;
        }

        @java.lang.Override
        protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
            internalGetFieldAccessorTable() {
          return perfetto.protos.TraceConfigOuterClass.internal_static_perfetto_protos_TraceConfig_TriggerConfig_Trigger_fieldAccessorTable
              .ensureFieldAccessorsInitialized(
                  perfetto.protos.TraceConfigOuterClass.TraceConfig.TriggerConfig.Trigger.class, perfetto.protos.TraceConfigOuterClass.TraceConfig.TriggerConfig.Trigger.Builder.class);
        }

        private int bitField0_;
        public static final int NAME_FIELD_NUMBER = 1;
        @SuppressWarnings("serial")
        private volatile java.lang.Object name_ = "";
        /**
         * <pre>
         * The producer must specify this name to activate the trigger.
         * </pre>
         *
         * <code>optional string name = 1;</code>
         * @return Whether the name field is set.
         */
        @java.lang.Override
        public boolean hasName() {
          return ((bitField0_ & 0x00000001) != 0);
        }
        /**
         * <pre>
         * The producer must specify this name to activate the trigger.
         * </pre>
         *
         * <code>optional string name = 1;</code>
         * @return The name.
         */
        @java.lang.Override
        public java.lang.String getName() {
          java.lang.Object ref = name_;
          if (ref instanceof java.lang.String) {
            return (java.lang.String) ref;
          } else {
            com.google.protobuf.ByteString bs = 
                (com.google.protobuf.ByteString) ref;
            java.lang.String s = bs.toStringUtf8();
            if (bs.isValidUtf8()) {
              name_ = s;
            }
            return s;
          }
        }
        /**
         * <pre>
         * The producer must specify this name to activate the trigger.
         * </pre>
         *
         * <code>optional string name = 1;</code>
         * @return The bytes for name.
         */
        @java.lang.Override
        public com.google.protobuf.ByteString
            getNameBytes() {
          java.lang.Object ref = name_;
          if (ref instanceof java.lang.String) {
            com.google.protobuf.ByteString b = 
                com.google.protobuf.ByteString.copyFromUtf8(
                    (java.lang.String) ref);
            name_ = b;
            return b;
          } else {
            return (com.google.protobuf.ByteString) ref;
          }
        }

        public static final int PRODUCER_NAME_REGEX_FIELD_NUMBER = 2;
        @SuppressWarnings("serial")
        private volatile java.lang.Object producerNameRegex_ = "";
        /**
         * <pre>
         * An std::regex that will match the producer that can activate this
         * trigger. This is optional. If unset any producers can activate this
         * trigger.
         * </pre>
         *
         * <code>optional string producer_name_regex = 2;</code>
         * @return Whether the producerNameRegex field is set.
         */
        @java.lang.Override
        public boolean hasProducerNameRegex() {
          return ((bitField0_ & 0x00000002) != 0);
        }
        /**
         * <pre>
         * An std::regex that will match the producer that can activate this
         * trigger. This is optional. If unset any producers can activate this
         * trigger.
         * </pre>
         *
         * <code>optional string producer_name_regex = 2;</code>
         * @return The producerNameRegex.
         */
        @java.lang.Override
        public java.lang.String getProducerNameRegex() {
          java.lang.Object ref = producerNameRegex_;
          if (ref instanceof java.lang.String) {
            return (java.lang.String) ref;
          } else {
            com.google.protobuf.ByteString bs = 
                (com.google.protobuf.ByteString) ref;
            java.lang.String s = bs.toStringUtf8();
            if (bs.isValidUtf8()) {
              producerNameRegex_ = s;
            }
            return s;
          }
        }
        /**
         * <pre>
         * An std::regex that will match the producer that can activate this
         * trigger. This is optional. If unset any producers can activate this
         * trigger.
         * </pre>
         *
         * <code>optional string producer_name_regex = 2;</code>
         * @return The bytes for producerNameRegex.
         */
        @java.lang.Override
        public com.google.protobuf.ByteString
            getProducerNameRegexBytes() {
          java.lang.Object ref = producerNameRegex_;
          if (ref instanceof java.lang.String) {
            com.google.protobuf.ByteString b = 
                com.google.protobuf.ByteString.copyFromUtf8(
                    (java.lang.String) ref);
            producerNameRegex_ = b;
            return b;
          } else {
            return (com.google.protobuf.ByteString) ref;
          }
        }

        public static final int STOP_DELAY_MS_FIELD_NUMBER = 3;
        private int stopDelayMs_ = 0;
        /**
         * <pre>
         * After a trigger is received either in START_TRACING or STOP_TRACING
         * mode then the trace will end |stop_delay_ms| after triggering.
         * </pre>
         *
         * <code>optional uint32 stop_delay_ms = 3;</code>
         * @return Whether the stopDelayMs field is set.
         */
        @java.lang.Override
        public boolean hasStopDelayMs() {
          return ((bitField0_ & 0x00000004) != 0);
        }
        /**
         * <pre>
         * After a trigger is received either in START_TRACING or STOP_TRACING
         * mode then the trace will end |stop_delay_ms| after triggering.
         * </pre>
         *
         * <code>optional uint32 stop_delay_ms = 3;</code>
         * @return The stopDelayMs.
         */
        @java.lang.Override
        public int getStopDelayMs() {
          return stopDelayMs_;
        }

        public static final int MAX_PER_24_H_FIELD_NUMBER = 4;
        private int maxPer24H_ = 0;
        /**
         * <pre>
         * Limits the number of traces this trigger can start/stop in a rolling
         * 24 hour window. If this field is unset or zero, no limit is applied and
         * activiation of this trigger *always* starts/stops the trace.
         * </pre>
         *
         * <code>optional uint32 max_per_24_h = 4;</code>
         * @return Whether the maxPer24H field is set.
         */
        @java.lang.Override
        public boolean hasMaxPer24H() {
          return ((bitField0_ & 0x00000008) != 0);
        }
        /**
         * <pre>
         * Limits the number of traces this trigger can start/stop in a rolling
         * 24 hour window. If this field is unset or zero, no limit is applied and
         * activiation of this trigger *always* starts/stops the trace.
         * </pre>
         *
         * <code>optional uint32 max_per_24_h = 4;</code>
         * @return The maxPer24H.
         */
        @java.lang.Override
        public int getMaxPer24H() {
          return maxPer24H_;
        }

        public static final int SKIP_PROBABILITY_FIELD_NUMBER = 5;
        private double skipProbability_ = 0D;
        /**
         * <pre>
         * A value between 0 and 1 which encodes the probability of skipping a
         * trigger with this name. This is useful for reducing the probability
         * of high-frequency triggers from dominating trace finaization. If this
         * field is unset or zero, the trigger will *never* be skipped. If this
         * field is greater than or equal to 1, this trigger will *always* be
         * skipped i.e. it will be as if this trigger was never included in the
         * first place.
         * This probability check is applied *before* any other limits. For
         * example, if |max_per_24_h| is also set, first we will check if the
         * probability bar is met and only then will we check the |max_per_24_h|
         * limit.
         * </pre>
         *
         * <code>optional double skip_probability = 5;</code>
         * @return Whether the skipProbability field is set.
         */
        @java.lang.Override
        public boolean hasSkipProbability() {
          return ((bitField0_ & 0x00000010) != 0);
        }
        /**
         * <pre>
         * A value between 0 and 1 which encodes the probability of skipping a
         * trigger with this name. This is useful for reducing the probability
         * of high-frequency triggers from dominating trace finaization. If this
         * field is unset or zero, the trigger will *never* be skipped. If this
         * field is greater than or equal to 1, this trigger will *always* be
         * skipped i.e. it will be as if this trigger was never included in the
         * first place.
         * This probability check is applied *before* any other limits. For
         * example, if |max_per_24_h| is also set, first we will check if the
         * probability bar is met and only then will we check the |max_per_24_h|
         * limit.
         * </pre>
         *
         * <code>optional double skip_probability = 5;</code>
         * @return The skipProbability.
         */
        @java.lang.Override
        public double getSkipProbability() {
          return skipProbability_;
        }

        private byte memoizedIsInitialized = -1;
        @java.lang.Override
        public final boolean isInitialized() {
          byte isInitialized = memoizedIsInitialized;
          if (isInitialized == 1) return true;
          if (isInitialized == 0) return false;

          memoizedIsInitialized = 1;
          return true;
        }

        @java.lang.Override
        public void writeTo(com.google.protobuf.CodedOutputStream output)
                            throws java.io.IOException {
          if (((bitField0_ & 0x00000001) != 0)) {
            com.google.protobuf.GeneratedMessageV3.writeString(output, 1, name_);
          }
          if (((bitField0_ & 0x00000002) != 0)) {
            com.google.protobuf.GeneratedMessageV3.writeString(output, 2, producerNameRegex_);
          }
          if (((bitField0_ & 0x00000004) != 0)) {
            output.writeUInt32(3, stopDelayMs_);
          }
          if (((bitField0_ & 0x00000008) != 0)) {
            output.writeUInt32(4, maxPer24H_);
          }
          if (((bitField0_ & 0x00000010) != 0)) {
            output.writeDouble(5, skipProbability_);
          }
          getUnknownFields().writeTo(output);
        }

        @java.lang.Override
        public int getSerializedSize() {
          int size = memoizedSize;
          if (size != -1) return size;

          size = 0;
          if (((bitField0_ & 0x00000001) != 0)) {
            size += com.google.protobuf.GeneratedMessageV3.computeStringSize(1, name_);
          }
          if (((bitField0_ & 0x00000002) != 0)) {
            size += com.google.protobuf.GeneratedMessageV3.computeStringSize(2, producerNameRegex_);
          }
          if (((bitField0_ & 0x00000004) != 0)) {
            size += com.google.protobuf.CodedOutputStream
              .computeUInt32Size(3, stopDelayMs_);
          }
          if (((bitField0_ & 0x00000008) != 0)) {
            size += com.google.protobuf.CodedOutputStream
              .computeUInt32Size(4, maxPer24H_);
          }
          if (((bitField0_ & 0x00000010) != 0)) {
            size += com.google.protobuf.CodedOutputStream
              .computeDoubleSize(5, skipProbability_);
          }
          size += getUnknownFields().getSerializedSize();
          memoizedSize = size;
          return size;
        }

        @java.lang.Override
        public boolean equals(final java.lang.Object obj) {
          if (obj == this) {
           return true;
          }
          if (!(obj instanceof perfetto.protos.TraceConfigOuterClass.TraceConfig.TriggerConfig.Trigger)) {
            return super.equals(obj);
          }
          perfetto.protos.TraceConfigOuterClass.TraceConfig.TriggerConfig.Trigger other = (perfetto.protos.TraceConfigOuterClass.TraceConfig.TriggerConfig.Trigger) obj;

          if (hasName() != other.hasName()) return false;
          if (hasName()) {
            if (!getName()
                .equals(other.getName())) return false;
          }
          if (hasProducerNameRegex() != other.hasProducerNameRegex()) return false;
          if (hasProducerNameRegex()) {
            if (!getProducerNameRegex()
                .equals(other.getProducerNameRegex())) return false;
          }
          if (hasStopDelayMs() != other.hasStopDelayMs()) return false;
          if (hasStopDelayMs()) {
            if (getStopDelayMs()
                != other.getStopDelayMs()) return false;
          }
          if (hasMaxPer24H() != other.hasMaxPer24H()) return false;
          if (hasMaxPer24H()) {
            if (getMaxPer24H()
                != other.getMaxPer24H()) return false;
          }
          if (hasSkipProbability() != other.hasSkipProbability()) return false;
          if (hasSkipProbability()) {
            if (java.lang.Double.doubleToLongBits(getSkipProbability())
                != java.lang.Double.doubleToLongBits(
                    other.getSkipProbability())) return false;
          }
          if (!getUnknownFields().equals(other.getUnknownFields())) return false;
          return true;
        }

        @java.lang.Override
        public int hashCode() {
          if (memoizedHashCode != 0) {
            return memoizedHashCode;
          }
          int hash = 41;
          hash = (19 * hash) + getDescriptor().hashCode();
          if (hasName()) {
            hash = (37 * hash) + NAME_FIELD_NUMBER;
            hash = (53 * hash) + getName().hashCode();
          }
          if (hasProducerNameRegex()) {
            hash = (37 * hash) + PRODUCER_NAME_REGEX_FIELD_NUMBER;
            hash = (53 * hash) + getProducerNameRegex().hashCode();
          }
          if (hasStopDelayMs()) {
            hash = (37 * hash) + STOP_DELAY_MS_FIELD_NUMBER;
            hash = (53 * hash) + getStopDelayMs();
          }
          if (hasMaxPer24H()) {
            hash = (37 * hash) + MAX_PER_24_H_FIELD_NUMBER;
            hash = (53 * hash) + getMaxPer24H();
          }
          if (hasSkipProbability()) {
            hash = (37 * hash) + SKIP_PROBABILITY_FIELD_NUMBER;
            hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
                java.lang.Double.doubleToLongBits(getSkipProbability()));
          }
          hash = (29 * hash) + getUnknownFields().hashCode();
          memoizedHashCode = hash;
          return hash;
        }

        public static perfetto.protos.TraceConfigOuterClass.TraceConfig.TriggerConfig.Trigger parseFrom(
            java.nio.ByteBuffer data)
            throws com.google.protobuf.InvalidProtocolBufferException {
          return PARSER.parseFrom(data);
        }
        public static perfetto.protos.TraceConfigOuterClass.TraceConfig.TriggerConfig.Trigger parseFrom(
            java.nio.ByteBuffer data,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws com.google.protobuf.InvalidProtocolBufferException {
          return PARSER.parseFrom(data, extensionRegistry);
        }
        public static perfetto.protos.TraceConfigOuterClass.TraceConfig.TriggerConfig.Trigger parseFrom(
            com.google.protobuf.ByteString data)
            throws com.google.protobuf.InvalidProtocolBufferException {
          return PARSER.parseFrom(data);
        }
        public static perfetto.protos.TraceConfigOuterClass.TraceConfig.TriggerConfig.Trigger parseFrom(
            com.google.protobuf.ByteString data,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws com.google.protobuf.InvalidProtocolBufferException {
          return PARSER.parseFrom(data, extensionRegistry);
        }
        public static perfetto.protos.TraceConfigOuterClass.TraceConfig.TriggerConfig.Trigger parseFrom(byte[] data)
            throws com.google.protobuf.InvalidProtocolBufferException {
          return PARSER.parseFrom(data);
        }
        public static perfetto.protos.TraceConfigOuterClass.TraceConfig.TriggerConfig.Trigger parseFrom(
            byte[] data,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws com.google.protobuf.InvalidProtocolBufferException {
          return PARSER.parseFrom(data, extensionRegistry);
        }
        public static perfetto.protos.TraceConfigOuterClass.TraceConfig.TriggerConfig.Trigger parseFrom(java.io.InputStream input)
            throws java.io.IOException {
          return com.google.protobuf.GeneratedMessageV3
              .parseWithIOException(PARSER, input);
        }
        public static perfetto.protos.TraceConfigOuterClass.TraceConfig.TriggerConfig.Trigger parseFrom(
            java.io.InputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws java.io.IOException {
          return com.google.protobuf.GeneratedMessageV3
              .parseWithIOException(PARSER, input, extensionRegistry);
        }
        public static perfetto.protos.TraceConfigOuterClass.TraceConfig.TriggerConfig.Trigger parseDelimitedFrom(java.io.InputStream input)
            throws java.io.IOException {
          return com.google.protobuf.GeneratedMessageV3
              .parseDelimitedWithIOException(PARSER, input);
        }
        public static perfetto.protos.TraceConfigOuterClass.TraceConfig.TriggerConfig.Trigger parseDelimitedFrom(
            java.io.InputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws java.io.IOException {
          return com.google.protobuf.GeneratedMessageV3
              .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
        }
        public static perfetto.protos.TraceConfigOuterClass.TraceConfig.TriggerConfig.Trigger parseFrom(
            com.google.protobuf.CodedInputStream input)
            throws java.io.IOException {
          return com.google.protobuf.GeneratedMessageV3
              .parseWithIOException(PARSER, input);
        }
        public static perfetto.protos.TraceConfigOuterClass.TraceConfig.TriggerConfig.Trigger parseFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws java.io.IOException {
          return com.google.protobuf.GeneratedMessageV3
              .parseWithIOException(PARSER, input, extensionRegistry);
        }

        @java.lang.Override
        public Builder newBuilderForType() { return newBuilder(); }
        public static Builder newBuilder() {
          return DEFAULT_INSTANCE.toBuilder();
        }
        public static Builder newBuilder(perfetto.protos.TraceConfigOuterClass.TraceConfig.TriggerConfig.Trigger prototype) {
          return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
        }
        @java.lang.Override
        public Builder toBuilder() {
          return this == DEFAULT_INSTANCE
              ? new Builder() : new Builder().mergeFrom(this);
        }

        @java.lang.Override
        protected Builder newBuilderForType(
            com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
          Builder builder = new Builder(parent);
          return builder;
        }
        /**
         * Protobuf type {@code perfetto.protos.TraceConfig.TriggerConfig.Trigger}
         */
        public static final class Builder extends
            com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
            // @@protoc_insertion_point(builder_implements:perfetto.protos.TraceConfig.TriggerConfig.Trigger)
            perfetto.protos.TraceConfigOuterClass.TraceConfig.TriggerConfig.TriggerOrBuilder {
          public static final com.google.protobuf.Descriptors.Descriptor
              getDescriptor() {
            return perfetto.protos.TraceConfigOuterClass.internal_static_perfetto_protos_TraceConfig_TriggerConfig_Trigger_descriptor;
          }

          @java.lang.Override
          protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
              internalGetFieldAccessorTable() {
            return perfetto.protos.TraceConfigOuterClass.internal_static_perfetto_protos_TraceConfig_TriggerConfig_Trigger_fieldAccessorTable
                .ensureFieldAccessorsInitialized(
                    perfetto.protos.TraceConfigOuterClass.TraceConfig.TriggerConfig.Trigger.class, perfetto.protos.TraceConfigOuterClass.TraceConfig.TriggerConfig.Trigger.Builder.class);
          }

          // Construct using perfetto.protos.TraceConfigOuterClass.TraceConfig.TriggerConfig.Trigger.newBuilder()
          private Builder() {

          }

          private Builder(
              com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
            super(parent);

          }
          @java.lang.Override
          public Builder clear() {
            super.clear();
            bitField0_ = 0;
            name_ = "";
            producerNameRegex_ = "";
            stopDelayMs_ = 0;
            maxPer24H_ = 0;
            skipProbability_ = 0D;
            return this;
          }

          @java.lang.Override
          public com.google.protobuf.Descriptors.Descriptor
              getDescriptorForType() {
            return perfetto.protos.TraceConfigOuterClass.internal_static_perfetto_protos_TraceConfig_TriggerConfig_Trigger_descriptor;
          }

          @java.lang.Override
          public perfetto.protos.TraceConfigOuterClass.TraceConfig.TriggerConfig.Trigger getDefaultInstanceForType() {
            return perfetto.protos.TraceConfigOuterClass.TraceConfig.TriggerConfig.Trigger.getDefaultInstance();
          }

          @java.lang.Override
          public perfetto.protos.TraceConfigOuterClass.TraceConfig.TriggerConfig.Trigger build() {
            perfetto.protos.TraceConfigOuterClass.TraceConfig.TriggerConfig.Trigger result = buildPartial();
            if (!result.isInitialized()) {
              throw newUninitializedMessageException(result);
            }
            return result;
          }

          @java.lang.Override
          public perfetto.protos.TraceConfigOuterClass.TraceConfig.TriggerConfig.Trigger buildPartial() {
            perfetto.protos.TraceConfigOuterClass.TraceConfig.TriggerConfig.Trigger result = new perfetto.protos.TraceConfigOuterClass.TraceConfig.TriggerConfig.Trigger(this);
            if (bitField0_ != 0) { buildPartial0(result); }
            onBuilt();
            return result;
          }

          private void buildPartial0(perfetto.protos.TraceConfigOuterClass.TraceConfig.TriggerConfig.Trigger result) {
            int from_bitField0_ = bitField0_;
            int to_bitField0_ = 0;
            if (((from_bitField0_ & 0x00000001) != 0)) {
              result.name_ = name_;
              to_bitField0_ |= 0x00000001;
            }
            if (((from_bitField0_ & 0x00000002) != 0)) {
              result.producerNameRegex_ = producerNameRegex_;
              to_bitField0_ |= 0x00000002;
            }
            if (((from_bitField0_ & 0x00000004) != 0)) {
              result.stopDelayMs_ = stopDelayMs_;
              to_bitField0_ |= 0x00000004;
            }
            if (((from_bitField0_ & 0x00000008) != 0)) {
              result.maxPer24H_ = maxPer24H_;
              to_bitField0_ |= 0x00000008;
            }
            if (((from_bitField0_ & 0x00000010) != 0)) {
              result.skipProbability_ = skipProbability_;
              to_bitField0_ |= 0x00000010;
            }
            result.bitField0_ |= to_bitField0_;
          }

          @java.lang.Override
          public Builder clone() {
            return super.clone();
          }
          @java.lang.Override
          public Builder setField(
              com.google.protobuf.Descriptors.FieldDescriptor field,
              java.lang.Object value) {
            return super.setField(field, value);
          }
          @java.lang.Override
          public Builder clearField(
              com.google.protobuf.Descriptors.FieldDescriptor field) {
            return super.clearField(field);
          }
          @java.lang.Override
          public Builder clearOneof(
              com.google.protobuf.Descriptors.OneofDescriptor oneof) {
            return super.clearOneof(oneof);
          }
          @java.lang.Override
          public Builder setRepeatedField(
              com.google.protobuf.Descriptors.FieldDescriptor field,
              int index, java.lang.Object value) {
            return super.setRepeatedField(field, index, value);
          }
          @java.lang.Override
          public Builder addRepeatedField(
              com.google.protobuf.Descriptors.FieldDescriptor field,
              java.lang.Object value) {
            return super.addRepeatedField(field, value);
          }
          @java.lang.Override
          public Builder mergeFrom(com.google.protobuf.Message other) {
            if (other instanceof perfetto.protos.TraceConfigOuterClass.TraceConfig.TriggerConfig.Trigger) {
              return mergeFrom((perfetto.protos.TraceConfigOuterClass.TraceConfig.TriggerConfig.Trigger)other);
            } else {
              super.mergeFrom(other);
              return this;
            }
          }

          public Builder mergeFrom(perfetto.protos.TraceConfigOuterClass.TraceConfig.TriggerConfig.Trigger other) {
            if (other == perfetto.protos.TraceConfigOuterClass.TraceConfig.TriggerConfig.Trigger.getDefaultInstance()) return this;
            if (other.hasName()) {
              name_ = other.name_;
              bitField0_ |= 0x00000001;
              onChanged();
            }
            if (other.hasProducerNameRegex()) {
              producerNameRegex_ = other.producerNameRegex_;
              bitField0_ |= 0x00000002;
              onChanged();
            }
            if (other.hasStopDelayMs()) {
              setStopDelayMs(other.getStopDelayMs());
            }
            if (other.hasMaxPer24H()) {
              setMaxPer24H(other.getMaxPer24H());
            }
            if (other.hasSkipProbability()) {
              setSkipProbability(other.getSkipProbability());
            }
            this.mergeUnknownFields(other.getUnknownFields());
            onChanged();
            return this;
          }

          @java.lang.Override
          public final boolean isInitialized() {
            return true;
          }

          @java.lang.Override
          public Builder mergeFrom(
              com.google.protobuf.CodedInputStream input,
              com.google.protobuf.ExtensionRegistryLite extensionRegistry)
              throws java.io.IOException {
            if (extensionRegistry == null) {
              throw new java.lang.NullPointerException();
            }
            try {
              boolean done = false;
              while (!done) {
                int tag = input.readTag();
                switch (tag) {
                  case 0:
                    done = true;
                    break;
                  case 10: {
                    name_ = input.readBytes();
                    bitField0_ |= 0x00000001;
                    break;
                  } // case 10
                  case 18: {
                    producerNameRegex_ = input.readBytes();
                    bitField0_ |= 0x00000002;
                    break;
                  } // case 18
                  case 24: {
                    stopDelayMs_ = input.readUInt32();
                    bitField0_ |= 0x00000004;
                    break;
                  } // case 24
                  case 32: {
                    maxPer24H_ = input.readUInt32();
                    bitField0_ |= 0x00000008;
                    break;
                  } // case 32
                  case 41: {
                    skipProbability_ = input.readDouble();
                    bitField0_ |= 0x00000010;
                    break;
                  } // case 41
                  default: {
                    if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                      done = true; // was an endgroup tag
                    }
                    break;
                  } // default:
                } // switch (tag)
              } // while (!done)
            } catch (com.google.protobuf.InvalidProtocolBufferException e) {
              throw e.unwrapIOException();
            } finally {
              onChanged();
            } // finally
            return this;
          }
          private int bitField0_;

          private java.lang.Object name_ = "";
          /**
           * <pre>
           * The producer must specify this name to activate the trigger.
           * </pre>
           *
           * <code>optional string name = 1;</code>
           * @return Whether the name field is set.
           */
          public boolean hasName() {
            return ((bitField0_ & 0x00000001) != 0);
          }
          /**
           * <pre>
           * The producer must specify this name to activate the trigger.
           * </pre>
           *
           * <code>optional string name = 1;</code>
           * @return The name.
           */
          public java.lang.String getName() {
            java.lang.Object ref = name_;
            if (!(ref instanceof java.lang.String)) {
              com.google.protobuf.ByteString bs =
                  (com.google.protobuf.ByteString) ref;
              java.lang.String s = bs.toStringUtf8();
              if (bs.isValidUtf8()) {
                name_ = s;
              }
              return s;
            } else {
              return (java.lang.String) ref;
            }
          }
          /**
           * <pre>
           * The producer must specify this name to activate the trigger.
           * </pre>
           *
           * <code>optional string name = 1;</code>
           * @return The bytes for name.
           */
          public com.google.protobuf.ByteString
              getNameBytes() {
            java.lang.Object ref = name_;
            if (ref instanceof String) {
              com.google.protobuf.ByteString b = 
                  com.google.protobuf.ByteString.copyFromUtf8(
                      (java.lang.String) ref);
              name_ = b;
              return b;
            } else {
              return (com.google.protobuf.ByteString) ref;
            }
          }
          /**
           * <pre>
           * The producer must specify this name to activate the trigger.
           * </pre>
           *
           * <code>optional string name = 1;</code>
           * @param value The name to set.
           * @return This builder for chaining.
           */
          public Builder setName(
              java.lang.String value) {
            if (value == null) { throw new NullPointerException(); }
            name_ = value;
            bitField0_ |= 0x00000001;
            onChanged();
            return this;
          }
          /**
           * <pre>
           * The producer must specify this name to activate the trigger.
           * </pre>
           *
           * <code>optional string name = 1;</code>
           * @return This builder for chaining.
           */
          public Builder clearName() {
            name_ = getDefaultInstance().getName();
            bitField0_ = (bitField0_ & ~0x00000001);
            onChanged();
            return this;
          }
          /**
           * <pre>
           * The producer must specify this name to activate the trigger.
           * </pre>
           *
           * <code>optional string name = 1;</code>
           * @param value The bytes for name to set.
           * @return This builder for chaining.
           */
          public Builder setNameBytes(
              com.google.protobuf.ByteString value) {
            if (value == null) { throw new NullPointerException(); }
            name_ = value;
            bitField0_ |= 0x00000001;
            onChanged();
            return this;
          }

          private java.lang.Object producerNameRegex_ = "";
          /**
           * <pre>
           * An std::regex that will match the producer that can activate this
           * trigger. This is optional. If unset any producers can activate this
           * trigger.
           * </pre>
           *
           * <code>optional string producer_name_regex = 2;</code>
           * @return Whether the producerNameRegex field is set.
           */
          public boolean hasProducerNameRegex() {
            return ((bitField0_ & 0x00000002) != 0);
          }
          /**
           * <pre>
           * An std::regex that will match the producer that can activate this
           * trigger. This is optional. If unset any producers can activate this
           * trigger.
           * </pre>
           *
           * <code>optional string producer_name_regex = 2;</code>
           * @return The producerNameRegex.
           */
          public java.lang.String getProducerNameRegex() {
            java.lang.Object ref = producerNameRegex_;
            if (!(ref instanceof java.lang.String)) {
              com.google.protobuf.ByteString bs =
                  (com.google.protobuf.ByteString) ref;
              java.lang.String s = bs.toStringUtf8();
              if (bs.isValidUtf8()) {
                producerNameRegex_ = s;
              }
              return s;
            } else {
              return (java.lang.String) ref;
            }
          }
          /**
           * <pre>
           * An std::regex that will match the producer that can activate this
           * trigger. This is optional. If unset any producers can activate this
           * trigger.
           * </pre>
           *
           * <code>optional string producer_name_regex = 2;</code>
           * @return The bytes for producerNameRegex.
           */
          public com.google.protobuf.ByteString
              getProducerNameRegexBytes() {
            java.lang.Object ref = producerNameRegex_;
            if (ref instanceof String) {
              com.google.protobuf.ByteString b = 
                  com.google.protobuf.ByteString.copyFromUtf8(
                      (java.lang.String) ref);
              producerNameRegex_ = b;
              return b;
            } else {
              return (com.google.protobuf.ByteString) ref;
            }
          }
          /**
           * <pre>
           * An std::regex that will match the producer that can activate this
           * trigger. This is optional. If unset any producers can activate this
           * trigger.
           * </pre>
           *
           * <code>optional string producer_name_regex = 2;</code>
           * @param value The producerNameRegex to set.
           * @return This builder for chaining.
           */
          public Builder setProducerNameRegex(
              java.lang.String value) {
            if (value == null) { throw new NullPointerException(); }
            producerNameRegex_ = value;
            bitField0_ |= 0x00000002;
            onChanged();
            return this;
          }
          /**
           * <pre>
           * An std::regex that will match the producer that can activate this
           * trigger. This is optional. If unset any producers can activate this
           * trigger.
           * </pre>
           *
           * <code>optional string producer_name_regex = 2;</code>
           * @return This builder for chaining.
           */
          public Builder clearProducerNameRegex() {
            producerNameRegex_ = getDefaultInstance().getProducerNameRegex();
            bitField0_ = (bitField0_ & ~0x00000002);
            onChanged();
            return this;
          }
          /**
           * <pre>
           * An std::regex that will match the producer that can activate this
           * trigger. This is optional. If unset any producers can activate this
           * trigger.
           * </pre>
           *
           * <code>optional string producer_name_regex = 2;</code>
           * @param value The bytes for producerNameRegex to set.
           * @return This builder for chaining.
           */
          public Builder setProducerNameRegexBytes(
              com.google.protobuf.ByteString value) {
            if (value == null) { throw new NullPointerException(); }
            producerNameRegex_ = value;
            bitField0_ |= 0x00000002;
            onChanged();
            return this;
          }

          private int stopDelayMs_ ;
          /**
           * <pre>
           * After a trigger is received either in START_TRACING or STOP_TRACING
           * mode then the trace will end |stop_delay_ms| after triggering.
           * </pre>
           *
           * <code>optional uint32 stop_delay_ms = 3;</code>
           * @return Whether the stopDelayMs field is set.
           */
          @java.lang.Override
          public boolean hasStopDelayMs() {
            return ((bitField0_ & 0x00000004) != 0);
          }
          /**
           * <pre>
           * After a trigger is received either in START_TRACING or STOP_TRACING
           * mode then the trace will end |stop_delay_ms| after triggering.
           * </pre>
           *
           * <code>optional uint32 stop_delay_ms = 3;</code>
           * @return The stopDelayMs.
           */
          @java.lang.Override
          public int getStopDelayMs() {
            return stopDelayMs_;
          }
          /**
           * <pre>
           * After a trigger is received either in START_TRACING or STOP_TRACING
           * mode then the trace will end |stop_delay_ms| after triggering.
           * </pre>
           *
           * <code>optional uint32 stop_delay_ms = 3;</code>
           * @param value The stopDelayMs to set.
           * @return This builder for chaining.
           */
          public Builder setStopDelayMs(int value) {
            
            stopDelayMs_ = value;
            bitField0_ |= 0x00000004;
            onChanged();
            return this;
          }
          /**
           * <pre>
           * After a trigger is received either in START_TRACING or STOP_TRACING
           * mode then the trace will end |stop_delay_ms| after triggering.
           * </pre>
           *
           * <code>optional uint32 stop_delay_ms = 3;</code>
           * @return This builder for chaining.
           */
          public Builder clearStopDelayMs() {
            bitField0_ = (bitField0_ & ~0x00000004);
            stopDelayMs_ = 0;
            onChanged();
            return this;
          }

          private int maxPer24H_ ;
          /**
           * <pre>
           * Limits the number of traces this trigger can start/stop in a rolling
           * 24 hour window. If this field is unset or zero, no limit is applied and
           * activiation of this trigger *always* starts/stops the trace.
           * </pre>
           *
           * <code>optional uint32 max_per_24_h = 4;</code>
           * @return Whether the maxPer24H field is set.
           */
          @java.lang.Override
          public boolean hasMaxPer24H() {
            return ((bitField0_ & 0x00000008) != 0);
          }
          /**
           * <pre>
           * Limits the number of traces this trigger can start/stop in a rolling
           * 24 hour window. If this field is unset or zero, no limit is applied and
           * activiation of this trigger *always* starts/stops the trace.
           * </pre>
           *
           * <code>optional uint32 max_per_24_h = 4;</code>
           * @return The maxPer24H.
           */
          @java.lang.Override
          public int getMaxPer24H() {
            return maxPer24H_;
          }
          /**
           * <pre>
           * Limits the number of traces this trigger can start/stop in a rolling
           * 24 hour window. If this field is unset or zero, no limit is applied and
           * activiation of this trigger *always* starts/stops the trace.
           * </pre>
           *
           * <code>optional uint32 max_per_24_h = 4;</code>
           * @param value The maxPer24H to set.
           * @return This builder for chaining.
           */
          public Builder setMaxPer24H(int value) {
            
            maxPer24H_ = value;
            bitField0_ |= 0x00000008;
            onChanged();
            return this;
          }
          /**
           * <pre>
           * Limits the number of traces this trigger can start/stop in a rolling
           * 24 hour window. If this field is unset or zero, no limit is applied and
           * activiation of this trigger *always* starts/stops the trace.
           * </pre>
           *
           * <code>optional uint32 max_per_24_h = 4;</code>
           * @return This builder for chaining.
           */
          public Builder clearMaxPer24H() {
            bitField0_ = (bitField0_ & ~0x00000008);
            maxPer24H_ = 0;
            onChanged();
            return this;
          }

          private double skipProbability_ ;
          /**
           * <pre>
           * A value between 0 and 1 which encodes the probability of skipping a
           * trigger with this name. This is useful for reducing the probability
           * of high-frequency triggers from dominating trace finaization. If this
           * field is unset or zero, the trigger will *never* be skipped. If this
           * field is greater than or equal to 1, this trigger will *always* be
           * skipped i.e. it will be as if this trigger was never included in the
           * first place.
           * This probability check is applied *before* any other limits. For
           * example, if |max_per_24_h| is also set, first we will check if the
           * probability bar is met and only then will we check the |max_per_24_h|
           * limit.
           * </pre>
           *
           * <code>optional double skip_probability = 5;</code>
           * @return Whether the skipProbability field is set.
           */
          @java.lang.Override
          public boolean hasSkipProbability() {
            return ((bitField0_ & 0x00000010) != 0);
          }
          /**
           * <pre>
           * A value between 0 and 1 which encodes the probability of skipping a
           * trigger with this name. This is useful for reducing the probability
           * of high-frequency triggers from dominating trace finaization. If this
           * field is unset or zero, the trigger will *never* be skipped. If this
           * field is greater than or equal to 1, this trigger will *always* be
           * skipped i.e. it will be as if this trigger was never included in the
           * first place.
           * This probability check is applied *before* any other limits. For
           * example, if |max_per_24_h| is also set, first we will check if the
           * probability bar is met and only then will we check the |max_per_24_h|
           * limit.
           * </pre>
           *
           * <code>optional double skip_probability = 5;</code>
           * @return The skipProbability.
           */
          @java.lang.Override
          public double getSkipProbability() {
            return skipProbability_;
          }
          /**
           * <pre>
           * A value between 0 and 1 which encodes the probability of skipping a
           * trigger with this name. This is useful for reducing the probability
           * of high-frequency triggers from dominating trace finaization. If this
           * field is unset or zero, the trigger will *never* be skipped. If this
           * field is greater than or equal to 1, this trigger will *always* be
           * skipped i.e. it will be as if this trigger was never included in the
           * first place.
           * This probability check is applied *before* any other limits. For
           * example, if |max_per_24_h| is also set, first we will check if the
           * probability bar is met and only then will we check the |max_per_24_h|
           * limit.
           * </pre>
           *
           * <code>optional double skip_probability = 5;</code>
           * @param value The skipProbability to set.
           * @return This builder for chaining.
           */
          public Builder setSkipProbability(double value) {
            
            skipProbability_ = value;
            bitField0_ |= 0x00000010;
            onChanged();
            return this;
          }
          /**
           * <pre>
           * A value between 0 and 1 which encodes the probability of skipping a
           * trigger with this name. This is useful for reducing the probability
           * of high-frequency triggers from dominating trace finaization. If this
           * field is unset or zero, the trigger will *never* be skipped. If this
           * field is greater than or equal to 1, this trigger will *always* be
           * skipped i.e. it will be as if this trigger was never included in the
           * first place.
           * This probability check is applied *before* any other limits. For
           * example, if |max_per_24_h| is also set, first we will check if the
           * probability bar is met and only then will we check the |max_per_24_h|
           * limit.
           * </pre>
           *
           * <code>optional double skip_probability = 5;</code>
           * @return This builder for chaining.
           */
          public Builder clearSkipProbability() {
            bitField0_ = (bitField0_ & ~0x00000010);
            skipProbability_ = 0D;
            onChanged();
            return this;
          }
          @java.lang.Override
          public final Builder setUnknownFields(
              final com.google.protobuf.UnknownFieldSet unknownFields) {
            return super.setUnknownFields(unknownFields);
          }

          @java.lang.Override
          public final Builder mergeUnknownFields(
              final com.google.protobuf.UnknownFieldSet unknownFields) {
            return super.mergeUnknownFields(unknownFields);
          }


          // @@protoc_insertion_point(builder_scope:perfetto.protos.TraceConfig.TriggerConfig.Trigger)
        }

        // @@protoc_insertion_point(class_scope:perfetto.protos.TraceConfig.TriggerConfig.Trigger)
        private static final perfetto.protos.TraceConfigOuterClass.TraceConfig.TriggerConfig.Trigger DEFAULT_INSTANCE;
        static {
          DEFAULT_INSTANCE = new perfetto.protos.TraceConfigOuterClass.TraceConfig.TriggerConfig.Trigger();
        }

        public static perfetto.protos.TraceConfigOuterClass.TraceConfig.TriggerConfig.Trigger getDefaultInstance() {
          return DEFAULT_INSTANCE;
        }

        @java.lang.Deprecated public static final com.google.protobuf.Parser<Trigger>
            PARSER = new com.google.protobuf.AbstractParser<Trigger>() {
          @java.lang.Override
          public Trigger parsePartialFrom(
              com.google.protobuf.CodedInputStream input,
              com.google.protobuf.ExtensionRegistryLite extensionRegistry)
              throws com.google.protobuf.InvalidProtocolBufferException {
            Builder builder = newBuilder();
            try {
              builder.mergeFrom(input, extensionRegistry);
            } catch (com.google.protobuf.InvalidProtocolBufferException e) {
              throw e.setUnfinishedMessage(builder.buildPartial());
            } catch (com.google.protobuf.UninitializedMessageException e) {
              throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
            } catch (java.io.IOException e) {
              throw new com.google.protobuf.InvalidProtocolBufferException(e)
                  .setUnfinishedMessage(builder.buildPartial());
            }
            return builder.buildPartial();
          }
        };

        public static com.google.protobuf.Parser<Trigger> parser() {
          return PARSER;
        }

        @java.lang.Override
        public com.google.protobuf.Parser<Trigger> getParserForType() {
          return PARSER;
        }

        @java.lang.Override
        public perfetto.protos.TraceConfigOuterClass.TraceConfig.TriggerConfig.Trigger getDefaultInstanceForType() {
          return DEFAULT_INSTANCE;
        }

      }

      private int bitField0_;
      public static final int TRIGGER_MODE_FIELD_NUMBER = 1;
      private int triggerMode_ = 0;
      /**
       * <code>optional .perfetto.protos.TraceConfig.TriggerConfig.TriggerMode trigger_mode = 1;</code>
       * @return Whether the triggerMode field is set.
       */
      @java.lang.Override public boolean hasTriggerMode() {
        return ((bitField0_ & 0x00000001) != 0);
      }
      /**
       * <code>optional .perfetto.protos.TraceConfig.TriggerConfig.TriggerMode trigger_mode = 1;</code>
       * @return The triggerMode.
       */
      @java.lang.Override public perfetto.protos.TraceConfigOuterClass.TraceConfig.TriggerConfig.TriggerMode getTriggerMode() {
        perfetto.protos.TraceConfigOuterClass.TraceConfig.TriggerConfig.TriggerMode result = perfetto.protos.TraceConfigOuterClass.TraceConfig.TriggerConfig.TriggerMode.forNumber(triggerMode_);
        return result == null ? perfetto.protos.TraceConfigOuterClass.TraceConfig.TriggerConfig.TriggerMode.UNSPECIFIED : result;
      }

      public static final int TRIGGERS_FIELD_NUMBER = 2;
      @SuppressWarnings("serial")
      private java.util.List<perfetto.protos.TraceConfigOuterClass.TraceConfig.TriggerConfig.Trigger> triggers_;
      /**
       * <pre>
       * A list of triggers which are related to this configuration. If ANY
       * trigger is seen then an action will be performed based on |trigger_mode|.
       * </pre>
       *
       * <code>repeated .perfetto.protos.TraceConfig.TriggerConfig.Trigger triggers = 2;</code>
       */
      @java.lang.Override
      public java.util.List<perfetto.protos.TraceConfigOuterClass.TraceConfig.TriggerConfig.Trigger> getTriggersList() {
        return triggers_;
      }
      /**
       * <pre>
       * A list of triggers which are related to this configuration. If ANY
       * trigger is seen then an action will be performed based on |trigger_mode|.
       * </pre>
       *
       * <code>repeated .perfetto.protos.TraceConfig.TriggerConfig.Trigger triggers = 2;</code>
       */
      @java.lang.Override
      public java.util.List<? extends perfetto.protos.TraceConfigOuterClass.TraceConfig.TriggerConfig.TriggerOrBuilder> 
          getTriggersOrBuilderList() {
        return triggers_;
      }
      /**
       * <pre>
       * A list of triggers which are related to this configuration. If ANY
       * trigger is seen then an action will be performed based on |trigger_mode|.
       * </pre>
       *
       * <code>repeated .perfetto.protos.TraceConfig.TriggerConfig.Trigger triggers = 2;</code>
       */
      @java.lang.Override
      public int getTriggersCount() {
        return triggers_.size();
      }
      /**
       * <pre>
       * A list of triggers which are related to this configuration. If ANY
       * trigger is seen then an action will be performed based on |trigger_mode|.
       * </pre>
       *
       * <code>repeated .perfetto.protos.TraceConfig.TriggerConfig.Trigger triggers = 2;</code>
       */
      @java.lang.Override
      public perfetto.protos.TraceConfigOuterClass.TraceConfig.TriggerConfig.Trigger getTriggers(int index) {
        return triggers_.get(index);
      }
      /**
       * <pre>
       * A list of triggers which are related to this configuration. If ANY
       * trigger is seen then an action will be performed based on |trigger_mode|.
       * </pre>
       *
       * <code>repeated .perfetto.protos.TraceConfig.TriggerConfig.Trigger triggers = 2;</code>
       */
      @java.lang.Override
      public perfetto.protos.TraceConfigOuterClass.TraceConfig.TriggerConfig.TriggerOrBuilder getTriggersOrBuilder(
          int index) {
        return triggers_.get(index);
      }

      public static final int TRIGGER_TIMEOUT_MS_FIELD_NUMBER = 3;
      private int triggerTimeoutMs_ = 0;
      /**
       * <pre>
       * Required and must be positive if a TriggerConfig is specified. This is
       * how long this TraceConfig should wait for a trigger to arrive. After this
       * period of time if no trigger is seen the TracingSession will be cleaned
       * up.
       * </pre>
       *
       * <code>optional uint32 trigger_timeout_ms = 3;</code>
       * @return Whether the triggerTimeoutMs field is set.
       */
      @java.lang.Override
      public boolean hasTriggerTimeoutMs() {
        return ((bitField0_ & 0x00000002) != 0);
      }
      /**
       * <pre>
       * Required and must be positive if a TriggerConfig is specified. This is
       * how long this TraceConfig should wait for a trigger to arrive. After this
       * period of time if no trigger is seen the TracingSession will be cleaned
       * up.
       * </pre>
       *
       * <code>optional uint32 trigger_timeout_ms = 3;</code>
       * @return The triggerTimeoutMs.
       */
      @java.lang.Override
      public int getTriggerTimeoutMs() {
        return triggerTimeoutMs_;
      }

      private byte memoizedIsInitialized = -1;
      @java.lang.Override
      public final boolean isInitialized() {
        byte isInitialized = memoizedIsInitialized;
        if (isInitialized == 1) return true;
        if (isInitialized == 0) return false;

        memoizedIsInitialized = 1;
        return true;
      }

      @java.lang.Override
      public void writeTo(com.google.protobuf.CodedOutputStream output)
                          throws java.io.IOException {
        if (((bitField0_ & 0x00000001) != 0)) {
          output.writeEnum(1, triggerMode_);
        }
        for (int i = 0; i < triggers_.size(); i++) {
          output.writeMessage(2, triggers_.get(i));
        }
        if (((bitField0_ & 0x00000002) != 0)) {
          output.writeUInt32(3, triggerTimeoutMs_);
        }
        getUnknownFields().writeTo(output);
      }

      @java.lang.Override
      public int getSerializedSize() {
        int size = memoizedSize;
        if (size != -1) return size;

        size = 0;
        if (((bitField0_ & 0x00000001) != 0)) {
          size += com.google.protobuf.CodedOutputStream
            .computeEnumSize(1, triggerMode_);
        }
        for (int i = 0; i < triggers_.size(); i++) {
          size += com.google.protobuf.CodedOutputStream
            .computeMessageSize(2, triggers_.get(i));
        }
        if (((bitField0_ & 0x00000002) != 0)) {
          size += com.google.protobuf.CodedOutputStream
            .computeUInt32Size(3, triggerTimeoutMs_);
        }
        size += getUnknownFields().getSerializedSize();
        memoizedSize = size;
        return size;
      }

      @java.lang.Override
      public boolean equals(final java.lang.Object obj) {
        if (obj == this) {
         return true;
        }
        if (!(obj instanceof perfetto.protos.TraceConfigOuterClass.TraceConfig.TriggerConfig)) {
          return super.equals(obj);
        }
        perfetto.protos.TraceConfigOuterClass.TraceConfig.TriggerConfig other = (perfetto.protos.TraceConfigOuterClass.TraceConfig.TriggerConfig) obj;

        if (hasTriggerMode() != other.hasTriggerMode()) return false;
        if (hasTriggerMode()) {
          if (triggerMode_ != other.triggerMode_) return false;
        }
        if (!getTriggersList()
            .equals(other.getTriggersList())) return false;
        if (hasTriggerTimeoutMs() != other.hasTriggerTimeoutMs()) return false;
        if (hasTriggerTimeoutMs()) {
          if (getTriggerTimeoutMs()
              != other.getTriggerTimeoutMs()) return false;
        }
        if (!getUnknownFields().equals(other.getUnknownFields())) return false;
        return true;
      }

      @java.lang.Override
      public int hashCode() {
        if (memoizedHashCode != 0) {
          return memoizedHashCode;
        }
        int hash = 41;
        hash = (19 * hash) + getDescriptor().hashCode();
        if (hasTriggerMode()) {
          hash = (37 * hash) + TRIGGER_MODE_FIELD_NUMBER;
          hash = (53 * hash) + triggerMode_;
        }
        if (getTriggersCount() > 0) {
          hash = (37 * hash) + TRIGGERS_FIELD_NUMBER;
          hash = (53 * hash) + getTriggersList().hashCode();
        }
        if (hasTriggerTimeoutMs()) {
          hash = (37 * hash) + TRIGGER_TIMEOUT_MS_FIELD_NUMBER;
          hash = (53 * hash) + getTriggerTimeoutMs();
        }
        hash = (29 * hash) + getUnknownFields().hashCode();
        memoizedHashCode = hash;
        return hash;
      }

      public static perfetto.protos.TraceConfigOuterClass.TraceConfig.TriggerConfig parseFrom(
          java.nio.ByteBuffer data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static perfetto.protos.TraceConfigOuterClass.TraceConfig.TriggerConfig parseFrom(
          java.nio.ByteBuffer data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static perfetto.protos.TraceConfigOuterClass.TraceConfig.TriggerConfig parseFrom(
          com.google.protobuf.ByteString data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static perfetto.protos.TraceConfigOuterClass.TraceConfig.TriggerConfig parseFrom(
          com.google.protobuf.ByteString data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static perfetto.protos.TraceConfigOuterClass.TraceConfig.TriggerConfig parseFrom(byte[] data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static perfetto.protos.TraceConfigOuterClass.TraceConfig.TriggerConfig parseFrom(
          byte[] data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static perfetto.protos.TraceConfigOuterClass.TraceConfig.TriggerConfig parseFrom(java.io.InputStream input)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseWithIOException(PARSER, input);
      }
      public static perfetto.protos.TraceConfigOuterClass.TraceConfig.TriggerConfig parseFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseWithIOException(PARSER, input, extensionRegistry);
      }
      public static perfetto.protos.TraceConfigOuterClass.TraceConfig.TriggerConfig parseDelimitedFrom(java.io.InputStream input)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseDelimitedWithIOException(PARSER, input);
      }
      public static perfetto.protos.TraceConfigOuterClass.TraceConfig.TriggerConfig parseDelimitedFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
      }
      public static perfetto.protos.TraceConfigOuterClass.TraceConfig.TriggerConfig parseFrom(
          com.google.protobuf.CodedInputStream input)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseWithIOException(PARSER, input);
      }
      public static perfetto.protos.TraceConfigOuterClass.TraceConfig.TriggerConfig parseFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseWithIOException(PARSER, input, extensionRegistry);
      }

      @java.lang.Override
      public Builder newBuilderForType() { return newBuilder(); }
      public static Builder newBuilder() {
        return DEFAULT_INSTANCE.toBuilder();
      }
      public static Builder newBuilder(perfetto.protos.TraceConfigOuterClass.TraceConfig.TriggerConfig prototype) {
        return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
      }
      @java.lang.Override
      public Builder toBuilder() {
        return this == DEFAULT_INSTANCE
            ? new Builder() : new Builder().mergeFrom(this);
      }

      @java.lang.Override
      protected Builder newBuilderForType(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        Builder builder = new Builder(parent);
        return builder;
      }
      /**
       * <pre>
       * Triggers allow producers to start or stop the tracing session when an event
       * occurs.
       * For example if we are tracing probabilistically, most traces will be
       * uninteresting. Triggers allow us to keep only the interesting ones such as
       * those traces during which the device temperature reached a certain
       * threshold. In this case the producer can activate a trigger to keep
       * (STOP_TRACING) the trace, otherwise it can also begin a trace
       * (START_TRACING) because it knows something is about to happen.
       * </pre>
       *
       * Protobuf type {@code perfetto.protos.TraceConfig.TriggerConfig}
       */
      public static final class Builder extends
          com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
          // @@protoc_insertion_point(builder_implements:perfetto.protos.TraceConfig.TriggerConfig)
          perfetto.protos.TraceConfigOuterClass.TraceConfig.TriggerConfigOrBuilder {
        public static final com.google.protobuf.Descriptors.Descriptor
            getDescriptor() {
          return perfetto.protos.TraceConfigOuterClass.internal_static_perfetto_protos_TraceConfig_TriggerConfig_descriptor;
        }

        @java.lang.Override
        protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
            internalGetFieldAccessorTable() {
          return perfetto.protos.TraceConfigOuterClass.internal_static_perfetto_protos_TraceConfig_TriggerConfig_fieldAccessorTable
              .ensureFieldAccessorsInitialized(
                  perfetto.protos.TraceConfigOuterClass.TraceConfig.TriggerConfig.class, perfetto.protos.TraceConfigOuterClass.TraceConfig.TriggerConfig.Builder.class);
        }

        // Construct using perfetto.protos.TraceConfigOuterClass.TraceConfig.TriggerConfig.newBuilder()
        private Builder() {

        }

        private Builder(
            com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
          super(parent);

        }
        @java.lang.Override
        public Builder clear() {
          super.clear();
          bitField0_ = 0;
          triggerMode_ = 0;
          if (triggersBuilder_ == null) {
            triggers_ = java.util.Collections.emptyList();
          } else {
            triggers_ = null;
            triggersBuilder_.clear();
          }
          bitField0_ = (bitField0_ & ~0x00000002);
          triggerTimeoutMs_ = 0;
          return this;
        }

        @java.lang.Override
        public com.google.protobuf.Descriptors.Descriptor
            getDescriptorForType() {
          return perfetto.protos.TraceConfigOuterClass.internal_static_perfetto_protos_TraceConfig_TriggerConfig_descriptor;
        }

        @java.lang.Override
        public perfetto.protos.TraceConfigOuterClass.TraceConfig.TriggerConfig getDefaultInstanceForType() {
          return perfetto.protos.TraceConfigOuterClass.TraceConfig.TriggerConfig.getDefaultInstance();
        }

        @java.lang.Override
        public perfetto.protos.TraceConfigOuterClass.TraceConfig.TriggerConfig build() {
          perfetto.protos.TraceConfigOuterClass.TraceConfig.TriggerConfig result = buildPartial();
          if (!result.isInitialized()) {
            throw newUninitializedMessageException(result);
          }
          return result;
        }

        @java.lang.Override
        public perfetto.protos.TraceConfigOuterClass.TraceConfig.TriggerConfig buildPartial() {
          perfetto.protos.TraceConfigOuterClass.TraceConfig.TriggerConfig result = new perfetto.protos.TraceConfigOuterClass.TraceConfig.TriggerConfig(this);
          buildPartialRepeatedFields(result);
          if (bitField0_ != 0) { buildPartial0(result); }
          onBuilt();
          return result;
        }

        private void buildPartialRepeatedFields(perfetto.protos.TraceConfigOuterClass.TraceConfig.TriggerConfig result) {
          if (triggersBuilder_ == null) {
            if (((bitField0_ & 0x00000002) != 0)) {
              triggers_ = java.util.Collections.unmodifiableList(triggers_);
              bitField0_ = (bitField0_ & ~0x00000002);
            }
            result.triggers_ = triggers_;
          } else {
            result.triggers_ = triggersBuilder_.build();
          }
        }

        private void buildPartial0(perfetto.protos.TraceConfigOuterClass.TraceConfig.TriggerConfig result) {
          int from_bitField0_ = bitField0_;
          int to_bitField0_ = 0;
          if (((from_bitField0_ & 0x00000001) != 0)) {
            result.triggerMode_ = triggerMode_;
            to_bitField0_ |= 0x00000001;
          }
          if (((from_bitField0_ & 0x00000004) != 0)) {
            result.triggerTimeoutMs_ = triggerTimeoutMs_;
            to_bitField0_ |= 0x00000002;
          }
          result.bitField0_ |= to_bitField0_;
        }

        @java.lang.Override
        public Builder clone() {
          return super.clone();
        }
        @java.lang.Override
        public Builder setField(
            com.google.protobuf.Descriptors.FieldDescriptor field,
            java.lang.Object value) {
          return super.setField(field, value);
        }
        @java.lang.Override
        public Builder clearField(
            com.google.protobuf.Descriptors.FieldDescriptor field) {
          return super.clearField(field);
        }
        @java.lang.Override
        public Builder clearOneof(
            com.google.protobuf.Descriptors.OneofDescriptor oneof) {
          return super.clearOneof(oneof);
        }
        @java.lang.Override
        public Builder setRepeatedField(
            com.google.protobuf.Descriptors.FieldDescriptor field,
            int index, java.lang.Object value) {
          return super.setRepeatedField(field, index, value);
        }
        @java.lang.Override
        public Builder addRepeatedField(
            com.google.protobuf.Descriptors.FieldDescriptor field,
            java.lang.Object value) {
          return super.addRepeatedField(field, value);
        }
        @java.lang.Override
        public Builder mergeFrom(com.google.protobuf.Message other) {
          if (other instanceof perfetto.protos.TraceConfigOuterClass.TraceConfig.TriggerConfig) {
            return mergeFrom((perfetto.protos.TraceConfigOuterClass.TraceConfig.TriggerConfig)other);
          } else {
            super.mergeFrom(other);
            return this;
          }
        }

        public Builder mergeFrom(perfetto.protos.TraceConfigOuterClass.TraceConfig.TriggerConfig other) {
          if (other == perfetto.protos.TraceConfigOuterClass.TraceConfig.TriggerConfig.getDefaultInstance()) return this;
          if (other.hasTriggerMode()) {
            setTriggerMode(other.getTriggerMode());
          }
          if (triggersBuilder_ == null) {
            if (!other.triggers_.isEmpty()) {
              if (triggers_.isEmpty()) {
                triggers_ = other.triggers_;
                bitField0_ = (bitField0_ & ~0x00000002);
              } else {
                ensureTriggersIsMutable();
                triggers_.addAll(other.triggers_);
              }
              onChanged();
            }
          } else {
            if (!other.triggers_.isEmpty()) {
              if (triggersBuilder_.isEmpty()) {
                triggersBuilder_.dispose();
                triggersBuilder_ = null;
                triggers_ = other.triggers_;
                bitField0_ = (bitField0_ & ~0x00000002);
                triggersBuilder_ = 
                  com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders ?
                     getTriggersFieldBuilder() : null;
              } else {
                triggersBuilder_.addAllMessages(other.triggers_);
              }
            }
          }
          if (other.hasTriggerTimeoutMs()) {
            setTriggerTimeoutMs(other.getTriggerTimeoutMs());
          }
          this.mergeUnknownFields(other.getUnknownFields());
          onChanged();
          return this;
        }

        @java.lang.Override
        public final boolean isInitialized() {
          return true;
        }

        @java.lang.Override
        public Builder mergeFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws java.io.IOException {
          if (extensionRegistry == null) {
            throw new java.lang.NullPointerException();
          }
          try {
            boolean done = false;
            while (!done) {
              int tag = input.readTag();
              switch (tag) {
                case 0:
                  done = true;
                  break;
                case 8: {
                  int tmpRaw = input.readEnum();
                  perfetto.protos.TraceConfigOuterClass.TraceConfig.TriggerConfig.TriggerMode tmpValue =
                      perfetto.protos.TraceConfigOuterClass.TraceConfig.TriggerConfig.TriggerMode.forNumber(tmpRaw);
                  if (tmpValue == null) {
                    mergeUnknownVarintField(1, tmpRaw);
                  } else {
                    triggerMode_ = tmpRaw;
                    bitField0_ |= 0x00000001;
                  }
                  break;
                } // case 8
                case 18: {
                  perfetto.protos.TraceConfigOuterClass.TraceConfig.TriggerConfig.Trigger m =
                      input.readMessage(
                          perfetto.protos.TraceConfigOuterClass.TraceConfig.TriggerConfig.Trigger.PARSER,
                          extensionRegistry);
                  if (triggersBuilder_ == null) {
                    ensureTriggersIsMutable();
                    triggers_.add(m);
                  } else {
                    triggersBuilder_.addMessage(m);
                  }
                  break;
                } // case 18
                case 24: {
                  triggerTimeoutMs_ = input.readUInt32();
                  bitField0_ |= 0x00000004;
                  break;
                } // case 24
                default: {
                  if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                    done = true; // was an endgroup tag
                  }
                  break;
                } // default:
              } // switch (tag)
            } // while (!done)
          } catch (com.google.protobuf.InvalidProtocolBufferException e) {
            throw e.unwrapIOException();
          } finally {
            onChanged();
          } // finally
          return this;
        }
        private int bitField0_;

        private int triggerMode_ = 0;
        /**
         * <code>optional .perfetto.protos.TraceConfig.TriggerConfig.TriggerMode trigger_mode = 1;</code>
         * @return Whether the triggerMode field is set.
         */
        @java.lang.Override public boolean hasTriggerMode() {
          return ((bitField0_ & 0x00000001) != 0);
        }
        /**
         * <code>optional .perfetto.protos.TraceConfig.TriggerConfig.TriggerMode trigger_mode = 1;</code>
         * @return The triggerMode.
         */
        @java.lang.Override
        public perfetto.protos.TraceConfigOuterClass.TraceConfig.TriggerConfig.TriggerMode getTriggerMode() {
          perfetto.protos.TraceConfigOuterClass.TraceConfig.TriggerConfig.TriggerMode result = perfetto.protos.TraceConfigOuterClass.TraceConfig.TriggerConfig.TriggerMode.forNumber(triggerMode_);
          return result == null ? perfetto.protos.TraceConfigOuterClass.TraceConfig.TriggerConfig.TriggerMode.UNSPECIFIED : result;
        }
        /**
         * <code>optional .perfetto.protos.TraceConfig.TriggerConfig.TriggerMode trigger_mode = 1;</code>
         * @param value The triggerMode to set.
         * @return This builder for chaining.
         */
        public Builder setTriggerMode(perfetto.protos.TraceConfigOuterClass.TraceConfig.TriggerConfig.TriggerMode value) {
          if (value == null) {
            throw new NullPointerException();
          }
          bitField0_ |= 0x00000001;
          triggerMode_ = value.getNumber();
          onChanged();
          return this;
        }
        /**
         * <code>optional .perfetto.protos.TraceConfig.TriggerConfig.TriggerMode trigger_mode = 1;</code>
         * @return This builder for chaining.
         */
        public Builder clearTriggerMode() {
          bitField0_ = (bitField0_ & ~0x00000001);
          triggerMode_ = 0;
          onChanged();
          return this;
        }

        private java.util.List<perfetto.protos.TraceConfigOuterClass.TraceConfig.TriggerConfig.Trigger> triggers_ =
          java.util.Collections.emptyList();
        private void ensureTriggersIsMutable() {
          if (!((bitField0_ & 0x00000002) != 0)) {
            triggers_ = new java.util.ArrayList<perfetto.protos.TraceConfigOuterClass.TraceConfig.TriggerConfig.Trigger>(triggers_);
            bitField0_ |= 0x00000002;
           }
        }

        private com.google.protobuf.RepeatedFieldBuilderV3<
            perfetto.protos.TraceConfigOuterClass.TraceConfig.TriggerConfig.Trigger, perfetto.protos.TraceConfigOuterClass.TraceConfig.TriggerConfig.Trigger.Builder, perfetto.protos.TraceConfigOuterClass.TraceConfig.TriggerConfig.TriggerOrBuilder> triggersBuilder_;

        /**
         * <pre>
         * A list of triggers which are related to this configuration. If ANY
         * trigger is seen then an action will be performed based on |trigger_mode|.
         * </pre>
         *
         * <code>repeated .perfetto.protos.TraceConfig.TriggerConfig.Trigger triggers = 2;</code>
         */
        public java.util.List<perfetto.protos.TraceConfigOuterClass.TraceConfig.TriggerConfig.Trigger> getTriggersList() {
          if (triggersBuilder_ == null) {
            return java.util.Collections.unmodifiableList(triggers_);
          } else {
            return triggersBuilder_.getMessageList();
          }
        }
        /**
         * <pre>
         * A list of triggers which are related to this configuration. If ANY
         * trigger is seen then an action will be performed based on |trigger_mode|.
         * </pre>
         *
         * <code>repeated .perfetto.protos.TraceConfig.TriggerConfig.Trigger triggers = 2;</code>
         */
        public int getTriggersCount() {
          if (triggersBuilder_ == null) {
            return triggers_.size();
          } else {
            return triggersBuilder_.getCount();
          }
        }
        /**
         * <pre>
         * A list of triggers which are related to this configuration. If ANY
         * trigger is seen then an action will be performed based on |trigger_mode|.
         * </pre>
         *
         * <code>repeated .perfetto.protos.TraceConfig.TriggerConfig.Trigger triggers = 2;</code>
         */
        public perfetto.protos.TraceConfigOuterClass.TraceConfig.TriggerConfig.Trigger getTriggers(int index) {
          if (triggersBuilder_ == null) {
            return triggers_.get(index);
          } else {
            return triggersBuilder_.getMessage(index);
          }
        }
        /**
         * <pre>
         * A list of triggers which are related to this configuration. If ANY
         * trigger is seen then an action will be performed based on |trigger_mode|.
         * </pre>
         *
         * <code>repeated .perfetto.protos.TraceConfig.TriggerConfig.Trigger triggers = 2;</code>
         */
        public Builder setTriggers(
            int index, perfetto.protos.TraceConfigOuterClass.TraceConfig.TriggerConfig.Trigger value) {
          if (triggersBuilder_ == null) {
            if (value == null) {
              throw new NullPointerException();
            }
            ensureTriggersIsMutable();
            triggers_.set(index, value);
            onChanged();
          } else {
            triggersBuilder_.setMessage(index, value);
          }
          return this;
        }
        /**
         * <pre>
         * A list of triggers which are related to this configuration. If ANY
         * trigger is seen then an action will be performed based on |trigger_mode|.
         * </pre>
         *
         * <code>repeated .perfetto.protos.TraceConfig.TriggerConfig.Trigger triggers = 2;</code>
         */
        public Builder setTriggers(
            int index, perfetto.protos.TraceConfigOuterClass.TraceConfig.TriggerConfig.Trigger.Builder builderForValue) {
          if (triggersBuilder_ == null) {
            ensureTriggersIsMutable();
            triggers_.set(index, builderForValue.build());
            onChanged();
          } else {
            triggersBuilder_.setMessage(index, builderForValue.build());
          }
          return this;
        }
        /**
         * <pre>
         * A list of triggers which are related to this configuration. If ANY
         * trigger is seen then an action will be performed based on |trigger_mode|.
         * </pre>
         *
         * <code>repeated .perfetto.protos.TraceConfig.TriggerConfig.Trigger triggers = 2;</code>
         */
        public Builder addTriggers(perfetto.protos.TraceConfigOuterClass.TraceConfig.TriggerConfig.Trigger value) {
          if (triggersBuilder_ == null) {
            if (value == null) {
              throw new NullPointerException();
            }
            ensureTriggersIsMutable();
            triggers_.add(value);
            onChanged();
          } else {
            triggersBuilder_.addMessage(value);
          }
          return this;
        }
        /**
         * <pre>
         * A list of triggers which are related to this configuration. If ANY
         * trigger is seen then an action will be performed based on |trigger_mode|.
         * </pre>
         *
         * <code>repeated .perfetto.protos.TraceConfig.TriggerConfig.Trigger triggers = 2;</code>
         */
        public Builder addTriggers(
            int index, perfetto.protos.TraceConfigOuterClass.TraceConfig.TriggerConfig.Trigger value) {
          if (triggersBuilder_ == null) {
            if (value == null) {
              throw new NullPointerException();
            }
            ensureTriggersIsMutable();
            triggers_.add(index, value);
            onChanged();
          } else {
            triggersBuilder_.addMessage(index, value);
          }
          return this;
        }
        /**
         * <pre>
         * A list of triggers which are related to this configuration. If ANY
         * trigger is seen then an action will be performed based on |trigger_mode|.
         * </pre>
         *
         * <code>repeated .perfetto.protos.TraceConfig.TriggerConfig.Trigger triggers = 2;</code>
         */
        public Builder addTriggers(
            perfetto.protos.TraceConfigOuterClass.TraceConfig.TriggerConfig.Trigger.Builder builderForValue) {
          if (triggersBuilder_ == null) {
            ensureTriggersIsMutable();
            triggers_.add(builderForValue.build());
            onChanged();
          } else {
            triggersBuilder_.addMessage(builderForValue.build());
          }
          return this;
        }
        /**
         * <pre>
         * A list of triggers which are related to this configuration. If ANY
         * trigger is seen then an action will be performed based on |trigger_mode|.
         * </pre>
         *
         * <code>repeated .perfetto.protos.TraceConfig.TriggerConfig.Trigger triggers = 2;</code>
         */
        public Builder addTriggers(
            int index, perfetto.protos.TraceConfigOuterClass.TraceConfig.TriggerConfig.Trigger.Builder builderForValue) {
          if (triggersBuilder_ == null) {
            ensureTriggersIsMutable();
            triggers_.add(index, builderForValue.build());
            onChanged();
          } else {
            triggersBuilder_.addMessage(index, builderForValue.build());
          }
          return this;
        }
        /**
         * <pre>
         * A list of triggers which are related to this configuration. If ANY
         * trigger is seen then an action will be performed based on |trigger_mode|.
         * </pre>
         *
         * <code>repeated .perfetto.protos.TraceConfig.TriggerConfig.Trigger triggers = 2;</code>
         */
        public Builder addAllTriggers(
            java.lang.Iterable<? extends perfetto.protos.TraceConfigOuterClass.TraceConfig.TriggerConfig.Trigger> values) {
          if (triggersBuilder_ == null) {
            ensureTriggersIsMutable();
            com.google.protobuf.AbstractMessageLite.Builder.addAll(
                values, triggers_);
            onChanged();
          } else {
            triggersBuilder_.addAllMessages(values);
          }
          return this;
        }
        /**
         * <pre>
         * A list of triggers which are related to this configuration. If ANY
         * trigger is seen then an action will be performed based on |trigger_mode|.
         * </pre>
         *
         * <code>repeated .perfetto.protos.TraceConfig.TriggerConfig.Trigger triggers = 2;</code>
         */
        public Builder clearTriggers() {
          if (triggersBuilder_ == null) {
            triggers_ = java.util.Collections.emptyList();
            bitField0_ = (bitField0_ & ~0x00000002);
            onChanged();
          } else {
            triggersBuilder_.clear();
          }
          return this;
        }
        /**
         * <pre>
         * A list of triggers which are related to this configuration. If ANY
         * trigger is seen then an action will be performed based on |trigger_mode|.
         * </pre>
         *
         * <code>repeated .perfetto.protos.TraceConfig.TriggerConfig.Trigger triggers = 2;</code>
         */
        public Builder removeTriggers(int index) {
          if (triggersBuilder_ == null) {
            ensureTriggersIsMutable();
            triggers_.remove(index);
            onChanged();
          } else {
            triggersBuilder_.remove(index);
          }
          return this;
        }
        /**
         * <pre>
         * A list of triggers which are related to this configuration. If ANY
         * trigger is seen then an action will be performed based on |trigger_mode|.
         * </pre>
         *
         * <code>repeated .perfetto.protos.TraceConfig.TriggerConfig.Trigger triggers = 2;</code>
         */
        public perfetto.protos.TraceConfigOuterClass.TraceConfig.TriggerConfig.Trigger.Builder getTriggersBuilder(
            int index) {
          return getTriggersFieldBuilder().getBuilder(index);
        }
        /**
         * <pre>
         * A list of triggers which are related to this configuration. If ANY
         * trigger is seen then an action will be performed based on |trigger_mode|.
         * </pre>
         *
         * <code>repeated .perfetto.protos.TraceConfig.TriggerConfig.Trigger triggers = 2;</code>
         */
        public perfetto.protos.TraceConfigOuterClass.TraceConfig.TriggerConfig.TriggerOrBuilder getTriggersOrBuilder(
            int index) {
          if (triggersBuilder_ == null) {
            return triggers_.get(index);  } else {
            return triggersBuilder_.getMessageOrBuilder(index);
          }
        }
        /**
         * <pre>
         * A list of triggers which are related to this configuration. If ANY
         * trigger is seen then an action will be performed based on |trigger_mode|.
         * </pre>
         *
         * <code>repeated .perfetto.protos.TraceConfig.TriggerConfig.Trigger triggers = 2;</code>
         */
        public java.util.List<? extends perfetto.protos.TraceConfigOuterClass.TraceConfig.TriggerConfig.TriggerOrBuilder> 
             getTriggersOrBuilderList() {
          if (triggersBuilder_ != null) {
            return triggersBuilder_.getMessageOrBuilderList();
          } else {
            return java.util.Collections.unmodifiableList(triggers_);
          }
        }
        /**
         * <pre>
         * A list of triggers which are related to this configuration. If ANY
         * trigger is seen then an action will be performed based on |trigger_mode|.
         * </pre>
         *
         * <code>repeated .perfetto.protos.TraceConfig.TriggerConfig.Trigger triggers = 2;</code>
         */
        public perfetto.protos.TraceConfigOuterClass.TraceConfig.TriggerConfig.Trigger.Builder addTriggersBuilder() {
          return getTriggersFieldBuilder().addBuilder(
              perfetto.protos.TraceConfigOuterClass.TraceConfig.TriggerConfig.Trigger.getDefaultInstance());
        }
        /**
         * <pre>
         * A list of triggers which are related to this configuration. If ANY
         * trigger is seen then an action will be performed based on |trigger_mode|.
         * </pre>
         *
         * <code>repeated .perfetto.protos.TraceConfig.TriggerConfig.Trigger triggers = 2;</code>
         */
        public perfetto.protos.TraceConfigOuterClass.TraceConfig.TriggerConfig.Trigger.Builder addTriggersBuilder(
            int index) {
          return getTriggersFieldBuilder().addBuilder(
              index, perfetto.protos.TraceConfigOuterClass.TraceConfig.TriggerConfig.Trigger.getDefaultInstance());
        }
        /**
         * <pre>
         * A list of triggers which are related to this configuration. If ANY
         * trigger is seen then an action will be performed based on |trigger_mode|.
         * </pre>
         *
         * <code>repeated .perfetto.protos.TraceConfig.TriggerConfig.Trigger triggers = 2;</code>
         */
        public java.util.List<perfetto.protos.TraceConfigOuterClass.TraceConfig.TriggerConfig.Trigger.Builder> 
             getTriggersBuilderList() {
          return getTriggersFieldBuilder().getBuilderList();
        }
        private com.google.protobuf.RepeatedFieldBuilderV3<
            perfetto.protos.TraceConfigOuterClass.TraceConfig.TriggerConfig.Trigger, perfetto.protos.TraceConfigOuterClass.TraceConfig.TriggerConfig.Trigger.Builder, perfetto.protos.TraceConfigOuterClass.TraceConfig.TriggerConfig.TriggerOrBuilder> 
            getTriggersFieldBuilder() {
          if (triggersBuilder_ == null) {
            triggersBuilder_ = new com.google.protobuf.RepeatedFieldBuilderV3<
                perfetto.protos.TraceConfigOuterClass.TraceConfig.TriggerConfig.Trigger, perfetto.protos.TraceConfigOuterClass.TraceConfig.TriggerConfig.Trigger.Builder, perfetto.protos.TraceConfigOuterClass.TraceConfig.TriggerConfig.TriggerOrBuilder>(
                    triggers_,
                    ((bitField0_ & 0x00000002) != 0),
                    getParentForChildren(),
                    isClean());
            triggers_ = null;
          }
          return triggersBuilder_;
        }

        private int triggerTimeoutMs_ ;
        /**
         * <pre>
         * Required and must be positive if a TriggerConfig is specified. This is
         * how long this TraceConfig should wait for a trigger to arrive. After this
         * period of time if no trigger is seen the TracingSession will be cleaned
         * up.
         * </pre>
         *
         * <code>optional uint32 trigger_timeout_ms = 3;</code>
         * @return Whether the triggerTimeoutMs field is set.
         */
        @java.lang.Override
        public boolean hasTriggerTimeoutMs() {
          return ((bitField0_ & 0x00000004) != 0);
        }
        /**
         * <pre>
         * Required and must be positive if a TriggerConfig is specified. This is
         * how long this TraceConfig should wait for a trigger to arrive. After this
         * period of time if no trigger is seen the TracingSession will be cleaned
         * up.
         * </pre>
         *
         * <code>optional uint32 trigger_timeout_ms = 3;</code>
         * @return The triggerTimeoutMs.
         */
        @java.lang.Override
        public int getTriggerTimeoutMs() {
          return triggerTimeoutMs_;
        }
        /**
         * <pre>
         * Required and must be positive if a TriggerConfig is specified. This is
         * how long this TraceConfig should wait for a trigger to arrive. After this
         * period of time if no trigger is seen the TracingSession will be cleaned
         * up.
         * </pre>
         *
         * <code>optional uint32 trigger_timeout_ms = 3;</code>
         * @param value The triggerTimeoutMs to set.
         * @return This builder for chaining.
         */
        public Builder setTriggerTimeoutMs(int value) {
          
          triggerTimeoutMs_ = value;
          bitField0_ |= 0x00000004;
          onChanged();
          return this;
        }
        /**
         * <pre>
         * Required and must be positive if a TriggerConfig is specified. This is
         * how long this TraceConfig should wait for a trigger to arrive. After this
         * period of time if no trigger is seen the TracingSession will be cleaned
         * up.
         * </pre>
         *
         * <code>optional uint32 trigger_timeout_ms = 3;</code>
         * @return This builder for chaining.
         */
        public Builder clearTriggerTimeoutMs() {
          bitField0_ = (bitField0_ & ~0x00000004);
          triggerTimeoutMs_ = 0;
          onChanged();
          return this;
        }
        @java.lang.Override
        public final Builder setUnknownFields(
            final com.google.protobuf.UnknownFieldSet unknownFields) {
          return super.setUnknownFields(unknownFields);
        }

        @java.lang.Override
        public final Builder mergeUnknownFields(
            final com.google.protobuf.UnknownFieldSet unknownFields) {
          return super.mergeUnknownFields(unknownFields);
        }


        // @@protoc_insertion_point(builder_scope:perfetto.protos.TraceConfig.TriggerConfig)
      }

      // @@protoc_insertion_point(class_scope:perfetto.protos.TraceConfig.TriggerConfig)
      private static final perfetto.protos.TraceConfigOuterClass.TraceConfig.TriggerConfig DEFAULT_INSTANCE;
      static {
        DEFAULT_INSTANCE = new perfetto.protos.TraceConfigOuterClass.TraceConfig.TriggerConfig();
      }

      public static perfetto.protos.TraceConfigOuterClass.TraceConfig.TriggerConfig getDefaultInstance() {
        return DEFAULT_INSTANCE;
      }

      @java.lang.Deprecated public static final com.google.protobuf.Parser<TriggerConfig>
          PARSER = new com.google.protobuf.AbstractParser<TriggerConfig>() {
        @java.lang.Override
        public TriggerConfig parsePartialFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws com.google.protobuf.InvalidProtocolBufferException {
          Builder builder = newBuilder();
          try {
            builder.mergeFrom(input, extensionRegistry);
          } catch (com.google.protobuf.InvalidProtocolBufferException e) {
            throw e.setUnfinishedMessage(builder.buildPartial());
          } catch (com.google.protobuf.UninitializedMessageException e) {
            throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
          } catch (java.io.IOException e) {
            throw new com.google.protobuf.InvalidProtocolBufferException(e)
                .setUnfinishedMessage(builder.buildPartial());
          }
          return builder.buildPartial();
        }
      };

      public static com.google.protobuf.Parser<TriggerConfig> parser() {
        return PARSER;
      }

      @java.lang.Override
      public com.google.protobuf.Parser<TriggerConfig> getParserForType() {
        return PARSER;
      }

      @java.lang.Override
      public perfetto.protos.TraceConfigOuterClass.TraceConfig.TriggerConfig getDefaultInstanceForType() {
        return DEFAULT_INSTANCE;
      }

    }

    public interface IncrementalStateConfigOrBuilder extends
        // @@protoc_insertion_point(interface_extends:perfetto.protos.TraceConfig.IncrementalStateConfig)
        com.google.protobuf.MessageOrBuilder {

      /**
       * <pre>
       * If nonzero, notify eligible data sources to clear their incremental state
       * periodically, with the given period. The notification is sent only to
       * data sources that have |handles_incremental_state_clear| set in their
       * DataSourceDescriptor. The notification requests that the data source
       * stops referring to past trace contents. This is particularly useful when
       * tracing in ring buffer mode, where it is not exceptional to overwrite old
       * trace data.
       * Warning: this time-based global clearing is likely to be removed in the
       * future, to be replaced with a smarter way of sending the notifications
       * only when necessary.
       * </pre>
       *
       * <code>optional uint32 clear_period_ms = 1;</code>
       * @return Whether the clearPeriodMs field is set.
       */
      boolean hasClearPeriodMs();
      /**
       * <pre>
       * If nonzero, notify eligible data sources to clear their incremental state
       * periodically, with the given period. The notification is sent only to
       * data sources that have |handles_incremental_state_clear| set in their
       * DataSourceDescriptor. The notification requests that the data source
       * stops referring to past trace contents. This is particularly useful when
       * tracing in ring buffer mode, where it is not exceptional to overwrite old
       * trace data.
       * Warning: this time-based global clearing is likely to be removed in the
       * future, to be replaced with a smarter way of sending the notifications
       * only when necessary.
       * </pre>
       *
       * <code>optional uint32 clear_period_ms = 1;</code>
       * @return The clearPeriodMs.
       */
      int getClearPeriodMs();
    }
    /**
     * <pre>
     * Configuration for trace contents that reference earlier trace data. For
     * example, a data source might intern strings, and emit packets containing
     * {interned id : string} pairs. Future packets from that data source can then
     * use the interned ids instead of duplicating the raw string contents. The
     * trace parser will then need to use that interning table to fully interpret
     * the rest of the trace.
     * </pre>
     *
     * Protobuf type {@code perfetto.protos.TraceConfig.IncrementalStateConfig}
     */
    public static final class IncrementalStateConfig extends
        com.google.protobuf.GeneratedMessageV3 implements
        // @@protoc_insertion_point(message_implements:perfetto.protos.TraceConfig.IncrementalStateConfig)
        IncrementalStateConfigOrBuilder {
    private static final long serialVersionUID = 0L;
      // Use IncrementalStateConfig.newBuilder() to construct.
      private IncrementalStateConfig(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
        super(builder);
      }
      private IncrementalStateConfig() {
      }

      @java.lang.Override
      @SuppressWarnings({"unused"})
      protected java.lang.Object newInstance(
          UnusedPrivateParameter unused) {
        return new IncrementalStateConfig();
      }

      @java.lang.Override
      public final com.google.protobuf.UnknownFieldSet
      getUnknownFields() {
        return this.unknownFields;
      }
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return perfetto.protos.TraceConfigOuterClass.internal_static_perfetto_protos_TraceConfig_IncrementalStateConfig_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return perfetto.protos.TraceConfigOuterClass.internal_static_perfetto_protos_TraceConfig_IncrementalStateConfig_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                perfetto.protos.TraceConfigOuterClass.TraceConfig.IncrementalStateConfig.class, perfetto.protos.TraceConfigOuterClass.TraceConfig.IncrementalStateConfig.Builder.class);
      }

      private int bitField0_;
      public static final int CLEAR_PERIOD_MS_FIELD_NUMBER = 1;
      private int clearPeriodMs_ = 0;
      /**
       * <pre>
       * If nonzero, notify eligible data sources to clear their incremental state
       * periodically, with the given period. The notification is sent only to
       * data sources that have |handles_incremental_state_clear| set in their
       * DataSourceDescriptor. The notification requests that the data source
       * stops referring to past trace contents. This is particularly useful when
       * tracing in ring buffer mode, where it is not exceptional to overwrite old
       * trace data.
       * Warning: this time-based global clearing is likely to be removed in the
       * future, to be replaced with a smarter way of sending the notifications
       * only when necessary.
       * </pre>
       *
       * <code>optional uint32 clear_period_ms = 1;</code>
       * @return Whether the clearPeriodMs field is set.
       */
      @java.lang.Override
      public boolean hasClearPeriodMs() {
        return ((bitField0_ & 0x00000001) != 0);
      }
      /**
       * <pre>
       * If nonzero, notify eligible data sources to clear their incremental state
       * periodically, with the given period. The notification is sent only to
       * data sources that have |handles_incremental_state_clear| set in their
       * DataSourceDescriptor. The notification requests that the data source
       * stops referring to past trace contents. This is particularly useful when
       * tracing in ring buffer mode, where it is not exceptional to overwrite old
       * trace data.
       * Warning: this time-based global clearing is likely to be removed in the
       * future, to be replaced with a smarter way of sending the notifications
       * only when necessary.
       * </pre>
       *
       * <code>optional uint32 clear_period_ms = 1;</code>
       * @return The clearPeriodMs.
       */
      @java.lang.Override
      public int getClearPeriodMs() {
        return clearPeriodMs_;
      }

      private byte memoizedIsInitialized = -1;
      @java.lang.Override
      public final boolean isInitialized() {
        byte isInitialized = memoizedIsInitialized;
        if (isInitialized == 1) return true;
        if (isInitialized == 0) return false;

        memoizedIsInitialized = 1;
        return true;
      }

      @java.lang.Override
      public void writeTo(com.google.protobuf.CodedOutputStream output)
                          throws java.io.IOException {
        if (((bitField0_ & 0x00000001) != 0)) {
          output.writeUInt32(1, clearPeriodMs_);
        }
        getUnknownFields().writeTo(output);
      }

      @java.lang.Override
      public int getSerializedSize() {
        int size = memoizedSize;
        if (size != -1) return size;

        size = 0;
        if (((bitField0_ & 0x00000001) != 0)) {
          size += com.google.protobuf.CodedOutputStream
            .computeUInt32Size(1, clearPeriodMs_);
        }
        size += getUnknownFields().getSerializedSize();
        memoizedSize = size;
        return size;
      }

      @java.lang.Override
      public boolean equals(final java.lang.Object obj) {
        if (obj == this) {
         return true;
        }
        if (!(obj instanceof perfetto.protos.TraceConfigOuterClass.TraceConfig.IncrementalStateConfig)) {
          return super.equals(obj);
        }
        perfetto.protos.TraceConfigOuterClass.TraceConfig.IncrementalStateConfig other = (perfetto.protos.TraceConfigOuterClass.TraceConfig.IncrementalStateConfig) obj;

        if (hasClearPeriodMs() != other.hasClearPeriodMs()) return false;
        if (hasClearPeriodMs()) {
          if (getClearPeriodMs()
              != other.getClearPeriodMs()) return false;
        }
        if (!getUnknownFields().equals(other.getUnknownFields())) return false;
        return true;
      }

      @java.lang.Override
      public int hashCode() {
        if (memoizedHashCode != 0) {
          return memoizedHashCode;
        }
        int hash = 41;
        hash = (19 * hash) + getDescriptor().hashCode();
        if (hasClearPeriodMs()) {
          hash = (37 * hash) + CLEAR_PERIOD_MS_FIELD_NUMBER;
          hash = (53 * hash) + getClearPeriodMs();
        }
        hash = (29 * hash) + getUnknownFields().hashCode();
        memoizedHashCode = hash;
        return hash;
      }

      public static perfetto.protos.TraceConfigOuterClass.TraceConfig.IncrementalStateConfig parseFrom(
          java.nio.ByteBuffer data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static perfetto.protos.TraceConfigOuterClass.TraceConfig.IncrementalStateConfig parseFrom(
          java.nio.ByteBuffer data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static perfetto.protos.TraceConfigOuterClass.TraceConfig.IncrementalStateConfig parseFrom(
          com.google.protobuf.ByteString data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static perfetto.protos.TraceConfigOuterClass.TraceConfig.IncrementalStateConfig parseFrom(
          com.google.protobuf.ByteString data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static perfetto.protos.TraceConfigOuterClass.TraceConfig.IncrementalStateConfig parseFrom(byte[] data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static perfetto.protos.TraceConfigOuterClass.TraceConfig.IncrementalStateConfig parseFrom(
          byte[] data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static perfetto.protos.TraceConfigOuterClass.TraceConfig.IncrementalStateConfig parseFrom(java.io.InputStream input)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseWithIOException(PARSER, input);
      }
      public static perfetto.protos.TraceConfigOuterClass.TraceConfig.IncrementalStateConfig parseFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseWithIOException(PARSER, input, extensionRegistry);
      }
      public static perfetto.protos.TraceConfigOuterClass.TraceConfig.IncrementalStateConfig parseDelimitedFrom(java.io.InputStream input)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseDelimitedWithIOException(PARSER, input);
      }
      public static perfetto.protos.TraceConfigOuterClass.TraceConfig.IncrementalStateConfig parseDelimitedFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
      }
      public static perfetto.protos.TraceConfigOuterClass.TraceConfig.IncrementalStateConfig parseFrom(
          com.google.protobuf.CodedInputStream input)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseWithIOException(PARSER, input);
      }
      public static perfetto.protos.TraceConfigOuterClass.TraceConfig.IncrementalStateConfig parseFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseWithIOException(PARSER, input, extensionRegistry);
      }

      @java.lang.Override
      public Builder newBuilderForType() { return newBuilder(); }
      public static Builder newBuilder() {
        return DEFAULT_INSTANCE.toBuilder();
      }
      public static Builder newBuilder(perfetto.protos.TraceConfigOuterClass.TraceConfig.IncrementalStateConfig prototype) {
        return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
      }
      @java.lang.Override
      public Builder toBuilder() {
        return this == DEFAULT_INSTANCE
            ? new Builder() : new Builder().mergeFrom(this);
      }

      @java.lang.Override
      protected Builder newBuilderForType(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        Builder builder = new Builder(parent);
        return builder;
      }
      /**
       * <pre>
       * Configuration for trace contents that reference earlier trace data. For
       * example, a data source might intern strings, and emit packets containing
       * {interned id : string} pairs. Future packets from that data source can then
       * use the interned ids instead of duplicating the raw string contents. The
       * trace parser will then need to use that interning table to fully interpret
       * the rest of the trace.
       * </pre>
       *
       * Protobuf type {@code perfetto.protos.TraceConfig.IncrementalStateConfig}
       */
      public static final class Builder extends
          com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
          // @@protoc_insertion_point(builder_implements:perfetto.protos.TraceConfig.IncrementalStateConfig)
          perfetto.protos.TraceConfigOuterClass.TraceConfig.IncrementalStateConfigOrBuilder {
        public static final com.google.protobuf.Descriptors.Descriptor
            getDescriptor() {
          return perfetto.protos.TraceConfigOuterClass.internal_static_perfetto_protos_TraceConfig_IncrementalStateConfig_descriptor;
        }

        @java.lang.Override
        protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
            internalGetFieldAccessorTable() {
          return perfetto.protos.TraceConfigOuterClass.internal_static_perfetto_protos_TraceConfig_IncrementalStateConfig_fieldAccessorTable
              .ensureFieldAccessorsInitialized(
                  perfetto.protos.TraceConfigOuterClass.TraceConfig.IncrementalStateConfig.class, perfetto.protos.TraceConfigOuterClass.TraceConfig.IncrementalStateConfig.Builder.class);
        }

        // Construct using perfetto.protos.TraceConfigOuterClass.TraceConfig.IncrementalStateConfig.newBuilder()
        private Builder() {

        }

        private Builder(
            com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
          super(parent);

        }
        @java.lang.Override
        public Builder clear() {
          super.clear();
          bitField0_ = 0;
          clearPeriodMs_ = 0;
          return this;
        }

        @java.lang.Override
        public com.google.protobuf.Descriptors.Descriptor
            getDescriptorForType() {
          return perfetto.protos.TraceConfigOuterClass.internal_static_perfetto_protos_TraceConfig_IncrementalStateConfig_descriptor;
        }

        @java.lang.Override
        public perfetto.protos.TraceConfigOuterClass.TraceConfig.IncrementalStateConfig getDefaultInstanceForType() {
          return perfetto.protos.TraceConfigOuterClass.TraceConfig.IncrementalStateConfig.getDefaultInstance();
        }

        @java.lang.Override
        public perfetto.protos.TraceConfigOuterClass.TraceConfig.IncrementalStateConfig build() {
          perfetto.protos.TraceConfigOuterClass.TraceConfig.IncrementalStateConfig result = buildPartial();
          if (!result.isInitialized()) {
            throw newUninitializedMessageException(result);
          }
          return result;
        }

        @java.lang.Override
        public perfetto.protos.TraceConfigOuterClass.TraceConfig.IncrementalStateConfig buildPartial() {
          perfetto.protos.TraceConfigOuterClass.TraceConfig.IncrementalStateConfig result = new perfetto.protos.TraceConfigOuterClass.TraceConfig.IncrementalStateConfig(this);
          if (bitField0_ != 0) { buildPartial0(result); }
          onBuilt();
          return result;
        }

        private void buildPartial0(perfetto.protos.TraceConfigOuterClass.TraceConfig.IncrementalStateConfig result) {
          int from_bitField0_ = bitField0_;
          int to_bitField0_ = 0;
          if (((from_bitField0_ & 0x00000001) != 0)) {
            result.clearPeriodMs_ = clearPeriodMs_;
            to_bitField0_ |= 0x00000001;
          }
          result.bitField0_ |= to_bitField0_;
        }

        @java.lang.Override
        public Builder clone() {
          return super.clone();
        }
        @java.lang.Override
        public Builder setField(
            com.google.protobuf.Descriptors.FieldDescriptor field,
            java.lang.Object value) {
          return super.setField(field, value);
        }
        @java.lang.Override
        public Builder clearField(
            com.google.protobuf.Descriptors.FieldDescriptor field) {
          return super.clearField(field);
        }
        @java.lang.Override
        public Builder clearOneof(
            com.google.protobuf.Descriptors.OneofDescriptor oneof) {
          return super.clearOneof(oneof);
        }
        @java.lang.Override
        public Builder setRepeatedField(
            com.google.protobuf.Descriptors.FieldDescriptor field,
            int index, java.lang.Object value) {
          return super.setRepeatedField(field, index, value);
        }
        @java.lang.Override
        public Builder addRepeatedField(
            com.google.protobuf.Descriptors.FieldDescriptor field,
            java.lang.Object value) {
          return super.addRepeatedField(field, value);
        }
        @java.lang.Override
        public Builder mergeFrom(com.google.protobuf.Message other) {
          if (other instanceof perfetto.protos.TraceConfigOuterClass.TraceConfig.IncrementalStateConfig) {
            return mergeFrom((perfetto.protos.TraceConfigOuterClass.TraceConfig.IncrementalStateConfig)other);
          } else {
            super.mergeFrom(other);
            return this;
          }
        }

        public Builder mergeFrom(perfetto.protos.TraceConfigOuterClass.TraceConfig.IncrementalStateConfig other) {
          if (other == perfetto.protos.TraceConfigOuterClass.TraceConfig.IncrementalStateConfig.getDefaultInstance()) return this;
          if (other.hasClearPeriodMs()) {
            setClearPeriodMs(other.getClearPeriodMs());
          }
          this.mergeUnknownFields(other.getUnknownFields());
          onChanged();
          return this;
        }

        @java.lang.Override
        public final boolean isInitialized() {
          return true;
        }

        @java.lang.Override
        public Builder mergeFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws java.io.IOException {
          if (extensionRegistry == null) {
            throw new java.lang.NullPointerException();
          }
          try {
            boolean done = false;
            while (!done) {
              int tag = input.readTag();
              switch (tag) {
                case 0:
                  done = true;
                  break;
                case 8: {
                  clearPeriodMs_ = input.readUInt32();
                  bitField0_ |= 0x00000001;
                  break;
                } // case 8
                default: {
                  if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                    done = true; // was an endgroup tag
                  }
                  break;
                } // default:
              } // switch (tag)
            } // while (!done)
          } catch (com.google.protobuf.InvalidProtocolBufferException e) {
            throw e.unwrapIOException();
          } finally {
            onChanged();
          } // finally
          return this;
        }
        private int bitField0_;

        private int clearPeriodMs_ ;
        /**
         * <pre>
         * If nonzero, notify eligible data sources to clear their incremental state
         * periodically, with the given period. The notification is sent only to
         * data sources that have |handles_incremental_state_clear| set in their
         * DataSourceDescriptor. The notification requests that the data source
         * stops referring to past trace contents. This is particularly useful when
         * tracing in ring buffer mode, where it is not exceptional to overwrite old
         * trace data.
         * Warning: this time-based global clearing is likely to be removed in the
         * future, to be replaced with a smarter way of sending the notifications
         * only when necessary.
         * </pre>
         *
         * <code>optional uint32 clear_period_ms = 1;</code>
         * @return Whether the clearPeriodMs field is set.
         */
        @java.lang.Override
        public boolean hasClearPeriodMs() {
          return ((bitField0_ & 0x00000001) != 0);
        }
        /**
         * <pre>
         * If nonzero, notify eligible data sources to clear their incremental state
         * periodically, with the given period. The notification is sent only to
         * data sources that have |handles_incremental_state_clear| set in their
         * DataSourceDescriptor. The notification requests that the data source
         * stops referring to past trace contents. This is particularly useful when
         * tracing in ring buffer mode, where it is not exceptional to overwrite old
         * trace data.
         * Warning: this time-based global clearing is likely to be removed in the
         * future, to be replaced with a smarter way of sending the notifications
         * only when necessary.
         * </pre>
         *
         * <code>optional uint32 clear_period_ms = 1;</code>
         * @return The clearPeriodMs.
         */
        @java.lang.Override
        public int getClearPeriodMs() {
          return clearPeriodMs_;
        }
        /**
         * <pre>
         * If nonzero, notify eligible data sources to clear their incremental state
         * periodically, with the given period. The notification is sent only to
         * data sources that have |handles_incremental_state_clear| set in their
         * DataSourceDescriptor. The notification requests that the data source
         * stops referring to past trace contents. This is particularly useful when
         * tracing in ring buffer mode, where it is not exceptional to overwrite old
         * trace data.
         * Warning: this time-based global clearing is likely to be removed in the
         * future, to be replaced with a smarter way of sending the notifications
         * only when necessary.
         * </pre>
         *
         * <code>optional uint32 clear_period_ms = 1;</code>
         * @param value The clearPeriodMs to set.
         * @return This builder for chaining.
         */
        public Builder setClearPeriodMs(int value) {
          
          clearPeriodMs_ = value;
          bitField0_ |= 0x00000001;
          onChanged();
          return this;
        }
        /**
         * <pre>
         * If nonzero, notify eligible data sources to clear their incremental state
         * periodically, with the given period. The notification is sent only to
         * data sources that have |handles_incremental_state_clear| set in their
         * DataSourceDescriptor. The notification requests that the data source
         * stops referring to past trace contents. This is particularly useful when
         * tracing in ring buffer mode, where it is not exceptional to overwrite old
         * trace data.
         * Warning: this time-based global clearing is likely to be removed in the
         * future, to be replaced with a smarter way of sending the notifications
         * only when necessary.
         * </pre>
         *
         * <code>optional uint32 clear_period_ms = 1;</code>
         * @return This builder for chaining.
         */
        public Builder clearClearPeriodMs() {
          bitField0_ = (bitField0_ & ~0x00000001);
          clearPeriodMs_ = 0;
          onChanged();
          return this;
        }
        @java.lang.Override
        public final Builder setUnknownFields(
            final com.google.protobuf.UnknownFieldSet unknownFields) {
          return super.setUnknownFields(unknownFields);
        }

        @java.lang.Override
        public final Builder mergeUnknownFields(
            final com.google.protobuf.UnknownFieldSet unknownFields) {
          return super.mergeUnknownFields(unknownFields);
        }


        // @@protoc_insertion_point(builder_scope:perfetto.protos.TraceConfig.IncrementalStateConfig)
      }

      // @@protoc_insertion_point(class_scope:perfetto.protos.TraceConfig.IncrementalStateConfig)
      private static final perfetto.protos.TraceConfigOuterClass.TraceConfig.IncrementalStateConfig DEFAULT_INSTANCE;
      static {
        DEFAULT_INSTANCE = new perfetto.protos.TraceConfigOuterClass.TraceConfig.IncrementalStateConfig();
      }

      public static perfetto.protos.TraceConfigOuterClass.TraceConfig.IncrementalStateConfig getDefaultInstance() {
        return DEFAULT_INSTANCE;
      }

      @java.lang.Deprecated public static final com.google.protobuf.Parser<IncrementalStateConfig>
          PARSER = new com.google.protobuf.AbstractParser<IncrementalStateConfig>() {
        @java.lang.Override
        public IncrementalStateConfig parsePartialFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws com.google.protobuf.InvalidProtocolBufferException {
          Builder builder = newBuilder();
          try {
            builder.mergeFrom(input, extensionRegistry);
          } catch (com.google.protobuf.InvalidProtocolBufferException e) {
            throw e.setUnfinishedMessage(builder.buildPartial());
          } catch (com.google.protobuf.UninitializedMessageException e) {
            throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
          } catch (java.io.IOException e) {
            throw new com.google.protobuf.InvalidProtocolBufferException(e)
                .setUnfinishedMessage(builder.buildPartial());
          }
          return builder.buildPartial();
        }
      };

      public static com.google.protobuf.Parser<IncrementalStateConfig> parser() {
        return PARSER;
      }

      @java.lang.Override
      public com.google.protobuf.Parser<IncrementalStateConfig> getParserForType() {
        return PARSER;
      }

      @java.lang.Override
      public perfetto.protos.TraceConfigOuterClass.TraceConfig.IncrementalStateConfig getDefaultInstanceForType() {
        return DEFAULT_INSTANCE;
      }

    }

    public interface IncidentReportConfigOrBuilder extends
        // @@protoc_insertion_point(interface_extends:perfetto.protos.TraceConfig.IncidentReportConfig)
        com.google.protobuf.MessageOrBuilder {

      /**
       * <code>optional string destination_package = 1;</code>
       * @return Whether the destinationPackage field is set.
       */
      boolean hasDestinationPackage();
      /**
       * <code>optional string destination_package = 1;</code>
       * @return The destinationPackage.
       */
      java.lang.String getDestinationPackage();
      /**
       * <code>optional string destination_package = 1;</code>
       * @return The bytes for destinationPackage.
       */
      com.google.protobuf.ByteString
          getDestinationPackageBytes();

      /**
       * <code>optional string destination_class = 2;</code>
       * @return Whether the destinationClass field is set.
       */
      boolean hasDestinationClass();
      /**
       * <code>optional string destination_class = 2;</code>
       * @return The destinationClass.
       */
      java.lang.String getDestinationClass();
      /**
       * <code>optional string destination_class = 2;</code>
       * @return The bytes for destinationClass.
       */
      com.google.protobuf.ByteString
          getDestinationClassBytes();

      /**
       * <pre>
       * Level of filtering in the requested incident. See |Destination| in
       * frameworks/base/core/proto/android/privacy.proto.
       * </pre>
       *
       * <code>optional int32 privacy_level = 3;</code>
       * @return Whether the privacyLevel field is set.
       */
      boolean hasPrivacyLevel();
      /**
       * <pre>
       * Level of filtering in the requested incident. See |Destination| in
       * frameworks/base/core/proto/android/privacy.proto.
       * </pre>
       *
       * <code>optional int32 privacy_level = 3;</code>
       * @return The privacyLevel.
       */
      int getPrivacyLevel();

      /**
       * <pre>
       * If true, then skips saving the trace to incidentd.
       * This flag is useful in testing (e.g. Perfetto-statsd integration tests)
       * or when we explicitly don't want traces to go to incidentd even when they
       * usually would (e.g. configs deployed using statsd but only used for
       * inclusion in bugreports using |bugreport_score|).
       * The motivation for having this flag, instead of just not setting
       * |incident_report_config|, is prevent accidents where
       * |incident_report_config| is omitted by mistake.
       * </pre>
       *
       * <code>optional bool skip_incidentd = 5;</code>
       * @return Whether the skipIncidentd field is set.
       */
      boolean hasSkipIncidentd();
      /**
       * <pre>
       * If true, then skips saving the trace to incidentd.
       * This flag is useful in testing (e.g. Perfetto-statsd integration tests)
       * or when we explicitly don't want traces to go to incidentd even when they
       * usually would (e.g. configs deployed using statsd but only used for
       * inclusion in bugreports using |bugreport_score|).
       * The motivation for having this flag, instead of just not setting
       * |incident_report_config|, is prevent accidents where
       * |incident_report_config| is omitted by mistake.
       * </pre>
       *
       * <code>optional bool skip_incidentd = 5;</code>
       * @return The skipIncidentd.
       */
      boolean getSkipIncidentd();

      /**
       * <pre>
       * If true, do not write the trace into dropbox (i.e. incident only).
       * Otherwise, write to both dropbox and incident.
       * TODO(lalitm): remove this field as we no longer use Dropbox.
       * </pre>
       *
       * <code>optional bool skip_dropbox = 4 [deprecated = true];</code>
       * @deprecated perfetto.protos.TraceConfig.IncidentReportConfig.skip_dropbox is deprecated.
       *     See protos/perfetto/config/trace_config.proto;l=405
       * @return Whether the skipDropbox field is set.
       */
      @java.lang.Deprecated boolean hasSkipDropbox();
      /**
       * <pre>
       * If true, do not write the trace into dropbox (i.e. incident only).
       * Otherwise, write to both dropbox and incident.
       * TODO(lalitm): remove this field as we no longer use Dropbox.
       * </pre>
       *
       * <code>optional bool skip_dropbox = 4 [deprecated = true];</code>
       * @deprecated perfetto.protos.TraceConfig.IncidentReportConfig.skip_dropbox is deprecated.
       *     See protos/perfetto/config/trace_config.proto;l=405
       * @return The skipDropbox.
       */
      @java.lang.Deprecated boolean getSkipDropbox();
    }
    /**
     * <pre>
     * Android-only. Not for general use. If set, saves the trace into an
     * incident. This field is read by perfetto_cmd, rather than the tracing
     * service. This field must be set when passing the --upload flag to
     * perfetto_cmd.
     * </pre>
     *
     * Protobuf type {@code perfetto.protos.TraceConfig.IncidentReportConfig}
     */
    public static final class IncidentReportConfig extends
        com.google.protobuf.GeneratedMessageV3 implements
        // @@protoc_insertion_point(message_implements:perfetto.protos.TraceConfig.IncidentReportConfig)
        IncidentReportConfigOrBuilder {
    private static final long serialVersionUID = 0L;
      // Use IncidentReportConfig.newBuilder() to construct.
      private IncidentReportConfig(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
        super(builder);
      }
      private IncidentReportConfig() {
        destinationPackage_ = "";
        destinationClass_ = "";
      }

      @java.lang.Override
      @SuppressWarnings({"unused"})
      protected java.lang.Object newInstance(
          UnusedPrivateParameter unused) {
        return new IncidentReportConfig();
      }

      @java.lang.Override
      public final com.google.protobuf.UnknownFieldSet
      getUnknownFields() {
        return this.unknownFields;
      }
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return perfetto.protos.TraceConfigOuterClass.internal_static_perfetto_protos_TraceConfig_IncidentReportConfig_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return perfetto.protos.TraceConfigOuterClass.internal_static_perfetto_protos_TraceConfig_IncidentReportConfig_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                perfetto.protos.TraceConfigOuterClass.TraceConfig.IncidentReportConfig.class, perfetto.protos.TraceConfigOuterClass.TraceConfig.IncidentReportConfig.Builder.class);
      }

      private int bitField0_;
      public static final int DESTINATION_PACKAGE_FIELD_NUMBER = 1;
      @SuppressWarnings("serial")
      private volatile java.lang.Object destinationPackage_ = "";
      /**
       * <code>optional string destination_package = 1;</code>
       * @return Whether the destinationPackage field is set.
       */
      @java.lang.Override
      public boolean hasDestinationPackage() {
        return ((bitField0_ & 0x00000001) != 0);
      }
      /**
       * <code>optional string destination_package = 1;</code>
       * @return The destinationPackage.
       */
      @java.lang.Override
      public java.lang.String getDestinationPackage() {
        java.lang.Object ref = destinationPackage_;
        if (ref instanceof java.lang.String) {
          return (java.lang.String) ref;
        } else {
          com.google.protobuf.ByteString bs = 
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          if (bs.isValidUtf8()) {
            destinationPackage_ = s;
          }
          return s;
        }
      }
      /**
       * <code>optional string destination_package = 1;</code>
       * @return The bytes for destinationPackage.
       */
      @java.lang.Override
      public com.google.protobuf.ByteString
          getDestinationPackageBytes() {
        java.lang.Object ref = destinationPackage_;
        if (ref instanceof java.lang.String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          destinationPackage_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }

      public static final int DESTINATION_CLASS_FIELD_NUMBER = 2;
      @SuppressWarnings("serial")
      private volatile java.lang.Object destinationClass_ = "";
      /**
       * <code>optional string destination_class = 2;</code>
       * @return Whether the destinationClass field is set.
       */
      @java.lang.Override
      public boolean hasDestinationClass() {
        return ((bitField0_ & 0x00000002) != 0);
      }
      /**
       * <code>optional string destination_class = 2;</code>
       * @return The destinationClass.
       */
      @java.lang.Override
      public java.lang.String getDestinationClass() {
        java.lang.Object ref = destinationClass_;
        if (ref instanceof java.lang.String) {
          return (java.lang.String) ref;
        } else {
          com.google.protobuf.ByteString bs = 
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          if (bs.isValidUtf8()) {
            destinationClass_ = s;
          }
          return s;
        }
      }
      /**
       * <code>optional string destination_class = 2;</code>
       * @return The bytes for destinationClass.
       */
      @java.lang.Override
      public com.google.protobuf.ByteString
          getDestinationClassBytes() {
        java.lang.Object ref = destinationClass_;
        if (ref instanceof java.lang.String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          destinationClass_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }

      public static final int PRIVACY_LEVEL_FIELD_NUMBER = 3;
      private int privacyLevel_ = 0;
      /**
       * <pre>
       * Level of filtering in the requested incident. See |Destination| in
       * frameworks/base/core/proto/android/privacy.proto.
       * </pre>
       *
       * <code>optional int32 privacy_level = 3;</code>
       * @return Whether the privacyLevel field is set.
       */
      @java.lang.Override
      public boolean hasPrivacyLevel() {
        return ((bitField0_ & 0x00000004) != 0);
      }
      /**
       * <pre>
       * Level of filtering in the requested incident. See |Destination| in
       * frameworks/base/core/proto/android/privacy.proto.
       * </pre>
       *
       * <code>optional int32 privacy_level = 3;</code>
       * @return The privacyLevel.
       */
      @java.lang.Override
      public int getPrivacyLevel() {
        return privacyLevel_;
      }

      public static final int SKIP_INCIDENTD_FIELD_NUMBER = 5;
      private boolean skipIncidentd_ = false;
      /**
       * <pre>
       * If true, then skips saving the trace to incidentd.
       * This flag is useful in testing (e.g. Perfetto-statsd integration tests)
       * or when we explicitly don't want traces to go to incidentd even when they
       * usually would (e.g. configs deployed using statsd but only used for
       * inclusion in bugreports using |bugreport_score|).
       * The motivation for having this flag, instead of just not setting
       * |incident_report_config|, is prevent accidents where
       * |incident_report_config| is omitted by mistake.
       * </pre>
       *
       * <code>optional bool skip_incidentd = 5;</code>
       * @return Whether the skipIncidentd field is set.
       */
      @java.lang.Override
      public boolean hasSkipIncidentd() {
        return ((bitField0_ & 0x00000008) != 0);
      }
      /**
       * <pre>
       * If true, then skips saving the trace to incidentd.
       * This flag is useful in testing (e.g. Perfetto-statsd integration tests)
       * or when we explicitly don't want traces to go to incidentd even when they
       * usually would (e.g. configs deployed using statsd but only used for
       * inclusion in bugreports using |bugreport_score|).
       * The motivation for having this flag, instead of just not setting
       * |incident_report_config|, is prevent accidents where
       * |incident_report_config| is omitted by mistake.
       * </pre>
       *
       * <code>optional bool skip_incidentd = 5;</code>
       * @return The skipIncidentd.
       */
      @java.lang.Override
      public boolean getSkipIncidentd() {
        return skipIncidentd_;
      }

      public static final int SKIP_DROPBOX_FIELD_NUMBER = 4;
      private boolean skipDropbox_ = false;
      /**
       * <pre>
       * If true, do not write the trace into dropbox (i.e. incident only).
       * Otherwise, write to both dropbox and incident.
       * TODO(lalitm): remove this field as we no longer use Dropbox.
       * </pre>
       *
       * <code>optional bool skip_dropbox = 4 [deprecated = true];</code>
       * @deprecated perfetto.protos.TraceConfig.IncidentReportConfig.skip_dropbox is deprecated.
       *     See protos/perfetto/config/trace_config.proto;l=405
       * @return Whether the skipDropbox field is set.
       */
      @java.lang.Override
      @java.lang.Deprecated public boolean hasSkipDropbox() {
        return ((bitField0_ & 0x00000010) != 0);
      }
      /**
       * <pre>
       * If true, do not write the trace into dropbox (i.e. incident only).
       * Otherwise, write to both dropbox and incident.
       * TODO(lalitm): remove this field as we no longer use Dropbox.
       * </pre>
       *
       * <code>optional bool skip_dropbox = 4 [deprecated = true];</code>
       * @deprecated perfetto.protos.TraceConfig.IncidentReportConfig.skip_dropbox is deprecated.
       *     See protos/perfetto/config/trace_config.proto;l=405
       * @return The skipDropbox.
       */
      @java.lang.Override
      @java.lang.Deprecated public boolean getSkipDropbox() {
        return skipDropbox_;
      }

      private byte memoizedIsInitialized = -1;
      @java.lang.Override
      public final boolean isInitialized() {
        byte isInitialized = memoizedIsInitialized;
        if (isInitialized == 1) return true;
        if (isInitialized == 0) return false;

        memoizedIsInitialized = 1;
        return true;
      }

      @java.lang.Override
      public void writeTo(com.google.protobuf.CodedOutputStream output)
                          throws java.io.IOException {
        if (((bitField0_ & 0x00000001) != 0)) {
          com.google.protobuf.GeneratedMessageV3.writeString(output, 1, destinationPackage_);
        }
        if (((bitField0_ & 0x00000002) != 0)) {
          com.google.protobuf.GeneratedMessageV3.writeString(output, 2, destinationClass_);
        }
        if (((bitField0_ & 0x00000004) != 0)) {
          output.writeInt32(3, privacyLevel_);
        }
        if (((bitField0_ & 0x00000010) != 0)) {
          output.writeBool(4, skipDropbox_);
        }
        if (((bitField0_ & 0x00000008) != 0)) {
          output.writeBool(5, skipIncidentd_);
        }
        getUnknownFields().writeTo(output);
      }

      @java.lang.Override
      public int getSerializedSize() {
        int size = memoizedSize;
        if (size != -1) return size;

        size = 0;
        if (((bitField0_ & 0x00000001) != 0)) {
          size += com.google.protobuf.GeneratedMessageV3.computeStringSize(1, destinationPackage_);
        }
        if (((bitField0_ & 0x00000002) != 0)) {
          size += com.google.protobuf.GeneratedMessageV3.computeStringSize(2, destinationClass_);
        }
        if (((bitField0_ & 0x00000004) != 0)) {
          size += com.google.protobuf.CodedOutputStream
            .computeInt32Size(3, privacyLevel_);
        }
        if (((bitField0_ & 0x00000010) != 0)) {
          size += com.google.protobuf.CodedOutputStream
            .computeBoolSize(4, skipDropbox_);
        }
        if (((bitField0_ & 0x00000008) != 0)) {
          size += com.google.protobuf.CodedOutputStream
            .computeBoolSize(5, skipIncidentd_);
        }
        size += getUnknownFields().getSerializedSize();
        memoizedSize = size;
        return size;
      }

      @java.lang.Override
      public boolean equals(final java.lang.Object obj) {
        if (obj == this) {
         return true;
        }
        if (!(obj instanceof perfetto.protos.TraceConfigOuterClass.TraceConfig.IncidentReportConfig)) {
          return super.equals(obj);
        }
        perfetto.protos.TraceConfigOuterClass.TraceConfig.IncidentReportConfig other = (perfetto.protos.TraceConfigOuterClass.TraceConfig.IncidentReportConfig) obj;

        if (hasDestinationPackage() != other.hasDestinationPackage()) return false;
        if (hasDestinationPackage()) {
          if (!getDestinationPackage()
              .equals(other.getDestinationPackage())) return false;
        }
        if (hasDestinationClass() != other.hasDestinationClass()) return false;
        if (hasDestinationClass()) {
          if (!getDestinationClass()
              .equals(other.getDestinationClass())) return false;
        }
        if (hasPrivacyLevel() != other.hasPrivacyLevel()) return false;
        if (hasPrivacyLevel()) {
          if (getPrivacyLevel()
              != other.getPrivacyLevel()) return false;
        }
        if (hasSkipIncidentd() != other.hasSkipIncidentd()) return false;
        if (hasSkipIncidentd()) {
          if (getSkipIncidentd()
              != other.getSkipIncidentd()) return false;
        }
        if (hasSkipDropbox() != other.hasSkipDropbox()) return false;
        if (hasSkipDropbox()) {
          if (getSkipDropbox()
              != other.getSkipDropbox()) return false;
        }
        if (!getUnknownFields().equals(other.getUnknownFields())) return false;
        return true;
      }

      @java.lang.Override
      public int hashCode() {
        if (memoizedHashCode != 0) {
          return memoizedHashCode;
        }
        int hash = 41;
        hash = (19 * hash) + getDescriptor().hashCode();
        if (hasDestinationPackage()) {
          hash = (37 * hash) + DESTINATION_PACKAGE_FIELD_NUMBER;
          hash = (53 * hash) + getDestinationPackage().hashCode();
        }
        if (hasDestinationClass()) {
          hash = (37 * hash) + DESTINATION_CLASS_FIELD_NUMBER;
          hash = (53 * hash) + getDestinationClass().hashCode();
        }
        if (hasPrivacyLevel()) {
          hash = (37 * hash) + PRIVACY_LEVEL_FIELD_NUMBER;
          hash = (53 * hash) + getPrivacyLevel();
        }
        if (hasSkipIncidentd()) {
          hash = (37 * hash) + SKIP_INCIDENTD_FIELD_NUMBER;
          hash = (53 * hash) + com.google.protobuf.Internal.hashBoolean(
              getSkipIncidentd());
        }
        if (hasSkipDropbox()) {
          hash = (37 * hash) + SKIP_DROPBOX_FIELD_NUMBER;
          hash = (53 * hash) + com.google.protobuf.Internal.hashBoolean(
              getSkipDropbox());
        }
        hash = (29 * hash) + getUnknownFields().hashCode();
        memoizedHashCode = hash;
        return hash;
      }

      public static perfetto.protos.TraceConfigOuterClass.TraceConfig.IncidentReportConfig parseFrom(
          java.nio.ByteBuffer data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static perfetto.protos.TraceConfigOuterClass.TraceConfig.IncidentReportConfig parseFrom(
          java.nio.ByteBuffer data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static perfetto.protos.TraceConfigOuterClass.TraceConfig.IncidentReportConfig parseFrom(
          com.google.protobuf.ByteString data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static perfetto.protos.TraceConfigOuterClass.TraceConfig.IncidentReportConfig parseFrom(
          com.google.protobuf.ByteString data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static perfetto.protos.TraceConfigOuterClass.TraceConfig.IncidentReportConfig parseFrom(byte[] data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static perfetto.protos.TraceConfigOuterClass.TraceConfig.IncidentReportConfig parseFrom(
          byte[] data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static perfetto.protos.TraceConfigOuterClass.TraceConfig.IncidentReportConfig parseFrom(java.io.InputStream input)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseWithIOException(PARSER, input);
      }
      public static perfetto.protos.TraceConfigOuterClass.TraceConfig.IncidentReportConfig parseFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseWithIOException(PARSER, input, extensionRegistry);
      }
      public static perfetto.protos.TraceConfigOuterClass.TraceConfig.IncidentReportConfig parseDelimitedFrom(java.io.InputStream input)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseDelimitedWithIOException(PARSER, input);
      }
      public static perfetto.protos.TraceConfigOuterClass.TraceConfig.IncidentReportConfig parseDelimitedFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
      }
      public static perfetto.protos.TraceConfigOuterClass.TraceConfig.IncidentReportConfig parseFrom(
          com.google.protobuf.CodedInputStream input)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseWithIOException(PARSER, input);
      }
      public static perfetto.protos.TraceConfigOuterClass.TraceConfig.IncidentReportConfig parseFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseWithIOException(PARSER, input, extensionRegistry);
      }

      @java.lang.Override
      public Builder newBuilderForType() { return newBuilder(); }
      public static Builder newBuilder() {
        return DEFAULT_INSTANCE.toBuilder();
      }
      public static Builder newBuilder(perfetto.protos.TraceConfigOuterClass.TraceConfig.IncidentReportConfig prototype) {
        return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
      }
      @java.lang.Override
      public Builder toBuilder() {
        return this == DEFAULT_INSTANCE
            ? new Builder() : new Builder().mergeFrom(this);
      }

      @java.lang.Override
      protected Builder newBuilderForType(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        Builder builder = new Builder(parent);
        return builder;
      }
      /**
       * <pre>
       * Android-only. Not for general use. If set, saves the trace into an
       * incident. This field is read by perfetto_cmd, rather than the tracing
       * service. This field must be set when passing the --upload flag to
       * perfetto_cmd.
       * </pre>
       *
       * Protobuf type {@code perfetto.protos.TraceConfig.IncidentReportConfig}
       */
      public static final class Builder extends
          com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
          // @@protoc_insertion_point(builder_implements:perfetto.protos.TraceConfig.IncidentReportConfig)
          perfetto.protos.TraceConfigOuterClass.TraceConfig.IncidentReportConfigOrBuilder {
        public static final com.google.protobuf.Descriptors.Descriptor
            getDescriptor() {
          return perfetto.protos.TraceConfigOuterClass.internal_static_perfetto_protos_TraceConfig_IncidentReportConfig_descriptor;
        }

        @java.lang.Override
        protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
            internalGetFieldAccessorTable() {
          return perfetto.protos.TraceConfigOuterClass.internal_static_perfetto_protos_TraceConfig_IncidentReportConfig_fieldAccessorTable
              .ensureFieldAccessorsInitialized(
                  perfetto.protos.TraceConfigOuterClass.TraceConfig.IncidentReportConfig.class, perfetto.protos.TraceConfigOuterClass.TraceConfig.IncidentReportConfig.Builder.class);
        }

        // Construct using perfetto.protos.TraceConfigOuterClass.TraceConfig.IncidentReportConfig.newBuilder()
        private Builder() {

        }

        private Builder(
            com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
          super(parent);

        }
        @java.lang.Override
        public Builder clear() {
          super.clear();
          bitField0_ = 0;
          destinationPackage_ = "";
          destinationClass_ = "";
          privacyLevel_ = 0;
          skipIncidentd_ = false;
          skipDropbox_ = false;
          return this;
        }

        @java.lang.Override
        public com.google.protobuf.Descriptors.Descriptor
            getDescriptorForType() {
          return perfetto.protos.TraceConfigOuterClass.internal_static_perfetto_protos_TraceConfig_IncidentReportConfig_descriptor;
        }

        @java.lang.Override
        public perfetto.protos.TraceConfigOuterClass.TraceConfig.IncidentReportConfig getDefaultInstanceForType() {
          return perfetto.protos.TraceConfigOuterClass.TraceConfig.IncidentReportConfig.getDefaultInstance();
        }

        @java.lang.Override
        public perfetto.protos.TraceConfigOuterClass.TraceConfig.IncidentReportConfig build() {
          perfetto.protos.TraceConfigOuterClass.TraceConfig.IncidentReportConfig result = buildPartial();
          if (!result.isInitialized()) {
            throw newUninitializedMessageException(result);
          }
          return result;
        }

        @java.lang.Override
        public perfetto.protos.TraceConfigOuterClass.TraceConfig.IncidentReportConfig buildPartial() {
          perfetto.protos.TraceConfigOuterClass.TraceConfig.IncidentReportConfig result = new perfetto.protos.TraceConfigOuterClass.TraceConfig.IncidentReportConfig(this);
          if (bitField0_ != 0) { buildPartial0(result); }
          onBuilt();
          return result;
        }

        private void buildPartial0(perfetto.protos.TraceConfigOuterClass.TraceConfig.IncidentReportConfig result) {
          int from_bitField0_ = bitField0_;
          int to_bitField0_ = 0;
          if (((from_bitField0_ & 0x00000001) != 0)) {
            result.destinationPackage_ = destinationPackage_;
            to_bitField0_ |= 0x00000001;
          }
          if (((from_bitField0_ & 0x00000002) != 0)) {
            result.destinationClass_ = destinationClass_;
            to_bitField0_ |= 0x00000002;
          }
          if (((from_bitField0_ & 0x00000004) != 0)) {
            result.privacyLevel_ = privacyLevel_;
            to_bitField0_ |= 0x00000004;
          }
          if (((from_bitField0_ & 0x00000008) != 0)) {
            result.skipIncidentd_ = skipIncidentd_;
            to_bitField0_ |= 0x00000008;
          }
          if (((from_bitField0_ & 0x00000010) != 0)) {
            result.skipDropbox_ = skipDropbox_;
            to_bitField0_ |= 0x00000010;
          }
          result.bitField0_ |= to_bitField0_;
        }

        @java.lang.Override
        public Builder clone() {
          return super.clone();
        }
        @java.lang.Override
        public Builder setField(
            com.google.protobuf.Descriptors.FieldDescriptor field,
            java.lang.Object value) {
          return super.setField(field, value);
        }
        @java.lang.Override
        public Builder clearField(
            com.google.protobuf.Descriptors.FieldDescriptor field) {
          return super.clearField(field);
        }
        @java.lang.Override
        public Builder clearOneof(
            com.google.protobuf.Descriptors.OneofDescriptor oneof) {
          return super.clearOneof(oneof);
        }
        @java.lang.Override
        public Builder setRepeatedField(
            com.google.protobuf.Descriptors.FieldDescriptor field,
            int index, java.lang.Object value) {
          return super.setRepeatedField(field, index, value);
        }
        @java.lang.Override
        public Builder addRepeatedField(
            com.google.protobuf.Descriptors.FieldDescriptor field,
            java.lang.Object value) {
          return super.addRepeatedField(field, value);
        }
        @java.lang.Override
        public Builder mergeFrom(com.google.protobuf.Message other) {
          if (other instanceof perfetto.protos.TraceConfigOuterClass.TraceConfig.IncidentReportConfig) {
            return mergeFrom((perfetto.protos.TraceConfigOuterClass.TraceConfig.IncidentReportConfig)other);
          } else {
            super.mergeFrom(other);
            return this;
          }
        }

        public Builder mergeFrom(perfetto.protos.TraceConfigOuterClass.TraceConfig.IncidentReportConfig other) {
          if (other == perfetto.protos.TraceConfigOuterClass.TraceConfig.IncidentReportConfig.getDefaultInstance()) return this;
          if (other.hasDestinationPackage()) {
            destinationPackage_ = other.destinationPackage_;
            bitField0_ |= 0x00000001;
            onChanged();
          }
          if (other.hasDestinationClass()) {
            destinationClass_ = other.destinationClass_;
            bitField0_ |= 0x00000002;
            onChanged();
          }
          if (other.hasPrivacyLevel()) {
            setPrivacyLevel(other.getPrivacyLevel());
          }
          if (other.hasSkipIncidentd()) {
            setSkipIncidentd(other.getSkipIncidentd());
          }
          if (other.hasSkipDropbox()) {
            setSkipDropbox(other.getSkipDropbox());
          }
          this.mergeUnknownFields(other.getUnknownFields());
          onChanged();
          return this;
        }

        @java.lang.Override
        public final boolean isInitialized() {
          return true;
        }

        @java.lang.Override
        public Builder mergeFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws java.io.IOException {
          if (extensionRegistry == null) {
            throw new java.lang.NullPointerException();
          }
          try {
            boolean done = false;
            while (!done) {
              int tag = input.readTag();
              switch (tag) {
                case 0:
                  done = true;
                  break;
                case 10: {
                  destinationPackage_ = input.readBytes();
                  bitField0_ |= 0x00000001;
                  break;
                } // case 10
                case 18: {
                  destinationClass_ = input.readBytes();
                  bitField0_ |= 0x00000002;
                  break;
                } // case 18
                case 24: {
                  privacyLevel_ = input.readInt32();
                  bitField0_ |= 0x00000004;
                  break;
                } // case 24
                case 32: {
                  skipDropbox_ = input.readBool();
                  bitField0_ |= 0x00000010;
                  break;
                } // case 32
                case 40: {
                  skipIncidentd_ = input.readBool();
                  bitField0_ |= 0x00000008;
                  break;
                } // case 40
                default: {
                  if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                    done = true; // was an endgroup tag
                  }
                  break;
                } // default:
              } // switch (tag)
            } // while (!done)
          } catch (com.google.protobuf.InvalidProtocolBufferException e) {
            throw e.unwrapIOException();
          } finally {
            onChanged();
          } // finally
          return this;
        }
        private int bitField0_;

        private java.lang.Object destinationPackage_ = "";
        /**
         * <code>optional string destination_package = 1;</code>
         * @return Whether the destinationPackage field is set.
         */
        public boolean hasDestinationPackage() {
          return ((bitField0_ & 0x00000001) != 0);
        }
        /**
         * <code>optional string destination_package = 1;</code>
         * @return The destinationPackage.
         */
        public java.lang.String getDestinationPackage() {
          java.lang.Object ref = destinationPackage_;
          if (!(ref instanceof java.lang.String)) {
            com.google.protobuf.ByteString bs =
                (com.google.protobuf.ByteString) ref;
            java.lang.String s = bs.toStringUtf8();
            if (bs.isValidUtf8()) {
              destinationPackage_ = s;
            }
            return s;
          } else {
            return (java.lang.String) ref;
          }
        }
        /**
         * <code>optional string destination_package = 1;</code>
         * @return The bytes for destinationPackage.
         */
        public com.google.protobuf.ByteString
            getDestinationPackageBytes() {
          java.lang.Object ref = destinationPackage_;
          if (ref instanceof String) {
            com.google.protobuf.ByteString b = 
                com.google.protobuf.ByteString.copyFromUtf8(
                    (java.lang.String) ref);
            destinationPackage_ = b;
            return b;
          } else {
            return (com.google.protobuf.ByteString) ref;
          }
        }
        /**
         * <code>optional string destination_package = 1;</code>
         * @param value The destinationPackage to set.
         * @return This builder for chaining.
         */
        public Builder setDestinationPackage(
            java.lang.String value) {
          if (value == null) { throw new NullPointerException(); }
          destinationPackage_ = value;
          bitField0_ |= 0x00000001;
          onChanged();
          return this;
        }
        /**
         * <code>optional string destination_package = 1;</code>
         * @return This builder for chaining.
         */
        public Builder clearDestinationPackage() {
          destinationPackage_ = getDefaultInstance().getDestinationPackage();
          bitField0_ = (bitField0_ & ~0x00000001);
          onChanged();
          return this;
        }
        /**
         * <code>optional string destination_package = 1;</code>
         * @param value The bytes for destinationPackage to set.
         * @return This builder for chaining.
         */
        public Builder setDestinationPackageBytes(
            com.google.protobuf.ByteString value) {
          if (value == null) { throw new NullPointerException(); }
          destinationPackage_ = value;
          bitField0_ |= 0x00000001;
          onChanged();
          return this;
        }

        private java.lang.Object destinationClass_ = "";
        /**
         * <code>optional string destination_class = 2;</code>
         * @return Whether the destinationClass field is set.
         */
        public boolean hasDestinationClass() {
          return ((bitField0_ & 0x00000002) != 0);
        }
        /**
         * <code>optional string destination_class = 2;</code>
         * @return The destinationClass.
         */
        public java.lang.String getDestinationClass() {
          java.lang.Object ref = destinationClass_;
          if (!(ref instanceof java.lang.String)) {
            com.google.protobuf.ByteString bs =
                (com.google.protobuf.ByteString) ref;
            java.lang.String s = bs.toStringUtf8();
            if (bs.isValidUtf8()) {
              destinationClass_ = s;
            }
            return s;
          } else {
            return (java.lang.String) ref;
          }
        }
        /**
         * <code>optional string destination_class = 2;</code>
         * @return The bytes for destinationClass.
         */
        public com.google.protobuf.ByteString
            getDestinationClassBytes() {
          java.lang.Object ref = destinationClass_;
          if (ref instanceof String) {
            com.google.protobuf.ByteString b = 
                com.google.protobuf.ByteString.copyFromUtf8(
                    (java.lang.String) ref);
            destinationClass_ = b;
            return b;
          } else {
            return (com.google.protobuf.ByteString) ref;
          }
        }
        /**
         * <code>optional string destination_class = 2;</code>
         * @param value The destinationClass to set.
         * @return This builder for chaining.
         */
        public Builder setDestinationClass(
            java.lang.String value) {
          if (value == null) { throw new NullPointerException(); }
          destinationClass_ = value;
          bitField0_ |= 0x00000002;
          onChanged();
          return this;
        }
        /**
         * <code>optional string destination_class = 2;</code>
         * @return This builder for chaining.
         */
        public Builder clearDestinationClass() {
          destinationClass_ = getDefaultInstance().getDestinationClass();
          bitField0_ = (bitField0_ & ~0x00000002);
          onChanged();
          return this;
        }
        /**
         * <code>optional string destination_class = 2;</code>
         * @param value The bytes for destinationClass to set.
         * @return This builder for chaining.
         */
        public Builder setDestinationClassBytes(
            com.google.protobuf.ByteString value) {
          if (value == null) { throw new NullPointerException(); }
          destinationClass_ = value;
          bitField0_ |= 0x00000002;
          onChanged();
          return this;
        }

        private int privacyLevel_ ;
        /**
         * <pre>
         * Level of filtering in the requested incident. See |Destination| in
         * frameworks/base/core/proto/android/privacy.proto.
         * </pre>
         *
         * <code>optional int32 privacy_level = 3;</code>
         * @return Whether the privacyLevel field is set.
         */
        @java.lang.Override
        public boolean hasPrivacyLevel() {
          return ((bitField0_ & 0x00000004) != 0);
        }
        /**
         * <pre>
         * Level of filtering in the requested incident. See |Destination| in
         * frameworks/base/core/proto/android/privacy.proto.
         * </pre>
         *
         * <code>optional int32 privacy_level = 3;</code>
         * @return The privacyLevel.
         */
        @java.lang.Override
        public int getPrivacyLevel() {
          return privacyLevel_;
        }
        /**
         * <pre>
         * Level of filtering in the requested incident. See |Destination| in
         * frameworks/base/core/proto/android/privacy.proto.
         * </pre>
         *
         * <code>optional int32 privacy_level = 3;</code>
         * @param value The privacyLevel to set.
         * @return This builder for chaining.
         */
        public Builder setPrivacyLevel(int value) {
          
          privacyLevel_ = value;
          bitField0_ |= 0x00000004;
          onChanged();
          return this;
        }
        /**
         * <pre>
         * Level of filtering in the requested incident. See |Destination| in
         * frameworks/base/core/proto/android/privacy.proto.
         * </pre>
         *
         * <code>optional int32 privacy_level = 3;</code>
         * @return This builder for chaining.
         */
        public Builder clearPrivacyLevel() {
          bitField0_ = (bitField0_ & ~0x00000004);
          privacyLevel_ = 0;
          onChanged();
          return this;
        }

        private boolean skipIncidentd_ ;
        /**
         * <pre>
         * If true, then skips saving the trace to incidentd.
         * This flag is useful in testing (e.g. Perfetto-statsd integration tests)
         * or when we explicitly don't want traces to go to incidentd even when they
         * usually would (e.g. configs deployed using statsd but only used for
         * inclusion in bugreports using |bugreport_score|).
         * The motivation for having this flag, instead of just not setting
         * |incident_report_config|, is prevent accidents where
         * |incident_report_config| is omitted by mistake.
         * </pre>
         *
         * <code>optional bool skip_incidentd = 5;</code>
         * @return Whether the skipIncidentd field is set.
         */
        @java.lang.Override
        public boolean hasSkipIncidentd() {
          return ((bitField0_ & 0x00000008) != 0);
        }
        /**
         * <pre>
         * If true, then skips saving the trace to incidentd.
         * This flag is useful in testing (e.g. Perfetto-statsd integration tests)
         * or when we explicitly don't want traces to go to incidentd even when they
         * usually would (e.g. configs deployed using statsd but only used for
         * inclusion in bugreports using |bugreport_score|).
         * The motivation for having this flag, instead of just not setting
         * |incident_report_config|, is prevent accidents where
         * |incident_report_config| is omitted by mistake.
         * </pre>
         *
         * <code>optional bool skip_incidentd = 5;</code>
         * @return The skipIncidentd.
         */
        @java.lang.Override
        public boolean getSkipIncidentd() {
          return skipIncidentd_;
        }
        /**
         * <pre>
         * If true, then skips saving the trace to incidentd.
         * This flag is useful in testing (e.g. Perfetto-statsd integration tests)
         * or when we explicitly don't want traces to go to incidentd even when they
         * usually would (e.g. configs deployed using statsd but only used for
         * inclusion in bugreports using |bugreport_score|).
         * The motivation for having this flag, instead of just not setting
         * |incident_report_config|, is prevent accidents where
         * |incident_report_config| is omitted by mistake.
         * </pre>
         *
         * <code>optional bool skip_incidentd = 5;</code>
         * @param value The skipIncidentd to set.
         * @return This builder for chaining.
         */
        public Builder setSkipIncidentd(boolean value) {
          
          skipIncidentd_ = value;
          bitField0_ |= 0x00000008;
          onChanged();
          return this;
        }
        /**
         * <pre>
         * If true, then skips saving the trace to incidentd.
         * This flag is useful in testing (e.g. Perfetto-statsd integration tests)
         * or when we explicitly don't want traces to go to incidentd even when they
         * usually would (e.g. configs deployed using statsd but only used for
         * inclusion in bugreports using |bugreport_score|).
         * The motivation for having this flag, instead of just not setting
         * |incident_report_config|, is prevent accidents where
         * |incident_report_config| is omitted by mistake.
         * </pre>
         *
         * <code>optional bool skip_incidentd = 5;</code>
         * @return This builder for chaining.
         */
        public Builder clearSkipIncidentd() {
          bitField0_ = (bitField0_ & ~0x00000008);
          skipIncidentd_ = false;
          onChanged();
          return this;
        }

        private boolean skipDropbox_ ;
        /**
         * <pre>
         * If true, do not write the trace into dropbox (i.e. incident only).
         * Otherwise, write to both dropbox and incident.
         * TODO(lalitm): remove this field as we no longer use Dropbox.
         * </pre>
         *
         * <code>optional bool skip_dropbox = 4 [deprecated = true];</code>
         * @deprecated perfetto.protos.TraceConfig.IncidentReportConfig.skip_dropbox is deprecated.
         *     See protos/perfetto/config/trace_config.proto;l=405
         * @return Whether the skipDropbox field is set.
         */
        @java.lang.Override
        @java.lang.Deprecated public boolean hasSkipDropbox() {
          return ((bitField0_ & 0x00000010) != 0);
        }
        /**
         * <pre>
         * If true, do not write the trace into dropbox (i.e. incident only).
         * Otherwise, write to both dropbox and incident.
         * TODO(lalitm): remove this field as we no longer use Dropbox.
         * </pre>
         *
         * <code>optional bool skip_dropbox = 4 [deprecated = true];</code>
         * @deprecated perfetto.protos.TraceConfig.IncidentReportConfig.skip_dropbox is deprecated.
         *     See protos/perfetto/config/trace_config.proto;l=405
         * @return The skipDropbox.
         */
        @java.lang.Override
        @java.lang.Deprecated public boolean getSkipDropbox() {
          return skipDropbox_;
        }
        /**
         * <pre>
         * If true, do not write the trace into dropbox (i.e. incident only).
         * Otherwise, write to both dropbox and incident.
         * TODO(lalitm): remove this field as we no longer use Dropbox.
         * </pre>
         *
         * <code>optional bool skip_dropbox = 4 [deprecated = true];</code>
         * @deprecated perfetto.protos.TraceConfig.IncidentReportConfig.skip_dropbox is deprecated.
         *     See protos/perfetto/config/trace_config.proto;l=405
         * @param value The skipDropbox to set.
         * @return This builder for chaining.
         */
        @java.lang.Deprecated public Builder setSkipDropbox(boolean value) {
          
          skipDropbox_ = value;
          bitField0_ |= 0x00000010;
          onChanged();
          return this;
        }
        /**
         * <pre>
         * If true, do not write the trace into dropbox (i.e. incident only).
         * Otherwise, write to both dropbox and incident.
         * TODO(lalitm): remove this field as we no longer use Dropbox.
         * </pre>
         *
         * <code>optional bool skip_dropbox = 4 [deprecated = true];</code>
         * @deprecated perfetto.protos.TraceConfig.IncidentReportConfig.skip_dropbox is deprecated.
         *     See protos/perfetto/config/trace_config.proto;l=405
         * @return This builder for chaining.
         */
        @java.lang.Deprecated public Builder clearSkipDropbox() {
          bitField0_ = (bitField0_ & ~0x00000010);
          skipDropbox_ = false;
          onChanged();
          return this;
        }
        @java.lang.Override
        public final Builder setUnknownFields(
            final com.google.protobuf.UnknownFieldSet unknownFields) {
          return super.setUnknownFields(unknownFields);
        }

        @java.lang.Override
        public final Builder mergeUnknownFields(
            final com.google.protobuf.UnknownFieldSet unknownFields) {
          return super.mergeUnknownFields(unknownFields);
        }


        // @@protoc_insertion_point(builder_scope:perfetto.protos.TraceConfig.IncidentReportConfig)
      }

      // @@protoc_insertion_point(class_scope:perfetto.protos.TraceConfig.IncidentReportConfig)
      private static final perfetto.protos.TraceConfigOuterClass.TraceConfig.IncidentReportConfig DEFAULT_INSTANCE;
      static {
        DEFAULT_INSTANCE = new perfetto.protos.TraceConfigOuterClass.TraceConfig.IncidentReportConfig();
      }

      public static perfetto.protos.TraceConfigOuterClass.TraceConfig.IncidentReportConfig getDefaultInstance() {
        return DEFAULT_INSTANCE;
      }

      @java.lang.Deprecated public static final com.google.protobuf.Parser<IncidentReportConfig>
          PARSER = new com.google.protobuf.AbstractParser<IncidentReportConfig>() {
        @java.lang.Override
        public IncidentReportConfig parsePartialFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws com.google.protobuf.InvalidProtocolBufferException {
          Builder builder = newBuilder();
          try {
            builder.mergeFrom(input, extensionRegistry);
          } catch (com.google.protobuf.InvalidProtocolBufferException e) {
            throw e.setUnfinishedMessage(builder.buildPartial());
          } catch (com.google.protobuf.UninitializedMessageException e) {
            throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
          } catch (java.io.IOException e) {
            throw new com.google.protobuf.InvalidProtocolBufferException(e)
                .setUnfinishedMessage(builder.buildPartial());
          }
          return builder.buildPartial();
        }
      };

      public static com.google.protobuf.Parser<IncidentReportConfig> parser() {
        return PARSER;
      }

      @java.lang.Override
      public com.google.protobuf.Parser<IncidentReportConfig> getParserForType() {
        return PARSER;
      }

      @java.lang.Override
      public perfetto.protos.TraceConfigOuterClass.TraceConfig.IncidentReportConfig getDefaultInstanceForType() {
        return DEFAULT_INSTANCE;
      }

    }

    public interface TraceFilterOrBuilder extends
        // @@protoc_insertion_point(interface_extends:perfetto.protos.TraceConfig.TraceFilter)
        com.google.protobuf.MessageOrBuilder {

      /**
       * <code>optional bytes bytecode = 1;</code>
       * @return Whether the bytecode field is set.
       */
      boolean hasBytecode();
      /**
       * <code>optional bytes bytecode = 1;</code>
       * @return The bytecode.
       */
      com.google.protobuf.ByteString getBytecode();
    }
    /**
     * <pre>
     * When set applies a post-filter to the trace contents using the filter
     * provided. The filter is applied at ReadBuffers() time and works both in the
     * case of IPC readback and write_into_file. This filter can be generated
     * using `tools/proto_filter -s schema.proto -F filter_out.bytes` or
     * `-T filter_out.escaped_string` (for .pbtx). See go/trace-filtering for
     * design.
     * Introduced in Android S, but it was broken (b/195065199). Reintroduced in
     * Android T with a different field number.
     * </pre>
     *
     * Protobuf type {@code perfetto.protos.TraceConfig.TraceFilter}
     */
    public static final class TraceFilter extends
        com.google.protobuf.GeneratedMessageV3 implements
        // @@protoc_insertion_point(message_implements:perfetto.protos.TraceConfig.TraceFilter)
        TraceFilterOrBuilder {
    private static final long serialVersionUID = 0L;
      // Use TraceFilter.newBuilder() to construct.
      private TraceFilter(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
        super(builder);
      }
      private TraceFilter() {
        bytecode_ = com.google.protobuf.ByteString.EMPTY;
      }

      @java.lang.Override
      @SuppressWarnings({"unused"})
      protected java.lang.Object newInstance(
          UnusedPrivateParameter unused) {
        return new TraceFilter();
      }

      @java.lang.Override
      public final com.google.protobuf.UnknownFieldSet
      getUnknownFields() {
        return this.unknownFields;
      }
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return perfetto.protos.TraceConfigOuterClass.internal_static_perfetto_protos_TraceConfig_TraceFilter_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return perfetto.protos.TraceConfigOuterClass.internal_static_perfetto_protos_TraceConfig_TraceFilter_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                perfetto.protos.TraceConfigOuterClass.TraceConfig.TraceFilter.class, perfetto.protos.TraceConfigOuterClass.TraceConfig.TraceFilter.Builder.class);
      }

      private int bitField0_;
      public static final int BYTECODE_FIELD_NUMBER = 1;
      private com.google.protobuf.ByteString bytecode_ = com.google.protobuf.ByteString.EMPTY;
      /**
       * <code>optional bytes bytecode = 1;</code>
       * @return Whether the bytecode field is set.
       */
      @java.lang.Override
      public boolean hasBytecode() {
        return ((bitField0_ & 0x00000001) != 0);
      }
      /**
       * <code>optional bytes bytecode = 1;</code>
       * @return The bytecode.
       */
      @java.lang.Override
      public com.google.protobuf.ByteString getBytecode() {
        return bytecode_;
      }

      private byte memoizedIsInitialized = -1;
      @java.lang.Override
      public final boolean isInitialized() {
        byte isInitialized = memoizedIsInitialized;
        if (isInitialized == 1) return true;
        if (isInitialized == 0) return false;

        memoizedIsInitialized = 1;
        return true;
      }

      @java.lang.Override
      public void writeTo(com.google.protobuf.CodedOutputStream output)
                          throws java.io.IOException {
        if (((bitField0_ & 0x00000001) != 0)) {
          output.writeBytes(1, bytecode_);
        }
        getUnknownFields().writeTo(output);
      }

      @java.lang.Override
      public int getSerializedSize() {
        int size = memoizedSize;
        if (size != -1) return size;

        size = 0;
        if (((bitField0_ & 0x00000001) != 0)) {
          size += com.google.protobuf.CodedOutputStream
            .computeBytesSize(1, bytecode_);
        }
        size += getUnknownFields().getSerializedSize();
        memoizedSize = size;
        return size;
      }

      @java.lang.Override
      public boolean equals(final java.lang.Object obj) {
        if (obj == this) {
         return true;
        }
        if (!(obj instanceof perfetto.protos.TraceConfigOuterClass.TraceConfig.TraceFilter)) {
          return super.equals(obj);
        }
        perfetto.protos.TraceConfigOuterClass.TraceConfig.TraceFilter other = (perfetto.protos.TraceConfigOuterClass.TraceConfig.TraceFilter) obj;

        if (hasBytecode() != other.hasBytecode()) return false;
        if (hasBytecode()) {
          if (!getBytecode()
              .equals(other.getBytecode())) return false;
        }
        if (!getUnknownFields().equals(other.getUnknownFields())) return false;
        return true;
      }

      @java.lang.Override
      public int hashCode() {
        if (memoizedHashCode != 0) {
          return memoizedHashCode;
        }
        int hash = 41;
        hash = (19 * hash) + getDescriptor().hashCode();
        if (hasBytecode()) {
          hash = (37 * hash) + BYTECODE_FIELD_NUMBER;
          hash = (53 * hash) + getBytecode().hashCode();
        }
        hash = (29 * hash) + getUnknownFields().hashCode();
        memoizedHashCode = hash;
        return hash;
      }

      public static perfetto.protos.TraceConfigOuterClass.TraceConfig.TraceFilter parseFrom(
          java.nio.ByteBuffer data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static perfetto.protos.TraceConfigOuterClass.TraceConfig.TraceFilter parseFrom(
          java.nio.ByteBuffer data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static perfetto.protos.TraceConfigOuterClass.TraceConfig.TraceFilter parseFrom(
          com.google.protobuf.ByteString data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static perfetto.protos.TraceConfigOuterClass.TraceConfig.TraceFilter parseFrom(
          com.google.protobuf.ByteString data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static perfetto.protos.TraceConfigOuterClass.TraceConfig.TraceFilter parseFrom(byte[] data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static perfetto.protos.TraceConfigOuterClass.TraceConfig.TraceFilter parseFrom(
          byte[] data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static perfetto.protos.TraceConfigOuterClass.TraceConfig.TraceFilter parseFrom(java.io.InputStream input)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseWithIOException(PARSER, input);
      }
      public static perfetto.protos.TraceConfigOuterClass.TraceConfig.TraceFilter parseFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseWithIOException(PARSER, input, extensionRegistry);
      }
      public static perfetto.protos.TraceConfigOuterClass.TraceConfig.TraceFilter parseDelimitedFrom(java.io.InputStream input)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseDelimitedWithIOException(PARSER, input);
      }
      public static perfetto.protos.TraceConfigOuterClass.TraceConfig.TraceFilter parseDelimitedFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
      }
      public static perfetto.protos.TraceConfigOuterClass.TraceConfig.TraceFilter parseFrom(
          com.google.protobuf.CodedInputStream input)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseWithIOException(PARSER, input);
      }
      public static perfetto.protos.TraceConfigOuterClass.TraceConfig.TraceFilter parseFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseWithIOException(PARSER, input, extensionRegistry);
      }

      @java.lang.Override
      public Builder newBuilderForType() { return newBuilder(); }
      public static Builder newBuilder() {
        return DEFAULT_INSTANCE.toBuilder();
      }
      public static Builder newBuilder(perfetto.protos.TraceConfigOuterClass.TraceConfig.TraceFilter prototype) {
        return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
      }
      @java.lang.Override
      public Builder toBuilder() {
        return this == DEFAULT_INSTANCE
            ? new Builder() : new Builder().mergeFrom(this);
      }

      @java.lang.Override
      protected Builder newBuilderForType(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        Builder builder = new Builder(parent);
        return builder;
      }
      /**
       * <pre>
       * When set applies a post-filter to the trace contents using the filter
       * provided. The filter is applied at ReadBuffers() time and works both in the
       * case of IPC readback and write_into_file. This filter can be generated
       * using `tools/proto_filter -s schema.proto -F filter_out.bytes` or
       * `-T filter_out.escaped_string` (for .pbtx). See go/trace-filtering for
       * design.
       * Introduced in Android S, but it was broken (b/195065199). Reintroduced in
       * Android T with a different field number.
       * </pre>
       *
       * Protobuf type {@code perfetto.protos.TraceConfig.TraceFilter}
       */
      public static final class Builder extends
          com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
          // @@protoc_insertion_point(builder_implements:perfetto.protos.TraceConfig.TraceFilter)
          perfetto.protos.TraceConfigOuterClass.TraceConfig.TraceFilterOrBuilder {
        public static final com.google.protobuf.Descriptors.Descriptor
            getDescriptor() {
          return perfetto.protos.TraceConfigOuterClass.internal_static_perfetto_protos_TraceConfig_TraceFilter_descriptor;
        }

        @java.lang.Override
        protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
            internalGetFieldAccessorTable() {
          return perfetto.protos.TraceConfigOuterClass.internal_static_perfetto_protos_TraceConfig_TraceFilter_fieldAccessorTable
              .ensureFieldAccessorsInitialized(
                  perfetto.protos.TraceConfigOuterClass.TraceConfig.TraceFilter.class, perfetto.protos.TraceConfigOuterClass.TraceConfig.TraceFilter.Builder.class);
        }

        // Construct using perfetto.protos.TraceConfigOuterClass.TraceConfig.TraceFilter.newBuilder()
        private Builder() {

        }

        private Builder(
            com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
          super(parent);

        }
        @java.lang.Override
        public Builder clear() {
          super.clear();
          bitField0_ = 0;
          bytecode_ = com.google.protobuf.ByteString.EMPTY;
          return this;
        }

        @java.lang.Override
        public com.google.protobuf.Descriptors.Descriptor
            getDescriptorForType() {
          return perfetto.protos.TraceConfigOuterClass.internal_static_perfetto_protos_TraceConfig_TraceFilter_descriptor;
        }

        @java.lang.Override
        public perfetto.protos.TraceConfigOuterClass.TraceConfig.TraceFilter getDefaultInstanceForType() {
          return perfetto.protos.TraceConfigOuterClass.TraceConfig.TraceFilter.getDefaultInstance();
        }

        @java.lang.Override
        public perfetto.protos.TraceConfigOuterClass.TraceConfig.TraceFilter build() {
          perfetto.protos.TraceConfigOuterClass.TraceConfig.TraceFilter result = buildPartial();
          if (!result.isInitialized()) {
            throw newUninitializedMessageException(result);
          }
          return result;
        }

        @java.lang.Override
        public perfetto.protos.TraceConfigOuterClass.TraceConfig.TraceFilter buildPartial() {
          perfetto.protos.TraceConfigOuterClass.TraceConfig.TraceFilter result = new perfetto.protos.TraceConfigOuterClass.TraceConfig.TraceFilter(this);
          if (bitField0_ != 0) { buildPartial0(result); }
          onBuilt();
          return result;
        }

        private void buildPartial0(perfetto.protos.TraceConfigOuterClass.TraceConfig.TraceFilter result) {
          int from_bitField0_ = bitField0_;
          int to_bitField0_ = 0;
          if (((from_bitField0_ & 0x00000001) != 0)) {
            result.bytecode_ = bytecode_;
            to_bitField0_ |= 0x00000001;
          }
          result.bitField0_ |= to_bitField0_;
        }

        @java.lang.Override
        public Builder clone() {
          return super.clone();
        }
        @java.lang.Override
        public Builder setField(
            com.google.protobuf.Descriptors.FieldDescriptor field,
            java.lang.Object value) {
          return super.setField(field, value);
        }
        @java.lang.Override
        public Builder clearField(
            com.google.protobuf.Descriptors.FieldDescriptor field) {
          return super.clearField(field);
        }
        @java.lang.Override
        public Builder clearOneof(
            com.google.protobuf.Descriptors.OneofDescriptor oneof) {
          return super.clearOneof(oneof);
        }
        @java.lang.Override
        public Builder setRepeatedField(
            com.google.protobuf.Descriptors.FieldDescriptor field,
            int index, java.lang.Object value) {
          return super.setRepeatedField(field, index, value);
        }
        @java.lang.Override
        public Builder addRepeatedField(
            com.google.protobuf.Descriptors.FieldDescriptor field,
            java.lang.Object value) {
          return super.addRepeatedField(field, value);
        }
        @java.lang.Override
        public Builder mergeFrom(com.google.protobuf.Message other) {
          if (other instanceof perfetto.protos.TraceConfigOuterClass.TraceConfig.TraceFilter) {
            return mergeFrom((perfetto.protos.TraceConfigOuterClass.TraceConfig.TraceFilter)other);
          } else {
            super.mergeFrom(other);
            return this;
          }
        }

        public Builder mergeFrom(perfetto.protos.TraceConfigOuterClass.TraceConfig.TraceFilter other) {
          if (other == perfetto.protos.TraceConfigOuterClass.TraceConfig.TraceFilter.getDefaultInstance()) return this;
          if (other.hasBytecode()) {
            setBytecode(other.getBytecode());
          }
          this.mergeUnknownFields(other.getUnknownFields());
          onChanged();
          return this;
        }

        @java.lang.Override
        public final boolean isInitialized() {
          return true;
        }

        @java.lang.Override
        public Builder mergeFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws java.io.IOException {
          if (extensionRegistry == null) {
            throw new java.lang.NullPointerException();
          }
          try {
            boolean done = false;
            while (!done) {
              int tag = input.readTag();
              switch (tag) {
                case 0:
                  done = true;
                  break;
                case 10: {
                  bytecode_ = input.readBytes();
                  bitField0_ |= 0x00000001;
                  break;
                } // case 10
                default: {
                  if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                    done = true; // was an endgroup tag
                  }
                  break;
                } // default:
              } // switch (tag)
            } // while (!done)
          } catch (com.google.protobuf.InvalidProtocolBufferException e) {
            throw e.unwrapIOException();
          } finally {
            onChanged();
          } // finally
          return this;
        }
        private int bitField0_;

        private com.google.protobuf.ByteString bytecode_ = com.google.protobuf.ByteString.EMPTY;
        /**
         * <code>optional bytes bytecode = 1;</code>
         * @return Whether the bytecode field is set.
         */
        @java.lang.Override
        public boolean hasBytecode() {
          return ((bitField0_ & 0x00000001) != 0);
        }
        /**
         * <code>optional bytes bytecode = 1;</code>
         * @return The bytecode.
         */
        @java.lang.Override
        public com.google.protobuf.ByteString getBytecode() {
          return bytecode_;
        }
        /**
         * <code>optional bytes bytecode = 1;</code>
         * @param value The bytecode to set.
         * @return This builder for chaining.
         */
        public Builder setBytecode(com.google.protobuf.ByteString value) {
          if (value == null) { throw new NullPointerException(); }
          bytecode_ = value;
          bitField0_ |= 0x00000001;
          onChanged();
          return this;
        }
        /**
         * <code>optional bytes bytecode = 1;</code>
         * @return This builder for chaining.
         */
        public Builder clearBytecode() {
          bitField0_ = (bitField0_ & ~0x00000001);
          bytecode_ = getDefaultInstance().getBytecode();
          onChanged();
          return this;
        }
        @java.lang.Override
        public final Builder setUnknownFields(
            final com.google.protobuf.UnknownFieldSet unknownFields) {
          return super.setUnknownFields(unknownFields);
        }

        @java.lang.Override
        public final Builder mergeUnknownFields(
            final com.google.protobuf.UnknownFieldSet unknownFields) {
          return super.mergeUnknownFields(unknownFields);
        }


        // @@protoc_insertion_point(builder_scope:perfetto.protos.TraceConfig.TraceFilter)
      }

      // @@protoc_insertion_point(class_scope:perfetto.protos.TraceConfig.TraceFilter)
      private static final perfetto.protos.TraceConfigOuterClass.TraceConfig.TraceFilter DEFAULT_INSTANCE;
      static {
        DEFAULT_INSTANCE = new perfetto.protos.TraceConfigOuterClass.TraceConfig.TraceFilter();
      }

      public static perfetto.protos.TraceConfigOuterClass.TraceConfig.TraceFilter getDefaultInstance() {
        return DEFAULT_INSTANCE;
      }

      @java.lang.Deprecated public static final com.google.protobuf.Parser<TraceFilter>
          PARSER = new com.google.protobuf.AbstractParser<TraceFilter>() {
        @java.lang.Override
        public TraceFilter parsePartialFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws com.google.protobuf.InvalidProtocolBufferException {
          Builder builder = newBuilder();
          try {
            builder.mergeFrom(input, extensionRegistry);
          } catch (com.google.protobuf.InvalidProtocolBufferException e) {
            throw e.setUnfinishedMessage(builder.buildPartial());
          } catch (com.google.protobuf.UninitializedMessageException e) {
            throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
          } catch (java.io.IOException e) {
            throw new com.google.protobuf.InvalidProtocolBufferException(e)
                .setUnfinishedMessage(builder.buildPartial());
          }
          return builder.buildPartial();
        }
      };

      public static com.google.protobuf.Parser<TraceFilter> parser() {
        return PARSER;
      }

      @java.lang.Override
      public com.google.protobuf.Parser<TraceFilter> getParserForType() {
        return PARSER;
      }

      @java.lang.Override
      public perfetto.protos.TraceConfigOuterClass.TraceConfig.TraceFilter getDefaultInstanceForType() {
        return DEFAULT_INSTANCE;
      }

    }

    public interface AndroidReportConfigOrBuilder extends
        // @@protoc_insertion_point(interface_extends:perfetto.protos.TraceConfig.AndroidReportConfig)
        com.google.protobuf.MessageOrBuilder {

      /**
       * <code>optional string reporter_service_package = 1;</code>
       * @return Whether the reporterServicePackage field is set.
       */
      boolean hasReporterServicePackage();
      /**
       * <code>optional string reporter_service_package = 1;</code>
       * @return The reporterServicePackage.
       */
      java.lang.String getReporterServicePackage();
      /**
       * <code>optional string reporter_service_package = 1;</code>
       * @return The bytes for reporterServicePackage.
       */
      com.google.protobuf.ByteString
          getReporterServicePackageBytes();

      /**
       * <code>optional string reporter_service_class = 2;</code>
       * @return Whether the reporterServiceClass field is set.
       */
      boolean hasReporterServiceClass();
      /**
       * <code>optional string reporter_service_class = 2;</code>
       * @return The reporterServiceClass.
       */
      java.lang.String getReporterServiceClass();
      /**
       * <code>optional string reporter_service_class = 2;</code>
       * @return The bytes for reporterServiceClass.
       */
      com.google.protobuf.ByteString
          getReporterServiceClassBytes();

      /**
       * <pre>
       * If true, then skips reporting the trace to Android framework.
       * This flag is useful in testing (e.g. Perfetto-statsd integration tests)
       * or when we explicitly don't want to report traces to the framework even
       * when they usually would (e.g. configs deployed using statsd but only
       * used for inclusion in bugreports using |bugreport_score|).
       * The motivation for having this flag, instead of just not setting
       * |framework_report_config|, is prevent accidents where
       * |framework_report_config| is omitted by mistake.
       * </pre>
       *
       * <code>optional bool skip_report = 3;</code>
       * @return Whether the skipReport field is set.
       */
      boolean hasSkipReport();
      /**
       * <pre>
       * If true, then skips reporting the trace to Android framework.
       * This flag is useful in testing (e.g. Perfetto-statsd integration tests)
       * or when we explicitly don't want to report traces to the framework even
       * when they usually would (e.g. configs deployed using statsd but only
       * used for inclusion in bugreports using |bugreport_score|).
       * The motivation for having this flag, instead of just not setting
       * |framework_report_config|, is prevent accidents where
       * |framework_report_config| is omitted by mistake.
       * </pre>
       *
       * <code>optional bool skip_report = 3;</code>
       * @return The skipReport.
       */
      boolean getSkipReport();

      /**
       * <pre>
       * If true, will direct the Android framework to read the data in trace
       * file and pass it to the reporter class over a pipe instead of passing
       * the file descriptor directly.
       * This flag is needed because the Android test framework does not
       * currently support priv-app helper apps (in terms of SELinux) and we
       * really don't want to add an allow rule for untrusted_app to receive
       * trace fds.
       * Because of this, we instead will direct the framework to create a new
       * pipe and pass this to the reporter process instead. As the pipe is
       * created by the framework, we won't have any problems with SELinux
       * (system_server is already allowed to pass pipe fds, even
       * to untrusted apps).
       * As the name suggests this option *MUST* only be used for testing.
       * Note that the framework will reject (and drop) files which are too
       * large both for simplicity and to be minimize the amount of data we
       * pass to a non-priv app (note that the framework will still check
       * manifest permissions even though SELinux permissions are worked around).
       * </pre>
       *
       * <code>optional bool use_pipe_in_framework_for_testing = 4;</code>
       * @return Whether the usePipeInFrameworkForTesting field is set.
       */
      boolean hasUsePipeInFrameworkForTesting();
      /**
       * <pre>
       * If true, will direct the Android framework to read the data in trace
       * file and pass it to the reporter class over a pipe instead of passing
       * the file descriptor directly.
       * This flag is needed because the Android test framework does not
       * currently support priv-app helper apps (in terms of SELinux) and we
       * really don't want to add an allow rule for untrusted_app to receive
       * trace fds.
       * Because of this, we instead will direct the framework to create a new
       * pipe and pass this to the reporter process instead. As the pipe is
       * created by the framework, we won't have any problems with SELinux
       * (system_server is already allowed to pass pipe fds, even
       * to untrusted apps).
       * As the name suggests this option *MUST* only be used for testing.
       * Note that the framework will reject (and drop) files which are too
       * large both for simplicity and to be minimize the amount of data we
       * pass to a non-priv app (note that the framework will still check
       * manifest permissions even though SELinux permissions are worked around).
       * </pre>
       *
       * <code>optional bool use_pipe_in_framework_for_testing = 4;</code>
       * @return The usePipeInFrameworkForTesting.
       */
      boolean getUsePipeInFrameworkForTesting();
    }
    /**
     * <pre>
     * Android-only. Not for general use. If set, reports the trace to the
     * Android framework. This field is read by perfetto_cmd, rather than the
     * tracing service. This field must be set when passing the --upload flag to
     * perfetto_cmd.
     * </pre>
     *
     * Protobuf type {@code perfetto.protos.TraceConfig.AndroidReportConfig}
     */
    public static final class AndroidReportConfig extends
        com.google.protobuf.GeneratedMessageV3 implements
        // @@protoc_insertion_point(message_implements:perfetto.protos.TraceConfig.AndroidReportConfig)
        AndroidReportConfigOrBuilder {
    private static final long serialVersionUID = 0L;
      // Use AndroidReportConfig.newBuilder() to construct.
      private AndroidReportConfig(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
        super(builder);
      }
      private AndroidReportConfig() {
        reporterServicePackage_ = "";
        reporterServiceClass_ = "";
      }

      @java.lang.Override
      @SuppressWarnings({"unused"})
      protected java.lang.Object newInstance(
          UnusedPrivateParameter unused) {
        return new AndroidReportConfig();
      }

      @java.lang.Override
      public final com.google.protobuf.UnknownFieldSet
      getUnknownFields() {
        return this.unknownFields;
      }
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return perfetto.protos.TraceConfigOuterClass.internal_static_perfetto_protos_TraceConfig_AndroidReportConfig_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return perfetto.protos.TraceConfigOuterClass.internal_static_perfetto_protos_TraceConfig_AndroidReportConfig_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                perfetto.protos.TraceConfigOuterClass.TraceConfig.AndroidReportConfig.class, perfetto.protos.TraceConfigOuterClass.TraceConfig.AndroidReportConfig.Builder.class);
      }

      private int bitField0_;
      public static final int REPORTER_SERVICE_PACKAGE_FIELD_NUMBER = 1;
      @SuppressWarnings("serial")
      private volatile java.lang.Object reporterServicePackage_ = "";
      /**
       * <code>optional string reporter_service_package = 1;</code>
       * @return Whether the reporterServicePackage field is set.
       */
      @java.lang.Override
      public boolean hasReporterServicePackage() {
        return ((bitField0_ & 0x00000001) != 0);
      }
      /**
       * <code>optional string reporter_service_package = 1;</code>
       * @return The reporterServicePackage.
       */
      @java.lang.Override
      public java.lang.String getReporterServicePackage() {
        java.lang.Object ref = reporterServicePackage_;
        if (ref instanceof java.lang.String) {
          return (java.lang.String) ref;
        } else {
          com.google.protobuf.ByteString bs = 
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          if (bs.isValidUtf8()) {
            reporterServicePackage_ = s;
          }
          return s;
        }
      }
      /**
       * <code>optional string reporter_service_package = 1;</code>
       * @return The bytes for reporterServicePackage.
       */
      @java.lang.Override
      public com.google.protobuf.ByteString
          getReporterServicePackageBytes() {
        java.lang.Object ref = reporterServicePackage_;
        if (ref instanceof java.lang.String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          reporterServicePackage_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }

      public static final int REPORTER_SERVICE_CLASS_FIELD_NUMBER = 2;
      @SuppressWarnings("serial")
      private volatile java.lang.Object reporterServiceClass_ = "";
      /**
       * <code>optional string reporter_service_class = 2;</code>
       * @return Whether the reporterServiceClass field is set.
       */
      @java.lang.Override
      public boolean hasReporterServiceClass() {
        return ((bitField0_ & 0x00000002) != 0);
      }
      /**
       * <code>optional string reporter_service_class = 2;</code>
       * @return The reporterServiceClass.
       */
      @java.lang.Override
      public java.lang.String getReporterServiceClass() {
        java.lang.Object ref = reporterServiceClass_;
        if (ref instanceof java.lang.String) {
          return (java.lang.String) ref;
        } else {
          com.google.protobuf.ByteString bs = 
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          if (bs.isValidUtf8()) {
            reporterServiceClass_ = s;
          }
          return s;
        }
      }
      /**
       * <code>optional string reporter_service_class = 2;</code>
       * @return The bytes for reporterServiceClass.
       */
      @java.lang.Override
      public com.google.protobuf.ByteString
          getReporterServiceClassBytes() {
        java.lang.Object ref = reporterServiceClass_;
        if (ref instanceof java.lang.String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          reporterServiceClass_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }

      public static final int SKIP_REPORT_FIELD_NUMBER = 3;
      private boolean skipReport_ = false;
      /**
       * <pre>
       * If true, then skips reporting the trace to Android framework.
       * This flag is useful in testing (e.g. Perfetto-statsd integration tests)
       * or when we explicitly don't want to report traces to the framework even
       * when they usually would (e.g. configs deployed using statsd but only
       * used for inclusion in bugreports using |bugreport_score|).
       * The motivation for having this flag, instead of just not setting
       * |framework_report_config|, is prevent accidents where
       * |framework_report_config| is omitted by mistake.
       * </pre>
       *
       * <code>optional bool skip_report = 3;</code>
       * @return Whether the skipReport field is set.
       */
      @java.lang.Override
      public boolean hasSkipReport() {
        return ((bitField0_ & 0x00000004) != 0);
      }
      /**
       * <pre>
       * If true, then skips reporting the trace to Android framework.
       * This flag is useful in testing (e.g. Perfetto-statsd integration tests)
       * or when we explicitly don't want to report traces to the framework even
       * when they usually would (e.g. configs deployed using statsd but only
       * used for inclusion in bugreports using |bugreport_score|).
       * The motivation for having this flag, instead of just not setting
       * |framework_report_config|, is prevent accidents where
       * |framework_report_config| is omitted by mistake.
       * </pre>
       *
       * <code>optional bool skip_report = 3;</code>
       * @return The skipReport.
       */
      @java.lang.Override
      public boolean getSkipReport() {
        return skipReport_;
      }

      public static final int USE_PIPE_IN_FRAMEWORK_FOR_TESTING_FIELD_NUMBER = 4;
      private boolean usePipeInFrameworkForTesting_ = false;
      /**
       * <pre>
       * If true, will direct the Android framework to read the data in trace
       * file and pass it to the reporter class over a pipe instead of passing
       * the file descriptor directly.
       * This flag is needed because the Android test framework does not
       * currently support priv-app helper apps (in terms of SELinux) and we
       * really don't want to add an allow rule for untrusted_app to receive
       * trace fds.
       * Because of this, we instead will direct the framework to create a new
       * pipe and pass this to the reporter process instead. As the pipe is
       * created by the framework, we won't have any problems with SELinux
       * (system_server is already allowed to pass pipe fds, even
       * to untrusted apps).
       * As the name suggests this option *MUST* only be used for testing.
       * Note that the framework will reject (and drop) files which are too
       * large both for simplicity and to be minimize the amount of data we
       * pass to a non-priv app (note that the framework will still check
       * manifest permissions even though SELinux permissions are worked around).
       * </pre>
       *
       * <code>optional bool use_pipe_in_framework_for_testing = 4;</code>
       * @return Whether the usePipeInFrameworkForTesting field is set.
       */
      @java.lang.Override
      public boolean hasUsePipeInFrameworkForTesting() {
        return ((bitField0_ & 0x00000008) != 0);
      }
      /**
       * <pre>
       * If true, will direct the Android framework to read the data in trace
       * file and pass it to the reporter class over a pipe instead of passing
       * the file descriptor directly.
       * This flag is needed because the Android test framework does not
       * currently support priv-app helper apps (in terms of SELinux) and we
       * really don't want to add an allow rule for untrusted_app to receive
       * trace fds.
       * Because of this, we instead will direct the framework to create a new
       * pipe and pass this to the reporter process instead. As the pipe is
       * created by the framework, we won't have any problems with SELinux
       * (system_server is already allowed to pass pipe fds, even
       * to untrusted apps).
       * As the name suggests this option *MUST* only be used for testing.
       * Note that the framework will reject (and drop) files which are too
       * large both for simplicity and to be minimize the amount of data we
       * pass to a non-priv app (note that the framework will still check
       * manifest permissions even though SELinux permissions are worked around).
       * </pre>
       *
       * <code>optional bool use_pipe_in_framework_for_testing = 4;</code>
       * @return The usePipeInFrameworkForTesting.
       */
      @java.lang.Override
      public boolean getUsePipeInFrameworkForTesting() {
        return usePipeInFrameworkForTesting_;
      }

      private byte memoizedIsInitialized = -1;
      @java.lang.Override
      public final boolean isInitialized() {
        byte isInitialized = memoizedIsInitialized;
        if (isInitialized == 1) return true;
        if (isInitialized == 0) return false;

        memoizedIsInitialized = 1;
        return true;
      }

      @java.lang.Override
      public void writeTo(com.google.protobuf.CodedOutputStream output)
                          throws java.io.IOException {
        if (((bitField0_ & 0x00000001) != 0)) {
          com.google.protobuf.GeneratedMessageV3.writeString(output, 1, reporterServicePackage_);
        }
        if (((bitField0_ & 0x00000002) != 0)) {
          com.google.protobuf.GeneratedMessageV3.writeString(output, 2, reporterServiceClass_);
        }
        if (((bitField0_ & 0x00000004) != 0)) {
          output.writeBool(3, skipReport_);
        }
        if (((bitField0_ & 0x00000008) != 0)) {
          output.writeBool(4, usePipeInFrameworkForTesting_);
        }
        getUnknownFields().writeTo(output);
      }

      @java.lang.Override
      public int getSerializedSize() {
        int size = memoizedSize;
        if (size != -1) return size;

        size = 0;
        if (((bitField0_ & 0x00000001) != 0)) {
          size += com.google.protobuf.GeneratedMessageV3.computeStringSize(1, reporterServicePackage_);
        }
        if (((bitField0_ & 0x00000002) != 0)) {
          size += com.google.protobuf.GeneratedMessageV3.computeStringSize(2, reporterServiceClass_);
        }
        if (((bitField0_ & 0x00000004) != 0)) {
          size += com.google.protobuf.CodedOutputStream
            .computeBoolSize(3, skipReport_);
        }
        if (((bitField0_ & 0x00000008) != 0)) {
          size += com.google.protobuf.CodedOutputStream
            .computeBoolSize(4, usePipeInFrameworkForTesting_);
        }
        size += getUnknownFields().getSerializedSize();
        memoizedSize = size;
        return size;
      }

      @java.lang.Override
      public boolean equals(final java.lang.Object obj) {
        if (obj == this) {
         return true;
        }
        if (!(obj instanceof perfetto.protos.TraceConfigOuterClass.TraceConfig.AndroidReportConfig)) {
          return super.equals(obj);
        }
        perfetto.protos.TraceConfigOuterClass.TraceConfig.AndroidReportConfig other = (perfetto.protos.TraceConfigOuterClass.TraceConfig.AndroidReportConfig) obj;

        if (hasReporterServicePackage() != other.hasReporterServicePackage()) return false;
        if (hasReporterServicePackage()) {
          if (!getReporterServicePackage()
              .equals(other.getReporterServicePackage())) return false;
        }
        if (hasReporterServiceClass() != other.hasReporterServiceClass()) return false;
        if (hasReporterServiceClass()) {
          if (!getReporterServiceClass()
              .equals(other.getReporterServiceClass())) return false;
        }
        if (hasSkipReport() != other.hasSkipReport()) return false;
        if (hasSkipReport()) {
          if (getSkipReport()
              != other.getSkipReport()) return false;
        }
        if (hasUsePipeInFrameworkForTesting() != other.hasUsePipeInFrameworkForTesting()) return false;
        if (hasUsePipeInFrameworkForTesting()) {
          if (getUsePipeInFrameworkForTesting()
              != other.getUsePipeInFrameworkForTesting()) return false;
        }
        if (!getUnknownFields().equals(other.getUnknownFields())) return false;
        return true;
      }

      @java.lang.Override
      public int hashCode() {
        if (memoizedHashCode != 0) {
          return memoizedHashCode;
        }
        int hash = 41;
        hash = (19 * hash) + getDescriptor().hashCode();
        if (hasReporterServicePackage()) {
          hash = (37 * hash) + REPORTER_SERVICE_PACKAGE_FIELD_NUMBER;
          hash = (53 * hash) + getReporterServicePackage().hashCode();
        }
        if (hasReporterServiceClass()) {
          hash = (37 * hash) + REPORTER_SERVICE_CLASS_FIELD_NUMBER;
          hash = (53 * hash) + getReporterServiceClass().hashCode();
        }
        if (hasSkipReport()) {
          hash = (37 * hash) + SKIP_REPORT_FIELD_NUMBER;
          hash = (53 * hash) + com.google.protobuf.Internal.hashBoolean(
              getSkipReport());
        }
        if (hasUsePipeInFrameworkForTesting()) {
          hash = (37 * hash) + USE_PIPE_IN_FRAMEWORK_FOR_TESTING_FIELD_NUMBER;
          hash = (53 * hash) + com.google.protobuf.Internal.hashBoolean(
              getUsePipeInFrameworkForTesting());
        }
        hash = (29 * hash) + getUnknownFields().hashCode();
        memoizedHashCode = hash;
        return hash;
      }

      public static perfetto.protos.TraceConfigOuterClass.TraceConfig.AndroidReportConfig parseFrom(
          java.nio.ByteBuffer data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static perfetto.protos.TraceConfigOuterClass.TraceConfig.AndroidReportConfig parseFrom(
          java.nio.ByteBuffer data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static perfetto.protos.TraceConfigOuterClass.TraceConfig.AndroidReportConfig parseFrom(
          com.google.protobuf.ByteString data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static perfetto.protos.TraceConfigOuterClass.TraceConfig.AndroidReportConfig parseFrom(
          com.google.protobuf.ByteString data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static perfetto.protos.TraceConfigOuterClass.TraceConfig.AndroidReportConfig parseFrom(byte[] data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static perfetto.protos.TraceConfigOuterClass.TraceConfig.AndroidReportConfig parseFrom(
          byte[] data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static perfetto.protos.TraceConfigOuterClass.TraceConfig.AndroidReportConfig parseFrom(java.io.InputStream input)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseWithIOException(PARSER, input);
      }
      public static perfetto.protos.TraceConfigOuterClass.TraceConfig.AndroidReportConfig parseFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseWithIOException(PARSER, input, extensionRegistry);
      }
      public static perfetto.protos.TraceConfigOuterClass.TraceConfig.AndroidReportConfig parseDelimitedFrom(java.io.InputStream input)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseDelimitedWithIOException(PARSER, input);
      }
      public static perfetto.protos.TraceConfigOuterClass.TraceConfig.AndroidReportConfig parseDelimitedFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
      }
      public static perfetto.protos.TraceConfigOuterClass.TraceConfig.AndroidReportConfig parseFrom(
          com.google.protobuf.CodedInputStream input)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseWithIOException(PARSER, input);
      }
      public static perfetto.protos.TraceConfigOuterClass.TraceConfig.AndroidReportConfig parseFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseWithIOException(PARSER, input, extensionRegistry);
      }

      @java.lang.Override
      public Builder newBuilderForType() { return newBuilder(); }
      public static Builder newBuilder() {
        return DEFAULT_INSTANCE.toBuilder();
      }
      public static Builder newBuilder(perfetto.protos.TraceConfigOuterClass.TraceConfig.AndroidReportConfig prototype) {
        return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
      }
      @java.lang.Override
      public Builder toBuilder() {
        return this == DEFAULT_INSTANCE
            ? new Builder() : new Builder().mergeFrom(this);
      }

      @java.lang.Override
      protected Builder newBuilderForType(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        Builder builder = new Builder(parent);
        return builder;
      }
      /**
       * <pre>
       * Android-only. Not for general use. If set, reports the trace to the
       * Android framework. This field is read by perfetto_cmd, rather than the
       * tracing service. This field must be set when passing the --upload flag to
       * perfetto_cmd.
       * </pre>
       *
       * Protobuf type {@code perfetto.protos.TraceConfig.AndroidReportConfig}
       */
      public static final class Builder extends
          com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
          // @@protoc_insertion_point(builder_implements:perfetto.protos.TraceConfig.AndroidReportConfig)
          perfetto.protos.TraceConfigOuterClass.TraceConfig.AndroidReportConfigOrBuilder {
        public static final com.google.protobuf.Descriptors.Descriptor
            getDescriptor() {
          return perfetto.protos.TraceConfigOuterClass.internal_static_perfetto_protos_TraceConfig_AndroidReportConfig_descriptor;
        }

        @java.lang.Override
        protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
            internalGetFieldAccessorTable() {
          return perfetto.protos.TraceConfigOuterClass.internal_static_perfetto_protos_TraceConfig_AndroidReportConfig_fieldAccessorTable
              .ensureFieldAccessorsInitialized(
                  perfetto.protos.TraceConfigOuterClass.TraceConfig.AndroidReportConfig.class, perfetto.protos.TraceConfigOuterClass.TraceConfig.AndroidReportConfig.Builder.class);
        }

        // Construct using perfetto.protos.TraceConfigOuterClass.TraceConfig.AndroidReportConfig.newBuilder()
        private Builder() {

        }

        private Builder(
            com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
          super(parent);

        }
        @java.lang.Override
        public Builder clear() {
          super.clear();
          bitField0_ = 0;
          reporterServicePackage_ = "";
          reporterServiceClass_ = "";
          skipReport_ = false;
          usePipeInFrameworkForTesting_ = false;
          return this;
        }

        @java.lang.Override
        public com.google.protobuf.Descriptors.Descriptor
            getDescriptorForType() {
          return perfetto.protos.TraceConfigOuterClass.internal_static_perfetto_protos_TraceConfig_AndroidReportConfig_descriptor;
        }

        @java.lang.Override
        public perfetto.protos.TraceConfigOuterClass.TraceConfig.AndroidReportConfig getDefaultInstanceForType() {
          return perfetto.protos.TraceConfigOuterClass.TraceConfig.AndroidReportConfig.getDefaultInstance();
        }

        @java.lang.Override
        public perfetto.protos.TraceConfigOuterClass.TraceConfig.AndroidReportConfig build() {
          perfetto.protos.TraceConfigOuterClass.TraceConfig.AndroidReportConfig result = buildPartial();
          if (!result.isInitialized()) {
            throw newUninitializedMessageException(result);
          }
          return result;
        }

        @java.lang.Override
        public perfetto.protos.TraceConfigOuterClass.TraceConfig.AndroidReportConfig buildPartial() {
          perfetto.protos.TraceConfigOuterClass.TraceConfig.AndroidReportConfig result = new perfetto.protos.TraceConfigOuterClass.TraceConfig.AndroidReportConfig(this);
          if (bitField0_ != 0) { buildPartial0(result); }
          onBuilt();
          return result;
        }

        private void buildPartial0(perfetto.protos.TraceConfigOuterClass.TraceConfig.AndroidReportConfig result) {
          int from_bitField0_ = bitField0_;
          int to_bitField0_ = 0;
          if (((from_bitField0_ & 0x00000001) != 0)) {
            result.reporterServicePackage_ = reporterServicePackage_;
            to_bitField0_ |= 0x00000001;
          }
          if (((from_bitField0_ & 0x00000002) != 0)) {
            result.reporterServiceClass_ = reporterServiceClass_;
            to_bitField0_ |= 0x00000002;
          }
          if (((from_bitField0_ & 0x00000004) != 0)) {
            result.skipReport_ = skipReport_;
            to_bitField0_ |= 0x00000004;
          }
          if (((from_bitField0_ & 0x00000008) != 0)) {
            result.usePipeInFrameworkForTesting_ = usePipeInFrameworkForTesting_;
            to_bitField0_ |= 0x00000008;
          }
          result.bitField0_ |= to_bitField0_;
        }

        @java.lang.Override
        public Builder clone() {
          return super.clone();
        }
        @java.lang.Override
        public Builder setField(
            com.google.protobuf.Descriptors.FieldDescriptor field,
            java.lang.Object value) {
          return super.setField(field, value);
        }
        @java.lang.Override
        public Builder clearField(
            com.google.protobuf.Descriptors.FieldDescriptor field) {
          return super.clearField(field);
        }
        @java.lang.Override
        public Builder clearOneof(
            com.google.protobuf.Descriptors.OneofDescriptor oneof) {
          return super.clearOneof(oneof);
        }
        @java.lang.Override
        public Builder setRepeatedField(
            com.google.protobuf.Descriptors.FieldDescriptor field,
            int index, java.lang.Object value) {
          return super.setRepeatedField(field, index, value);
        }
        @java.lang.Override
        public Builder addRepeatedField(
            com.google.protobuf.Descriptors.FieldDescriptor field,
            java.lang.Object value) {
          return super.addRepeatedField(field, value);
        }
        @java.lang.Override
        public Builder mergeFrom(com.google.protobuf.Message other) {
          if (other instanceof perfetto.protos.TraceConfigOuterClass.TraceConfig.AndroidReportConfig) {
            return mergeFrom((perfetto.protos.TraceConfigOuterClass.TraceConfig.AndroidReportConfig)other);
          } else {
            super.mergeFrom(other);
            return this;
          }
        }

        public Builder mergeFrom(perfetto.protos.TraceConfigOuterClass.TraceConfig.AndroidReportConfig other) {
          if (other == perfetto.protos.TraceConfigOuterClass.TraceConfig.AndroidReportConfig.getDefaultInstance()) return this;
          if (other.hasReporterServicePackage()) {
            reporterServicePackage_ = other.reporterServicePackage_;
            bitField0_ |= 0x00000001;
            onChanged();
          }
          if (other.hasReporterServiceClass()) {
            reporterServiceClass_ = other.reporterServiceClass_;
            bitField0_ |= 0x00000002;
            onChanged();
          }
          if (other.hasSkipReport()) {
            setSkipReport(other.getSkipReport());
          }
          if (other.hasUsePipeInFrameworkForTesting()) {
            setUsePipeInFrameworkForTesting(other.getUsePipeInFrameworkForTesting());
          }
          this.mergeUnknownFields(other.getUnknownFields());
          onChanged();
          return this;
        }

        @java.lang.Override
        public final boolean isInitialized() {
          return true;
        }

        @java.lang.Override
        public Builder mergeFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws java.io.IOException {
          if (extensionRegistry == null) {
            throw new java.lang.NullPointerException();
          }
          try {
            boolean done = false;
            while (!done) {
              int tag = input.readTag();
              switch (tag) {
                case 0:
                  done = true;
                  break;
                case 10: {
                  reporterServicePackage_ = input.readBytes();
                  bitField0_ |= 0x00000001;
                  break;
                } // case 10
                case 18: {
                  reporterServiceClass_ = input.readBytes();
                  bitField0_ |= 0x00000002;
                  break;
                } // case 18
                case 24: {
                  skipReport_ = input.readBool();
                  bitField0_ |= 0x00000004;
                  break;
                } // case 24
                case 32: {
                  usePipeInFrameworkForTesting_ = input.readBool();
                  bitField0_ |= 0x00000008;
                  break;
                } // case 32
                default: {
                  if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                    done = true; // was an endgroup tag
                  }
                  break;
                } // default:
              } // switch (tag)
            } // while (!done)
          } catch (com.google.protobuf.InvalidProtocolBufferException e) {
            throw e.unwrapIOException();
          } finally {
            onChanged();
          } // finally
          return this;
        }
        private int bitField0_;

        private java.lang.Object reporterServicePackage_ = "";
        /**
         * <code>optional string reporter_service_package = 1;</code>
         * @return Whether the reporterServicePackage field is set.
         */
        public boolean hasReporterServicePackage() {
          return ((bitField0_ & 0x00000001) != 0);
        }
        /**
         * <code>optional string reporter_service_package = 1;</code>
         * @return The reporterServicePackage.
         */
        public java.lang.String getReporterServicePackage() {
          java.lang.Object ref = reporterServicePackage_;
          if (!(ref instanceof java.lang.String)) {
            com.google.protobuf.ByteString bs =
                (com.google.protobuf.ByteString) ref;
            java.lang.String s = bs.toStringUtf8();
            if (bs.isValidUtf8()) {
              reporterServicePackage_ = s;
            }
            return s;
          } else {
            return (java.lang.String) ref;
          }
        }
        /**
         * <code>optional string reporter_service_package = 1;</code>
         * @return The bytes for reporterServicePackage.
         */
        public com.google.protobuf.ByteString
            getReporterServicePackageBytes() {
          java.lang.Object ref = reporterServicePackage_;
          if (ref instanceof String) {
            com.google.protobuf.ByteString b = 
                com.google.protobuf.ByteString.copyFromUtf8(
                    (java.lang.String) ref);
            reporterServicePackage_ = b;
            return b;
          } else {
            return (com.google.protobuf.ByteString) ref;
          }
        }
        /**
         * <code>optional string reporter_service_package = 1;</code>
         * @param value The reporterServicePackage to set.
         * @return This builder for chaining.
         */
        public Builder setReporterServicePackage(
            java.lang.String value) {
          if (value == null) { throw new NullPointerException(); }
          reporterServicePackage_ = value;
          bitField0_ |= 0x00000001;
          onChanged();
          return this;
        }
        /**
         * <code>optional string reporter_service_package = 1;</code>
         * @return This builder for chaining.
         */
        public Builder clearReporterServicePackage() {
          reporterServicePackage_ = getDefaultInstance().getReporterServicePackage();
          bitField0_ = (bitField0_ & ~0x00000001);
          onChanged();
          return this;
        }
        /**
         * <code>optional string reporter_service_package = 1;</code>
         * @param value The bytes for reporterServicePackage to set.
         * @return This builder for chaining.
         */
        public Builder setReporterServicePackageBytes(
            com.google.protobuf.ByteString value) {
          if (value == null) { throw new NullPointerException(); }
          reporterServicePackage_ = value;
          bitField0_ |= 0x00000001;
          onChanged();
          return this;
        }

        private java.lang.Object reporterServiceClass_ = "";
        /**
         * <code>optional string reporter_service_class = 2;</code>
         * @return Whether the reporterServiceClass field is set.
         */
        public boolean hasReporterServiceClass() {
          return ((bitField0_ & 0x00000002) != 0);
        }
        /**
         * <code>optional string reporter_service_class = 2;</code>
         * @return The reporterServiceClass.
         */
        public java.lang.String getReporterServiceClass() {
          java.lang.Object ref = reporterServiceClass_;
          if (!(ref instanceof java.lang.String)) {
            com.google.protobuf.ByteString bs =
                (com.google.protobuf.ByteString) ref;
            java.lang.String s = bs.toStringUtf8();
            if (bs.isValidUtf8()) {
              reporterServiceClass_ = s;
            }
            return s;
          } else {
            return (java.lang.String) ref;
          }
        }
        /**
         * <code>optional string reporter_service_class = 2;</code>
         * @return The bytes for reporterServiceClass.
         */
        public com.google.protobuf.ByteString
            getReporterServiceClassBytes() {
          java.lang.Object ref = reporterServiceClass_;
          if (ref instanceof String) {
            com.google.protobuf.ByteString b = 
                com.google.protobuf.ByteString.copyFromUtf8(
                    (java.lang.String) ref);
            reporterServiceClass_ = b;
            return b;
          } else {
            return (com.google.protobuf.ByteString) ref;
          }
        }
        /**
         * <code>optional string reporter_service_class = 2;</code>
         * @param value The reporterServiceClass to set.
         * @return This builder for chaining.
         */
        public Builder setReporterServiceClass(
            java.lang.String value) {
          if (value == null) { throw new NullPointerException(); }
          reporterServiceClass_ = value;
          bitField0_ |= 0x00000002;
          onChanged();
          return this;
        }
        /**
         * <code>optional string reporter_service_class = 2;</code>
         * @return This builder for chaining.
         */
        public Builder clearReporterServiceClass() {
          reporterServiceClass_ = getDefaultInstance().getReporterServiceClass();
          bitField0_ = (bitField0_ & ~0x00000002);
          onChanged();
          return this;
        }
        /**
         * <code>optional string reporter_service_class = 2;</code>
         * @param value The bytes for reporterServiceClass to set.
         * @return This builder for chaining.
         */
        public Builder setReporterServiceClassBytes(
            com.google.protobuf.ByteString value) {
          if (value == null) { throw new NullPointerException(); }
          reporterServiceClass_ = value;
          bitField0_ |= 0x00000002;
          onChanged();
          return this;
        }

        private boolean skipReport_ ;
        /**
         * <pre>
         * If true, then skips reporting the trace to Android framework.
         * This flag is useful in testing (e.g. Perfetto-statsd integration tests)
         * or when we explicitly don't want to report traces to the framework even
         * when they usually would (e.g. configs deployed using statsd but only
         * used for inclusion in bugreports using |bugreport_score|).
         * The motivation for having this flag, instead of just not setting
         * |framework_report_config|, is prevent accidents where
         * |framework_report_config| is omitted by mistake.
         * </pre>
         *
         * <code>optional bool skip_report = 3;</code>
         * @return Whether the skipReport field is set.
         */
        @java.lang.Override
        public boolean hasSkipReport() {
          return ((bitField0_ & 0x00000004) != 0);
        }
        /**
         * <pre>
         * If true, then skips reporting the trace to Android framework.
         * This flag is useful in testing (e.g. Perfetto-statsd integration tests)
         * or when we explicitly don't want to report traces to the framework even
         * when they usually would (e.g. configs deployed using statsd but only
         * used for inclusion in bugreports using |bugreport_score|).
         * The motivation for having this flag, instead of just not setting
         * |framework_report_config|, is prevent accidents where
         * |framework_report_config| is omitted by mistake.
         * </pre>
         *
         * <code>optional bool skip_report = 3;</code>
         * @return The skipReport.
         */
        @java.lang.Override
        public boolean getSkipReport() {
          return skipReport_;
        }
        /**
         * <pre>
         * If true, then skips reporting the trace to Android framework.
         * This flag is useful in testing (e.g. Perfetto-statsd integration tests)
         * or when we explicitly don't want to report traces to the framework even
         * when they usually would (e.g. configs deployed using statsd but only
         * used for inclusion in bugreports using |bugreport_score|).
         * The motivation for having this flag, instead of just not setting
         * |framework_report_config|, is prevent accidents where
         * |framework_report_config| is omitted by mistake.
         * </pre>
         *
         * <code>optional bool skip_report = 3;</code>
         * @param value The skipReport to set.
         * @return This builder for chaining.
         */
        public Builder setSkipReport(boolean value) {
          
          skipReport_ = value;
          bitField0_ |= 0x00000004;
          onChanged();
          return this;
        }
        /**
         * <pre>
         * If true, then skips reporting the trace to Android framework.
         * This flag is useful in testing (e.g. Perfetto-statsd integration tests)
         * or when we explicitly don't want to report traces to the framework even
         * when they usually would (e.g. configs deployed using statsd but only
         * used for inclusion in bugreports using |bugreport_score|).
         * The motivation for having this flag, instead of just not setting
         * |framework_report_config|, is prevent accidents where
         * |framework_report_config| is omitted by mistake.
         * </pre>
         *
         * <code>optional bool skip_report = 3;</code>
         * @return This builder for chaining.
         */
        public Builder clearSkipReport() {
          bitField0_ = (bitField0_ & ~0x00000004);
          skipReport_ = false;
          onChanged();
          return this;
        }

        private boolean usePipeInFrameworkForTesting_ ;
        /**
         * <pre>
         * If true, will direct the Android framework to read the data in trace
         * file and pass it to the reporter class over a pipe instead of passing
         * the file descriptor directly.
         * This flag is needed because the Android test framework does not
         * currently support priv-app helper apps (in terms of SELinux) and we
         * really don't want to add an allow rule for untrusted_app to receive
         * trace fds.
         * Because of this, we instead will direct the framework to create a new
         * pipe and pass this to the reporter process instead. As the pipe is
         * created by the framework, we won't have any problems with SELinux
         * (system_server is already allowed to pass pipe fds, even
         * to untrusted apps).
         * As the name suggests this option *MUST* only be used for testing.
         * Note that the framework will reject (and drop) files which are too
         * large both for simplicity and to be minimize the amount of data we
         * pass to a non-priv app (note that the framework will still check
         * manifest permissions even though SELinux permissions are worked around).
         * </pre>
         *
         * <code>optional bool use_pipe_in_framework_for_testing = 4;</code>
         * @return Whether the usePipeInFrameworkForTesting field is set.
         */
        @java.lang.Override
        public boolean hasUsePipeInFrameworkForTesting() {
          return ((bitField0_ & 0x00000008) != 0);
        }
        /**
         * <pre>
         * If true, will direct the Android framework to read the data in trace
         * file and pass it to the reporter class over a pipe instead of passing
         * the file descriptor directly.
         * This flag is needed because the Android test framework does not
         * currently support priv-app helper apps (in terms of SELinux) and we
         * really don't want to add an allow rule for untrusted_app to receive
         * trace fds.
         * Because of this, we instead will direct the framework to create a new
         * pipe and pass this to the reporter process instead. As the pipe is
         * created by the framework, we won't have any problems with SELinux
         * (system_server is already allowed to pass pipe fds, even
         * to untrusted apps).
         * As the name suggests this option *MUST* only be used for testing.
         * Note that the framework will reject (and drop) files which are too
         * large both for simplicity and to be minimize the amount of data we
         * pass to a non-priv app (note that the framework will still check
         * manifest permissions even though SELinux permissions are worked around).
         * </pre>
         *
         * <code>optional bool use_pipe_in_framework_for_testing = 4;</code>
         * @return The usePipeInFrameworkForTesting.
         */
        @java.lang.Override
        public boolean getUsePipeInFrameworkForTesting() {
          return usePipeInFrameworkForTesting_;
        }
        /**
         * <pre>
         * If true, will direct the Android framework to read the data in trace
         * file and pass it to the reporter class over a pipe instead of passing
         * the file descriptor directly.
         * This flag is needed because the Android test framework does not
         * currently support priv-app helper apps (in terms of SELinux) and we
         * really don't want to add an allow rule for untrusted_app to receive
         * trace fds.
         * Because of this, we instead will direct the framework to create a new
         * pipe and pass this to the reporter process instead. As the pipe is
         * created by the framework, we won't have any problems with SELinux
         * (system_server is already allowed to pass pipe fds, even
         * to untrusted apps).
         * As the name suggests this option *MUST* only be used for testing.
         * Note that the framework will reject (and drop) files which are too
         * large both for simplicity and to be minimize the amount of data we
         * pass to a non-priv app (note that the framework will still check
         * manifest permissions even though SELinux permissions are worked around).
         * </pre>
         *
         * <code>optional bool use_pipe_in_framework_for_testing = 4;</code>
         * @param value The usePipeInFrameworkForTesting to set.
         * @return This builder for chaining.
         */
        public Builder setUsePipeInFrameworkForTesting(boolean value) {
          
          usePipeInFrameworkForTesting_ = value;
          bitField0_ |= 0x00000008;
          onChanged();
          return this;
        }
        /**
         * <pre>
         * If true, will direct the Android framework to read the data in trace
         * file and pass it to the reporter class over a pipe instead of passing
         * the file descriptor directly.
         * This flag is needed because the Android test framework does not
         * currently support priv-app helper apps (in terms of SELinux) and we
         * really don't want to add an allow rule for untrusted_app to receive
         * trace fds.
         * Because of this, we instead will direct the framework to create a new
         * pipe and pass this to the reporter process instead. As the pipe is
         * created by the framework, we won't have any problems with SELinux
         * (system_server is already allowed to pass pipe fds, even
         * to untrusted apps).
         * As the name suggests this option *MUST* only be used for testing.
         * Note that the framework will reject (and drop) files which are too
         * large both for simplicity and to be minimize the amount of data we
         * pass to a non-priv app (note that the framework will still check
         * manifest permissions even though SELinux permissions are worked around).
         * </pre>
         *
         * <code>optional bool use_pipe_in_framework_for_testing = 4;</code>
         * @return This builder for chaining.
         */
        public Builder clearUsePipeInFrameworkForTesting() {
          bitField0_ = (bitField0_ & ~0x00000008);
          usePipeInFrameworkForTesting_ = false;
          onChanged();
          return this;
        }
        @java.lang.Override
        public final Builder setUnknownFields(
            final com.google.protobuf.UnknownFieldSet unknownFields) {
          return super.setUnknownFields(unknownFields);
        }

        @java.lang.Override
        public final Builder mergeUnknownFields(
            final com.google.protobuf.UnknownFieldSet unknownFields) {
          return super.mergeUnknownFields(unknownFields);
        }


        // @@protoc_insertion_point(builder_scope:perfetto.protos.TraceConfig.AndroidReportConfig)
      }

      // @@protoc_insertion_point(class_scope:perfetto.protos.TraceConfig.AndroidReportConfig)
      private static final perfetto.protos.TraceConfigOuterClass.TraceConfig.AndroidReportConfig DEFAULT_INSTANCE;
      static {
        DEFAULT_INSTANCE = new perfetto.protos.TraceConfigOuterClass.TraceConfig.AndroidReportConfig();
      }

      public static perfetto.protos.TraceConfigOuterClass.TraceConfig.AndroidReportConfig getDefaultInstance() {
        return DEFAULT_INSTANCE;
      }

      @java.lang.Deprecated public static final com.google.protobuf.Parser<AndroidReportConfig>
          PARSER = new com.google.protobuf.AbstractParser<AndroidReportConfig>() {
        @java.lang.Override
        public AndroidReportConfig parsePartialFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws com.google.protobuf.InvalidProtocolBufferException {
          Builder builder = newBuilder();
          try {
            builder.mergeFrom(input, extensionRegistry);
          } catch (com.google.protobuf.InvalidProtocolBufferException e) {
            throw e.setUnfinishedMessage(builder.buildPartial());
          } catch (com.google.protobuf.UninitializedMessageException e) {
            throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
          } catch (java.io.IOException e) {
            throw new com.google.protobuf.InvalidProtocolBufferException(e)
                .setUnfinishedMessage(builder.buildPartial());
          }
          return builder.buildPartial();
        }
      };

      public static com.google.protobuf.Parser<AndroidReportConfig> parser() {
        return PARSER;
      }

      @java.lang.Override
      public com.google.protobuf.Parser<AndroidReportConfig> getParserForType() {
        return PARSER;
      }

      @java.lang.Override
      public perfetto.protos.TraceConfigOuterClass.TraceConfig.AndroidReportConfig getDefaultInstanceForType() {
        return DEFAULT_INSTANCE;
      }

    }

    public interface CmdTraceStartDelayOrBuilder extends
        // @@protoc_insertion_point(interface_extends:perfetto.protos.TraceConfig.CmdTraceStartDelay)
        com.google.protobuf.MessageOrBuilder {

      /**
       * <code>optional uint32 min_delay_ms = 1;</code>
       * @return Whether the minDelayMs field is set.
       */
      boolean hasMinDelayMs();
      /**
       * <code>optional uint32 min_delay_ms = 1;</code>
       * @return The minDelayMs.
       */
      int getMinDelayMs();

      /**
       * <code>optional uint32 max_delay_ms = 2;</code>
       * @return Whether the maxDelayMs field is set.
       */
      boolean hasMaxDelayMs();
      /**
       * <code>optional uint32 max_delay_ms = 2;</code>
       * @return The maxDelayMs.
       */
      int getMaxDelayMs();
    }
    /**
     * <pre>
     * If set, delays the start of tracing by a random duration. The duration is
     * chosen from a uniform distribution between the specified minimum and
     * maximum.
     * Note: this delay is implemented by perfetto_cmd *not* by traced so will
     * not work if you communicate with traced directly over the consumer API.
     * Introduced in Android T.
     * </pre>
     *
     * Protobuf type {@code perfetto.protos.TraceConfig.CmdTraceStartDelay}
     */
    public static final class CmdTraceStartDelay extends
        com.google.protobuf.GeneratedMessageV3 implements
        // @@protoc_insertion_point(message_implements:perfetto.protos.TraceConfig.CmdTraceStartDelay)
        CmdTraceStartDelayOrBuilder {
    private static final long serialVersionUID = 0L;
      // Use CmdTraceStartDelay.newBuilder() to construct.
      private CmdTraceStartDelay(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
        super(builder);
      }
      private CmdTraceStartDelay() {
      }

      @java.lang.Override
      @SuppressWarnings({"unused"})
      protected java.lang.Object newInstance(
          UnusedPrivateParameter unused) {
        return new CmdTraceStartDelay();
      }

      @java.lang.Override
      public final com.google.protobuf.UnknownFieldSet
      getUnknownFields() {
        return this.unknownFields;
      }
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return perfetto.protos.TraceConfigOuterClass.internal_static_perfetto_protos_TraceConfig_CmdTraceStartDelay_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return perfetto.protos.TraceConfigOuterClass.internal_static_perfetto_protos_TraceConfig_CmdTraceStartDelay_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                perfetto.protos.TraceConfigOuterClass.TraceConfig.CmdTraceStartDelay.class, perfetto.protos.TraceConfigOuterClass.TraceConfig.CmdTraceStartDelay.Builder.class);
      }

      private int bitField0_;
      public static final int MIN_DELAY_MS_FIELD_NUMBER = 1;
      private int minDelayMs_ = 0;
      /**
       * <code>optional uint32 min_delay_ms = 1;</code>
       * @return Whether the minDelayMs field is set.
       */
      @java.lang.Override
      public boolean hasMinDelayMs() {
        return ((bitField0_ & 0x00000001) != 0);
      }
      /**
       * <code>optional uint32 min_delay_ms = 1;</code>
       * @return The minDelayMs.
       */
      @java.lang.Override
      public int getMinDelayMs() {
        return minDelayMs_;
      }

      public static final int MAX_DELAY_MS_FIELD_NUMBER = 2;
      private int maxDelayMs_ = 0;
      /**
       * <code>optional uint32 max_delay_ms = 2;</code>
       * @return Whether the maxDelayMs field is set.
       */
      @java.lang.Override
      public boolean hasMaxDelayMs() {
        return ((bitField0_ & 0x00000002) != 0);
      }
      /**
       * <code>optional uint32 max_delay_ms = 2;</code>
       * @return The maxDelayMs.
       */
      @java.lang.Override
      public int getMaxDelayMs() {
        return maxDelayMs_;
      }

      private byte memoizedIsInitialized = -1;
      @java.lang.Override
      public final boolean isInitialized() {
        byte isInitialized = memoizedIsInitialized;
        if (isInitialized == 1) return true;
        if (isInitialized == 0) return false;

        memoizedIsInitialized = 1;
        return true;
      }

      @java.lang.Override
      public void writeTo(com.google.protobuf.CodedOutputStream output)
                          throws java.io.IOException {
        if (((bitField0_ & 0x00000001) != 0)) {
          output.writeUInt32(1, minDelayMs_);
        }
        if (((bitField0_ & 0x00000002) != 0)) {
          output.writeUInt32(2, maxDelayMs_);
        }
        getUnknownFields().writeTo(output);
      }

      @java.lang.Override
      public int getSerializedSize() {
        int size = memoizedSize;
        if (size != -1) return size;

        size = 0;
        if (((bitField0_ & 0x00000001) != 0)) {
          size += com.google.protobuf.CodedOutputStream
            .computeUInt32Size(1, minDelayMs_);
        }
        if (((bitField0_ & 0x00000002) != 0)) {
          size += com.google.protobuf.CodedOutputStream
            .computeUInt32Size(2, maxDelayMs_);
        }
        size += getUnknownFields().getSerializedSize();
        memoizedSize = size;
        return size;
      }

      @java.lang.Override
      public boolean equals(final java.lang.Object obj) {
        if (obj == this) {
         return true;
        }
        if (!(obj instanceof perfetto.protos.TraceConfigOuterClass.TraceConfig.CmdTraceStartDelay)) {
          return super.equals(obj);
        }
        perfetto.protos.TraceConfigOuterClass.TraceConfig.CmdTraceStartDelay other = (perfetto.protos.TraceConfigOuterClass.TraceConfig.CmdTraceStartDelay) obj;

        if (hasMinDelayMs() != other.hasMinDelayMs()) return false;
        if (hasMinDelayMs()) {
          if (getMinDelayMs()
              != other.getMinDelayMs()) return false;
        }
        if (hasMaxDelayMs() != other.hasMaxDelayMs()) return false;
        if (hasMaxDelayMs()) {
          if (getMaxDelayMs()
              != other.getMaxDelayMs()) return false;
        }
        if (!getUnknownFields().equals(other.getUnknownFields())) return false;
        return true;
      }

      @java.lang.Override
      public int hashCode() {
        if (memoizedHashCode != 0) {
          return memoizedHashCode;
        }
        int hash = 41;
        hash = (19 * hash) + getDescriptor().hashCode();
        if (hasMinDelayMs()) {
          hash = (37 * hash) + MIN_DELAY_MS_FIELD_NUMBER;
          hash = (53 * hash) + getMinDelayMs();
        }
        if (hasMaxDelayMs()) {
          hash = (37 * hash) + MAX_DELAY_MS_FIELD_NUMBER;
          hash = (53 * hash) + getMaxDelayMs();
        }
        hash = (29 * hash) + getUnknownFields().hashCode();
        memoizedHashCode = hash;
        return hash;
      }

      public static perfetto.protos.TraceConfigOuterClass.TraceConfig.CmdTraceStartDelay parseFrom(
          java.nio.ByteBuffer data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static perfetto.protos.TraceConfigOuterClass.TraceConfig.CmdTraceStartDelay parseFrom(
          java.nio.ByteBuffer data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static perfetto.protos.TraceConfigOuterClass.TraceConfig.CmdTraceStartDelay parseFrom(
          com.google.protobuf.ByteString data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static perfetto.protos.TraceConfigOuterClass.TraceConfig.CmdTraceStartDelay parseFrom(
          com.google.protobuf.ByteString data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static perfetto.protos.TraceConfigOuterClass.TraceConfig.CmdTraceStartDelay parseFrom(byte[] data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static perfetto.protos.TraceConfigOuterClass.TraceConfig.CmdTraceStartDelay parseFrom(
          byte[] data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static perfetto.protos.TraceConfigOuterClass.TraceConfig.CmdTraceStartDelay parseFrom(java.io.InputStream input)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseWithIOException(PARSER, input);
      }
      public static perfetto.protos.TraceConfigOuterClass.TraceConfig.CmdTraceStartDelay parseFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseWithIOException(PARSER, input, extensionRegistry);
      }
      public static perfetto.protos.TraceConfigOuterClass.TraceConfig.CmdTraceStartDelay parseDelimitedFrom(java.io.InputStream input)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseDelimitedWithIOException(PARSER, input);
      }
      public static perfetto.protos.TraceConfigOuterClass.TraceConfig.CmdTraceStartDelay parseDelimitedFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
      }
      public static perfetto.protos.TraceConfigOuterClass.TraceConfig.CmdTraceStartDelay parseFrom(
          com.google.protobuf.CodedInputStream input)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseWithIOException(PARSER, input);
      }
      public static perfetto.protos.TraceConfigOuterClass.TraceConfig.CmdTraceStartDelay parseFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseWithIOException(PARSER, input, extensionRegistry);
      }

      @java.lang.Override
      public Builder newBuilderForType() { return newBuilder(); }
      public static Builder newBuilder() {
        return DEFAULT_INSTANCE.toBuilder();
      }
      public static Builder newBuilder(perfetto.protos.TraceConfigOuterClass.TraceConfig.CmdTraceStartDelay prototype) {
        return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
      }
      @java.lang.Override
      public Builder toBuilder() {
        return this == DEFAULT_INSTANCE
            ? new Builder() : new Builder().mergeFrom(this);
      }

      @java.lang.Override
      protected Builder newBuilderForType(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        Builder builder = new Builder(parent);
        return builder;
      }
      /**
       * <pre>
       * If set, delays the start of tracing by a random duration. The duration is
       * chosen from a uniform distribution between the specified minimum and
       * maximum.
       * Note: this delay is implemented by perfetto_cmd *not* by traced so will
       * not work if you communicate with traced directly over the consumer API.
       * Introduced in Android T.
       * </pre>
       *
       * Protobuf type {@code perfetto.protos.TraceConfig.CmdTraceStartDelay}
       */
      public static final class Builder extends
          com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
          // @@protoc_insertion_point(builder_implements:perfetto.protos.TraceConfig.CmdTraceStartDelay)
          perfetto.protos.TraceConfigOuterClass.TraceConfig.CmdTraceStartDelayOrBuilder {
        public static final com.google.protobuf.Descriptors.Descriptor
            getDescriptor() {
          return perfetto.protos.TraceConfigOuterClass.internal_static_perfetto_protos_TraceConfig_CmdTraceStartDelay_descriptor;
        }

        @java.lang.Override
        protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
            internalGetFieldAccessorTable() {
          return perfetto.protos.TraceConfigOuterClass.internal_static_perfetto_protos_TraceConfig_CmdTraceStartDelay_fieldAccessorTable
              .ensureFieldAccessorsInitialized(
                  perfetto.protos.TraceConfigOuterClass.TraceConfig.CmdTraceStartDelay.class, perfetto.protos.TraceConfigOuterClass.TraceConfig.CmdTraceStartDelay.Builder.class);
        }

        // Construct using perfetto.protos.TraceConfigOuterClass.TraceConfig.CmdTraceStartDelay.newBuilder()
        private Builder() {

        }

        private Builder(
            com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
          super(parent);

        }
        @java.lang.Override
        public Builder clear() {
          super.clear();
          bitField0_ = 0;
          minDelayMs_ = 0;
          maxDelayMs_ = 0;
          return this;
        }

        @java.lang.Override
        public com.google.protobuf.Descriptors.Descriptor
            getDescriptorForType() {
          return perfetto.protos.TraceConfigOuterClass.internal_static_perfetto_protos_TraceConfig_CmdTraceStartDelay_descriptor;
        }

        @java.lang.Override
        public perfetto.protos.TraceConfigOuterClass.TraceConfig.CmdTraceStartDelay getDefaultInstanceForType() {
          return perfetto.protos.TraceConfigOuterClass.TraceConfig.CmdTraceStartDelay.getDefaultInstance();
        }

        @java.lang.Override
        public perfetto.protos.TraceConfigOuterClass.TraceConfig.CmdTraceStartDelay build() {
          perfetto.protos.TraceConfigOuterClass.TraceConfig.CmdTraceStartDelay result = buildPartial();
          if (!result.isInitialized()) {
            throw newUninitializedMessageException(result);
          }
          return result;
        }

        @java.lang.Override
        public perfetto.protos.TraceConfigOuterClass.TraceConfig.CmdTraceStartDelay buildPartial() {
          perfetto.protos.TraceConfigOuterClass.TraceConfig.CmdTraceStartDelay result = new perfetto.protos.TraceConfigOuterClass.TraceConfig.CmdTraceStartDelay(this);
          if (bitField0_ != 0) { buildPartial0(result); }
          onBuilt();
          return result;
        }

        private void buildPartial0(perfetto.protos.TraceConfigOuterClass.TraceConfig.CmdTraceStartDelay result) {
          int from_bitField0_ = bitField0_;
          int to_bitField0_ = 0;
          if (((from_bitField0_ & 0x00000001) != 0)) {
            result.minDelayMs_ = minDelayMs_;
            to_bitField0_ |= 0x00000001;
          }
          if (((from_bitField0_ & 0x00000002) != 0)) {
            result.maxDelayMs_ = maxDelayMs_;
            to_bitField0_ |= 0x00000002;
          }
          result.bitField0_ |= to_bitField0_;
        }

        @java.lang.Override
        public Builder clone() {
          return super.clone();
        }
        @java.lang.Override
        public Builder setField(
            com.google.protobuf.Descriptors.FieldDescriptor field,
            java.lang.Object value) {
          return super.setField(field, value);
        }
        @java.lang.Override
        public Builder clearField(
            com.google.protobuf.Descriptors.FieldDescriptor field) {
          return super.clearField(field);
        }
        @java.lang.Override
        public Builder clearOneof(
            com.google.protobuf.Descriptors.OneofDescriptor oneof) {
          return super.clearOneof(oneof);
        }
        @java.lang.Override
        public Builder setRepeatedField(
            com.google.protobuf.Descriptors.FieldDescriptor field,
            int index, java.lang.Object value) {
          return super.setRepeatedField(field, index, value);
        }
        @java.lang.Override
        public Builder addRepeatedField(
            com.google.protobuf.Descriptors.FieldDescriptor field,
            java.lang.Object value) {
          return super.addRepeatedField(field, value);
        }
        @java.lang.Override
        public Builder mergeFrom(com.google.protobuf.Message other) {
          if (other instanceof perfetto.protos.TraceConfigOuterClass.TraceConfig.CmdTraceStartDelay) {
            return mergeFrom((perfetto.protos.TraceConfigOuterClass.TraceConfig.CmdTraceStartDelay)other);
          } else {
            super.mergeFrom(other);
            return this;
          }
        }

        public Builder mergeFrom(perfetto.protos.TraceConfigOuterClass.TraceConfig.CmdTraceStartDelay other) {
          if (other == perfetto.protos.TraceConfigOuterClass.TraceConfig.CmdTraceStartDelay.getDefaultInstance()) return this;
          if (other.hasMinDelayMs()) {
            setMinDelayMs(other.getMinDelayMs());
          }
          if (other.hasMaxDelayMs()) {
            setMaxDelayMs(other.getMaxDelayMs());
          }
          this.mergeUnknownFields(other.getUnknownFields());
          onChanged();
          return this;
        }

        @java.lang.Override
        public final boolean isInitialized() {
          return true;
        }

        @java.lang.Override
        public Builder mergeFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws java.io.IOException {
          if (extensionRegistry == null) {
            throw new java.lang.NullPointerException();
          }
          try {
            boolean done = false;
            while (!done) {
              int tag = input.readTag();
              switch (tag) {
                case 0:
                  done = true;
                  break;
                case 8: {
                  minDelayMs_ = input.readUInt32();
                  bitField0_ |= 0x00000001;
                  break;
                } // case 8
                case 16: {
                  maxDelayMs_ = input.readUInt32();
                  bitField0_ |= 0x00000002;
                  break;
                } // case 16
                default: {
                  if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                    done = true; // was an endgroup tag
                  }
                  break;
                } // default:
              } // switch (tag)
            } // while (!done)
          } catch (com.google.protobuf.InvalidProtocolBufferException e) {
            throw e.unwrapIOException();
          } finally {
            onChanged();
          } // finally
          return this;
        }
        private int bitField0_;

        private int minDelayMs_ ;
        /**
         * <code>optional uint32 min_delay_ms = 1;</code>
         * @return Whether the minDelayMs field is set.
         */
        @java.lang.Override
        public boolean hasMinDelayMs() {
          return ((bitField0_ & 0x00000001) != 0);
        }
        /**
         * <code>optional uint32 min_delay_ms = 1;</code>
         * @return The minDelayMs.
         */
        @java.lang.Override
        public int getMinDelayMs() {
          return minDelayMs_;
        }
        /**
         * <code>optional uint32 min_delay_ms = 1;</code>
         * @param value The minDelayMs to set.
         * @return This builder for chaining.
         */
        public Builder setMinDelayMs(int value) {
          
          minDelayMs_ = value;
          bitField0_ |= 0x00000001;
          onChanged();
          return this;
        }
        /**
         * <code>optional uint32 min_delay_ms = 1;</code>
         * @return This builder for chaining.
         */
        public Builder clearMinDelayMs() {
          bitField0_ = (bitField0_ & ~0x00000001);
          minDelayMs_ = 0;
          onChanged();
          return this;
        }

        private int maxDelayMs_ ;
        /**
         * <code>optional uint32 max_delay_ms = 2;</code>
         * @return Whether the maxDelayMs field is set.
         */
        @java.lang.Override
        public boolean hasMaxDelayMs() {
          return ((bitField0_ & 0x00000002) != 0);
        }
        /**
         * <code>optional uint32 max_delay_ms = 2;</code>
         * @return The maxDelayMs.
         */
        @java.lang.Override
        public int getMaxDelayMs() {
          return maxDelayMs_;
        }
        /**
         * <code>optional uint32 max_delay_ms = 2;</code>
         * @param value The maxDelayMs to set.
         * @return This builder for chaining.
         */
        public Builder setMaxDelayMs(int value) {
          
          maxDelayMs_ = value;
          bitField0_ |= 0x00000002;
          onChanged();
          return this;
        }
        /**
         * <code>optional uint32 max_delay_ms = 2;</code>
         * @return This builder for chaining.
         */
        public Builder clearMaxDelayMs() {
          bitField0_ = (bitField0_ & ~0x00000002);
          maxDelayMs_ = 0;
          onChanged();
          return this;
        }
        @java.lang.Override
        public final Builder setUnknownFields(
            final com.google.protobuf.UnknownFieldSet unknownFields) {
          return super.setUnknownFields(unknownFields);
        }

        @java.lang.Override
        public final Builder mergeUnknownFields(
            final com.google.protobuf.UnknownFieldSet unknownFields) {
          return super.mergeUnknownFields(unknownFields);
        }


        // @@protoc_insertion_point(builder_scope:perfetto.protos.TraceConfig.CmdTraceStartDelay)
      }

      // @@protoc_insertion_point(class_scope:perfetto.protos.TraceConfig.CmdTraceStartDelay)
      private static final perfetto.protos.TraceConfigOuterClass.TraceConfig.CmdTraceStartDelay DEFAULT_INSTANCE;
      static {
        DEFAULT_INSTANCE = new perfetto.protos.TraceConfigOuterClass.TraceConfig.CmdTraceStartDelay();
      }

      public static perfetto.protos.TraceConfigOuterClass.TraceConfig.CmdTraceStartDelay getDefaultInstance() {
        return DEFAULT_INSTANCE;
      }

      @java.lang.Deprecated public static final com.google.protobuf.Parser<CmdTraceStartDelay>
          PARSER = new com.google.protobuf.AbstractParser<CmdTraceStartDelay>() {
        @java.lang.Override
        public CmdTraceStartDelay parsePartialFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws com.google.protobuf.InvalidProtocolBufferException {
          Builder builder = newBuilder();
          try {
            builder.mergeFrom(input, extensionRegistry);
          } catch (com.google.protobuf.InvalidProtocolBufferException e) {
            throw e.setUnfinishedMessage(builder.buildPartial());
          } catch (com.google.protobuf.UninitializedMessageException e) {
            throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
          } catch (java.io.IOException e) {
            throw new com.google.protobuf.InvalidProtocolBufferException(e)
                .setUnfinishedMessage(builder.buildPartial());
          }
          return builder.buildPartial();
        }
      };

      public static com.google.protobuf.Parser<CmdTraceStartDelay> parser() {
        return PARSER;
      }

      @java.lang.Override
      public com.google.protobuf.Parser<CmdTraceStartDelay> getParserForType() {
        return PARSER;
      }

      @java.lang.Override
      public perfetto.protos.TraceConfigOuterClass.TraceConfig.CmdTraceStartDelay getDefaultInstanceForType() {
        return DEFAULT_INSTANCE;
      }

    }

    private int bitField0_;
    public static final int BUFFERS_FIELD_NUMBER = 1;
    @SuppressWarnings("serial")
    private java.util.List<perfetto.protos.TraceConfigOuterClass.TraceConfig.BufferConfig> buffers_;
    /**
     * <code>repeated .perfetto.protos.TraceConfig.BufferConfig buffers = 1;</code>
     */
    @java.lang.Override
    public java.util.List<perfetto.protos.TraceConfigOuterClass.TraceConfig.BufferConfig> getBuffersList() {
      return buffers_;
    }
    /**
     * <code>repeated .perfetto.protos.TraceConfig.BufferConfig buffers = 1;</code>
     */
    @java.lang.Override
    public java.util.List<? extends perfetto.protos.TraceConfigOuterClass.TraceConfig.BufferConfigOrBuilder> 
        getBuffersOrBuilderList() {
      return buffers_;
    }
    /**
     * <code>repeated .perfetto.protos.TraceConfig.BufferConfig buffers = 1;</code>
     */
    @java.lang.Override
    public int getBuffersCount() {
      return buffers_.size();
    }
    /**
     * <code>repeated .perfetto.protos.TraceConfig.BufferConfig buffers = 1;</code>
     */
    @java.lang.Override
    public perfetto.protos.TraceConfigOuterClass.TraceConfig.BufferConfig getBuffers(int index) {
      return buffers_.get(index);
    }
    /**
     * <code>repeated .perfetto.protos.TraceConfig.BufferConfig buffers = 1;</code>
     */
    @java.lang.Override
    public perfetto.protos.TraceConfigOuterClass.TraceConfig.BufferConfigOrBuilder getBuffersOrBuilder(
        int index) {
      return buffers_.get(index);
    }

    public static final int DATA_SOURCES_FIELD_NUMBER = 2;
    @SuppressWarnings("serial")
    private java.util.List<perfetto.protos.TraceConfigOuterClass.TraceConfig.DataSource> dataSources_;
    /**
     * <code>repeated .perfetto.protos.TraceConfig.DataSource data_sources = 2;</code>
     */
    @java.lang.Override
    public java.util.List<perfetto.protos.TraceConfigOuterClass.TraceConfig.DataSource> getDataSourcesList() {
      return dataSources_;
    }
    /**
     * <code>repeated .perfetto.protos.TraceConfig.DataSource data_sources = 2;</code>
     */
    @java.lang.Override
    public java.util.List<? extends perfetto.protos.TraceConfigOuterClass.TraceConfig.DataSourceOrBuilder> 
        getDataSourcesOrBuilderList() {
      return dataSources_;
    }
    /**
     * <code>repeated .perfetto.protos.TraceConfig.DataSource data_sources = 2;</code>
     */
    @java.lang.Override
    public int getDataSourcesCount() {
      return dataSources_.size();
    }
    /**
     * <code>repeated .perfetto.protos.TraceConfig.DataSource data_sources = 2;</code>
     */
    @java.lang.Override
    public perfetto.protos.TraceConfigOuterClass.TraceConfig.DataSource getDataSources(int index) {
      return dataSources_.get(index);
    }
    /**
     * <code>repeated .perfetto.protos.TraceConfig.DataSource data_sources = 2;</code>
     */
    @java.lang.Override
    public perfetto.protos.TraceConfigOuterClass.TraceConfig.DataSourceOrBuilder getDataSourcesOrBuilder(
        int index) {
      return dataSources_.get(index);
    }

    public static final int BUILTIN_DATA_SOURCES_FIELD_NUMBER = 20;
    private perfetto.protos.TraceConfigOuterClass.TraceConfig.BuiltinDataSource builtinDataSources_;
    /**
     * <code>optional .perfetto.protos.TraceConfig.BuiltinDataSource builtin_data_sources = 20;</code>
     * @return Whether the builtinDataSources field is set.
     */
    @java.lang.Override
    public boolean hasBuiltinDataSources() {
      return ((bitField0_ & 0x00000001) != 0);
    }
    /**
     * <code>optional .perfetto.protos.TraceConfig.BuiltinDataSource builtin_data_sources = 20;</code>
     * @return The builtinDataSources.
     */
    @java.lang.Override
    public perfetto.protos.TraceConfigOuterClass.TraceConfig.BuiltinDataSource getBuiltinDataSources() {
      return builtinDataSources_ == null ? perfetto.protos.TraceConfigOuterClass.TraceConfig.BuiltinDataSource.getDefaultInstance() : builtinDataSources_;
    }
    /**
     * <code>optional .perfetto.protos.TraceConfig.BuiltinDataSource builtin_data_sources = 20;</code>
     */
    @java.lang.Override
    public perfetto.protos.TraceConfigOuterClass.TraceConfig.BuiltinDataSourceOrBuilder getBuiltinDataSourcesOrBuilder() {
      return builtinDataSources_ == null ? perfetto.protos.TraceConfigOuterClass.TraceConfig.BuiltinDataSource.getDefaultInstance() : builtinDataSources_;
    }

    public static final int DURATION_MS_FIELD_NUMBER = 3;
    private int durationMs_ = 0;
    /**
     * <pre>
     * If specified, the trace will be stopped |duration_ms| after starting.
     * This does *not* count the time the system is suspended, so we will run
     * for duration_ms of system activity, not wall time.
     * However in case of traces with triggers, see
     * TriggerConfig.trigger_timeout_ms instead.
     * </pre>
     *
     * <code>optional uint32 duration_ms = 3;</code>
     * @return Whether the durationMs field is set.
     */
    @java.lang.Override
    public boolean hasDurationMs() {
      return ((bitField0_ & 0x00000002) != 0);
    }
    /**
     * <pre>
     * If specified, the trace will be stopped |duration_ms| after starting.
     * This does *not* count the time the system is suspended, so we will run
     * for duration_ms of system activity, not wall time.
     * However in case of traces with triggers, see
     * TriggerConfig.trigger_timeout_ms instead.
     * </pre>
     *
     * <code>optional uint32 duration_ms = 3;</code>
     * @return The durationMs.
     */
    @java.lang.Override
    public int getDurationMs() {
      return durationMs_;
    }

    public static final int ENABLE_EXTRA_GUARDRAILS_FIELD_NUMBER = 4;
    private boolean enableExtraGuardrails_ = false;
    /**
     * <pre>
     * This is set when --dropbox is passed to the Perfetto command line client
     * and enables guardrails that limit resource usage for traces requested
     * by statsd.
     * </pre>
     *
     * <code>optional bool enable_extra_guardrails = 4;</code>
     * @return Whether the enableExtraGuardrails field is set.
     */
    @java.lang.Override
    public boolean hasEnableExtraGuardrails() {
      return ((bitField0_ & 0x00000004) != 0);
    }
    /**
     * <pre>
     * This is set when --dropbox is passed to the Perfetto command line client
     * and enables guardrails that limit resource usage for traces requested
     * by statsd.
     * </pre>
     *
     * <code>optional bool enable_extra_guardrails = 4;</code>
     * @return The enableExtraGuardrails.
     */
    @java.lang.Override
    public boolean getEnableExtraGuardrails() {
      return enableExtraGuardrails_;
    }

    public static final int LOCKDOWN_MODE_FIELD_NUMBER = 5;
    private int lockdownMode_ = 0;
    /**
     * <pre>
     * Reject producers that are not running under the same UID as the tracing
     * service.
     * </pre>
     *
     * <code>optional .perfetto.protos.TraceConfig.LockdownModeOperation lockdown_mode = 5;</code>
     * @return Whether the lockdownMode field is set.
     */
    @java.lang.Override public boolean hasLockdownMode() {
      return ((bitField0_ & 0x00000008) != 0);
    }
    /**
     * <pre>
     * Reject producers that are not running under the same UID as the tracing
     * service.
     * </pre>
     *
     * <code>optional .perfetto.protos.TraceConfig.LockdownModeOperation lockdown_mode = 5;</code>
     * @return The lockdownMode.
     */
    @java.lang.Override public perfetto.protos.TraceConfigOuterClass.TraceConfig.LockdownModeOperation getLockdownMode() {
      perfetto.protos.TraceConfigOuterClass.TraceConfig.LockdownModeOperation result = perfetto.protos.TraceConfigOuterClass.TraceConfig.LockdownModeOperation.forNumber(lockdownMode_);
      return result == null ? perfetto.protos.TraceConfigOuterClass.TraceConfig.LockdownModeOperation.LOCKDOWN_UNCHANGED : result;
    }

    public static final int PRODUCERS_FIELD_NUMBER = 6;
    @SuppressWarnings("serial")
    private java.util.List<perfetto.protos.TraceConfigOuterClass.TraceConfig.ProducerConfig> producers_;
    /**
     * <code>repeated .perfetto.protos.TraceConfig.ProducerConfig producers = 6;</code>
     */
    @java.lang.Override
    public java.util.List<perfetto.protos.TraceConfigOuterClass.TraceConfig.ProducerConfig> getProducersList() {
      return producers_;
    }
    /**
     * <code>repeated .perfetto.protos.TraceConfig.ProducerConfig producers = 6;</code>
     */
    @java.lang.Override
    public java.util.List<? extends perfetto.protos.TraceConfigOuterClass.TraceConfig.ProducerConfigOrBuilder> 
        getProducersOrBuilderList() {
      return producers_;
    }
    /**
     * <code>repeated .perfetto.protos.TraceConfig.ProducerConfig producers = 6;</code>
     */
    @java.lang.Override
    public int getProducersCount() {
      return producers_.size();
    }
    /**
     * <code>repeated .perfetto.protos.TraceConfig.ProducerConfig producers = 6;</code>
     */
    @java.lang.Override
    public perfetto.protos.TraceConfigOuterClass.TraceConfig.ProducerConfig getProducers(int index) {
      return producers_.get(index);
    }
    /**
     * <code>repeated .perfetto.protos.TraceConfig.ProducerConfig producers = 6;</code>
     */
    @java.lang.Override
    public perfetto.protos.TraceConfigOuterClass.TraceConfig.ProducerConfigOrBuilder getProducersOrBuilder(
        int index) {
      return producers_.get(index);
    }

    public static final int STATSD_METADATA_FIELD_NUMBER = 7;
    private perfetto.protos.TraceConfigOuterClass.TraceConfig.StatsdMetadata statsdMetadata_;
    /**
     * <pre>
     * Statsd-specific metadata.
     * </pre>
     *
     * <code>optional .perfetto.protos.TraceConfig.StatsdMetadata statsd_metadata = 7;</code>
     * @return Whether the statsdMetadata field is set.
     */
    @java.lang.Override
    public boolean hasStatsdMetadata() {
      return ((bitField0_ & 0x00000010) != 0);
    }
    /**
     * <pre>
     * Statsd-specific metadata.
     * </pre>
     *
     * <code>optional .perfetto.protos.TraceConfig.StatsdMetadata statsd_metadata = 7;</code>
     * @return The statsdMetadata.
     */
    @java.lang.Override
    public perfetto.protos.TraceConfigOuterClass.TraceConfig.StatsdMetadata getStatsdMetadata() {
      return statsdMetadata_ == null ? perfetto.protos.TraceConfigOuterClass.TraceConfig.StatsdMetadata.getDefaultInstance() : statsdMetadata_;
    }
    /**
     * <pre>
     * Statsd-specific metadata.
     * </pre>
     *
     * <code>optional .perfetto.protos.TraceConfig.StatsdMetadata statsd_metadata = 7;</code>
     */
    @java.lang.Override
    public perfetto.protos.TraceConfigOuterClass.TraceConfig.StatsdMetadataOrBuilder getStatsdMetadataOrBuilder() {
      return statsdMetadata_ == null ? perfetto.protos.TraceConfigOuterClass.TraceConfig.StatsdMetadata.getDefaultInstance() : statsdMetadata_;
    }

    public static final int WRITE_INTO_FILE_FIELD_NUMBER = 8;
    private boolean writeIntoFile_ = false;
    /**
     * <pre>
     * When true &amp;&amp; |output_path| is empty, the EnableTracing() request must
     * provide a file descriptor. The service will then periodically read packets
     * out of the trace buffer and store it into the passed file.
     * If |output_path| is not empty no fd should be passed, the service
     * will create a new file and write into that (see comment below).
     * </pre>
     *
     * <code>optional bool write_into_file = 8;</code>
     * @return Whether the writeIntoFile field is set.
     */
    @java.lang.Override
    public boolean hasWriteIntoFile() {
      return ((bitField0_ & 0x00000020) != 0);
    }
    /**
     * <pre>
     * When true &amp;&amp; |output_path| is empty, the EnableTracing() request must
     * provide a file descriptor. The service will then periodically read packets
     * out of the trace buffer and store it into the passed file.
     * If |output_path| is not empty no fd should be passed, the service
     * will create a new file and write into that (see comment below).
     * </pre>
     *
     * <code>optional bool write_into_file = 8;</code>
     * @return The writeIntoFile.
     */
    @java.lang.Override
    public boolean getWriteIntoFile() {
      return writeIntoFile_;
    }

    public static final int OUTPUT_PATH_FIELD_NUMBER = 29;
    @SuppressWarnings("serial")
    private volatile java.lang.Object outputPath_ = "";
    /**
     * <pre>
     * This must point to a non-existing file. If the file exists the service
     * will NOT overwrite and will fail instead as a security precaution.
     * On Android, when this is used with the system traced, the path must be
     * within /data/misc/perfetto-traces/ or the trace will fail.
     * This option has been introduced in Android R. Before R write_into_file
     * can be used only with the "pass a file descriptor over IPC" mode.
     * </pre>
     *
     * <code>optional string output_path = 29;</code>
     * @return Whether the outputPath field is set.
     */
    @java.lang.Override
    public boolean hasOutputPath() {
      return ((bitField0_ & 0x00000040) != 0);
    }
    /**
     * <pre>
     * This must point to a non-existing file. If the file exists the service
     * will NOT overwrite and will fail instead as a security precaution.
     * On Android, when this is used with the system traced, the path must be
     * within /data/misc/perfetto-traces/ or the trace will fail.
     * This option has been introduced in Android R. Before R write_into_file
     * can be used only with the "pass a file descriptor over IPC" mode.
     * </pre>
     *
     * <code>optional string output_path = 29;</code>
     * @return The outputPath.
     */
    @java.lang.Override
    public java.lang.String getOutputPath() {
      java.lang.Object ref = outputPath_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        if (bs.isValidUtf8()) {
          outputPath_ = s;
        }
        return s;
      }
    }
    /**
     * <pre>
     * This must point to a non-existing file. If the file exists the service
     * will NOT overwrite and will fail instead as a security precaution.
     * On Android, when this is used with the system traced, the path must be
     * within /data/misc/perfetto-traces/ or the trace will fail.
     * This option has been introduced in Android R. Before R write_into_file
     * can be used only with the "pass a file descriptor over IPC" mode.
     * </pre>
     *
     * <code>optional string output_path = 29;</code>
     * @return The bytes for outputPath.
     */
    @java.lang.Override
    public com.google.protobuf.ByteString
        getOutputPathBytes() {
      java.lang.Object ref = outputPath_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        outputPath_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    public static final int FILE_WRITE_PERIOD_MS_FIELD_NUMBER = 9;
    private int fileWritePeriodMs_ = 0;
    /**
     * <pre>
     * Optional. If non-zero tunes the write period. A min value of 100ms is
     * enforced (i.e. smaller values are ignored).
     * </pre>
     *
     * <code>optional uint32 file_write_period_ms = 9;</code>
     * @return Whether the fileWritePeriodMs field is set.
     */
    @java.lang.Override
    public boolean hasFileWritePeriodMs() {
      return ((bitField0_ & 0x00000080) != 0);
    }
    /**
     * <pre>
     * Optional. If non-zero tunes the write period. A min value of 100ms is
     * enforced (i.e. smaller values are ignored).
     * </pre>
     *
     * <code>optional uint32 file_write_period_ms = 9;</code>
     * @return The fileWritePeriodMs.
     */
    @java.lang.Override
    public int getFileWritePeriodMs() {
      return fileWritePeriodMs_;
    }

    public static final int MAX_FILE_SIZE_BYTES_FIELD_NUMBER = 10;
    private long maxFileSizeBytes_ = 0L;
    /**
     * <pre>
     * Optional. When non zero the periodic write stops once at most X bytes
     * have been written into the file. Tracing is disabled when this limit is
     * reached, even if |duration_ms| has not been reached yet.
     * </pre>
     *
     * <code>optional uint64 max_file_size_bytes = 10;</code>
     * @return Whether the maxFileSizeBytes field is set.
     */
    @java.lang.Override
    public boolean hasMaxFileSizeBytes() {
      return ((bitField0_ & 0x00000100) != 0);
    }
    /**
     * <pre>
     * Optional. When non zero the periodic write stops once at most X bytes
     * have been written into the file. Tracing is disabled when this limit is
     * reached, even if |duration_ms| has not been reached yet.
     * </pre>
     *
     * <code>optional uint64 max_file_size_bytes = 10;</code>
     * @return The maxFileSizeBytes.
     */
    @java.lang.Override
    public long getMaxFileSizeBytes() {
      return maxFileSizeBytes_;
    }

    public static final int GUARDRAIL_OVERRIDES_FIELD_NUMBER = 11;
    private perfetto.protos.TraceConfigOuterClass.TraceConfig.GuardrailOverrides guardrailOverrides_;
    /**
     * <code>optional .perfetto.protos.TraceConfig.GuardrailOverrides guardrail_overrides = 11;</code>
     * @return Whether the guardrailOverrides field is set.
     */
    @java.lang.Override
    public boolean hasGuardrailOverrides() {
      return ((bitField0_ & 0x00000200) != 0);
    }
    /**
     * <code>optional .perfetto.protos.TraceConfig.GuardrailOverrides guardrail_overrides = 11;</code>
     * @return The guardrailOverrides.
     */
    @java.lang.Override
    public perfetto.protos.TraceConfigOuterClass.TraceConfig.GuardrailOverrides getGuardrailOverrides() {
      return guardrailOverrides_ == null ? perfetto.protos.TraceConfigOuterClass.TraceConfig.GuardrailOverrides.getDefaultInstance() : guardrailOverrides_;
    }
    /**
     * <code>optional .perfetto.protos.TraceConfig.GuardrailOverrides guardrail_overrides = 11;</code>
     */
    @java.lang.Override
    public perfetto.protos.TraceConfigOuterClass.TraceConfig.GuardrailOverridesOrBuilder getGuardrailOverridesOrBuilder() {
      return guardrailOverrides_ == null ? perfetto.protos.TraceConfigOuterClass.TraceConfig.GuardrailOverrides.getDefaultInstance() : guardrailOverrides_;
    }

    public static final int DEFERRED_START_FIELD_NUMBER = 12;
    private boolean deferredStart_ = false;
    /**
     * <pre>
     * When true, data sources are not started until an explicit call to
     * StartTracing() on the consumer port. This is to support early
     * initialization and fast trace triggering. This can be used only when the
     * Consumer explicitly triggers the StartTracing() method.
     * This should not be used in a remote trace config via statsd, doing so will
     * result in a hung trace session.
     * </pre>
     *
     * <code>optional bool deferred_start = 12;</code>
     * @return Whether the deferredStart field is set.
     */
    @java.lang.Override
    public boolean hasDeferredStart() {
      return ((bitField0_ & 0x00000400) != 0);
    }
    /**
     * <pre>
     * When true, data sources are not started until an explicit call to
     * StartTracing() on the consumer port. This is to support early
     * initialization and fast trace triggering. This can be used only when the
     * Consumer explicitly triggers the StartTracing() method.
     * This should not be used in a remote trace config via statsd, doing so will
     * result in a hung trace session.
     * </pre>
     *
     * <code>optional bool deferred_start = 12;</code>
     * @return The deferredStart.
     */
    @java.lang.Override
    public boolean getDeferredStart() {
      return deferredStart_;
    }

    public static final int FLUSH_PERIOD_MS_FIELD_NUMBER = 13;
    private int flushPeriodMs_ = 0;
    /**
     * <pre>
     * When set, it periodically issues a Flush() to all data source, forcing them
     * to commit their data into the tracing service. This can be used for
     * quasi-real-time streaming mode and to guarantee some partial ordering of
     * events in the trace in windows of X ms.
     * </pre>
     *
     * <code>optional uint32 flush_period_ms = 13;</code>
     * @return Whether the flushPeriodMs field is set.
     */
    @java.lang.Override
    public boolean hasFlushPeriodMs() {
      return ((bitField0_ & 0x00000800) != 0);
    }
    /**
     * <pre>
     * When set, it periodically issues a Flush() to all data source, forcing them
     * to commit their data into the tracing service. This can be used for
     * quasi-real-time streaming mode and to guarantee some partial ordering of
     * events in the trace in windows of X ms.
     * </pre>
     *
     * <code>optional uint32 flush_period_ms = 13;</code>
     * @return The flushPeriodMs.
     */
    @java.lang.Override
    public int getFlushPeriodMs() {
      return flushPeriodMs_;
    }

    public static final int FLUSH_TIMEOUT_MS_FIELD_NUMBER = 14;
    private int flushTimeoutMs_ = 0;
    /**
     * <pre>
     * Wait for this long for producers to acknowledge flush requests.
     * Default 5s.
     * </pre>
     *
     * <code>optional uint32 flush_timeout_ms = 14;</code>
     * @return Whether the flushTimeoutMs field is set.
     */
    @java.lang.Override
    public boolean hasFlushTimeoutMs() {
      return ((bitField0_ & 0x00001000) != 0);
    }
    /**
     * <pre>
     * Wait for this long for producers to acknowledge flush requests.
     * Default 5s.
     * </pre>
     *
     * <code>optional uint32 flush_timeout_ms = 14;</code>
     * @return The flushTimeoutMs.
     */
    @java.lang.Override
    public int getFlushTimeoutMs() {
      return flushTimeoutMs_;
    }

    public static final int DATA_SOURCE_STOP_TIMEOUT_MS_FIELD_NUMBER = 23;
    private int dataSourceStopTimeoutMs_ = 0;
    /**
     * <pre>
     * Wait for this long for producers to acknowledge stop requests.
     * Default 5s.
     * </pre>
     *
     * <code>optional uint32 data_source_stop_timeout_ms = 23;</code>
     * @return Whether the dataSourceStopTimeoutMs field is set.
     */
    @java.lang.Override
    public boolean hasDataSourceStopTimeoutMs() {
      return ((bitField0_ & 0x00002000) != 0);
    }
    /**
     * <pre>
     * Wait for this long for producers to acknowledge stop requests.
     * Default 5s.
     * </pre>
     *
     * <code>optional uint32 data_source_stop_timeout_ms = 23;</code>
     * @return The dataSourceStopTimeoutMs.
     */
    @java.lang.Override
    public int getDataSourceStopTimeoutMs() {
      return dataSourceStopTimeoutMs_;
    }

    public static final int NOTIFY_TRACEUR_FIELD_NUMBER = 16;
    private boolean notifyTraceur_ = false;
    /**
     * <pre>
     * Android-only. If set, sends an intent to the Traceur system app when the
     * trace ends to notify it about the trace readiness.
     * </pre>
     *
     * <code>optional bool notify_traceur = 16;</code>
     * @return Whether the notifyTraceur field is set.
     */
    @java.lang.Override
    public boolean hasNotifyTraceur() {
      return ((bitField0_ & 0x00004000) != 0);
    }
    /**
     * <pre>
     * Android-only. If set, sends an intent to the Traceur system app when the
     * trace ends to notify it about the trace readiness.
     * </pre>
     *
     * <code>optional bool notify_traceur = 16;</code>
     * @return The notifyTraceur.
     */
    @java.lang.Override
    public boolean getNotifyTraceur() {
      return notifyTraceur_;
    }

    public static final int BUGREPORT_SCORE_FIELD_NUMBER = 30;
    private int bugreportScore_ = 0;
    /**
     * <pre>
     * Android-only. If set to a value &gt; 0, marks the trace session as a candidate
     * for being attached to a bugreport. This field effectively acts as a z-index
     * for bugreports. When Android's dumpstate runs perfetto
     * --save-for-bugreport, traced will pick the tracing session with the highest
     * score (score &lt;= 0 is ignored), will steal its contents, save the trace into
     * a known path and stop prematurely.
     * This field was introduced in Android S.
     * </pre>
     *
     * <code>optional int32 bugreport_score = 30;</code>
     * @return Whether the bugreportScore field is set.
     */
    @java.lang.Override
    public boolean hasBugreportScore() {
      return ((bitField0_ & 0x00008000) != 0);
    }
    /**
     * <pre>
     * Android-only. If set to a value &gt; 0, marks the trace session as a candidate
     * for being attached to a bugreport. This field effectively acts as a z-index
     * for bugreports. When Android's dumpstate runs perfetto
     * --save-for-bugreport, traced will pick the tracing session with the highest
     * score (score &lt;= 0 is ignored), will steal its contents, save the trace into
     * a known path and stop prematurely.
     * This field was introduced in Android S.
     * </pre>
     *
     * <code>optional int32 bugreport_score = 30;</code>
     * @return The bugreportScore.
     */
    @java.lang.Override
    public int getBugreportScore() {
      return bugreportScore_;
    }

    public static final int TRIGGER_CONFIG_FIELD_NUMBER = 17;
    private perfetto.protos.TraceConfigOuterClass.TraceConfig.TriggerConfig triggerConfig_;
    /**
     * <code>optional .perfetto.protos.TraceConfig.TriggerConfig trigger_config = 17;</code>
     * @return Whether the triggerConfig field is set.
     */
    @java.lang.Override
    public boolean hasTriggerConfig() {
      return ((bitField0_ & 0x00010000) != 0);
    }
    /**
     * <code>optional .perfetto.protos.TraceConfig.TriggerConfig trigger_config = 17;</code>
     * @return The triggerConfig.
     */
    @java.lang.Override
    public perfetto.protos.TraceConfigOuterClass.TraceConfig.TriggerConfig getTriggerConfig() {
      return triggerConfig_ == null ? perfetto.protos.TraceConfigOuterClass.TraceConfig.TriggerConfig.getDefaultInstance() : triggerConfig_;
    }
    /**
     * <code>optional .perfetto.protos.TraceConfig.TriggerConfig trigger_config = 17;</code>
     */
    @java.lang.Override
    public perfetto.protos.TraceConfigOuterClass.TraceConfig.TriggerConfigOrBuilder getTriggerConfigOrBuilder() {
      return triggerConfig_ == null ? perfetto.protos.TraceConfigOuterClass.TraceConfig.TriggerConfig.getDefaultInstance() : triggerConfig_;
    }

    public static final int ACTIVATE_TRIGGERS_FIELD_NUMBER = 18;
    @SuppressWarnings("serial")
    private com.google.protobuf.LazyStringList activateTriggers_;
    /**
     * <pre>
     * When this is non-empty the perfetto command line tool will ignore the rest
     * of this TraceConfig and instead connect to the perfetto service as a
     * producer and send these triggers, potentially stopping or starting traces
     * that were previous configured to use a TriggerConfig.
     * </pre>
     *
     * <code>repeated string activate_triggers = 18;</code>
     * @return A list containing the activateTriggers.
     */
    public com.google.protobuf.ProtocolStringList
        getActivateTriggersList() {
      return activateTriggers_;
    }
    /**
     * <pre>
     * When this is non-empty the perfetto command line tool will ignore the rest
     * of this TraceConfig and instead connect to the perfetto service as a
     * producer and send these triggers, potentially stopping or starting traces
     * that were previous configured to use a TriggerConfig.
     * </pre>
     *
     * <code>repeated string activate_triggers = 18;</code>
     * @return The count of activateTriggers.
     */
    public int getActivateTriggersCount() {
      return activateTriggers_.size();
    }
    /**
     * <pre>
     * When this is non-empty the perfetto command line tool will ignore the rest
     * of this TraceConfig and instead connect to the perfetto service as a
     * producer and send these triggers, potentially stopping or starting traces
     * that were previous configured to use a TriggerConfig.
     * </pre>
     *
     * <code>repeated string activate_triggers = 18;</code>
     * @param index The index of the element to return.
     * @return The activateTriggers at the given index.
     */
    public java.lang.String getActivateTriggers(int index) {
      return activateTriggers_.get(index);
    }
    /**
     * <pre>
     * When this is non-empty the perfetto command line tool will ignore the rest
     * of this TraceConfig and instead connect to the perfetto service as a
     * producer and send these triggers, potentially stopping or starting traces
     * that were previous configured to use a TriggerConfig.
     * </pre>
     *
     * <code>repeated string activate_triggers = 18;</code>
     * @param index The index of the value to return.
     * @return The bytes of the activateTriggers at the given index.
     */
    public com.google.protobuf.ByteString
        getActivateTriggersBytes(int index) {
      return activateTriggers_.getByteString(index);
    }

    public static final int INCREMENTAL_STATE_CONFIG_FIELD_NUMBER = 21;
    private perfetto.protos.TraceConfigOuterClass.TraceConfig.IncrementalStateConfig incrementalStateConfig_;
    /**
     * <code>optional .perfetto.protos.TraceConfig.IncrementalStateConfig incremental_state_config = 21;</code>
     * @return Whether the incrementalStateConfig field is set.
     */
    @java.lang.Override
    public boolean hasIncrementalStateConfig() {
      return ((bitField0_ & 0x00020000) != 0);
    }
    /**
     * <code>optional .perfetto.protos.TraceConfig.IncrementalStateConfig incremental_state_config = 21;</code>
     * @return The incrementalStateConfig.
     */
    @java.lang.Override
    public perfetto.protos.TraceConfigOuterClass.TraceConfig.IncrementalStateConfig getIncrementalStateConfig() {
      return incrementalStateConfig_ == null ? perfetto.protos.TraceConfigOuterClass.TraceConfig.IncrementalStateConfig.getDefaultInstance() : incrementalStateConfig_;
    }
    /**
     * <code>optional .perfetto.protos.TraceConfig.IncrementalStateConfig incremental_state_config = 21;</code>
     */
    @java.lang.Override
    public perfetto.protos.TraceConfigOuterClass.TraceConfig.IncrementalStateConfigOrBuilder getIncrementalStateConfigOrBuilder() {
      return incrementalStateConfig_ == null ? perfetto.protos.TraceConfigOuterClass.TraceConfig.IncrementalStateConfig.getDefaultInstance() : incrementalStateConfig_;
    }

    public static final int ALLOW_USER_BUILD_TRACING_FIELD_NUMBER = 19;
    private boolean allowUserBuildTracing_ = false;
    /**
     * <pre>
     * Additional guardrail used by the Perfetto command line client.
     * On user builds when --dropbox is set perfetto will refuse to trace unless
     * this is also set.
     * Added in Q.
     * </pre>
     *
     * <code>optional bool allow_user_build_tracing = 19;</code>
     * @return Whether the allowUserBuildTracing field is set.
     */
    @java.lang.Override
    public boolean hasAllowUserBuildTracing() {
      return ((bitField0_ & 0x00040000) != 0);
    }
    /**
     * <pre>
     * Additional guardrail used by the Perfetto command line client.
     * On user builds when --dropbox is set perfetto will refuse to trace unless
     * this is also set.
     * Added in Q.
     * </pre>
     *
     * <code>optional bool allow_user_build_tracing = 19;</code>
     * @return The allowUserBuildTracing.
     */
    @java.lang.Override
    public boolean getAllowUserBuildTracing() {
      return allowUserBuildTracing_;
    }

    public static final int UNIQUE_SESSION_NAME_FIELD_NUMBER = 22;
    @SuppressWarnings("serial")
    private volatile java.lang.Object uniqueSessionName_ = "";
    /**
     * <pre>
     * If set the tracing service will ensure there is at most one tracing session
     * with this key.
     * </pre>
     *
     * <code>optional string unique_session_name = 22;</code>
     * @return Whether the uniqueSessionName field is set.
     */
    @java.lang.Override
    public boolean hasUniqueSessionName() {
      return ((bitField0_ & 0x00080000) != 0);
    }
    /**
     * <pre>
     * If set the tracing service will ensure there is at most one tracing session
     * with this key.
     * </pre>
     *
     * <code>optional string unique_session_name = 22;</code>
     * @return The uniqueSessionName.
     */
    @java.lang.Override
    public java.lang.String getUniqueSessionName() {
      java.lang.Object ref = uniqueSessionName_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        if (bs.isValidUtf8()) {
          uniqueSessionName_ = s;
        }
        return s;
      }
    }
    /**
     * <pre>
     * If set the tracing service will ensure there is at most one tracing session
     * with this key.
     * </pre>
     *
     * <code>optional string unique_session_name = 22;</code>
     * @return The bytes for uniqueSessionName.
     */
    @java.lang.Override
    public com.google.protobuf.ByteString
        getUniqueSessionNameBytes() {
      java.lang.Object ref = uniqueSessionName_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        uniqueSessionName_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    public static final int COMPRESSION_TYPE_FIELD_NUMBER = 24;
    private int compressionType_ = 0;
    /**
     * <code>optional .perfetto.protos.TraceConfig.CompressionType compression_type = 24;</code>
     * @return Whether the compressionType field is set.
     */
    @java.lang.Override public boolean hasCompressionType() {
      return ((bitField0_ & 0x00100000) != 0);
    }
    /**
     * <code>optional .perfetto.protos.TraceConfig.CompressionType compression_type = 24;</code>
     * @return The compressionType.
     */
    @java.lang.Override public perfetto.protos.TraceConfigOuterClass.TraceConfig.CompressionType getCompressionType() {
      perfetto.protos.TraceConfigOuterClass.TraceConfig.CompressionType result = perfetto.protos.TraceConfigOuterClass.TraceConfig.CompressionType.forNumber(compressionType_);
      return result == null ? perfetto.protos.TraceConfigOuterClass.TraceConfig.CompressionType.COMPRESSION_TYPE_UNSPECIFIED : result;
    }

    public static final int INCIDENT_REPORT_CONFIG_FIELD_NUMBER = 25;
    private perfetto.protos.TraceConfigOuterClass.TraceConfig.IncidentReportConfig incidentReportConfig_;
    /**
     * <code>optional .perfetto.protos.TraceConfig.IncidentReportConfig incident_report_config = 25;</code>
     * @return Whether the incidentReportConfig field is set.
     */
    @java.lang.Override
    public boolean hasIncidentReportConfig() {
      return ((bitField0_ & 0x00200000) != 0);
    }
    /**
     * <code>optional .perfetto.protos.TraceConfig.IncidentReportConfig incident_report_config = 25;</code>
     * @return The incidentReportConfig.
     */
    @java.lang.Override
    public perfetto.protos.TraceConfigOuterClass.TraceConfig.IncidentReportConfig getIncidentReportConfig() {
      return incidentReportConfig_ == null ? perfetto.protos.TraceConfigOuterClass.TraceConfig.IncidentReportConfig.getDefaultInstance() : incidentReportConfig_;
    }
    /**
     * <code>optional .perfetto.protos.TraceConfig.IncidentReportConfig incident_report_config = 25;</code>
     */
    @java.lang.Override
    public perfetto.protos.TraceConfigOuterClass.TraceConfig.IncidentReportConfigOrBuilder getIncidentReportConfigOrBuilder() {
      return incidentReportConfig_ == null ? perfetto.protos.TraceConfigOuterClass.TraceConfig.IncidentReportConfig.getDefaultInstance() : incidentReportConfig_;
    }

    public static final int STATSD_LOGGING_FIELD_NUMBER = 31;
    private int statsdLogging_ = 0;
    /**
     * <pre>
     * Android-only. Not for general use. If specified, sets the logging to statsd
     * of guardrails and checkpoints in the tracing service. perfetto_cmd sets
     * this to enabled (if not explicitly set in the config) when specifying
     * --upload.
     * </pre>
     *
     * <code>optional .perfetto.protos.TraceConfig.StatsdLogging statsd_logging = 31;</code>
     * @return Whether the statsdLogging field is set.
     */
    @java.lang.Override public boolean hasStatsdLogging() {
      return ((bitField0_ & 0x00400000) != 0);
    }
    /**
     * <pre>
     * Android-only. Not for general use. If specified, sets the logging to statsd
     * of guardrails and checkpoints in the tracing service. perfetto_cmd sets
     * this to enabled (if not explicitly set in the config) when specifying
     * --upload.
     * </pre>
     *
     * <code>optional .perfetto.protos.TraceConfig.StatsdLogging statsd_logging = 31;</code>
     * @return The statsdLogging.
     */
    @java.lang.Override public perfetto.protos.TraceConfigOuterClass.TraceConfig.StatsdLogging getStatsdLogging() {
      perfetto.protos.TraceConfigOuterClass.TraceConfig.StatsdLogging result = perfetto.protos.TraceConfigOuterClass.TraceConfig.StatsdLogging.forNumber(statsdLogging_);
      return result == null ? perfetto.protos.TraceConfigOuterClass.TraceConfig.StatsdLogging.STATSD_LOGGING_UNSPECIFIED : result;
    }

    public static final int TRACE_UUID_MSB_FIELD_NUMBER = 27;
    private long traceUuidMsb_ = 0L;
    /**
     * <pre>
     * An identifier clients can use to tie this trace to other logging.
     * DEPRECATED as per v32. See TracePacket.trace_uuid for the authoritative
     * Trace UUID. If this field is set, the tracing service will respect the
     * requested UUID (i.e. TracePacket.trace_uuid == this field) but only if
     * gap-less snapshotting is not used.
     * </pre>
     *
     * <code>optional int64 trace_uuid_msb = 27 [deprecated = true];</code>
     * @deprecated perfetto.protos.TraceConfig.trace_uuid_msb is deprecated.
     *     See protos/perfetto/config/trace_config.proto;l=429
     * @return Whether the traceUuidMsb field is set.
     */
    @java.lang.Override
    @java.lang.Deprecated public boolean hasTraceUuidMsb() {
      return ((bitField0_ & 0x00800000) != 0);
    }
    /**
     * <pre>
     * An identifier clients can use to tie this trace to other logging.
     * DEPRECATED as per v32. See TracePacket.trace_uuid for the authoritative
     * Trace UUID. If this field is set, the tracing service will respect the
     * requested UUID (i.e. TracePacket.trace_uuid == this field) but only if
     * gap-less snapshotting is not used.
     * </pre>
     *
     * <code>optional int64 trace_uuid_msb = 27 [deprecated = true];</code>
     * @deprecated perfetto.protos.TraceConfig.trace_uuid_msb is deprecated.
     *     See protos/perfetto/config/trace_config.proto;l=429
     * @return The traceUuidMsb.
     */
    @java.lang.Override
    @java.lang.Deprecated public long getTraceUuidMsb() {
      return traceUuidMsb_;
    }

    public static final int TRACE_UUID_LSB_FIELD_NUMBER = 28;
    private long traceUuidLsb_ = 0L;
    /**
     * <code>optional int64 trace_uuid_lsb = 28 [deprecated = true];</code>
     * @deprecated perfetto.protos.TraceConfig.trace_uuid_lsb is deprecated.
     *     See protos/perfetto/config/trace_config.proto;l=430
     * @return Whether the traceUuidLsb field is set.
     */
    @java.lang.Override
    @java.lang.Deprecated public boolean hasTraceUuidLsb() {
      return ((bitField0_ & 0x01000000) != 0);
    }
    /**
     * <code>optional int64 trace_uuid_lsb = 28 [deprecated = true];</code>
     * @deprecated perfetto.protos.TraceConfig.trace_uuid_lsb is deprecated.
     *     See protos/perfetto/config/trace_config.proto;l=430
     * @return The traceUuidLsb.
     */
    @java.lang.Override
    @java.lang.Deprecated public long getTraceUuidLsb() {
      return traceUuidLsb_;
    }

    public static final int TRACE_FILTER_FIELD_NUMBER = 33;
    private perfetto.protos.TraceConfigOuterClass.TraceConfig.TraceFilter traceFilter_;
    /**
     * <code>optional .perfetto.protos.TraceConfig.TraceFilter trace_filter = 33;</code>
     * @return Whether the traceFilter field is set.
     */
    @java.lang.Override
    public boolean hasTraceFilter() {
      return ((bitField0_ & 0x02000000) != 0);
    }
    /**
     * <code>optional .perfetto.protos.TraceConfig.TraceFilter trace_filter = 33;</code>
     * @return The traceFilter.
     */
    @java.lang.Override
    public perfetto.protos.TraceConfigOuterClass.TraceConfig.TraceFilter getTraceFilter() {
      return traceFilter_ == null ? perfetto.protos.TraceConfigOuterClass.TraceConfig.TraceFilter.getDefaultInstance() : traceFilter_;
    }
    /**
     * <code>optional .perfetto.protos.TraceConfig.TraceFilter trace_filter = 33;</code>
     */
    @java.lang.Override
    public perfetto.protos.TraceConfigOuterClass.TraceConfig.TraceFilterOrBuilder getTraceFilterOrBuilder() {
      return traceFilter_ == null ? perfetto.protos.TraceConfigOuterClass.TraceConfig.TraceFilter.getDefaultInstance() : traceFilter_;
    }

    public static final int ANDROID_REPORT_CONFIG_FIELD_NUMBER = 34;
    private perfetto.protos.TraceConfigOuterClass.TraceConfig.AndroidReportConfig androidReportConfig_;
    /**
     * <code>optional .perfetto.protos.TraceConfig.AndroidReportConfig android_report_config = 34;</code>
     * @return Whether the androidReportConfig field is set.
     */
    @java.lang.Override
    public boolean hasAndroidReportConfig() {
      return ((bitField0_ & 0x04000000) != 0);
    }
    /**
     * <code>optional .perfetto.protos.TraceConfig.AndroidReportConfig android_report_config = 34;</code>
     * @return The androidReportConfig.
     */
    @java.lang.Override
    public perfetto.protos.TraceConfigOuterClass.TraceConfig.AndroidReportConfig getAndroidReportConfig() {
      return androidReportConfig_ == null ? perfetto.protos.TraceConfigOuterClass.TraceConfig.AndroidReportConfig.getDefaultInstance() : androidReportConfig_;
    }
    /**
     * <code>optional .perfetto.protos.TraceConfig.AndroidReportConfig android_report_config = 34;</code>
     */
    @java.lang.Override
    public perfetto.protos.TraceConfigOuterClass.TraceConfig.AndroidReportConfigOrBuilder getAndroidReportConfigOrBuilder() {
      return androidReportConfig_ == null ? perfetto.protos.TraceConfigOuterClass.TraceConfig.AndroidReportConfig.getDefaultInstance() : androidReportConfig_;
    }

    public static final int CMD_TRACE_START_DELAY_FIELD_NUMBER = 35;
    private perfetto.protos.TraceConfigOuterClass.TraceConfig.CmdTraceStartDelay cmdTraceStartDelay_;
    /**
     * <code>optional .perfetto.protos.TraceConfig.CmdTraceStartDelay cmd_trace_start_delay = 35;</code>
     * @return Whether the cmdTraceStartDelay field is set.
     */
    @java.lang.Override
    public boolean hasCmdTraceStartDelay() {
      return ((bitField0_ & 0x08000000) != 0);
    }
    /**
     * <code>optional .perfetto.protos.TraceConfig.CmdTraceStartDelay cmd_trace_start_delay = 35;</code>
     * @return The cmdTraceStartDelay.
     */
    @java.lang.Override
    public perfetto.protos.TraceConfigOuterClass.TraceConfig.CmdTraceStartDelay getCmdTraceStartDelay() {
      return cmdTraceStartDelay_ == null ? perfetto.protos.TraceConfigOuterClass.TraceConfig.CmdTraceStartDelay.getDefaultInstance() : cmdTraceStartDelay_;
    }
    /**
     * <code>optional .perfetto.protos.TraceConfig.CmdTraceStartDelay cmd_trace_start_delay = 35;</code>
     */
    @java.lang.Override
    public perfetto.protos.TraceConfigOuterClass.TraceConfig.CmdTraceStartDelayOrBuilder getCmdTraceStartDelayOrBuilder() {
      return cmdTraceStartDelay_ == null ? perfetto.protos.TraceConfigOuterClass.TraceConfig.CmdTraceStartDelay.getDefaultInstance() : cmdTraceStartDelay_;
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      for (int i = 0; i < buffers_.size(); i++) {
        output.writeMessage(1, buffers_.get(i));
      }
      for (int i = 0; i < dataSources_.size(); i++) {
        output.writeMessage(2, dataSources_.get(i));
      }
      if (((bitField0_ & 0x00000002) != 0)) {
        output.writeUInt32(3, durationMs_);
      }
      if (((bitField0_ & 0x00000004) != 0)) {
        output.writeBool(4, enableExtraGuardrails_);
      }
      if (((bitField0_ & 0x00000008) != 0)) {
        output.writeEnum(5, lockdownMode_);
      }
      for (int i = 0; i < producers_.size(); i++) {
        output.writeMessage(6, producers_.get(i));
      }
      if (((bitField0_ & 0x00000010) != 0)) {
        output.writeMessage(7, getStatsdMetadata());
      }
      if (((bitField0_ & 0x00000020) != 0)) {
        output.writeBool(8, writeIntoFile_);
      }
      if (((bitField0_ & 0x00000080) != 0)) {
        output.writeUInt32(9, fileWritePeriodMs_);
      }
      if (((bitField0_ & 0x00000100) != 0)) {
        output.writeUInt64(10, maxFileSizeBytes_);
      }
      if (((bitField0_ & 0x00000200) != 0)) {
        output.writeMessage(11, getGuardrailOverrides());
      }
      if (((bitField0_ & 0x00000400) != 0)) {
        output.writeBool(12, deferredStart_);
      }
      if (((bitField0_ & 0x00000800) != 0)) {
        output.writeUInt32(13, flushPeriodMs_);
      }
      if (((bitField0_ & 0x00001000) != 0)) {
        output.writeUInt32(14, flushTimeoutMs_);
      }
      if (((bitField0_ & 0x00004000) != 0)) {
        output.writeBool(16, notifyTraceur_);
      }
      if (((bitField0_ & 0x00010000) != 0)) {
        output.writeMessage(17, getTriggerConfig());
      }
      for (int i = 0; i < activateTriggers_.size(); i++) {
        com.google.protobuf.GeneratedMessageV3.writeString(output, 18, activateTriggers_.getRaw(i));
      }
      if (((bitField0_ & 0x00040000) != 0)) {
        output.writeBool(19, allowUserBuildTracing_);
      }
      if (((bitField0_ & 0x00000001) != 0)) {
        output.writeMessage(20, getBuiltinDataSources());
      }
      if (((bitField0_ & 0x00020000) != 0)) {
        output.writeMessage(21, getIncrementalStateConfig());
      }
      if (((bitField0_ & 0x00080000) != 0)) {
        com.google.protobuf.GeneratedMessageV3.writeString(output, 22, uniqueSessionName_);
      }
      if (((bitField0_ & 0x00002000) != 0)) {
        output.writeUInt32(23, dataSourceStopTimeoutMs_);
      }
      if (((bitField0_ & 0x00100000) != 0)) {
        output.writeEnum(24, compressionType_);
      }
      if (((bitField0_ & 0x00200000) != 0)) {
        output.writeMessage(25, getIncidentReportConfig());
      }
      if (((bitField0_ & 0x00800000) != 0)) {
        output.writeInt64(27, traceUuidMsb_);
      }
      if (((bitField0_ & 0x01000000) != 0)) {
        output.writeInt64(28, traceUuidLsb_);
      }
      if (((bitField0_ & 0x00000040) != 0)) {
        com.google.protobuf.GeneratedMessageV3.writeString(output, 29, outputPath_);
      }
      if (((bitField0_ & 0x00008000) != 0)) {
        output.writeInt32(30, bugreportScore_);
      }
      if (((bitField0_ & 0x00400000) != 0)) {
        output.writeEnum(31, statsdLogging_);
      }
      if (((bitField0_ & 0x02000000) != 0)) {
        output.writeMessage(33, getTraceFilter());
      }
      if (((bitField0_ & 0x04000000) != 0)) {
        output.writeMessage(34, getAndroidReportConfig());
      }
      if (((bitField0_ & 0x08000000) != 0)) {
        output.writeMessage(35, getCmdTraceStartDelay());
      }
      getUnknownFields().writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      for (int i = 0; i < buffers_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(1, buffers_.get(i));
      }
      for (int i = 0; i < dataSources_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(2, dataSources_.get(i));
      }
      if (((bitField0_ & 0x00000002) != 0)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(3, durationMs_);
      }
      if (((bitField0_ & 0x00000004) != 0)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(4, enableExtraGuardrails_);
      }
      if (((bitField0_ & 0x00000008) != 0)) {
        size += com.google.protobuf.CodedOutputStream
          .computeEnumSize(5, lockdownMode_);
      }
      for (int i = 0; i < producers_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(6, producers_.get(i));
      }
      if (((bitField0_ & 0x00000010) != 0)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(7, getStatsdMetadata());
      }
      if (((bitField0_ & 0x00000020) != 0)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(8, writeIntoFile_);
      }
      if (((bitField0_ & 0x00000080) != 0)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(9, fileWritePeriodMs_);
      }
      if (((bitField0_ & 0x00000100) != 0)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt64Size(10, maxFileSizeBytes_);
      }
      if (((bitField0_ & 0x00000200) != 0)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(11, getGuardrailOverrides());
      }
      if (((bitField0_ & 0x00000400) != 0)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(12, deferredStart_);
      }
      if (((bitField0_ & 0x00000800) != 0)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(13, flushPeriodMs_);
      }
      if (((bitField0_ & 0x00001000) != 0)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(14, flushTimeoutMs_);
      }
      if (((bitField0_ & 0x00004000) != 0)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(16, notifyTraceur_);
      }
      if (((bitField0_ & 0x00010000) != 0)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(17, getTriggerConfig());
      }
      {
        int dataSize = 0;
        for (int i = 0; i < activateTriggers_.size(); i++) {
          dataSize += computeStringSizeNoTag(activateTriggers_.getRaw(i));
        }
        size += dataSize;
        size += 2 * getActivateTriggersList().size();
      }
      if (((bitField0_ & 0x00040000) != 0)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(19, allowUserBuildTracing_);
      }
      if (((bitField0_ & 0x00000001) != 0)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(20, getBuiltinDataSources());
      }
      if (((bitField0_ & 0x00020000) != 0)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(21, getIncrementalStateConfig());
      }
      if (((bitField0_ & 0x00080000) != 0)) {
        size += com.google.protobuf.GeneratedMessageV3.computeStringSize(22, uniqueSessionName_);
      }
      if (((bitField0_ & 0x00002000) != 0)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(23, dataSourceStopTimeoutMs_);
      }
      if (((bitField0_ & 0x00100000) != 0)) {
        size += com.google.protobuf.CodedOutputStream
          .computeEnumSize(24, compressionType_);
      }
      if (((bitField0_ & 0x00200000) != 0)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(25, getIncidentReportConfig());
      }
      if (((bitField0_ & 0x00800000) != 0)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt64Size(27, traceUuidMsb_);
      }
      if (((bitField0_ & 0x01000000) != 0)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt64Size(28, traceUuidLsb_);
      }
      if (((bitField0_ & 0x00000040) != 0)) {
        size += com.google.protobuf.GeneratedMessageV3.computeStringSize(29, outputPath_);
      }
      if (((bitField0_ & 0x00008000) != 0)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(30, bugreportScore_);
      }
      if (((bitField0_ & 0x00400000) != 0)) {
        size += com.google.protobuf.CodedOutputStream
          .computeEnumSize(31, statsdLogging_);
      }
      if (((bitField0_ & 0x02000000) != 0)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(33, getTraceFilter());
      }
      if (((bitField0_ & 0x04000000) != 0)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(34, getAndroidReportConfig());
      }
      if (((bitField0_ & 0x08000000) != 0)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(35, getCmdTraceStartDelay());
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof perfetto.protos.TraceConfigOuterClass.TraceConfig)) {
        return super.equals(obj);
      }
      perfetto.protos.TraceConfigOuterClass.TraceConfig other = (perfetto.protos.TraceConfigOuterClass.TraceConfig) obj;

      if (!getBuffersList()
          .equals(other.getBuffersList())) return false;
      if (!getDataSourcesList()
          .equals(other.getDataSourcesList())) return false;
      if (hasBuiltinDataSources() != other.hasBuiltinDataSources()) return false;
      if (hasBuiltinDataSources()) {
        if (!getBuiltinDataSources()
            .equals(other.getBuiltinDataSources())) return false;
      }
      if (hasDurationMs() != other.hasDurationMs()) return false;
      if (hasDurationMs()) {
        if (getDurationMs()
            != other.getDurationMs()) return false;
      }
      if (hasEnableExtraGuardrails() != other.hasEnableExtraGuardrails()) return false;
      if (hasEnableExtraGuardrails()) {
        if (getEnableExtraGuardrails()
            != other.getEnableExtraGuardrails()) return false;
      }
      if (hasLockdownMode() != other.hasLockdownMode()) return false;
      if (hasLockdownMode()) {
        if (lockdownMode_ != other.lockdownMode_) return false;
      }
      if (!getProducersList()
          .equals(other.getProducersList())) return false;
      if (hasStatsdMetadata() != other.hasStatsdMetadata()) return false;
      if (hasStatsdMetadata()) {
        if (!getStatsdMetadata()
            .equals(other.getStatsdMetadata())) return false;
      }
      if (hasWriteIntoFile() != other.hasWriteIntoFile()) return false;
      if (hasWriteIntoFile()) {
        if (getWriteIntoFile()
            != other.getWriteIntoFile()) return false;
      }
      if (hasOutputPath() != other.hasOutputPath()) return false;
      if (hasOutputPath()) {
        if (!getOutputPath()
            .equals(other.getOutputPath())) return false;
      }
      if (hasFileWritePeriodMs() != other.hasFileWritePeriodMs()) return false;
      if (hasFileWritePeriodMs()) {
        if (getFileWritePeriodMs()
            != other.getFileWritePeriodMs()) return false;
      }
      if (hasMaxFileSizeBytes() != other.hasMaxFileSizeBytes()) return false;
      if (hasMaxFileSizeBytes()) {
        if (getMaxFileSizeBytes()
            != other.getMaxFileSizeBytes()) return false;
      }
      if (hasGuardrailOverrides() != other.hasGuardrailOverrides()) return false;
      if (hasGuardrailOverrides()) {
        if (!getGuardrailOverrides()
            .equals(other.getGuardrailOverrides())) return false;
      }
      if (hasDeferredStart() != other.hasDeferredStart()) return false;
      if (hasDeferredStart()) {
        if (getDeferredStart()
            != other.getDeferredStart()) return false;
      }
      if (hasFlushPeriodMs() != other.hasFlushPeriodMs()) return false;
      if (hasFlushPeriodMs()) {
        if (getFlushPeriodMs()
            != other.getFlushPeriodMs()) return false;
      }
      if (hasFlushTimeoutMs() != other.hasFlushTimeoutMs()) return false;
      if (hasFlushTimeoutMs()) {
        if (getFlushTimeoutMs()
            != other.getFlushTimeoutMs()) return false;
      }
      if (hasDataSourceStopTimeoutMs() != other.hasDataSourceStopTimeoutMs()) return false;
      if (hasDataSourceStopTimeoutMs()) {
        if (getDataSourceStopTimeoutMs()
            != other.getDataSourceStopTimeoutMs()) return false;
      }
      if (hasNotifyTraceur() != other.hasNotifyTraceur()) return false;
      if (hasNotifyTraceur()) {
        if (getNotifyTraceur()
            != other.getNotifyTraceur()) return false;
      }
      if (hasBugreportScore() != other.hasBugreportScore()) return false;
      if (hasBugreportScore()) {
        if (getBugreportScore()
            != other.getBugreportScore()) return false;
      }
      if (hasTriggerConfig() != other.hasTriggerConfig()) return false;
      if (hasTriggerConfig()) {
        if (!getTriggerConfig()
            .equals(other.getTriggerConfig())) return false;
      }
      if (!getActivateTriggersList()
          .equals(other.getActivateTriggersList())) return false;
      if (hasIncrementalStateConfig() != other.hasIncrementalStateConfig()) return false;
      if (hasIncrementalStateConfig()) {
        if (!getIncrementalStateConfig()
            .equals(other.getIncrementalStateConfig())) return false;
      }
      if (hasAllowUserBuildTracing() != other.hasAllowUserBuildTracing()) return false;
      if (hasAllowUserBuildTracing()) {
        if (getAllowUserBuildTracing()
            != other.getAllowUserBuildTracing()) return false;
      }
      if (hasUniqueSessionName() != other.hasUniqueSessionName()) return false;
      if (hasUniqueSessionName()) {
        if (!getUniqueSessionName()
            .equals(other.getUniqueSessionName())) return false;
      }
      if (hasCompressionType() != other.hasCompressionType()) return false;
      if (hasCompressionType()) {
        if (compressionType_ != other.compressionType_) return false;
      }
      if (hasIncidentReportConfig() != other.hasIncidentReportConfig()) return false;
      if (hasIncidentReportConfig()) {
        if (!getIncidentReportConfig()
            .equals(other.getIncidentReportConfig())) return false;
      }
      if (hasStatsdLogging() != other.hasStatsdLogging()) return false;
      if (hasStatsdLogging()) {
        if (statsdLogging_ != other.statsdLogging_) return false;
      }
      if (hasTraceUuidMsb() != other.hasTraceUuidMsb()) return false;
      if (hasTraceUuidMsb()) {
        if (getTraceUuidMsb()
            != other.getTraceUuidMsb()) return false;
      }
      if (hasTraceUuidLsb() != other.hasTraceUuidLsb()) return false;
      if (hasTraceUuidLsb()) {
        if (getTraceUuidLsb()
            != other.getTraceUuidLsb()) return false;
      }
      if (hasTraceFilter() != other.hasTraceFilter()) return false;
      if (hasTraceFilter()) {
        if (!getTraceFilter()
            .equals(other.getTraceFilter())) return false;
      }
      if (hasAndroidReportConfig() != other.hasAndroidReportConfig()) return false;
      if (hasAndroidReportConfig()) {
        if (!getAndroidReportConfig()
            .equals(other.getAndroidReportConfig())) return false;
      }
      if (hasCmdTraceStartDelay() != other.hasCmdTraceStartDelay()) return false;
      if (hasCmdTraceStartDelay()) {
        if (!getCmdTraceStartDelay()
            .equals(other.getCmdTraceStartDelay())) return false;
      }
      if (!getUnknownFields().equals(other.getUnknownFields())) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      if (getBuffersCount() > 0) {
        hash = (37 * hash) + BUFFERS_FIELD_NUMBER;
        hash = (53 * hash) + getBuffersList().hashCode();
      }
      if (getDataSourcesCount() > 0) {
        hash = (37 * hash) + DATA_SOURCES_FIELD_NUMBER;
        hash = (53 * hash) + getDataSourcesList().hashCode();
      }
      if (hasBuiltinDataSources()) {
        hash = (37 * hash) + BUILTIN_DATA_SOURCES_FIELD_NUMBER;
        hash = (53 * hash) + getBuiltinDataSources().hashCode();
      }
      if (hasDurationMs()) {
        hash = (37 * hash) + DURATION_MS_FIELD_NUMBER;
        hash = (53 * hash) + getDurationMs();
      }
      if (hasEnableExtraGuardrails()) {
        hash = (37 * hash) + ENABLE_EXTRA_GUARDRAILS_FIELD_NUMBER;
        hash = (53 * hash) + com.google.protobuf.Internal.hashBoolean(
            getEnableExtraGuardrails());
      }
      if (hasLockdownMode()) {
        hash = (37 * hash) + LOCKDOWN_MODE_FIELD_NUMBER;
        hash = (53 * hash) + lockdownMode_;
      }
      if (getProducersCount() > 0) {
        hash = (37 * hash) + PRODUCERS_FIELD_NUMBER;
        hash = (53 * hash) + getProducersList().hashCode();
      }
      if (hasStatsdMetadata()) {
        hash = (37 * hash) + STATSD_METADATA_FIELD_NUMBER;
        hash = (53 * hash) + getStatsdMetadata().hashCode();
      }
      if (hasWriteIntoFile()) {
        hash = (37 * hash) + WRITE_INTO_FILE_FIELD_NUMBER;
        hash = (53 * hash) + com.google.protobuf.Internal.hashBoolean(
            getWriteIntoFile());
      }
      if (hasOutputPath()) {
        hash = (37 * hash) + OUTPUT_PATH_FIELD_NUMBER;
        hash = (53 * hash) + getOutputPath().hashCode();
      }
      if (hasFileWritePeriodMs()) {
        hash = (37 * hash) + FILE_WRITE_PERIOD_MS_FIELD_NUMBER;
        hash = (53 * hash) + getFileWritePeriodMs();
      }
      if (hasMaxFileSizeBytes()) {
        hash = (37 * hash) + MAX_FILE_SIZE_BYTES_FIELD_NUMBER;
        hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
            getMaxFileSizeBytes());
      }
      if (hasGuardrailOverrides()) {
        hash = (37 * hash) + GUARDRAIL_OVERRIDES_FIELD_NUMBER;
        hash = (53 * hash) + getGuardrailOverrides().hashCode();
      }
      if (hasDeferredStart()) {
        hash = (37 * hash) + DEFERRED_START_FIELD_NUMBER;
        hash = (53 * hash) + com.google.protobuf.Internal.hashBoolean(
            getDeferredStart());
      }
      if (hasFlushPeriodMs()) {
        hash = (37 * hash) + FLUSH_PERIOD_MS_FIELD_NUMBER;
        hash = (53 * hash) + getFlushPeriodMs();
      }
      if (hasFlushTimeoutMs()) {
        hash = (37 * hash) + FLUSH_TIMEOUT_MS_FIELD_NUMBER;
        hash = (53 * hash) + getFlushTimeoutMs();
      }
      if (hasDataSourceStopTimeoutMs()) {
        hash = (37 * hash) + DATA_SOURCE_STOP_TIMEOUT_MS_FIELD_NUMBER;
        hash = (53 * hash) + getDataSourceStopTimeoutMs();
      }
      if (hasNotifyTraceur()) {
        hash = (37 * hash) + NOTIFY_TRACEUR_FIELD_NUMBER;
        hash = (53 * hash) + com.google.protobuf.Internal.hashBoolean(
            getNotifyTraceur());
      }
      if (hasBugreportScore()) {
        hash = (37 * hash) + BUGREPORT_SCORE_FIELD_NUMBER;
        hash = (53 * hash) + getBugreportScore();
      }
      if (hasTriggerConfig()) {
        hash = (37 * hash) + TRIGGER_CONFIG_FIELD_NUMBER;
        hash = (53 * hash) + getTriggerConfig().hashCode();
      }
      if (getActivateTriggersCount() > 0) {
        hash = (37 * hash) + ACTIVATE_TRIGGERS_FIELD_NUMBER;
        hash = (53 * hash) + getActivateTriggersList().hashCode();
      }
      if (hasIncrementalStateConfig()) {
        hash = (37 * hash) + INCREMENTAL_STATE_CONFIG_FIELD_NUMBER;
        hash = (53 * hash) + getIncrementalStateConfig().hashCode();
      }
      if (hasAllowUserBuildTracing()) {
        hash = (37 * hash) + ALLOW_USER_BUILD_TRACING_FIELD_NUMBER;
        hash = (53 * hash) + com.google.protobuf.Internal.hashBoolean(
            getAllowUserBuildTracing());
      }
      if (hasUniqueSessionName()) {
        hash = (37 * hash) + UNIQUE_SESSION_NAME_FIELD_NUMBER;
        hash = (53 * hash) + getUniqueSessionName().hashCode();
      }
      if (hasCompressionType()) {
        hash = (37 * hash) + COMPRESSION_TYPE_FIELD_NUMBER;
        hash = (53 * hash) + compressionType_;
      }
      if (hasIncidentReportConfig()) {
        hash = (37 * hash) + INCIDENT_REPORT_CONFIG_FIELD_NUMBER;
        hash = (53 * hash) + getIncidentReportConfig().hashCode();
      }
      if (hasStatsdLogging()) {
        hash = (37 * hash) + STATSD_LOGGING_FIELD_NUMBER;
        hash = (53 * hash) + statsdLogging_;
      }
      if (hasTraceUuidMsb()) {
        hash = (37 * hash) + TRACE_UUID_MSB_FIELD_NUMBER;
        hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
            getTraceUuidMsb());
      }
      if (hasTraceUuidLsb()) {
        hash = (37 * hash) + TRACE_UUID_LSB_FIELD_NUMBER;
        hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
            getTraceUuidLsb());
      }
      if (hasTraceFilter()) {
        hash = (37 * hash) + TRACE_FILTER_FIELD_NUMBER;
        hash = (53 * hash) + getTraceFilter().hashCode();
      }
      if (hasAndroidReportConfig()) {
        hash = (37 * hash) + ANDROID_REPORT_CONFIG_FIELD_NUMBER;
        hash = (53 * hash) + getAndroidReportConfig().hashCode();
      }
      if (hasCmdTraceStartDelay()) {
        hash = (37 * hash) + CMD_TRACE_START_DELAY_FIELD_NUMBER;
        hash = (53 * hash) + getCmdTraceStartDelay().hashCode();
      }
      hash = (29 * hash) + getUnknownFields().hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static perfetto.protos.TraceConfigOuterClass.TraceConfig parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static perfetto.protos.TraceConfigOuterClass.TraceConfig parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static perfetto.protos.TraceConfigOuterClass.TraceConfig parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static perfetto.protos.TraceConfigOuterClass.TraceConfig parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static perfetto.protos.TraceConfigOuterClass.TraceConfig parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static perfetto.protos.TraceConfigOuterClass.TraceConfig parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static perfetto.protos.TraceConfigOuterClass.TraceConfig parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static perfetto.protos.TraceConfigOuterClass.TraceConfig parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static perfetto.protos.TraceConfigOuterClass.TraceConfig parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static perfetto.protos.TraceConfigOuterClass.TraceConfig parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static perfetto.protos.TraceConfigOuterClass.TraceConfig parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static perfetto.protos.TraceConfigOuterClass.TraceConfig parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(perfetto.protos.TraceConfigOuterClass.TraceConfig prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * <pre>
     * The overall config that is used when starting a new tracing session through
     * ProducerPort::StartTracing().
     * It contains the general config for the logging buffer(s) and the configs for
     * all the data source being enabled.
     * Next id: 35.
     * </pre>
     *
     * Protobuf type {@code perfetto.protos.TraceConfig}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:perfetto.protos.TraceConfig)
        perfetto.protos.TraceConfigOuterClass.TraceConfigOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return perfetto.protos.TraceConfigOuterClass.internal_static_perfetto_protos_TraceConfig_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return perfetto.protos.TraceConfigOuterClass.internal_static_perfetto_protos_TraceConfig_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                perfetto.protos.TraceConfigOuterClass.TraceConfig.class, perfetto.protos.TraceConfigOuterClass.TraceConfig.Builder.class);
      }

      // Construct using perfetto.protos.TraceConfigOuterClass.TraceConfig.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
          getBuffersFieldBuilder();
          getDataSourcesFieldBuilder();
          getBuiltinDataSourcesFieldBuilder();
          getProducersFieldBuilder();
          getStatsdMetadataFieldBuilder();
          getGuardrailOverridesFieldBuilder();
          getTriggerConfigFieldBuilder();
          getIncrementalStateConfigFieldBuilder();
          getIncidentReportConfigFieldBuilder();
          getTraceFilterFieldBuilder();
          getAndroidReportConfigFieldBuilder();
          getCmdTraceStartDelayFieldBuilder();
        }
      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        bitField0_ = 0;
        if (buffersBuilder_ == null) {
          buffers_ = java.util.Collections.emptyList();
        } else {
          buffers_ = null;
          buffersBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000001);
        if (dataSourcesBuilder_ == null) {
          dataSources_ = java.util.Collections.emptyList();
        } else {
          dataSources_ = null;
          dataSourcesBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000002);
        builtinDataSources_ = null;
        if (builtinDataSourcesBuilder_ != null) {
          builtinDataSourcesBuilder_.dispose();
          builtinDataSourcesBuilder_ = null;
        }
        durationMs_ = 0;
        enableExtraGuardrails_ = false;
        lockdownMode_ = 0;
        if (producersBuilder_ == null) {
          producers_ = java.util.Collections.emptyList();
        } else {
          producers_ = null;
          producersBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000040);
        statsdMetadata_ = null;
        if (statsdMetadataBuilder_ != null) {
          statsdMetadataBuilder_.dispose();
          statsdMetadataBuilder_ = null;
        }
        writeIntoFile_ = false;
        outputPath_ = "";
        fileWritePeriodMs_ = 0;
        maxFileSizeBytes_ = 0L;
        guardrailOverrides_ = null;
        if (guardrailOverridesBuilder_ != null) {
          guardrailOverridesBuilder_.dispose();
          guardrailOverridesBuilder_ = null;
        }
        deferredStart_ = false;
        flushPeriodMs_ = 0;
        flushTimeoutMs_ = 0;
        dataSourceStopTimeoutMs_ = 0;
        notifyTraceur_ = false;
        bugreportScore_ = 0;
        triggerConfig_ = null;
        if (triggerConfigBuilder_ != null) {
          triggerConfigBuilder_.dispose();
          triggerConfigBuilder_ = null;
        }
        activateTriggers_ = com.google.protobuf.LazyStringArrayList.EMPTY;
        bitField0_ = (bitField0_ & ~0x00100000);
        incrementalStateConfig_ = null;
        if (incrementalStateConfigBuilder_ != null) {
          incrementalStateConfigBuilder_.dispose();
          incrementalStateConfigBuilder_ = null;
        }
        allowUserBuildTracing_ = false;
        uniqueSessionName_ = "";
        compressionType_ = 0;
        incidentReportConfig_ = null;
        if (incidentReportConfigBuilder_ != null) {
          incidentReportConfigBuilder_.dispose();
          incidentReportConfigBuilder_ = null;
        }
        statsdLogging_ = 0;
        traceUuidMsb_ = 0L;
        traceUuidLsb_ = 0L;
        traceFilter_ = null;
        if (traceFilterBuilder_ != null) {
          traceFilterBuilder_.dispose();
          traceFilterBuilder_ = null;
        }
        androidReportConfig_ = null;
        if (androidReportConfigBuilder_ != null) {
          androidReportConfigBuilder_.dispose();
          androidReportConfigBuilder_ = null;
        }
        cmdTraceStartDelay_ = null;
        if (cmdTraceStartDelayBuilder_ != null) {
          cmdTraceStartDelayBuilder_.dispose();
          cmdTraceStartDelayBuilder_ = null;
        }
        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return perfetto.protos.TraceConfigOuterClass.internal_static_perfetto_protos_TraceConfig_descriptor;
      }

      @java.lang.Override
      public perfetto.protos.TraceConfigOuterClass.TraceConfig getDefaultInstanceForType() {
        return perfetto.protos.TraceConfigOuterClass.TraceConfig.getDefaultInstance();
      }

      @java.lang.Override
      public perfetto.protos.TraceConfigOuterClass.TraceConfig build() {
        perfetto.protos.TraceConfigOuterClass.TraceConfig result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public perfetto.protos.TraceConfigOuterClass.TraceConfig buildPartial() {
        perfetto.protos.TraceConfigOuterClass.TraceConfig result = new perfetto.protos.TraceConfigOuterClass.TraceConfig(this);
        buildPartialRepeatedFields(result);
        if (bitField0_ != 0) { buildPartial0(result); }
        onBuilt();
        return result;
      }

      private void buildPartialRepeatedFields(perfetto.protos.TraceConfigOuterClass.TraceConfig result) {
        if (buffersBuilder_ == null) {
          if (((bitField0_ & 0x00000001) != 0)) {
            buffers_ = java.util.Collections.unmodifiableList(buffers_);
            bitField0_ = (bitField0_ & ~0x00000001);
          }
          result.buffers_ = buffers_;
        } else {
          result.buffers_ = buffersBuilder_.build();
        }
        if (dataSourcesBuilder_ == null) {
          if (((bitField0_ & 0x00000002) != 0)) {
            dataSources_ = java.util.Collections.unmodifiableList(dataSources_);
            bitField0_ = (bitField0_ & ~0x00000002);
          }
          result.dataSources_ = dataSources_;
        } else {
          result.dataSources_ = dataSourcesBuilder_.build();
        }
        if (producersBuilder_ == null) {
          if (((bitField0_ & 0x00000040) != 0)) {
            producers_ = java.util.Collections.unmodifiableList(producers_);
            bitField0_ = (bitField0_ & ~0x00000040);
          }
          result.producers_ = producers_;
        } else {
          result.producers_ = producersBuilder_.build();
        }
        if (((bitField0_ & 0x00100000) != 0)) {
          activateTriggers_ = activateTriggers_.getUnmodifiableView();
          bitField0_ = (bitField0_ & ~0x00100000);
        }
        result.activateTriggers_ = activateTriggers_;
      }

      private void buildPartial0(perfetto.protos.TraceConfigOuterClass.TraceConfig result) {
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000004) != 0)) {
          result.builtinDataSources_ = builtinDataSourcesBuilder_ == null
              ? builtinDataSources_
              : builtinDataSourcesBuilder_.build();
          to_bitField0_ |= 0x00000001;
        }
        if (((from_bitField0_ & 0x00000008) != 0)) {
          result.durationMs_ = durationMs_;
          to_bitField0_ |= 0x00000002;
        }
        if (((from_bitField0_ & 0x00000010) != 0)) {
          result.enableExtraGuardrails_ = enableExtraGuardrails_;
          to_bitField0_ |= 0x00000004;
        }
        if (((from_bitField0_ & 0x00000020) != 0)) {
          result.lockdownMode_ = lockdownMode_;
          to_bitField0_ |= 0x00000008;
        }
        if (((from_bitField0_ & 0x00000080) != 0)) {
          result.statsdMetadata_ = statsdMetadataBuilder_ == null
              ? statsdMetadata_
              : statsdMetadataBuilder_.build();
          to_bitField0_ |= 0x00000010;
        }
        if (((from_bitField0_ & 0x00000100) != 0)) {
          result.writeIntoFile_ = writeIntoFile_;
          to_bitField0_ |= 0x00000020;
        }
        if (((from_bitField0_ & 0x00000200) != 0)) {
          result.outputPath_ = outputPath_;
          to_bitField0_ |= 0x00000040;
        }
        if (((from_bitField0_ & 0x00000400) != 0)) {
          result.fileWritePeriodMs_ = fileWritePeriodMs_;
          to_bitField0_ |= 0x00000080;
        }
        if (((from_bitField0_ & 0x00000800) != 0)) {
          result.maxFileSizeBytes_ = maxFileSizeBytes_;
          to_bitField0_ |= 0x00000100;
        }
        if (((from_bitField0_ & 0x00001000) != 0)) {
          result.guardrailOverrides_ = guardrailOverridesBuilder_ == null
              ? guardrailOverrides_
              : guardrailOverridesBuilder_.build();
          to_bitField0_ |= 0x00000200;
        }
        if (((from_bitField0_ & 0x00002000) != 0)) {
          result.deferredStart_ = deferredStart_;
          to_bitField0_ |= 0x00000400;
        }
        if (((from_bitField0_ & 0x00004000) != 0)) {
          result.flushPeriodMs_ = flushPeriodMs_;
          to_bitField0_ |= 0x00000800;
        }
        if (((from_bitField0_ & 0x00008000) != 0)) {
          result.flushTimeoutMs_ = flushTimeoutMs_;
          to_bitField0_ |= 0x00001000;
        }
        if (((from_bitField0_ & 0x00010000) != 0)) {
          result.dataSourceStopTimeoutMs_ = dataSourceStopTimeoutMs_;
          to_bitField0_ |= 0x00002000;
        }
        if (((from_bitField0_ & 0x00020000) != 0)) {
          result.notifyTraceur_ = notifyTraceur_;
          to_bitField0_ |= 0x00004000;
        }
        if (((from_bitField0_ & 0x00040000) != 0)) {
          result.bugreportScore_ = bugreportScore_;
          to_bitField0_ |= 0x00008000;
        }
        if (((from_bitField0_ & 0x00080000) != 0)) {
          result.triggerConfig_ = triggerConfigBuilder_ == null
              ? triggerConfig_
              : triggerConfigBuilder_.build();
          to_bitField0_ |= 0x00010000;
        }
        if (((from_bitField0_ & 0x00200000) != 0)) {
          result.incrementalStateConfig_ = incrementalStateConfigBuilder_ == null
              ? incrementalStateConfig_
              : incrementalStateConfigBuilder_.build();
          to_bitField0_ |= 0x00020000;
        }
        if (((from_bitField0_ & 0x00400000) != 0)) {
          result.allowUserBuildTracing_ = allowUserBuildTracing_;
          to_bitField0_ |= 0x00040000;
        }
        if (((from_bitField0_ & 0x00800000) != 0)) {
          result.uniqueSessionName_ = uniqueSessionName_;
          to_bitField0_ |= 0x00080000;
        }
        if (((from_bitField0_ & 0x01000000) != 0)) {
          result.compressionType_ = compressionType_;
          to_bitField0_ |= 0x00100000;
        }
        if (((from_bitField0_ & 0x02000000) != 0)) {
          result.incidentReportConfig_ = incidentReportConfigBuilder_ == null
              ? incidentReportConfig_
              : incidentReportConfigBuilder_.build();
          to_bitField0_ |= 0x00200000;
        }
        if (((from_bitField0_ & 0x04000000) != 0)) {
          result.statsdLogging_ = statsdLogging_;
          to_bitField0_ |= 0x00400000;
        }
        if (((from_bitField0_ & 0x08000000) != 0)) {
          result.traceUuidMsb_ = traceUuidMsb_;
          to_bitField0_ |= 0x00800000;
        }
        if (((from_bitField0_ & 0x10000000) != 0)) {
          result.traceUuidLsb_ = traceUuidLsb_;
          to_bitField0_ |= 0x01000000;
        }
        if (((from_bitField0_ & 0x20000000) != 0)) {
          result.traceFilter_ = traceFilterBuilder_ == null
              ? traceFilter_
              : traceFilterBuilder_.build();
          to_bitField0_ |= 0x02000000;
        }
        if (((from_bitField0_ & 0x40000000) != 0)) {
          result.androidReportConfig_ = androidReportConfigBuilder_ == null
              ? androidReportConfig_
              : androidReportConfigBuilder_.build();
          to_bitField0_ |= 0x04000000;
        }
        if (((from_bitField0_ & 0x80000000) != 0)) {
          result.cmdTraceStartDelay_ = cmdTraceStartDelayBuilder_ == null
              ? cmdTraceStartDelay_
              : cmdTraceStartDelayBuilder_.build();
          to_bitField0_ |= 0x08000000;
        }
        result.bitField0_ |= to_bitField0_;
      }

      @java.lang.Override
      public Builder clone() {
        return super.clone();
      }
      @java.lang.Override
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.setField(field, value);
      }
      @java.lang.Override
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return super.clearField(field);
      }
      @java.lang.Override
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return super.clearOneof(oneof);
      }
      @java.lang.Override
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, java.lang.Object value) {
        return super.setRepeatedField(field, index, value);
      }
      @java.lang.Override
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.addRepeatedField(field, value);
      }
      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof perfetto.protos.TraceConfigOuterClass.TraceConfig) {
          return mergeFrom((perfetto.protos.TraceConfigOuterClass.TraceConfig)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(perfetto.protos.TraceConfigOuterClass.TraceConfig other) {
        if (other == perfetto.protos.TraceConfigOuterClass.TraceConfig.getDefaultInstance()) return this;
        if (buffersBuilder_ == null) {
          if (!other.buffers_.isEmpty()) {
            if (buffers_.isEmpty()) {
              buffers_ = other.buffers_;
              bitField0_ = (bitField0_ & ~0x00000001);
            } else {
              ensureBuffersIsMutable();
              buffers_.addAll(other.buffers_);
            }
            onChanged();
          }
        } else {
          if (!other.buffers_.isEmpty()) {
            if (buffersBuilder_.isEmpty()) {
              buffersBuilder_.dispose();
              buffersBuilder_ = null;
              buffers_ = other.buffers_;
              bitField0_ = (bitField0_ & ~0x00000001);
              buffersBuilder_ = 
                com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders ?
                   getBuffersFieldBuilder() : null;
            } else {
              buffersBuilder_.addAllMessages(other.buffers_);
            }
          }
        }
        if (dataSourcesBuilder_ == null) {
          if (!other.dataSources_.isEmpty()) {
            if (dataSources_.isEmpty()) {
              dataSources_ = other.dataSources_;
              bitField0_ = (bitField0_ & ~0x00000002);
            } else {
              ensureDataSourcesIsMutable();
              dataSources_.addAll(other.dataSources_);
            }
            onChanged();
          }
        } else {
          if (!other.dataSources_.isEmpty()) {
            if (dataSourcesBuilder_.isEmpty()) {
              dataSourcesBuilder_.dispose();
              dataSourcesBuilder_ = null;
              dataSources_ = other.dataSources_;
              bitField0_ = (bitField0_ & ~0x00000002);
              dataSourcesBuilder_ = 
                com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders ?
                   getDataSourcesFieldBuilder() : null;
            } else {
              dataSourcesBuilder_.addAllMessages(other.dataSources_);
            }
          }
        }
        if (other.hasBuiltinDataSources()) {
          mergeBuiltinDataSources(other.getBuiltinDataSources());
        }
        if (other.hasDurationMs()) {
          setDurationMs(other.getDurationMs());
        }
        if (other.hasEnableExtraGuardrails()) {
          setEnableExtraGuardrails(other.getEnableExtraGuardrails());
        }
        if (other.hasLockdownMode()) {
          setLockdownMode(other.getLockdownMode());
        }
        if (producersBuilder_ == null) {
          if (!other.producers_.isEmpty()) {
            if (producers_.isEmpty()) {
              producers_ = other.producers_;
              bitField0_ = (bitField0_ & ~0x00000040);
            } else {
              ensureProducersIsMutable();
              producers_.addAll(other.producers_);
            }
            onChanged();
          }
        } else {
          if (!other.producers_.isEmpty()) {
            if (producersBuilder_.isEmpty()) {
              producersBuilder_.dispose();
              producersBuilder_ = null;
              producers_ = other.producers_;
              bitField0_ = (bitField0_ & ~0x00000040);
              producersBuilder_ = 
                com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders ?
                   getProducersFieldBuilder() : null;
            } else {
              producersBuilder_.addAllMessages(other.producers_);
            }
          }
        }
        if (other.hasStatsdMetadata()) {
          mergeStatsdMetadata(other.getStatsdMetadata());
        }
        if (other.hasWriteIntoFile()) {
          setWriteIntoFile(other.getWriteIntoFile());
        }
        if (other.hasOutputPath()) {
          outputPath_ = other.outputPath_;
          bitField0_ |= 0x00000200;
          onChanged();
        }
        if (other.hasFileWritePeriodMs()) {
          setFileWritePeriodMs(other.getFileWritePeriodMs());
        }
        if (other.hasMaxFileSizeBytes()) {
          setMaxFileSizeBytes(other.getMaxFileSizeBytes());
        }
        if (other.hasGuardrailOverrides()) {
          mergeGuardrailOverrides(other.getGuardrailOverrides());
        }
        if (other.hasDeferredStart()) {
          setDeferredStart(other.getDeferredStart());
        }
        if (other.hasFlushPeriodMs()) {
          setFlushPeriodMs(other.getFlushPeriodMs());
        }
        if (other.hasFlushTimeoutMs()) {
          setFlushTimeoutMs(other.getFlushTimeoutMs());
        }
        if (other.hasDataSourceStopTimeoutMs()) {
          setDataSourceStopTimeoutMs(other.getDataSourceStopTimeoutMs());
        }
        if (other.hasNotifyTraceur()) {
          setNotifyTraceur(other.getNotifyTraceur());
        }
        if (other.hasBugreportScore()) {
          setBugreportScore(other.getBugreportScore());
        }
        if (other.hasTriggerConfig()) {
          mergeTriggerConfig(other.getTriggerConfig());
        }
        if (!other.activateTriggers_.isEmpty()) {
          if (activateTriggers_.isEmpty()) {
            activateTriggers_ = other.activateTriggers_;
            bitField0_ = (bitField0_ & ~0x00100000);
          } else {
            ensureActivateTriggersIsMutable();
            activateTriggers_.addAll(other.activateTriggers_);
          }
          onChanged();
        }
        if (other.hasIncrementalStateConfig()) {
          mergeIncrementalStateConfig(other.getIncrementalStateConfig());
        }
        if (other.hasAllowUserBuildTracing()) {
          setAllowUserBuildTracing(other.getAllowUserBuildTracing());
        }
        if (other.hasUniqueSessionName()) {
          uniqueSessionName_ = other.uniqueSessionName_;
          bitField0_ |= 0x00800000;
          onChanged();
        }
        if (other.hasCompressionType()) {
          setCompressionType(other.getCompressionType());
        }
        if (other.hasIncidentReportConfig()) {
          mergeIncidentReportConfig(other.getIncidentReportConfig());
        }
        if (other.hasStatsdLogging()) {
          setStatsdLogging(other.getStatsdLogging());
        }
        if (other.hasTraceUuidMsb()) {
          setTraceUuidMsb(other.getTraceUuidMsb());
        }
        if (other.hasTraceUuidLsb()) {
          setTraceUuidLsb(other.getTraceUuidLsb());
        }
        if (other.hasTraceFilter()) {
          mergeTraceFilter(other.getTraceFilter());
        }
        if (other.hasAndroidReportConfig()) {
          mergeAndroidReportConfig(other.getAndroidReportConfig());
        }
        if (other.hasCmdTraceStartDelay()) {
          mergeCmdTraceStartDelay(other.getCmdTraceStartDelay());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        if (extensionRegistry == null) {
          throw new java.lang.NullPointerException();
        }
        try {
          boolean done = false;
          while (!done) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                done = true;
                break;
              case 10: {
                perfetto.protos.TraceConfigOuterClass.TraceConfig.BufferConfig m =
                    input.readMessage(
                        perfetto.protos.TraceConfigOuterClass.TraceConfig.BufferConfig.PARSER,
                        extensionRegistry);
                if (buffersBuilder_ == null) {
                  ensureBuffersIsMutable();
                  buffers_.add(m);
                } else {
                  buffersBuilder_.addMessage(m);
                }
                break;
              } // case 10
              case 18: {
                perfetto.protos.TraceConfigOuterClass.TraceConfig.DataSource m =
                    input.readMessage(
                        perfetto.protos.TraceConfigOuterClass.TraceConfig.DataSource.PARSER,
                        extensionRegistry);
                if (dataSourcesBuilder_ == null) {
                  ensureDataSourcesIsMutable();
                  dataSources_.add(m);
                } else {
                  dataSourcesBuilder_.addMessage(m);
                }
                break;
              } // case 18
              case 24: {
                durationMs_ = input.readUInt32();
                bitField0_ |= 0x00000008;
                break;
              } // case 24
              case 32: {
                enableExtraGuardrails_ = input.readBool();
                bitField0_ |= 0x00000010;
                break;
              } // case 32
              case 40: {
                int tmpRaw = input.readEnum();
                perfetto.protos.TraceConfigOuterClass.TraceConfig.LockdownModeOperation tmpValue =
                    perfetto.protos.TraceConfigOuterClass.TraceConfig.LockdownModeOperation.forNumber(tmpRaw);
                if (tmpValue == null) {
                  mergeUnknownVarintField(5, tmpRaw);
                } else {
                  lockdownMode_ = tmpRaw;
                  bitField0_ |= 0x00000020;
                }
                break;
              } // case 40
              case 50: {
                perfetto.protos.TraceConfigOuterClass.TraceConfig.ProducerConfig m =
                    input.readMessage(
                        perfetto.protos.TraceConfigOuterClass.TraceConfig.ProducerConfig.PARSER,
                        extensionRegistry);
                if (producersBuilder_ == null) {
                  ensureProducersIsMutable();
                  producers_.add(m);
                } else {
                  producersBuilder_.addMessage(m);
                }
                break;
              } // case 50
              case 58: {
                input.readMessage(
                    getStatsdMetadataFieldBuilder().getBuilder(),
                    extensionRegistry);
                bitField0_ |= 0x00000080;
                break;
              } // case 58
              case 64: {
                writeIntoFile_ = input.readBool();
                bitField0_ |= 0x00000100;
                break;
              } // case 64
              case 72: {
                fileWritePeriodMs_ = input.readUInt32();
                bitField0_ |= 0x00000400;
                break;
              } // case 72
              case 80: {
                maxFileSizeBytes_ = input.readUInt64();
                bitField0_ |= 0x00000800;
                break;
              } // case 80
              case 90: {
                input.readMessage(
                    getGuardrailOverridesFieldBuilder().getBuilder(),
                    extensionRegistry);
                bitField0_ |= 0x00001000;
                break;
              } // case 90
              case 96: {
                deferredStart_ = input.readBool();
                bitField0_ |= 0x00002000;
                break;
              } // case 96
              case 104: {
                flushPeriodMs_ = input.readUInt32();
                bitField0_ |= 0x00004000;
                break;
              } // case 104
              case 112: {
                flushTimeoutMs_ = input.readUInt32();
                bitField0_ |= 0x00008000;
                break;
              } // case 112
              case 128: {
                notifyTraceur_ = input.readBool();
                bitField0_ |= 0x00020000;
                break;
              } // case 128
              case 138: {
                input.readMessage(
                    getTriggerConfigFieldBuilder().getBuilder(),
                    extensionRegistry);
                bitField0_ |= 0x00080000;
                break;
              } // case 138
              case 146: {
                com.google.protobuf.ByteString bs = input.readBytes();
                ensureActivateTriggersIsMutable();
                activateTriggers_.add(bs);
                break;
              } // case 146
              case 152: {
                allowUserBuildTracing_ = input.readBool();
                bitField0_ |= 0x00400000;
                break;
              } // case 152
              case 162: {
                input.readMessage(
                    getBuiltinDataSourcesFieldBuilder().getBuilder(),
                    extensionRegistry);
                bitField0_ |= 0x00000004;
                break;
              } // case 162
              case 170: {
                input.readMessage(
                    getIncrementalStateConfigFieldBuilder().getBuilder(),
                    extensionRegistry);
                bitField0_ |= 0x00200000;
                break;
              } // case 170
              case 178: {
                uniqueSessionName_ = input.readBytes();
                bitField0_ |= 0x00800000;
                break;
              } // case 178
              case 184: {
                dataSourceStopTimeoutMs_ = input.readUInt32();
                bitField0_ |= 0x00010000;
                break;
              } // case 184
              case 192: {
                int tmpRaw = input.readEnum();
                perfetto.protos.TraceConfigOuterClass.TraceConfig.CompressionType tmpValue =
                    perfetto.protos.TraceConfigOuterClass.TraceConfig.CompressionType.forNumber(tmpRaw);
                if (tmpValue == null) {
                  mergeUnknownVarintField(24, tmpRaw);
                } else {
                  compressionType_ = tmpRaw;
                  bitField0_ |= 0x01000000;
                }
                break;
              } // case 192
              case 202: {
                input.readMessage(
                    getIncidentReportConfigFieldBuilder().getBuilder(),
                    extensionRegistry);
                bitField0_ |= 0x02000000;
                break;
              } // case 202
              case 216: {
                traceUuidMsb_ = input.readInt64();
                bitField0_ |= 0x08000000;
                break;
              } // case 216
              case 224: {
                traceUuidLsb_ = input.readInt64();
                bitField0_ |= 0x10000000;
                break;
              } // case 224
              case 234: {
                outputPath_ = input.readBytes();
                bitField0_ |= 0x00000200;
                break;
              } // case 234
              case 240: {
                bugreportScore_ = input.readInt32();
                bitField0_ |= 0x00040000;
                break;
              } // case 240
              case 248: {
                int tmpRaw = input.readEnum();
                perfetto.protos.TraceConfigOuterClass.TraceConfig.StatsdLogging tmpValue =
                    perfetto.protos.TraceConfigOuterClass.TraceConfig.StatsdLogging.forNumber(tmpRaw);
                if (tmpValue == null) {
                  mergeUnknownVarintField(31, tmpRaw);
                } else {
                  statsdLogging_ = tmpRaw;
                  bitField0_ |= 0x04000000;
                }
                break;
              } // case 248
              case 266: {
                input.readMessage(
                    getTraceFilterFieldBuilder().getBuilder(),
                    extensionRegistry);
                bitField0_ |= 0x20000000;
                break;
              } // case 266
              case 274: {
                input.readMessage(
                    getAndroidReportConfigFieldBuilder().getBuilder(),
                    extensionRegistry);
                bitField0_ |= 0x40000000;
                break;
              } // case 274
              case 282: {
                input.readMessage(
                    getCmdTraceStartDelayFieldBuilder().getBuilder(),
                    extensionRegistry);
                bitField0_ |= 0x80000000;
                break;
              } // case 282
              default: {
                if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                  done = true; // was an endgroup tag
                }
                break;
              } // default:
            } // switch (tag)
          } // while (!done)
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.unwrapIOException();
        } finally {
          onChanged();
        } // finally
        return this;
      }
      private int bitField0_;

      private java.util.List<perfetto.protos.TraceConfigOuterClass.TraceConfig.BufferConfig> buffers_ =
        java.util.Collections.emptyList();
      private void ensureBuffersIsMutable() {
        if (!((bitField0_ & 0x00000001) != 0)) {
          buffers_ = new java.util.ArrayList<perfetto.protos.TraceConfigOuterClass.TraceConfig.BufferConfig>(buffers_);
          bitField0_ |= 0x00000001;
         }
      }

      private com.google.protobuf.RepeatedFieldBuilderV3<
          perfetto.protos.TraceConfigOuterClass.TraceConfig.BufferConfig, perfetto.protos.TraceConfigOuterClass.TraceConfig.BufferConfig.Builder, perfetto.protos.TraceConfigOuterClass.TraceConfig.BufferConfigOrBuilder> buffersBuilder_;

      /**
       * <code>repeated .perfetto.protos.TraceConfig.BufferConfig buffers = 1;</code>
       */
      public java.util.List<perfetto.protos.TraceConfigOuterClass.TraceConfig.BufferConfig> getBuffersList() {
        if (buffersBuilder_ == null) {
          return java.util.Collections.unmodifiableList(buffers_);
        } else {
          return buffersBuilder_.getMessageList();
        }
      }
      /**
       * <code>repeated .perfetto.protos.TraceConfig.BufferConfig buffers = 1;</code>
       */
      public int getBuffersCount() {
        if (buffersBuilder_ == null) {
          return buffers_.size();
        } else {
          return buffersBuilder_.getCount();
        }
      }
      /**
       * <code>repeated .perfetto.protos.TraceConfig.BufferConfig buffers = 1;</code>
       */
      public perfetto.protos.TraceConfigOuterClass.TraceConfig.BufferConfig getBuffers(int index) {
        if (buffersBuilder_ == null) {
          return buffers_.get(index);
        } else {
          return buffersBuilder_.getMessage(index);
        }
      }
      /**
       * <code>repeated .perfetto.protos.TraceConfig.BufferConfig buffers = 1;</code>
       */
      public Builder setBuffers(
          int index, perfetto.protos.TraceConfigOuterClass.TraceConfig.BufferConfig value) {
        if (buffersBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureBuffersIsMutable();
          buffers_.set(index, value);
          onChanged();
        } else {
          buffersBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .perfetto.protos.TraceConfig.BufferConfig buffers = 1;</code>
       */
      public Builder setBuffers(
          int index, perfetto.protos.TraceConfigOuterClass.TraceConfig.BufferConfig.Builder builderForValue) {
        if (buffersBuilder_ == null) {
          ensureBuffersIsMutable();
          buffers_.set(index, builderForValue.build());
          onChanged();
        } else {
          buffersBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .perfetto.protos.TraceConfig.BufferConfig buffers = 1;</code>
       */
      public Builder addBuffers(perfetto.protos.TraceConfigOuterClass.TraceConfig.BufferConfig value) {
        if (buffersBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureBuffersIsMutable();
          buffers_.add(value);
          onChanged();
        } else {
          buffersBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <code>repeated .perfetto.protos.TraceConfig.BufferConfig buffers = 1;</code>
       */
      public Builder addBuffers(
          int index, perfetto.protos.TraceConfigOuterClass.TraceConfig.BufferConfig value) {
        if (buffersBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureBuffersIsMutable();
          buffers_.add(index, value);
          onChanged();
        } else {
          buffersBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .perfetto.protos.TraceConfig.BufferConfig buffers = 1;</code>
       */
      public Builder addBuffers(
          perfetto.protos.TraceConfigOuterClass.TraceConfig.BufferConfig.Builder builderForValue) {
        if (buffersBuilder_ == null) {
          ensureBuffersIsMutable();
          buffers_.add(builderForValue.build());
          onChanged();
        } else {
          buffersBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .perfetto.protos.TraceConfig.BufferConfig buffers = 1;</code>
       */
      public Builder addBuffers(
          int index, perfetto.protos.TraceConfigOuterClass.TraceConfig.BufferConfig.Builder builderForValue) {
        if (buffersBuilder_ == null) {
          ensureBuffersIsMutable();
          buffers_.add(index, builderForValue.build());
          onChanged();
        } else {
          buffersBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .perfetto.protos.TraceConfig.BufferConfig buffers = 1;</code>
       */
      public Builder addAllBuffers(
          java.lang.Iterable<? extends perfetto.protos.TraceConfigOuterClass.TraceConfig.BufferConfig> values) {
        if (buffersBuilder_ == null) {
          ensureBuffersIsMutable();
          com.google.protobuf.AbstractMessageLite.Builder.addAll(
              values, buffers_);
          onChanged();
        } else {
          buffersBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <code>repeated .perfetto.protos.TraceConfig.BufferConfig buffers = 1;</code>
       */
      public Builder clearBuffers() {
        if (buffersBuilder_ == null) {
          buffers_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000001);
          onChanged();
        } else {
          buffersBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>repeated .perfetto.protos.TraceConfig.BufferConfig buffers = 1;</code>
       */
      public Builder removeBuffers(int index) {
        if (buffersBuilder_ == null) {
          ensureBuffersIsMutable();
          buffers_.remove(index);
          onChanged();
        } else {
          buffersBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <code>repeated .perfetto.protos.TraceConfig.BufferConfig buffers = 1;</code>
       */
      public perfetto.protos.TraceConfigOuterClass.TraceConfig.BufferConfig.Builder getBuffersBuilder(
          int index) {
        return getBuffersFieldBuilder().getBuilder(index);
      }
      /**
       * <code>repeated .perfetto.protos.TraceConfig.BufferConfig buffers = 1;</code>
       */
      public perfetto.protos.TraceConfigOuterClass.TraceConfig.BufferConfigOrBuilder getBuffersOrBuilder(
          int index) {
        if (buffersBuilder_ == null) {
          return buffers_.get(index);  } else {
          return buffersBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <code>repeated .perfetto.protos.TraceConfig.BufferConfig buffers = 1;</code>
       */
      public java.util.List<? extends perfetto.protos.TraceConfigOuterClass.TraceConfig.BufferConfigOrBuilder> 
           getBuffersOrBuilderList() {
        if (buffersBuilder_ != null) {
          return buffersBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(buffers_);
        }
      }
      /**
       * <code>repeated .perfetto.protos.TraceConfig.BufferConfig buffers = 1;</code>
       */
      public perfetto.protos.TraceConfigOuterClass.TraceConfig.BufferConfig.Builder addBuffersBuilder() {
        return getBuffersFieldBuilder().addBuilder(
            perfetto.protos.TraceConfigOuterClass.TraceConfig.BufferConfig.getDefaultInstance());
      }
      /**
       * <code>repeated .perfetto.protos.TraceConfig.BufferConfig buffers = 1;</code>
       */
      public perfetto.protos.TraceConfigOuterClass.TraceConfig.BufferConfig.Builder addBuffersBuilder(
          int index) {
        return getBuffersFieldBuilder().addBuilder(
            index, perfetto.protos.TraceConfigOuterClass.TraceConfig.BufferConfig.getDefaultInstance());
      }
      /**
       * <code>repeated .perfetto.protos.TraceConfig.BufferConfig buffers = 1;</code>
       */
      public java.util.List<perfetto.protos.TraceConfigOuterClass.TraceConfig.BufferConfig.Builder> 
           getBuffersBuilderList() {
        return getBuffersFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilderV3<
          perfetto.protos.TraceConfigOuterClass.TraceConfig.BufferConfig, perfetto.protos.TraceConfigOuterClass.TraceConfig.BufferConfig.Builder, perfetto.protos.TraceConfigOuterClass.TraceConfig.BufferConfigOrBuilder> 
          getBuffersFieldBuilder() {
        if (buffersBuilder_ == null) {
          buffersBuilder_ = new com.google.protobuf.RepeatedFieldBuilderV3<
              perfetto.protos.TraceConfigOuterClass.TraceConfig.BufferConfig, perfetto.protos.TraceConfigOuterClass.TraceConfig.BufferConfig.Builder, perfetto.protos.TraceConfigOuterClass.TraceConfig.BufferConfigOrBuilder>(
                  buffers_,
                  ((bitField0_ & 0x00000001) != 0),
                  getParentForChildren(),
                  isClean());
          buffers_ = null;
        }
        return buffersBuilder_;
      }

      private java.util.List<perfetto.protos.TraceConfigOuterClass.TraceConfig.DataSource> dataSources_ =
        java.util.Collections.emptyList();
      private void ensureDataSourcesIsMutable() {
        if (!((bitField0_ & 0x00000002) != 0)) {
          dataSources_ = new java.util.ArrayList<perfetto.protos.TraceConfigOuterClass.TraceConfig.DataSource>(dataSources_);
          bitField0_ |= 0x00000002;
         }
      }

      private com.google.protobuf.RepeatedFieldBuilderV3<
          perfetto.protos.TraceConfigOuterClass.TraceConfig.DataSource, perfetto.protos.TraceConfigOuterClass.TraceConfig.DataSource.Builder, perfetto.protos.TraceConfigOuterClass.TraceConfig.DataSourceOrBuilder> dataSourcesBuilder_;

      /**
       * <code>repeated .perfetto.protos.TraceConfig.DataSource data_sources = 2;</code>
       */
      public java.util.List<perfetto.protos.TraceConfigOuterClass.TraceConfig.DataSource> getDataSourcesList() {
        if (dataSourcesBuilder_ == null) {
          return java.util.Collections.unmodifiableList(dataSources_);
        } else {
          return dataSourcesBuilder_.getMessageList();
        }
      }
      /**
       * <code>repeated .perfetto.protos.TraceConfig.DataSource data_sources = 2;</code>
       */
      public int getDataSourcesCount() {
        if (dataSourcesBuilder_ == null) {
          return dataSources_.size();
        } else {
          return dataSourcesBuilder_.getCount();
        }
      }
      /**
       * <code>repeated .perfetto.protos.TraceConfig.DataSource data_sources = 2;</code>
       */
      public perfetto.protos.TraceConfigOuterClass.TraceConfig.DataSource getDataSources(int index) {
        if (dataSourcesBuilder_ == null) {
          return dataSources_.get(index);
        } else {
          return dataSourcesBuilder_.getMessage(index);
        }
      }
      /**
       * <code>repeated .perfetto.protos.TraceConfig.DataSource data_sources = 2;</code>
       */
      public Builder setDataSources(
          int index, perfetto.protos.TraceConfigOuterClass.TraceConfig.DataSource value) {
        if (dataSourcesBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureDataSourcesIsMutable();
          dataSources_.set(index, value);
          onChanged();
        } else {
          dataSourcesBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .perfetto.protos.TraceConfig.DataSource data_sources = 2;</code>
       */
      public Builder setDataSources(
          int index, perfetto.protos.TraceConfigOuterClass.TraceConfig.DataSource.Builder builderForValue) {
        if (dataSourcesBuilder_ == null) {
          ensureDataSourcesIsMutable();
          dataSources_.set(index, builderForValue.build());
          onChanged();
        } else {
          dataSourcesBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .perfetto.protos.TraceConfig.DataSource data_sources = 2;</code>
       */
      public Builder addDataSources(perfetto.protos.TraceConfigOuterClass.TraceConfig.DataSource value) {
        if (dataSourcesBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureDataSourcesIsMutable();
          dataSources_.add(value);
          onChanged();
        } else {
          dataSourcesBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <code>repeated .perfetto.protos.TraceConfig.DataSource data_sources = 2;</code>
       */
      public Builder addDataSources(
          int index, perfetto.protos.TraceConfigOuterClass.TraceConfig.DataSource value) {
        if (dataSourcesBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureDataSourcesIsMutable();
          dataSources_.add(index, value);
          onChanged();
        } else {
          dataSourcesBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .perfetto.protos.TraceConfig.DataSource data_sources = 2;</code>
       */
      public Builder addDataSources(
          perfetto.protos.TraceConfigOuterClass.TraceConfig.DataSource.Builder builderForValue) {
        if (dataSourcesBuilder_ == null) {
          ensureDataSourcesIsMutable();
          dataSources_.add(builderForValue.build());
          onChanged();
        } else {
          dataSourcesBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .perfetto.protos.TraceConfig.DataSource data_sources = 2;</code>
       */
      public Builder addDataSources(
          int index, perfetto.protos.TraceConfigOuterClass.TraceConfig.DataSource.Builder builderForValue) {
        if (dataSourcesBuilder_ == null) {
          ensureDataSourcesIsMutable();
          dataSources_.add(index, builderForValue.build());
          onChanged();
        } else {
          dataSourcesBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .perfetto.protos.TraceConfig.DataSource data_sources = 2;</code>
       */
      public Builder addAllDataSources(
          java.lang.Iterable<? extends perfetto.protos.TraceConfigOuterClass.TraceConfig.DataSource> values) {
        if (dataSourcesBuilder_ == null) {
          ensureDataSourcesIsMutable();
          com.google.protobuf.AbstractMessageLite.Builder.addAll(
              values, dataSources_);
          onChanged();
        } else {
          dataSourcesBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <code>repeated .perfetto.protos.TraceConfig.DataSource data_sources = 2;</code>
       */
      public Builder clearDataSources() {
        if (dataSourcesBuilder_ == null) {
          dataSources_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000002);
          onChanged();
        } else {
          dataSourcesBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>repeated .perfetto.protos.TraceConfig.DataSource data_sources = 2;</code>
       */
      public Builder removeDataSources(int index) {
        if (dataSourcesBuilder_ == null) {
          ensureDataSourcesIsMutable();
          dataSources_.remove(index);
          onChanged();
        } else {
          dataSourcesBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <code>repeated .perfetto.protos.TraceConfig.DataSource data_sources = 2;</code>
       */
      public perfetto.protos.TraceConfigOuterClass.TraceConfig.DataSource.Builder getDataSourcesBuilder(
          int index) {
        return getDataSourcesFieldBuilder().getBuilder(index);
      }
      /**
       * <code>repeated .perfetto.protos.TraceConfig.DataSource data_sources = 2;</code>
       */
      public perfetto.protos.TraceConfigOuterClass.TraceConfig.DataSourceOrBuilder getDataSourcesOrBuilder(
          int index) {
        if (dataSourcesBuilder_ == null) {
          return dataSources_.get(index);  } else {
          return dataSourcesBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <code>repeated .perfetto.protos.TraceConfig.DataSource data_sources = 2;</code>
       */
      public java.util.List<? extends perfetto.protos.TraceConfigOuterClass.TraceConfig.DataSourceOrBuilder> 
           getDataSourcesOrBuilderList() {
        if (dataSourcesBuilder_ != null) {
          return dataSourcesBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(dataSources_);
        }
      }
      /**
       * <code>repeated .perfetto.protos.TraceConfig.DataSource data_sources = 2;</code>
       */
      public perfetto.protos.TraceConfigOuterClass.TraceConfig.DataSource.Builder addDataSourcesBuilder() {
        return getDataSourcesFieldBuilder().addBuilder(
            perfetto.protos.TraceConfigOuterClass.TraceConfig.DataSource.getDefaultInstance());
      }
      /**
       * <code>repeated .perfetto.protos.TraceConfig.DataSource data_sources = 2;</code>
       */
      public perfetto.protos.TraceConfigOuterClass.TraceConfig.DataSource.Builder addDataSourcesBuilder(
          int index) {
        return getDataSourcesFieldBuilder().addBuilder(
            index, perfetto.protos.TraceConfigOuterClass.TraceConfig.DataSource.getDefaultInstance());
      }
      /**
       * <code>repeated .perfetto.protos.TraceConfig.DataSource data_sources = 2;</code>
       */
      public java.util.List<perfetto.protos.TraceConfigOuterClass.TraceConfig.DataSource.Builder> 
           getDataSourcesBuilderList() {
        return getDataSourcesFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilderV3<
          perfetto.protos.TraceConfigOuterClass.TraceConfig.DataSource, perfetto.protos.TraceConfigOuterClass.TraceConfig.DataSource.Builder, perfetto.protos.TraceConfigOuterClass.TraceConfig.DataSourceOrBuilder> 
          getDataSourcesFieldBuilder() {
        if (dataSourcesBuilder_ == null) {
          dataSourcesBuilder_ = new com.google.protobuf.RepeatedFieldBuilderV3<
              perfetto.protos.TraceConfigOuterClass.TraceConfig.DataSource, perfetto.protos.TraceConfigOuterClass.TraceConfig.DataSource.Builder, perfetto.protos.TraceConfigOuterClass.TraceConfig.DataSourceOrBuilder>(
                  dataSources_,
                  ((bitField0_ & 0x00000002) != 0),
                  getParentForChildren(),
                  isClean());
          dataSources_ = null;
        }
        return dataSourcesBuilder_;
      }

      private perfetto.protos.TraceConfigOuterClass.TraceConfig.BuiltinDataSource builtinDataSources_;
      private com.google.protobuf.SingleFieldBuilderV3<
          perfetto.protos.TraceConfigOuterClass.TraceConfig.BuiltinDataSource, perfetto.protos.TraceConfigOuterClass.TraceConfig.BuiltinDataSource.Builder, perfetto.protos.TraceConfigOuterClass.TraceConfig.BuiltinDataSourceOrBuilder> builtinDataSourcesBuilder_;
      /**
       * <code>optional .perfetto.protos.TraceConfig.BuiltinDataSource builtin_data_sources = 20;</code>
       * @return Whether the builtinDataSources field is set.
       */
      public boolean hasBuiltinDataSources() {
        return ((bitField0_ & 0x00000004) != 0);
      }
      /**
       * <code>optional .perfetto.protos.TraceConfig.BuiltinDataSource builtin_data_sources = 20;</code>
       * @return The builtinDataSources.
       */
      public perfetto.protos.TraceConfigOuterClass.TraceConfig.BuiltinDataSource getBuiltinDataSources() {
        if (builtinDataSourcesBuilder_ == null) {
          return builtinDataSources_ == null ? perfetto.protos.TraceConfigOuterClass.TraceConfig.BuiltinDataSource.getDefaultInstance() : builtinDataSources_;
        } else {
          return builtinDataSourcesBuilder_.getMessage();
        }
      }
      /**
       * <code>optional .perfetto.protos.TraceConfig.BuiltinDataSource builtin_data_sources = 20;</code>
       */
      public Builder setBuiltinDataSources(perfetto.protos.TraceConfigOuterClass.TraceConfig.BuiltinDataSource value) {
        if (builtinDataSourcesBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          builtinDataSources_ = value;
        } else {
          builtinDataSourcesBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000004;
        onChanged();
        return this;
      }
      /**
       * <code>optional .perfetto.protos.TraceConfig.BuiltinDataSource builtin_data_sources = 20;</code>
       */
      public Builder setBuiltinDataSources(
          perfetto.protos.TraceConfigOuterClass.TraceConfig.BuiltinDataSource.Builder builderForValue) {
        if (builtinDataSourcesBuilder_ == null) {
          builtinDataSources_ = builderForValue.build();
        } else {
          builtinDataSourcesBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000004;
        onChanged();
        return this;
      }
      /**
       * <code>optional .perfetto.protos.TraceConfig.BuiltinDataSource builtin_data_sources = 20;</code>
       */
      public Builder mergeBuiltinDataSources(perfetto.protos.TraceConfigOuterClass.TraceConfig.BuiltinDataSource value) {
        if (builtinDataSourcesBuilder_ == null) {
          if (((bitField0_ & 0x00000004) != 0) &&
            builtinDataSources_ != null &&
            builtinDataSources_ != perfetto.protos.TraceConfigOuterClass.TraceConfig.BuiltinDataSource.getDefaultInstance()) {
            getBuiltinDataSourcesBuilder().mergeFrom(value);
          } else {
            builtinDataSources_ = value;
          }
        } else {
          builtinDataSourcesBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00000004;
        onChanged();
        return this;
      }
      /**
       * <code>optional .perfetto.protos.TraceConfig.BuiltinDataSource builtin_data_sources = 20;</code>
       */
      public Builder clearBuiltinDataSources() {
        bitField0_ = (bitField0_ & ~0x00000004);
        builtinDataSources_ = null;
        if (builtinDataSourcesBuilder_ != null) {
          builtinDataSourcesBuilder_.dispose();
          builtinDataSourcesBuilder_ = null;
        }
        onChanged();
        return this;
      }
      /**
       * <code>optional .perfetto.protos.TraceConfig.BuiltinDataSource builtin_data_sources = 20;</code>
       */
      public perfetto.protos.TraceConfigOuterClass.TraceConfig.BuiltinDataSource.Builder getBuiltinDataSourcesBuilder() {
        bitField0_ |= 0x00000004;
        onChanged();
        return getBuiltinDataSourcesFieldBuilder().getBuilder();
      }
      /**
       * <code>optional .perfetto.protos.TraceConfig.BuiltinDataSource builtin_data_sources = 20;</code>
       */
      public perfetto.protos.TraceConfigOuterClass.TraceConfig.BuiltinDataSourceOrBuilder getBuiltinDataSourcesOrBuilder() {
        if (builtinDataSourcesBuilder_ != null) {
          return builtinDataSourcesBuilder_.getMessageOrBuilder();
        } else {
          return builtinDataSources_ == null ?
              perfetto.protos.TraceConfigOuterClass.TraceConfig.BuiltinDataSource.getDefaultInstance() : builtinDataSources_;
        }
      }
      /**
       * <code>optional .perfetto.protos.TraceConfig.BuiltinDataSource builtin_data_sources = 20;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          perfetto.protos.TraceConfigOuterClass.TraceConfig.BuiltinDataSource, perfetto.protos.TraceConfigOuterClass.TraceConfig.BuiltinDataSource.Builder, perfetto.protos.TraceConfigOuterClass.TraceConfig.BuiltinDataSourceOrBuilder> 
          getBuiltinDataSourcesFieldBuilder() {
        if (builtinDataSourcesBuilder_ == null) {
          builtinDataSourcesBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              perfetto.protos.TraceConfigOuterClass.TraceConfig.BuiltinDataSource, perfetto.protos.TraceConfigOuterClass.TraceConfig.BuiltinDataSource.Builder, perfetto.protos.TraceConfigOuterClass.TraceConfig.BuiltinDataSourceOrBuilder>(
                  getBuiltinDataSources(),
                  getParentForChildren(),
                  isClean());
          builtinDataSources_ = null;
        }
        return builtinDataSourcesBuilder_;
      }

      private int durationMs_ ;
      /**
       * <pre>
       * If specified, the trace will be stopped |duration_ms| after starting.
       * This does *not* count the time the system is suspended, so we will run
       * for duration_ms of system activity, not wall time.
       * However in case of traces with triggers, see
       * TriggerConfig.trigger_timeout_ms instead.
       * </pre>
       *
       * <code>optional uint32 duration_ms = 3;</code>
       * @return Whether the durationMs field is set.
       */
      @java.lang.Override
      public boolean hasDurationMs() {
        return ((bitField0_ & 0x00000008) != 0);
      }
      /**
       * <pre>
       * If specified, the trace will be stopped |duration_ms| after starting.
       * This does *not* count the time the system is suspended, so we will run
       * for duration_ms of system activity, not wall time.
       * However in case of traces with triggers, see
       * TriggerConfig.trigger_timeout_ms instead.
       * </pre>
       *
       * <code>optional uint32 duration_ms = 3;</code>
       * @return The durationMs.
       */
      @java.lang.Override
      public int getDurationMs() {
        return durationMs_;
      }
      /**
       * <pre>
       * If specified, the trace will be stopped |duration_ms| after starting.
       * This does *not* count the time the system is suspended, so we will run
       * for duration_ms of system activity, not wall time.
       * However in case of traces with triggers, see
       * TriggerConfig.trigger_timeout_ms instead.
       * </pre>
       *
       * <code>optional uint32 duration_ms = 3;</code>
       * @param value The durationMs to set.
       * @return This builder for chaining.
       */
      public Builder setDurationMs(int value) {
        
        durationMs_ = value;
        bitField0_ |= 0x00000008;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * If specified, the trace will be stopped |duration_ms| after starting.
       * This does *not* count the time the system is suspended, so we will run
       * for duration_ms of system activity, not wall time.
       * However in case of traces with triggers, see
       * TriggerConfig.trigger_timeout_ms instead.
       * </pre>
       *
       * <code>optional uint32 duration_ms = 3;</code>
       * @return This builder for chaining.
       */
      public Builder clearDurationMs() {
        bitField0_ = (bitField0_ & ~0x00000008);
        durationMs_ = 0;
        onChanged();
        return this;
      }

      private boolean enableExtraGuardrails_ ;
      /**
       * <pre>
       * This is set when --dropbox is passed to the Perfetto command line client
       * and enables guardrails that limit resource usage for traces requested
       * by statsd.
       * </pre>
       *
       * <code>optional bool enable_extra_guardrails = 4;</code>
       * @return Whether the enableExtraGuardrails field is set.
       */
      @java.lang.Override
      public boolean hasEnableExtraGuardrails() {
        return ((bitField0_ & 0x00000010) != 0);
      }
      /**
       * <pre>
       * This is set when --dropbox is passed to the Perfetto command line client
       * and enables guardrails that limit resource usage for traces requested
       * by statsd.
       * </pre>
       *
       * <code>optional bool enable_extra_guardrails = 4;</code>
       * @return The enableExtraGuardrails.
       */
      @java.lang.Override
      public boolean getEnableExtraGuardrails() {
        return enableExtraGuardrails_;
      }
      /**
       * <pre>
       * This is set when --dropbox is passed to the Perfetto command line client
       * and enables guardrails that limit resource usage for traces requested
       * by statsd.
       * </pre>
       *
       * <code>optional bool enable_extra_guardrails = 4;</code>
       * @param value The enableExtraGuardrails to set.
       * @return This builder for chaining.
       */
      public Builder setEnableExtraGuardrails(boolean value) {
        
        enableExtraGuardrails_ = value;
        bitField0_ |= 0x00000010;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * This is set when --dropbox is passed to the Perfetto command line client
       * and enables guardrails that limit resource usage for traces requested
       * by statsd.
       * </pre>
       *
       * <code>optional bool enable_extra_guardrails = 4;</code>
       * @return This builder for chaining.
       */
      public Builder clearEnableExtraGuardrails() {
        bitField0_ = (bitField0_ & ~0x00000010);
        enableExtraGuardrails_ = false;
        onChanged();
        return this;
      }

      private int lockdownMode_ = 0;
      /**
       * <pre>
       * Reject producers that are not running under the same UID as the tracing
       * service.
       * </pre>
       *
       * <code>optional .perfetto.protos.TraceConfig.LockdownModeOperation lockdown_mode = 5;</code>
       * @return Whether the lockdownMode field is set.
       */
      @java.lang.Override public boolean hasLockdownMode() {
        return ((bitField0_ & 0x00000020) != 0);
      }
      /**
       * <pre>
       * Reject producers that are not running under the same UID as the tracing
       * service.
       * </pre>
       *
       * <code>optional .perfetto.protos.TraceConfig.LockdownModeOperation lockdown_mode = 5;</code>
       * @return The lockdownMode.
       */
      @java.lang.Override
      public perfetto.protos.TraceConfigOuterClass.TraceConfig.LockdownModeOperation getLockdownMode() {
        perfetto.protos.TraceConfigOuterClass.TraceConfig.LockdownModeOperation result = perfetto.protos.TraceConfigOuterClass.TraceConfig.LockdownModeOperation.forNumber(lockdownMode_);
        return result == null ? perfetto.protos.TraceConfigOuterClass.TraceConfig.LockdownModeOperation.LOCKDOWN_UNCHANGED : result;
      }
      /**
       * <pre>
       * Reject producers that are not running under the same UID as the tracing
       * service.
       * </pre>
       *
       * <code>optional .perfetto.protos.TraceConfig.LockdownModeOperation lockdown_mode = 5;</code>
       * @param value The lockdownMode to set.
       * @return This builder for chaining.
       */
      public Builder setLockdownMode(perfetto.protos.TraceConfigOuterClass.TraceConfig.LockdownModeOperation value) {
        if (value == null) {
          throw new NullPointerException();
        }
        bitField0_ |= 0x00000020;
        lockdownMode_ = value.getNumber();
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Reject producers that are not running under the same UID as the tracing
       * service.
       * </pre>
       *
       * <code>optional .perfetto.protos.TraceConfig.LockdownModeOperation lockdown_mode = 5;</code>
       * @return This builder for chaining.
       */
      public Builder clearLockdownMode() {
        bitField0_ = (bitField0_ & ~0x00000020);
        lockdownMode_ = 0;
        onChanged();
        return this;
      }

      private java.util.List<perfetto.protos.TraceConfigOuterClass.TraceConfig.ProducerConfig> producers_ =
        java.util.Collections.emptyList();
      private void ensureProducersIsMutable() {
        if (!((bitField0_ & 0x00000040) != 0)) {
          producers_ = new java.util.ArrayList<perfetto.protos.TraceConfigOuterClass.TraceConfig.ProducerConfig>(producers_);
          bitField0_ |= 0x00000040;
         }
      }

      private com.google.protobuf.RepeatedFieldBuilderV3<
          perfetto.protos.TraceConfigOuterClass.TraceConfig.ProducerConfig, perfetto.protos.TraceConfigOuterClass.TraceConfig.ProducerConfig.Builder, perfetto.protos.TraceConfigOuterClass.TraceConfig.ProducerConfigOrBuilder> producersBuilder_;

      /**
       * <code>repeated .perfetto.protos.TraceConfig.ProducerConfig producers = 6;</code>
       */
      public java.util.List<perfetto.protos.TraceConfigOuterClass.TraceConfig.ProducerConfig> getProducersList() {
        if (producersBuilder_ == null) {
          return java.util.Collections.unmodifiableList(producers_);
        } else {
          return producersBuilder_.getMessageList();
        }
      }
      /**
       * <code>repeated .perfetto.protos.TraceConfig.ProducerConfig producers = 6;</code>
       */
      public int getProducersCount() {
        if (producersBuilder_ == null) {
          return producers_.size();
        } else {
          return producersBuilder_.getCount();
        }
      }
      /**
       * <code>repeated .perfetto.protos.TraceConfig.ProducerConfig producers = 6;</code>
       */
      public perfetto.protos.TraceConfigOuterClass.TraceConfig.ProducerConfig getProducers(int index) {
        if (producersBuilder_ == null) {
          return producers_.get(index);
        } else {
          return producersBuilder_.getMessage(index);
        }
      }
      /**
       * <code>repeated .perfetto.protos.TraceConfig.ProducerConfig producers = 6;</code>
       */
      public Builder setProducers(
          int index, perfetto.protos.TraceConfigOuterClass.TraceConfig.ProducerConfig value) {
        if (producersBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureProducersIsMutable();
          producers_.set(index, value);
          onChanged();
        } else {
          producersBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .perfetto.protos.TraceConfig.ProducerConfig producers = 6;</code>
       */
      public Builder setProducers(
          int index, perfetto.protos.TraceConfigOuterClass.TraceConfig.ProducerConfig.Builder builderForValue) {
        if (producersBuilder_ == null) {
          ensureProducersIsMutable();
          producers_.set(index, builderForValue.build());
          onChanged();
        } else {
          producersBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .perfetto.protos.TraceConfig.ProducerConfig producers = 6;</code>
       */
      public Builder addProducers(perfetto.protos.TraceConfigOuterClass.TraceConfig.ProducerConfig value) {
        if (producersBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureProducersIsMutable();
          producers_.add(value);
          onChanged();
        } else {
          producersBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <code>repeated .perfetto.protos.TraceConfig.ProducerConfig producers = 6;</code>
       */
      public Builder addProducers(
          int index, perfetto.protos.TraceConfigOuterClass.TraceConfig.ProducerConfig value) {
        if (producersBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureProducersIsMutable();
          producers_.add(index, value);
          onChanged();
        } else {
          producersBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .perfetto.protos.TraceConfig.ProducerConfig producers = 6;</code>
       */
      public Builder addProducers(
          perfetto.protos.TraceConfigOuterClass.TraceConfig.ProducerConfig.Builder builderForValue) {
        if (producersBuilder_ == null) {
          ensureProducersIsMutable();
          producers_.add(builderForValue.build());
          onChanged();
        } else {
          producersBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .perfetto.protos.TraceConfig.ProducerConfig producers = 6;</code>
       */
      public Builder addProducers(
          int index, perfetto.protos.TraceConfigOuterClass.TraceConfig.ProducerConfig.Builder builderForValue) {
        if (producersBuilder_ == null) {
          ensureProducersIsMutable();
          producers_.add(index, builderForValue.build());
          onChanged();
        } else {
          producersBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .perfetto.protos.TraceConfig.ProducerConfig producers = 6;</code>
       */
      public Builder addAllProducers(
          java.lang.Iterable<? extends perfetto.protos.TraceConfigOuterClass.TraceConfig.ProducerConfig> values) {
        if (producersBuilder_ == null) {
          ensureProducersIsMutable();
          com.google.protobuf.AbstractMessageLite.Builder.addAll(
              values, producers_);
          onChanged();
        } else {
          producersBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <code>repeated .perfetto.protos.TraceConfig.ProducerConfig producers = 6;</code>
       */
      public Builder clearProducers() {
        if (producersBuilder_ == null) {
          producers_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000040);
          onChanged();
        } else {
          producersBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>repeated .perfetto.protos.TraceConfig.ProducerConfig producers = 6;</code>
       */
      public Builder removeProducers(int index) {
        if (producersBuilder_ == null) {
          ensureProducersIsMutable();
          producers_.remove(index);
          onChanged();
        } else {
          producersBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <code>repeated .perfetto.protos.TraceConfig.ProducerConfig producers = 6;</code>
       */
      public perfetto.protos.TraceConfigOuterClass.TraceConfig.ProducerConfig.Builder getProducersBuilder(
          int index) {
        return getProducersFieldBuilder().getBuilder(index);
      }
      /**
       * <code>repeated .perfetto.protos.TraceConfig.ProducerConfig producers = 6;</code>
       */
      public perfetto.protos.TraceConfigOuterClass.TraceConfig.ProducerConfigOrBuilder getProducersOrBuilder(
          int index) {
        if (producersBuilder_ == null) {
          return producers_.get(index);  } else {
          return producersBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <code>repeated .perfetto.protos.TraceConfig.ProducerConfig producers = 6;</code>
       */
      public java.util.List<? extends perfetto.protos.TraceConfigOuterClass.TraceConfig.ProducerConfigOrBuilder> 
           getProducersOrBuilderList() {
        if (producersBuilder_ != null) {
          return producersBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(producers_);
        }
      }
      /**
       * <code>repeated .perfetto.protos.TraceConfig.ProducerConfig producers = 6;</code>
       */
      public perfetto.protos.TraceConfigOuterClass.TraceConfig.ProducerConfig.Builder addProducersBuilder() {
        return getProducersFieldBuilder().addBuilder(
            perfetto.protos.TraceConfigOuterClass.TraceConfig.ProducerConfig.getDefaultInstance());
      }
      /**
       * <code>repeated .perfetto.protos.TraceConfig.ProducerConfig producers = 6;</code>
       */
      public perfetto.protos.TraceConfigOuterClass.TraceConfig.ProducerConfig.Builder addProducersBuilder(
          int index) {
        return getProducersFieldBuilder().addBuilder(
            index, perfetto.protos.TraceConfigOuterClass.TraceConfig.ProducerConfig.getDefaultInstance());
      }
      /**
       * <code>repeated .perfetto.protos.TraceConfig.ProducerConfig producers = 6;</code>
       */
      public java.util.List<perfetto.protos.TraceConfigOuterClass.TraceConfig.ProducerConfig.Builder> 
           getProducersBuilderList() {
        return getProducersFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilderV3<
          perfetto.protos.TraceConfigOuterClass.TraceConfig.ProducerConfig, perfetto.protos.TraceConfigOuterClass.TraceConfig.ProducerConfig.Builder, perfetto.protos.TraceConfigOuterClass.TraceConfig.ProducerConfigOrBuilder> 
          getProducersFieldBuilder() {
        if (producersBuilder_ == null) {
          producersBuilder_ = new com.google.protobuf.RepeatedFieldBuilderV3<
              perfetto.protos.TraceConfigOuterClass.TraceConfig.ProducerConfig, perfetto.protos.TraceConfigOuterClass.TraceConfig.ProducerConfig.Builder, perfetto.protos.TraceConfigOuterClass.TraceConfig.ProducerConfigOrBuilder>(
                  producers_,
                  ((bitField0_ & 0x00000040) != 0),
                  getParentForChildren(),
                  isClean());
          producers_ = null;
        }
        return producersBuilder_;
      }

      private perfetto.protos.TraceConfigOuterClass.TraceConfig.StatsdMetadata statsdMetadata_;
      private com.google.protobuf.SingleFieldBuilderV3<
          perfetto.protos.TraceConfigOuterClass.TraceConfig.StatsdMetadata, perfetto.protos.TraceConfigOuterClass.TraceConfig.StatsdMetadata.Builder, perfetto.protos.TraceConfigOuterClass.TraceConfig.StatsdMetadataOrBuilder> statsdMetadataBuilder_;
      /**
       * <pre>
       * Statsd-specific metadata.
       * </pre>
       *
       * <code>optional .perfetto.protos.TraceConfig.StatsdMetadata statsd_metadata = 7;</code>
       * @return Whether the statsdMetadata field is set.
       */
      public boolean hasStatsdMetadata() {
        return ((bitField0_ & 0x00000080) != 0);
      }
      /**
       * <pre>
       * Statsd-specific metadata.
       * </pre>
       *
       * <code>optional .perfetto.protos.TraceConfig.StatsdMetadata statsd_metadata = 7;</code>
       * @return The statsdMetadata.
       */
      public perfetto.protos.TraceConfigOuterClass.TraceConfig.StatsdMetadata getStatsdMetadata() {
        if (statsdMetadataBuilder_ == null) {
          return statsdMetadata_ == null ? perfetto.protos.TraceConfigOuterClass.TraceConfig.StatsdMetadata.getDefaultInstance() : statsdMetadata_;
        } else {
          return statsdMetadataBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       * Statsd-specific metadata.
       * </pre>
       *
       * <code>optional .perfetto.protos.TraceConfig.StatsdMetadata statsd_metadata = 7;</code>
       */
      public Builder setStatsdMetadata(perfetto.protos.TraceConfigOuterClass.TraceConfig.StatsdMetadata value) {
        if (statsdMetadataBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          statsdMetadata_ = value;
        } else {
          statsdMetadataBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000080;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Statsd-specific metadata.
       * </pre>
       *
       * <code>optional .perfetto.protos.TraceConfig.StatsdMetadata statsd_metadata = 7;</code>
       */
      public Builder setStatsdMetadata(
          perfetto.protos.TraceConfigOuterClass.TraceConfig.StatsdMetadata.Builder builderForValue) {
        if (statsdMetadataBuilder_ == null) {
          statsdMetadata_ = builderForValue.build();
        } else {
          statsdMetadataBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000080;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Statsd-specific metadata.
       * </pre>
       *
       * <code>optional .perfetto.protos.TraceConfig.StatsdMetadata statsd_metadata = 7;</code>
       */
      public Builder mergeStatsdMetadata(perfetto.protos.TraceConfigOuterClass.TraceConfig.StatsdMetadata value) {
        if (statsdMetadataBuilder_ == null) {
          if (((bitField0_ & 0x00000080) != 0) &&
            statsdMetadata_ != null &&
            statsdMetadata_ != perfetto.protos.TraceConfigOuterClass.TraceConfig.StatsdMetadata.getDefaultInstance()) {
            getStatsdMetadataBuilder().mergeFrom(value);
          } else {
            statsdMetadata_ = value;
          }
        } else {
          statsdMetadataBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00000080;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Statsd-specific metadata.
       * </pre>
       *
       * <code>optional .perfetto.protos.TraceConfig.StatsdMetadata statsd_metadata = 7;</code>
       */
      public Builder clearStatsdMetadata() {
        bitField0_ = (bitField0_ & ~0x00000080);
        statsdMetadata_ = null;
        if (statsdMetadataBuilder_ != null) {
          statsdMetadataBuilder_.dispose();
          statsdMetadataBuilder_ = null;
        }
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Statsd-specific metadata.
       * </pre>
       *
       * <code>optional .perfetto.protos.TraceConfig.StatsdMetadata statsd_metadata = 7;</code>
       */
      public perfetto.protos.TraceConfigOuterClass.TraceConfig.StatsdMetadata.Builder getStatsdMetadataBuilder() {
        bitField0_ |= 0x00000080;
        onChanged();
        return getStatsdMetadataFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       * Statsd-specific metadata.
       * </pre>
       *
       * <code>optional .perfetto.protos.TraceConfig.StatsdMetadata statsd_metadata = 7;</code>
       */
      public perfetto.protos.TraceConfigOuterClass.TraceConfig.StatsdMetadataOrBuilder getStatsdMetadataOrBuilder() {
        if (statsdMetadataBuilder_ != null) {
          return statsdMetadataBuilder_.getMessageOrBuilder();
        } else {
          return statsdMetadata_ == null ?
              perfetto.protos.TraceConfigOuterClass.TraceConfig.StatsdMetadata.getDefaultInstance() : statsdMetadata_;
        }
      }
      /**
       * <pre>
       * Statsd-specific metadata.
       * </pre>
       *
       * <code>optional .perfetto.protos.TraceConfig.StatsdMetadata statsd_metadata = 7;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          perfetto.protos.TraceConfigOuterClass.TraceConfig.StatsdMetadata, perfetto.protos.TraceConfigOuterClass.TraceConfig.StatsdMetadata.Builder, perfetto.protos.TraceConfigOuterClass.TraceConfig.StatsdMetadataOrBuilder> 
          getStatsdMetadataFieldBuilder() {
        if (statsdMetadataBuilder_ == null) {
          statsdMetadataBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              perfetto.protos.TraceConfigOuterClass.TraceConfig.StatsdMetadata, perfetto.protos.TraceConfigOuterClass.TraceConfig.StatsdMetadata.Builder, perfetto.protos.TraceConfigOuterClass.TraceConfig.StatsdMetadataOrBuilder>(
                  getStatsdMetadata(),
                  getParentForChildren(),
                  isClean());
          statsdMetadata_ = null;
        }
        return statsdMetadataBuilder_;
      }

      private boolean writeIntoFile_ ;
      /**
       * <pre>
       * When true &amp;&amp; |output_path| is empty, the EnableTracing() request must
       * provide a file descriptor. The service will then periodically read packets
       * out of the trace buffer and store it into the passed file.
       * If |output_path| is not empty no fd should be passed, the service
       * will create a new file and write into that (see comment below).
       * </pre>
       *
       * <code>optional bool write_into_file = 8;</code>
       * @return Whether the writeIntoFile field is set.
       */
      @java.lang.Override
      public boolean hasWriteIntoFile() {
        return ((bitField0_ & 0x00000100) != 0);
      }
      /**
       * <pre>
       * When true &amp;&amp; |output_path| is empty, the EnableTracing() request must
       * provide a file descriptor. The service will then periodically read packets
       * out of the trace buffer and store it into the passed file.
       * If |output_path| is not empty no fd should be passed, the service
       * will create a new file and write into that (see comment below).
       * </pre>
       *
       * <code>optional bool write_into_file = 8;</code>
       * @return The writeIntoFile.
       */
      @java.lang.Override
      public boolean getWriteIntoFile() {
        return writeIntoFile_;
      }
      /**
       * <pre>
       * When true &amp;&amp; |output_path| is empty, the EnableTracing() request must
       * provide a file descriptor. The service will then periodically read packets
       * out of the trace buffer and store it into the passed file.
       * If |output_path| is not empty no fd should be passed, the service
       * will create a new file and write into that (see comment below).
       * </pre>
       *
       * <code>optional bool write_into_file = 8;</code>
       * @param value The writeIntoFile to set.
       * @return This builder for chaining.
       */
      public Builder setWriteIntoFile(boolean value) {
        
        writeIntoFile_ = value;
        bitField0_ |= 0x00000100;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * When true &amp;&amp; |output_path| is empty, the EnableTracing() request must
       * provide a file descriptor. The service will then periodically read packets
       * out of the trace buffer and store it into the passed file.
       * If |output_path| is not empty no fd should be passed, the service
       * will create a new file and write into that (see comment below).
       * </pre>
       *
       * <code>optional bool write_into_file = 8;</code>
       * @return This builder for chaining.
       */
      public Builder clearWriteIntoFile() {
        bitField0_ = (bitField0_ & ~0x00000100);
        writeIntoFile_ = false;
        onChanged();
        return this;
      }

      private java.lang.Object outputPath_ = "";
      /**
       * <pre>
       * This must point to a non-existing file. If the file exists the service
       * will NOT overwrite and will fail instead as a security precaution.
       * On Android, when this is used with the system traced, the path must be
       * within /data/misc/perfetto-traces/ or the trace will fail.
       * This option has been introduced in Android R. Before R write_into_file
       * can be used only with the "pass a file descriptor over IPC" mode.
       * </pre>
       *
       * <code>optional string output_path = 29;</code>
       * @return Whether the outputPath field is set.
       */
      public boolean hasOutputPath() {
        return ((bitField0_ & 0x00000200) != 0);
      }
      /**
       * <pre>
       * This must point to a non-existing file. If the file exists the service
       * will NOT overwrite and will fail instead as a security precaution.
       * On Android, when this is used with the system traced, the path must be
       * within /data/misc/perfetto-traces/ or the trace will fail.
       * This option has been introduced in Android R. Before R write_into_file
       * can be used only with the "pass a file descriptor over IPC" mode.
       * </pre>
       *
       * <code>optional string output_path = 29;</code>
       * @return The outputPath.
       */
      public java.lang.String getOutputPath() {
        java.lang.Object ref = outputPath_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          if (bs.isValidUtf8()) {
            outputPath_ = s;
          }
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <pre>
       * This must point to a non-existing file. If the file exists the service
       * will NOT overwrite and will fail instead as a security precaution.
       * On Android, when this is used with the system traced, the path must be
       * within /data/misc/perfetto-traces/ or the trace will fail.
       * This option has been introduced in Android R. Before R write_into_file
       * can be used only with the "pass a file descriptor over IPC" mode.
       * </pre>
       *
       * <code>optional string output_path = 29;</code>
       * @return The bytes for outputPath.
       */
      public com.google.protobuf.ByteString
          getOutputPathBytes() {
        java.lang.Object ref = outputPath_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          outputPath_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <pre>
       * This must point to a non-existing file. If the file exists the service
       * will NOT overwrite and will fail instead as a security precaution.
       * On Android, when this is used with the system traced, the path must be
       * within /data/misc/perfetto-traces/ or the trace will fail.
       * This option has been introduced in Android R. Before R write_into_file
       * can be used only with the "pass a file descriptor over IPC" mode.
       * </pre>
       *
       * <code>optional string output_path = 29;</code>
       * @param value The outputPath to set.
       * @return This builder for chaining.
       */
      public Builder setOutputPath(
          java.lang.String value) {
        if (value == null) { throw new NullPointerException(); }
        outputPath_ = value;
        bitField0_ |= 0x00000200;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * This must point to a non-existing file. If the file exists the service
       * will NOT overwrite and will fail instead as a security precaution.
       * On Android, when this is used with the system traced, the path must be
       * within /data/misc/perfetto-traces/ or the trace will fail.
       * This option has been introduced in Android R. Before R write_into_file
       * can be used only with the "pass a file descriptor over IPC" mode.
       * </pre>
       *
       * <code>optional string output_path = 29;</code>
       * @return This builder for chaining.
       */
      public Builder clearOutputPath() {
        outputPath_ = getDefaultInstance().getOutputPath();
        bitField0_ = (bitField0_ & ~0x00000200);
        onChanged();
        return this;
      }
      /**
       * <pre>
       * This must point to a non-existing file. If the file exists the service
       * will NOT overwrite and will fail instead as a security precaution.
       * On Android, when this is used with the system traced, the path must be
       * within /data/misc/perfetto-traces/ or the trace will fail.
       * This option has been introduced in Android R. Before R write_into_file
       * can be used only with the "pass a file descriptor over IPC" mode.
       * </pre>
       *
       * <code>optional string output_path = 29;</code>
       * @param value The bytes for outputPath to set.
       * @return This builder for chaining.
       */
      public Builder setOutputPathBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) { throw new NullPointerException(); }
        outputPath_ = value;
        bitField0_ |= 0x00000200;
        onChanged();
        return this;
      }

      private int fileWritePeriodMs_ ;
      /**
       * <pre>
       * Optional. If non-zero tunes the write period. A min value of 100ms is
       * enforced (i.e. smaller values are ignored).
       * </pre>
       *
       * <code>optional uint32 file_write_period_ms = 9;</code>
       * @return Whether the fileWritePeriodMs field is set.
       */
      @java.lang.Override
      public boolean hasFileWritePeriodMs() {
        return ((bitField0_ & 0x00000400) != 0);
      }
      /**
       * <pre>
       * Optional. If non-zero tunes the write period. A min value of 100ms is
       * enforced (i.e. smaller values are ignored).
       * </pre>
       *
       * <code>optional uint32 file_write_period_ms = 9;</code>
       * @return The fileWritePeriodMs.
       */
      @java.lang.Override
      public int getFileWritePeriodMs() {
        return fileWritePeriodMs_;
      }
      /**
       * <pre>
       * Optional. If non-zero tunes the write period. A min value of 100ms is
       * enforced (i.e. smaller values are ignored).
       * </pre>
       *
       * <code>optional uint32 file_write_period_ms = 9;</code>
       * @param value The fileWritePeriodMs to set.
       * @return This builder for chaining.
       */
      public Builder setFileWritePeriodMs(int value) {
        
        fileWritePeriodMs_ = value;
        bitField0_ |= 0x00000400;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Optional. If non-zero tunes the write period. A min value of 100ms is
       * enforced (i.e. smaller values are ignored).
       * </pre>
       *
       * <code>optional uint32 file_write_period_ms = 9;</code>
       * @return This builder for chaining.
       */
      public Builder clearFileWritePeriodMs() {
        bitField0_ = (bitField0_ & ~0x00000400);
        fileWritePeriodMs_ = 0;
        onChanged();
        return this;
      }

      private long maxFileSizeBytes_ ;
      /**
       * <pre>
       * Optional. When non zero the periodic write stops once at most X bytes
       * have been written into the file. Tracing is disabled when this limit is
       * reached, even if |duration_ms| has not been reached yet.
       * </pre>
       *
       * <code>optional uint64 max_file_size_bytes = 10;</code>
       * @return Whether the maxFileSizeBytes field is set.
       */
      @java.lang.Override
      public boolean hasMaxFileSizeBytes() {
        return ((bitField0_ & 0x00000800) != 0);
      }
      /**
       * <pre>
       * Optional. When non zero the periodic write stops once at most X bytes
       * have been written into the file. Tracing is disabled when this limit is
       * reached, even if |duration_ms| has not been reached yet.
       * </pre>
       *
       * <code>optional uint64 max_file_size_bytes = 10;</code>
       * @return The maxFileSizeBytes.
       */
      @java.lang.Override
      public long getMaxFileSizeBytes() {
        return maxFileSizeBytes_;
      }
      /**
       * <pre>
       * Optional. When non zero the periodic write stops once at most X bytes
       * have been written into the file. Tracing is disabled when this limit is
       * reached, even if |duration_ms| has not been reached yet.
       * </pre>
       *
       * <code>optional uint64 max_file_size_bytes = 10;</code>
       * @param value The maxFileSizeBytes to set.
       * @return This builder for chaining.
       */
      public Builder setMaxFileSizeBytes(long value) {
        
        maxFileSizeBytes_ = value;
        bitField0_ |= 0x00000800;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Optional. When non zero the periodic write stops once at most X bytes
       * have been written into the file. Tracing is disabled when this limit is
       * reached, even if |duration_ms| has not been reached yet.
       * </pre>
       *
       * <code>optional uint64 max_file_size_bytes = 10;</code>
       * @return This builder for chaining.
       */
      public Builder clearMaxFileSizeBytes() {
        bitField0_ = (bitField0_ & ~0x00000800);
        maxFileSizeBytes_ = 0L;
        onChanged();
        return this;
      }

      private perfetto.protos.TraceConfigOuterClass.TraceConfig.GuardrailOverrides guardrailOverrides_;
      private com.google.protobuf.SingleFieldBuilderV3<
          perfetto.protos.TraceConfigOuterClass.TraceConfig.GuardrailOverrides, perfetto.protos.TraceConfigOuterClass.TraceConfig.GuardrailOverrides.Builder, perfetto.protos.TraceConfigOuterClass.TraceConfig.GuardrailOverridesOrBuilder> guardrailOverridesBuilder_;
      /**
       * <code>optional .perfetto.protos.TraceConfig.GuardrailOverrides guardrail_overrides = 11;</code>
       * @return Whether the guardrailOverrides field is set.
       */
      public boolean hasGuardrailOverrides() {
        return ((bitField0_ & 0x00001000) != 0);
      }
      /**
       * <code>optional .perfetto.protos.TraceConfig.GuardrailOverrides guardrail_overrides = 11;</code>
       * @return The guardrailOverrides.
       */
      public perfetto.protos.TraceConfigOuterClass.TraceConfig.GuardrailOverrides getGuardrailOverrides() {
        if (guardrailOverridesBuilder_ == null) {
          return guardrailOverrides_ == null ? perfetto.protos.TraceConfigOuterClass.TraceConfig.GuardrailOverrides.getDefaultInstance() : guardrailOverrides_;
        } else {
          return guardrailOverridesBuilder_.getMessage();
        }
      }
      /**
       * <code>optional .perfetto.protos.TraceConfig.GuardrailOverrides guardrail_overrides = 11;</code>
       */
      public Builder setGuardrailOverrides(perfetto.protos.TraceConfigOuterClass.TraceConfig.GuardrailOverrides value) {
        if (guardrailOverridesBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          guardrailOverrides_ = value;
        } else {
          guardrailOverridesBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00001000;
        onChanged();
        return this;
      }
      /**
       * <code>optional .perfetto.protos.TraceConfig.GuardrailOverrides guardrail_overrides = 11;</code>
       */
      public Builder setGuardrailOverrides(
          perfetto.protos.TraceConfigOuterClass.TraceConfig.GuardrailOverrides.Builder builderForValue) {
        if (guardrailOverridesBuilder_ == null) {
          guardrailOverrides_ = builderForValue.build();
        } else {
          guardrailOverridesBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00001000;
        onChanged();
        return this;
      }
      /**
       * <code>optional .perfetto.protos.TraceConfig.GuardrailOverrides guardrail_overrides = 11;</code>
       */
      public Builder mergeGuardrailOverrides(perfetto.protos.TraceConfigOuterClass.TraceConfig.GuardrailOverrides value) {
        if (guardrailOverridesBuilder_ == null) {
          if (((bitField0_ & 0x00001000) != 0) &&
            guardrailOverrides_ != null &&
            guardrailOverrides_ != perfetto.protos.TraceConfigOuterClass.TraceConfig.GuardrailOverrides.getDefaultInstance()) {
            getGuardrailOverridesBuilder().mergeFrom(value);
          } else {
            guardrailOverrides_ = value;
          }
        } else {
          guardrailOverridesBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00001000;
        onChanged();
        return this;
      }
      /**
       * <code>optional .perfetto.protos.TraceConfig.GuardrailOverrides guardrail_overrides = 11;</code>
       */
      public Builder clearGuardrailOverrides() {
        bitField0_ = (bitField0_ & ~0x00001000);
        guardrailOverrides_ = null;
        if (guardrailOverridesBuilder_ != null) {
          guardrailOverridesBuilder_.dispose();
          guardrailOverridesBuilder_ = null;
        }
        onChanged();
        return this;
      }
      /**
       * <code>optional .perfetto.protos.TraceConfig.GuardrailOverrides guardrail_overrides = 11;</code>
       */
      public perfetto.protos.TraceConfigOuterClass.TraceConfig.GuardrailOverrides.Builder getGuardrailOverridesBuilder() {
        bitField0_ |= 0x00001000;
        onChanged();
        return getGuardrailOverridesFieldBuilder().getBuilder();
      }
      /**
       * <code>optional .perfetto.protos.TraceConfig.GuardrailOverrides guardrail_overrides = 11;</code>
       */
      public perfetto.protos.TraceConfigOuterClass.TraceConfig.GuardrailOverridesOrBuilder getGuardrailOverridesOrBuilder() {
        if (guardrailOverridesBuilder_ != null) {
          return guardrailOverridesBuilder_.getMessageOrBuilder();
        } else {
          return guardrailOverrides_ == null ?
              perfetto.protos.TraceConfigOuterClass.TraceConfig.GuardrailOverrides.getDefaultInstance() : guardrailOverrides_;
        }
      }
      /**
       * <code>optional .perfetto.protos.TraceConfig.GuardrailOverrides guardrail_overrides = 11;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          perfetto.protos.TraceConfigOuterClass.TraceConfig.GuardrailOverrides, perfetto.protos.TraceConfigOuterClass.TraceConfig.GuardrailOverrides.Builder, perfetto.protos.TraceConfigOuterClass.TraceConfig.GuardrailOverridesOrBuilder> 
          getGuardrailOverridesFieldBuilder() {
        if (guardrailOverridesBuilder_ == null) {
          guardrailOverridesBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              perfetto.protos.TraceConfigOuterClass.TraceConfig.GuardrailOverrides, perfetto.protos.TraceConfigOuterClass.TraceConfig.GuardrailOverrides.Builder, perfetto.protos.TraceConfigOuterClass.TraceConfig.GuardrailOverridesOrBuilder>(
                  getGuardrailOverrides(),
                  getParentForChildren(),
                  isClean());
          guardrailOverrides_ = null;
        }
        return guardrailOverridesBuilder_;
      }

      private boolean deferredStart_ ;
      /**
       * <pre>
       * When true, data sources are not started until an explicit call to
       * StartTracing() on the consumer port. This is to support early
       * initialization and fast trace triggering. This can be used only when the
       * Consumer explicitly triggers the StartTracing() method.
       * This should not be used in a remote trace config via statsd, doing so will
       * result in a hung trace session.
       * </pre>
       *
       * <code>optional bool deferred_start = 12;</code>
       * @return Whether the deferredStart field is set.
       */
      @java.lang.Override
      public boolean hasDeferredStart() {
        return ((bitField0_ & 0x00002000) != 0);
      }
      /**
       * <pre>
       * When true, data sources are not started until an explicit call to
       * StartTracing() on the consumer port. This is to support early
       * initialization and fast trace triggering. This can be used only when the
       * Consumer explicitly triggers the StartTracing() method.
       * This should not be used in a remote trace config via statsd, doing so will
       * result in a hung trace session.
       * </pre>
       *
       * <code>optional bool deferred_start = 12;</code>
       * @return The deferredStart.
       */
      @java.lang.Override
      public boolean getDeferredStart() {
        return deferredStart_;
      }
      /**
       * <pre>
       * When true, data sources are not started until an explicit call to
       * StartTracing() on the consumer port. This is to support early
       * initialization and fast trace triggering. This can be used only when the
       * Consumer explicitly triggers the StartTracing() method.
       * This should not be used in a remote trace config via statsd, doing so will
       * result in a hung trace session.
       * </pre>
       *
       * <code>optional bool deferred_start = 12;</code>
       * @param value The deferredStart to set.
       * @return This builder for chaining.
       */
      public Builder setDeferredStart(boolean value) {
        
        deferredStart_ = value;
        bitField0_ |= 0x00002000;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * When true, data sources are not started until an explicit call to
       * StartTracing() on the consumer port. This is to support early
       * initialization and fast trace triggering. This can be used only when the
       * Consumer explicitly triggers the StartTracing() method.
       * This should not be used in a remote trace config via statsd, doing so will
       * result in a hung trace session.
       * </pre>
       *
       * <code>optional bool deferred_start = 12;</code>
       * @return This builder for chaining.
       */
      public Builder clearDeferredStart() {
        bitField0_ = (bitField0_ & ~0x00002000);
        deferredStart_ = false;
        onChanged();
        return this;
      }

      private int flushPeriodMs_ ;
      /**
       * <pre>
       * When set, it periodically issues a Flush() to all data source, forcing them
       * to commit their data into the tracing service. This can be used for
       * quasi-real-time streaming mode and to guarantee some partial ordering of
       * events in the trace in windows of X ms.
       * </pre>
       *
       * <code>optional uint32 flush_period_ms = 13;</code>
       * @return Whether the flushPeriodMs field is set.
       */
      @java.lang.Override
      public boolean hasFlushPeriodMs() {
        return ((bitField0_ & 0x00004000) != 0);
      }
      /**
       * <pre>
       * When set, it periodically issues a Flush() to all data source, forcing them
       * to commit their data into the tracing service. This can be used for
       * quasi-real-time streaming mode and to guarantee some partial ordering of
       * events in the trace in windows of X ms.
       * </pre>
       *
       * <code>optional uint32 flush_period_ms = 13;</code>
       * @return The flushPeriodMs.
       */
      @java.lang.Override
      public int getFlushPeriodMs() {
        return flushPeriodMs_;
      }
      /**
       * <pre>
       * When set, it periodically issues a Flush() to all data source, forcing them
       * to commit their data into the tracing service. This can be used for
       * quasi-real-time streaming mode and to guarantee some partial ordering of
       * events in the trace in windows of X ms.
       * </pre>
       *
       * <code>optional uint32 flush_period_ms = 13;</code>
       * @param value The flushPeriodMs to set.
       * @return This builder for chaining.
       */
      public Builder setFlushPeriodMs(int value) {
        
        flushPeriodMs_ = value;
        bitField0_ |= 0x00004000;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * When set, it periodically issues a Flush() to all data source, forcing them
       * to commit their data into the tracing service. This can be used for
       * quasi-real-time streaming mode and to guarantee some partial ordering of
       * events in the trace in windows of X ms.
       * </pre>
       *
       * <code>optional uint32 flush_period_ms = 13;</code>
       * @return This builder for chaining.
       */
      public Builder clearFlushPeriodMs() {
        bitField0_ = (bitField0_ & ~0x00004000);
        flushPeriodMs_ = 0;
        onChanged();
        return this;
      }

      private int flushTimeoutMs_ ;
      /**
       * <pre>
       * Wait for this long for producers to acknowledge flush requests.
       * Default 5s.
       * </pre>
       *
       * <code>optional uint32 flush_timeout_ms = 14;</code>
       * @return Whether the flushTimeoutMs field is set.
       */
      @java.lang.Override
      public boolean hasFlushTimeoutMs() {
        return ((bitField0_ & 0x00008000) != 0);
      }
      /**
       * <pre>
       * Wait for this long for producers to acknowledge flush requests.
       * Default 5s.
       * </pre>
       *
       * <code>optional uint32 flush_timeout_ms = 14;</code>
       * @return The flushTimeoutMs.
       */
      @java.lang.Override
      public int getFlushTimeoutMs() {
        return flushTimeoutMs_;
      }
      /**
       * <pre>
       * Wait for this long for producers to acknowledge flush requests.
       * Default 5s.
       * </pre>
       *
       * <code>optional uint32 flush_timeout_ms = 14;</code>
       * @param value The flushTimeoutMs to set.
       * @return This builder for chaining.
       */
      public Builder setFlushTimeoutMs(int value) {
        
        flushTimeoutMs_ = value;
        bitField0_ |= 0x00008000;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Wait for this long for producers to acknowledge flush requests.
       * Default 5s.
       * </pre>
       *
       * <code>optional uint32 flush_timeout_ms = 14;</code>
       * @return This builder for chaining.
       */
      public Builder clearFlushTimeoutMs() {
        bitField0_ = (bitField0_ & ~0x00008000);
        flushTimeoutMs_ = 0;
        onChanged();
        return this;
      }

      private int dataSourceStopTimeoutMs_ ;
      /**
       * <pre>
       * Wait for this long for producers to acknowledge stop requests.
       * Default 5s.
       * </pre>
       *
       * <code>optional uint32 data_source_stop_timeout_ms = 23;</code>
       * @return Whether the dataSourceStopTimeoutMs field is set.
       */
      @java.lang.Override
      public boolean hasDataSourceStopTimeoutMs() {
        return ((bitField0_ & 0x00010000) != 0);
      }
      /**
       * <pre>
       * Wait for this long for producers to acknowledge stop requests.
       * Default 5s.
       * </pre>
       *
       * <code>optional uint32 data_source_stop_timeout_ms = 23;</code>
       * @return The dataSourceStopTimeoutMs.
       */
      @java.lang.Override
      public int getDataSourceStopTimeoutMs() {
        return dataSourceStopTimeoutMs_;
      }
      /**
       * <pre>
       * Wait for this long for producers to acknowledge stop requests.
       * Default 5s.
       * </pre>
       *
       * <code>optional uint32 data_source_stop_timeout_ms = 23;</code>
       * @param value The dataSourceStopTimeoutMs to set.
       * @return This builder for chaining.
       */
      public Builder setDataSourceStopTimeoutMs(int value) {
        
        dataSourceStopTimeoutMs_ = value;
        bitField0_ |= 0x00010000;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Wait for this long for producers to acknowledge stop requests.
       * Default 5s.
       * </pre>
       *
       * <code>optional uint32 data_source_stop_timeout_ms = 23;</code>
       * @return This builder for chaining.
       */
      public Builder clearDataSourceStopTimeoutMs() {
        bitField0_ = (bitField0_ & ~0x00010000);
        dataSourceStopTimeoutMs_ = 0;
        onChanged();
        return this;
      }

      private boolean notifyTraceur_ ;
      /**
       * <pre>
       * Android-only. If set, sends an intent to the Traceur system app when the
       * trace ends to notify it about the trace readiness.
       * </pre>
       *
       * <code>optional bool notify_traceur = 16;</code>
       * @return Whether the notifyTraceur field is set.
       */
      @java.lang.Override
      public boolean hasNotifyTraceur() {
        return ((bitField0_ & 0x00020000) != 0);
      }
      /**
       * <pre>
       * Android-only. If set, sends an intent to the Traceur system app when the
       * trace ends to notify it about the trace readiness.
       * </pre>
       *
       * <code>optional bool notify_traceur = 16;</code>
       * @return The notifyTraceur.
       */
      @java.lang.Override
      public boolean getNotifyTraceur() {
        return notifyTraceur_;
      }
      /**
       * <pre>
       * Android-only. If set, sends an intent to the Traceur system app when the
       * trace ends to notify it about the trace readiness.
       * </pre>
       *
       * <code>optional bool notify_traceur = 16;</code>
       * @param value The notifyTraceur to set.
       * @return This builder for chaining.
       */
      public Builder setNotifyTraceur(boolean value) {
        
        notifyTraceur_ = value;
        bitField0_ |= 0x00020000;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Android-only. If set, sends an intent to the Traceur system app when the
       * trace ends to notify it about the trace readiness.
       * </pre>
       *
       * <code>optional bool notify_traceur = 16;</code>
       * @return This builder for chaining.
       */
      public Builder clearNotifyTraceur() {
        bitField0_ = (bitField0_ & ~0x00020000);
        notifyTraceur_ = false;
        onChanged();
        return this;
      }

      private int bugreportScore_ ;
      /**
       * <pre>
       * Android-only. If set to a value &gt; 0, marks the trace session as a candidate
       * for being attached to a bugreport. This field effectively acts as a z-index
       * for bugreports. When Android's dumpstate runs perfetto
       * --save-for-bugreport, traced will pick the tracing session with the highest
       * score (score &lt;= 0 is ignored), will steal its contents, save the trace into
       * a known path and stop prematurely.
       * This field was introduced in Android S.
       * </pre>
       *
       * <code>optional int32 bugreport_score = 30;</code>
       * @return Whether the bugreportScore field is set.
       */
      @java.lang.Override
      public boolean hasBugreportScore() {
        return ((bitField0_ & 0x00040000) != 0);
      }
      /**
       * <pre>
       * Android-only. If set to a value &gt; 0, marks the trace session as a candidate
       * for being attached to a bugreport. This field effectively acts as a z-index
       * for bugreports. When Android's dumpstate runs perfetto
       * --save-for-bugreport, traced will pick the tracing session with the highest
       * score (score &lt;= 0 is ignored), will steal its contents, save the trace into
       * a known path and stop prematurely.
       * This field was introduced in Android S.
       * </pre>
       *
       * <code>optional int32 bugreport_score = 30;</code>
       * @return The bugreportScore.
       */
      @java.lang.Override
      public int getBugreportScore() {
        return bugreportScore_;
      }
      /**
       * <pre>
       * Android-only. If set to a value &gt; 0, marks the trace session as a candidate
       * for being attached to a bugreport. This field effectively acts as a z-index
       * for bugreports. When Android's dumpstate runs perfetto
       * --save-for-bugreport, traced will pick the tracing session with the highest
       * score (score &lt;= 0 is ignored), will steal its contents, save the trace into
       * a known path and stop prematurely.
       * This field was introduced in Android S.
       * </pre>
       *
       * <code>optional int32 bugreport_score = 30;</code>
       * @param value The bugreportScore to set.
       * @return This builder for chaining.
       */
      public Builder setBugreportScore(int value) {
        
        bugreportScore_ = value;
        bitField0_ |= 0x00040000;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Android-only. If set to a value &gt; 0, marks the trace session as a candidate
       * for being attached to a bugreport. This field effectively acts as a z-index
       * for bugreports. When Android's dumpstate runs perfetto
       * --save-for-bugreport, traced will pick the tracing session with the highest
       * score (score &lt;= 0 is ignored), will steal its contents, save the trace into
       * a known path and stop prematurely.
       * This field was introduced in Android S.
       * </pre>
       *
       * <code>optional int32 bugreport_score = 30;</code>
       * @return This builder for chaining.
       */
      public Builder clearBugreportScore() {
        bitField0_ = (bitField0_ & ~0x00040000);
        bugreportScore_ = 0;
        onChanged();
        return this;
      }

      private perfetto.protos.TraceConfigOuterClass.TraceConfig.TriggerConfig triggerConfig_;
      private com.google.protobuf.SingleFieldBuilderV3<
          perfetto.protos.TraceConfigOuterClass.TraceConfig.TriggerConfig, perfetto.protos.TraceConfigOuterClass.TraceConfig.TriggerConfig.Builder, perfetto.protos.TraceConfigOuterClass.TraceConfig.TriggerConfigOrBuilder> triggerConfigBuilder_;
      /**
       * <code>optional .perfetto.protos.TraceConfig.TriggerConfig trigger_config = 17;</code>
       * @return Whether the triggerConfig field is set.
       */
      public boolean hasTriggerConfig() {
        return ((bitField0_ & 0x00080000) != 0);
      }
      /**
       * <code>optional .perfetto.protos.TraceConfig.TriggerConfig trigger_config = 17;</code>
       * @return The triggerConfig.
       */
      public perfetto.protos.TraceConfigOuterClass.TraceConfig.TriggerConfig getTriggerConfig() {
        if (triggerConfigBuilder_ == null) {
          return triggerConfig_ == null ? perfetto.protos.TraceConfigOuterClass.TraceConfig.TriggerConfig.getDefaultInstance() : triggerConfig_;
        } else {
          return triggerConfigBuilder_.getMessage();
        }
      }
      /**
       * <code>optional .perfetto.protos.TraceConfig.TriggerConfig trigger_config = 17;</code>
       */
      public Builder setTriggerConfig(perfetto.protos.TraceConfigOuterClass.TraceConfig.TriggerConfig value) {
        if (triggerConfigBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          triggerConfig_ = value;
        } else {
          triggerConfigBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00080000;
        onChanged();
        return this;
      }
      /**
       * <code>optional .perfetto.protos.TraceConfig.TriggerConfig trigger_config = 17;</code>
       */
      public Builder setTriggerConfig(
          perfetto.protos.TraceConfigOuterClass.TraceConfig.TriggerConfig.Builder builderForValue) {
        if (triggerConfigBuilder_ == null) {
          triggerConfig_ = builderForValue.build();
        } else {
          triggerConfigBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00080000;
        onChanged();
        return this;
      }
      /**
       * <code>optional .perfetto.protos.TraceConfig.TriggerConfig trigger_config = 17;</code>
       */
      public Builder mergeTriggerConfig(perfetto.protos.TraceConfigOuterClass.TraceConfig.TriggerConfig value) {
        if (triggerConfigBuilder_ == null) {
          if (((bitField0_ & 0x00080000) != 0) &&
            triggerConfig_ != null &&
            triggerConfig_ != perfetto.protos.TraceConfigOuterClass.TraceConfig.TriggerConfig.getDefaultInstance()) {
            getTriggerConfigBuilder().mergeFrom(value);
          } else {
            triggerConfig_ = value;
          }
        } else {
          triggerConfigBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00080000;
        onChanged();
        return this;
      }
      /**
       * <code>optional .perfetto.protos.TraceConfig.TriggerConfig trigger_config = 17;</code>
       */
      public Builder clearTriggerConfig() {
        bitField0_ = (bitField0_ & ~0x00080000);
        triggerConfig_ = null;
        if (triggerConfigBuilder_ != null) {
          triggerConfigBuilder_.dispose();
          triggerConfigBuilder_ = null;
        }
        onChanged();
        return this;
      }
      /**
       * <code>optional .perfetto.protos.TraceConfig.TriggerConfig trigger_config = 17;</code>
       */
      public perfetto.protos.TraceConfigOuterClass.TraceConfig.TriggerConfig.Builder getTriggerConfigBuilder() {
        bitField0_ |= 0x00080000;
        onChanged();
        return getTriggerConfigFieldBuilder().getBuilder();
      }
      /**
       * <code>optional .perfetto.protos.TraceConfig.TriggerConfig trigger_config = 17;</code>
       */
      public perfetto.protos.TraceConfigOuterClass.TraceConfig.TriggerConfigOrBuilder getTriggerConfigOrBuilder() {
        if (triggerConfigBuilder_ != null) {
          return triggerConfigBuilder_.getMessageOrBuilder();
        } else {
          return triggerConfig_ == null ?
              perfetto.protos.TraceConfigOuterClass.TraceConfig.TriggerConfig.getDefaultInstance() : triggerConfig_;
        }
      }
      /**
       * <code>optional .perfetto.protos.TraceConfig.TriggerConfig trigger_config = 17;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          perfetto.protos.TraceConfigOuterClass.TraceConfig.TriggerConfig, perfetto.protos.TraceConfigOuterClass.TraceConfig.TriggerConfig.Builder, perfetto.protos.TraceConfigOuterClass.TraceConfig.TriggerConfigOrBuilder> 
          getTriggerConfigFieldBuilder() {
        if (triggerConfigBuilder_ == null) {
          triggerConfigBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              perfetto.protos.TraceConfigOuterClass.TraceConfig.TriggerConfig, perfetto.protos.TraceConfigOuterClass.TraceConfig.TriggerConfig.Builder, perfetto.protos.TraceConfigOuterClass.TraceConfig.TriggerConfigOrBuilder>(
                  getTriggerConfig(),
                  getParentForChildren(),
                  isClean());
          triggerConfig_ = null;
        }
        return triggerConfigBuilder_;
      }

      private com.google.protobuf.LazyStringList activateTriggers_ = com.google.protobuf.LazyStringArrayList.EMPTY;
      private void ensureActivateTriggersIsMutable() {
        if (!((bitField0_ & 0x00100000) != 0)) {
          activateTriggers_ = new com.google.protobuf.LazyStringArrayList(activateTriggers_);
          bitField0_ |= 0x00100000;
         }
      }
      /**
       * <pre>
       * When this is non-empty the perfetto command line tool will ignore the rest
       * of this TraceConfig and instead connect to the perfetto service as a
       * producer and send these triggers, potentially stopping or starting traces
       * that were previous configured to use a TriggerConfig.
       * </pre>
       *
       * <code>repeated string activate_triggers = 18;</code>
       * @return A list containing the activateTriggers.
       */
      public com.google.protobuf.ProtocolStringList
          getActivateTriggersList() {
        return activateTriggers_.getUnmodifiableView();
      }
      /**
       * <pre>
       * When this is non-empty the perfetto command line tool will ignore the rest
       * of this TraceConfig and instead connect to the perfetto service as a
       * producer and send these triggers, potentially stopping or starting traces
       * that were previous configured to use a TriggerConfig.
       * </pre>
       *
       * <code>repeated string activate_triggers = 18;</code>
       * @return The count of activateTriggers.
       */
      public int getActivateTriggersCount() {
        return activateTriggers_.size();
      }
      /**
       * <pre>
       * When this is non-empty the perfetto command line tool will ignore the rest
       * of this TraceConfig and instead connect to the perfetto service as a
       * producer and send these triggers, potentially stopping or starting traces
       * that were previous configured to use a TriggerConfig.
       * </pre>
       *
       * <code>repeated string activate_triggers = 18;</code>
       * @param index The index of the element to return.
       * @return The activateTriggers at the given index.
       */
      public java.lang.String getActivateTriggers(int index) {
        return activateTriggers_.get(index);
      }
      /**
       * <pre>
       * When this is non-empty the perfetto command line tool will ignore the rest
       * of this TraceConfig and instead connect to the perfetto service as a
       * producer and send these triggers, potentially stopping or starting traces
       * that were previous configured to use a TriggerConfig.
       * </pre>
       *
       * <code>repeated string activate_triggers = 18;</code>
       * @param index The index of the value to return.
       * @return The bytes of the activateTriggers at the given index.
       */
      public com.google.protobuf.ByteString
          getActivateTriggersBytes(int index) {
        return activateTriggers_.getByteString(index);
      }
      /**
       * <pre>
       * When this is non-empty the perfetto command line tool will ignore the rest
       * of this TraceConfig and instead connect to the perfetto service as a
       * producer and send these triggers, potentially stopping or starting traces
       * that were previous configured to use a TriggerConfig.
       * </pre>
       *
       * <code>repeated string activate_triggers = 18;</code>
       * @param index The index to set the value at.
       * @param value The activateTriggers to set.
       * @return This builder for chaining.
       */
      public Builder setActivateTriggers(
          int index, java.lang.String value) {
        if (value == null) { throw new NullPointerException(); }
        ensureActivateTriggersIsMutable();
        activateTriggers_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <pre>
       * When this is non-empty the perfetto command line tool will ignore the rest
       * of this TraceConfig and instead connect to the perfetto service as a
       * producer and send these triggers, potentially stopping or starting traces
       * that were previous configured to use a TriggerConfig.
       * </pre>
       *
       * <code>repeated string activate_triggers = 18;</code>
       * @param value The activateTriggers to add.
       * @return This builder for chaining.
       */
      public Builder addActivateTriggers(
          java.lang.String value) {
        if (value == null) { throw new NullPointerException(); }
        ensureActivateTriggersIsMutable();
        activateTriggers_.add(value);
        onChanged();
        return this;
      }
      /**
       * <pre>
       * When this is non-empty the perfetto command line tool will ignore the rest
       * of this TraceConfig and instead connect to the perfetto service as a
       * producer and send these triggers, potentially stopping or starting traces
       * that were previous configured to use a TriggerConfig.
       * </pre>
       *
       * <code>repeated string activate_triggers = 18;</code>
       * @param values The activateTriggers to add.
       * @return This builder for chaining.
       */
      public Builder addAllActivateTriggers(
          java.lang.Iterable<java.lang.String> values) {
        ensureActivateTriggersIsMutable();
        com.google.protobuf.AbstractMessageLite.Builder.addAll(
            values, activateTriggers_);
        onChanged();
        return this;
      }
      /**
       * <pre>
       * When this is non-empty the perfetto command line tool will ignore the rest
       * of this TraceConfig and instead connect to the perfetto service as a
       * producer and send these triggers, potentially stopping or starting traces
       * that were previous configured to use a TriggerConfig.
       * </pre>
       *
       * <code>repeated string activate_triggers = 18;</code>
       * @return This builder for chaining.
       */
      public Builder clearActivateTriggers() {
        activateTriggers_ = com.google.protobuf.LazyStringArrayList.EMPTY;
        bitField0_ = (bitField0_ & ~0x00100000);
        onChanged();
        return this;
      }
      /**
       * <pre>
       * When this is non-empty the perfetto command line tool will ignore the rest
       * of this TraceConfig and instead connect to the perfetto service as a
       * producer and send these triggers, potentially stopping or starting traces
       * that were previous configured to use a TriggerConfig.
       * </pre>
       *
       * <code>repeated string activate_triggers = 18;</code>
       * @param value The bytes of the activateTriggers to add.
       * @return This builder for chaining.
       */
      public Builder addActivateTriggersBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) { throw new NullPointerException(); }
        ensureActivateTriggersIsMutable();
        activateTriggers_.add(value);
        onChanged();
        return this;
      }

      private perfetto.protos.TraceConfigOuterClass.TraceConfig.IncrementalStateConfig incrementalStateConfig_;
      private com.google.protobuf.SingleFieldBuilderV3<
          perfetto.protos.TraceConfigOuterClass.TraceConfig.IncrementalStateConfig, perfetto.protos.TraceConfigOuterClass.TraceConfig.IncrementalStateConfig.Builder, perfetto.protos.TraceConfigOuterClass.TraceConfig.IncrementalStateConfigOrBuilder> incrementalStateConfigBuilder_;
      /**
       * <code>optional .perfetto.protos.TraceConfig.IncrementalStateConfig incremental_state_config = 21;</code>
       * @return Whether the incrementalStateConfig field is set.
       */
      public boolean hasIncrementalStateConfig() {
        return ((bitField0_ & 0x00200000) != 0);
      }
      /**
       * <code>optional .perfetto.protos.TraceConfig.IncrementalStateConfig incremental_state_config = 21;</code>
       * @return The incrementalStateConfig.
       */
      public perfetto.protos.TraceConfigOuterClass.TraceConfig.IncrementalStateConfig getIncrementalStateConfig() {
        if (incrementalStateConfigBuilder_ == null) {
          return incrementalStateConfig_ == null ? perfetto.protos.TraceConfigOuterClass.TraceConfig.IncrementalStateConfig.getDefaultInstance() : incrementalStateConfig_;
        } else {
          return incrementalStateConfigBuilder_.getMessage();
        }
      }
      /**
       * <code>optional .perfetto.protos.TraceConfig.IncrementalStateConfig incremental_state_config = 21;</code>
       */
      public Builder setIncrementalStateConfig(perfetto.protos.TraceConfigOuterClass.TraceConfig.IncrementalStateConfig value) {
        if (incrementalStateConfigBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          incrementalStateConfig_ = value;
        } else {
          incrementalStateConfigBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00200000;
        onChanged();
        return this;
      }
      /**
       * <code>optional .perfetto.protos.TraceConfig.IncrementalStateConfig incremental_state_config = 21;</code>
       */
      public Builder setIncrementalStateConfig(
          perfetto.protos.TraceConfigOuterClass.TraceConfig.IncrementalStateConfig.Builder builderForValue) {
        if (incrementalStateConfigBuilder_ == null) {
          incrementalStateConfig_ = builderForValue.build();
        } else {
          incrementalStateConfigBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00200000;
        onChanged();
        return this;
      }
      /**
       * <code>optional .perfetto.protos.TraceConfig.IncrementalStateConfig incremental_state_config = 21;</code>
       */
      public Builder mergeIncrementalStateConfig(perfetto.protos.TraceConfigOuterClass.TraceConfig.IncrementalStateConfig value) {
        if (incrementalStateConfigBuilder_ == null) {
          if (((bitField0_ & 0x00200000) != 0) &&
            incrementalStateConfig_ != null &&
            incrementalStateConfig_ != perfetto.protos.TraceConfigOuterClass.TraceConfig.IncrementalStateConfig.getDefaultInstance()) {
            getIncrementalStateConfigBuilder().mergeFrom(value);
          } else {
            incrementalStateConfig_ = value;
          }
        } else {
          incrementalStateConfigBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00200000;
        onChanged();
        return this;
      }
      /**
       * <code>optional .perfetto.protos.TraceConfig.IncrementalStateConfig incremental_state_config = 21;</code>
       */
      public Builder clearIncrementalStateConfig() {
        bitField0_ = (bitField0_ & ~0x00200000);
        incrementalStateConfig_ = null;
        if (incrementalStateConfigBuilder_ != null) {
          incrementalStateConfigBuilder_.dispose();
          incrementalStateConfigBuilder_ = null;
        }
        onChanged();
        return this;
      }
      /**
       * <code>optional .perfetto.protos.TraceConfig.IncrementalStateConfig incremental_state_config = 21;</code>
       */
      public perfetto.protos.TraceConfigOuterClass.TraceConfig.IncrementalStateConfig.Builder getIncrementalStateConfigBuilder() {
        bitField0_ |= 0x00200000;
        onChanged();
        return getIncrementalStateConfigFieldBuilder().getBuilder();
      }
      /**
       * <code>optional .perfetto.protos.TraceConfig.IncrementalStateConfig incremental_state_config = 21;</code>
       */
      public perfetto.protos.TraceConfigOuterClass.TraceConfig.IncrementalStateConfigOrBuilder getIncrementalStateConfigOrBuilder() {
        if (incrementalStateConfigBuilder_ != null) {
          return incrementalStateConfigBuilder_.getMessageOrBuilder();
        } else {
          return incrementalStateConfig_ == null ?
              perfetto.protos.TraceConfigOuterClass.TraceConfig.IncrementalStateConfig.getDefaultInstance() : incrementalStateConfig_;
        }
      }
      /**
       * <code>optional .perfetto.protos.TraceConfig.IncrementalStateConfig incremental_state_config = 21;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          perfetto.protos.TraceConfigOuterClass.TraceConfig.IncrementalStateConfig, perfetto.protos.TraceConfigOuterClass.TraceConfig.IncrementalStateConfig.Builder, perfetto.protos.TraceConfigOuterClass.TraceConfig.IncrementalStateConfigOrBuilder> 
          getIncrementalStateConfigFieldBuilder() {
        if (incrementalStateConfigBuilder_ == null) {
          incrementalStateConfigBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              perfetto.protos.TraceConfigOuterClass.TraceConfig.IncrementalStateConfig, perfetto.protos.TraceConfigOuterClass.TraceConfig.IncrementalStateConfig.Builder, perfetto.protos.TraceConfigOuterClass.TraceConfig.IncrementalStateConfigOrBuilder>(
                  getIncrementalStateConfig(),
                  getParentForChildren(),
                  isClean());
          incrementalStateConfig_ = null;
        }
        return incrementalStateConfigBuilder_;
      }

      private boolean allowUserBuildTracing_ ;
      /**
       * <pre>
       * Additional guardrail used by the Perfetto command line client.
       * On user builds when --dropbox is set perfetto will refuse to trace unless
       * this is also set.
       * Added in Q.
       * </pre>
       *
       * <code>optional bool allow_user_build_tracing = 19;</code>
       * @return Whether the allowUserBuildTracing field is set.
       */
      @java.lang.Override
      public boolean hasAllowUserBuildTracing() {
        return ((bitField0_ & 0x00400000) != 0);
      }
      /**
       * <pre>
       * Additional guardrail used by the Perfetto command line client.
       * On user builds when --dropbox is set perfetto will refuse to trace unless
       * this is also set.
       * Added in Q.
       * </pre>
       *
       * <code>optional bool allow_user_build_tracing = 19;</code>
       * @return The allowUserBuildTracing.
       */
      @java.lang.Override
      public boolean getAllowUserBuildTracing() {
        return allowUserBuildTracing_;
      }
      /**
       * <pre>
       * Additional guardrail used by the Perfetto command line client.
       * On user builds when --dropbox is set perfetto will refuse to trace unless
       * this is also set.
       * Added in Q.
       * </pre>
       *
       * <code>optional bool allow_user_build_tracing = 19;</code>
       * @param value The allowUserBuildTracing to set.
       * @return This builder for chaining.
       */
      public Builder setAllowUserBuildTracing(boolean value) {
        
        allowUserBuildTracing_ = value;
        bitField0_ |= 0x00400000;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Additional guardrail used by the Perfetto command line client.
       * On user builds when --dropbox is set perfetto will refuse to trace unless
       * this is also set.
       * Added in Q.
       * </pre>
       *
       * <code>optional bool allow_user_build_tracing = 19;</code>
       * @return This builder for chaining.
       */
      public Builder clearAllowUserBuildTracing() {
        bitField0_ = (bitField0_ & ~0x00400000);
        allowUserBuildTracing_ = false;
        onChanged();
        return this;
      }

      private java.lang.Object uniqueSessionName_ = "";
      /**
       * <pre>
       * If set the tracing service will ensure there is at most one tracing session
       * with this key.
       * </pre>
       *
       * <code>optional string unique_session_name = 22;</code>
       * @return Whether the uniqueSessionName field is set.
       */
      public boolean hasUniqueSessionName() {
        return ((bitField0_ & 0x00800000) != 0);
      }
      /**
       * <pre>
       * If set the tracing service will ensure there is at most one tracing session
       * with this key.
       * </pre>
       *
       * <code>optional string unique_session_name = 22;</code>
       * @return The uniqueSessionName.
       */
      public java.lang.String getUniqueSessionName() {
        java.lang.Object ref = uniqueSessionName_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          if (bs.isValidUtf8()) {
            uniqueSessionName_ = s;
          }
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <pre>
       * If set the tracing service will ensure there is at most one tracing session
       * with this key.
       * </pre>
       *
       * <code>optional string unique_session_name = 22;</code>
       * @return The bytes for uniqueSessionName.
       */
      public com.google.protobuf.ByteString
          getUniqueSessionNameBytes() {
        java.lang.Object ref = uniqueSessionName_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          uniqueSessionName_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <pre>
       * If set the tracing service will ensure there is at most one tracing session
       * with this key.
       * </pre>
       *
       * <code>optional string unique_session_name = 22;</code>
       * @param value The uniqueSessionName to set.
       * @return This builder for chaining.
       */
      public Builder setUniqueSessionName(
          java.lang.String value) {
        if (value == null) { throw new NullPointerException(); }
        uniqueSessionName_ = value;
        bitField0_ |= 0x00800000;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * If set the tracing service will ensure there is at most one tracing session
       * with this key.
       * </pre>
       *
       * <code>optional string unique_session_name = 22;</code>
       * @return This builder for chaining.
       */
      public Builder clearUniqueSessionName() {
        uniqueSessionName_ = getDefaultInstance().getUniqueSessionName();
        bitField0_ = (bitField0_ & ~0x00800000);
        onChanged();
        return this;
      }
      /**
       * <pre>
       * If set the tracing service will ensure there is at most one tracing session
       * with this key.
       * </pre>
       *
       * <code>optional string unique_session_name = 22;</code>
       * @param value The bytes for uniqueSessionName to set.
       * @return This builder for chaining.
       */
      public Builder setUniqueSessionNameBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) { throw new NullPointerException(); }
        uniqueSessionName_ = value;
        bitField0_ |= 0x00800000;
        onChanged();
        return this;
      }

      private int compressionType_ = 0;
      /**
       * <code>optional .perfetto.protos.TraceConfig.CompressionType compression_type = 24;</code>
       * @return Whether the compressionType field is set.
       */
      @java.lang.Override public boolean hasCompressionType() {
        return ((bitField0_ & 0x01000000) != 0);
      }
      /**
       * <code>optional .perfetto.protos.TraceConfig.CompressionType compression_type = 24;</code>
       * @return The compressionType.
       */
      @java.lang.Override
      public perfetto.protos.TraceConfigOuterClass.TraceConfig.CompressionType getCompressionType() {
        perfetto.protos.TraceConfigOuterClass.TraceConfig.CompressionType result = perfetto.protos.TraceConfigOuterClass.TraceConfig.CompressionType.forNumber(compressionType_);
        return result == null ? perfetto.protos.TraceConfigOuterClass.TraceConfig.CompressionType.COMPRESSION_TYPE_UNSPECIFIED : result;
      }
      /**
       * <code>optional .perfetto.protos.TraceConfig.CompressionType compression_type = 24;</code>
       * @param value The compressionType to set.
       * @return This builder for chaining.
       */
      public Builder setCompressionType(perfetto.protos.TraceConfigOuterClass.TraceConfig.CompressionType value) {
        if (value == null) {
          throw new NullPointerException();
        }
        bitField0_ |= 0x01000000;
        compressionType_ = value.getNumber();
        onChanged();
        return this;
      }
      /**
       * <code>optional .perfetto.protos.TraceConfig.CompressionType compression_type = 24;</code>
       * @return This builder for chaining.
       */
      public Builder clearCompressionType() {
        bitField0_ = (bitField0_ & ~0x01000000);
        compressionType_ = 0;
        onChanged();
        return this;
      }

      private perfetto.protos.TraceConfigOuterClass.TraceConfig.IncidentReportConfig incidentReportConfig_;
      private com.google.protobuf.SingleFieldBuilderV3<
          perfetto.protos.TraceConfigOuterClass.TraceConfig.IncidentReportConfig, perfetto.protos.TraceConfigOuterClass.TraceConfig.IncidentReportConfig.Builder, perfetto.protos.TraceConfigOuterClass.TraceConfig.IncidentReportConfigOrBuilder> incidentReportConfigBuilder_;
      /**
       * <code>optional .perfetto.protos.TraceConfig.IncidentReportConfig incident_report_config = 25;</code>
       * @return Whether the incidentReportConfig field is set.
       */
      public boolean hasIncidentReportConfig() {
        return ((bitField0_ & 0x02000000) != 0);
      }
      /**
       * <code>optional .perfetto.protos.TraceConfig.IncidentReportConfig incident_report_config = 25;</code>
       * @return The incidentReportConfig.
       */
      public perfetto.protos.TraceConfigOuterClass.TraceConfig.IncidentReportConfig getIncidentReportConfig() {
        if (incidentReportConfigBuilder_ == null) {
          return incidentReportConfig_ == null ? perfetto.protos.TraceConfigOuterClass.TraceConfig.IncidentReportConfig.getDefaultInstance() : incidentReportConfig_;
        } else {
          return incidentReportConfigBuilder_.getMessage();
        }
      }
      /**
       * <code>optional .perfetto.protos.TraceConfig.IncidentReportConfig incident_report_config = 25;</code>
       */
      public Builder setIncidentReportConfig(perfetto.protos.TraceConfigOuterClass.TraceConfig.IncidentReportConfig value) {
        if (incidentReportConfigBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          incidentReportConfig_ = value;
        } else {
          incidentReportConfigBuilder_.setMessage(value);
        }
        bitField0_ |= 0x02000000;
        onChanged();
        return this;
      }
      /**
       * <code>optional .perfetto.protos.TraceConfig.IncidentReportConfig incident_report_config = 25;</code>
       */
      public Builder setIncidentReportConfig(
          perfetto.protos.TraceConfigOuterClass.TraceConfig.IncidentReportConfig.Builder builderForValue) {
        if (incidentReportConfigBuilder_ == null) {
          incidentReportConfig_ = builderForValue.build();
        } else {
          incidentReportConfigBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x02000000;
        onChanged();
        return this;
      }
      /**
       * <code>optional .perfetto.protos.TraceConfig.IncidentReportConfig incident_report_config = 25;</code>
       */
      public Builder mergeIncidentReportConfig(perfetto.protos.TraceConfigOuterClass.TraceConfig.IncidentReportConfig value) {
        if (incidentReportConfigBuilder_ == null) {
          if (((bitField0_ & 0x02000000) != 0) &&
            incidentReportConfig_ != null &&
            incidentReportConfig_ != perfetto.protos.TraceConfigOuterClass.TraceConfig.IncidentReportConfig.getDefaultInstance()) {
            getIncidentReportConfigBuilder().mergeFrom(value);
          } else {
            incidentReportConfig_ = value;
          }
        } else {
          incidentReportConfigBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x02000000;
        onChanged();
        return this;
      }
      /**
       * <code>optional .perfetto.protos.TraceConfig.IncidentReportConfig incident_report_config = 25;</code>
       */
      public Builder clearIncidentReportConfig() {
        bitField0_ = (bitField0_ & ~0x02000000);
        incidentReportConfig_ = null;
        if (incidentReportConfigBuilder_ != null) {
          incidentReportConfigBuilder_.dispose();
          incidentReportConfigBuilder_ = null;
        }
        onChanged();
        return this;
      }
      /**
       * <code>optional .perfetto.protos.TraceConfig.IncidentReportConfig incident_report_config = 25;</code>
       */
      public perfetto.protos.TraceConfigOuterClass.TraceConfig.IncidentReportConfig.Builder getIncidentReportConfigBuilder() {
        bitField0_ |= 0x02000000;
        onChanged();
        return getIncidentReportConfigFieldBuilder().getBuilder();
      }
      /**
       * <code>optional .perfetto.protos.TraceConfig.IncidentReportConfig incident_report_config = 25;</code>
       */
      public perfetto.protos.TraceConfigOuterClass.TraceConfig.IncidentReportConfigOrBuilder getIncidentReportConfigOrBuilder() {
        if (incidentReportConfigBuilder_ != null) {
          return incidentReportConfigBuilder_.getMessageOrBuilder();
        } else {
          return incidentReportConfig_ == null ?
              perfetto.protos.TraceConfigOuterClass.TraceConfig.IncidentReportConfig.getDefaultInstance() : incidentReportConfig_;
        }
      }
      /**
       * <code>optional .perfetto.protos.TraceConfig.IncidentReportConfig incident_report_config = 25;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          perfetto.protos.TraceConfigOuterClass.TraceConfig.IncidentReportConfig, perfetto.protos.TraceConfigOuterClass.TraceConfig.IncidentReportConfig.Builder, perfetto.protos.TraceConfigOuterClass.TraceConfig.IncidentReportConfigOrBuilder> 
          getIncidentReportConfigFieldBuilder() {
        if (incidentReportConfigBuilder_ == null) {
          incidentReportConfigBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              perfetto.protos.TraceConfigOuterClass.TraceConfig.IncidentReportConfig, perfetto.protos.TraceConfigOuterClass.TraceConfig.IncidentReportConfig.Builder, perfetto.protos.TraceConfigOuterClass.TraceConfig.IncidentReportConfigOrBuilder>(
                  getIncidentReportConfig(),
                  getParentForChildren(),
                  isClean());
          incidentReportConfig_ = null;
        }
        return incidentReportConfigBuilder_;
      }

      private int statsdLogging_ = 0;
      /**
       * <pre>
       * Android-only. Not for general use. If specified, sets the logging to statsd
       * of guardrails and checkpoints in the tracing service. perfetto_cmd sets
       * this to enabled (if not explicitly set in the config) when specifying
       * --upload.
       * </pre>
       *
       * <code>optional .perfetto.protos.TraceConfig.StatsdLogging statsd_logging = 31;</code>
       * @return Whether the statsdLogging field is set.
       */
      @java.lang.Override public boolean hasStatsdLogging() {
        return ((bitField0_ & 0x04000000) != 0);
      }
      /**
       * <pre>
       * Android-only. Not for general use. If specified, sets the logging to statsd
       * of guardrails and checkpoints in the tracing service. perfetto_cmd sets
       * this to enabled (if not explicitly set in the config) when specifying
       * --upload.
       * </pre>
       *
       * <code>optional .perfetto.protos.TraceConfig.StatsdLogging statsd_logging = 31;</code>
       * @return The statsdLogging.
       */
      @java.lang.Override
      public perfetto.protos.TraceConfigOuterClass.TraceConfig.StatsdLogging getStatsdLogging() {
        perfetto.protos.TraceConfigOuterClass.TraceConfig.StatsdLogging result = perfetto.protos.TraceConfigOuterClass.TraceConfig.StatsdLogging.forNumber(statsdLogging_);
        return result == null ? perfetto.protos.TraceConfigOuterClass.TraceConfig.StatsdLogging.STATSD_LOGGING_UNSPECIFIED : result;
      }
      /**
       * <pre>
       * Android-only. Not for general use. If specified, sets the logging to statsd
       * of guardrails and checkpoints in the tracing service. perfetto_cmd sets
       * this to enabled (if not explicitly set in the config) when specifying
       * --upload.
       * </pre>
       *
       * <code>optional .perfetto.protos.TraceConfig.StatsdLogging statsd_logging = 31;</code>
       * @param value The statsdLogging to set.
       * @return This builder for chaining.
       */
      public Builder setStatsdLogging(perfetto.protos.TraceConfigOuterClass.TraceConfig.StatsdLogging value) {
        if (value == null) {
          throw new NullPointerException();
        }
        bitField0_ |= 0x04000000;
        statsdLogging_ = value.getNumber();
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Android-only. Not for general use. If specified, sets the logging to statsd
       * of guardrails and checkpoints in the tracing service. perfetto_cmd sets
       * this to enabled (if not explicitly set in the config) when specifying
       * --upload.
       * </pre>
       *
       * <code>optional .perfetto.protos.TraceConfig.StatsdLogging statsd_logging = 31;</code>
       * @return This builder for chaining.
       */
      public Builder clearStatsdLogging() {
        bitField0_ = (bitField0_ & ~0x04000000);
        statsdLogging_ = 0;
        onChanged();
        return this;
      }

      private long traceUuidMsb_ ;
      /**
       * <pre>
       * An identifier clients can use to tie this trace to other logging.
       * DEPRECATED as per v32. See TracePacket.trace_uuid for the authoritative
       * Trace UUID. If this field is set, the tracing service will respect the
       * requested UUID (i.e. TracePacket.trace_uuid == this field) but only if
       * gap-less snapshotting is not used.
       * </pre>
       *
       * <code>optional int64 trace_uuid_msb = 27 [deprecated = true];</code>
       * @deprecated perfetto.protos.TraceConfig.trace_uuid_msb is deprecated.
       *     See protos/perfetto/config/trace_config.proto;l=429
       * @return Whether the traceUuidMsb field is set.
       */
      @java.lang.Override
      @java.lang.Deprecated public boolean hasTraceUuidMsb() {
        return ((bitField0_ & 0x08000000) != 0);
      }
      /**
       * <pre>
       * An identifier clients can use to tie this trace to other logging.
       * DEPRECATED as per v32. See TracePacket.trace_uuid for the authoritative
       * Trace UUID. If this field is set, the tracing service will respect the
       * requested UUID (i.e. TracePacket.trace_uuid == this field) but only if
       * gap-less snapshotting is not used.
       * </pre>
       *
       * <code>optional int64 trace_uuid_msb = 27 [deprecated = true];</code>
       * @deprecated perfetto.protos.TraceConfig.trace_uuid_msb is deprecated.
       *     See protos/perfetto/config/trace_config.proto;l=429
       * @return The traceUuidMsb.
       */
      @java.lang.Override
      @java.lang.Deprecated public long getTraceUuidMsb() {
        return traceUuidMsb_;
      }
      /**
       * <pre>
       * An identifier clients can use to tie this trace to other logging.
       * DEPRECATED as per v32. See TracePacket.trace_uuid for the authoritative
       * Trace UUID. If this field is set, the tracing service will respect the
       * requested UUID (i.e. TracePacket.trace_uuid == this field) but only if
       * gap-less snapshotting is not used.
       * </pre>
       *
       * <code>optional int64 trace_uuid_msb = 27 [deprecated = true];</code>
       * @deprecated perfetto.protos.TraceConfig.trace_uuid_msb is deprecated.
       *     See protos/perfetto/config/trace_config.proto;l=429
       * @param value The traceUuidMsb to set.
       * @return This builder for chaining.
       */
      @java.lang.Deprecated public Builder setTraceUuidMsb(long value) {
        
        traceUuidMsb_ = value;
        bitField0_ |= 0x08000000;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * An identifier clients can use to tie this trace to other logging.
       * DEPRECATED as per v32. See TracePacket.trace_uuid for the authoritative
       * Trace UUID. If this field is set, the tracing service will respect the
       * requested UUID (i.e. TracePacket.trace_uuid == this field) but only if
       * gap-less snapshotting is not used.
       * </pre>
       *
       * <code>optional int64 trace_uuid_msb = 27 [deprecated = true];</code>
       * @deprecated perfetto.protos.TraceConfig.trace_uuid_msb is deprecated.
       *     See protos/perfetto/config/trace_config.proto;l=429
       * @return This builder for chaining.
       */
      @java.lang.Deprecated public Builder clearTraceUuidMsb() {
        bitField0_ = (bitField0_ & ~0x08000000);
        traceUuidMsb_ = 0L;
        onChanged();
        return this;
      }

      private long traceUuidLsb_ ;
      /**
       * <code>optional int64 trace_uuid_lsb = 28 [deprecated = true];</code>
       * @deprecated perfetto.protos.TraceConfig.trace_uuid_lsb is deprecated.
       *     See protos/perfetto/config/trace_config.proto;l=430
       * @return Whether the traceUuidLsb field is set.
       */
      @java.lang.Override
      @java.lang.Deprecated public boolean hasTraceUuidLsb() {
        return ((bitField0_ & 0x10000000) != 0);
      }
      /**
       * <code>optional int64 trace_uuid_lsb = 28 [deprecated = true];</code>
       * @deprecated perfetto.protos.TraceConfig.trace_uuid_lsb is deprecated.
       *     See protos/perfetto/config/trace_config.proto;l=430
       * @return The traceUuidLsb.
       */
      @java.lang.Override
      @java.lang.Deprecated public long getTraceUuidLsb() {
        return traceUuidLsb_;
      }
      /**
       * <code>optional int64 trace_uuid_lsb = 28 [deprecated = true];</code>
       * @deprecated perfetto.protos.TraceConfig.trace_uuid_lsb is deprecated.
       *     See protos/perfetto/config/trace_config.proto;l=430
       * @param value The traceUuidLsb to set.
       * @return This builder for chaining.
       */
      @java.lang.Deprecated public Builder setTraceUuidLsb(long value) {
        
        traceUuidLsb_ = value;
        bitField0_ |= 0x10000000;
        onChanged();
        return this;
      }
      /**
       * <code>optional int64 trace_uuid_lsb = 28 [deprecated = true];</code>
       * @deprecated perfetto.protos.TraceConfig.trace_uuid_lsb is deprecated.
       *     See protos/perfetto/config/trace_config.proto;l=430
       * @return This builder for chaining.
       */
      @java.lang.Deprecated public Builder clearTraceUuidLsb() {
        bitField0_ = (bitField0_ & ~0x10000000);
        traceUuidLsb_ = 0L;
        onChanged();
        return this;
      }

      private perfetto.protos.TraceConfigOuterClass.TraceConfig.TraceFilter traceFilter_;
      private com.google.protobuf.SingleFieldBuilderV3<
          perfetto.protos.TraceConfigOuterClass.TraceConfig.TraceFilter, perfetto.protos.TraceConfigOuterClass.TraceConfig.TraceFilter.Builder, perfetto.protos.TraceConfigOuterClass.TraceConfig.TraceFilterOrBuilder> traceFilterBuilder_;
      /**
       * <code>optional .perfetto.protos.TraceConfig.TraceFilter trace_filter = 33;</code>
       * @return Whether the traceFilter field is set.
       */
      public boolean hasTraceFilter() {
        return ((bitField0_ & 0x20000000) != 0);
      }
      /**
       * <code>optional .perfetto.protos.TraceConfig.TraceFilter trace_filter = 33;</code>
       * @return The traceFilter.
       */
      public perfetto.protos.TraceConfigOuterClass.TraceConfig.TraceFilter getTraceFilter() {
        if (traceFilterBuilder_ == null) {
          return traceFilter_ == null ? perfetto.protos.TraceConfigOuterClass.TraceConfig.TraceFilter.getDefaultInstance() : traceFilter_;
        } else {
          return traceFilterBuilder_.getMessage();
        }
      }
      /**
       * <code>optional .perfetto.protos.TraceConfig.TraceFilter trace_filter = 33;</code>
       */
      public Builder setTraceFilter(perfetto.protos.TraceConfigOuterClass.TraceConfig.TraceFilter value) {
        if (traceFilterBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          traceFilter_ = value;
        } else {
          traceFilterBuilder_.setMessage(value);
        }
        bitField0_ |= 0x20000000;
        onChanged();
        return this;
      }
      /**
       * <code>optional .perfetto.protos.TraceConfig.TraceFilter trace_filter = 33;</code>
       */
      public Builder setTraceFilter(
          perfetto.protos.TraceConfigOuterClass.TraceConfig.TraceFilter.Builder builderForValue) {
        if (traceFilterBuilder_ == null) {
          traceFilter_ = builderForValue.build();
        } else {
          traceFilterBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x20000000;
        onChanged();
        return this;
      }
      /**
       * <code>optional .perfetto.protos.TraceConfig.TraceFilter trace_filter = 33;</code>
       */
      public Builder mergeTraceFilter(perfetto.protos.TraceConfigOuterClass.TraceConfig.TraceFilter value) {
        if (traceFilterBuilder_ == null) {
          if (((bitField0_ & 0x20000000) != 0) &&
            traceFilter_ != null &&
            traceFilter_ != perfetto.protos.TraceConfigOuterClass.TraceConfig.TraceFilter.getDefaultInstance()) {
            getTraceFilterBuilder().mergeFrom(value);
          } else {
            traceFilter_ = value;
          }
        } else {
          traceFilterBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x20000000;
        onChanged();
        return this;
      }
      /**
       * <code>optional .perfetto.protos.TraceConfig.TraceFilter trace_filter = 33;</code>
       */
      public Builder clearTraceFilter() {
        bitField0_ = (bitField0_ & ~0x20000000);
        traceFilter_ = null;
        if (traceFilterBuilder_ != null) {
          traceFilterBuilder_.dispose();
          traceFilterBuilder_ = null;
        }
        onChanged();
        return this;
      }
      /**
       * <code>optional .perfetto.protos.TraceConfig.TraceFilter trace_filter = 33;</code>
       */
      public perfetto.protos.TraceConfigOuterClass.TraceConfig.TraceFilter.Builder getTraceFilterBuilder() {
        bitField0_ |= 0x20000000;
        onChanged();
        return getTraceFilterFieldBuilder().getBuilder();
      }
      /**
       * <code>optional .perfetto.protos.TraceConfig.TraceFilter trace_filter = 33;</code>
       */
      public perfetto.protos.TraceConfigOuterClass.TraceConfig.TraceFilterOrBuilder getTraceFilterOrBuilder() {
        if (traceFilterBuilder_ != null) {
          return traceFilterBuilder_.getMessageOrBuilder();
        } else {
          return traceFilter_ == null ?
              perfetto.protos.TraceConfigOuterClass.TraceConfig.TraceFilter.getDefaultInstance() : traceFilter_;
        }
      }
      /**
       * <code>optional .perfetto.protos.TraceConfig.TraceFilter trace_filter = 33;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          perfetto.protos.TraceConfigOuterClass.TraceConfig.TraceFilter, perfetto.protos.TraceConfigOuterClass.TraceConfig.TraceFilter.Builder, perfetto.protos.TraceConfigOuterClass.TraceConfig.TraceFilterOrBuilder> 
          getTraceFilterFieldBuilder() {
        if (traceFilterBuilder_ == null) {
          traceFilterBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              perfetto.protos.TraceConfigOuterClass.TraceConfig.TraceFilter, perfetto.protos.TraceConfigOuterClass.TraceConfig.TraceFilter.Builder, perfetto.protos.TraceConfigOuterClass.TraceConfig.TraceFilterOrBuilder>(
                  getTraceFilter(),
                  getParentForChildren(),
                  isClean());
          traceFilter_ = null;
        }
        return traceFilterBuilder_;
      }

      private perfetto.protos.TraceConfigOuterClass.TraceConfig.AndroidReportConfig androidReportConfig_;
      private com.google.protobuf.SingleFieldBuilderV3<
          perfetto.protos.TraceConfigOuterClass.TraceConfig.AndroidReportConfig, perfetto.protos.TraceConfigOuterClass.TraceConfig.AndroidReportConfig.Builder, perfetto.protos.TraceConfigOuterClass.TraceConfig.AndroidReportConfigOrBuilder> androidReportConfigBuilder_;
      /**
       * <code>optional .perfetto.protos.TraceConfig.AndroidReportConfig android_report_config = 34;</code>
       * @return Whether the androidReportConfig field is set.
       */
      public boolean hasAndroidReportConfig() {
        return ((bitField0_ & 0x40000000) != 0);
      }
      /**
       * <code>optional .perfetto.protos.TraceConfig.AndroidReportConfig android_report_config = 34;</code>
       * @return The androidReportConfig.
       */
      public perfetto.protos.TraceConfigOuterClass.TraceConfig.AndroidReportConfig getAndroidReportConfig() {
        if (androidReportConfigBuilder_ == null) {
          return androidReportConfig_ == null ? perfetto.protos.TraceConfigOuterClass.TraceConfig.AndroidReportConfig.getDefaultInstance() : androidReportConfig_;
        } else {
          return androidReportConfigBuilder_.getMessage();
        }
      }
      /**
       * <code>optional .perfetto.protos.TraceConfig.AndroidReportConfig android_report_config = 34;</code>
       */
      public Builder setAndroidReportConfig(perfetto.protos.TraceConfigOuterClass.TraceConfig.AndroidReportConfig value) {
        if (androidReportConfigBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          androidReportConfig_ = value;
        } else {
          androidReportConfigBuilder_.setMessage(value);
        }
        bitField0_ |= 0x40000000;
        onChanged();
        return this;
      }
      /**
       * <code>optional .perfetto.protos.TraceConfig.AndroidReportConfig android_report_config = 34;</code>
       */
      public Builder setAndroidReportConfig(
          perfetto.protos.TraceConfigOuterClass.TraceConfig.AndroidReportConfig.Builder builderForValue) {
        if (androidReportConfigBuilder_ == null) {
          androidReportConfig_ = builderForValue.build();
        } else {
          androidReportConfigBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x40000000;
        onChanged();
        return this;
      }
      /**
       * <code>optional .perfetto.protos.TraceConfig.AndroidReportConfig android_report_config = 34;</code>
       */
      public Builder mergeAndroidReportConfig(perfetto.protos.TraceConfigOuterClass.TraceConfig.AndroidReportConfig value) {
        if (androidReportConfigBuilder_ == null) {
          if (((bitField0_ & 0x40000000) != 0) &&
            androidReportConfig_ != null &&
            androidReportConfig_ != perfetto.protos.TraceConfigOuterClass.TraceConfig.AndroidReportConfig.getDefaultInstance()) {
            getAndroidReportConfigBuilder().mergeFrom(value);
          } else {
            androidReportConfig_ = value;
          }
        } else {
          androidReportConfigBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x40000000;
        onChanged();
        return this;
      }
      /**
       * <code>optional .perfetto.protos.TraceConfig.AndroidReportConfig android_report_config = 34;</code>
       */
      public Builder clearAndroidReportConfig() {
        bitField0_ = (bitField0_ & ~0x40000000);
        androidReportConfig_ = null;
        if (androidReportConfigBuilder_ != null) {
          androidReportConfigBuilder_.dispose();
          androidReportConfigBuilder_ = null;
        }
        onChanged();
        return this;
      }
      /**
       * <code>optional .perfetto.protos.TraceConfig.AndroidReportConfig android_report_config = 34;</code>
       */
      public perfetto.protos.TraceConfigOuterClass.TraceConfig.AndroidReportConfig.Builder getAndroidReportConfigBuilder() {
        bitField0_ |= 0x40000000;
        onChanged();
        return getAndroidReportConfigFieldBuilder().getBuilder();
      }
      /**
       * <code>optional .perfetto.protos.TraceConfig.AndroidReportConfig android_report_config = 34;</code>
       */
      public perfetto.protos.TraceConfigOuterClass.TraceConfig.AndroidReportConfigOrBuilder getAndroidReportConfigOrBuilder() {
        if (androidReportConfigBuilder_ != null) {
          return androidReportConfigBuilder_.getMessageOrBuilder();
        } else {
          return androidReportConfig_ == null ?
              perfetto.protos.TraceConfigOuterClass.TraceConfig.AndroidReportConfig.getDefaultInstance() : androidReportConfig_;
        }
      }
      /**
       * <code>optional .perfetto.protos.TraceConfig.AndroidReportConfig android_report_config = 34;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          perfetto.protos.TraceConfigOuterClass.TraceConfig.AndroidReportConfig, perfetto.protos.TraceConfigOuterClass.TraceConfig.AndroidReportConfig.Builder, perfetto.protos.TraceConfigOuterClass.TraceConfig.AndroidReportConfigOrBuilder> 
          getAndroidReportConfigFieldBuilder() {
        if (androidReportConfigBuilder_ == null) {
          androidReportConfigBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              perfetto.protos.TraceConfigOuterClass.TraceConfig.AndroidReportConfig, perfetto.protos.TraceConfigOuterClass.TraceConfig.AndroidReportConfig.Builder, perfetto.protos.TraceConfigOuterClass.TraceConfig.AndroidReportConfigOrBuilder>(
                  getAndroidReportConfig(),
                  getParentForChildren(),
                  isClean());
          androidReportConfig_ = null;
        }
        return androidReportConfigBuilder_;
      }

      private perfetto.protos.TraceConfigOuterClass.TraceConfig.CmdTraceStartDelay cmdTraceStartDelay_;
      private com.google.protobuf.SingleFieldBuilderV3<
          perfetto.protos.TraceConfigOuterClass.TraceConfig.CmdTraceStartDelay, perfetto.protos.TraceConfigOuterClass.TraceConfig.CmdTraceStartDelay.Builder, perfetto.protos.TraceConfigOuterClass.TraceConfig.CmdTraceStartDelayOrBuilder> cmdTraceStartDelayBuilder_;
      /**
       * <code>optional .perfetto.protos.TraceConfig.CmdTraceStartDelay cmd_trace_start_delay = 35;</code>
       * @return Whether the cmdTraceStartDelay field is set.
       */
      public boolean hasCmdTraceStartDelay() {
        return ((bitField0_ & 0x80000000) != 0);
      }
      /**
       * <code>optional .perfetto.protos.TraceConfig.CmdTraceStartDelay cmd_trace_start_delay = 35;</code>
       * @return The cmdTraceStartDelay.
       */
      public perfetto.protos.TraceConfigOuterClass.TraceConfig.CmdTraceStartDelay getCmdTraceStartDelay() {
        if (cmdTraceStartDelayBuilder_ == null) {
          return cmdTraceStartDelay_ == null ? perfetto.protos.TraceConfigOuterClass.TraceConfig.CmdTraceStartDelay.getDefaultInstance() : cmdTraceStartDelay_;
        } else {
          return cmdTraceStartDelayBuilder_.getMessage();
        }
      }
      /**
       * <code>optional .perfetto.protos.TraceConfig.CmdTraceStartDelay cmd_trace_start_delay = 35;</code>
       */
      public Builder setCmdTraceStartDelay(perfetto.protos.TraceConfigOuterClass.TraceConfig.CmdTraceStartDelay value) {
        if (cmdTraceStartDelayBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          cmdTraceStartDelay_ = value;
        } else {
          cmdTraceStartDelayBuilder_.setMessage(value);
        }
        bitField0_ |= 0x80000000;
        onChanged();
        return this;
      }
      /**
       * <code>optional .perfetto.protos.TraceConfig.CmdTraceStartDelay cmd_trace_start_delay = 35;</code>
       */
      public Builder setCmdTraceStartDelay(
          perfetto.protos.TraceConfigOuterClass.TraceConfig.CmdTraceStartDelay.Builder builderForValue) {
        if (cmdTraceStartDelayBuilder_ == null) {
          cmdTraceStartDelay_ = builderForValue.build();
        } else {
          cmdTraceStartDelayBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x80000000;
        onChanged();
        return this;
      }
      /**
       * <code>optional .perfetto.protos.TraceConfig.CmdTraceStartDelay cmd_trace_start_delay = 35;</code>
       */
      public Builder mergeCmdTraceStartDelay(perfetto.protos.TraceConfigOuterClass.TraceConfig.CmdTraceStartDelay value) {
        if (cmdTraceStartDelayBuilder_ == null) {
          if (((bitField0_ & 0x80000000) != 0) &&
            cmdTraceStartDelay_ != null &&
            cmdTraceStartDelay_ != perfetto.protos.TraceConfigOuterClass.TraceConfig.CmdTraceStartDelay.getDefaultInstance()) {
            getCmdTraceStartDelayBuilder().mergeFrom(value);
          } else {
            cmdTraceStartDelay_ = value;
          }
        } else {
          cmdTraceStartDelayBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x80000000;
        onChanged();
        return this;
      }
      /**
       * <code>optional .perfetto.protos.TraceConfig.CmdTraceStartDelay cmd_trace_start_delay = 35;</code>
       */
      public Builder clearCmdTraceStartDelay() {
        bitField0_ = (bitField0_ & ~0x80000000);
        cmdTraceStartDelay_ = null;
        if (cmdTraceStartDelayBuilder_ != null) {
          cmdTraceStartDelayBuilder_.dispose();
          cmdTraceStartDelayBuilder_ = null;
        }
        onChanged();
        return this;
      }
      /**
       * <code>optional .perfetto.protos.TraceConfig.CmdTraceStartDelay cmd_trace_start_delay = 35;</code>
       */
      public perfetto.protos.TraceConfigOuterClass.TraceConfig.CmdTraceStartDelay.Builder getCmdTraceStartDelayBuilder() {
        bitField0_ |= 0x80000000;
        onChanged();
        return getCmdTraceStartDelayFieldBuilder().getBuilder();
      }
      /**
       * <code>optional .perfetto.protos.TraceConfig.CmdTraceStartDelay cmd_trace_start_delay = 35;</code>
       */
      public perfetto.protos.TraceConfigOuterClass.TraceConfig.CmdTraceStartDelayOrBuilder getCmdTraceStartDelayOrBuilder() {
        if (cmdTraceStartDelayBuilder_ != null) {
          return cmdTraceStartDelayBuilder_.getMessageOrBuilder();
        } else {
          return cmdTraceStartDelay_ == null ?
              perfetto.protos.TraceConfigOuterClass.TraceConfig.CmdTraceStartDelay.getDefaultInstance() : cmdTraceStartDelay_;
        }
      }
      /**
       * <code>optional .perfetto.protos.TraceConfig.CmdTraceStartDelay cmd_trace_start_delay = 35;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          perfetto.protos.TraceConfigOuterClass.TraceConfig.CmdTraceStartDelay, perfetto.protos.TraceConfigOuterClass.TraceConfig.CmdTraceStartDelay.Builder, perfetto.protos.TraceConfigOuterClass.TraceConfig.CmdTraceStartDelayOrBuilder> 
          getCmdTraceStartDelayFieldBuilder() {
        if (cmdTraceStartDelayBuilder_ == null) {
          cmdTraceStartDelayBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              perfetto.protos.TraceConfigOuterClass.TraceConfig.CmdTraceStartDelay, perfetto.protos.TraceConfigOuterClass.TraceConfig.CmdTraceStartDelay.Builder, perfetto.protos.TraceConfigOuterClass.TraceConfig.CmdTraceStartDelayOrBuilder>(
                  getCmdTraceStartDelay(),
                  getParentForChildren(),
                  isClean());
          cmdTraceStartDelay_ = null;
        }
        return cmdTraceStartDelayBuilder_;
      }
      @java.lang.Override
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      @java.lang.Override
      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:perfetto.protos.TraceConfig)
    }

    // @@protoc_insertion_point(class_scope:perfetto.protos.TraceConfig)
    private static final perfetto.protos.TraceConfigOuterClass.TraceConfig DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new perfetto.protos.TraceConfigOuterClass.TraceConfig();
    }

    public static perfetto.protos.TraceConfigOuterClass.TraceConfig getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    @java.lang.Deprecated public static final com.google.protobuf.Parser<TraceConfig>
        PARSER = new com.google.protobuf.AbstractParser<TraceConfig>() {
      @java.lang.Override
      public TraceConfig parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        Builder builder = newBuilder();
        try {
          builder.mergeFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.setUnfinishedMessage(builder.buildPartial());
        } catch (com.google.protobuf.UninitializedMessageException e) {
          throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
        } catch (java.io.IOException e) {
          throw new com.google.protobuf.InvalidProtocolBufferException(e)
              .setUnfinishedMessage(builder.buildPartial());
        }
        return builder.buildPartial();
      }
    };

    public static com.google.protobuf.Parser<TraceConfig> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<TraceConfig> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public perfetto.protos.TraceConfigOuterClass.TraceConfig getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_perfetto_protos_TraceConfig_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_perfetto_protos_TraceConfig_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_perfetto_protos_TraceConfig_BufferConfig_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_perfetto_protos_TraceConfig_BufferConfig_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_perfetto_protos_TraceConfig_DataSource_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_perfetto_protos_TraceConfig_DataSource_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_perfetto_protos_TraceConfig_BuiltinDataSource_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_perfetto_protos_TraceConfig_BuiltinDataSource_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_perfetto_protos_TraceConfig_ProducerConfig_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_perfetto_protos_TraceConfig_ProducerConfig_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_perfetto_protos_TraceConfig_StatsdMetadata_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_perfetto_protos_TraceConfig_StatsdMetadata_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_perfetto_protos_TraceConfig_GuardrailOverrides_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_perfetto_protos_TraceConfig_GuardrailOverrides_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_perfetto_protos_TraceConfig_TriggerConfig_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_perfetto_protos_TraceConfig_TriggerConfig_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_perfetto_protos_TraceConfig_TriggerConfig_Trigger_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_perfetto_protos_TraceConfig_TriggerConfig_Trigger_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_perfetto_protos_TraceConfig_IncrementalStateConfig_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_perfetto_protos_TraceConfig_IncrementalStateConfig_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_perfetto_protos_TraceConfig_IncidentReportConfig_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_perfetto_protos_TraceConfig_IncidentReportConfig_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_perfetto_protos_TraceConfig_TraceFilter_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_perfetto_protos_TraceConfig_TraceFilter_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_perfetto_protos_TraceConfig_AndroidReportConfig_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_perfetto_protos_TraceConfig_AndroidReportConfig_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_perfetto_protos_TraceConfig_CmdTraceStartDelay_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_perfetto_protos_TraceConfig_CmdTraceStartDelay_fieldAccessorTable;

  public static com.google.protobuf.Descriptors.FileDescriptor
      getDescriptor() {
    return descriptor;
  }
  private static  com.google.protobuf.Descriptors.FileDescriptor
      descriptor;
  static {
    java.lang.String[] descriptorData = {
      "\n)protos/perfetto/config/trace_config.pr" +
      "oto\022\017perfetto.protos\032*protos/perfetto/co" +
      "mmon/builtin_clock.proto\032/protos/perfett" +
      "o/config/data_source_config.proto\"\253\034\n\013Tr" +
      "aceConfig\022:\n\007buffers\030\001 \003(\0132).perfetto.pr" +
      "otos.TraceConfig.BufferConfig\022=\n\014data_so" +
      "urces\030\002 \003(\0132\'.perfetto.protos.TraceConfi" +
      "g.DataSource\022L\n\024builtin_data_sources\030\024 \001" +
      "(\0132..perfetto.protos.TraceConfig.Builtin" +
      "DataSource\022\023\n\013duration_ms\030\003 \001(\r\022\037\n\027enabl" +
      "e_extra_guardrails\030\004 \001(\010\022I\n\rlockdown_mod" +
      "e\030\005 \001(\01622.perfetto.protos.TraceConfig.Lo" +
      "ckdownModeOperation\022>\n\tproducers\030\006 \003(\0132+" +
      ".perfetto.protos.TraceConfig.ProducerCon" +
      "fig\022D\n\017statsd_metadata\030\007 \001(\0132+.perfetto." +
      "protos.TraceConfig.StatsdMetadata\022\027\n\017wri" +
      "te_into_file\030\010 \001(\010\022\023\n\013output_path\030\035 \001(\t\022" +
      "\034\n\024file_write_period_ms\030\t \001(\r\022\033\n\023max_fil" +
      "e_size_bytes\030\n \001(\004\022L\n\023guardrail_override" +
      "s\030\013 \001(\0132/.perfetto.protos.TraceConfig.Gu" +
      "ardrailOverrides\022\026\n\016deferred_start\030\014 \001(\010" +
      "\022\027\n\017flush_period_ms\030\r \001(\r\022\030\n\020flush_timeo" +
      "ut_ms\030\016 \001(\r\022#\n\033data_source_stop_timeout_" +
      "ms\030\027 \001(\r\022\026\n\016notify_traceur\030\020 \001(\010\022\027\n\017bugr" +
      "eport_score\030\036 \001(\005\022B\n\016trigger_config\030\021 \001(" +
      "\0132*.perfetto.protos.TraceConfig.TriggerC" +
      "onfig\022\031\n\021activate_triggers\030\022 \003(\t\022U\n\030incr" +
      "emental_state_config\030\025 \001(\01323.perfetto.pr" +
      "otos.TraceConfig.IncrementalStateConfig\022" +
      " \n\030allow_user_build_tracing\030\023 \001(\010\022\033\n\023uni" +
      "que_session_name\030\026 \001(\t\022F\n\020compression_ty" +
      "pe\030\030 \001(\0162,.perfetto.protos.TraceConfig.C" +
      "ompressionType\022Q\n\026incident_report_config" +
      "\030\031 \001(\01321.perfetto.protos.TraceConfig.Inc" +
      "identReportConfig\022B\n\016statsd_logging\030\037 \001(" +
      "\0162*.perfetto.protos.TraceConfig.StatsdLo" +
      "gging\022\032\n\016trace_uuid_msb\030\033 \001(\003B\002\030\001\022\032\n\016tra" +
      "ce_uuid_lsb\030\034 \001(\003B\002\030\001\022>\n\014trace_filter\030! " +
      "\001(\0132(.perfetto.protos.TraceConfig.TraceF" +
      "ilter\022O\n\025android_report_config\030\" \001(\01320.p" +
      "erfetto.protos.TraceConfig.AndroidReport" +
      "Config\022N\n\025cmd_trace_start_delay\030# \001(\0132/." +
      "perfetto.protos.TraceConfig.CmdTraceStar" +
      "tDelay\032\263\001\n\014BufferConfig\022\017\n\007size_kb\030\001 \001(\r" +
      "\022I\n\013fill_policy\030\004 \001(\01624.perfetto.protos." +
      "TraceConfig.BufferConfig.FillPolicy\";\n\nF" +
      "illPolicy\022\017\n\013UNSPECIFIED\020\000\022\017\n\013RING_BUFFE" +
      "R\020\001\022\013\n\007DISCARD\020\002J\004\010\002\020\003J\004\010\003\020\004\032\201\001\n\nDataSou" +
      "rce\0221\n\006config\030\001 \001(\0132!.perfetto.protos.Da" +
      "taSourceConfig\022\034\n\024producer_name_filter\030\002" +
      " \003(\t\022\"\n\032producer_name_regex_filter\030\003 \003(\t" +
      "\032\227\002\n\021BuiltinDataSource\022\"\n\032disable_clock_" +
      "snapshotting\030\001 \001(\010\022\034\n\024disable_trace_conf" +
      "ig\030\002 \001(\010\022\033\n\023disable_system_info\030\003 \001(\010\022\036\n" +
      "\026disable_service_events\030\004 \001(\010\022:\n\023primary" +
      "_trace_clock\030\005 \001(\0162\035.perfetto.protos.Bui" +
      "ltinClock\022\034\n\024snapshot_interval_ms\030\006 \001(\r\022" +
      ")\n!prefer_suspend_clock_for_snapshot\030\007 \001" +
      "(\010\032R\n\016ProducerConfig\022\025\n\rproducer_name\030\001 " +
      "\001(\t\022\023\n\013shm_size_kb\030\002 \001(\r\022\024\n\014page_size_kb" +
      "\030\003 \001(\r\032\216\001\n\016StatsdMetadata\022\033\n\023triggering_" +
      "alert_id\030\001 \001(\003\022\035\n\025triggering_config_uid\030" +
      "\002 \001(\005\022\034\n\024triggering_config_id\030\003 \001(\003\022\"\n\032t" +
      "riggering_subscription_id\030\004 \001(\003\032Z\n\022Guard" +
      "railOverrides\022 \n\030max_upload_per_day_byte" +
      "s\030\001 \001(\004\022\"\n\032max_tracing_buffer_size_kb\030\002 " +
      "\001(\r\032\201\003\n\rTriggerConfig\022L\n\014trigger_mode\030\001 " +
      "\001(\01626.perfetto.protos.TraceConfig.Trigge" +
      "rConfig.TriggerMode\022D\n\010triggers\030\002 \003(\01322." +
      "perfetto.protos.TraceConfig.TriggerConfi" +
      "g.Trigger\022\032\n\022trigger_timeout_ms\030\003 \001(\r\032{\n" +
      "\007Trigger\022\014\n\004name\030\001 \001(\t\022\033\n\023producer_name_" +
      "regex\030\002 \001(\t\022\025\n\rstop_delay_ms\030\003 \001(\r\022\024\n\014ma" +
      "x_per_24_h\030\004 \001(\r\022\030\n\020skip_probability\030\005 \001" +
      "(\001\"C\n\013TriggerMode\022\017\n\013UNSPECIFIED\020\000\022\021\n\rST" +
      "ART_TRACING\020\001\022\020\n\014STOP_TRACING\020\002\0321\n\026Incre" +
      "mentalStateConfig\022\027\n\017clear_period_ms\030\001 \001" +
      "(\r\032\227\001\n\024IncidentReportConfig\022\033\n\023destinati" +
      "on_package\030\001 \001(\t\022\031\n\021destination_class\030\002 " +
      "\001(\t\022\025\n\rprivacy_level\030\003 \001(\005\022\026\n\016skip_incid" +
      "entd\030\005 \001(\010\022\030\n\014skip_dropbox\030\004 \001(\010B\002\030\001\032\037\n\013" +
      "TraceFilter\022\020\n\010bytecode\030\001 \001(\014\032\227\001\n\023Androi" +
      "dReportConfig\022 \n\030reporter_service_packag" +
      "e\030\001 \001(\t\022\036\n\026reporter_service_class\030\002 \001(\t\022" +
      "\023\n\013skip_report\030\003 \001(\010\022)\n!use_pipe_in_fram" +
      "ework_for_testing\030\004 \001(\010\032@\n\022CmdTraceStart" +
      "Delay\022\024\n\014min_delay_ms\030\001 \001(\r\022\024\n\014max_delay" +
      "_ms\030\002 \001(\r\"U\n\025LockdownModeOperation\022\026\n\022LO" +
      "CKDOWN_UNCHANGED\020\000\022\022\n\016LOCKDOWN_CLEAR\020\001\022\020" +
      "\n\014LOCKDOWN_SET\020\002\"Q\n\017CompressionType\022 \n\034C" +
      "OMPRESSION_TYPE_UNSPECIFIED\020\000\022\034\n\030COMPRES" +
      "SION_TYPE_DEFLATE\020\001\"h\n\rStatsdLogging\022\036\n\032" +
      "STATSD_LOGGING_UNSPECIFIED\020\000\022\032\n\026STATSD_L" +
      "OGGING_ENABLED\020\001\022\033\n\027STATSD_LOGGING_DISAB" +
      "LED\020\002J\004\010\017\020\020J\004\010\032\020\033J\004\010 \020!"
    };
    descriptor = com.google.protobuf.Descriptors.FileDescriptor
      .internalBuildGeneratedFileFrom(descriptorData,
        new com.google.protobuf.Descriptors.FileDescriptor[] {
          perfetto.protos.BuiltinClockOuterClass.getDescriptor(),
          perfetto.protos.DataSourceConfigOuterClass.getDescriptor(),
        });
    internal_static_perfetto_protos_TraceConfig_descriptor =
      getDescriptor().getMessageTypes().get(0);
    internal_static_perfetto_protos_TraceConfig_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_perfetto_protos_TraceConfig_descriptor,
        new java.lang.String[] { "Buffers", "DataSources", "BuiltinDataSources", "DurationMs", "EnableExtraGuardrails", "LockdownMode", "Producers", "StatsdMetadata", "WriteIntoFile", "OutputPath", "FileWritePeriodMs", "MaxFileSizeBytes", "GuardrailOverrides", "DeferredStart", "FlushPeriodMs", "FlushTimeoutMs", "DataSourceStopTimeoutMs", "NotifyTraceur", "BugreportScore", "TriggerConfig", "ActivateTriggers", "IncrementalStateConfig", "AllowUserBuildTracing", "UniqueSessionName", "CompressionType", "IncidentReportConfig", "StatsdLogging", "TraceUuidMsb", "TraceUuidLsb", "TraceFilter", "AndroidReportConfig", "CmdTraceStartDelay", });
    internal_static_perfetto_protos_TraceConfig_BufferConfig_descriptor =
      internal_static_perfetto_protos_TraceConfig_descriptor.getNestedTypes().get(0);
    internal_static_perfetto_protos_TraceConfig_BufferConfig_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_perfetto_protos_TraceConfig_BufferConfig_descriptor,
        new java.lang.String[] { "SizeKb", "FillPolicy", });
    internal_static_perfetto_protos_TraceConfig_DataSource_descriptor =
      internal_static_perfetto_protos_TraceConfig_descriptor.getNestedTypes().get(1);
    internal_static_perfetto_protos_TraceConfig_DataSource_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_perfetto_protos_TraceConfig_DataSource_descriptor,
        new java.lang.String[] { "Config", "ProducerNameFilter", "ProducerNameRegexFilter", });
    internal_static_perfetto_protos_TraceConfig_BuiltinDataSource_descriptor =
      internal_static_perfetto_protos_TraceConfig_descriptor.getNestedTypes().get(2);
    internal_static_perfetto_protos_TraceConfig_BuiltinDataSource_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_perfetto_protos_TraceConfig_BuiltinDataSource_descriptor,
        new java.lang.String[] { "DisableClockSnapshotting", "DisableTraceConfig", "DisableSystemInfo", "DisableServiceEvents", "PrimaryTraceClock", "SnapshotIntervalMs", "PreferSuspendClockForSnapshot", });
    internal_static_perfetto_protos_TraceConfig_ProducerConfig_descriptor =
      internal_static_perfetto_protos_TraceConfig_descriptor.getNestedTypes().get(3);
    internal_static_perfetto_protos_TraceConfig_ProducerConfig_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_perfetto_protos_TraceConfig_ProducerConfig_descriptor,
        new java.lang.String[] { "ProducerName", "ShmSizeKb", "PageSizeKb", });
    internal_static_perfetto_protos_TraceConfig_StatsdMetadata_descriptor =
      internal_static_perfetto_protos_TraceConfig_descriptor.getNestedTypes().get(4);
    internal_static_perfetto_protos_TraceConfig_StatsdMetadata_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_perfetto_protos_TraceConfig_StatsdMetadata_descriptor,
        new java.lang.String[] { "TriggeringAlertId", "TriggeringConfigUid", "TriggeringConfigId", "TriggeringSubscriptionId", });
    internal_static_perfetto_protos_TraceConfig_GuardrailOverrides_descriptor =
      internal_static_perfetto_protos_TraceConfig_descriptor.getNestedTypes().get(5);
    internal_static_perfetto_protos_TraceConfig_GuardrailOverrides_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_perfetto_protos_TraceConfig_GuardrailOverrides_descriptor,
        new java.lang.String[] { "MaxUploadPerDayBytes", "MaxTracingBufferSizeKb", });
    internal_static_perfetto_protos_TraceConfig_TriggerConfig_descriptor =
      internal_static_perfetto_protos_TraceConfig_descriptor.getNestedTypes().get(6);
    internal_static_perfetto_protos_TraceConfig_TriggerConfig_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_perfetto_protos_TraceConfig_TriggerConfig_descriptor,
        new java.lang.String[] { "TriggerMode", "Triggers", "TriggerTimeoutMs", });
    internal_static_perfetto_protos_TraceConfig_TriggerConfig_Trigger_descriptor =
      internal_static_perfetto_protos_TraceConfig_TriggerConfig_descriptor.getNestedTypes().get(0);
    internal_static_perfetto_protos_TraceConfig_TriggerConfig_Trigger_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_perfetto_protos_TraceConfig_TriggerConfig_Trigger_descriptor,
        new java.lang.String[] { "Name", "ProducerNameRegex", "StopDelayMs", "MaxPer24H", "SkipProbability", });
    internal_static_perfetto_protos_TraceConfig_IncrementalStateConfig_descriptor =
      internal_static_perfetto_protos_TraceConfig_descriptor.getNestedTypes().get(7);
    internal_static_perfetto_protos_TraceConfig_IncrementalStateConfig_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_perfetto_protos_TraceConfig_IncrementalStateConfig_descriptor,
        new java.lang.String[] { "ClearPeriodMs", });
    internal_static_perfetto_protos_TraceConfig_IncidentReportConfig_descriptor =
      internal_static_perfetto_protos_TraceConfig_descriptor.getNestedTypes().get(8);
    internal_static_perfetto_protos_TraceConfig_IncidentReportConfig_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_perfetto_protos_TraceConfig_IncidentReportConfig_descriptor,
        new java.lang.String[] { "DestinationPackage", "DestinationClass", "PrivacyLevel", "SkipIncidentd", "SkipDropbox", });
    internal_static_perfetto_protos_TraceConfig_TraceFilter_descriptor =
      internal_static_perfetto_protos_TraceConfig_descriptor.getNestedTypes().get(9);
    internal_static_perfetto_protos_TraceConfig_TraceFilter_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_perfetto_protos_TraceConfig_TraceFilter_descriptor,
        new java.lang.String[] { "Bytecode", });
    internal_static_perfetto_protos_TraceConfig_AndroidReportConfig_descriptor =
      internal_static_perfetto_protos_TraceConfig_descriptor.getNestedTypes().get(10);
    internal_static_perfetto_protos_TraceConfig_AndroidReportConfig_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_perfetto_protos_TraceConfig_AndroidReportConfig_descriptor,
        new java.lang.String[] { "ReporterServicePackage", "ReporterServiceClass", "SkipReport", "UsePipeInFrameworkForTesting", });
    internal_static_perfetto_protos_TraceConfig_CmdTraceStartDelay_descriptor =
      internal_static_perfetto_protos_TraceConfig_descriptor.getNestedTypes().get(11);
    internal_static_perfetto_protos_TraceConfig_CmdTraceStartDelay_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_perfetto_protos_TraceConfig_CmdTraceStartDelay_descriptor,
        new java.lang.String[] { "MinDelayMs", "MaxDelayMs", });
    perfetto.protos.BuiltinClockOuterClass.getDescriptor();
    perfetto.protos.DataSourceConfigOuterClass.getDescriptor();
  }

  // @@protoc_insertion_point(outer_class_scope)
}
