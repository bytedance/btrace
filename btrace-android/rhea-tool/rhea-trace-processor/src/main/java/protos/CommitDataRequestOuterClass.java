// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: protos/perfetto/common/commit_data_request.proto

package perfetto.protos;

public final class CommitDataRequestOuterClass {
  private CommitDataRequestOuterClass() {}
  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistryLite registry) {
  }

  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistry registry) {
    registerAllExtensions(
        (com.google.protobuf.ExtensionRegistryLite) registry);
  }
  public interface CommitDataRequestOrBuilder extends
      // @@protoc_insertion_point(interface_extends:perfetto.protos.CommitDataRequest)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <code>repeated .perfetto.protos.CommitDataRequest.ChunksToMove chunks_to_move = 1;</code>
     */
    java.util.List<perfetto.protos.CommitDataRequestOuterClass.CommitDataRequest.ChunksToMove> 
        getChunksToMoveList();
    /**
     * <code>repeated .perfetto.protos.CommitDataRequest.ChunksToMove chunks_to_move = 1;</code>
     */
    perfetto.protos.CommitDataRequestOuterClass.CommitDataRequest.ChunksToMove getChunksToMove(int index);
    /**
     * <code>repeated .perfetto.protos.CommitDataRequest.ChunksToMove chunks_to_move = 1;</code>
     */
    int getChunksToMoveCount();
    /**
     * <code>repeated .perfetto.protos.CommitDataRequest.ChunksToMove chunks_to_move = 1;</code>
     */
    java.util.List<? extends perfetto.protos.CommitDataRequestOuterClass.CommitDataRequest.ChunksToMoveOrBuilder> 
        getChunksToMoveOrBuilderList();
    /**
     * <code>repeated .perfetto.protos.CommitDataRequest.ChunksToMove chunks_to_move = 1;</code>
     */
    perfetto.protos.CommitDataRequestOuterClass.CommitDataRequest.ChunksToMoveOrBuilder getChunksToMoveOrBuilder(
        int index);

    /**
     * <code>repeated .perfetto.protos.CommitDataRequest.ChunkToPatch chunks_to_patch = 2;</code>
     */
    java.util.List<perfetto.protos.CommitDataRequestOuterClass.CommitDataRequest.ChunkToPatch> 
        getChunksToPatchList();
    /**
     * <code>repeated .perfetto.protos.CommitDataRequest.ChunkToPatch chunks_to_patch = 2;</code>
     */
    perfetto.protos.CommitDataRequestOuterClass.CommitDataRequest.ChunkToPatch getChunksToPatch(int index);
    /**
     * <code>repeated .perfetto.protos.CommitDataRequest.ChunkToPatch chunks_to_patch = 2;</code>
     */
    int getChunksToPatchCount();
    /**
     * <code>repeated .perfetto.protos.CommitDataRequest.ChunkToPatch chunks_to_patch = 2;</code>
     */
    java.util.List<? extends perfetto.protos.CommitDataRequestOuterClass.CommitDataRequest.ChunkToPatchOrBuilder> 
        getChunksToPatchOrBuilderList();
    /**
     * <code>repeated .perfetto.protos.CommitDataRequest.ChunkToPatch chunks_to_patch = 2;</code>
     */
    perfetto.protos.CommitDataRequestOuterClass.CommitDataRequest.ChunkToPatchOrBuilder getChunksToPatchOrBuilder(
        int index);

    /**
     * <pre>
     * Optional. If this commit is made in response to a Flush(id) request coming
     * from the service, copy back the id of the request so the service can tell
     * when the flush happened.
     * </pre>
     *
     * <code>optional uint64 flush_request_id = 3;</code>
     * @return Whether the flushRequestId field is set.
     */
    boolean hasFlushRequestId();
    /**
     * <pre>
     * Optional. If this commit is made in response to a Flush(id) request coming
     * from the service, copy back the id of the request so the service can tell
     * when the flush happened.
     * </pre>
     *
     * <code>optional uint64 flush_request_id = 3;</code>
     * @return The flushRequestId.
     */
    long getFlushRequestId();
  }
  /**
   * Protobuf type {@code perfetto.protos.CommitDataRequest}
   */
  public static final class CommitDataRequest extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:perfetto.protos.CommitDataRequest)
      CommitDataRequestOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use CommitDataRequest.newBuilder() to construct.
    private CommitDataRequest(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private CommitDataRequest() {
      chunksToMove_ = java.util.Collections.emptyList();
      chunksToPatch_ = java.util.Collections.emptyList();
    }

    @java.lang.Override
    @SuppressWarnings({"unused"})
    protected java.lang.Object newInstance(
        UnusedPrivateParameter unused) {
      return new CommitDataRequest();
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return perfetto.protos.CommitDataRequestOuterClass.internal_static_perfetto_protos_CommitDataRequest_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return perfetto.protos.CommitDataRequestOuterClass.internal_static_perfetto_protos_CommitDataRequest_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              perfetto.protos.CommitDataRequestOuterClass.CommitDataRequest.class, perfetto.protos.CommitDataRequestOuterClass.CommitDataRequest.Builder.class);
    }

    public interface ChunksToMoveOrBuilder extends
        // @@protoc_insertion_point(interface_extends:perfetto.protos.CommitDataRequest.ChunksToMove)
        com.google.protobuf.MessageOrBuilder {

      /**
       * <pre>
       * The 0-based index of the page in the Shared Memory Buffer.
       * </pre>
       *
       * <code>optional uint32 page = 1;</code>
       * @return Whether the page field is set.
       */
      boolean hasPage();
      /**
       * <pre>
       * The 0-based index of the page in the Shared Memory Buffer.
       * </pre>
       *
       * <code>optional uint32 page = 1;</code>
       * @return The page.
       */
      int getPage();

      /**
       * <pre>
       * The 0-based chunk index [0..13] within the page.
       * </pre>
       *
       * <code>optional uint32 chunk = 2;</code>
       * @return Whether the chunk field is set.
       */
      boolean hasChunk();
      /**
       * <pre>
       * The 0-based chunk index [0..13] within the page.
       * </pre>
       *
       * <code>optional uint32 chunk = 2;</code>
       * @return The chunk.
       */
      int getChunk();

      /**
       * <pre>
       * The target buffer it should be moved onto. The service will check that
       * the producer is allowed to write into that buffer before the move.
       * </pre>
       *
       * <code>optional uint32 target_buffer = 3;</code>
       * @return Whether the targetBuffer field is set.
       */
      boolean hasTargetBuffer();
      /**
       * <pre>
       * The target buffer it should be moved onto. The service will check that
       * the producer is allowed to write into that buffer before the move.
       * </pre>
       *
       * <code>optional uint32 target_buffer = 3;</code>
       * @return The targetBuffer.
       */
      int getTargetBuffer();
    }
    /**
     * <pre>
     * When |chunks_to_move| is present, the producer is requesting the service to
     * move the given chunks form the share memory buffer into the central
     * trace buffer(s).
     * </pre>
     *
     * Protobuf type {@code perfetto.protos.CommitDataRequest.ChunksToMove}
     */
    public static final class ChunksToMove extends
        com.google.protobuf.GeneratedMessageV3 implements
        // @@protoc_insertion_point(message_implements:perfetto.protos.CommitDataRequest.ChunksToMove)
        ChunksToMoveOrBuilder {
    private static final long serialVersionUID = 0L;
      // Use ChunksToMove.newBuilder() to construct.
      private ChunksToMove(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
        super(builder);
      }
      private ChunksToMove() {
      }

      @java.lang.Override
      @SuppressWarnings({"unused"})
      protected java.lang.Object newInstance(
          UnusedPrivateParameter unused) {
        return new ChunksToMove();
      }

      @java.lang.Override
      public final com.google.protobuf.UnknownFieldSet
      getUnknownFields() {
        return this.unknownFields;
      }
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return perfetto.protos.CommitDataRequestOuterClass.internal_static_perfetto_protos_CommitDataRequest_ChunksToMove_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return perfetto.protos.CommitDataRequestOuterClass.internal_static_perfetto_protos_CommitDataRequest_ChunksToMove_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                perfetto.protos.CommitDataRequestOuterClass.CommitDataRequest.ChunksToMove.class, perfetto.protos.CommitDataRequestOuterClass.CommitDataRequest.ChunksToMove.Builder.class);
      }

      private int bitField0_;
      public static final int PAGE_FIELD_NUMBER = 1;
      private int page_ = 0;
      /**
       * <pre>
       * The 0-based index of the page in the Shared Memory Buffer.
       * </pre>
       *
       * <code>optional uint32 page = 1;</code>
       * @return Whether the page field is set.
       */
      @java.lang.Override
      public boolean hasPage() {
        return ((bitField0_ & 0x00000001) != 0);
      }
      /**
       * <pre>
       * The 0-based index of the page in the Shared Memory Buffer.
       * </pre>
       *
       * <code>optional uint32 page = 1;</code>
       * @return The page.
       */
      @java.lang.Override
      public int getPage() {
        return page_;
      }

      public static final int CHUNK_FIELD_NUMBER = 2;
      private int chunk_ = 0;
      /**
       * <pre>
       * The 0-based chunk index [0..13] within the page.
       * </pre>
       *
       * <code>optional uint32 chunk = 2;</code>
       * @return Whether the chunk field is set.
       */
      @java.lang.Override
      public boolean hasChunk() {
        return ((bitField0_ & 0x00000002) != 0);
      }
      /**
       * <pre>
       * The 0-based chunk index [0..13] within the page.
       * </pre>
       *
       * <code>optional uint32 chunk = 2;</code>
       * @return The chunk.
       */
      @java.lang.Override
      public int getChunk() {
        return chunk_;
      }

      public static final int TARGET_BUFFER_FIELD_NUMBER = 3;
      private int targetBuffer_ = 0;
      /**
       * <pre>
       * The target buffer it should be moved onto. The service will check that
       * the producer is allowed to write into that buffer before the move.
       * </pre>
       *
       * <code>optional uint32 target_buffer = 3;</code>
       * @return Whether the targetBuffer field is set.
       */
      @java.lang.Override
      public boolean hasTargetBuffer() {
        return ((bitField0_ & 0x00000004) != 0);
      }
      /**
       * <pre>
       * The target buffer it should be moved onto. The service will check that
       * the producer is allowed to write into that buffer before the move.
       * </pre>
       *
       * <code>optional uint32 target_buffer = 3;</code>
       * @return The targetBuffer.
       */
      @java.lang.Override
      public int getTargetBuffer() {
        return targetBuffer_;
      }

      private byte memoizedIsInitialized = -1;
      @java.lang.Override
      public final boolean isInitialized() {
        byte isInitialized = memoizedIsInitialized;
        if (isInitialized == 1) return true;
        if (isInitialized == 0) return false;

        memoizedIsInitialized = 1;
        return true;
      }

      @java.lang.Override
      public void writeTo(com.google.protobuf.CodedOutputStream output)
                          throws java.io.IOException {
        if (((bitField0_ & 0x00000001) != 0)) {
          output.writeUInt32(1, page_);
        }
        if (((bitField0_ & 0x00000002) != 0)) {
          output.writeUInt32(2, chunk_);
        }
        if (((bitField0_ & 0x00000004) != 0)) {
          output.writeUInt32(3, targetBuffer_);
        }
        getUnknownFields().writeTo(output);
      }

      @java.lang.Override
      public int getSerializedSize() {
        int size = memoizedSize;
        if (size != -1) return size;

        size = 0;
        if (((bitField0_ & 0x00000001) != 0)) {
          size += com.google.protobuf.CodedOutputStream
            .computeUInt32Size(1, page_);
        }
        if (((bitField0_ & 0x00000002) != 0)) {
          size += com.google.protobuf.CodedOutputStream
            .computeUInt32Size(2, chunk_);
        }
        if (((bitField0_ & 0x00000004) != 0)) {
          size += com.google.protobuf.CodedOutputStream
            .computeUInt32Size(3, targetBuffer_);
        }
        size += getUnknownFields().getSerializedSize();
        memoizedSize = size;
        return size;
      }

      @java.lang.Override
      public boolean equals(final java.lang.Object obj) {
        if (obj == this) {
         return true;
        }
        if (!(obj instanceof perfetto.protos.CommitDataRequestOuterClass.CommitDataRequest.ChunksToMove)) {
          return super.equals(obj);
        }
        perfetto.protos.CommitDataRequestOuterClass.CommitDataRequest.ChunksToMove other = (perfetto.protos.CommitDataRequestOuterClass.CommitDataRequest.ChunksToMove) obj;

        if (hasPage() != other.hasPage()) return false;
        if (hasPage()) {
          if (getPage()
              != other.getPage()) return false;
        }
        if (hasChunk() != other.hasChunk()) return false;
        if (hasChunk()) {
          if (getChunk()
              != other.getChunk()) return false;
        }
        if (hasTargetBuffer() != other.hasTargetBuffer()) return false;
        if (hasTargetBuffer()) {
          if (getTargetBuffer()
              != other.getTargetBuffer()) return false;
        }
        if (!getUnknownFields().equals(other.getUnknownFields())) return false;
        return true;
      }

      @java.lang.Override
      public int hashCode() {
        if (memoizedHashCode != 0) {
          return memoizedHashCode;
        }
        int hash = 41;
        hash = (19 * hash) + getDescriptor().hashCode();
        if (hasPage()) {
          hash = (37 * hash) + PAGE_FIELD_NUMBER;
          hash = (53 * hash) + getPage();
        }
        if (hasChunk()) {
          hash = (37 * hash) + CHUNK_FIELD_NUMBER;
          hash = (53 * hash) + getChunk();
        }
        if (hasTargetBuffer()) {
          hash = (37 * hash) + TARGET_BUFFER_FIELD_NUMBER;
          hash = (53 * hash) + getTargetBuffer();
        }
        hash = (29 * hash) + getUnknownFields().hashCode();
        memoizedHashCode = hash;
        return hash;
      }

      public static perfetto.protos.CommitDataRequestOuterClass.CommitDataRequest.ChunksToMove parseFrom(
          java.nio.ByteBuffer data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static perfetto.protos.CommitDataRequestOuterClass.CommitDataRequest.ChunksToMove parseFrom(
          java.nio.ByteBuffer data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static perfetto.protos.CommitDataRequestOuterClass.CommitDataRequest.ChunksToMove parseFrom(
          com.google.protobuf.ByteString data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static perfetto.protos.CommitDataRequestOuterClass.CommitDataRequest.ChunksToMove parseFrom(
          com.google.protobuf.ByteString data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static perfetto.protos.CommitDataRequestOuterClass.CommitDataRequest.ChunksToMove parseFrom(byte[] data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static perfetto.protos.CommitDataRequestOuterClass.CommitDataRequest.ChunksToMove parseFrom(
          byte[] data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static perfetto.protos.CommitDataRequestOuterClass.CommitDataRequest.ChunksToMove parseFrom(java.io.InputStream input)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseWithIOException(PARSER, input);
      }
      public static perfetto.protos.CommitDataRequestOuterClass.CommitDataRequest.ChunksToMove parseFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseWithIOException(PARSER, input, extensionRegistry);
      }
      public static perfetto.protos.CommitDataRequestOuterClass.CommitDataRequest.ChunksToMove parseDelimitedFrom(java.io.InputStream input)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseDelimitedWithIOException(PARSER, input);
      }
      public static perfetto.protos.CommitDataRequestOuterClass.CommitDataRequest.ChunksToMove parseDelimitedFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
      }
      public static perfetto.protos.CommitDataRequestOuterClass.CommitDataRequest.ChunksToMove parseFrom(
          com.google.protobuf.CodedInputStream input)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseWithIOException(PARSER, input);
      }
      public static perfetto.protos.CommitDataRequestOuterClass.CommitDataRequest.ChunksToMove parseFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseWithIOException(PARSER, input, extensionRegistry);
      }

      @java.lang.Override
      public Builder newBuilderForType() { return newBuilder(); }
      public static Builder newBuilder() {
        return DEFAULT_INSTANCE.toBuilder();
      }
      public static Builder newBuilder(perfetto.protos.CommitDataRequestOuterClass.CommitDataRequest.ChunksToMove prototype) {
        return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
      }
      @java.lang.Override
      public Builder toBuilder() {
        return this == DEFAULT_INSTANCE
            ? new Builder() : new Builder().mergeFrom(this);
      }

      @java.lang.Override
      protected Builder newBuilderForType(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        Builder builder = new Builder(parent);
        return builder;
      }
      /**
       * <pre>
       * When |chunks_to_move| is present, the producer is requesting the service to
       * move the given chunks form the share memory buffer into the central
       * trace buffer(s).
       * </pre>
       *
       * Protobuf type {@code perfetto.protos.CommitDataRequest.ChunksToMove}
       */
      public static final class Builder extends
          com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
          // @@protoc_insertion_point(builder_implements:perfetto.protos.CommitDataRequest.ChunksToMove)
          perfetto.protos.CommitDataRequestOuterClass.CommitDataRequest.ChunksToMoveOrBuilder {
        public static final com.google.protobuf.Descriptors.Descriptor
            getDescriptor() {
          return perfetto.protos.CommitDataRequestOuterClass.internal_static_perfetto_protos_CommitDataRequest_ChunksToMove_descriptor;
        }

        @java.lang.Override
        protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
            internalGetFieldAccessorTable() {
          return perfetto.protos.CommitDataRequestOuterClass.internal_static_perfetto_protos_CommitDataRequest_ChunksToMove_fieldAccessorTable
              .ensureFieldAccessorsInitialized(
                  perfetto.protos.CommitDataRequestOuterClass.CommitDataRequest.ChunksToMove.class, perfetto.protos.CommitDataRequestOuterClass.CommitDataRequest.ChunksToMove.Builder.class);
        }

        // Construct using perfetto.protos.CommitDataRequestOuterClass.CommitDataRequest.ChunksToMove.newBuilder()
        private Builder() {

        }

        private Builder(
            com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
          super(parent);

        }
        @java.lang.Override
        public Builder clear() {
          super.clear();
          bitField0_ = 0;
          page_ = 0;
          chunk_ = 0;
          targetBuffer_ = 0;
          return this;
        }

        @java.lang.Override
        public com.google.protobuf.Descriptors.Descriptor
            getDescriptorForType() {
          return perfetto.protos.CommitDataRequestOuterClass.internal_static_perfetto_protos_CommitDataRequest_ChunksToMove_descriptor;
        }

        @java.lang.Override
        public perfetto.protos.CommitDataRequestOuterClass.CommitDataRequest.ChunksToMove getDefaultInstanceForType() {
          return perfetto.protos.CommitDataRequestOuterClass.CommitDataRequest.ChunksToMove.getDefaultInstance();
        }

        @java.lang.Override
        public perfetto.protos.CommitDataRequestOuterClass.CommitDataRequest.ChunksToMove build() {
          perfetto.protos.CommitDataRequestOuterClass.CommitDataRequest.ChunksToMove result = buildPartial();
          if (!result.isInitialized()) {
            throw newUninitializedMessageException(result);
          }
          return result;
        }

        @java.lang.Override
        public perfetto.protos.CommitDataRequestOuterClass.CommitDataRequest.ChunksToMove buildPartial() {
          perfetto.protos.CommitDataRequestOuterClass.CommitDataRequest.ChunksToMove result = new perfetto.protos.CommitDataRequestOuterClass.CommitDataRequest.ChunksToMove(this);
          if (bitField0_ != 0) { buildPartial0(result); }
          onBuilt();
          return result;
        }

        private void buildPartial0(perfetto.protos.CommitDataRequestOuterClass.CommitDataRequest.ChunksToMove result) {
          int from_bitField0_ = bitField0_;
          int to_bitField0_ = 0;
          if (((from_bitField0_ & 0x00000001) != 0)) {
            result.page_ = page_;
            to_bitField0_ |= 0x00000001;
          }
          if (((from_bitField0_ & 0x00000002) != 0)) {
            result.chunk_ = chunk_;
            to_bitField0_ |= 0x00000002;
          }
          if (((from_bitField0_ & 0x00000004) != 0)) {
            result.targetBuffer_ = targetBuffer_;
            to_bitField0_ |= 0x00000004;
          }
          result.bitField0_ |= to_bitField0_;
        }

        @java.lang.Override
        public Builder clone() {
          return super.clone();
        }
        @java.lang.Override
        public Builder setField(
            com.google.protobuf.Descriptors.FieldDescriptor field,
            java.lang.Object value) {
          return super.setField(field, value);
        }
        @java.lang.Override
        public Builder clearField(
            com.google.protobuf.Descriptors.FieldDescriptor field) {
          return super.clearField(field);
        }
        @java.lang.Override
        public Builder clearOneof(
            com.google.protobuf.Descriptors.OneofDescriptor oneof) {
          return super.clearOneof(oneof);
        }
        @java.lang.Override
        public Builder setRepeatedField(
            com.google.protobuf.Descriptors.FieldDescriptor field,
            int index, java.lang.Object value) {
          return super.setRepeatedField(field, index, value);
        }
        @java.lang.Override
        public Builder addRepeatedField(
            com.google.protobuf.Descriptors.FieldDescriptor field,
            java.lang.Object value) {
          return super.addRepeatedField(field, value);
        }
        @java.lang.Override
        public Builder mergeFrom(com.google.protobuf.Message other) {
          if (other instanceof perfetto.protos.CommitDataRequestOuterClass.CommitDataRequest.ChunksToMove) {
            return mergeFrom((perfetto.protos.CommitDataRequestOuterClass.CommitDataRequest.ChunksToMove)other);
          } else {
            super.mergeFrom(other);
            return this;
          }
        }

        public Builder mergeFrom(perfetto.protos.CommitDataRequestOuterClass.CommitDataRequest.ChunksToMove other) {
          if (other == perfetto.protos.CommitDataRequestOuterClass.CommitDataRequest.ChunksToMove.getDefaultInstance()) return this;
          if (other.hasPage()) {
            setPage(other.getPage());
          }
          if (other.hasChunk()) {
            setChunk(other.getChunk());
          }
          if (other.hasTargetBuffer()) {
            setTargetBuffer(other.getTargetBuffer());
          }
          this.mergeUnknownFields(other.getUnknownFields());
          onChanged();
          return this;
        }

        @java.lang.Override
        public final boolean isInitialized() {
          return true;
        }

        @java.lang.Override
        public Builder mergeFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws java.io.IOException {
          if (extensionRegistry == null) {
            throw new java.lang.NullPointerException();
          }
          try {
            boolean done = false;
            while (!done) {
              int tag = input.readTag();
              switch (tag) {
                case 0:
                  done = true;
                  break;
                case 8: {
                  page_ = input.readUInt32();
                  bitField0_ |= 0x00000001;
                  break;
                } // case 8
                case 16: {
                  chunk_ = input.readUInt32();
                  bitField0_ |= 0x00000002;
                  break;
                } // case 16
                case 24: {
                  targetBuffer_ = input.readUInt32();
                  bitField0_ |= 0x00000004;
                  break;
                } // case 24
                default: {
                  if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                    done = true; // was an endgroup tag
                  }
                  break;
                } // default:
              } // switch (tag)
            } // while (!done)
          } catch (com.google.protobuf.InvalidProtocolBufferException e) {
            throw e.unwrapIOException();
          } finally {
            onChanged();
          } // finally
          return this;
        }
        private int bitField0_;

        private int page_ ;
        /**
         * <pre>
         * The 0-based index of the page in the Shared Memory Buffer.
         * </pre>
         *
         * <code>optional uint32 page = 1;</code>
         * @return Whether the page field is set.
         */
        @java.lang.Override
        public boolean hasPage() {
          return ((bitField0_ & 0x00000001) != 0);
        }
        /**
         * <pre>
         * The 0-based index of the page in the Shared Memory Buffer.
         * </pre>
         *
         * <code>optional uint32 page = 1;</code>
         * @return The page.
         */
        @java.lang.Override
        public int getPage() {
          return page_;
        }
        /**
         * <pre>
         * The 0-based index of the page in the Shared Memory Buffer.
         * </pre>
         *
         * <code>optional uint32 page = 1;</code>
         * @param value The page to set.
         * @return This builder for chaining.
         */
        public Builder setPage(int value) {
          
          page_ = value;
          bitField0_ |= 0x00000001;
          onChanged();
          return this;
        }
        /**
         * <pre>
         * The 0-based index of the page in the Shared Memory Buffer.
         * </pre>
         *
         * <code>optional uint32 page = 1;</code>
         * @return This builder for chaining.
         */
        public Builder clearPage() {
          bitField0_ = (bitField0_ & ~0x00000001);
          page_ = 0;
          onChanged();
          return this;
        }

        private int chunk_ ;
        /**
         * <pre>
         * The 0-based chunk index [0..13] within the page.
         * </pre>
         *
         * <code>optional uint32 chunk = 2;</code>
         * @return Whether the chunk field is set.
         */
        @java.lang.Override
        public boolean hasChunk() {
          return ((bitField0_ & 0x00000002) != 0);
        }
        /**
         * <pre>
         * The 0-based chunk index [0..13] within the page.
         * </pre>
         *
         * <code>optional uint32 chunk = 2;</code>
         * @return The chunk.
         */
        @java.lang.Override
        public int getChunk() {
          return chunk_;
        }
        /**
         * <pre>
         * The 0-based chunk index [0..13] within the page.
         * </pre>
         *
         * <code>optional uint32 chunk = 2;</code>
         * @param value The chunk to set.
         * @return This builder for chaining.
         */
        public Builder setChunk(int value) {
          
          chunk_ = value;
          bitField0_ |= 0x00000002;
          onChanged();
          return this;
        }
        /**
         * <pre>
         * The 0-based chunk index [0..13] within the page.
         * </pre>
         *
         * <code>optional uint32 chunk = 2;</code>
         * @return This builder for chaining.
         */
        public Builder clearChunk() {
          bitField0_ = (bitField0_ & ~0x00000002);
          chunk_ = 0;
          onChanged();
          return this;
        }

        private int targetBuffer_ ;
        /**
         * <pre>
         * The target buffer it should be moved onto. The service will check that
         * the producer is allowed to write into that buffer before the move.
         * </pre>
         *
         * <code>optional uint32 target_buffer = 3;</code>
         * @return Whether the targetBuffer field is set.
         */
        @java.lang.Override
        public boolean hasTargetBuffer() {
          return ((bitField0_ & 0x00000004) != 0);
        }
        /**
         * <pre>
         * The target buffer it should be moved onto. The service will check that
         * the producer is allowed to write into that buffer before the move.
         * </pre>
         *
         * <code>optional uint32 target_buffer = 3;</code>
         * @return The targetBuffer.
         */
        @java.lang.Override
        public int getTargetBuffer() {
          return targetBuffer_;
        }
        /**
         * <pre>
         * The target buffer it should be moved onto. The service will check that
         * the producer is allowed to write into that buffer before the move.
         * </pre>
         *
         * <code>optional uint32 target_buffer = 3;</code>
         * @param value The targetBuffer to set.
         * @return This builder for chaining.
         */
        public Builder setTargetBuffer(int value) {
          
          targetBuffer_ = value;
          bitField0_ |= 0x00000004;
          onChanged();
          return this;
        }
        /**
         * <pre>
         * The target buffer it should be moved onto. The service will check that
         * the producer is allowed to write into that buffer before the move.
         * </pre>
         *
         * <code>optional uint32 target_buffer = 3;</code>
         * @return This builder for chaining.
         */
        public Builder clearTargetBuffer() {
          bitField0_ = (bitField0_ & ~0x00000004);
          targetBuffer_ = 0;
          onChanged();
          return this;
        }
        @java.lang.Override
        public final Builder setUnknownFields(
            final com.google.protobuf.UnknownFieldSet unknownFields) {
          return super.setUnknownFields(unknownFields);
        }

        @java.lang.Override
        public final Builder mergeUnknownFields(
            final com.google.protobuf.UnknownFieldSet unknownFields) {
          return super.mergeUnknownFields(unknownFields);
        }


        // @@protoc_insertion_point(builder_scope:perfetto.protos.CommitDataRequest.ChunksToMove)
      }

      // @@protoc_insertion_point(class_scope:perfetto.protos.CommitDataRequest.ChunksToMove)
      private static final perfetto.protos.CommitDataRequestOuterClass.CommitDataRequest.ChunksToMove DEFAULT_INSTANCE;
      static {
        DEFAULT_INSTANCE = new perfetto.protos.CommitDataRequestOuterClass.CommitDataRequest.ChunksToMove();
      }

      public static perfetto.protos.CommitDataRequestOuterClass.CommitDataRequest.ChunksToMove getDefaultInstance() {
        return DEFAULT_INSTANCE;
      }

      @java.lang.Deprecated public static final com.google.protobuf.Parser<ChunksToMove>
          PARSER = new com.google.protobuf.AbstractParser<ChunksToMove>() {
        @java.lang.Override
        public ChunksToMove parsePartialFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws com.google.protobuf.InvalidProtocolBufferException {
          Builder builder = newBuilder();
          try {
            builder.mergeFrom(input, extensionRegistry);
          } catch (com.google.protobuf.InvalidProtocolBufferException e) {
            throw e.setUnfinishedMessage(builder.buildPartial());
          } catch (com.google.protobuf.UninitializedMessageException e) {
            throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
          } catch (java.io.IOException e) {
            throw new com.google.protobuf.InvalidProtocolBufferException(e)
                .setUnfinishedMessage(builder.buildPartial());
          }
          return builder.buildPartial();
        }
      };

      public static com.google.protobuf.Parser<ChunksToMove> parser() {
        return PARSER;
      }

      @java.lang.Override
      public com.google.protobuf.Parser<ChunksToMove> getParserForType() {
        return PARSER;
      }

      @java.lang.Override
      public perfetto.protos.CommitDataRequestOuterClass.CommitDataRequest.ChunksToMove getDefaultInstanceForType() {
        return DEFAULT_INSTANCE;
      }

    }

    public interface ChunkToPatchOrBuilder extends
        // @@protoc_insertion_point(interface_extends:perfetto.protos.CommitDataRequest.ChunkToPatch)
        com.google.protobuf.MessageOrBuilder {

      /**
       * <code>optional uint32 target_buffer = 1;</code>
       * @return Whether the targetBuffer field is set.
       */
      boolean hasTargetBuffer();
      /**
       * <code>optional uint32 target_buffer = 1;</code>
       * @return The targetBuffer.
       */
      int getTargetBuffer();

      /**
       * <pre>
       * {WriterID, ChunkID} uniquely identify a chunk for the current producer.
       * </pre>
       *
       * <code>optional uint32 writer_id = 2;</code>
       * @return Whether the writerId field is set.
       */
      boolean hasWriterId();
      /**
       * <pre>
       * {WriterID, ChunkID} uniquely identify a chunk for the current producer.
       * </pre>
       *
       * <code>optional uint32 writer_id = 2;</code>
       * @return The writerId.
       */
      int getWriterId();

      /**
       * <code>optional uint32 chunk_id = 3;</code>
       * @return Whether the chunkId field is set.
       */
      boolean hasChunkId();
      /**
       * <code>optional uint32 chunk_id = 3;</code>
       * @return The chunkId.
       */
      int getChunkId();

      /**
       * <pre>
       * List of patches to apply to the given chunk.
       * </pre>
       *
       * <code>repeated .perfetto.protos.CommitDataRequest.ChunkToPatch.Patch patches = 4;</code>
       */
      java.util.List<perfetto.protos.CommitDataRequestOuterClass.CommitDataRequest.ChunkToPatch.Patch> 
          getPatchesList();
      /**
       * <pre>
       * List of patches to apply to the given chunk.
       * </pre>
       *
       * <code>repeated .perfetto.protos.CommitDataRequest.ChunkToPatch.Patch patches = 4;</code>
       */
      perfetto.protos.CommitDataRequestOuterClass.CommitDataRequest.ChunkToPatch.Patch getPatches(int index);
      /**
       * <pre>
       * List of patches to apply to the given chunk.
       * </pre>
       *
       * <code>repeated .perfetto.protos.CommitDataRequest.ChunkToPatch.Patch patches = 4;</code>
       */
      int getPatchesCount();
      /**
       * <pre>
       * List of patches to apply to the given chunk.
       * </pre>
       *
       * <code>repeated .perfetto.protos.CommitDataRequest.ChunkToPatch.Patch patches = 4;</code>
       */
      java.util.List<? extends perfetto.protos.CommitDataRequestOuterClass.CommitDataRequest.ChunkToPatch.PatchOrBuilder> 
          getPatchesOrBuilderList();
      /**
       * <pre>
       * List of patches to apply to the given chunk.
       * </pre>
       *
       * <code>repeated .perfetto.protos.CommitDataRequest.ChunkToPatch.Patch patches = 4;</code>
       */
      perfetto.protos.CommitDataRequestOuterClass.CommitDataRequest.ChunkToPatch.PatchOrBuilder getPatchesOrBuilder(
          int index);

      /**
       * <pre>
       * When true more patches will follow in future requests and the chunk
       * should be still considered as patch-pending. When false the chunk becomes
       * eligible for reading.
       * </pre>
       *
       * <code>optional bool has_more_patches = 5;</code>
       * @return Whether the hasMorePatches field is set.
       */
      boolean hasHasMorePatches();
      /**
       * <pre>
       * When true more patches will follow in future requests and the chunk
       * should be still considered as patch-pending. When false the chunk becomes
       * eligible for reading.
       * </pre>
       *
       * <code>optional bool has_more_patches = 5;</code>
       * @return The hasMorePatches.
       */
      boolean getHasMorePatches();
    }
    /**
     * <pre>
     * Used to patch chunks that have already been sent to the service. The chunk
     * might not be in the shared memory buffer anymore as it could have been
     * moved by the service in response to a prior CommitDataRequest.
     * It is perfectly valid to patch a chunk that is being notified in the same
     * message (a chunk can show up both in the |changed_pages| and |patches|
     * field within the same CommitDataRequest message).
     * In other words, |chunks_to_patch| is always processed after
     * |chunks_to_move|.
     * </pre>
     *
     * Protobuf type {@code perfetto.protos.CommitDataRequest.ChunkToPatch}
     */
    public static final class ChunkToPatch extends
        com.google.protobuf.GeneratedMessageV3 implements
        // @@protoc_insertion_point(message_implements:perfetto.protos.CommitDataRequest.ChunkToPatch)
        ChunkToPatchOrBuilder {
    private static final long serialVersionUID = 0L;
      // Use ChunkToPatch.newBuilder() to construct.
      private ChunkToPatch(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
        super(builder);
      }
      private ChunkToPatch() {
        patches_ = java.util.Collections.emptyList();
      }

      @java.lang.Override
      @SuppressWarnings({"unused"})
      protected java.lang.Object newInstance(
          UnusedPrivateParameter unused) {
        return new ChunkToPatch();
      }

      @java.lang.Override
      public final com.google.protobuf.UnknownFieldSet
      getUnknownFields() {
        return this.unknownFields;
      }
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return perfetto.protos.CommitDataRequestOuterClass.internal_static_perfetto_protos_CommitDataRequest_ChunkToPatch_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return perfetto.protos.CommitDataRequestOuterClass.internal_static_perfetto_protos_CommitDataRequest_ChunkToPatch_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                perfetto.protos.CommitDataRequestOuterClass.CommitDataRequest.ChunkToPatch.class, perfetto.protos.CommitDataRequestOuterClass.CommitDataRequest.ChunkToPatch.Builder.class);
      }

      public interface PatchOrBuilder extends
          // @@protoc_insertion_point(interface_extends:perfetto.protos.CommitDataRequest.ChunkToPatch.Patch)
          com.google.protobuf.MessageOrBuilder {

        /**
         * <pre>
         * Offset in bytes from the start of the chunk payload. e.g., offset == 0
         * corresponds to the first byte of the first packet (or fragment) in the
         * chunk.
         * </pre>
         *
         * <code>optional uint32 offset = 1;</code>
         * @return Whether the offset field is set.
         */
        boolean hasOffset();
        /**
         * <pre>
         * Offset in bytes from the start of the chunk payload. e.g., offset == 0
         * corresponds to the first byte of the first packet (or fragment) in the
         * chunk.
         * </pre>
         *
         * <code>optional uint32 offset = 1;</code>
         * @return The offset.
         */
        int getOffset();

        /**
         * <pre>
         * Bytes to patch at the given offset.
         * </pre>
         *
         * <code>optional bytes data = 2;</code>
         * @return Whether the data field is set.
         */
        boolean hasData();
        /**
         * <pre>
         * Bytes to patch at the given offset.
         * </pre>
         *
         * <code>optional bytes data = 2;</code>
         * @return The data.
         */
        com.google.protobuf.ByteString getData();
      }
      /**
       * Protobuf type {@code perfetto.protos.CommitDataRequest.ChunkToPatch.Patch}
       */
      public static final class Patch extends
          com.google.protobuf.GeneratedMessageV3 implements
          // @@protoc_insertion_point(message_implements:perfetto.protos.CommitDataRequest.ChunkToPatch.Patch)
          PatchOrBuilder {
      private static final long serialVersionUID = 0L;
        // Use Patch.newBuilder() to construct.
        private Patch(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
          super(builder);
        }
        private Patch() {
          data_ = com.google.protobuf.ByteString.EMPTY;
        }

        @java.lang.Override
        @SuppressWarnings({"unused"})
        protected java.lang.Object newInstance(
            UnusedPrivateParameter unused) {
          return new Patch();
        }

        @java.lang.Override
        public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
          return this.unknownFields;
        }
        public static final com.google.protobuf.Descriptors.Descriptor
            getDescriptor() {
          return perfetto.protos.CommitDataRequestOuterClass.internal_static_perfetto_protos_CommitDataRequest_ChunkToPatch_Patch_descriptor;
        }

        @java.lang.Override
        protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
            internalGetFieldAccessorTable() {
          return perfetto.protos.CommitDataRequestOuterClass.internal_static_perfetto_protos_CommitDataRequest_ChunkToPatch_Patch_fieldAccessorTable
              .ensureFieldAccessorsInitialized(
                  perfetto.protos.CommitDataRequestOuterClass.CommitDataRequest.ChunkToPatch.Patch.class, perfetto.protos.CommitDataRequestOuterClass.CommitDataRequest.ChunkToPatch.Patch.Builder.class);
        }

        private int bitField0_;
        public static final int OFFSET_FIELD_NUMBER = 1;
        private int offset_ = 0;
        /**
         * <pre>
         * Offset in bytes from the start of the chunk payload. e.g., offset == 0
         * corresponds to the first byte of the first packet (or fragment) in the
         * chunk.
         * </pre>
         *
         * <code>optional uint32 offset = 1;</code>
         * @return Whether the offset field is set.
         */
        @java.lang.Override
        public boolean hasOffset() {
          return ((bitField0_ & 0x00000001) != 0);
        }
        /**
         * <pre>
         * Offset in bytes from the start of the chunk payload. e.g., offset == 0
         * corresponds to the first byte of the first packet (or fragment) in the
         * chunk.
         * </pre>
         *
         * <code>optional uint32 offset = 1;</code>
         * @return The offset.
         */
        @java.lang.Override
        public int getOffset() {
          return offset_;
        }

        public static final int DATA_FIELD_NUMBER = 2;
        private com.google.protobuf.ByteString data_ = com.google.protobuf.ByteString.EMPTY;
        /**
         * <pre>
         * Bytes to patch at the given offset.
         * </pre>
         *
         * <code>optional bytes data = 2;</code>
         * @return Whether the data field is set.
         */
        @java.lang.Override
        public boolean hasData() {
          return ((bitField0_ & 0x00000002) != 0);
        }
        /**
         * <pre>
         * Bytes to patch at the given offset.
         * </pre>
         *
         * <code>optional bytes data = 2;</code>
         * @return The data.
         */
        @java.lang.Override
        public com.google.protobuf.ByteString getData() {
          return data_;
        }

        private byte memoizedIsInitialized = -1;
        @java.lang.Override
        public final boolean isInitialized() {
          byte isInitialized = memoizedIsInitialized;
          if (isInitialized == 1) return true;
          if (isInitialized == 0) return false;

          memoizedIsInitialized = 1;
          return true;
        }

        @java.lang.Override
        public void writeTo(com.google.protobuf.CodedOutputStream output)
                            throws java.io.IOException {
          if (((bitField0_ & 0x00000001) != 0)) {
            output.writeUInt32(1, offset_);
          }
          if (((bitField0_ & 0x00000002) != 0)) {
            output.writeBytes(2, data_);
          }
          getUnknownFields().writeTo(output);
        }

        @java.lang.Override
        public int getSerializedSize() {
          int size = memoizedSize;
          if (size != -1) return size;

          size = 0;
          if (((bitField0_ & 0x00000001) != 0)) {
            size += com.google.protobuf.CodedOutputStream
              .computeUInt32Size(1, offset_);
          }
          if (((bitField0_ & 0x00000002) != 0)) {
            size += com.google.protobuf.CodedOutputStream
              .computeBytesSize(2, data_);
          }
          size += getUnknownFields().getSerializedSize();
          memoizedSize = size;
          return size;
        }

        @java.lang.Override
        public boolean equals(final java.lang.Object obj) {
          if (obj == this) {
           return true;
          }
          if (!(obj instanceof perfetto.protos.CommitDataRequestOuterClass.CommitDataRequest.ChunkToPatch.Patch)) {
            return super.equals(obj);
          }
          perfetto.protos.CommitDataRequestOuterClass.CommitDataRequest.ChunkToPatch.Patch other = (perfetto.protos.CommitDataRequestOuterClass.CommitDataRequest.ChunkToPatch.Patch) obj;

          if (hasOffset() != other.hasOffset()) return false;
          if (hasOffset()) {
            if (getOffset()
                != other.getOffset()) return false;
          }
          if (hasData() != other.hasData()) return false;
          if (hasData()) {
            if (!getData()
                .equals(other.getData())) return false;
          }
          if (!getUnknownFields().equals(other.getUnknownFields())) return false;
          return true;
        }

        @java.lang.Override
        public int hashCode() {
          if (memoizedHashCode != 0) {
            return memoizedHashCode;
          }
          int hash = 41;
          hash = (19 * hash) + getDescriptor().hashCode();
          if (hasOffset()) {
            hash = (37 * hash) + OFFSET_FIELD_NUMBER;
            hash = (53 * hash) + getOffset();
          }
          if (hasData()) {
            hash = (37 * hash) + DATA_FIELD_NUMBER;
            hash = (53 * hash) + getData().hashCode();
          }
          hash = (29 * hash) + getUnknownFields().hashCode();
          memoizedHashCode = hash;
          return hash;
        }

        public static perfetto.protos.CommitDataRequestOuterClass.CommitDataRequest.ChunkToPatch.Patch parseFrom(
            java.nio.ByteBuffer data)
            throws com.google.protobuf.InvalidProtocolBufferException {
          return PARSER.parseFrom(data);
        }
        public static perfetto.protos.CommitDataRequestOuterClass.CommitDataRequest.ChunkToPatch.Patch parseFrom(
            java.nio.ByteBuffer data,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws com.google.protobuf.InvalidProtocolBufferException {
          return PARSER.parseFrom(data, extensionRegistry);
        }
        public static perfetto.protos.CommitDataRequestOuterClass.CommitDataRequest.ChunkToPatch.Patch parseFrom(
            com.google.protobuf.ByteString data)
            throws com.google.protobuf.InvalidProtocolBufferException {
          return PARSER.parseFrom(data);
        }
        public static perfetto.protos.CommitDataRequestOuterClass.CommitDataRequest.ChunkToPatch.Patch parseFrom(
            com.google.protobuf.ByteString data,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws com.google.protobuf.InvalidProtocolBufferException {
          return PARSER.parseFrom(data, extensionRegistry);
        }
        public static perfetto.protos.CommitDataRequestOuterClass.CommitDataRequest.ChunkToPatch.Patch parseFrom(byte[] data)
            throws com.google.protobuf.InvalidProtocolBufferException {
          return PARSER.parseFrom(data);
        }
        public static perfetto.protos.CommitDataRequestOuterClass.CommitDataRequest.ChunkToPatch.Patch parseFrom(
            byte[] data,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws com.google.protobuf.InvalidProtocolBufferException {
          return PARSER.parseFrom(data, extensionRegistry);
        }
        public static perfetto.protos.CommitDataRequestOuterClass.CommitDataRequest.ChunkToPatch.Patch parseFrom(java.io.InputStream input)
            throws java.io.IOException {
          return com.google.protobuf.GeneratedMessageV3
              .parseWithIOException(PARSER, input);
        }
        public static perfetto.protos.CommitDataRequestOuterClass.CommitDataRequest.ChunkToPatch.Patch parseFrom(
            java.io.InputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws java.io.IOException {
          return com.google.protobuf.GeneratedMessageV3
              .parseWithIOException(PARSER, input, extensionRegistry);
        }
        public static perfetto.protos.CommitDataRequestOuterClass.CommitDataRequest.ChunkToPatch.Patch parseDelimitedFrom(java.io.InputStream input)
            throws java.io.IOException {
          return com.google.protobuf.GeneratedMessageV3
              .parseDelimitedWithIOException(PARSER, input);
        }
        public static perfetto.protos.CommitDataRequestOuterClass.CommitDataRequest.ChunkToPatch.Patch parseDelimitedFrom(
            java.io.InputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws java.io.IOException {
          return com.google.protobuf.GeneratedMessageV3
              .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
        }
        public static perfetto.protos.CommitDataRequestOuterClass.CommitDataRequest.ChunkToPatch.Patch parseFrom(
            com.google.protobuf.CodedInputStream input)
            throws java.io.IOException {
          return com.google.protobuf.GeneratedMessageV3
              .parseWithIOException(PARSER, input);
        }
        public static perfetto.protos.CommitDataRequestOuterClass.CommitDataRequest.ChunkToPatch.Patch parseFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws java.io.IOException {
          return com.google.protobuf.GeneratedMessageV3
              .parseWithIOException(PARSER, input, extensionRegistry);
        }

        @java.lang.Override
        public Builder newBuilderForType() { return newBuilder(); }
        public static Builder newBuilder() {
          return DEFAULT_INSTANCE.toBuilder();
        }
        public static Builder newBuilder(perfetto.protos.CommitDataRequestOuterClass.CommitDataRequest.ChunkToPatch.Patch prototype) {
          return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
        }
        @java.lang.Override
        public Builder toBuilder() {
          return this == DEFAULT_INSTANCE
              ? new Builder() : new Builder().mergeFrom(this);
        }

        @java.lang.Override
        protected Builder newBuilderForType(
            com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
          Builder builder = new Builder(parent);
          return builder;
        }
        /**
         * Protobuf type {@code perfetto.protos.CommitDataRequest.ChunkToPatch.Patch}
         */
        public static final class Builder extends
            com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
            // @@protoc_insertion_point(builder_implements:perfetto.protos.CommitDataRequest.ChunkToPatch.Patch)
            perfetto.protos.CommitDataRequestOuterClass.CommitDataRequest.ChunkToPatch.PatchOrBuilder {
          public static final com.google.protobuf.Descriptors.Descriptor
              getDescriptor() {
            return perfetto.protos.CommitDataRequestOuterClass.internal_static_perfetto_protos_CommitDataRequest_ChunkToPatch_Patch_descriptor;
          }

          @java.lang.Override
          protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
              internalGetFieldAccessorTable() {
            return perfetto.protos.CommitDataRequestOuterClass.internal_static_perfetto_protos_CommitDataRequest_ChunkToPatch_Patch_fieldAccessorTable
                .ensureFieldAccessorsInitialized(
                    perfetto.protos.CommitDataRequestOuterClass.CommitDataRequest.ChunkToPatch.Patch.class, perfetto.protos.CommitDataRequestOuterClass.CommitDataRequest.ChunkToPatch.Patch.Builder.class);
          }

          // Construct using perfetto.protos.CommitDataRequestOuterClass.CommitDataRequest.ChunkToPatch.Patch.newBuilder()
          private Builder() {

          }

          private Builder(
              com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
            super(parent);

          }
          @java.lang.Override
          public Builder clear() {
            super.clear();
            bitField0_ = 0;
            offset_ = 0;
            data_ = com.google.protobuf.ByteString.EMPTY;
            return this;
          }

          @java.lang.Override
          public com.google.protobuf.Descriptors.Descriptor
              getDescriptorForType() {
            return perfetto.protos.CommitDataRequestOuterClass.internal_static_perfetto_protos_CommitDataRequest_ChunkToPatch_Patch_descriptor;
          }

          @java.lang.Override
          public perfetto.protos.CommitDataRequestOuterClass.CommitDataRequest.ChunkToPatch.Patch getDefaultInstanceForType() {
            return perfetto.protos.CommitDataRequestOuterClass.CommitDataRequest.ChunkToPatch.Patch.getDefaultInstance();
          }

          @java.lang.Override
          public perfetto.protos.CommitDataRequestOuterClass.CommitDataRequest.ChunkToPatch.Patch build() {
            perfetto.protos.CommitDataRequestOuterClass.CommitDataRequest.ChunkToPatch.Patch result = buildPartial();
            if (!result.isInitialized()) {
              throw newUninitializedMessageException(result);
            }
            return result;
          }

          @java.lang.Override
          public perfetto.protos.CommitDataRequestOuterClass.CommitDataRequest.ChunkToPatch.Patch buildPartial() {
            perfetto.protos.CommitDataRequestOuterClass.CommitDataRequest.ChunkToPatch.Patch result = new perfetto.protos.CommitDataRequestOuterClass.CommitDataRequest.ChunkToPatch.Patch(this);
            if (bitField0_ != 0) { buildPartial0(result); }
            onBuilt();
            return result;
          }

          private void buildPartial0(perfetto.protos.CommitDataRequestOuterClass.CommitDataRequest.ChunkToPatch.Patch result) {
            int from_bitField0_ = bitField0_;
            int to_bitField0_ = 0;
            if (((from_bitField0_ & 0x00000001) != 0)) {
              result.offset_ = offset_;
              to_bitField0_ |= 0x00000001;
            }
            if (((from_bitField0_ & 0x00000002) != 0)) {
              result.data_ = data_;
              to_bitField0_ |= 0x00000002;
            }
            result.bitField0_ |= to_bitField0_;
          }

          @java.lang.Override
          public Builder clone() {
            return super.clone();
          }
          @java.lang.Override
          public Builder setField(
              com.google.protobuf.Descriptors.FieldDescriptor field,
              java.lang.Object value) {
            return super.setField(field, value);
          }
          @java.lang.Override
          public Builder clearField(
              com.google.protobuf.Descriptors.FieldDescriptor field) {
            return super.clearField(field);
          }
          @java.lang.Override
          public Builder clearOneof(
              com.google.protobuf.Descriptors.OneofDescriptor oneof) {
            return super.clearOneof(oneof);
          }
          @java.lang.Override
          public Builder setRepeatedField(
              com.google.protobuf.Descriptors.FieldDescriptor field,
              int index, java.lang.Object value) {
            return super.setRepeatedField(field, index, value);
          }
          @java.lang.Override
          public Builder addRepeatedField(
              com.google.protobuf.Descriptors.FieldDescriptor field,
              java.lang.Object value) {
            return super.addRepeatedField(field, value);
          }
          @java.lang.Override
          public Builder mergeFrom(com.google.protobuf.Message other) {
            if (other instanceof perfetto.protos.CommitDataRequestOuterClass.CommitDataRequest.ChunkToPatch.Patch) {
              return mergeFrom((perfetto.protos.CommitDataRequestOuterClass.CommitDataRequest.ChunkToPatch.Patch)other);
            } else {
              super.mergeFrom(other);
              return this;
            }
          }

          public Builder mergeFrom(perfetto.protos.CommitDataRequestOuterClass.CommitDataRequest.ChunkToPatch.Patch other) {
            if (other == perfetto.protos.CommitDataRequestOuterClass.CommitDataRequest.ChunkToPatch.Patch.getDefaultInstance()) return this;
            if (other.hasOffset()) {
              setOffset(other.getOffset());
            }
            if (other.hasData()) {
              setData(other.getData());
            }
            this.mergeUnknownFields(other.getUnknownFields());
            onChanged();
            return this;
          }

          @java.lang.Override
          public final boolean isInitialized() {
            return true;
          }

          @java.lang.Override
          public Builder mergeFrom(
              com.google.protobuf.CodedInputStream input,
              com.google.protobuf.ExtensionRegistryLite extensionRegistry)
              throws java.io.IOException {
            if (extensionRegistry == null) {
              throw new java.lang.NullPointerException();
            }
            try {
              boolean done = false;
              while (!done) {
                int tag = input.readTag();
                switch (tag) {
                  case 0:
                    done = true;
                    break;
                  case 8: {
                    offset_ = input.readUInt32();
                    bitField0_ |= 0x00000001;
                    break;
                  } // case 8
                  case 18: {
                    data_ = input.readBytes();
                    bitField0_ |= 0x00000002;
                    break;
                  } // case 18
                  default: {
                    if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                      done = true; // was an endgroup tag
                    }
                    break;
                  } // default:
                } // switch (tag)
              } // while (!done)
            } catch (com.google.protobuf.InvalidProtocolBufferException e) {
              throw e.unwrapIOException();
            } finally {
              onChanged();
            } // finally
            return this;
          }
          private int bitField0_;

          private int offset_ ;
          /**
           * <pre>
           * Offset in bytes from the start of the chunk payload. e.g., offset == 0
           * corresponds to the first byte of the first packet (or fragment) in the
           * chunk.
           * </pre>
           *
           * <code>optional uint32 offset = 1;</code>
           * @return Whether the offset field is set.
           */
          @java.lang.Override
          public boolean hasOffset() {
            return ((bitField0_ & 0x00000001) != 0);
          }
          /**
           * <pre>
           * Offset in bytes from the start of the chunk payload. e.g., offset == 0
           * corresponds to the first byte of the first packet (or fragment) in the
           * chunk.
           * </pre>
           *
           * <code>optional uint32 offset = 1;</code>
           * @return The offset.
           */
          @java.lang.Override
          public int getOffset() {
            return offset_;
          }
          /**
           * <pre>
           * Offset in bytes from the start of the chunk payload. e.g., offset == 0
           * corresponds to the first byte of the first packet (or fragment) in the
           * chunk.
           * </pre>
           *
           * <code>optional uint32 offset = 1;</code>
           * @param value The offset to set.
           * @return This builder for chaining.
           */
          public Builder setOffset(int value) {
            
            offset_ = value;
            bitField0_ |= 0x00000001;
            onChanged();
            return this;
          }
          /**
           * <pre>
           * Offset in bytes from the start of the chunk payload. e.g., offset == 0
           * corresponds to the first byte of the first packet (or fragment) in the
           * chunk.
           * </pre>
           *
           * <code>optional uint32 offset = 1;</code>
           * @return This builder for chaining.
           */
          public Builder clearOffset() {
            bitField0_ = (bitField0_ & ~0x00000001);
            offset_ = 0;
            onChanged();
            return this;
          }

          private com.google.protobuf.ByteString data_ = com.google.protobuf.ByteString.EMPTY;
          /**
           * <pre>
           * Bytes to patch at the given offset.
           * </pre>
           *
           * <code>optional bytes data = 2;</code>
           * @return Whether the data field is set.
           */
          @java.lang.Override
          public boolean hasData() {
            return ((bitField0_ & 0x00000002) != 0);
          }
          /**
           * <pre>
           * Bytes to patch at the given offset.
           * </pre>
           *
           * <code>optional bytes data = 2;</code>
           * @return The data.
           */
          @java.lang.Override
          public com.google.protobuf.ByteString getData() {
            return data_;
          }
          /**
           * <pre>
           * Bytes to patch at the given offset.
           * </pre>
           *
           * <code>optional bytes data = 2;</code>
           * @param value The data to set.
           * @return This builder for chaining.
           */
          public Builder setData(com.google.protobuf.ByteString value) {
            if (value == null) { throw new NullPointerException(); }
            data_ = value;
            bitField0_ |= 0x00000002;
            onChanged();
            return this;
          }
          /**
           * <pre>
           * Bytes to patch at the given offset.
           * </pre>
           *
           * <code>optional bytes data = 2;</code>
           * @return This builder for chaining.
           */
          public Builder clearData() {
            bitField0_ = (bitField0_ & ~0x00000002);
            data_ = getDefaultInstance().getData();
            onChanged();
            return this;
          }
          @java.lang.Override
          public final Builder setUnknownFields(
              final com.google.protobuf.UnknownFieldSet unknownFields) {
            return super.setUnknownFields(unknownFields);
          }

          @java.lang.Override
          public final Builder mergeUnknownFields(
              final com.google.protobuf.UnknownFieldSet unknownFields) {
            return super.mergeUnknownFields(unknownFields);
          }


          // @@protoc_insertion_point(builder_scope:perfetto.protos.CommitDataRequest.ChunkToPatch.Patch)
        }

        // @@protoc_insertion_point(class_scope:perfetto.protos.CommitDataRequest.ChunkToPatch.Patch)
        private static final perfetto.protos.CommitDataRequestOuterClass.CommitDataRequest.ChunkToPatch.Patch DEFAULT_INSTANCE;
        static {
          DEFAULT_INSTANCE = new perfetto.protos.CommitDataRequestOuterClass.CommitDataRequest.ChunkToPatch.Patch();
        }

        public static perfetto.protos.CommitDataRequestOuterClass.CommitDataRequest.ChunkToPatch.Patch getDefaultInstance() {
          return DEFAULT_INSTANCE;
        }

        @java.lang.Deprecated public static final com.google.protobuf.Parser<Patch>
            PARSER = new com.google.protobuf.AbstractParser<Patch>() {
          @java.lang.Override
          public Patch parsePartialFrom(
              com.google.protobuf.CodedInputStream input,
              com.google.protobuf.ExtensionRegistryLite extensionRegistry)
              throws com.google.protobuf.InvalidProtocolBufferException {
            Builder builder = newBuilder();
            try {
              builder.mergeFrom(input, extensionRegistry);
            } catch (com.google.protobuf.InvalidProtocolBufferException e) {
              throw e.setUnfinishedMessage(builder.buildPartial());
            } catch (com.google.protobuf.UninitializedMessageException e) {
              throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
            } catch (java.io.IOException e) {
              throw new com.google.protobuf.InvalidProtocolBufferException(e)
                  .setUnfinishedMessage(builder.buildPartial());
            }
            return builder.buildPartial();
          }
        };

        public static com.google.protobuf.Parser<Patch> parser() {
          return PARSER;
        }

        @java.lang.Override
        public com.google.protobuf.Parser<Patch> getParserForType() {
          return PARSER;
        }

        @java.lang.Override
        public perfetto.protos.CommitDataRequestOuterClass.CommitDataRequest.ChunkToPatch.Patch getDefaultInstanceForType() {
          return DEFAULT_INSTANCE;
        }

      }

      private int bitField0_;
      public static final int TARGET_BUFFER_FIELD_NUMBER = 1;
      private int targetBuffer_ = 0;
      /**
       * <code>optional uint32 target_buffer = 1;</code>
       * @return Whether the targetBuffer field is set.
       */
      @java.lang.Override
      public boolean hasTargetBuffer() {
        return ((bitField0_ & 0x00000001) != 0);
      }
      /**
       * <code>optional uint32 target_buffer = 1;</code>
       * @return The targetBuffer.
       */
      @java.lang.Override
      public int getTargetBuffer() {
        return targetBuffer_;
      }

      public static final int WRITER_ID_FIELD_NUMBER = 2;
      private int writerId_ = 0;
      /**
       * <pre>
       * {WriterID, ChunkID} uniquely identify a chunk for the current producer.
       * </pre>
       *
       * <code>optional uint32 writer_id = 2;</code>
       * @return Whether the writerId field is set.
       */
      @java.lang.Override
      public boolean hasWriterId() {
        return ((bitField0_ & 0x00000002) != 0);
      }
      /**
       * <pre>
       * {WriterID, ChunkID} uniquely identify a chunk for the current producer.
       * </pre>
       *
       * <code>optional uint32 writer_id = 2;</code>
       * @return The writerId.
       */
      @java.lang.Override
      public int getWriterId() {
        return writerId_;
      }

      public static final int CHUNK_ID_FIELD_NUMBER = 3;
      private int chunkId_ = 0;
      /**
       * <code>optional uint32 chunk_id = 3;</code>
       * @return Whether the chunkId field is set.
       */
      @java.lang.Override
      public boolean hasChunkId() {
        return ((bitField0_ & 0x00000004) != 0);
      }
      /**
       * <code>optional uint32 chunk_id = 3;</code>
       * @return The chunkId.
       */
      @java.lang.Override
      public int getChunkId() {
        return chunkId_;
      }

      public static final int PATCHES_FIELD_NUMBER = 4;
      @SuppressWarnings("serial")
      private java.util.List<perfetto.protos.CommitDataRequestOuterClass.CommitDataRequest.ChunkToPatch.Patch> patches_;
      /**
       * <pre>
       * List of patches to apply to the given chunk.
       * </pre>
       *
       * <code>repeated .perfetto.protos.CommitDataRequest.ChunkToPatch.Patch patches = 4;</code>
       */
      @java.lang.Override
      public java.util.List<perfetto.protos.CommitDataRequestOuterClass.CommitDataRequest.ChunkToPatch.Patch> getPatchesList() {
        return patches_;
      }
      /**
       * <pre>
       * List of patches to apply to the given chunk.
       * </pre>
       *
       * <code>repeated .perfetto.protos.CommitDataRequest.ChunkToPatch.Patch patches = 4;</code>
       */
      @java.lang.Override
      public java.util.List<? extends perfetto.protos.CommitDataRequestOuterClass.CommitDataRequest.ChunkToPatch.PatchOrBuilder> 
          getPatchesOrBuilderList() {
        return patches_;
      }
      /**
       * <pre>
       * List of patches to apply to the given chunk.
       * </pre>
       *
       * <code>repeated .perfetto.protos.CommitDataRequest.ChunkToPatch.Patch patches = 4;</code>
       */
      @java.lang.Override
      public int getPatchesCount() {
        return patches_.size();
      }
      /**
       * <pre>
       * List of patches to apply to the given chunk.
       * </pre>
       *
       * <code>repeated .perfetto.protos.CommitDataRequest.ChunkToPatch.Patch patches = 4;</code>
       */
      @java.lang.Override
      public perfetto.protos.CommitDataRequestOuterClass.CommitDataRequest.ChunkToPatch.Patch getPatches(int index) {
        return patches_.get(index);
      }
      /**
       * <pre>
       * List of patches to apply to the given chunk.
       * </pre>
       *
       * <code>repeated .perfetto.protos.CommitDataRequest.ChunkToPatch.Patch patches = 4;</code>
       */
      @java.lang.Override
      public perfetto.protos.CommitDataRequestOuterClass.CommitDataRequest.ChunkToPatch.PatchOrBuilder getPatchesOrBuilder(
          int index) {
        return patches_.get(index);
      }

      public static final int HAS_MORE_PATCHES_FIELD_NUMBER = 5;
      private boolean hasMorePatches_ = false;
      /**
       * <pre>
       * When true more patches will follow in future requests and the chunk
       * should be still considered as patch-pending. When false the chunk becomes
       * eligible for reading.
       * </pre>
       *
       * <code>optional bool has_more_patches = 5;</code>
       * @return Whether the hasMorePatches field is set.
       */
      @java.lang.Override
      public boolean hasHasMorePatches() {
        return ((bitField0_ & 0x00000008) != 0);
      }
      /**
       * <pre>
       * When true more patches will follow in future requests and the chunk
       * should be still considered as patch-pending. When false the chunk becomes
       * eligible for reading.
       * </pre>
       *
       * <code>optional bool has_more_patches = 5;</code>
       * @return The hasMorePatches.
       */
      @java.lang.Override
      public boolean getHasMorePatches() {
        return hasMorePatches_;
      }

      private byte memoizedIsInitialized = -1;
      @java.lang.Override
      public final boolean isInitialized() {
        byte isInitialized = memoizedIsInitialized;
        if (isInitialized == 1) return true;
        if (isInitialized == 0) return false;

        memoizedIsInitialized = 1;
        return true;
      }

      @java.lang.Override
      public void writeTo(com.google.protobuf.CodedOutputStream output)
                          throws java.io.IOException {
        if (((bitField0_ & 0x00000001) != 0)) {
          output.writeUInt32(1, targetBuffer_);
        }
        if (((bitField0_ & 0x00000002) != 0)) {
          output.writeUInt32(2, writerId_);
        }
        if (((bitField0_ & 0x00000004) != 0)) {
          output.writeUInt32(3, chunkId_);
        }
        for (int i = 0; i < patches_.size(); i++) {
          output.writeMessage(4, patches_.get(i));
        }
        if (((bitField0_ & 0x00000008) != 0)) {
          output.writeBool(5, hasMorePatches_);
        }
        getUnknownFields().writeTo(output);
      }

      @java.lang.Override
      public int getSerializedSize() {
        int size = memoizedSize;
        if (size != -1) return size;

        size = 0;
        if (((bitField0_ & 0x00000001) != 0)) {
          size += com.google.protobuf.CodedOutputStream
            .computeUInt32Size(1, targetBuffer_);
        }
        if (((bitField0_ & 0x00000002) != 0)) {
          size += com.google.protobuf.CodedOutputStream
            .computeUInt32Size(2, writerId_);
        }
        if (((bitField0_ & 0x00000004) != 0)) {
          size += com.google.protobuf.CodedOutputStream
            .computeUInt32Size(3, chunkId_);
        }
        for (int i = 0; i < patches_.size(); i++) {
          size += com.google.protobuf.CodedOutputStream
            .computeMessageSize(4, patches_.get(i));
        }
        if (((bitField0_ & 0x00000008) != 0)) {
          size += com.google.protobuf.CodedOutputStream
            .computeBoolSize(5, hasMorePatches_);
        }
        size += getUnknownFields().getSerializedSize();
        memoizedSize = size;
        return size;
      }

      @java.lang.Override
      public boolean equals(final java.lang.Object obj) {
        if (obj == this) {
         return true;
        }
        if (!(obj instanceof perfetto.protos.CommitDataRequestOuterClass.CommitDataRequest.ChunkToPatch)) {
          return super.equals(obj);
        }
        perfetto.protos.CommitDataRequestOuterClass.CommitDataRequest.ChunkToPatch other = (perfetto.protos.CommitDataRequestOuterClass.CommitDataRequest.ChunkToPatch) obj;

        if (hasTargetBuffer() != other.hasTargetBuffer()) return false;
        if (hasTargetBuffer()) {
          if (getTargetBuffer()
              != other.getTargetBuffer()) return false;
        }
        if (hasWriterId() != other.hasWriterId()) return false;
        if (hasWriterId()) {
          if (getWriterId()
              != other.getWriterId()) return false;
        }
        if (hasChunkId() != other.hasChunkId()) return false;
        if (hasChunkId()) {
          if (getChunkId()
              != other.getChunkId()) return false;
        }
        if (!getPatchesList()
            .equals(other.getPatchesList())) return false;
        if (hasHasMorePatches() != other.hasHasMorePatches()) return false;
        if (hasHasMorePatches()) {
          if (getHasMorePatches()
              != other.getHasMorePatches()) return false;
        }
        if (!getUnknownFields().equals(other.getUnknownFields())) return false;
        return true;
      }

      @java.lang.Override
      public int hashCode() {
        if (memoizedHashCode != 0) {
          return memoizedHashCode;
        }
        int hash = 41;
        hash = (19 * hash) + getDescriptor().hashCode();
        if (hasTargetBuffer()) {
          hash = (37 * hash) + TARGET_BUFFER_FIELD_NUMBER;
          hash = (53 * hash) + getTargetBuffer();
        }
        if (hasWriterId()) {
          hash = (37 * hash) + WRITER_ID_FIELD_NUMBER;
          hash = (53 * hash) + getWriterId();
        }
        if (hasChunkId()) {
          hash = (37 * hash) + CHUNK_ID_FIELD_NUMBER;
          hash = (53 * hash) + getChunkId();
        }
        if (getPatchesCount() > 0) {
          hash = (37 * hash) + PATCHES_FIELD_NUMBER;
          hash = (53 * hash) + getPatchesList().hashCode();
        }
        if (hasHasMorePatches()) {
          hash = (37 * hash) + HAS_MORE_PATCHES_FIELD_NUMBER;
          hash = (53 * hash) + com.google.protobuf.Internal.hashBoolean(
              getHasMorePatches());
        }
        hash = (29 * hash) + getUnknownFields().hashCode();
        memoizedHashCode = hash;
        return hash;
      }

      public static perfetto.protos.CommitDataRequestOuterClass.CommitDataRequest.ChunkToPatch parseFrom(
          java.nio.ByteBuffer data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static perfetto.protos.CommitDataRequestOuterClass.CommitDataRequest.ChunkToPatch parseFrom(
          java.nio.ByteBuffer data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static perfetto.protos.CommitDataRequestOuterClass.CommitDataRequest.ChunkToPatch parseFrom(
          com.google.protobuf.ByteString data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static perfetto.protos.CommitDataRequestOuterClass.CommitDataRequest.ChunkToPatch parseFrom(
          com.google.protobuf.ByteString data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static perfetto.protos.CommitDataRequestOuterClass.CommitDataRequest.ChunkToPatch parseFrom(byte[] data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static perfetto.protos.CommitDataRequestOuterClass.CommitDataRequest.ChunkToPatch parseFrom(
          byte[] data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static perfetto.protos.CommitDataRequestOuterClass.CommitDataRequest.ChunkToPatch parseFrom(java.io.InputStream input)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseWithIOException(PARSER, input);
      }
      public static perfetto.protos.CommitDataRequestOuterClass.CommitDataRequest.ChunkToPatch parseFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseWithIOException(PARSER, input, extensionRegistry);
      }
      public static perfetto.protos.CommitDataRequestOuterClass.CommitDataRequest.ChunkToPatch parseDelimitedFrom(java.io.InputStream input)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseDelimitedWithIOException(PARSER, input);
      }
      public static perfetto.protos.CommitDataRequestOuterClass.CommitDataRequest.ChunkToPatch parseDelimitedFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
      }
      public static perfetto.protos.CommitDataRequestOuterClass.CommitDataRequest.ChunkToPatch parseFrom(
          com.google.protobuf.CodedInputStream input)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseWithIOException(PARSER, input);
      }
      public static perfetto.protos.CommitDataRequestOuterClass.CommitDataRequest.ChunkToPatch parseFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseWithIOException(PARSER, input, extensionRegistry);
      }

      @java.lang.Override
      public Builder newBuilderForType() { return newBuilder(); }
      public static Builder newBuilder() {
        return DEFAULT_INSTANCE.toBuilder();
      }
      public static Builder newBuilder(perfetto.protos.CommitDataRequestOuterClass.CommitDataRequest.ChunkToPatch prototype) {
        return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
      }
      @java.lang.Override
      public Builder toBuilder() {
        return this == DEFAULT_INSTANCE
            ? new Builder() : new Builder().mergeFrom(this);
      }

      @java.lang.Override
      protected Builder newBuilderForType(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        Builder builder = new Builder(parent);
        return builder;
      }
      /**
       * <pre>
       * Used to patch chunks that have already been sent to the service. The chunk
       * might not be in the shared memory buffer anymore as it could have been
       * moved by the service in response to a prior CommitDataRequest.
       * It is perfectly valid to patch a chunk that is being notified in the same
       * message (a chunk can show up both in the |changed_pages| and |patches|
       * field within the same CommitDataRequest message).
       * In other words, |chunks_to_patch| is always processed after
       * |chunks_to_move|.
       * </pre>
       *
       * Protobuf type {@code perfetto.protos.CommitDataRequest.ChunkToPatch}
       */
      public static final class Builder extends
          com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
          // @@protoc_insertion_point(builder_implements:perfetto.protos.CommitDataRequest.ChunkToPatch)
          perfetto.protos.CommitDataRequestOuterClass.CommitDataRequest.ChunkToPatchOrBuilder {
        public static final com.google.protobuf.Descriptors.Descriptor
            getDescriptor() {
          return perfetto.protos.CommitDataRequestOuterClass.internal_static_perfetto_protos_CommitDataRequest_ChunkToPatch_descriptor;
        }

        @java.lang.Override
        protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
            internalGetFieldAccessorTable() {
          return perfetto.protos.CommitDataRequestOuterClass.internal_static_perfetto_protos_CommitDataRequest_ChunkToPatch_fieldAccessorTable
              .ensureFieldAccessorsInitialized(
                  perfetto.protos.CommitDataRequestOuterClass.CommitDataRequest.ChunkToPatch.class, perfetto.protos.CommitDataRequestOuterClass.CommitDataRequest.ChunkToPatch.Builder.class);
        }

        // Construct using perfetto.protos.CommitDataRequestOuterClass.CommitDataRequest.ChunkToPatch.newBuilder()
        private Builder() {

        }

        private Builder(
            com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
          super(parent);

        }
        @java.lang.Override
        public Builder clear() {
          super.clear();
          bitField0_ = 0;
          targetBuffer_ = 0;
          writerId_ = 0;
          chunkId_ = 0;
          if (patchesBuilder_ == null) {
            patches_ = java.util.Collections.emptyList();
          } else {
            patches_ = null;
            patchesBuilder_.clear();
          }
          bitField0_ = (bitField0_ & ~0x00000008);
          hasMorePatches_ = false;
          return this;
        }

        @java.lang.Override
        public com.google.protobuf.Descriptors.Descriptor
            getDescriptorForType() {
          return perfetto.protos.CommitDataRequestOuterClass.internal_static_perfetto_protos_CommitDataRequest_ChunkToPatch_descriptor;
        }

        @java.lang.Override
        public perfetto.protos.CommitDataRequestOuterClass.CommitDataRequest.ChunkToPatch getDefaultInstanceForType() {
          return perfetto.protos.CommitDataRequestOuterClass.CommitDataRequest.ChunkToPatch.getDefaultInstance();
        }

        @java.lang.Override
        public perfetto.protos.CommitDataRequestOuterClass.CommitDataRequest.ChunkToPatch build() {
          perfetto.protos.CommitDataRequestOuterClass.CommitDataRequest.ChunkToPatch result = buildPartial();
          if (!result.isInitialized()) {
            throw newUninitializedMessageException(result);
          }
          return result;
        }

        @java.lang.Override
        public perfetto.protos.CommitDataRequestOuterClass.CommitDataRequest.ChunkToPatch buildPartial() {
          perfetto.protos.CommitDataRequestOuterClass.CommitDataRequest.ChunkToPatch result = new perfetto.protos.CommitDataRequestOuterClass.CommitDataRequest.ChunkToPatch(this);
          buildPartialRepeatedFields(result);
          if (bitField0_ != 0) { buildPartial0(result); }
          onBuilt();
          return result;
        }

        private void buildPartialRepeatedFields(perfetto.protos.CommitDataRequestOuterClass.CommitDataRequest.ChunkToPatch result) {
          if (patchesBuilder_ == null) {
            if (((bitField0_ & 0x00000008) != 0)) {
              patches_ = java.util.Collections.unmodifiableList(patches_);
              bitField0_ = (bitField0_ & ~0x00000008);
            }
            result.patches_ = patches_;
          } else {
            result.patches_ = patchesBuilder_.build();
          }
        }

        private void buildPartial0(perfetto.protos.CommitDataRequestOuterClass.CommitDataRequest.ChunkToPatch result) {
          int from_bitField0_ = bitField0_;
          int to_bitField0_ = 0;
          if (((from_bitField0_ & 0x00000001) != 0)) {
            result.targetBuffer_ = targetBuffer_;
            to_bitField0_ |= 0x00000001;
          }
          if (((from_bitField0_ & 0x00000002) != 0)) {
            result.writerId_ = writerId_;
            to_bitField0_ |= 0x00000002;
          }
          if (((from_bitField0_ & 0x00000004) != 0)) {
            result.chunkId_ = chunkId_;
            to_bitField0_ |= 0x00000004;
          }
          if (((from_bitField0_ & 0x00000010) != 0)) {
            result.hasMorePatches_ = hasMorePatches_;
            to_bitField0_ |= 0x00000008;
          }
          result.bitField0_ |= to_bitField0_;
        }

        @java.lang.Override
        public Builder clone() {
          return super.clone();
        }
        @java.lang.Override
        public Builder setField(
            com.google.protobuf.Descriptors.FieldDescriptor field,
            java.lang.Object value) {
          return super.setField(field, value);
        }
        @java.lang.Override
        public Builder clearField(
            com.google.protobuf.Descriptors.FieldDescriptor field) {
          return super.clearField(field);
        }
        @java.lang.Override
        public Builder clearOneof(
            com.google.protobuf.Descriptors.OneofDescriptor oneof) {
          return super.clearOneof(oneof);
        }
        @java.lang.Override
        public Builder setRepeatedField(
            com.google.protobuf.Descriptors.FieldDescriptor field,
            int index, java.lang.Object value) {
          return super.setRepeatedField(field, index, value);
        }
        @java.lang.Override
        public Builder addRepeatedField(
            com.google.protobuf.Descriptors.FieldDescriptor field,
            java.lang.Object value) {
          return super.addRepeatedField(field, value);
        }
        @java.lang.Override
        public Builder mergeFrom(com.google.protobuf.Message other) {
          if (other instanceof perfetto.protos.CommitDataRequestOuterClass.CommitDataRequest.ChunkToPatch) {
            return mergeFrom((perfetto.protos.CommitDataRequestOuterClass.CommitDataRequest.ChunkToPatch)other);
          } else {
            super.mergeFrom(other);
            return this;
          }
        }

        public Builder mergeFrom(perfetto.protos.CommitDataRequestOuterClass.CommitDataRequest.ChunkToPatch other) {
          if (other == perfetto.protos.CommitDataRequestOuterClass.CommitDataRequest.ChunkToPatch.getDefaultInstance()) return this;
          if (other.hasTargetBuffer()) {
            setTargetBuffer(other.getTargetBuffer());
          }
          if (other.hasWriterId()) {
            setWriterId(other.getWriterId());
          }
          if (other.hasChunkId()) {
            setChunkId(other.getChunkId());
          }
          if (patchesBuilder_ == null) {
            if (!other.patches_.isEmpty()) {
              if (patches_.isEmpty()) {
                patches_ = other.patches_;
                bitField0_ = (bitField0_ & ~0x00000008);
              } else {
                ensurePatchesIsMutable();
                patches_.addAll(other.patches_);
              }
              onChanged();
            }
          } else {
            if (!other.patches_.isEmpty()) {
              if (patchesBuilder_.isEmpty()) {
                patchesBuilder_.dispose();
                patchesBuilder_ = null;
                patches_ = other.patches_;
                bitField0_ = (bitField0_ & ~0x00000008);
                patchesBuilder_ = 
                  com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders ?
                     getPatchesFieldBuilder() : null;
              } else {
                patchesBuilder_.addAllMessages(other.patches_);
              }
            }
          }
          if (other.hasHasMorePatches()) {
            setHasMorePatches(other.getHasMorePatches());
          }
          this.mergeUnknownFields(other.getUnknownFields());
          onChanged();
          return this;
        }

        @java.lang.Override
        public final boolean isInitialized() {
          return true;
        }

        @java.lang.Override
        public Builder mergeFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws java.io.IOException {
          if (extensionRegistry == null) {
            throw new java.lang.NullPointerException();
          }
          try {
            boolean done = false;
            while (!done) {
              int tag = input.readTag();
              switch (tag) {
                case 0:
                  done = true;
                  break;
                case 8: {
                  targetBuffer_ = input.readUInt32();
                  bitField0_ |= 0x00000001;
                  break;
                } // case 8
                case 16: {
                  writerId_ = input.readUInt32();
                  bitField0_ |= 0x00000002;
                  break;
                } // case 16
                case 24: {
                  chunkId_ = input.readUInt32();
                  bitField0_ |= 0x00000004;
                  break;
                } // case 24
                case 34: {
                  perfetto.protos.CommitDataRequestOuterClass.CommitDataRequest.ChunkToPatch.Patch m =
                      input.readMessage(
                          perfetto.protos.CommitDataRequestOuterClass.CommitDataRequest.ChunkToPatch.Patch.PARSER,
                          extensionRegistry);
                  if (patchesBuilder_ == null) {
                    ensurePatchesIsMutable();
                    patches_.add(m);
                  } else {
                    patchesBuilder_.addMessage(m);
                  }
                  break;
                } // case 34
                case 40: {
                  hasMorePatches_ = input.readBool();
                  bitField0_ |= 0x00000010;
                  break;
                } // case 40
                default: {
                  if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                    done = true; // was an endgroup tag
                  }
                  break;
                } // default:
              } // switch (tag)
            } // while (!done)
          } catch (com.google.protobuf.InvalidProtocolBufferException e) {
            throw e.unwrapIOException();
          } finally {
            onChanged();
          } // finally
          return this;
        }
        private int bitField0_;

        private int targetBuffer_ ;
        /**
         * <code>optional uint32 target_buffer = 1;</code>
         * @return Whether the targetBuffer field is set.
         */
        @java.lang.Override
        public boolean hasTargetBuffer() {
          return ((bitField0_ & 0x00000001) != 0);
        }
        /**
         * <code>optional uint32 target_buffer = 1;</code>
         * @return The targetBuffer.
         */
        @java.lang.Override
        public int getTargetBuffer() {
          return targetBuffer_;
        }
        /**
         * <code>optional uint32 target_buffer = 1;</code>
         * @param value The targetBuffer to set.
         * @return This builder for chaining.
         */
        public Builder setTargetBuffer(int value) {
          
          targetBuffer_ = value;
          bitField0_ |= 0x00000001;
          onChanged();
          return this;
        }
        /**
         * <code>optional uint32 target_buffer = 1;</code>
         * @return This builder for chaining.
         */
        public Builder clearTargetBuffer() {
          bitField0_ = (bitField0_ & ~0x00000001);
          targetBuffer_ = 0;
          onChanged();
          return this;
        }

        private int writerId_ ;
        /**
         * <pre>
         * {WriterID, ChunkID} uniquely identify a chunk for the current producer.
         * </pre>
         *
         * <code>optional uint32 writer_id = 2;</code>
         * @return Whether the writerId field is set.
         */
        @java.lang.Override
        public boolean hasWriterId() {
          return ((bitField0_ & 0x00000002) != 0);
        }
        /**
         * <pre>
         * {WriterID, ChunkID} uniquely identify a chunk for the current producer.
         * </pre>
         *
         * <code>optional uint32 writer_id = 2;</code>
         * @return The writerId.
         */
        @java.lang.Override
        public int getWriterId() {
          return writerId_;
        }
        /**
         * <pre>
         * {WriterID, ChunkID} uniquely identify a chunk for the current producer.
         * </pre>
         *
         * <code>optional uint32 writer_id = 2;</code>
         * @param value The writerId to set.
         * @return This builder for chaining.
         */
        public Builder setWriterId(int value) {
          
          writerId_ = value;
          bitField0_ |= 0x00000002;
          onChanged();
          return this;
        }
        /**
         * <pre>
         * {WriterID, ChunkID} uniquely identify a chunk for the current producer.
         * </pre>
         *
         * <code>optional uint32 writer_id = 2;</code>
         * @return This builder for chaining.
         */
        public Builder clearWriterId() {
          bitField0_ = (bitField0_ & ~0x00000002);
          writerId_ = 0;
          onChanged();
          return this;
        }

        private int chunkId_ ;
        /**
         * <code>optional uint32 chunk_id = 3;</code>
         * @return Whether the chunkId field is set.
         */
        @java.lang.Override
        public boolean hasChunkId() {
          return ((bitField0_ & 0x00000004) != 0);
        }
        /**
         * <code>optional uint32 chunk_id = 3;</code>
         * @return The chunkId.
         */
        @java.lang.Override
        public int getChunkId() {
          return chunkId_;
        }
        /**
         * <code>optional uint32 chunk_id = 3;</code>
         * @param value The chunkId to set.
         * @return This builder for chaining.
         */
        public Builder setChunkId(int value) {
          
          chunkId_ = value;
          bitField0_ |= 0x00000004;
          onChanged();
          return this;
        }
        /**
         * <code>optional uint32 chunk_id = 3;</code>
         * @return This builder for chaining.
         */
        public Builder clearChunkId() {
          bitField0_ = (bitField0_ & ~0x00000004);
          chunkId_ = 0;
          onChanged();
          return this;
        }

        private java.util.List<perfetto.protos.CommitDataRequestOuterClass.CommitDataRequest.ChunkToPatch.Patch> patches_ =
          java.util.Collections.emptyList();
        private void ensurePatchesIsMutable() {
          if (!((bitField0_ & 0x00000008) != 0)) {
            patches_ = new java.util.ArrayList<perfetto.protos.CommitDataRequestOuterClass.CommitDataRequest.ChunkToPatch.Patch>(patches_);
            bitField0_ |= 0x00000008;
           }
        }

        private com.google.protobuf.RepeatedFieldBuilderV3<
            perfetto.protos.CommitDataRequestOuterClass.CommitDataRequest.ChunkToPatch.Patch, perfetto.protos.CommitDataRequestOuterClass.CommitDataRequest.ChunkToPatch.Patch.Builder, perfetto.protos.CommitDataRequestOuterClass.CommitDataRequest.ChunkToPatch.PatchOrBuilder> patchesBuilder_;

        /**
         * <pre>
         * List of patches to apply to the given chunk.
         * </pre>
         *
         * <code>repeated .perfetto.protos.CommitDataRequest.ChunkToPatch.Patch patches = 4;</code>
         */
        public java.util.List<perfetto.protos.CommitDataRequestOuterClass.CommitDataRequest.ChunkToPatch.Patch> getPatchesList() {
          if (patchesBuilder_ == null) {
            return java.util.Collections.unmodifiableList(patches_);
          } else {
            return patchesBuilder_.getMessageList();
          }
        }
        /**
         * <pre>
         * List of patches to apply to the given chunk.
         * </pre>
         *
         * <code>repeated .perfetto.protos.CommitDataRequest.ChunkToPatch.Patch patches = 4;</code>
         */
        public int getPatchesCount() {
          if (patchesBuilder_ == null) {
            return patches_.size();
          } else {
            return patchesBuilder_.getCount();
          }
        }
        /**
         * <pre>
         * List of patches to apply to the given chunk.
         * </pre>
         *
         * <code>repeated .perfetto.protos.CommitDataRequest.ChunkToPatch.Patch patches = 4;</code>
         */
        public perfetto.protos.CommitDataRequestOuterClass.CommitDataRequest.ChunkToPatch.Patch getPatches(int index) {
          if (patchesBuilder_ == null) {
            return patches_.get(index);
          } else {
            return patchesBuilder_.getMessage(index);
          }
        }
        /**
         * <pre>
         * List of patches to apply to the given chunk.
         * </pre>
         *
         * <code>repeated .perfetto.protos.CommitDataRequest.ChunkToPatch.Patch patches = 4;</code>
         */
        public Builder setPatches(
            int index, perfetto.protos.CommitDataRequestOuterClass.CommitDataRequest.ChunkToPatch.Patch value) {
          if (patchesBuilder_ == null) {
            if (value == null) {
              throw new NullPointerException();
            }
            ensurePatchesIsMutable();
            patches_.set(index, value);
            onChanged();
          } else {
            patchesBuilder_.setMessage(index, value);
          }
          return this;
        }
        /**
         * <pre>
         * List of patches to apply to the given chunk.
         * </pre>
         *
         * <code>repeated .perfetto.protos.CommitDataRequest.ChunkToPatch.Patch patches = 4;</code>
         */
        public Builder setPatches(
            int index, perfetto.protos.CommitDataRequestOuterClass.CommitDataRequest.ChunkToPatch.Patch.Builder builderForValue) {
          if (patchesBuilder_ == null) {
            ensurePatchesIsMutable();
            patches_.set(index, builderForValue.build());
            onChanged();
          } else {
            patchesBuilder_.setMessage(index, builderForValue.build());
          }
          return this;
        }
        /**
         * <pre>
         * List of patches to apply to the given chunk.
         * </pre>
         *
         * <code>repeated .perfetto.protos.CommitDataRequest.ChunkToPatch.Patch patches = 4;</code>
         */
        public Builder addPatches(perfetto.protos.CommitDataRequestOuterClass.CommitDataRequest.ChunkToPatch.Patch value) {
          if (patchesBuilder_ == null) {
            if (value == null) {
              throw new NullPointerException();
            }
            ensurePatchesIsMutable();
            patches_.add(value);
            onChanged();
          } else {
            patchesBuilder_.addMessage(value);
          }
          return this;
        }
        /**
         * <pre>
         * List of patches to apply to the given chunk.
         * </pre>
         *
         * <code>repeated .perfetto.protos.CommitDataRequest.ChunkToPatch.Patch patches = 4;</code>
         */
        public Builder addPatches(
            int index, perfetto.protos.CommitDataRequestOuterClass.CommitDataRequest.ChunkToPatch.Patch value) {
          if (patchesBuilder_ == null) {
            if (value == null) {
              throw new NullPointerException();
            }
            ensurePatchesIsMutable();
            patches_.add(index, value);
            onChanged();
          } else {
            patchesBuilder_.addMessage(index, value);
          }
          return this;
        }
        /**
         * <pre>
         * List of patches to apply to the given chunk.
         * </pre>
         *
         * <code>repeated .perfetto.protos.CommitDataRequest.ChunkToPatch.Patch patches = 4;</code>
         */
        public Builder addPatches(
            perfetto.protos.CommitDataRequestOuterClass.CommitDataRequest.ChunkToPatch.Patch.Builder builderForValue) {
          if (patchesBuilder_ == null) {
            ensurePatchesIsMutable();
            patches_.add(builderForValue.build());
            onChanged();
          } else {
            patchesBuilder_.addMessage(builderForValue.build());
          }
          return this;
        }
        /**
         * <pre>
         * List of patches to apply to the given chunk.
         * </pre>
         *
         * <code>repeated .perfetto.protos.CommitDataRequest.ChunkToPatch.Patch patches = 4;</code>
         */
        public Builder addPatches(
            int index, perfetto.protos.CommitDataRequestOuterClass.CommitDataRequest.ChunkToPatch.Patch.Builder builderForValue) {
          if (patchesBuilder_ == null) {
            ensurePatchesIsMutable();
            patches_.add(index, builderForValue.build());
            onChanged();
          } else {
            patchesBuilder_.addMessage(index, builderForValue.build());
          }
          return this;
        }
        /**
         * <pre>
         * List of patches to apply to the given chunk.
         * </pre>
         *
         * <code>repeated .perfetto.protos.CommitDataRequest.ChunkToPatch.Patch patches = 4;</code>
         */
        public Builder addAllPatches(
            java.lang.Iterable<? extends perfetto.protos.CommitDataRequestOuterClass.CommitDataRequest.ChunkToPatch.Patch> values) {
          if (patchesBuilder_ == null) {
            ensurePatchesIsMutable();
            com.google.protobuf.AbstractMessageLite.Builder.addAll(
                values, patches_);
            onChanged();
          } else {
            patchesBuilder_.addAllMessages(values);
          }
          return this;
        }
        /**
         * <pre>
         * List of patches to apply to the given chunk.
         * </pre>
         *
         * <code>repeated .perfetto.protos.CommitDataRequest.ChunkToPatch.Patch patches = 4;</code>
         */
        public Builder clearPatches() {
          if (patchesBuilder_ == null) {
            patches_ = java.util.Collections.emptyList();
            bitField0_ = (bitField0_ & ~0x00000008);
            onChanged();
          } else {
            patchesBuilder_.clear();
          }
          return this;
        }
        /**
         * <pre>
         * List of patches to apply to the given chunk.
         * </pre>
         *
         * <code>repeated .perfetto.protos.CommitDataRequest.ChunkToPatch.Patch patches = 4;</code>
         */
        public Builder removePatches(int index) {
          if (patchesBuilder_ == null) {
            ensurePatchesIsMutable();
            patches_.remove(index);
            onChanged();
          } else {
            patchesBuilder_.remove(index);
          }
          return this;
        }
        /**
         * <pre>
         * List of patches to apply to the given chunk.
         * </pre>
         *
         * <code>repeated .perfetto.protos.CommitDataRequest.ChunkToPatch.Patch patches = 4;</code>
         */
        public perfetto.protos.CommitDataRequestOuterClass.CommitDataRequest.ChunkToPatch.Patch.Builder getPatchesBuilder(
            int index) {
          return getPatchesFieldBuilder().getBuilder(index);
        }
        /**
         * <pre>
         * List of patches to apply to the given chunk.
         * </pre>
         *
         * <code>repeated .perfetto.protos.CommitDataRequest.ChunkToPatch.Patch patches = 4;</code>
         */
        public perfetto.protos.CommitDataRequestOuterClass.CommitDataRequest.ChunkToPatch.PatchOrBuilder getPatchesOrBuilder(
            int index) {
          if (patchesBuilder_ == null) {
            return patches_.get(index);  } else {
            return patchesBuilder_.getMessageOrBuilder(index);
          }
        }
        /**
         * <pre>
         * List of patches to apply to the given chunk.
         * </pre>
         *
         * <code>repeated .perfetto.protos.CommitDataRequest.ChunkToPatch.Patch patches = 4;</code>
         */
        public java.util.List<? extends perfetto.protos.CommitDataRequestOuterClass.CommitDataRequest.ChunkToPatch.PatchOrBuilder> 
             getPatchesOrBuilderList() {
          if (patchesBuilder_ != null) {
            return patchesBuilder_.getMessageOrBuilderList();
          } else {
            return java.util.Collections.unmodifiableList(patches_);
          }
        }
        /**
         * <pre>
         * List of patches to apply to the given chunk.
         * </pre>
         *
         * <code>repeated .perfetto.protos.CommitDataRequest.ChunkToPatch.Patch patches = 4;</code>
         */
        public perfetto.protos.CommitDataRequestOuterClass.CommitDataRequest.ChunkToPatch.Patch.Builder addPatchesBuilder() {
          return getPatchesFieldBuilder().addBuilder(
              perfetto.protos.CommitDataRequestOuterClass.CommitDataRequest.ChunkToPatch.Patch.getDefaultInstance());
        }
        /**
         * <pre>
         * List of patches to apply to the given chunk.
         * </pre>
         *
         * <code>repeated .perfetto.protos.CommitDataRequest.ChunkToPatch.Patch patches = 4;</code>
         */
        public perfetto.protos.CommitDataRequestOuterClass.CommitDataRequest.ChunkToPatch.Patch.Builder addPatchesBuilder(
            int index) {
          return getPatchesFieldBuilder().addBuilder(
              index, perfetto.protos.CommitDataRequestOuterClass.CommitDataRequest.ChunkToPatch.Patch.getDefaultInstance());
        }
        /**
         * <pre>
         * List of patches to apply to the given chunk.
         * </pre>
         *
         * <code>repeated .perfetto.protos.CommitDataRequest.ChunkToPatch.Patch patches = 4;</code>
         */
        public java.util.List<perfetto.protos.CommitDataRequestOuterClass.CommitDataRequest.ChunkToPatch.Patch.Builder> 
             getPatchesBuilderList() {
          return getPatchesFieldBuilder().getBuilderList();
        }
        private com.google.protobuf.RepeatedFieldBuilderV3<
            perfetto.protos.CommitDataRequestOuterClass.CommitDataRequest.ChunkToPatch.Patch, perfetto.protos.CommitDataRequestOuterClass.CommitDataRequest.ChunkToPatch.Patch.Builder, perfetto.protos.CommitDataRequestOuterClass.CommitDataRequest.ChunkToPatch.PatchOrBuilder> 
            getPatchesFieldBuilder() {
          if (patchesBuilder_ == null) {
            patchesBuilder_ = new com.google.protobuf.RepeatedFieldBuilderV3<
                perfetto.protos.CommitDataRequestOuterClass.CommitDataRequest.ChunkToPatch.Patch, perfetto.protos.CommitDataRequestOuterClass.CommitDataRequest.ChunkToPatch.Patch.Builder, perfetto.protos.CommitDataRequestOuterClass.CommitDataRequest.ChunkToPatch.PatchOrBuilder>(
                    patches_,
                    ((bitField0_ & 0x00000008) != 0),
                    getParentForChildren(),
                    isClean());
            patches_ = null;
          }
          return patchesBuilder_;
        }

        private boolean hasMorePatches_ ;
        /**
         * <pre>
         * When true more patches will follow in future requests and the chunk
         * should be still considered as patch-pending. When false the chunk becomes
         * eligible for reading.
         * </pre>
         *
         * <code>optional bool has_more_patches = 5;</code>
         * @return Whether the hasMorePatches field is set.
         */
        @java.lang.Override
        public boolean hasHasMorePatches() {
          return ((bitField0_ & 0x00000010) != 0);
        }
        /**
         * <pre>
         * When true more patches will follow in future requests and the chunk
         * should be still considered as patch-pending. When false the chunk becomes
         * eligible for reading.
         * </pre>
         *
         * <code>optional bool has_more_patches = 5;</code>
         * @return The hasMorePatches.
         */
        @java.lang.Override
        public boolean getHasMorePatches() {
          return hasMorePatches_;
        }
        /**
         * <pre>
         * When true more patches will follow in future requests and the chunk
         * should be still considered as patch-pending. When false the chunk becomes
         * eligible for reading.
         * </pre>
         *
         * <code>optional bool has_more_patches = 5;</code>
         * @param value The hasMorePatches to set.
         * @return This builder for chaining.
         */
        public Builder setHasMorePatches(boolean value) {
          
          hasMorePatches_ = value;
          bitField0_ |= 0x00000010;
          onChanged();
          return this;
        }
        /**
         * <pre>
         * When true more patches will follow in future requests and the chunk
         * should be still considered as patch-pending. When false the chunk becomes
         * eligible for reading.
         * </pre>
         *
         * <code>optional bool has_more_patches = 5;</code>
         * @return This builder for chaining.
         */
        public Builder clearHasMorePatches() {
          bitField0_ = (bitField0_ & ~0x00000010);
          hasMorePatches_ = false;
          onChanged();
          return this;
        }
        @java.lang.Override
        public final Builder setUnknownFields(
            final com.google.protobuf.UnknownFieldSet unknownFields) {
          return super.setUnknownFields(unknownFields);
        }

        @java.lang.Override
        public final Builder mergeUnknownFields(
            final com.google.protobuf.UnknownFieldSet unknownFields) {
          return super.mergeUnknownFields(unknownFields);
        }


        // @@protoc_insertion_point(builder_scope:perfetto.protos.CommitDataRequest.ChunkToPatch)
      }

      // @@protoc_insertion_point(class_scope:perfetto.protos.CommitDataRequest.ChunkToPatch)
      private static final perfetto.protos.CommitDataRequestOuterClass.CommitDataRequest.ChunkToPatch DEFAULT_INSTANCE;
      static {
        DEFAULT_INSTANCE = new perfetto.protos.CommitDataRequestOuterClass.CommitDataRequest.ChunkToPatch();
      }

      public static perfetto.protos.CommitDataRequestOuterClass.CommitDataRequest.ChunkToPatch getDefaultInstance() {
        return DEFAULT_INSTANCE;
      }

      @java.lang.Deprecated public static final com.google.protobuf.Parser<ChunkToPatch>
          PARSER = new com.google.protobuf.AbstractParser<ChunkToPatch>() {
        @java.lang.Override
        public ChunkToPatch parsePartialFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws com.google.protobuf.InvalidProtocolBufferException {
          Builder builder = newBuilder();
          try {
            builder.mergeFrom(input, extensionRegistry);
          } catch (com.google.protobuf.InvalidProtocolBufferException e) {
            throw e.setUnfinishedMessage(builder.buildPartial());
          } catch (com.google.protobuf.UninitializedMessageException e) {
            throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
          } catch (java.io.IOException e) {
            throw new com.google.protobuf.InvalidProtocolBufferException(e)
                .setUnfinishedMessage(builder.buildPartial());
          }
          return builder.buildPartial();
        }
      };

      public static com.google.protobuf.Parser<ChunkToPatch> parser() {
        return PARSER;
      }

      @java.lang.Override
      public com.google.protobuf.Parser<ChunkToPatch> getParserForType() {
        return PARSER;
      }

      @java.lang.Override
      public perfetto.protos.CommitDataRequestOuterClass.CommitDataRequest.ChunkToPatch getDefaultInstanceForType() {
        return DEFAULT_INSTANCE;
      }

    }

    private int bitField0_;
    public static final int CHUNKS_TO_MOVE_FIELD_NUMBER = 1;
    @SuppressWarnings("serial")
    private java.util.List<perfetto.protos.CommitDataRequestOuterClass.CommitDataRequest.ChunksToMove> chunksToMove_;
    /**
     * <code>repeated .perfetto.protos.CommitDataRequest.ChunksToMove chunks_to_move = 1;</code>
     */
    @java.lang.Override
    public java.util.List<perfetto.protos.CommitDataRequestOuterClass.CommitDataRequest.ChunksToMove> getChunksToMoveList() {
      return chunksToMove_;
    }
    /**
     * <code>repeated .perfetto.protos.CommitDataRequest.ChunksToMove chunks_to_move = 1;</code>
     */
    @java.lang.Override
    public java.util.List<? extends perfetto.protos.CommitDataRequestOuterClass.CommitDataRequest.ChunksToMoveOrBuilder> 
        getChunksToMoveOrBuilderList() {
      return chunksToMove_;
    }
    /**
     * <code>repeated .perfetto.protos.CommitDataRequest.ChunksToMove chunks_to_move = 1;</code>
     */
    @java.lang.Override
    public int getChunksToMoveCount() {
      return chunksToMove_.size();
    }
    /**
     * <code>repeated .perfetto.protos.CommitDataRequest.ChunksToMove chunks_to_move = 1;</code>
     */
    @java.lang.Override
    public perfetto.protos.CommitDataRequestOuterClass.CommitDataRequest.ChunksToMove getChunksToMove(int index) {
      return chunksToMove_.get(index);
    }
    /**
     * <code>repeated .perfetto.protos.CommitDataRequest.ChunksToMove chunks_to_move = 1;</code>
     */
    @java.lang.Override
    public perfetto.protos.CommitDataRequestOuterClass.CommitDataRequest.ChunksToMoveOrBuilder getChunksToMoveOrBuilder(
        int index) {
      return chunksToMove_.get(index);
    }

    public static final int CHUNKS_TO_PATCH_FIELD_NUMBER = 2;
    @SuppressWarnings("serial")
    private java.util.List<perfetto.protos.CommitDataRequestOuterClass.CommitDataRequest.ChunkToPatch> chunksToPatch_;
    /**
     * <code>repeated .perfetto.protos.CommitDataRequest.ChunkToPatch chunks_to_patch = 2;</code>
     */
    @java.lang.Override
    public java.util.List<perfetto.protos.CommitDataRequestOuterClass.CommitDataRequest.ChunkToPatch> getChunksToPatchList() {
      return chunksToPatch_;
    }
    /**
     * <code>repeated .perfetto.protos.CommitDataRequest.ChunkToPatch chunks_to_patch = 2;</code>
     */
    @java.lang.Override
    public java.util.List<? extends perfetto.protos.CommitDataRequestOuterClass.CommitDataRequest.ChunkToPatchOrBuilder> 
        getChunksToPatchOrBuilderList() {
      return chunksToPatch_;
    }
    /**
     * <code>repeated .perfetto.protos.CommitDataRequest.ChunkToPatch chunks_to_patch = 2;</code>
     */
    @java.lang.Override
    public int getChunksToPatchCount() {
      return chunksToPatch_.size();
    }
    /**
     * <code>repeated .perfetto.protos.CommitDataRequest.ChunkToPatch chunks_to_patch = 2;</code>
     */
    @java.lang.Override
    public perfetto.protos.CommitDataRequestOuterClass.CommitDataRequest.ChunkToPatch getChunksToPatch(int index) {
      return chunksToPatch_.get(index);
    }
    /**
     * <code>repeated .perfetto.protos.CommitDataRequest.ChunkToPatch chunks_to_patch = 2;</code>
     */
    @java.lang.Override
    public perfetto.protos.CommitDataRequestOuterClass.CommitDataRequest.ChunkToPatchOrBuilder getChunksToPatchOrBuilder(
        int index) {
      return chunksToPatch_.get(index);
    }

    public static final int FLUSH_REQUEST_ID_FIELD_NUMBER = 3;
    private long flushRequestId_ = 0L;
    /**
     * <pre>
     * Optional. If this commit is made in response to a Flush(id) request coming
     * from the service, copy back the id of the request so the service can tell
     * when the flush happened.
     * </pre>
     *
     * <code>optional uint64 flush_request_id = 3;</code>
     * @return Whether the flushRequestId field is set.
     */
    @java.lang.Override
    public boolean hasFlushRequestId() {
      return ((bitField0_ & 0x00000001) != 0);
    }
    /**
     * <pre>
     * Optional. If this commit is made in response to a Flush(id) request coming
     * from the service, copy back the id of the request so the service can tell
     * when the flush happened.
     * </pre>
     *
     * <code>optional uint64 flush_request_id = 3;</code>
     * @return The flushRequestId.
     */
    @java.lang.Override
    public long getFlushRequestId() {
      return flushRequestId_;
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      for (int i = 0; i < chunksToMove_.size(); i++) {
        output.writeMessage(1, chunksToMove_.get(i));
      }
      for (int i = 0; i < chunksToPatch_.size(); i++) {
        output.writeMessage(2, chunksToPatch_.get(i));
      }
      if (((bitField0_ & 0x00000001) != 0)) {
        output.writeUInt64(3, flushRequestId_);
      }
      getUnknownFields().writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      for (int i = 0; i < chunksToMove_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(1, chunksToMove_.get(i));
      }
      for (int i = 0; i < chunksToPatch_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(2, chunksToPatch_.get(i));
      }
      if (((bitField0_ & 0x00000001) != 0)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt64Size(3, flushRequestId_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof perfetto.protos.CommitDataRequestOuterClass.CommitDataRequest)) {
        return super.equals(obj);
      }
      perfetto.protos.CommitDataRequestOuterClass.CommitDataRequest other = (perfetto.protos.CommitDataRequestOuterClass.CommitDataRequest) obj;

      if (!getChunksToMoveList()
          .equals(other.getChunksToMoveList())) return false;
      if (!getChunksToPatchList()
          .equals(other.getChunksToPatchList())) return false;
      if (hasFlushRequestId() != other.hasFlushRequestId()) return false;
      if (hasFlushRequestId()) {
        if (getFlushRequestId()
            != other.getFlushRequestId()) return false;
      }
      if (!getUnknownFields().equals(other.getUnknownFields())) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      if (getChunksToMoveCount() > 0) {
        hash = (37 * hash) + CHUNKS_TO_MOVE_FIELD_NUMBER;
        hash = (53 * hash) + getChunksToMoveList().hashCode();
      }
      if (getChunksToPatchCount() > 0) {
        hash = (37 * hash) + CHUNKS_TO_PATCH_FIELD_NUMBER;
        hash = (53 * hash) + getChunksToPatchList().hashCode();
      }
      if (hasFlushRequestId()) {
        hash = (37 * hash) + FLUSH_REQUEST_ID_FIELD_NUMBER;
        hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
            getFlushRequestId());
      }
      hash = (29 * hash) + getUnknownFields().hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static perfetto.protos.CommitDataRequestOuterClass.CommitDataRequest parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static perfetto.protos.CommitDataRequestOuterClass.CommitDataRequest parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static perfetto.protos.CommitDataRequestOuterClass.CommitDataRequest parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static perfetto.protos.CommitDataRequestOuterClass.CommitDataRequest parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static perfetto.protos.CommitDataRequestOuterClass.CommitDataRequest parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static perfetto.protos.CommitDataRequestOuterClass.CommitDataRequest parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static perfetto.protos.CommitDataRequestOuterClass.CommitDataRequest parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static perfetto.protos.CommitDataRequestOuterClass.CommitDataRequest parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static perfetto.protos.CommitDataRequestOuterClass.CommitDataRequest parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static perfetto.protos.CommitDataRequestOuterClass.CommitDataRequest parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static perfetto.protos.CommitDataRequestOuterClass.CommitDataRequest parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static perfetto.protos.CommitDataRequestOuterClass.CommitDataRequest parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(perfetto.protos.CommitDataRequestOuterClass.CommitDataRequest prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code perfetto.protos.CommitDataRequest}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:perfetto.protos.CommitDataRequest)
        perfetto.protos.CommitDataRequestOuterClass.CommitDataRequestOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return perfetto.protos.CommitDataRequestOuterClass.internal_static_perfetto_protos_CommitDataRequest_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return perfetto.protos.CommitDataRequestOuterClass.internal_static_perfetto_protos_CommitDataRequest_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                perfetto.protos.CommitDataRequestOuterClass.CommitDataRequest.class, perfetto.protos.CommitDataRequestOuterClass.CommitDataRequest.Builder.class);
      }

      // Construct using perfetto.protos.CommitDataRequestOuterClass.CommitDataRequest.newBuilder()
      private Builder() {

      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);

      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        bitField0_ = 0;
        if (chunksToMoveBuilder_ == null) {
          chunksToMove_ = java.util.Collections.emptyList();
        } else {
          chunksToMove_ = null;
          chunksToMoveBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000001);
        if (chunksToPatchBuilder_ == null) {
          chunksToPatch_ = java.util.Collections.emptyList();
        } else {
          chunksToPatch_ = null;
          chunksToPatchBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000002);
        flushRequestId_ = 0L;
        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return perfetto.protos.CommitDataRequestOuterClass.internal_static_perfetto_protos_CommitDataRequest_descriptor;
      }

      @java.lang.Override
      public perfetto.protos.CommitDataRequestOuterClass.CommitDataRequest getDefaultInstanceForType() {
        return perfetto.protos.CommitDataRequestOuterClass.CommitDataRequest.getDefaultInstance();
      }

      @java.lang.Override
      public perfetto.protos.CommitDataRequestOuterClass.CommitDataRequest build() {
        perfetto.protos.CommitDataRequestOuterClass.CommitDataRequest result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public perfetto.protos.CommitDataRequestOuterClass.CommitDataRequest buildPartial() {
        perfetto.protos.CommitDataRequestOuterClass.CommitDataRequest result = new perfetto.protos.CommitDataRequestOuterClass.CommitDataRequest(this);
        buildPartialRepeatedFields(result);
        if (bitField0_ != 0) { buildPartial0(result); }
        onBuilt();
        return result;
      }

      private void buildPartialRepeatedFields(perfetto.protos.CommitDataRequestOuterClass.CommitDataRequest result) {
        if (chunksToMoveBuilder_ == null) {
          if (((bitField0_ & 0x00000001) != 0)) {
            chunksToMove_ = java.util.Collections.unmodifiableList(chunksToMove_);
            bitField0_ = (bitField0_ & ~0x00000001);
          }
          result.chunksToMove_ = chunksToMove_;
        } else {
          result.chunksToMove_ = chunksToMoveBuilder_.build();
        }
        if (chunksToPatchBuilder_ == null) {
          if (((bitField0_ & 0x00000002) != 0)) {
            chunksToPatch_ = java.util.Collections.unmodifiableList(chunksToPatch_);
            bitField0_ = (bitField0_ & ~0x00000002);
          }
          result.chunksToPatch_ = chunksToPatch_;
        } else {
          result.chunksToPatch_ = chunksToPatchBuilder_.build();
        }
      }

      private void buildPartial0(perfetto.protos.CommitDataRequestOuterClass.CommitDataRequest result) {
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000004) != 0)) {
          result.flushRequestId_ = flushRequestId_;
          to_bitField0_ |= 0x00000001;
        }
        result.bitField0_ |= to_bitField0_;
      }

      @java.lang.Override
      public Builder clone() {
        return super.clone();
      }
      @java.lang.Override
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.setField(field, value);
      }
      @java.lang.Override
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return super.clearField(field);
      }
      @java.lang.Override
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return super.clearOneof(oneof);
      }
      @java.lang.Override
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, java.lang.Object value) {
        return super.setRepeatedField(field, index, value);
      }
      @java.lang.Override
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.addRepeatedField(field, value);
      }
      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof perfetto.protos.CommitDataRequestOuterClass.CommitDataRequest) {
          return mergeFrom((perfetto.protos.CommitDataRequestOuterClass.CommitDataRequest)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(perfetto.protos.CommitDataRequestOuterClass.CommitDataRequest other) {
        if (other == perfetto.protos.CommitDataRequestOuterClass.CommitDataRequest.getDefaultInstance()) return this;
        if (chunksToMoveBuilder_ == null) {
          if (!other.chunksToMove_.isEmpty()) {
            if (chunksToMove_.isEmpty()) {
              chunksToMove_ = other.chunksToMove_;
              bitField0_ = (bitField0_ & ~0x00000001);
            } else {
              ensureChunksToMoveIsMutable();
              chunksToMove_.addAll(other.chunksToMove_);
            }
            onChanged();
          }
        } else {
          if (!other.chunksToMove_.isEmpty()) {
            if (chunksToMoveBuilder_.isEmpty()) {
              chunksToMoveBuilder_.dispose();
              chunksToMoveBuilder_ = null;
              chunksToMove_ = other.chunksToMove_;
              bitField0_ = (bitField0_ & ~0x00000001);
              chunksToMoveBuilder_ = 
                com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders ?
                   getChunksToMoveFieldBuilder() : null;
            } else {
              chunksToMoveBuilder_.addAllMessages(other.chunksToMove_);
            }
          }
        }
        if (chunksToPatchBuilder_ == null) {
          if (!other.chunksToPatch_.isEmpty()) {
            if (chunksToPatch_.isEmpty()) {
              chunksToPatch_ = other.chunksToPatch_;
              bitField0_ = (bitField0_ & ~0x00000002);
            } else {
              ensureChunksToPatchIsMutable();
              chunksToPatch_.addAll(other.chunksToPatch_);
            }
            onChanged();
          }
        } else {
          if (!other.chunksToPatch_.isEmpty()) {
            if (chunksToPatchBuilder_.isEmpty()) {
              chunksToPatchBuilder_.dispose();
              chunksToPatchBuilder_ = null;
              chunksToPatch_ = other.chunksToPatch_;
              bitField0_ = (bitField0_ & ~0x00000002);
              chunksToPatchBuilder_ = 
                com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders ?
                   getChunksToPatchFieldBuilder() : null;
            } else {
              chunksToPatchBuilder_.addAllMessages(other.chunksToPatch_);
            }
          }
        }
        if (other.hasFlushRequestId()) {
          setFlushRequestId(other.getFlushRequestId());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        if (extensionRegistry == null) {
          throw new java.lang.NullPointerException();
        }
        try {
          boolean done = false;
          while (!done) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                done = true;
                break;
              case 10: {
                perfetto.protos.CommitDataRequestOuterClass.CommitDataRequest.ChunksToMove m =
                    input.readMessage(
                        perfetto.protos.CommitDataRequestOuterClass.CommitDataRequest.ChunksToMove.PARSER,
                        extensionRegistry);
                if (chunksToMoveBuilder_ == null) {
                  ensureChunksToMoveIsMutable();
                  chunksToMove_.add(m);
                } else {
                  chunksToMoveBuilder_.addMessage(m);
                }
                break;
              } // case 10
              case 18: {
                perfetto.protos.CommitDataRequestOuterClass.CommitDataRequest.ChunkToPatch m =
                    input.readMessage(
                        perfetto.protos.CommitDataRequestOuterClass.CommitDataRequest.ChunkToPatch.PARSER,
                        extensionRegistry);
                if (chunksToPatchBuilder_ == null) {
                  ensureChunksToPatchIsMutable();
                  chunksToPatch_.add(m);
                } else {
                  chunksToPatchBuilder_.addMessage(m);
                }
                break;
              } // case 18
              case 24: {
                flushRequestId_ = input.readUInt64();
                bitField0_ |= 0x00000004;
                break;
              } // case 24
              default: {
                if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                  done = true; // was an endgroup tag
                }
                break;
              } // default:
            } // switch (tag)
          } // while (!done)
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.unwrapIOException();
        } finally {
          onChanged();
        } // finally
        return this;
      }
      private int bitField0_;

      private java.util.List<perfetto.protos.CommitDataRequestOuterClass.CommitDataRequest.ChunksToMove> chunksToMove_ =
        java.util.Collections.emptyList();
      private void ensureChunksToMoveIsMutable() {
        if (!((bitField0_ & 0x00000001) != 0)) {
          chunksToMove_ = new java.util.ArrayList<perfetto.protos.CommitDataRequestOuterClass.CommitDataRequest.ChunksToMove>(chunksToMove_);
          bitField0_ |= 0x00000001;
         }
      }

      private com.google.protobuf.RepeatedFieldBuilderV3<
          perfetto.protos.CommitDataRequestOuterClass.CommitDataRequest.ChunksToMove, perfetto.protos.CommitDataRequestOuterClass.CommitDataRequest.ChunksToMove.Builder, perfetto.protos.CommitDataRequestOuterClass.CommitDataRequest.ChunksToMoveOrBuilder> chunksToMoveBuilder_;

      /**
       * <code>repeated .perfetto.protos.CommitDataRequest.ChunksToMove chunks_to_move = 1;</code>
       */
      public java.util.List<perfetto.protos.CommitDataRequestOuterClass.CommitDataRequest.ChunksToMove> getChunksToMoveList() {
        if (chunksToMoveBuilder_ == null) {
          return java.util.Collections.unmodifiableList(chunksToMove_);
        } else {
          return chunksToMoveBuilder_.getMessageList();
        }
      }
      /**
       * <code>repeated .perfetto.protos.CommitDataRequest.ChunksToMove chunks_to_move = 1;</code>
       */
      public int getChunksToMoveCount() {
        if (chunksToMoveBuilder_ == null) {
          return chunksToMove_.size();
        } else {
          return chunksToMoveBuilder_.getCount();
        }
      }
      /**
       * <code>repeated .perfetto.protos.CommitDataRequest.ChunksToMove chunks_to_move = 1;</code>
       */
      public perfetto.protos.CommitDataRequestOuterClass.CommitDataRequest.ChunksToMove getChunksToMove(int index) {
        if (chunksToMoveBuilder_ == null) {
          return chunksToMove_.get(index);
        } else {
          return chunksToMoveBuilder_.getMessage(index);
        }
      }
      /**
       * <code>repeated .perfetto.protos.CommitDataRequest.ChunksToMove chunks_to_move = 1;</code>
       */
      public Builder setChunksToMove(
          int index, perfetto.protos.CommitDataRequestOuterClass.CommitDataRequest.ChunksToMove value) {
        if (chunksToMoveBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureChunksToMoveIsMutable();
          chunksToMove_.set(index, value);
          onChanged();
        } else {
          chunksToMoveBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .perfetto.protos.CommitDataRequest.ChunksToMove chunks_to_move = 1;</code>
       */
      public Builder setChunksToMove(
          int index, perfetto.protos.CommitDataRequestOuterClass.CommitDataRequest.ChunksToMove.Builder builderForValue) {
        if (chunksToMoveBuilder_ == null) {
          ensureChunksToMoveIsMutable();
          chunksToMove_.set(index, builderForValue.build());
          onChanged();
        } else {
          chunksToMoveBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .perfetto.protos.CommitDataRequest.ChunksToMove chunks_to_move = 1;</code>
       */
      public Builder addChunksToMove(perfetto.protos.CommitDataRequestOuterClass.CommitDataRequest.ChunksToMove value) {
        if (chunksToMoveBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureChunksToMoveIsMutable();
          chunksToMove_.add(value);
          onChanged();
        } else {
          chunksToMoveBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <code>repeated .perfetto.protos.CommitDataRequest.ChunksToMove chunks_to_move = 1;</code>
       */
      public Builder addChunksToMove(
          int index, perfetto.protos.CommitDataRequestOuterClass.CommitDataRequest.ChunksToMove value) {
        if (chunksToMoveBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureChunksToMoveIsMutable();
          chunksToMove_.add(index, value);
          onChanged();
        } else {
          chunksToMoveBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .perfetto.protos.CommitDataRequest.ChunksToMove chunks_to_move = 1;</code>
       */
      public Builder addChunksToMove(
          perfetto.protos.CommitDataRequestOuterClass.CommitDataRequest.ChunksToMove.Builder builderForValue) {
        if (chunksToMoveBuilder_ == null) {
          ensureChunksToMoveIsMutable();
          chunksToMove_.add(builderForValue.build());
          onChanged();
        } else {
          chunksToMoveBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .perfetto.protos.CommitDataRequest.ChunksToMove chunks_to_move = 1;</code>
       */
      public Builder addChunksToMove(
          int index, perfetto.protos.CommitDataRequestOuterClass.CommitDataRequest.ChunksToMove.Builder builderForValue) {
        if (chunksToMoveBuilder_ == null) {
          ensureChunksToMoveIsMutable();
          chunksToMove_.add(index, builderForValue.build());
          onChanged();
        } else {
          chunksToMoveBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .perfetto.protos.CommitDataRequest.ChunksToMove chunks_to_move = 1;</code>
       */
      public Builder addAllChunksToMove(
          java.lang.Iterable<? extends perfetto.protos.CommitDataRequestOuterClass.CommitDataRequest.ChunksToMove> values) {
        if (chunksToMoveBuilder_ == null) {
          ensureChunksToMoveIsMutable();
          com.google.protobuf.AbstractMessageLite.Builder.addAll(
              values, chunksToMove_);
          onChanged();
        } else {
          chunksToMoveBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <code>repeated .perfetto.protos.CommitDataRequest.ChunksToMove chunks_to_move = 1;</code>
       */
      public Builder clearChunksToMove() {
        if (chunksToMoveBuilder_ == null) {
          chunksToMove_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000001);
          onChanged();
        } else {
          chunksToMoveBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>repeated .perfetto.protos.CommitDataRequest.ChunksToMove chunks_to_move = 1;</code>
       */
      public Builder removeChunksToMove(int index) {
        if (chunksToMoveBuilder_ == null) {
          ensureChunksToMoveIsMutable();
          chunksToMove_.remove(index);
          onChanged();
        } else {
          chunksToMoveBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <code>repeated .perfetto.protos.CommitDataRequest.ChunksToMove chunks_to_move = 1;</code>
       */
      public perfetto.protos.CommitDataRequestOuterClass.CommitDataRequest.ChunksToMove.Builder getChunksToMoveBuilder(
          int index) {
        return getChunksToMoveFieldBuilder().getBuilder(index);
      }
      /**
       * <code>repeated .perfetto.protos.CommitDataRequest.ChunksToMove chunks_to_move = 1;</code>
       */
      public perfetto.protos.CommitDataRequestOuterClass.CommitDataRequest.ChunksToMoveOrBuilder getChunksToMoveOrBuilder(
          int index) {
        if (chunksToMoveBuilder_ == null) {
          return chunksToMove_.get(index);  } else {
          return chunksToMoveBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <code>repeated .perfetto.protos.CommitDataRequest.ChunksToMove chunks_to_move = 1;</code>
       */
      public java.util.List<? extends perfetto.protos.CommitDataRequestOuterClass.CommitDataRequest.ChunksToMoveOrBuilder> 
           getChunksToMoveOrBuilderList() {
        if (chunksToMoveBuilder_ != null) {
          return chunksToMoveBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(chunksToMove_);
        }
      }
      /**
       * <code>repeated .perfetto.protos.CommitDataRequest.ChunksToMove chunks_to_move = 1;</code>
       */
      public perfetto.protos.CommitDataRequestOuterClass.CommitDataRequest.ChunksToMove.Builder addChunksToMoveBuilder() {
        return getChunksToMoveFieldBuilder().addBuilder(
            perfetto.protos.CommitDataRequestOuterClass.CommitDataRequest.ChunksToMove.getDefaultInstance());
      }
      /**
       * <code>repeated .perfetto.protos.CommitDataRequest.ChunksToMove chunks_to_move = 1;</code>
       */
      public perfetto.protos.CommitDataRequestOuterClass.CommitDataRequest.ChunksToMove.Builder addChunksToMoveBuilder(
          int index) {
        return getChunksToMoveFieldBuilder().addBuilder(
            index, perfetto.protos.CommitDataRequestOuterClass.CommitDataRequest.ChunksToMove.getDefaultInstance());
      }
      /**
       * <code>repeated .perfetto.protos.CommitDataRequest.ChunksToMove chunks_to_move = 1;</code>
       */
      public java.util.List<perfetto.protos.CommitDataRequestOuterClass.CommitDataRequest.ChunksToMove.Builder> 
           getChunksToMoveBuilderList() {
        return getChunksToMoveFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilderV3<
          perfetto.protos.CommitDataRequestOuterClass.CommitDataRequest.ChunksToMove, perfetto.protos.CommitDataRequestOuterClass.CommitDataRequest.ChunksToMove.Builder, perfetto.protos.CommitDataRequestOuterClass.CommitDataRequest.ChunksToMoveOrBuilder> 
          getChunksToMoveFieldBuilder() {
        if (chunksToMoveBuilder_ == null) {
          chunksToMoveBuilder_ = new com.google.protobuf.RepeatedFieldBuilderV3<
              perfetto.protos.CommitDataRequestOuterClass.CommitDataRequest.ChunksToMove, perfetto.protos.CommitDataRequestOuterClass.CommitDataRequest.ChunksToMove.Builder, perfetto.protos.CommitDataRequestOuterClass.CommitDataRequest.ChunksToMoveOrBuilder>(
                  chunksToMove_,
                  ((bitField0_ & 0x00000001) != 0),
                  getParentForChildren(),
                  isClean());
          chunksToMove_ = null;
        }
        return chunksToMoveBuilder_;
      }

      private java.util.List<perfetto.protos.CommitDataRequestOuterClass.CommitDataRequest.ChunkToPatch> chunksToPatch_ =
        java.util.Collections.emptyList();
      private void ensureChunksToPatchIsMutable() {
        if (!((bitField0_ & 0x00000002) != 0)) {
          chunksToPatch_ = new java.util.ArrayList<perfetto.protos.CommitDataRequestOuterClass.CommitDataRequest.ChunkToPatch>(chunksToPatch_);
          bitField0_ |= 0x00000002;
         }
      }

      private com.google.protobuf.RepeatedFieldBuilderV3<
          perfetto.protos.CommitDataRequestOuterClass.CommitDataRequest.ChunkToPatch, perfetto.protos.CommitDataRequestOuterClass.CommitDataRequest.ChunkToPatch.Builder, perfetto.protos.CommitDataRequestOuterClass.CommitDataRequest.ChunkToPatchOrBuilder> chunksToPatchBuilder_;

      /**
       * <code>repeated .perfetto.protos.CommitDataRequest.ChunkToPatch chunks_to_patch = 2;</code>
       */
      public java.util.List<perfetto.protos.CommitDataRequestOuterClass.CommitDataRequest.ChunkToPatch> getChunksToPatchList() {
        if (chunksToPatchBuilder_ == null) {
          return java.util.Collections.unmodifiableList(chunksToPatch_);
        } else {
          return chunksToPatchBuilder_.getMessageList();
        }
      }
      /**
       * <code>repeated .perfetto.protos.CommitDataRequest.ChunkToPatch chunks_to_patch = 2;</code>
       */
      public int getChunksToPatchCount() {
        if (chunksToPatchBuilder_ == null) {
          return chunksToPatch_.size();
        } else {
          return chunksToPatchBuilder_.getCount();
        }
      }
      /**
       * <code>repeated .perfetto.protos.CommitDataRequest.ChunkToPatch chunks_to_patch = 2;</code>
       */
      public perfetto.protos.CommitDataRequestOuterClass.CommitDataRequest.ChunkToPatch getChunksToPatch(int index) {
        if (chunksToPatchBuilder_ == null) {
          return chunksToPatch_.get(index);
        } else {
          return chunksToPatchBuilder_.getMessage(index);
        }
      }
      /**
       * <code>repeated .perfetto.protos.CommitDataRequest.ChunkToPatch chunks_to_patch = 2;</code>
       */
      public Builder setChunksToPatch(
          int index, perfetto.protos.CommitDataRequestOuterClass.CommitDataRequest.ChunkToPatch value) {
        if (chunksToPatchBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureChunksToPatchIsMutable();
          chunksToPatch_.set(index, value);
          onChanged();
        } else {
          chunksToPatchBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .perfetto.protos.CommitDataRequest.ChunkToPatch chunks_to_patch = 2;</code>
       */
      public Builder setChunksToPatch(
          int index, perfetto.protos.CommitDataRequestOuterClass.CommitDataRequest.ChunkToPatch.Builder builderForValue) {
        if (chunksToPatchBuilder_ == null) {
          ensureChunksToPatchIsMutable();
          chunksToPatch_.set(index, builderForValue.build());
          onChanged();
        } else {
          chunksToPatchBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .perfetto.protos.CommitDataRequest.ChunkToPatch chunks_to_patch = 2;</code>
       */
      public Builder addChunksToPatch(perfetto.protos.CommitDataRequestOuterClass.CommitDataRequest.ChunkToPatch value) {
        if (chunksToPatchBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureChunksToPatchIsMutable();
          chunksToPatch_.add(value);
          onChanged();
        } else {
          chunksToPatchBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <code>repeated .perfetto.protos.CommitDataRequest.ChunkToPatch chunks_to_patch = 2;</code>
       */
      public Builder addChunksToPatch(
          int index, perfetto.protos.CommitDataRequestOuterClass.CommitDataRequest.ChunkToPatch value) {
        if (chunksToPatchBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureChunksToPatchIsMutable();
          chunksToPatch_.add(index, value);
          onChanged();
        } else {
          chunksToPatchBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .perfetto.protos.CommitDataRequest.ChunkToPatch chunks_to_patch = 2;</code>
       */
      public Builder addChunksToPatch(
          perfetto.protos.CommitDataRequestOuterClass.CommitDataRequest.ChunkToPatch.Builder builderForValue) {
        if (chunksToPatchBuilder_ == null) {
          ensureChunksToPatchIsMutable();
          chunksToPatch_.add(builderForValue.build());
          onChanged();
        } else {
          chunksToPatchBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .perfetto.protos.CommitDataRequest.ChunkToPatch chunks_to_patch = 2;</code>
       */
      public Builder addChunksToPatch(
          int index, perfetto.protos.CommitDataRequestOuterClass.CommitDataRequest.ChunkToPatch.Builder builderForValue) {
        if (chunksToPatchBuilder_ == null) {
          ensureChunksToPatchIsMutable();
          chunksToPatch_.add(index, builderForValue.build());
          onChanged();
        } else {
          chunksToPatchBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .perfetto.protos.CommitDataRequest.ChunkToPatch chunks_to_patch = 2;</code>
       */
      public Builder addAllChunksToPatch(
          java.lang.Iterable<? extends perfetto.protos.CommitDataRequestOuterClass.CommitDataRequest.ChunkToPatch> values) {
        if (chunksToPatchBuilder_ == null) {
          ensureChunksToPatchIsMutable();
          com.google.protobuf.AbstractMessageLite.Builder.addAll(
              values, chunksToPatch_);
          onChanged();
        } else {
          chunksToPatchBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <code>repeated .perfetto.protos.CommitDataRequest.ChunkToPatch chunks_to_patch = 2;</code>
       */
      public Builder clearChunksToPatch() {
        if (chunksToPatchBuilder_ == null) {
          chunksToPatch_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000002);
          onChanged();
        } else {
          chunksToPatchBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>repeated .perfetto.protos.CommitDataRequest.ChunkToPatch chunks_to_patch = 2;</code>
       */
      public Builder removeChunksToPatch(int index) {
        if (chunksToPatchBuilder_ == null) {
          ensureChunksToPatchIsMutable();
          chunksToPatch_.remove(index);
          onChanged();
        } else {
          chunksToPatchBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <code>repeated .perfetto.protos.CommitDataRequest.ChunkToPatch chunks_to_patch = 2;</code>
       */
      public perfetto.protos.CommitDataRequestOuterClass.CommitDataRequest.ChunkToPatch.Builder getChunksToPatchBuilder(
          int index) {
        return getChunksToPatchFieldBuilder().getBuilder(index);
      }
      /**
       * <code>repeated .perfetto.protos.CommitDataRequest.ChunkToPatch chunks_to_patch = 2;</code>
       */
      public perfetto.protos.CommitDataRequestOuterClass.CommitDataRequest.ChunkToPatchOrBuilder getChunksToPatchOrBuilder(
          int index) {
        if (chunksToPatchBuilder_ == null) {
          return chunksToPatch_.get(index);  } else {
          return chunksToPatchBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <code>repeated .perfetto.protos.CommitDataRequest.ChunkToPatch chunks_to_patch = 2;</code>
       */
      public java.util.List<? extends perfetto.protos.CommitDataRequestOuterClass.CommitDataRequest.ChunkToPatchOrBuilder> 
           getChunksToPatchOrBuilderList() {
        if (chunksToPatchBuilder_ != null) {
          return chunksToPatchBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(chunksToPatch_);
        }
      }
      /**
       * <code>repeated .perfetto.protos.CommitDataRequest.ChunkToPatch chunks_to_patch = 2;</code>
       */
      public perfetto.protos.CommitDataRequestOuterClass.CommitDataRequest.ChunkToPatch.Builder addChunksToPatchBuilder() {
        return getChunksToPatchFieldBuilder().addBuilder(
            perfetto.protos.CommitDataRequestOuterClass.CommitDataRequest.ChunkToPatch.getDefaultInstance());
      }
      /**
       * <code>repeated .perfetto.protos.CommitDataRequest.ChunkToPatch chunks_to_patch = 2;</code>
       */
      public perfetto.protos.CommitDataRequestOuterClass.CommitDataRequest.ChunkToPatch.Builder addChunksToPatchBuilder(
          int index) {
        return getChunksToPatchFieldBuilder().addBuilder(
            index, perfetto.protos.CommitDataRequestOuterClass.CommitDataRequest.ChunkToPatch.getDefaultInstance());
      }
      /**
       * <code>repeated .perfetto.protos.CommitDataRequest.ChunkToPatch chunks_to_patch = 2;</code>
       */
      public java.util.List<perfetto.protos.CommitDataRequestOuterClass.CommitDataRequest.ChunkToPatch.Builder> 
           getChunksToPatchBuilderList() {
        return getChunksToPatchFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilderV3<
          perfetto.protos.CommitDataRequestOuterClass.CommitDataRequest.ChunkToPatch, perfetto.protos.CommitDataRequestOuterClass.CommitDataRequest.ChunkToPatch.Builder, perfetto.protos.CommitDataRequestOuterClass.CommitDataRequest.ChunkToPatchOrBuilder> 
          getChunksToPatchFieldBuilder() {
        if (chunksToPatchBuilder_ == null) {
          chunksToPatchBuilder_ = new com.google.protobuf.RepeatedFieldBuilderV3<
              perfetto.protos.CommitDataRequestOuterClass.CommitDataRequest.ChunkToPatch, perfetto.protos.CommitDataRequestOuterClass.CommitDataRequest.ChunkToPatch.Builder, perfetto.protos.CommitDataRequestOuterClass.CommitDataRequest.ChunkToPatchOrBuilder>(
                  chunksToPatch_,
                  ((bitField0_ & 0x00000002) != 0),
                  getParentForChildren(),
                  isClean());
          chunksToPatch_ = null;
        }
        return chunksToPatchBuilder_;
      }

      private long flushRequestId_ ;
      /**
       * <pre>
       * Optional. If this commit is made in response to a Flush(id) request coming
       * from the service, copy back the id of the request so the service can tell
       * when the flush happened.
       * </pre>
       *
       * <code>optional uint64 flush_request_id = 3;</code>
       * @return Whether the flushRequestId field is set.
       */
      @java.lang.Override
      public boolean hasFlushRequestId() {
        return ((bitField0_ & 0x00000004) != 0);
      }
      /**
       * <pre>
       * Optional. If this commit is made in response to a Flush(id) request coming
       * from the service, copy back the id of the request so the service can tell
       * when the flush happened.
       * </pre>
       *
       * <code>optional uint64 flush_request_id = 3;</code>
       * @return The flushRequestId.
       */
      @java.lang.Override
      public long getFlushRequestId() {
        return flushRequestId_;
      }
      /**
       * <pre>
       * Optional. If this commit is made in response to a Flush(id) request coming
       * from the service, copy back the id of the request so the service can tell
       * when the flush happened.
       * </pre>
       *
       * <code>optional uint64 flush_request_id = 3;</code>
       * @param value The flushRequestId to set.
       * @return This builder for chaining.
       */
      public Builder setFlushRequestId(long value) {
        
        flushRequestId_ = value;
        bitField0_ |= 0x00000004;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Optional. If this commit is made in response to a Flush(id) request coming
       * from the service, copy back the id of the request so the service can tell
       * when the flush happened.
       * </pre>
       *
       * <code>optional uint64 flush_request_id = 3;</code>
       * @return This builder for chaining.
       */
      public Builder clearFlushRequestId() {
        bitField0_ = (bitField0_ & ~0x00000004);
        flushRequestId_ = 0L;
        onChanged();
        return this;
      }
      @java.lang.Override
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      @java.lang.Override
      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:perfetto.protos.CommitDataRequest)
    }

    // @@protoc_insertion_point(class_scope:perfetto.protos.CommitDataRequest)
    private static final perfetto.protos.CommitDataRequestOuterClass.CommitDataRequest DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new perfetto.protos.CommitDataRequestOuterClass.CommitDataRequest();
    }

    public static perfetto.protos.CommitDataRequestOuterClass.CommitDataRequest getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    @java.lang.Deprecated public static final com.google.protobuf.Parser<CommitDataRequest>
        PARSER = new com.google.protobuf.AbstractParser<CommitDataRequest>() {
      @java.lang.Override
      public CommitDataRequest parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        Builder builder = newBuilder();
        try {
          builder.mergeFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.setUnfinishedMessage(builder.buildPartial());
        } catch (com.google.protobuf.UninitializedMessageException e) {
          throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
        } catch (java.io.IOException e) {
          throw new com.google.protobuf.InvalidProtocolBufferException(e)
              .setUnfinishedMessage(builder.buildPartial());
        }
        return builder.buildPartial();
      }
    };

    public static com.google.protobuf.Parser<CommitDataRequest> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<CommitDataRequest> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public perfetto.protos.CommitDataRequestOuterClass.CommitDataRequest getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_perfetto_protos_CommitDataRequest_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_perfetto_protos_CommitDataRequest_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_perfetto_protos_CommitDataRequest_ChunksToMove_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_perfetto_protos_CommitDataRequest_ChunksToMove_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_perfetto_protos_CommitDataRequest_ChunkToPatch_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_perfetto_protos_CommitDataRequest_ChunkToPatch_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_perfetto_protos_CommitDataRequest_ChunkToPatch_Patch_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_perfetto_protos_CommitDataRequest_ChunkToPatch_Patch_fieldAccessorTable;

  public static com.google.protobuf.Descriptors.FileDescriptor
      getDescriptor() {
    return descriptor;
  }
  private static  com.google.protobuf.Descriptors.FileDescriptor
      descriptor;
  static {
    java.lang.String[] descriptorData = {
      "\n0protos/perfetto/common/commit_data_req" +
      "uest.proto\022\017perfetto.protos\"\332\003\n\021CommitDa" +
      "taRequest\022G\n\016chunks_to_move\030\001 \003(\0132/.perf" +
      "etto.protos.CommitDataRequest.ChunksToMo" +
      "ve\022H\n\017chunks_to_patch\030\002 \003(\0132/.perfetto.p" +
      "rotos.CommitDataRequest.ChunkToPatch\022\030\n\020" +
      "flush_request_id\030\003 \001(\004\032B\n\014ChunksToMove\022\014" +
      "\n\004page\030\001 \001(\r\022\r\n\005chunk\030\002 \001(\r\022\025\n\rtarget_bu" +
      "ffer\030\003 \001(\r\032\323\001\n\014ChunkToPatch\022\025\n\rtarget_bu" +
      "ffer\030\001 \001(\r\022\021\n\twriter_id\030\002 \001(\r\022\020\n\010chunk_i" +
      "d\030\003 \001(\r\022F\n\007patches\030\004 \003(\01325.perfetto.prot" +
      "os.CommitDataRequest.ChunkToPatch.Patch\022" +
      "\030\n\020has_more_patches\030\005 \001(\010\032%\n\005Patch\022\016\n\006of" +
      "fset\030\001 \001(\r\022\014\n\004data\030\002 \001(\014"
    };
    descriptor = com.google.protobuf.Descriptors.FileDescriptor
      .internalBuildGeneratedFileFrom(descriptorData,
        new com.google.protobuf.Descriptors.FileDescriptor[] {
        });
    internal_static_perfetto_protos_CommitDataRequest_descriptor =
      getDescriptor().getMessageTypes().get(0);
    internal_static_perfetto_protos_CommitDataRequest_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_perfetto_protos_CommitDataRequest_descriptor,
        new java.lang.String[] { "ChunksToMove", "ChunksToPatch", "FlushRequestId", });
    internal_static_perfetto_protos_CommitDataRequest_ChunksToMove_descriptor =
      internal_static_perfetto_protos_CommitDataRequest_descriptor.getNestedTypes().get(0);
    internal_static_perfetto_protos_CommitDataRequest_ChunksToMove_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_perfetto_protos_CommitDataRequest_ChunksToMove_descriptor,
        new java.lang.String[] { "Page", "Chunk", "TargetBuffer", });
    internal_static_perfetto_protos_CommitDataRequest_ChunkToPatch_descriptor =
      internal_static_perfetto_protos_CommitDataRequest_descriptor.getNestedTypes().get(1);
    internal_static_perfetto_protos_CommitDataRequest_ChunkToPatch_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_perfetto_protos_CommitDataRequest_ChunkToPatch_descriptor,
        new java.lang.String[] { "TargetBuffer", "WriterId", "ChunkId", "Patches", "HasMorePatches", });
    internal_static_perfetto_protos_CommitDataRequest_ChunkToPatch_Patch_descriptor =
      internal_static_perfetto_protos_CommitDataRequest_ChunkToPatch_descriptor.getNestedTypes().get(0);
    internal_static_perfetto_protos_CommitDataRequest_ChunkToPatch_Patch_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_perfetto_protos_CommitDataRequest_ChunkToPatch_Patch_descriptor,
        new java.lang.String[] { "Offset", "Data", });
  }

  // @@protoc_insertion_point(outer_class_scope)
}
