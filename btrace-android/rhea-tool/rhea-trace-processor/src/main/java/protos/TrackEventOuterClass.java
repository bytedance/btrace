// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: protos/perfetto/trace/track_event/track_event.proto

package perfetto.protos;

public final class TrackEventOuterClass {
  private TrackEventOuterClass() {}
  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistryLite registry) {
  }

  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistry registry) {
    registerAllExtensions(
        (com.google.protobuf.ExtensionRegistryLite) registry);
  }
  public interface TrackEventOrBuilder extends
      // @@protoc_insertion_point(interface_extends:perfetto.protos.TrackEvent)
      com.google.protobuf.GeneratedMessageV3.
          ExtendableMessageOrBuilder<TrackEvent> {

    /**
     * <pre>
     * Names of categories of the event. In the client library, categories are a
     * way to turn groups of individual events on or off.
     * interned EventCategoryName.
     * </pre>
     *
     * <code>repeated uint64 category_iids = 3;</code>
     * @return A list containing the categoryIids.
     */
    java.util.List<java.lang.Long> getCategoryIidsList();
    /**
     * <pre>
     * Names of categories of the event. In the client library, categories are a
     * way to turn groups of individual events on or off.
     * interned EventCategoryName.
     * </pre>
     *
     * <code>repeated uint64 category_iids = 3;</code>
     * @return The count of categoryIids.
     */
    int getCategoryIidsCount();
    /**
     * <pre>
     * Names of categories of the event. In the client library, categories are a
     * way to turn groups of individual events on or off.
     * interned EventCategoryName.
     * </pre>
     *
     * <code>repeated uint64 category_iids = 3;</code>
     * @param index The index of the element to return.
     * @return The categoryIids at the given index.
     */
    long getCategoryIids(int index);

    /**
     * <pre>
     * non-interned variant.
     * </pre>
     *
     * <code>repeated string categories = 22;</code>
     * @return A list containing the categories.
     */
    java.util.List<java.lang.String>
        getCategoriesList();
    /**
     * <pre>
     * non-interned variant.
     * </pre>
     *
     * <code>repeated string categories = 22;</code>
     * @return The count of categories.
     */
    int getCategoriesCount();
    /**
     * <pre>
     * non-interned variant.
     * </pre>
     *
     * <code>repeated string categories = 22;</code>
     * @param index The index of the element to return.
     * @return The categories at the given index.
     */
    java.lang.String getCategories(int index);
    /**
     * <pre>
     * non-interned variant.
     * </pre>
     *
     * <code>repeated string categories = 22;</code>
     * @param index The index of the value to return.
     * @return The bytes of the categories at the given index.
     */
    com.google.protobuf.ByteString
        getCategoriesBytes(int index);

    /**
     * <pre>
     * interned EventName.
     * </pre>
     *
     * <code>uint64 name_iid = 10;</code>
     * @return Whether the nameIid field is set.
     */
    boolean hasNameIid();
    /**
     * <pre>
     * interned EventName.
     * </pre>
     *
     * <code>uint64 name_iid = 10;</code>
     * @return The nameIid.
     */
    long getNameIid();

    /**
     * <pre>
     * non-interned variant.
     * </pre>
     *
     * <code>string name = 23;</code>
     * @return Whether the name field is set.
     */
    boolean hasName();
    /**
     * <pre>
     * non-interned variant.
     * </pre>
     *
     * <code>string name = 23;</code>
     * @return The name.
     */
    java.lang.String getName();
    /**
     * <pre>
     * non-interned variant.
     * </pre>
     *
     * <code>string name = 23;</code>
     * @return The bytes for name.
     */
    com.google.protobuf.ByteString
        getNameBytes();

    /**
     * <code>optional .perfetto.protos.TrackEvent.Type type = 9;</code>
     * @return Whether the type field is set.
     */
    boolean hasType();
    /**
     * <code>optional .perfetto.protos.TrackEvent.Type type = 9;</code>
     * @return The type.
     */
    perfetto.protos.TrackEventOuterClass.TrackEvent.Type getType();

    /**
     * <pre>
     * Identifies the track of the event. The default value may be overridden
     * using TrackEventDefaults, e.g., to specify the track of the TraceWriter's
     * sequence (in most cases sequence = one thread). If no value is specified
     * here or in TrackEventDefaults, the TrackEvent will be associated with an
     * implicit trace-global track (uuid 0). See TrackDescriptor::uuid.
     * </pre>
     *
     * <code>optional uint64 track_uuid = 11;</code>
     * @return Whether the trackUuid field is set.
     */
    boolean hasTrackUuid();
    /**
     * <pre>
     * Identifies the track of the event. The default value may be overridden
     * using TrackEventDefaults, e.g., to specify the track of the TraceWriter's
     * sequence (in most cases sequence = one thread). If no value is specified
     * here or in TrackEventDefaults, the TrackEvent will be associated with an
     * implicit trace-global track (uuid 0). See TrackDescriptor::uuid.
     * </pre>
     *
     * <code>optional uint64 track_uuid = 11;</code>
     * @return The trackUuid.
     */
    long getTrackUuid();

    /**
     * <code>int64 counter_value = 30;</code>
     * @return Whether the counterValue field is set.
     */
    boolean hasCounterValue();
    /**
     * <code>int64 counter_value = 30;</code>
     * @return The counterValue.
     */
    long getCounterValue();

    /**
     * <code>double double_counter_value = 44;</code>
     * @return Whether the doubleCounterValue field is set.
     */
    boolean hasDoubleCounterValue();
    /**
     * <code>double double_counter_value = 44;</code>
     * @return The doubleCounterValue.
     */
    double getDoubleCounterValue();

    /**
     * <pre>
     * To encode counter values more efficiently, we support attaching additional
     * counter values to a TrackEvent of any type. All values will share the same
     * timestamp specified in the TracePacket. The value at
     * extra_counter_values[N] is for the counter track referenced by
     * extra_counter_track_uuids[N].
     * |extra_counter_track_uuids| may also be set via TrackEventDefaults. There
     * should always be equal or more uuids than values. It is valid to set more
     * uuids (e.g. via defaults) than values. If uuids are specified in
     * TrackEventDefaults and a TrackEvent, the TrackEvent uuids override the
     * default uuid list.
     * For example, this allows snapshotting the thread time clock at each
     * thread-track BEGIN and END event to capture the cpu time delta of a slice.
     * </pre>
     *
     * <code>repeated uint64 extra_counter_track_uuids = 31;</code>
     * @return A list containing the extraCounterTrackUuids.
     */
    java.util.List<java.lang.Long> getExtraCounterTrackUuidsList();
    /**
     * <pre>
     * To encode counter values more efficiently, we support attaching additional
     * counter values to a TrackEvent of any type. All values will share the same
     * timestamp specified in the TracePacket. The value at
     * extra_counter_values[N] is for the counter track referenced by
     * extra_counter_track_uuids[N].
     * |extra_counter_track_uuids| may also be set via TrackEventDefaults. There
     * should always be equal or more uuids than values. It is valid to set more
     * uuids (e.g. via defaults) than values. If uuids are specified in
     * TrackEventDefaults and a TrackEvent, the TrackEvent uuids override the
     * default uuid list.
     * For example, this allows snapshotting the thread time clock at each
     * thread-track BEGIN and END event to capture the cpu time delta of a slice.
     * </pre>
     *
     * <code>repeated uint64 extra_counter_track_uuids = 31;</code>
     * @return The count of extraCounterTrackUuids.
     */
    int getExtraCounterTrackUuidsCount();
    /**
     * <pre>
     * To encode counter values more efficiently, we support attaching additional
     * counter values to a TrackEvent of any type. All values will share the same
     * timestamp specified in the TracePacket. The value at
     * extra_counter_values[N] is for the counter track referenced by
     * extra_counter_track_uuids[N].
     * |extra_counter_track_uuids| may also be set via TrackEventDefaults. There
     * should always be equal or more uuids than values. It is valid to set more
     * uuids (e.g. via defaults) than values. If uuids are specified in
     * TrackEventDefaults and a TrackEvent, the TrackEvent uuids override the
     * default uuid list.
     * For example, this allows snapshotting the thread time clock at each
     * thread-track BEGIN and END event to capture the cpu time delta of a slice.
     * </pre>
     *
     * <code>repeated uint64 extra_counter_track_uuids = 31;</code>
     * @param index The index of the element to return.
     * @return The extraCounterTrackUuids at the given index.
     */
    long getExtraCounterTrackUuids(int index);

    /**
     * <code>repeated int64 extra_counter_values = 12;</code>
     * @return A list containing the extraCounterValues.
     */
    java.util.List<java.lang.Long> getExtraCounterValuesList();
    /**
     * <code>repeated int64 extra_counter_values = 12;</code>
     * @return The count of extraCounterValues.
     */
    int getExtraCounterValuesCount();
    /**
     * <code>repeated int64 extra_counter_values = 12;</code>
     * @param index The index of the element to return.
     * @return The extraCounterValues at the given index.
     */
    long getExtraCounterValues(int index);

    /**
     * <pre>
     * Counter snapshots using floating point instead of integer values.
     * </pre>
     *
     * <code>repeated uint64 extra_double_counter_track_uuids = 45;</code>
     * @return A list containing the extraDoubleCounterTrackUuids.
     */
    java.util.List<java.lang.Long> getExtraDoubleCounterTrackUuidsList();
    /**
     * <pre>
     * Counter snapshots using floating point instead of integer values.
     * </pre>
     *
     * <code>repeated uint64 extra_double_counter_track_uuids = 45;</code>
     * @return The count of extraDoubleCounterTrackUuids.
     */
    int getExtraDoubleCounterTrackUuidsCount();
    /**
     * <pre>
     * Counter snapshots using floating point instead of integer values.
     * </pre>
     *
     * <code>repeated uint64 extra_double_counter_track_uuids = 45;</code>
     * @param index The index of the element to return.
     * @return The extraDoubleCounterTrackUuids at the given index.
     */
    long getExtraDoubleCounterTrackUuids(int index);

    /**
     * <code>repeated double extra_double_counter_values = 46;</code>
     * @return A list containing the extraDoubleCounterValues.
     */
    java.util.List<java.lang.Double> getExtraDoubleCounterValuesList();
    /**
     * <code>repeated double extra_double_counter_values = 46;</code>
     * @return The count of extraDoubleCounterValues.
     */
    int getExtraDoubleCounterValuesCount();
    /**
     * <code>repeated double extra_double_counter_values = 46;</code>
     * @param index The index of the element to return.
     * @return The extraDoubleCounterValues at the given index.
     */
    double getExtraDoubleCounterValues(int index);

    /**
     * <pre>
     * IDs of flows originating, passing through, or ending at this event.
     * Flow IDs are global within a trace.
     * A flow connects a sequence of TrackEvents within or across tracks, e.g.
     * an input event may be handled on one thread but cause another event on
     * a different thread - a flow between the two events can associate them.
     * The direction of the flows between events is inferred from the events'
     * timestamps. The earliest event with the same flow ID becomes the source
     * of the flow. Any events thereafter are intermediate steps of the flow,
     * until the flow terminates at the last event with the flow ID.
     * Flows can also be explicitly terminated (see |terminating_flow_ids|), so
     * that the same ID can later be reused for another flow.
     * DEPRECATED. Only kept for backwards compatibility. Use |flow_ids|.
     * </pre>
     *
     * <code>repeated uint64 flow_ids_old = 36 [deprecated = true];</code>
     * @deprecated perfetto.protos.TrackEvent.flow_ids_old is deprecated.
     *     See protos/perfetto/trace/track_event/track_event.proto;l=217
     * @return A list containing the flowIdsOld.
     */
    @java.lang.Deprecated java.util.List<java.lang.Long> getFlowIdsOldList();
    /**
     * <pre>
     * IDs of flows originating, passing through, or ending at this event.
     * Flow IDs are global within a trace.
     * A flow connects a sequence of TrackEvents within or across tracks, e.g.
     * an input event may be handled on one thread but cause another event on
     * a different thread - a flow between the two events can associate them.
     * The direction of the flows between events is inferred from the events'
     * timestamps. The earliest event with the same flow ID becomes the source
     * of the flow. Any events thereafter are intermediate steps of the flow,
     * until the flow terminates at the last event with the flow ID.
     * Flows can also be explicitly terminated (see |terminating_flow_ids|), so
     * that the same ID can later be reused for another flow.
     * DEPRECATED. Only kept for backwards compatibility. Use |flow_ids|.
     * </pre>
     *
     * <code>repeated uint64 flow_ids_old = 36 [deprecated = true];</code>
     * @deprecated perfetto.protos.TrackEvent.flow_ids_old is deprecated.
     *     See protos/perfetto/trace/track_event/track_event.proto;l=217
     * @return The count of flowIdsOld.
     */
    @java.lang.Deprecated int getFlowIdsOldCount();
    /**
     * <pre>
     * IDs of flows originating, passing through, or ending at this event.
     * Flow IDs are global within a trace.
     * A flow connects a sequence of TrackEvents within or across tracks, e.g.
     * an input event may be handled on one thread but cause another event on
     * a different thread - a flow between the two events can associate them.
     * The direction of the flows between events is inferred from the events'
     * timestamps. The earliest event with the same flow ID becomes the source
     * of the flow. Any events thereafter are intermediate steps of the flow,
     * until the flow terminates at the last event with the flow ID.
     * Flows can also be explicitly terminated (see |terminating_flow_ids|), so
     * that the same ID can later be reused for another flow.
     * DEPRECATED. Only kept for backwards compatibility. Use |flow_ids|.
     * </pre>
     *
     * <code>repeated uint64 flow_ids_old = 36 [deprecated = true];</code>
     * @deprecated perfetto.protos.TrackEvent.flow_ids_old is deprecated.
     *     See protos/perfetto/trace/track_event/track_event.proto;l=217
     * @param index The index of the element to return.
     * @return The flowIdsOld at the given index.
     */
    @java.lang.Deprecated long getFlowIdsOld(int index);

    /**
     * <pre>
     * TODO(b/204341740): replace "flow_ids_old" with "flow_ids" to reduce memory
     * consumption.
     * </pre>
     *
     * <code>repeated fixed64 flow_ids = 47;</code>
     * @return A list containing the flowIds.
     */
    java.util.List<java.lang.Long> getFlowIdsList();
    /**
     * <pre>
     * TODO(b/204341740): replace "flow_ids_old" with "flow_ids" to reduce memory
     * consumption.
     * </pre>
     *
     * <code>repeated fixed64 flow_ids = 47;</code>
     * @return The count of flowIds.
     */
    int getFlowIdsCount();
    /**
     * <pre>
     * TODO(b/204341740): replace "flow_ids_old" with "flow_ids" to reduce memory
     * consumption.
     * </pre>
     *
     * <code>repeated fixed64 flow_ids = 47;</code>
     * @param index The index of the element to return.
     * @return The flowIds at the given index.
     */
    long getFlowIds(int index);

    /**
     * <pre>
     * List of flow ids which should terminate on this event, otherwise same as
     * |flow_ids|.
     * Any one flow ID should be either listed as part of |flow_ids| OR
     * |terminating_flow_ids|, not both.
     * DEPRECATED. Only kept for backwards compatibility.  Use
     * |terminating_flow_ids|.
     * </pre>
     *
     * <code>repeated uint64 terminating_flow_ids_old = 42 [deprecated = true];</code>
     * @deprecated perfetto.protos.TrackEvent.terminating_flow_ids_old is deprecated.
     *     See protos/perfetto/trace/track_event/track_event.proto;l=228
     * @return A list containing the terminatingFlowIdsOld.
     */
    @java.lang.Deprecated java.util.List<java.lang.Long> getTerminatingFlowIdsOldList();
    /**
     * <pre>
     * List of flow ids which should terminate on this event, otherwise same as
     * |flow_ids|.
     * Any one flow ID should be either listed as part of |flow_ids| OR
     * |terminating_flow_ids|, not both.
     * DEPRECATED. Only kept for backwards compatibility.  Use
     * |terminating_flow_ids|.
     * </pre>
     *
     * <code>repeated uint64 terminating_flow_ids_old = 42 [deprecated = true];</code>
     * @deprecated perfetto.protos.TrackEvent.terminating_flow_ids_old is deprecated.
     *     See protos/perfetto/trace/track_event/track_event.proto;l=228
     * @return The count of terminatingFlowIdsOld.
     */
    @java.lang.Deprecated int getTerminatingFlowIdsOldCount();
    /**
     * <pre>
     * List of flow ids which should terminate on this event, otherwise same as
     * |flow_ids|.
     * Any one flow ID should be either listed as part of |flow_ids| OR
     * |terminating_flow_ids|, not both.
     * DEPRECATED. Only kept for backwards compatibility.  Use
     * |terminating_flow_ids|.
     * </pre>
     *
     * <code>repeated uint64 terminating_flow_ids_old = 42 [deprecated = true];</code>
     * @deprecated perfetto.protos.TrackEvent.terminating_flow_ids_old is deprecated.
     *     See protos/perfetto/trace/track_event/track_event.proto;l=228
     * @param index The index of the element to return.
     * @return The terminatingFlowIdsOld at the given index.
     */
    @java.lang.Deprecated long getTerminatingFlowIdsOld(int index);

    /**
     * <pre>
     * TODO(b/204341740): replace "terminating_flow_ids_old" with
     * "terminating_flow_ids" to reduce memory consumption.
     * </pre>
     *
     * <code>repeated fixed64 terminating_flow_ids = 48;</code>
     * @return A list containing the terminatingFlowIds.
     */
    java.util.List<java.lang.Long> getTerminatingFlowIdsList();
    /**
     * <pre>
     * TODO(b/204341740): replace "terminating_flow_ids_old" with
     * "terminating_flow_ids" to reduce memory consumption.
     * </pre>
     *
     * <code>repeated fixed64 terminating_flow_ids = 48;</code>
     * @return The count of terminatingFlowIds.
     */
    int getTerminatingFlowIdsCount();
    /**
     * <pre>
     * TODO(b/204341740): replace "terminating_flow_ids_old" with
     * "terminating_flow_ids" to reduce memory consumption.
     * </pre>
     *
     * <code>repeated fixed64 terminating_flow_ids = 48;</code>
     * @param index The index of the element to return.
     * @return The terminatingFlowIds at the given index.
     */
    long getTerminatingFlowIds(int index);

    /**
     * <pre>
     * Unstable key/value annotations shown in the trace viewer but not intended
     * for metrics use.
     * </pre>
     *
     * <code>repeated .perfetto.protos.DebugAnnotation debug_annotations = 4;</code>
     */
    java.util.List<perfetto.protos.DebugAnnotationOuterClass.DebugAnnotation> 
        getDebugAnnotationsList();
    /**
     * <pre>
     * Unstable key/value annotations shown in the trace viewer but not intended
     * for metrics use.
     * </pre>
     *
     * <code>repeated .perfetto.protos.DebugAnnotation debug_annotations = 4;</code>
     */
    perfetto.protos.DebugAnnotationOuterClass.DebugAnnotation getDebugAnnotations(int index);
    /**
     * <pre>
     * Unstable key/value annotations shown in the trace viewer but not intended
     * for metrics use.
     * </pre>
     *
     * <code>repeated .perfetto.protos.DebugAnnotation debug_annotations = 4;</code>
     */
    int getDebugAnnotationsCount();
    /**
     * <pre>
     * Unstable key/value annotations shown in the trace viewer but not intended
     * for metrics use.
     * </pre>
     *
     * <code>repeated .perfetto.protos.DebugAnnotation debug_annotations = 4;</code>
     */
    java.util.List<? extends perfetto.protos.DebugAnnotationOuterClass.DebugAnnotationOrBuilder> 
        getDebugAnnotationsOrBuilderList();
    /**
     * <pre>
     * Unstable key/value annotations shown in the trace viewer but not intended
     * for metrics use.
     * </pre>
     *
     * <code>repeated .perfetto.protos.DebugAnnotation debug_annotations = 4;</code>
     */
    perfetto.protos.DebugAnnotationOuterClass.DebugAnnotationOrBuilder getDebugAnnotationsOrBuilder(
        int index);

    /**
     * <pre>
     * Typed event arguments:
     * </pre>
     *
     * <code>optional .perfetto.protos.TaskExecution task_execution = 5;</code>
     * @return Whether the taskExecution field is set.
     */
    boolean hasTaskExecution();
    /**
     * <pre>
     * Typed event arguments:
     * </pre>
     *
     * <code>optional .perfetto.protos.TaskExecution task_execution = 5;</code>
     * @return The taskExecution.
     */
    perfetto.protos.TaskExecutionOuterClass.TaskExecution getTaskExecution();
    /**
     * <pre>
     * Typed event arguments:
     * </pre>
     *
     * <code>optional .perfetto.protos.TaskExecution task_execution = 5;</code>
     */
    perfetto.protos.TaskExecutionOuterClass.TaskExecutionOrBuilder getTaskExecutionOrBuilder();

    /**
     * <code>optional .perfetto.protos.LogMessage log_message = 21;</code>
     * @return Whether the logMessage field is set.
     */
    boolean hasLogMessage();
    /**
     * <code>optional .perfetto.protos.LogMessage log_message = 21;</code>
     * @return The logMessage.
     */
    perfetto.protos.LogMessageOuterClass.LogMessage getLogMessage();
    /**
     * <code>optional .perfetto.protos.LogMessage log_message = 21;</code>
     */
    perfetto.protos.LogMessageOuterClass.LogMessageOrBuilder getLogMessageOrBuilder();

    /**
     * <code>optional .perfetto.protos.ChromeCompositorSchedulerState cc_scheduler_state = 24;</code>
     * @return Whether the ccSchedulerState field is set.
     */
    boolean hasCcSchedulerState();
    /**
     * <code>optional .perfetto.protos.ChromeCompositorSchedulerState cc_scheduler_state = 24;</code>
     * @return The ccSchedulerState.
     */
    perfetto.protos.ChromeCompositorSchedulerStateOuterClass.ChromeCompositorSchedulerState getCcSchedulerState();
    /**
     * <code>optional .perfetto.protos.ChromeCompositorSchedulerState cc_scheduler_state = 24;</code>
     */
    perfetto.protos.ChromeCompositorSchedulerStateOuterClass.ChromeCompositorSchedulerStateOrBuilder getCcSchedulerStateOrBuilder();

    /**
     * <code>optional .perfetto.protos.ChromeUserEvent chrome_user_event = 25;</code>
     * @return Whether the chromeUserEvent field is set.
     */
    boolean hasChromeUserEvent();
    /**
     * <code>optional .perfetto.protos.ChromeUserEvent chrome_user_event = 25;</code>
     * @return The chromeUserEvent.
     */
    perfetto.protos.ChromeUserEventOuterClass.ChromeUserEvent getChromeUserEvent();
    /**
     * <code>optional .perfetto.protos.ChromeUserEvent chrome_user_event = 25;</code>
     */
    perfetto.protos.ChromeUserEventOuterClass.ChromeUserEventOrBuilder getChromeUserEventOrBuilder();

    /**
     * <code>optional .perfetto.protos.ChromeKeyedService chrome_keyed_service = 26;</code>
     * @return Whether the chromeKeyedService field is set.
     */
    boolean hasChromeKeyedService();
    /**
     * <code>optional .perfetto.protos.ChromeKeyedService chrome_keyed_service = 26;</code>
     * @return The chromeKeyedService.
     */
    perfetto.protos.ChromeKeyedServiceOuterClass.ChromeKeyedService getChromeKeyedService();
    /**
     * <code>optional .perfetto.protos.ChromeKeyedService chrome_keyed_service = 26;</code>
     */
    perfetto.protos.ChromeKeyedServiceOuterClass.ChromeKeyedServiceOrBuilder getChromeKeyedServiceOrBuilder();

    /**
     * <code>optional .perfetto.protos.ChromeLegacyIpc chrome_legacy_ipc = 27;</code>
     * @return Whether the chromeLegacyIpc field is set.
     */
    boolean hasChromeLegacyIpc();
    /**
     * <code>optional .perfetto.protos.ChromeLegacyIpc chrome_legacy_ipc = 27;</code>
     * @return The chromeLegacyIpc.
     */
    perfetto.protos.ChromeLegacyIpcOuterClass.ChromeLegacyIpc getChromeLegacyIpc();
    /**
     * <code>optional .perfetto.protos.ChromeLegacyIpc chrome_legacy_ipc = 27;</code>
     */
    perfetto.protos.ChromeLegacyIpcOuterClass.ChromeLegacyIpcOrBuilder getChromeLegacyIpcOrBuilder();

    /**
     * <code>optional .perfetto.protos.ChromeHistogramSample chrome_histogram_sample = 28;</code>
     * @return Whether the chromeHistogramSample field is set.
     */
    boolean hasChromeHistogramSample();
    /**
     * <code>optional .perfetto.protos.ChromeHistogramSample chrome_histogram_sample = 28;</code>
     * @return The chromeHistogramSample.
     */
    perfetto.protos.ChromeHistogramSampleOuterClass.ChromeHistogramSample getChromeHistogramSample();
    /**
     * <code>optional .perfetto.protos.ChromeHistogramSample chrome_histogram_sample = 28;</code>
     */
    perfetto.protos.ChromeHistogramSampleOuterClass.ChromeHistogramSampleOrBuilder getChromeHistogramSampleOrBuilder();

    /**
     * <code>optional .perfetto.protos.ChromeLatencyInfo chrome_latency_info = 29;</code>
     * @return Whether the chromeLatencyInfo field is set.
     */
    boolean hasChromeLatencyInfo();
    /**
     * <code>optional .perfetto.protos.ChromeLatencyInfo chrome_latency_info = 29;</code>
     * @return The chromeLatencyInfo.
     */
    perfetto.protos.ChromeLatencyInfoOuterClass.ChromeLatencyInfo getChromeLatencyInfo();
    /**
     * <code>optional .perfetto.protos.ChromeLatencyInfo chrome_latency_info = 29;</code>
     */
    perfetto.protos.ChromeLatencyInfoOuterClass.ChromeLatencyInfoOrBuilder getChromeLatencyInfoOrBuilder();

    /**
     * <code>optional .perfetto.protos.ChromeFrameReporter chrome_frame_reporter = 32;</code>
     * @return Whether the chromeFrameReporter field is set.
     */
    boolean hasChromeFrameReporter();
    /**
     * <code>optional .perfetto.protos.ChromeFrameReporter chrome_frame_reporter = 32;</code>
     * @return The chromeFrameReporter.
     */
    perfetto.protos.ChromeFrameReporterOuterClass.ChromeFrameReporter getChromeFrameReporter();
    /**
     * <code>optional .perfetto.protos.ChromeFrameReporter chrome_frame_reporter = 32;</code>
     */
    perfetto.protos.ChromeFrameReporterOuterClass.ChromeFrameReporterOrBuilder getChromeFrameReporterOrBuilder();

    /**
     * <code>optional .perfetto.protos.ChromeApplicationStateInfo chrome_application_state_info = 39;</code>
     * @return Whether the chromeApplicationStateInfo field is set.
     */
    boolean hasChromeApplicationStateInfo();
    /**
     * <code>optional .perfetto.protos.ChromeApplicationStateInfo chrome_application_state_info = 39;</code>
     * @return The chromeApplicationStateInfo.
     */
    perfetto.protos.ChromeApplicationStateInfoOuterClass.ChromeApplicationStateInfo getChromeApplicationStateInfo();
    /**
     * <code>optional .perfetto.protos.ChromeApplicationStateInfo chrome_application_state_info = 39;</code>
     */
    perfetto.protos.ChromeApplicationStateInfoOuterClass.ChromeApplicationStateInfoOrBuilder getChromeApplicationStateInfoOrBuilder();

    /**
     * <code>optional .perfetto.protos.ChromeRendererSchedulerState chrome_renderer_scheduler_state = 40;</code>
     * @return Whether the chromeRendererSchedulerState field is set.
     */
    boolean hasChromeRendererSchedulerState();
    /**
     * <code>optional .perfetto.protos.ChromeRendererSchedulerState chrome_renderer_scheduler_state = 40;</code>
     * @return The chromeRendererSchedulerState.
     */
    perfetto.protos.ChromeRendererSchedulerStateOuterClass.ChromeRendererSchedulerState getChromeRendererSchedulerState();
    /**
     * <code>optional .perfetto.protos.ChromeRendererSchedulerState chrome_renderer_scheduler_state = 40;</code>
     */
    perfetto.protos.ChromeRendererSchedulerStateOuterClass.ChromeRendererSchedulerStateOrBuilder getChromeRendererSchedulerStateOrBuilder();

    /**
     * <code>optional .perfetto.protos.ChromeWindowHandleEventInfo chrome_window_handle_event_info = 41;</code>
     * @return Whether the chromeWindowHandleEventInfo field is set.
     */
    boolean hasChromeWindowHandleEventInfo();
    /**
     * <code>optional .perfetto.protos.ChromeWindowHandleEventInfo chrome_window_handle_event_info = 41;</code>
     * @return The chromeWindowHandleEventInfo.
     */
    perfetto.protos.ChromeWindowHandleEventInfoOuterClass.ChromeWindowHandleEventInfo getChromeWindowHandleEventInfo();
    /**
     * <code>optional .perfetto.protos.ChromeWindowHandleEventInfo chrome_window_handle_event_info = 41;</code>
     */
    perfetto.protos.ChromeWindowHandleEventInfoOuterClass.ChromeWindowHandleEventInfoOrBuilder getChromeWindowHandleEventInfoOrBuilder();

    /**
     * <code>optional .perfetto.protos.ChromeContentSettingsEventInfo chrome_content_settings_event_info = 43;</code>
     * @return Whether the chromeContentSettingsEventInfo field is set.
     */
    boolean hasChromeContentSettingsEventInfo();
    /**
     * <code>optional .perfetto.protos.ChromeContentSettingsEventInfo chrome_content_settings_event_info = 43;</code>
     * @return The chromeContentSettingsEventInfo.
     */
    perfetto.protos.ChromeContentSettingsEventInfoOuterClass.ChromeContentSettingsEventInfo getChromeContentSettingsEventInfo();
    /**
     * <code>optional .perfetto.protos.ChromeContentSettingsEventInfo chrome_content_settings_event_info = 43;</code>
     */
    perfetto.protos.ChromeContentSettingsEventInfoOuterClass.ChromeContentSettingsEventInfoOrBuilder getChromeContentSettingsEventInfoOrBuilder();

    /**
     * <code>optional .perfetto.protos.ChromeActiveProcesses chrome_active_processes = 49;</code>
     * @return Whether the chromeActiveProcesses field is set.
     */
    boolean hasChromeActiveProcesses();
    /**
     * <code>optional .perfetto.protos.ChromeActiveProcesses chrome_active_processes = 49;</code>
     * @return The chromeActiveProcesses.
     */
    perfetto.protos.ChromeActiveProcessesOuterClass.ChromeActiveProcesses getChromeActiveProcesses();
    /**
     * <code>optional .perfetto.protos.ChromeActiveProcesses chrome_active_processes = 49;</code>
     */
    perfetto.protos.ChromeActiveProcessesOuterClass.ChromeActiveProcessesOrBuilder getChromeActiveProcessesOrBuilder();

    /**
     * <pre>
     * Non-interned field.
     * </pre>
     *
     * <code>.perfetto.protos.SourceLocation source_location = 33;</code>
     * @return Whether the sourceLocation field is set.
     */
    boolean hasSourceLocation();
    /**
     * <pre>
     * Non-interned field.
     * </pre>
     *
     * <code>.perfetto.protos.SourceLocation source_location = 33;</code>
     * @return The sourceLocation.
     */
    perfetto.protos.SourceLocationOuterClass.SourceLocation getSourceLocation();
    /**
     * <pre>
     * Non-interned field.
     * </pre>
     *
     * <code>.perfetto.protos.SourceLocation source_location = 33;</code>
     */
    perfetto.protos.SourceLocationOuterClass.SourceLocationOrBuilder getSourceLocationOrBuilder();

    /**
     * <pre>
     * Interned field.
     * </pre>
     *
     * <code>uint64 source_location_iid = 34;</code>
     * @return Whether the sourceLocationIid field is set.
     */
    boolean hasSourceLocationIid();
    /**
     * <pre>
     * Interned field.
     * </pre>
     *
     * <code>uint64 source_location_iid = 34;</code>
     * @return The sourceLocationIid.
     */
    long getSourceLocationIid();

    /**
     * <code>optional .perfetto.protos.ChromeMessagePump chrome_message_pump = 35;</code>
     * @return Whether the chromeMessagePump field is set.
     */
    boolean hasChromeMessagePump();
    /**
     * <code>optional .perfetto.protos.ChromeMessagePump chrome_message_pump = 35;</code>
     * @return The chromeMessagePump.
     */
    perfetto.protos.ChromeMessagePumpOuterClass.ChromeMessagePump getChromeMessagePump();
    /**
     * <code>optional .perfetto.protos.ChromeMessagePump chrome_message_pump = 35;</code>
     */
    perfetto.protos.ChromeMessagePumpOuterClass.ChromeMessagePumpOrBuilder getChromeMessagePumpOrBuilder();

    /**
     * <code>optional .perfetto.protos.ChromeMojoEventInfo chrome_mojo_event_info = 38;</code>
     * @return Whether the chromeMojoEventInfo field is set.
     */
    boolean hasChromeMojoEventInfo();
    /**
     * <code>optional .perfetto.protos.ChromeMojoEventInfo chrome_mojo_event_info = 38;</code>
     * @return The chromeMojoEventInfo.
     */
    perfetto.protos.ChromeMojoEventInfoOuterClass.ChromeMojoEventInfo getChromeMojoEventInfo();
    /**
     * <code>optional .perfetto.protos.ChromeMojoEventInfo chrome_mojo_event_info = 38;</code>
     */
    perfetto.protos.ChromeMojoEventInfoOuterClass.ChromeMojoEventInfoOrBuilder getChromeMojoEventInfoOrBuilder();

    /**
     * <pre>
     * Delta timestamp value since the last TrackEvent or ThreadDescriptor. To
     * calculate the absolute timestamp value, sum up all delta values of the
     * preceding TrackEvents since the last ThreadDescriptor and add the sum to
     * the |reference_timestamp| in ThreadDescriptor. This value should always
     * be positive.
     * </pre>
     *
     * <code>int64 timestamp_delta_us = 1;</code>
     * @return Whether the timestampDeltaUs field is set.
     */
    boolean hasTimestampDeltaUs();
    /**
     * <pre>
     * Delta timestamp value since the last TrackEvent or ThreadDescriptor. To
     * calculate the absolute timestamp value, sum up all delta values of the
     * preceding TrackEvents since the last ThreadDescriptor and add the sum to
     * the |reference_timestamp| in ThreadDescriptor. This value should always
     * be positive.
     * </pre>
     *
     * <code>int64 timestamp_delta_us = 1;</code>
     * @return The timestampDeltaUs.
     */
    long getTimestampDeltaUs();

    /**
     * <pre>
     * Absolute value (e.g. a manually specified timestamp in the macro).
     * This is a one-off value that does not affect delta timestamp computation
     * in subsequent TrackEvents.
     * </pre>
     *
     * <code>int64 timestamp_absolute_us = 16;</code>
     * @return Whether the timestampAbsoluteUs field is set.
     */
    boolean hasTimestampAbsoluteUs();
    /**
     * <pre>
     * Absolute value (e.g. a manually specified timestamp in the macro).
     * This is a one-off value that does not affect delta timestamp computation
     * in subsequent TrackEvents.
     * </pre>
     *
     * <code>int64 timestamp_absolute_us = 16;</code>
     * @return The timestampAbsoluteUs.
     */
    long getTimestampAbsoluteUs();

    /**
     * <pre>
     * Delta timestamp value since the last TrackEvent or ThreadDescriptor. To
     * calculate the absolute timestamp value, sum up all delta values of the
     * preceding TrackEvents since the last ThreadDescriptor and add the sum to
     * the |reference_timestamp| in ThreadDescriptor. This value should always
     * be positive.
     * </pre>
     *
     * <code>int64 thread_time_delta_us = 2;</code>
     * @return Whether the threadTimeDeltaUs field is set.
     */
    boolean hasThreadTimeDeltaUs();
    /**
     * <pre>
     * Delta timestamp value since the last TrackEvent or ThreadDescriptor. To
     * calculate the absolute timestamp value, sum up all delta values of the
     * preceding TrackEvents since the last ThreadDescriptor and add the sum to
     * the |reference_timestamp| in ThreadDescriptor. This value should always
     * be positive.
     * </pre>
     *
     * <code>int64 thread_time_delta_us = 2;</code>
     * @return The threadTimeDeltaUs.
     */
    long getThreadTimeDeltaUs();

    /**
     * <pre>
     * This is a one-off absolute value that does not affect delta timestamp
     * computation in subsequent TrackEvents.
     * </pre>
     *
     * <code>int64 thread_time_absolute_us = 17;</code>
     * @return Whether the threadTimeAbsoluteUs field is set.
     */
    boolean hasThreadTimeAbsoluteUs();
    /**
     * <pre>
     * This is a one-off absolute value that does not affect delta timestamp
     * computation in subsequent TrackEvents.
     * </pre>
     *
     * <code>int64 thread_time_absolute_us = 17;</code>
     * @return The threadTimeAbsoluteUs.
     */
    long getThreadTimeAbsoluteUs();

    /**
     * <pre>
     * Same encoding as |thread_time| field above.
     * </pre>
     *
     * <code>int64 thread_instruction_count_delta = 8;</code>
     * @return Whether the threadInstructionCountDelta field is set.
     */
    boolean hasThreadInstructionCountDelta();
    /**
     * <pre>
     * Same encoding as |thread_time| field above.
     * </pre>
     *
     * <code>int64 thread_instruction_count_delta = 8;</code>
     * @return The threadInstructionCountDelta.
     */
    long getThreadInstructionCountDelta();

    /**
     * <code>int64 thread_instruction_count_absolute = 20;</code>
     * @return Whether the threadInstructionCountAbsolute field is set.
     */
    boolean hasThreadInstructionCountAbsolute();
    /**
     * <code>int64 thread_instruction_count_absolute = 20;</code>
     * @return The threadInstructionCountAbsolute.
     */
    long getThreadInstructionCountAbsolute();

    /**
     * <code>optional .perfetto.protos.TrackEvent.LegacyEvent legacy_event = 6;</code>
     * @return Whether the legacyEvent field is set.
     */
    boolean hasLegacyEvent();
    /**
     * <code>optional .perfetto.protos.TrackEvent.LegacyEvent legacy_event = 6;</code>
     * @return The legacyEvent.
     */
    perfetto.protos.TrackEventOuterClass.TrackEvent.LegacyEvent getLegacyEvent();
    /**
     * <code>optional .perfetto.protos.TrackEvent.LegacyEvent legacy_event = 6;</code>
     */
    perfetto.protos.TrackEventOuterClass.TrackEvent.LegacyEventOrBuilder getLegacyEventOrBuilder();

    public perfetto.protos.TrackEventOuterClass.TrackEvent.NameFieldCase getNameFieldCase();

    public perfetto.protos.TrackEventOuterClass.TrackEvent.CounterValueFieldCase getCounterValueFieldCase();

    public perfetto.protos.TrackEventOuterClass.TrackEvent.SourceLocationFieldCase getSourceLocationFieldCase();

    public perfetto.protos.TrackEventOuterClass.TrackEvent.TimestampCase getTimestampCase();

    public perfetto.protos.TrackEventOuterClass.TrackEvent.ThreadTimeCase getThreadTimeCase();

    public perfetto.protos.TrackEventOuterClass.TrackEvent.ThreadInstructionCountCase getThreadInstructionCountCase();
  }
  /**
   * <pre>
   * Trace events emitted by client instrumentation library (TRACE_EVENT macros),
   * which describe activity on a track, such as a thread or asynchronous event
   * track. The track is specified using separate TrackDescriptor messages and
   * referred to via the track's UUID.
   * A simple TrackEvent packet specifies a timestamp, category, name and type:
   * ```protobuf
   *   trace_packet {
   *     timestamp: 1000
   *     track_event {
   *       categories: ["my_cat"]
   *       name: "my_event"
   *       type: TYPE_INSTANT
   *      }
   *    }
   * ```
   * To associate an event with a custom track (e.g. a thread), the track is
   * defined in a separate packet and referred to from the TrackEvent by its UUID:
   * ```protobuf
   *   trace_packet {
   *     track_descriptor {
   *       track_uuid: 1234
   *       name: "my_track"
   *       // Optionally, associate the track with a thread.
   *       thread_descriptor {
   *         pid: 10
   *         tid: 10
   *         ..
   *       }
   *     }
   *   }
   * ```
   * A pair of TYPE_SLICE_BEGIN and _END events form a slice on the track:
   * ```protobuf
   *   trace_packet {
   *     timestamp: 1200
   *     track_event {
   *       track_uuid: 1234
   *       categories: ["my_cat"]
   *       name: "my_slice"
   *       type: TYPE_SLICE_BEGIN
   *     }
   *   }
   *   trace_packet {
   *     timestamp: 1400
   *     track_event {
   *       track_uuid: 1234
   *       type: TYPE_SLICE_END
   *     }
   *   }
   * ```
   * TrackEvents also support optimizations to reduce data repetition and encoded
   * data size, e.g. through data interning (names, categories, ...) and delta
   * encoding of timestamps/counters. For details, see the InternedData message.
   * Further, default values for attributes of events on the same sequence (e.g.
   * their default track association) can be emitted as part of a
   * TrackEventDefaults message.
   * Next reserved id: 13 (up to 15). Next id: 50.
   * </pre>
   *
   * Protobuf type {@code perfetto.protos.TrackEvent}
   */
  public static final class TrackEvent extends
      com.google.protobuf.GeneratedMessageV3.ExtendableMessage<
        TrackEvent> implements
      // @@protoc_insertion_point(message_implements:perfetto.protos.TrackEvent)
      TrackEventOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use TrackEvent.newBuilder() to construct.
    private TrackEvent(com.google.protobuf.GeneratedMessageV3.ExtendableBuilder<perfetto.protos.TrackEventOuterClass.TrackEvent, ?> builder) {
      super(builder);
    }
    private TrackEvent() {
      categoryIids_ = emptyLongList();
      categories_ = com.google.protobuf.LazyStringArrayList.EMPTY;
      type_ = 0;
      extraCounterTrackUuids_ = emptyLongList();
      extraCounterValues_ = emptyLongList();
      extraDoubleCounterTrackUuids_ = emptyLongList();
      extraDoubleCounterValues_ = emptyDoubleList();
      flowIdsOld_ = emptyLongList();
      flowIds_ = emptyLongList();
      terminatingFlowIdsOld_ = emptyLongList();
      terminatingFlowIds_ = emptyLongList();
      debugAnnotations_ = java.util.Collections.emptyList();
    }

    @java.lang.Override
    @SuppressWarnings({"unused"})
    protected java.lang.Object newInstance(
        UnusedPrivateParameter unused) {
      return new TrackEvent();
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return perfetto.protos.TrackEventOuterClass.internal_static_perfetto_protos_TrackEvent_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return perfetto.protos.TrackEventOuterClass.internal_static_perfetto_protos_TrackEvent_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              perfetto.protos.TrackEventOuterClass.TrackEvent.class, perfetto.protos.TrackEventOuterClass.TrackEvent.Builder.class);
    }

    /**
     * <pre>
     * Type of the TrackEvent (required if |phase| in LegacyEvent is not set).
     * </pre>
     *
     * Protobuf enum {@code perfetto.protos.TrackEvent.Type}
     */
    public enum Type
        implements com.google.protobuf.ProtocolMessageEnum {
      /**
       * <code>TYPE_UNSPECIFIED = 0;</code>
       */
      TYPE_UNSPECIFIED(0),
      /**
       * <pre>
       * Slice events are events that have a begin and end timestamp, i.e. a
       * duration. They can be nested similar to a callstack: If, on the same
       * track, event B begins after event A, but before A ends, B is a child
       * event of A and will be drawn as a nested event underneath A in the UI.
       * Note that child events should always end before their parents (e.g. B
       * before A).
       * Each slice event is formed by a pair of BEGIN + END events. The END event
       * does not need to repeat any TrackEvent fields it has in common with its
       * corresponding BEGIN event. Arguments and debug annotations of the BEGIN +
       * END pair will be merged during trace import.
       * Note that we deliberately chose not to support COMPLETE events (which
       * would specify a duration directly) since clients would need to delay
       * writing them until the slice is completed, which can result in reordered
       * events in the trace and loss of unfinished events at the end of a trace.
       * </pre>
       *
       * <code>TYPE_SLICE_BEGIN = 1;</code>
       */
      TYPE_SLICE_BEGIN(1),
      /**
       * <code>TYPE_SLICE_END = 2;</code>
       */
      TYPE_SLICE_END(2),
      /**
       * <pre>
       * Instant events are nestable events without duration. They can be children
       * of slice events on the same track.
       * </pre>
       *
       * <code>TYPE_INSTANT = 3;</code>
       */
      TYPE_INSTANT(3),
      /**
       * <pre>
       * Event that provides a value for a counter track. |track_uuid| should
       * refer to a counter track and |counter_value| set to the new value. Note
       * that most other TrackEvent fields (e.g. categories, name, ..) are not
       * supported for TYPE_COUNTER events. See also CounterDescriptor.
       * </pre>
       *
       * <code>TYPE_COUNTER = 4;</code>
       */
      TYPE_COUNTER(4),
      ;

      /**
       * <code>TYPE_UNSPECIFIED = 0;</code>
       */
      public static final int TYPE_UNSPECIFIED_VALUE = 0;
      /**
       * <pre>
       * Slice events are events that have a begin and end timestamp, i.e. a
       * duration. They can be nested similar to a callstack: If, on the same
       * track, event B begins after event A, but before A ends, B is a child
       * event of A and will be drawn as a nested event underneath A in the UI.
       * Note that child events should always end before their parents (e.g. B
       * before A).
       * Each slice event is formed by a pair of BEGIN + END events. The END event
       * does not need to repeat any TrackEvent fields it has in common with its
       * corresponding BEGIN event. Arguments and debug annotations of the BEGIN +
       * END pair will be merged during trace import.
       * Note that we deliberately chose not to support COMPLETE events (which
       * would specify a duration directly) since clients would need to delay
       * writing them until the slice is completed, which can result in reordered
       * events in the trace and loss of unfinished events at the end of a trace.
       * </pre>
       *
       * <code>TYPE_SLICE_BEGIN = 1;</code>
       */
      public static final int TYPE_SLICE_BEGIN_VALUE = 1;
      /**
       * <code>TYPE_SLICE_END = 2;</code>
       */
      public static final int TYPE_SLICE_END_VALUE = 2;
      /**
       * <pre>
       * Instant events are nestable events without duration. They can be children
       * of slice events on the same track.
       * </pre>
       *
       * <code>TYPE_INSTANT = 3;</code>
       */
      public static final int TYPE_INSTANT_VALUE = 3;
      /**
       * <pre>
       * Event that provides a value for a counter track. |track_uuid| should
       * refer to a counter track and |counter_value| set to the new value. Note
       * that most other TrackEvent fields (e.g. categories, name, ..) are not
       * supported for TYPE_COUNTER events. See also CounterDescriptor.
       * </pre>
       *
       * <code>TYPE_COUNTER = 4;</code>
       */
      public static final int TYPE_COUNTER_VALUE = 4;


      public final int getNumber() {
        return value;
      }

      /**
       * @param value The numeric wire value of the corresponding enum entry.
       * @return The enum associated with the given numeric wire value.
       * @deprecated Use {@link #forNumber(int)} instead.
       */
      @java.lang.Deprecated
      public static Type valueOf(int value) {
        return forNumber(value);
      }

      /**
       * @param value The numeric wire value of the corresponding enum entry.
       * @return The enum associated with the given numeric wire value.
       */
      public static Type forNumber(int value) {
        switch (value) {
          case 0: return TYPE_UNSPECIFIED;
          case 1: return TYPE_SLICE_BEGIN;
          case 2: return TYPE_SLICE_END;
          case 3: return TYPE_INSTANT;
          case 4: return TYPE_COUNTER;
          default: return null;
        }
      }

      public static com.google.protobuf.Internal.EnumLiteMap<Type>
          internalGetValueMap() {
        return internalValueMap;
      }
      private static final com.google.protobuf.Internal.EnumLiteMap<
          Type> internalValueMap =
            new com.google.protobuf.Internal.EnumLiteMap<Type>() {
              public Type findValueByNumber(int number) {
                return Type.forNumber(number);
              }
            };

      public final com.google.protobuf.Descriptors.EnumValueDescriptor
          getValueDescriptor() {
        return getDescriptor().getValues().get(ordinal());
      }
      public final com.google.protobuf.Descriptors.EnumDescriptor
          getDescriptorForType() {
        return getDescriptor();
      }
      public static final com.google.protobuf.Descriptors.EnumDescriptor
          getDescriptor() {
        return perfetto.protos.TrackEventOuterClass.TrackEvent.getDescriptor().getEnumTypes().get(0);
      }

      private static final Type[] VALUES = values();

      public static Type valueOf(
          com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
        if (desc.getType() != getDescriptor()) {
          throw new java.lang.IllegalArgumentException(
            "EnumValueDescriptor is not for this type.");
        }
        return VALUES[desc.getIndex()];
      }

      private final int value;

      private Type(int value) {
        this.value = value;
      }

      // @@protoc_insertion_point(enum_scope:perfetto.protos.TrackEvent.Type)
    }

    public interface LegacyEventOrBuilder extends
        // @@protoc_insertion_point(interface_extends:perfetto.protos.TrackEvent.LegacyEvent)
        com.google.protobuf.MessageOrBuilder {

      /**
       * <pre>
       * Deprecated, use TrackEvent::name(_iid) instead.
       * interned EventName.
       * </pre>
       *
       * <code>optional uint64 name_iid = 1;</code>
       * @return Whether the nameIid field is set.
       */
      boolean hasNameIid();
      /**
       * <pre>
       * Deprecated, use TrackEvent::name(_iid) instead.
       * interned EventName.
       * </pre>
       *
       * <code>optional uint64 name_iid = 1;</code>
       * @return The nameIid.
       */
      long getNameIid();

      /**
       * <code>optional int32 phase = 2;</code>
       * @return Whether the phase field is set.
       */
      boolean hasPhase();
      /**
       * <code>optional int32 phase = 2;</code>
       * @return The phase.
       */
      int getPhase();

      /**
       * <code>optional int64 duration_us = 3;</code>
       * @return Whether the durationUs field is set.
       */
      boolean hasDurationUs();
      /**
       * <code>optional int64 duration_us = 3;</code>
       * @return The durationUs.
       */
      long getDurationUs();

      /**
       * <code>optional int64 thread_duration_us = 4;</code>
       * @return Whether the threadDurationUs field is set.
       */
      boolean hasThreadDurationUs();
      /**
       * <code>optional int64 thread_duration_us = 4;</code>
       * @return The threadDurationUs.
       */
      long getThreadDurationUs();

      /**
       * <pre>
       * Elapsed retired instruction count during the event.
       * </pre>
       *
       * <code>optional int64 thread_instruction_delta = 15;</code>
       * @return Whether the threadInstructionDelta field is set.
       */
      boolean hasThreadInstructionDelta();
      /**
       * <pre>
       * Elapsed retired instruction count during the event.
       * </pre>
       *
       * <code>optional int64 thread_instruction_delta = 15;</code>
       * @return The threadInstructionDelta.
       */
      long getThreadInstructionDelta();

      /**
       * <code>uint64 unscoped_id = 6;</code>
       * @return Whether the unscopedId field is set.
       */
      boolean hasUnscopedId();
      /**
       * <code>uint64 unscoped_id = 6;</code>
       * @return The unscopedId.
       */
      long getUnscopedId();

      /**
       * <code>uint64 local_id = 10;</code>
       * @return Whether the localId field is set.
       */
      boolean hasLocalId();
      /**
       * <code>uint64 local_id = 10;</code>
       * @return The localId.
       */
      long getLocalId();

      /**
       * <code>uint64 global_id = 11;</code>
       * @return Whether the globalId field is set.
       */
      boolean hasGlobalId();
      /**
       * <code>uint64 global_id = 11;</code>
       * @return The globalId.
       */
      long getGlobalId();

      /**
       * <pre>
       * Additional optional scope for |id|.
       * </pre>
       *
       * <code>optional string id_scope = 7;</code>
       * @return Whether the idScope field is set.
       */
      boolean hasIdScope();
      /**
       * <pre>
       * Additional optional scope for |id|.
       * </pre>
       *
       * <code>optional string id_scope = 7;</code>
       * @return The idScope.
       */
      java.lang.String getIdScope();
      /**
       * <pre>
       * Additional optional scope for |id|.
       * </pre>
       *
       * <code>optional string id_scope = 7;</code>
       * @return The bytes for idScope.
       */
      com.google.protobuf.ByteString
          getIdScopeBytes();

      /**
       * <pre>
       * Consider the thread timestamps for async BEGIN/END event pairs as valid.
       * </pre>
       *
       * <code>optional bool use_async_tts = 9;</code>
       * @return Whether the useAsyncTts field is set.
       */
      boolean hasUseAsyncTts();
      /**
       * <pre>
       * Consider the thread timestamps for async BEGIN/END event pairs as valid.
       * </pre>
       *
       * <code>optional bool use_async_tts = 9;</code>
       * @return The useAsyncTts.
       */
      boolean getUseAsyncTts();

      /**
       * <pre>
       * Idenfifies a flow. Flow events with the same bind_id are connected.
       * </pre>
       *
       * <code>optional uint64 bind_id = 8;</code>
       * @return Whether the bindId field is set.
       */
      boolean hasBindId();
      /**
       * <pre>
       * Idenfifies a flow. Flow events with the same bind_id are connected.
       * </pre>
       *
       * <code>optional uint64 bind_id = 8;</code>
       * @return The bindId.
       */
      long getBindId();

      /**
       * <pre>
       * Use the enclosing slice as binding point for a flow end event instead of
       * the next slice. Flow start/step events always bind to the enclosing
       * slice.
       * </pre>
       *
       * <code>optional bool bind_to_enclosing = 12;</code>
       * @return Whether the bindToEnclosing field is set.
       */
      boolean hasBindToEnclosing();
      /**
       * <pre>
       * Use the enclosing slice as binding point for a flow end event instead of
       * the next slice. Flow start/step events always bind to the enclosing
       * slice.
       * </pre>
       *
       * <code>optional bool bind_to_enclosing = 12;</code>
       * @return The bindToEnclosing.
       */
      boolean getBindToEnclosing();

      /**
       * <code>optional .perfetto.protos.TrackEvent.LegacyEvent.FlowDirection flow_direction = 13;</code>
       * @return Whether the flowDirection field is set.
       */
      boolean hasFlowDirection();
      /**
       * <code>optional .perfetto.protos.TrackEvent.LegacyEvent.FlowDirection flow_direction = 13;</code>
       * @return The flowDirection.
       */
      perfetto.protos.TrackEventOuterClass.TrackEvent.LegacyEvent.FlowDirection getFlowDirection();

      /**
       * <code>optional .perfetto.protos.TrackEvent.LegacyEvent.InstantEventScope instant_event_scope = 14;</code>
       * @return Whether the instantEventScope field is set.
       */
      boolean hasInstantEventScope();
      /**
       * <code>optional .perfetto.protos.TrackEvent.LegacyEvent.InstantEventScope instant_event_scope = 14;</code>
       * @return The instantEventScope.
       */
      perfetto.protos.TrackEventOuterClass.TrackEvent.LegacyEvent.InstantEventScope getInstantEventScope();

      /**
       * <pre>
       * Override the pid/tid if the writer needs to emit events on behalf of
       * another process/thread. This should be the exception. Normally, the
       * pid+tid from ThreadDescriptor is used.
       * </pre>
       *
       * <code>optional int32 pid_override = 18;</code>
       * @return Whether the pidOverride field is set.
       */
      boolean hasPidOverride();
      /**
       * <pre>
       * Override the pid/tid if the writer needs to emit events on behalf of
       * another process/thread. This should be the exception. Normally, the
       * pid+tid from ThreadDescriptor is used.
       * </pre>
       *
       * <code>optional int32 pid_override = 18;</code>
       * @return The pidOverride.
       */
      int getPidOverride();

      /**
       * <code>optional int32 tid_override = 19;</code>
       * @return Whether the tidOverride field is set.
       */
      boolean hasTidOverride();
      /**
       * <code>optional int32 tid_override = 19;</code>
       * @return The tidOverride.
       */
      int getTidOverride();

      public perfetto.protos.TrackEventOuterClass.TrackEvent.LegacyEvent.IdCase getIdCase();
    }
    /**
     * <pre>
     * Apart from {category, time, thread time, tid, pid}, other legacy trace
     * event attributes are initially simply proxied for conversion to a JSON
     * trace. We intend to gradually transition these attributes to similar native
     * features in TrackEvent (e.g. async + flow events), or deprecate them
     * without replacement where transition is unsuitable.
     * Next reserved id: 16 (up to 16).
     * Next id: 20.
     * </pre>
     *
     * Protobuf type {@code perfetto.protos.TrackEvent.LegacyEvent}
     */
    public static final class LegacyEvent extends
        com.google.protobuf.GeneratedMessageV3 implements
        // @@protoc_insertion_point(message_implements:perfetto.protos.TrackEvent.LegacyEvent)
        LegacyEventOrBuilder {
    private static final long serialVersionUID = 0L;
      // Use LegacyEvent.newBuilder() to construct.
      private LegacyEvent(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
        super(builder);
      }
      private LegacyEvent() {
        idScope_ = "";
        flowDirection_ = 0;
        instantEventScope_ = 0;
      }

      @java.lang.Override
      @SuppressWarnings({"unused"})
      protected java.lang.Object newInstance(
          UnusedPrivateParameter unused) {
        return new LegacyEvent();
      }

      @java.lang.Override
      public final com.google.protobuf.UnknownFieldSet
      getUnknownFields() {
        return this.unknownFields;
      }
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return perfetto.protos.TrackEventOuterClass.internal_static_perfetto_protos_TrackEvent_LegacyEvent_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return perfetto.protos.TrackEventOuterClass.internal_static_perfetto_protos_TrackEvent_LegacyEvent_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                perfetto.protos.TrackEventOuterClass.TrackEvent.LegacyEvent.class, perfetto.protos.TrackEventOuterClass.TrackEvent.LegacyEvent.Builder.class);
      }

      /**
       * Protobuf enum {@code perfetto.protos.TrackEvent.LegacyEvent.FlowDirection}
       */
      public enum FlowDirection
          implements com.google.protobuf.ProtocolMessageEnum {
        /**
         * <code>FLOW_UNSPECIFIED = 0;</code>
         */
        FLOW_UNSPECIFIED(0),
        /**
         * <code>FLOW_IN = 1;</code>
         */
        FLOW_IN(1),
        /**
         * <code>FLOW_OUT = 2;</code>
         */
        FLOW_OUT(2),
        /**
         * <code>FLOW_INOUT = 3;</code>
         */
        FLOW_INOUT(3),
        ;

        /**
         * <code>FLOW_UNSPECIFIED = 0;</code>
         */
        public static final int FLOW_UNSPECIFIED_VALUE = 0;
        /**
         * <code>FLOW_IN = 1;</code>
         */
        public static final int FLOW_IN_VALUE = 1;
        /**
         * <code>FLOW_OUT = 2;</code>
         */
        public static final int FLOW_OUT_VALUE = 2;
        /**
         * <code>FLOW_INOUT = 3;</code>
         */
        public static final int FLOW_INOUT_VALUE = 3;


        public final int getNumber() {
          return value;
        }

        /**
         * @param value The numeric wire value of the corresponding enum entry.
         * @return The enum associated with the given numeric wire value.
         * @deprecated Use {@link #forNumber(int)} instead.
         */
        @java.lang.Deprecated
        public static FlowDirection valueOf(int value) {
          return forNumber(value);
        }

        /**
         * @param value The numeric wire value of the corresponding enum entry.
         * @return The enum associated with the given numeric wire value.
         */
        public static FlowDirection forNumber(int value) {
          switch (value) {
            case 0: return FLOW_UNSPECIFIED;
            case 1: return FLOW_IN;
            case 2: return FLOW_OUT;
            case 3: return FLOW_INOUT;
            default: return null;
          }
        }

        public static com.google.protobuf.Internal.EnumLiteMap<FlowDirection>
            internalGetValueMap() {
          return internalValueMap;
        }
        private static final com.google.protobuf.Internal.EnumLiteMap<
            FlowDirection> internalValueMap =
              new com.google.protobuf.Internal.EnumLiteMap<FlowDirection>() {
                public FlowDirection findValueByNumber(int number) {
                  return FlowDirection.forNumber(number);
                }
              };

        public final com.google.protobuf.Descriptors.EnumValueDescriptor
            getValueDescriptor() {
          return getDescriptor().getValues().get(ordinal());
        }
        public final com.google.protobuf.Descriptors.EnumDescriptor
            getDescriptorForType() {
          return getDescriptor();
        }
        public static final com.google.protobuf.Descriptors.EnumDescriptor
            getDescriptor() {
          return perfetto.protos.TrackEventOuterClass.TrackEvent.LegacyEvent.getDescriptor().getEnumTypes().get(0);
        }

        private static final FlowDirection[] VALUES = values();

        public static FlowDirection valueOf(
            com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
          if (desc.getType() != getDescriptor()) {
            throw new java.lang.IllegalArgumentException(
              "EnumValueDescriptor is not for this type.");
          }
          return VALUES[desc.getIndex()];
        }

        private final int value;

        private FlowDirection(int value) {
          this.value = value;
        }

        // @@protoc_insertion_point(enum_scope:perfetto.protos.TrackEvent.LegacyEvent.FlowDirection)
      }

      /**
       * Protobuf enum {@code perfetto.protos.TrackEvent.LegacyEvent.InstantEventScope}
       */
      public enum InstantEventScope
          implements com.google.protobuf.ProtocolMessageEnum {
        /**
         * <code>SCOPE_UNSPECIFIED = 0;</code>
         */
        SCOPE_UNSPECIFIED(0),
        /**
         * <code>SCOPE_GLOBAL = 1;</code>
         */
        SCOPE_GLOBAL(1),
        /**
         * <code>SCOPE_PROCESS = 2;</code>
         */
        SCOPE_PROCESS(2),
        /**
         * <code>SCOPE_THREAD = 3;</code>
         */
        SCOPE_THREAD(3),
        ;

        /**
         * <code>SCOPE_UNSPECIFIED = 0;</code>
         */
        public static final int SCOPE_UNSPECIFIED_VALUE = 0;
        /**
         * <code>SCOPE_GLOBAL = 1;</code>
         */
        public static final int SCOPE_GLOBAL_VALUE = 1;
        /**
         * <code>SCOPE_PROCESS = 2;</code>
         */
        public static final int SCOPE_PROCESS_VALUE = 2;
        /**
         * <code>SCOPE_THREAD = 3;</code>
         */
        public static final int SCOPE_THREAD_VALUE = 3;


        public final int getNumber() {
          return value;
        }

        /**
         * @param value The numeric wire value of the corresponding enum entry.
         * @return The enum associated with the given numeric wire value.
         * @deprecated Use {@link #forNumber(int)} instead.
         */
        @java.lang.Deprecated
        public static InstantEventScope valueOf(int value) {
          return forNumber(value);
        }

        /**
         * @param value The numeric wire value of the corresponding enum entry.
         * @return The enum associated with the given numeric wire value.
         */
        public static InstantEventScope forNumber(int value) {
          switch (value) {
            case 0: return SCOPE_UNSPECIFIED;
            case 1: return SCOPE_GLOBAL;
            case 2: return SCOPE_PROCESS;
            case 3: return SCOPE_THREAD;
            default: return null;
          }
        }

        public static com.google.protobuf.Internal.EnumLiteMap<InstantEventScope>
            internalGetValueMap() {
          return internalValueMap;
        }
        private static final com.google.protobuf.Internal.EnumLiteMap<
            InstantEventScope> internalValueMap =
              new com.google.protobuf.Internal.EnumLiteMap<InstantEventScope>() {
                public InstantEventScope findValueByNumber(int number) {
                  return InstantEventScope.forNumber(number);
                }
              };

        public final com.google.protobuf.Descriptors.EnumValueDescriptor
            getValueDescriptor() {
          return getDescriptor().getValues().get(ordinal());
        }
        public final com.google.protobuf.Descriptors.EnumDescriptor
            getDescriptorForType() {
          return getDescriptor();
        }
        public static final com.google.protobuf.Descriptors.EnumDescriptor
            getDescriptor() {
          return perfetto.protos.TrackEventOuterClass.TrackEvent.LegacyEvent.getDescriptor().getEnumTypes().get(1);
        }

        private static final InstantEventScope[] VALUES = values();

        public static InstantEventScope valueOf(
            com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
          if (desc.getType() != getDescriptor()) {
            throw new java.lang.IllegalArgumentException(
              "EnumValueDescriptor is not for this type.");
          }
          return VALUES[desc.getIndex()];
        }

        private final int value;

        private InstantEventScope(int value) {
          this.value = value;
        }

        // @@protoc_insertion_point(enum_scope:perfetto.protos.TrackEvent.LegacyEvent.InstantEventScope)
      }

      private int bitField0_;
      private int idCase_ = 0;
      private java.lang.Object id_;
      public enum IdCase
          implements com.google.protobuf.Internal.EnumLite,
              com.google.protobuf.AbstractMessage.InternalOneOfEnum {
        UNSCOPED_ID(6),
        LOCAL_ID(10),
        GLOBAL_ID(11),
        ID_NOT_SET(0);
        private final int value;
        private IdCase(int value) {
          this.value = value;
        }
        /**
         * @param value The number of the enum to look for.
         * @return The enum associated with the given number.
         * @deprecated Use {@link #forNumber(int)} instead.
         */
        @java.lang.Deprecated
        public static IdCase valueOf(int value) {
          return forNumber(value);
        }

        public static IdCase forNumber(int value) {
          switch (value) {
            case 6: return UNSCOPED_ID;
            case 10: return LOCAL_ID;
            case 11: return GLOBAL_ID;
            case 0: return ID_NOT_SET;
            default: return null;
          }
        }
        public int getNumber() {
          return this.value;
        }
      };

      public IdCase
      getIdCase() {
        return IdCase.forNumber(
            idCase_);
      }

      public static final int NAME_IID_FIELD_NUMBER = 1;
      private long nameIid_ = 0L;
      /**
       * <pre>
       * Deprecated, use TrackEvent::name(_iid) instead.
       * interned EventName.
       * </pre>
       *
       * <code>optional uint64 name_iid = 1;</code>
       * @return Whether the nameIid field is set.
       */
      @java.lang.Override
      public boolean hasNameIid() {
        return ((bitField0_ & 0x00000001) != 0);
      }
      /**
       * <pre>
       * Deprecated, use TrackEvent::name(_iid) instead.
       * interned EventName.
       * </pre>
       *
       * <code>optional uint64 name_iid = 1;</code>
       * @return The nameIid.
       */
      @java.lang.Override
      public long getNameIid() {
        return nameIid_;
      }

      public static final int PHASE_FIELD_NUMBER = 2;
      private int phase_ = 0;
      /**
       * <code>optional int32 phase = 2;</code>
       * @return Whether the phase field is set.
       */
      @java.lang.Override
      public boolean hasPhase() {
        return ((bitField0_ & 0x00000002) != 0);
      }
      /**
       * <code>optional int32 phase = 2;</code>
       * @return The phase.
       */
      @java.lang.Override
      public int getPhase() {
        return phase_;
      }

      public static final int DURATION_US_FIELD_NUMBER = 3;
      private long durationUs_ = 0L;
      /**
       * <code>optional int64 duration_us = 3;</code>
       * @return Whether the durationUs field is set.
       */
      @java.lang.Override
      public boolean hasDurationUs() {
        return ((bitField0_ & 0x00000004) != 0);
      }
      /**
       * <code>optional int64 duration_us = 3;</code>
       * @return The durationUs.
       */
      @java.lang.Override
      public long getDurationUs() {
        return durationUs_;
      }

      public static final int THREAD_DURATION_US_FIELD_NUMBER = 4;
      private long threadDurationUs_ = 0L;
      /**
       * <code>optional int64 thread_duration_us = 4;</code>
       * @return Whether the threadDurationUs field is set.
       */
      @java.lang.Override
      public boolean hasThreadDurationUs() {
        return ((bitField0_ & 0x00000008) != 0);
      }
      /**
       * <code>optional int64 thread_duration_us = 4;</code>
       * @return The threadDurationUs.
       */
      @java.lang.Override
      public long getThreadDurationUs() {
        return threadDurationUs_;
      }

      public static final int THREAD_INSTRUCTION_DELTA_FIELD_NUMBER = 15;
      private long threadInstructionDelta_ = 0L;
      /**
       * <pre>
       * Elapsed retired instruction count during the event.
       * </pre>
       *
       * <code>optional int64 thread_instruction_delta = 15;</code>
       * @return Whether the threadInstructionDelta field is set.
       */
      @java.lang.Override
      public boolean hasThreadInstructionDelta() {
        return ((bitField0_ & 0x00000010) != 0);
      }
      /**
       * <pre>
       * Elapsed retired instruction count during the event.
       * </pre>
       *
       * <code>optional int64 thread_instruction_delta = 15;</code>
       * @return The threadInstructionDelta.
       */
      @java.lang.Override
      public long getThreadInstructionDelta() {
        return threadInstructionDelta_;
      }

      public static final int UNSCOPED_ID_FIELD_NUMBER = 6;
      /**
       * <code>uint64 unscoped_id = 6;</code>
       * @return Whether the unscopedId field is set.
       */
      @java.lang.Override
      public boolean hasUnscopedId() {
        return idCase_ == 6;
      }
      /**
       * <code>uint64 unscoped_id = 6;</code>
       * @return The unscopedId.
       */
      @java.lang.Override
      public long getUnscopedId() {
        if (idCase_ == 6) {
          return (java.lang.Long) id_;
        }
        return 0L;
      }

      public static final int LOCAL_ID_FIELD_NUMBER = 10;
      /**
       * <code>uint64 local_id = 10;</code>
       * @return Whether the localId field is set.
       */
      @java.lang.Override
      public boolean hasLocalId() {
        return idCase_ == 10;
      }
      /**
       * <code>uint64 local_id = 10;</code>
       * @return The localId.
       */
      @java.lang.Override
      public long getLocalId() {
        if (idCase_ == 10) {
          return (java.lang.Long) id_;
        }
        return 0L;
      }

      public static final int GLOBAL_ID_FIELD_NUMBER = 11;
      /**
       * <code>uint64 global_id = 11;</code>
       * @return Whether the globalId field is set.
       */
      @java.lang.Override
      public boolean hasGlobalId() {
        return idCase_ == 11;
      }
      /**
       * <code>uint64 global_id = 11;</code>
       * @return The globalId.
       */
      @java.lang.Override
      public long getGlobalId() {
        if (idCase_ == 11) {
          return (java.lang.Long) id_;
        }
        return 0L;
      }

      public static final int ID_SCOPE_FIELD_NUMBER = 7;
      @SuppressWarnings("serial")
      private volatile java.lang.Object idScope_ = "";
      /**
       * <pre>
       * Additional optional scope for |id|.
       * </pre>
       *
       * <code>optional string id_scope = 7;</code>
       * @return Whether the idScope field is set.
       */
      @java.lang.Override
      public boolean hasIdScope() {
        return ((bitField0_ & 0x00000100) != 0);
      }
      /**
       * <pre>
       * Additional optional scope for |id|.
       * </pre>
       *
       * <code>optional string id_scope = 7;</code>
       * @return The idScope.
       */
      @java.lang.Override
      public java.lang.String getIdScope() {
        java.lang.Object ref = idScope_;
        if (ref instanceof java.lang.String) {
          return (java.lang.String) ref;
        } else {
          com.google.protobuf.ByteString bs = 
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          if (bs.isValidUtf8()) {
            idScope_ = s;
          }
          return s;
        }
      }
      /**
       * <pre>
       * Additional optional scope for |id|.
       * </pre>
       *
       * <code>optional string id_scope = 7;</code>
       * @return The bytes for idScope.
       */
      @java.lang.Override
      public com.google.protobuf.ByteString
          getIdScopeBytes() {
        java.lang.Object ref = idScope_;
        if (ref instanceof java.lang.String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          idScope_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }

      public static final int USE_ASYNC_TTS_FIELD_NUMBER = 9;
      private boolean useAsyncTts_ = false;
      /**
       * <pre>
       * Consider the thread timestamps for async BEGIN/END event pairs as valid.
       * </pre>
       *
       * <code>optional bool use_async_tts = 9;</code>
       * @return Whether the useAsyncTts field is set.
       */
      @java.lang.Override
      public boolean hasUseAsyncTts() {
        return ((bitField0_ & 0x00000200) != 0);
      }
      /**
       * <pre>
       * Consider the thread timestamps for async BEGIN/END event pairs as valid.
       * </pre>
       *
       * <code>optional bool use_async_tts = 9;</code>
       * @return The useAsyncTts.
       */
      @java.lang.Override
      public boolean getUseAsyncTts() {
        return useAsyncTts_;
      }

      public static final int BIND_ID_FIELD_NUMBER = 8;
      private long bindId_ = 0L;
      /**
       * <pre>
       * Idenfifies a flow. Flow events with the same bind_id are connected.
       * </pre>
       *
       * <code>optional uint64 bind_id = 8;</code>
       * @return Whether the bindId field is set.
       */
      @java.lang.Override
      public boolean hasBindId() {
        return ((bitField0_ & 0x00000400) != 0);
      }
      /**
       * <pre>
       * Idenfifies a flow. Flow events with the same bind_id are connected.
       * </pre>
       *
       * <code>optional uint64 bind_id = 8;</code>
       * @return The bindId.
       */
      @java.lang.Override
      public long getBindId() {
        return bindId_;
      }

      public static final int BIND_TO_ENCLOSING_FIELD_NUMBER = 12;
      private boolean bindToEnclosing_ = false;
      /**
       * <pre>
       * Use the enclosing slice as binding point for a flow end event instead of
       * the next slice. Flow start/step events always bind to the enclosing
       * slice.
       * </pre>
       *
       * <code>optional bool bind_to_enclosing = 12;</code>
       * @return Whether the bindToEnclosing field is set.
       */
      @java.lang.Override
      public boolean hasBindToEnclosing() {
        return ((bitField0_ & 0x00000800) != 0);
      }
      /**
       * <pre>
       * Use the enclosing slice as binding point for a flow end event instead of
       * the next slice. Flow start/step events always bind to the enclosing
       * slice.
       * </pre>
       *
       * <code>optional bool bind_to_enclosing = 12;</code>
       * @return The bindToEnclosing.
       */
      @java.lang.Override
      public boolean getBindToEnclosing() {
        return bindToEnclosing_;
      }

      public static final int FLOW_DIRECTION_FIELD_NUMBER = 13;
      private int flowDirection_ = 0;
      /**
       * <code>optional .perfetto.protos.TrackEvent.LegacyEvent.FlowDirection flow_direction = 13;</code>
       * @return Whether the flowDirection field is set.
       */
      @java.lang.Override public boolean hasFlowDirection() {
        return ((bitField0_ & 0x00001000) != 0);
      }
      /**
       * <code>optional .perfetto.protos.TrackEvent.LegacyEvent.FlowDirection flow_direction = 13;</code>
       * @return The flowDirection.
       */
      @java.lang.Override public perfetto.protos.TrackEventOuterClass.TrackEvent.LegacyEvent.FlowDirection getFlowDirection() {
        perfetto.protos.TrackEventOuterClass.TrackEvent.LegacyEvent.FlowDirection result = perfetto.protos.TrackEventOuterClass.TrackEvent.LegacyEvent.FlowDirection.forNumber(flowDirection_);
        return result == null ? perfetto.protos.TrackEventOuterClass.TrackEvent.LegacyEvent.FlowDirection.FLOW_UNSPECIFIED : result;
      }

      public static final int INSTANT_EVENT_SCOPE_FIELD_NUMBER = 14;
      private int instantEventScope_ = 0;
      /**
       * <code>optional .perfetto.protos.TrackEvent.LegacyEvent.InstantEventScope instant_event_scope = 14;</code>
       * @return Whether the instantEventScope field is set.
       */
      @java.lang.Override public boolean hasInstantEventScope() {
        return ((bitField0_ & 0x00002000) != 0);
      }
      /**
       * <code>optional .perfetto.protos.TrackEvent.LegacyEvent.InstantEventScope instant_event_scope = 14;</code>
       * @return The instantEventScope.
       */
      @java.lang.Override public perfetto.protos.TrackEventOuterClass.TrackEvent.LegacyEvent.InstantEventScope getInstantEventScope() {
        perfetto.protos.TrackEventOuterClass.TrackEvent.LegacyEvent.InstantEventScope result = perfetto.protos.TrackEventOuterClass.TrackEvent.LegacyEvent.InstantEventScope.forNumber(instantEventScope_);
        return result == null ? perfetto.protos.TrackEventOuterClass.TrackEvent.LegacyEvent.InstantEventScope.SCOPE_UNSPECIFIED : result;
      }

      public static final int PID_OVERRIDE_FIELD_NUMBER = 18;
      private int pidOverride_ = 0;
      /**
       * <pre>
       * Override the pid/tid if the writer needs to emit events on behalf of
       * another process/thread. This should be the exception. Normally, the
       * pid+tid from ThreadDescriptor is used.
       * </pre>
       *
       * <code>optional int32 pid_override = 18;</code>
       * @return Whether the pidOverride field is set.
       */
      @java.lang.Override
      public boolean hasPidOverride() {
        return ((bitField0_ & 0x00004000) != 0);
      }
      /**
       * <pre>
       * Override the pid/tid if the writer needs to emit events on behalf of
       * another process/thread. This should be the exception. Normally, the
       * pid+tid from ThreadDescriptor is used.
       * </pre>
       *
       * <code>optional int32 pid_override = 18;</code>
       * @return The pidOverride.
       */
      @java.lang.Override
      public int getPidOverride() {
        return pidOverride_;
      }

      public static final int TID_OVERRIDE_FIELD_NUMBER = 19;
      private int tidOverride_ = 0;
      /**
       * <code>optional int32 tid_override = 19;</code>
       * @return Whether the tidOverride field is set.
       */
      @java.lang.Override
      public boolean hasTidOverride() {
        return ((bitField0_ & 0x00008000) != 0);
      }
      /**
       * <code>optional int32 tid_override = 19;</code>
       * @return The tidOverride.
       */
      @java.lang.Override
      public int getTidOverride() {
        return tidOverride_;
      }

      private byte memoizedIsInitialized = -1;
      @java.lang.Override
      public final boolean isInitialized() {
        byte isInitialized = memoizedIsInitialized;
        if (isInitialized == 1) return true;
        if (isInitialized == 0) return false;

        memoizedIsInitialized = 1;
        return true;
      }

      @java.lang.Override
      public void writeTo(com.google.protobuf.CodedOutputStream output)
                          throws java.io.IOException {
        if (((bitField0_ & 0x00000001) != 0)) {
          output.writeUInt64(1, nameIid_);
        }
        if (((bitField0_ & 0x00000002) != 0)) {
          output.writeInt32(2, phase_);
        }
        if (((bitField0_ & 0x00000004) != 0)) {
          output.writeInt64(3, durationUs_);
        }
        if (((bitField0_ & 0x00000008) != 0)) {
          output.writeInt64(4, threadDurationUs_);
        }
        if (idCase_ == 6) {
          output.writeUInt64(
              6, (long)((java.lang.Long) id_));
        }
        if (((bitField0_ & 0x00000100) != 0)) {
          com.google.protobuf.GeneratedMessageV3.writeString(output, 7, idScope_);
        }
        if (((bitField0_ & 0x00000400) != 0)) {
          output.writeUInt64(8, bindId_);
        }
        if (((bitField0_ & 0x00000200) != 0)) {
          output.writeBool(9, useAsyncTts_);
        }
        if (idCase_ == 10) {
          output.writeUInt64(
              10, (long)((java.lang.Long) id_));
        }
        if (idCase_ == 11) {
          output.writeUInt64(
              11, (long)((java.lang.Long) id_));
        }
        if (((bitField0_ & 0x00000800) != 0)) {
          output.writeBool(12, bindToEnclosing_);
        }
        if (((bitField0_ & 0x00001000) != 0)) {
          output.writeEnum(13, flowDirection_);
        }
        if (((bitField0_ & 0x00002000) != 0)) {
          output.writeEnum(14, instantEventScope_);
        }
        if (((bitField0_ & 0x00000010) != 0)) {
          output.writeInt64(15, threadInstructionDelta_);
        }
        if (((bitField0_ & 0x00004000) != 0)) {
          output.writeInt32(18, pidOverride_);
        }
        if (((bitField0_ & 0x00008000) != 0)) {
          output.writeInt32(19, tidOverride_);
        }
        getUnknownFields().writeTo(output);
      }

      @java.lang.Override
      public int getSerializedSize() {
        int size = memoizedSize;
        if (size != -1) return size;

        size = 0;
        if (((bitField0_ & 0x00000001) != 0)) {
          size += com.google.protobuf.CodedOutputStream
            .computeUInt64Size(1, nameIid_);
        }
        if (((bitField0_ & 0x00000002) != 0)) {
          size += com.google.protobuf.CodedOutputStream
            .computeInt32Size(2, phase_);
        }
        if (((bitField0_ & 0x00000004) != 0)) {
          size += com.google.protobuf.CodedOutputStream
            .computeInt64Size(3, durationUs_);
        }
        if (((bitField0_ & 0x00000008) != 0)) {
          size += com.google.protobuf.CodedOutputStream
            .computeInt64Size(4, threadDurationUs_);
        }
        if (idCase_ == 6) {
          size += com.google.protobuf.CodedOutputStream
            .computeUInt64Size(
                6, (long)((java.lang.Long) id_));
        }
        if (((bitField0_ & 0x00000100) != 0)) {
          size += com.google.protobuf.GeneratedMessageV3.computeStringSize(7, idScope_);
        }
        if (((bitField0_ & 0x00000400) != 0)) {
          size += com.google.protobuf.CodedOutputStream
            .computeUInt64Size(8, bindId_);
        }
        if (((bitField0_ & 0x00000200) != 0)) {
          size += com.google.protobuf.CodedOutputStream
            .computeBoolSize(9, useAsyncTts_);
        }
        if (idCase_ == 10) {
          size += com.google.protobuf.CodedOutputStream
            .computeUInt64Size(
                10, (long)((java.lang.Long) id_));
        }
        if (idCase_ == 11) {
          size += com.google.protobuf.CodedOutputStream
            .computeUInt64Size(
                11, (long)((java.lang.Long) id_));
        }
        if (((bitField0_ & 0x00000800) != 0)) {
          size += com.google.protobuf.CodedOutputStream
            .computeBoolSize(12, bindToEnclosing_);
        }
        if (((bitField0_ & 0x00001000) != 0)) {
          size += com.google.protobuf.CodedOutputStream
            .computeEnumSize(13, flowDirection_);
        }
        if (((bitField0_ & 0x00002000) != 0)) {
          size += com.google.protobuf.CodedOutputStream
            .computeEnumSize(14, instantEventScope_);
        }
        if (((bitField0_ & 0x00000010) != 0)) {
          size += com.google.protobuf.CodedOutputStream
            .computeInt64Size(15, threadInstructionDelta_);
        }
        if (((bitField0_ & 0x00004000) != 0)) {
          size += com.google.protobuf.CodedOutputStream
            .computeInt32Size(18, pidOverride_);
        }
        if (((bitField0_ & 0x00008000) != 0)) {
          size += com.google.protobuf.CodedOutputStream
            .computeInt32Size(19, tidOverride_);
        }
        size += getUnknownFields().getSerializedSize();
        memoizedSize = size;
        return size;
      }

      @java.lang.Override
      public boolean equals(final java.lang.Object obj) {
        if (obj == this) {
         return true;
        }
        if (!(obj instanceof perfetto.protos.TrackEventOuterClass.TrackEvent.LegacyEvent)) {
          return super.equals(obj);
        }
        perfetto.protos.TrackEventOuterClass.TrackEvent.LegacyEvent other = (perfetto.protos.TrackEventOuterClass.TrackEvent.LegacyEvent) obj;

        if (hasNameIid() != other.hasNameIid()) return false;
        if (hasNameIid()) {
          if (getNameIid()
              != other.getNameIid()) return false;
        }
        if (hasPhase() != other.hasPhase()) return false;
        if (hasPhase()) {
          if (getPhase()
              != other.getPhase()) return false;
        }
        if (hasDurationUs() != other.hasDurationUs()) return false;
        if (hasDurationUs()) {
          if (getDurationUs()
              != other.getDurationUs()) return false;
        }
        if (hasThreadDurationUs() != other.hasThreadDurationUs()) return false;
        if (hasThreadDurationUs()) {
          if (getThreadDurationUs()
              != other.getThreadDurationUs()) return false;
        }
        if (hasThreadInstructionDelta() != other.hasThreadInstructionDelta()) return false;
        if (hasThreadInstructionDelta()) {
          if (getThreadInstructionDelta()
              != other.getThreadInstructionDelta()) return false;
        }
        if (hasIdScope() != other.hasIdScope()) return false;
        if (hasIdScope()) {
          if (!getIdScope()
              .equals(other.getIdScope())) return false;
        }
        if (hasUseAsyncTts() != other.hasUseAsyncTts()) return false;
        if (hasUseAsyncTts()) {
          if (getUseAsyncTts()
              != other.getUseAsyncTts()) return false;
        }
        if (hasBindId() != other.hasBindId()) return false;
        if (hasBindId()) {
          if (getBindId()
              != other.getBindId()) return false;
        }
        if (hasBindToEnclosing() != other.hasBindToEnclosing()) return false;
        if (hasBindToEnclosing()) {
          if (getBindToEnclosing()
              != other.getBindToEnclosing()) return false;
        }
        if (hasFlowDirection() != other.hasFlowDirection()) return false;
        if (hasFlowDirection()) {
          if (flowDirection_ != other.flowDirection_) return false;
        }
        if (hasInstantEventScope() != other.hasInstantEventScope()) return false;
        if (hasInstantEventScope()) {
          if (instantEventScope_ != other.instantEventScope_) return false;
        }
        if (hasPidOverride() != other.hasPidOverride()) return false;
        if (hasPidOverride()) {
          if (getPidOverride()
              != other.getPidOverride()) return false;
        }
        if (hasTidOverride() != other.hasTidOverride()) return false;
        if (hasTidOverride()) {
          if (getTidOverride()
              != other.getTidOverride()) return false;
        }
        if (!getIdCase().equals(other.getIdCase())) return false;
        switch (idCase_) {
          case 6:
            if (getUnscopedId()
                != other.getUnscopedId()) return false;
            break;
          case 10:
            if (getLocalId()
                != other.getLocalId()) return false;
            break;
          case 11:
            if (getGlobalId()
                != other.getGlobalId()) return false;
            break;
          case 0:
          default:
        }
        if (!getUnknownFields().equals(other.getUnknownFields())) return false;
        return true;
      }

      @java.lang.Override
      public int hashCode() {
        if (memoizedHashCode != 0) {
          return memoizedHashCode;
        }
        int hash = 41;
        hash = (19 * hash) + getDescriptor().hashCode();
        if (hasNameIid()) {
          hash = (37 * hash) + NAME_IID_FIELD_NUMBER;
          hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
              getNameIid());
        }
        if (hasPhase()) {
          hash = (37 * hash) + PHASE_FIELD_NUMBER;
          hash = (53 * hash) + getPhase();
        }
        if (hasDurationUs()) {
          hash = (37 * hash) + DURATION_US_FIELD_NUMBER;
          hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
              getDurationUs());
        }
        if (hasThreadDurationUs()) {
          hash = (37 * hash) + THREAD_DURATION_US_FIELD_NUMBER;
          hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
              getThreadDurationUs());
        }
        if (hasThreadInstructionDelta()) {
          hash = (37 * hash) + THREAD_INSTRUCTION_DELTA_FIELD_NUMBER;
          hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
              getThreadInstructionDelta());
        }
        if (hasIdScope()) {
          hash = (37 * hash) + ID_SCOPE_FIELD_NUMBER;
          hash = (53 * hash) + getIdScope().hashCode();
        }
        if (hasUseAsyncTts()) {
          hash = (37 * hash) + USE_ASYNC_TTS_FIELD_NUMBER;
          hash = (53 * hash) + com.google.protobuf.Internal.hashBoolean(
              getUseAsyncTts());
        }
        if (hasBindId()) {
          hash = (37 * hash) + BIND_ID_FIELD_NUMBER;
          hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
              getBindId());
        }
        if (hasBindToEnclosing()) {
          hash = (37 * hash) + BIND_TO_ENCLOSING_FIELD_NUMBER;
          hash = (53 * hash) + com.google.protobuf.Internal.hashBoolean(
              getBindToEnclosing());
        }
        if (hasFlowDirection()) {
          hash = (37 * hash) + FLOW_DIRECTION_FIELD_NUMBER;
          hash = (53 * hash) + flowDirection_;
        }
        if (hasInstantEventScope()) {
          hash = (37 * hash) + INSTANT_EVENT_SCOPE_FIELD_NUMBER;
          hash = (53 * hash) + instantEventScope_;
        }
        if (hasPidOverride()) {
          hash = (37 * hash) + PID_OVERRIDE_FIELD_NUMBER;
          hash = (53 * hash) + getPidOverride();
        }
        if (hasTidOverride()) {
          hash = (37 * hash) + TID_OVERRIDE_FIELD_NUMBER;
          hash = (53 * hash) + getTidOverride();
        }
        switch (idCase_) {
          case 6:
            hash = (37 * hash) + UNSCOPED_ID_FIELD_NUMBER;
            hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
                getUnscopedId());
            break;
          case 10:
            hash = (37 * hash) + LOCAL_ID_FIELD_NUMBER;
            hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
                getLocalId());
            break;
          case 11:
            hash = (37 * hash) + GLOBAL_ID_FIELD_NUMBER;
            hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
                getGlobalId());
            break;
          case 0:
          default:
        }
        hash = (29 * hash) + getUnknownFields().hashCode();
        memoizedHashCode = hash;
        return hash;
      }

      public static perfetto.protos.TrackEventOuterClass.TrackEvent.LegacyEvent parseFrom(
          java.nio.ByteBuffer data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static perfetto.protos.TrackEventOuterClass.TrackEvent.LegacyEvent parseFrom(
          java.nio.ByteBuffer data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static perfetto.protos.TrackEventOuterClass.TrackEvent.LegacyEvent parseFrom(
          com.google.protobuf.ByteString data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static perfetto.protos.TrackEventOuterClass.TrackEvent.LegacyEvent parseFrom(
          com.google.protobuf.ByteString data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static perfetto.protos.TrackEventOuterClass.TrackEvent.LegacyEvent parseFrom(byte[] data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static perfetto.protos.TrackEventOuterClass.TrackEvent.LegacyEvent parseFrom(
          byte[] data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static perfetto.protos.TrackEventOuterClass.TrackEvent.LegacyEvent parseFrom(java.io.InputStream input)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseWithIOException(PARSER, input);
      }
      public static perfetto.protos.TrackEventOuterClass.TrackEvent.LegacyEvent parseFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseWithIOException(PARSER, input, extensionRegistry);
      }
      public static perfetto.protos.TrackEventOuterClass.TrackEvent.LegacyEvent parseDelimitedFrom(java.io.InputStream input)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseDelimitedWithIOException(PARSER, input);
      }
      public static perfetto.protos.TrackEventOuterClass.TrackEvent.LegacyEvent parseDelimitedFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
      }
      public static perfetto.protos.TrackEventOuterClass.TrackEvent.LegacyEvent parseFrom(
          com.google.protobuf.CodedInputStream input)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseWithIOException(PARSER, input);
      }
      public static perfetto.protos.TrackEventOuterClass.TrackEvent.LegacyEvent parseFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseWithIOException(PARSER, input, extensionRegistry);
      }

      @java.lang.Override
      public Builder newBuilderForType() { return newBuilder(); }
      public static Builder newBuilder() {
        return DEFAULT_INSTANCE.toBuilder();
      }
      public static Builder newBuilder(perfetto.protos.TrackEventOuterClass.TrackEvent.LegacyEvent prototype) {
        return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
      }
      @java.lang.Override
      public Builder toBuilder() {
        return this == DEFAULT_INSTANCE
            ? new Builder() : new Builder().mergeFrom(this);
      }

      @java.lang.Override
      protected Builder newBuilderForType(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        Builder builder = new Builder(parent);
        return builder;
      }
      /**
       * <pre>
       * Apart from {category, time, thread time, tid, pid}, other legacy trace
       * event attributes are initially simply proxied for conversion to a JSON
       * trace. We intend to gradually transition these attributes to similar native
       * features in TrackEvent (e.g. async + flow events), or deprecate them
       * without replacement where transition is unsuitable.
       * Next reserved id: 16 (up to 16).
       * Next id: 20.
       * </pre>
       *
       * Protobuf type {@code perfetto.protos.TrackEvent.LegacyEvent}
       */
      public static final class Builder extends
          com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
          // @@protoc_insertion_point(builder_implements:perfetto.protos.TrackEvent.LegacyEvent)
          perfetto.protos.TrackEventOuterClass.TrackEvent.LegacyEventOrBuilder {
        public static final com.google.protobuf.Descriptors.Descriptor
            getDescriptor() {
          return perfetto.protos.TrackEventOuterClass.internal_static_perfetto_protos_TrackEvent_LegacyEvent_descriptor;
        }

        @java.lang.Override
        protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
            internalGetFieldAccessorTable() {
          return perfetto.protos.TrackEventOuterClass.internal_static_perfetto_protos_TrackEvent_LegacyEvent_fieldAccessorTable
              .ensureFieldAccessorsInitialized(
                  perfetto.protos.TrackEventOuterClass.TrackEvent.LegacyEvent.class, perfetto.protos.TrackEventOuterClass.TrackEvent.LegacyEvent.Builder.class);
        }

        // Construct using perfetto.protos.TrackEventOuterClass.TrackEvent.LegacyEvent.newBuilder()
        private Builder() {

        }

        private Builder(
            com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
          super(parent);

        }
        @java.lang.Override
        public Builder clear() {
          super.clear();
          bitField0_ = 0;
          nameIid_ = 0L;
          phase_ = 0;
          durationUs_ = 0L;
          threadDurationUs_ = 0L;
          threadInstructionDelta_ = 0L;
          idScope_ = "";
          useAsyncTts_ = false;
          bindId_ = 0L;
          bindToEnclosing_ = false;
          flowDirection_ = 0;
          instantEventScope_ = 0;
          pidOverride_ = 0;
          tidOverride_ = 0;
          idCase_ = 0;
          id_ = null;
          return this;
        }

        @java.lang.Override
        public com.google.protobuf.Descriptors.Descriptor
            getDescriptorForType() {
          return perfetto.protos.TrackEventOuterClass.internal_static_perfetto_protos_TrackEvent_LegacyEvent_descriptor;
        }

        @java.lang.Override
        public perfetto.protos.TrackEventOuterClass.TrackEvent.LegacyEvent getDefaultInstanceForType() {
          return perfetto.protos.TrackEventOuterClass.TrackEvent.LegacyEvent.getDefaultInstance();
        }

        @java.lang.Override
        public perfetto.protos.TrackEventOuterClass.TrackEvent.LegacyEvent build() {
          perfetto.protos.TrackEventOuterClass.TrackEvent.LegacyEvent result = buildPartial();
          if (!result.isInitialized()) {
            throw newUninitializedMessageException(result);
          }
          return result;
        }

        @java.lang.Override
        public perfetto.protos.TrackEventOuterClass.TrackEvent.LegacyEvent buildPartial() {
          perfetto.protos.TrackEventOuterClass.TrackEvent.LegacyEvent result = new perfetto.protos.TrackEventOuterClass.TrackEvent.LegacyEvent(this);
          if (bitField0_ != 0) { buildPartial0(result); }
          buildPartialOneofs(result);
          onBuilt();
          return result;
        }

        private void buildPartial0(perfetto.protos.TrackEventOuterClass.TrackEvent.LegacyEvent result) {
          int from_bitField0_ = bitField0_;
          int to_bitField0_ = 0;
          if (((from_bitField0_ & 0x00000001) != 0)) {
            result.nameIid_ = nameIid_;
            to_bitField0_ |= 0x00000001;
          }
          if (((from_bitField0_ & 0x00000002) != 0)) {
            result.phase_ = phase_;
            to_bitField0_ |= 0x00000002;
          }
          if (((from_bitField0_ & 0x00000004) != 0)) {
            result.durationUs_ = durationUs_;
            to_bitField0_ |= 0x00000004;
          }
          if (((from_bitField0_ & 0x00000008) != 0)) {
            result.threadDurationUs_ = threadDurationUs_;
            to_bitField0_ |= 0x00000008;
          }
          if (((from_bitField0_ & 0x00000010) != 0)) {
            result.threadInstructionDelta_ = threadInstructionDelta_;
            to_bitField0_ |= 0x00000010;
          }
          if (((from_bitField0_ & 0x00000100) != 0)) {
            result.idScope_ = idScope_;
            to_bitField0_ |= 0x00000100;
          }
          if (((from_bitField0_ & 0x00000200) != 0)) {
            result.useAsyncTts_ = useAsyncTts_;
            to_bitField0_ |= 0x00000200;
          }
          if (((from_bitField0_ & 0x00000400) != 0)) {
            result.bindId_ = bindId_;
            to_bitField0_ |= 0x00000400;
          }
          if (((from_bitField0_ & 0x00000800) != 0)) {
            result.bindToEnclosing_ = bindToEnclosing_;
            to_bitField0_ |= 0x00000800;
          }
          if (((from_bitField0_ & 0x00001000) != 0)) {
            result.flowDirection_ = flowDirection_;
            to_bitField0_ |= 0x00001000;
          }
          if (((from_bitField0_ & 0x00002000) != 0)) {
            result.instantEventScope_ = instantEventScope_;
            to_bitField0_ |= 0x00002000;
          }
          if (((from_bitField0_ & 0x00004000) != 0)) {
            result.pidOverride_ = pidOverride_;
            to_bitField0_ |= 0x00004000;
          }
          if (((from_bitField0_ & 0x00008000) != 0)) {
            result.tidOverride_ = tidOverride_;
            to_bitField0_ |= 0x00008000;
          }
          result.bitField0_ |= to_bitField0_;
        }

        private void buildPartialOneofs(perfetto.protos.TrackEventOuterClass.TrackEvent.LegacyEvent result) {
          result.idCase_ = idCase_;
          result.id_ = this.id_;
        }

        @java.lang.Override
        public Builder clone() {
          return super.clone();
        }
        @java.lang.Override
        public Builder setField(
            com.google.protobuf.Descriptors.FieldDescriptor field,
            java.lang.Object value) {
          return super.setField(field, value);
        }
        @java.lang.Override
        public Builder clearField(
            com.google.protobuf.Descriptors.FieldDescriptor field) {
          return super.clearField(field);
        }
        @java.lang.Override
        public Builder clearOneof(
            com.google.protobuf.Descriptors.OneofDescriptor oneof) {
          return super.clearOneof(oneof);
        }
        @java.lang.Override
        public Builder setRepeatedField(
            com.google.protobuf.Descriptors.FieldDescriptor field,
            int index, java.lang.Object value) {
          return super.setRepeatedField(field, index, value);
        }
        @java.lang.Override
        public Builder addRepeatedField(
            com.google.protobuf.Descriptors.FieldDescriptor field,
            java.lang.Object value) {
          return super.addRepeatedField(field, value);
        }
        @java.lang.Override
        public Builder mergeFrom(com.google.protobuf.Message other) {
          if (other instanceof perfetto.protos.TrackEventOuterClass.TrackEvent.LegacyEvent) {
            return mergeFrom((perfetto.protos.TrackEventOuterClass.TrackEvent.LegacyEvent)other);
          } else {
            super.mergeFrom(other);
            return this;
          }
        }

        public Builder mergeFrom(perfetto.protos.TrackEventOuterClass.TrackEvent.LegacyEvent other) {
          if (other == perfetto.protos.TrackEventOuterClass.TrackEvent.LegacyEvent.getDefaultInstance()) return this;
          if (other.hasNameIid()) {
            setNameIid(other.getNameIid());
          }
          if (other.hasPhase()) {
            setPhase(other.getPhase());
          }
          if (other.hasDurationUs()) {
            setDurationUs(other.getDurationUs());
          }
          if (other.hasThreadDurationUs()) {
            setThreadDurationUs(other.getThreadDurationUs());
          }
          if (other.hasThreadInstructionDelta()) {
            setThreadInstructionDelta(other.getThreadInstructionDelta());
          }
          if (other.hasIdScope()) {
            idScope_ = other.idScope_;
            bitField0_ |= 0x00000100;
            onChanged();
          }
          if (other.hasUseAsyncTts()) {
            setUseAsyncTts(other.getUseAsyncTts());
          }
          if (other.hasBindId()) {
            setBindId(other.getBindId());
          }
          if (other.hasBindToEnclosing()) {
            setBindToEnclosing(other.getBindToEnclosing());
          }
          if (other.hasFlowDirection()) {
            setFlowDirection(other.getFlowDirection());
          }
          if (other.hasInstantEventScope()) {
            setInstantEventScope(other.getInstantEventScope());
          }
          if (other.hasPidOverride()) {
            setPidOverride(other.getPidOverride());
          }
          if (other.hasTidOverride()) {
            setTidOverride(other.getTidOverride());
          }
          switch (other.getIdCase()) {
            case UNSCOPED_ID: {
              setUnscopedId(other.getUnscopedId());
              break;
            }
            case LOCAL_ID: {
              setLocalId(other.getLocalId());
              break;
            }
            case GLOBAL_ID: {
              setGlobalId(other.getGlobalId());
              break;
            }
            case ID_NOT_SET: {
              break;
            }
          }
          this.mergeUnknownFields(other.getUnknownFields());
          onChanged();
          return this;
        }

        @java.lang.Override
        public final boolean isInitialized() {
          return true;
        }

        @java.lang.Override
        public Builder mergeFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws java.io.IOException {
          if (extensionRegistry == null) {
            throw new java.lang.NullPointerException();
          }
          try {
            boolean done = false;
            while (!done) {
              int tag = input.readTag();
              switch (tag) {
                case 0:
                  done = true;
                  break;
                case 8: {
                  nameIid_ = input.readUInt64();
                  bitField0_ |= 0x00000001;
                  break;
                } // case 8
                case 16: {
                  phase_ = input.readInt32();
                  bitField0_ |= 0x00000002;
                  break;
                } // case 16
                case 24: {
                  durationUs_ = input.readInt64();
                  bitField0_ |= 0x00000004;
                  break;
                } // case 24
                case 32: {
                  threadDurationUs_ = input.readInt64();
                  bitField0_ |= 0x00000008;
                  break;
                } // case 32
                case 48: {
                  id_ = input.readUInt64();
                  idCase_ = 6;
                  break;
                } // case 48
                case 58: {
                  idScope_ = input.readBytes();
                  bitField0_ |= 0x00000100;
                  break;
                } // case 58
                case 64: {
                  bindId_ = input.readUInt64();
                  bitField0_ |= 0x00000400;
                  break;
                } // case 64
                case 72: {
                  useAsyncTts_ = input.readBool();
                  bitField0_ |= 0x00000200;
                  break;
                } // case 72
                case 80: {
                  id_ = input.readUInt64();
                  idCase_ = 10;
                  break;
                } // case 80
                case 88: {
                  id_ = input.readUInt64();
                  idCase_ = 11;
                  break;
                } // case 88
                case 96: {
                  bindToEnclosing_ = input.readBool();
                  bitField0_ |= 0x00000800;
                  break;
                } // case 96
                case 104: {
                  int tmpRaw = input.readEnum();
                  perfetto.protos.TrackEventOuterClass.TrackEvent.LegacyEvent.FlowDirection tmpValue =
                      perfetto.protos.TrackEventOuterClass.TrackEvent.LegacyEvent.FlowDirection.forNumber(tmpRaw);
                  if (tmpValue == null) {
                    mergeUnknownVarintField(13, tmpRaw);
                  } else {
                    flowDirection_ = tmpRaw;
                    bitField0_ |= 0x00001000;
                  }
                  break;
                } // case 104
                case 112: {
                  int tmpRaw = input.readEnum();
                  perfetto.protos.TrackEventOuterClass.TrackEvent.LegacyEvent.InstantEventScope tmpValue =
                      perfetto.protos.TrackEventOuterClass.TrackEvent.LegacyEvent.InstantEventScope.forNumber(tmpRaw);
                  if (tmpValue == null) {
                    mergeUnknownVarintField(14, tmpRaw);
                  } else {
                    instantEventScope_ = tmpRaw;
                    bitField0_ |= 0x00002000;
                  }
                  break;
                } // case 112
                case 120: {
                  threadInstructionDelta_ = input.readInt64();
                  bitField0_ |= 0x00000010;
                  break;
                } // case 120
                case 144: {
                  pidOverride_ = input.readInt32();
                  bitField0_ |= 0x00004000;
                  break;
                } // case 144
                case 152: {
                  tidOverride_ = input.readInt32();
                  bitField0_ |= 0x00008000;
                  break;
                } // case 152
                default: {
                  if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                    done = true; // was an endgroup tag
                  }
                  break;
                } // default:
              } // switch (tag)
            } // while (!done)
          } catch (com.google.protobuf.InvalidProtocolBufferException e) {
            throw e.unwrapIOException();
          } finally {
            onChanged();
          } // finally
          return this;
        }
        private int idCase_ = 0;
        private java.lang.Object id_;
        public IdCase
            getIdCase() {
          return IdCase.forNumber(
              idCase_);
        }

        public Builder clearId() {
          idCase_ = 0;
          id_ = null;
          onChanged();
          return this;
        }

        private int bitField0_;

        private long nameIid_ ;
        /**
         * <pre>
         * Deprecated, use TrackEvent::name(_iid) instead.
         * interned EventName.
         * </pre>
         *
         * <code>optional uint64 name_iid = 1;</code>
         * @return Whether the nameIid field is set.
         */
        @java.lang.Override
        public boolean hasNameIid() {
          return ((bitField0_ & 0x00000001) != 0);
        }
        /**
         * <pre>
         * Deprecated, use TrackEvent::name(_iid) instead.
         * interned EventName.
         * </pre>
         *
         * <code>optional uint64 name_iid = 1;</code>
         * @return The nameIid.
         */
        @java.lang.Override
        public long getNameIid() {
          return nameIid_;
        }
        /**
         * <pre>
         * Deprecated, use TrackEvent::name(_iid) instead.
         * interned EventName.
         * </pre>
         *
         * <code>optional uint64 name_iid = 1;</code>
         * @param value The nameIid to set.
         * @return This builder for chaining.
         */
        public Builder setNameIid(long value) {
          
          nameIid_ = value;
          bitField0_ |= 0x00000001;
          onChanged();
          return this;
        }
        /**
         * <pre>
         * Deprecated, use TrackEvent::name(_iid) instead.
         * interned EventName.
         * </pre>
         *
         * <code>optional uint64 name_iid = 1;</code>
         * @return This builder for chaining.
         */
        public Builder clearNameIid() {
          bitField0_ = (bitField0_ & ~0x00000001);
          nameIid_ = 0L;
          onChanged();
          return this;
        }

        private int phase_ ;
        /**
         * <code>optional int32 phase = 2;</code>
         * @return Whether the phase field is set.
         */
        @java.lang.Override
        public boolean hasPhase() {
          return ((bitField0_ & 0x00000002) != 0);
        }
        /**
         * <code>optional int32 phase = 2;</code>
         * @return The phase.
         */
        @java.lang.Override
        public int getPhase() {
          return phase_;
        }
        /**
         * <code>optional int32 phase = 2;</code>
         * @param value The phase to set.
         * @return This builder for chaining.
         */
        public Builder setPhase(int value) {
          
          phase_ = value;
          bitField0_ |= 0x00000002;
          onChanged();
          return this;
        }
        /**
         * <code>optional int32 phase = 2;</code>
         * @return This builder for chaining.
         */
        public Builder clearPhase() {
          bitField0_ = (bitField0_ & ~0x00000002);
          phase_ = 0;
          onChanged();
          return this;
        }

        private long durationUs_ ;
        /**
         * <code>optional int64 duration_us = 3;</code>
         * @return Whether the durationUs field is set.
         */
        @java.lang.Override
        public boolean hasDurationUs() {
          return ((bitField0_ & 0x00000004) != 0);
        }
        /**
         * <code>optional int64 duration_us = 3;</code>
         * @return The durationUs.
         */
        @java.lang.Override
        public long getDurationUs() {
          return durationUs_;
        }
        /**
         * <code>optional int64 duration_us = 3;</code>
         * @param value The durationUs to set.
         * @return This builder for chaining.
         */
        public Builder setDurationUs(long value) {
          
          durationUs_ = value;
          bitField0_ |= 0x00000004;
          onChanged();
          return this;
        }
        /**
         * <code>optional int64 duration_us = 3;</code>
         * @return This builder for chaining.
         */
        public Builder clearDurationUs() {
          bitField0_ = (bitField0_ & ~0x00000004);
          durationUs_ = 0L;
          onChanged();
          return this;
        }

        private long threadDurationUs_ ;
        /**
         * <code>optional int64 thread_duration_us = 4;</code>
         * @return Whether the threadDurationUs field is set.
         */
        @java.lang.Override
        public boolean hasThreadDurationUs() {
          return ((bitField0_ & 0x00000008) != 0);
        }
        /**
         * <code>optional int64 thread_duration_us = 4;</code>
         * @return The threadDurationUs.
         */
        @java.lang.Override
        public long getThreadDurationUs() {
          return threadDurationUs_;
        }
        /**
         * <code>optional int64 thread_duration_us = 4;</code>
         * @param value The threadDurationUs to set.
         * @return This builder for chaining.
         */
        public Builder setThreadDurationUs(long value) {
          
          threadDurationUs_ = value;
          bitField0_ |= 0x00000008;
          onChanged();
          return this;
        }
        /**
         * <code>optional int64 thread_duration_us = 4;</code>
         * @return This builder for chaining.
         */
        public Builder clearThreadDurationUs() {
          bitField0_ = (bitField0_ & ~0x00000008);
          threadDurationUs_ = 0L;
          onChanged();
          return this;
        }

        private long threadInstructionDelta_ ;
        /**
         * <pre>
         * Elapsed retired instruction count during the event.
         * </pre>
         *
         * <code>optional int64 thread_instruction_delta = 15;</code>
         * @return Whether the threadInstructionDelta field is set.
         */
        @java.lang.Override
        public boolean hasThreadInstructionDelta() {
          return ((bitField0_ & 0x00000010) != 0);
        }
        /**
         * <pre>
         * Elapsed retired instruction count during the event.
         * </pre>
         *
         * <code>optional int64 thread_instruction_delta = 15;</code>
         * @return The threadInstructionDelta.
         */
        @java.lang.Override
        public long getThreadInstructionDelta() {
          return threadInstructionDelta_;
        }
        /**
         * <pre>
         * Elapsed retired instruction count during the event.
         * </pre>
         *
         * <code>optional int64 thread_instruction_delta = 15;</code>
         * @param value The threadInstructionDelta to set.
         * @return This builder for chaining.
         */
        public Builder setThreadInstructionDelta(long value) {
          
          threadInstructionDelta_ = value;
          bitField0_ |= 0x00000010;
          onChanged();
          return this;
        }
        /**
         * <pre>
         * Elapsed retired instruction count during the event.
         * </pre>
         *
         * <code>optional int64 thread_instruction_delta = 15;</code>
         * @return This builder for chaining.
         */
        public Builder clearThreadInstructionDelta() {
          bitField0_ = (bitField0_ & ~0x00000010);
          threadInstructionDelta_ = 0L;
          onChanged();
          return this;
        }

        /**
         * <code>uint64 unscoped_id = 6;</code>
         * @return Whether the unscopedId field is set.
         */
        public boolean hasUnscopedId() {
          return idCase_ == 6;
        }
        /**
         * <code>uint64 unscoped_id = 6;</code>
         * @return The unscopedId.
         */
        public long getUnscopedId() {
          if (idCase_ == 6) {
            return (java.lang.Long) id_;
          }
          return 0L;
        }
        /**
         * <code>uint64 unscoped_id = 6;</code>
         * @param value The unscopedId to set.
         * @return This builder for chaining.
         */
        public Builder setUnscopedId(long value) {
          
          idCase_ = 6;
          id_ = value;
          onChanged();
          return this;
        }
        /**
         * <code>uint64 unscoped_id = 6;</code>
         * @return This builder for chaining.
         */
        public Builder clearUnscopedId() {
          if (idCase_ == 6) {
            idCase_ = 0;
            id_ = null;
            onChanged();
          }
          return this;
        }

        /**
         * <code>uint64 local_id = 10;</code>
         * @return Whether the localId field is set.
         */
        public boolean hasLocalId() {
          return idCase_ == 10;
        }
        /**
         * <code>uint64 local_id = 10;</code>
         * @return The localId.
         */
        public long getLocalId() {
          if (idCase_ == 10) {
            return (java.lang.Long) id_;
          }
          return 0L;
        }
        /**
         * <code>uint64 local_id = 10;</code>
         * @param value The localId to set.
         * @return This builder for chaining.
         */
        public Builder setLocalId(long value) {
          
          idCase_ = 10;
          id_ = value;
          onChanged();
          return this;
        }
        /**
         * <code>uint64 local_id = 10;</code>
         * @return This builder for chaining.
         */
        public Builder clearLocalId() {
          if (idCase_ == 10) {
            idCase_ = 0;
            id_ = null;
            onChanged();
          }
          return this;
        }

        /**
         * <code>uint64 global_id = 11;</code>
         * @return Whether the globalId field is set.
         */
        public boolean hasGlobalId() {
          return idCase_ == 11;
        }
        /**
         * <code>uint64 global_id = 11;</code>
         * @return The globalId.
         */
        public long getGlobalId() {
          if (idCase_ == 11) {
            return (java.lang.Long) id_;
          }
          return 0L;
        }
        /**
         * <code>uint64 global_id = 11;</code>
         * @param value The globalId to set.
         * @return This builder for chaining.
         */
        public Builder setGlobalId(long value) {
          
          idCase_ = 11;
          id_ = value;
          onChanged();
          return this;
        }
        /**
         * <code>uint64 global_id = 11;</code>
         * @return This builder for chaining.
         */
        public Builder clearGlobalId() {
          if (idCase_ == 11) {
            idCase_ = 0;
            id_ = null;
            onChanged();
          }
          return this;
        }

        private java.lang.Object idScope_ = "";
        /**
         * <pre>
         * Additional optional scope for |id|.
         * </pre>
         *
         * <code>optional string id_scope = 7;</code>
         * @return Whether the idScope field is set.
         */
        public boolean hasIdScope() {
          return ((bitField0_ & 0x00000100) != 0);
        }
        /**
         * <pre>
         * Additional optional scope for |id|.
         * </pre>
         *
         * <code>optional string id_scope = 7;</code>
         * @return The idScope.
         */
        public java.lang.String getIdScope() {
          java.lang.Object ref = idScope_;
          if (!(ref instanceof java.lang.String)) {
            com.google.protobuf.ByteString bs =
                (com.google.protobuf.ByteString) ref;
            java.lang.String s = bs.toStringUtf8();
            if (bs.isValidUtf8()) {
              idScope_ = s;
            }
            return s;
          } else {
            return (java.lang.String) ref;
          }
        }
        /**
         * <pre>
         * Additional optional scope for |id|.
         * </pre>
         *
         * <code>optional string id_scope = 7;</code>
         * @return The bytes for idScope.
         */
        public com.google.protobuf.ByteString
            getIdScopeBytes() {
          java.lang.Object ref = idScope_;
          if (ref instanceof String) {
            com.google.protobuf.ByteString b = 
                com.google.protobuf.ByteString.copyFromUtf8(
                    (java.lang.String) ref);
            idScope_ = b;
            return b;
          } else {
            return (com.google.protobuf.ByteString) ref;
          }
        }
        /**
         * <pre>
         * Additional optional scope for |id|.
         * </pre>
         *
         * <code>optional string id_scope = 7;</code>
         * @param value The idScope to set.
         * @return This builder for chaining.
         */
        public Builder setIdScope(
            java.lang.String value) {
          if (value == null) { throw new NullPointerException(); }
          idScope_ = value;
          bitField0_ |= 0x00000100;
          onChanged();
          return this;
        }
        /**
         * <pre>
         * Additional optional scope for |id|.
         * </pre>
         *
         * <code>optional string id_scope = 7;</code>
         * @return This builder for chaining.
         */
        public Builder clearIdScope() {
          idScope_ = getDefaultInstance().getIdScope();
          bitField0_ = (bitField0_ & ~0x00000100);
          onChanged();
          return this;
        }
        /**
         * <pre>
         * Additional optional scope for |id|.
         * </pre>
         *
         * <code>optional string id_scope = 7;</code>
         * @param value The bytes for idScope to set.
         * @return This builder for chaining.
         */
        public Builder setIdScopeBytes(
            com.google.protobuf.ByteString value) {
          if (value == null) { throw new NullPointerException(); }
          idScope_ = value;
          bitField0_ |= 0x00000100;
          onChanged();
          return this;
        }

        private boolean useAsyncTts_ ;
        /**
         * <pre>
         * Consider the thread timestamps for async BEGIN/END event pairs as valid.
         * </pre>
         *
         * <code>optional bool use_async_tts = 9;</code>
         * @return Whether the useAsyncTts field is set.
         */
        @java.lang.Override
        public boolean hasUseAsyncTts() {
          return ((bitField0_ & 0x00000200) != 0);
        }
        /**
         * <pre>
         * Consider the thread timestamps for async BEGIN/END event pairs as valid.
         * </pre>
         *
         * <code>optional bool use_async_tts = 9;</code>
         * @return The useAsyncTts.
         */
        @java.lang.Override
        public boolean getUseAsyncTts() {
          return useAsyncTts_;
        }
        /**
         * <pre>
         * Consider the thread timestamps for async BEGIN/END event pairs as valid.
         * </pre>
         *
         * <code>optional bool use_async_tts = 9;</code>
         * @param value The useAsyncTts to set.
         * @return This builder for chaining.
         */
        public Builder setUseAsyncTts(boolean value) {
          
          useAsyncTts_ = value;
          bitField0_ |= 0x00000200;
          onChanged();
          return this;
        }
        /**
         * <pre>
         * Consider the thread timestamps for async BEGIN/END event pairs as valid.
         * </pre>
         *
         * <code>optional bool use_async_tts = 9;</code>
         * @return This builder for chaining.
         */
        public Builder clearUseAsyncTts() {
          bitField0_ = (bitField0_ & ~0x00000200);
          useAsyncTts_ = false;
          onChanged();
          return this;
        }

        private long bindId_ ;
        /**
         * <pre>
         * Idenfifies a flow. Flow events with the same bind_id are connected.
         * </pre>
         *
         * <code>optional uint64 bind_id = 8;</code>
         * @return Whether the bindId field is set.
         */
        @java.lang.Override
        public boolean hasBindId() {
          return ((bitField0_ & 0x00000400) != 0);
        }
        /**
         * <pre>
         * Idenfifies a flow. Flow events with the same bind_id are connected.
         * </pre>
         *
         * <code>optional uint64 bind_id = 8;</code>
         * @return The bindId.
         */
        @java.lang.Override
        public long getBindId() {
          return bindId_;
        }
        /**
         * <pre>
         * Idenfifies a flow. Flow events with the same bind_id are connected.
         * </pre>
         *
         * <code>optional uint64 bind_id = 8;</code>
         * @param value The bindId to set.
         * @return This builder for chaining.
         */
        public Builder setBindId(long value) {
          
          bindId_ = value;
          bitField0_ |= 0x00000400;
          onChanged();
          return this;
        }
        /**
         * <pre>
         * Idenfifies a flow. Flow events with the same bind_id are connected.
         * </pre>
         *
         * <code>optional uint64 bind_id = 8;</code>
         * @return This builder for chaining.
         */
        public Builder clearBindId() {
          bitField0_ = (bitField0_ & ~0x00000400);
          bindId_ = 0L;
          onChanged();
          return this;
        }

        private boolean bindToEnclosing_ ;
        /**
         * <pre>
         * Use the enclosing slice as binding point for a flow end event instead of
         * the next slice. Flow start/step events always bind to the enclosing
         * slice.
         * </pre>
         *
         * <code>optional bool bind_to_enclosing = 12;</code>
         * @return Whether the bindToEnclosing field is set.
         */
        @java.lang.Override
        public boolean hasBindToEnclosing() {
          return ((bitField0_ & 0x00000800) != 0);
        }
        /**
         * <pre>
         * Use the enclosing slice as binding point for a flow end event instead of
         * the next slice. Flow start/step events always bind to the enclosing
         * slice.
         * </pre>
         *
         * <code>optional bool bind_to_enclosing = 12;</code>
         * @return The bindToEnclosing.
         */
        @java.lang.Override
        public boolean getBindToEnclosing() {
          return bindToEnclosing_;
        }
        /**
         * <pre>
         * Use the enclosing slice as binding point for a flow end event instead of
         * the next slice. Flow start/step events always bind to the enclosing
         * slice.
         * </pre>
         *
         * <code>optional bool bind_to_enclosing = 12;</code>
         * @param value The bindToEnclosing to set.
         * @return This builder for chaining.
         */
        public Builder setBindToEnclosing(boolean value) {
          
          bindToEnclosing_ = value;
          bitField0_ |= 0x00000800;
          onChanged();
          return this;
        }
        /**
         * <pre>
         * Use the enclosing slice as binding point for a flow end event instead of
         * the next slice. Flow start/step events always bind to the enclosing
         * slice.
         * </pre>
         *
         * <code>optional bool bind_to_enclosing = 12;</code>
         * @return This builder for chaining.
         */
        public Builder clearBindToEnclosing() {
          bitField0_ = (bitField0_ & ~0x00000800);
          bindToEnclosing_ = false;
          onChanged();
          return this;
        }

        private int flowDirection_ = 0;
        /**
         * <code>optional .perfetto.protos.TrackEvent.LegacyEvent.FlowDirection flow_direction = 13;</code>
         * @return Whether the flowDirection field is set.
         */
        @java.lang.Override public boolean hasFlowDirection() {
          return ((bitField0_ & 0x00001000) != 0);
        }
        /**
         * <code>optional .perfetto.protos.TrackEvent.LegacyEvent.FlowDirection flow_direction = 13;</code>
         * @return The flowDirection.
         */
        @java.lang.Override
        public perfetto.protos.TrackEventOuterClass.TrackEvent.LegacyEvent.FlowDirection getFlowDirection() {
          perfetto.protos.TrackEventOuterClass.TrackEvent.LegacyEvent.FlowDirection result = perfetto.protos.TrackEventOuterClass.TrackEvent.LegacyEvent.FlowDirection.forNumber(flowDirection_);
          return result == null ? perfetto.protos.TrackEventOuterClass.TrackEvent.LegacyEvent.FlowDirection.FLOW_UNSPECIFIED : result;
        }
        /**
         * <code>optional .perfetto.protos.TrackEvent.LegacyEvent.FlowDirection flow_direction = 13;</code>
         * @param value The flowDirection to set.
         * @return This builder for chaining.
         */
        public Builder setFlowDirection(perfetto.protos.TrackEventOuterClass.TrackEvent.LegacyEvent.FlowDirection value) {
          if (value == null) {
            throw new NullPointerException();
          }
          bitField0_ |= 0x00001000;
          flowDirection_ = value.getNumber();
          onChanged();
          return this;
        }
        /**
         * <code>optional .perfetto.protos.TrackEvent.LegacyEvent.FlowDirection flow_direction = 13;</code>
         * @return This builder for chaining.
         */
        public Builder clearFlowDirection() {
          bitField0_ = (bitField0_ & ~0x00001000);
          flowDirection_ = 0;
          onChanged();
          return this;
        }

        private int instantEventScope_ = 0;
        /**
         * <code>optional .perfetto.protos.TrackEvent.LegacyEvent.InstantEventScope instant_event_scope = 14;</code>
         * @return Whether the instantEventScope field is set.
         */
        @java.lang.Override public boolean hasInstantEventScope() {
          return ((bitField0_ & 0x00002000) != 0);
        }
        /**
         * <code>optional .perfetto.protos.TrackEvent.LegacyEvent.InstantEventScope instant_event_scope = 14;</code>
         * @return The instantEventScope.
         */
        @java.lang.Override
        public perfetto.protos.TrackEventOuterClass.TrackEvent.LegacyEvent.InstantEventScope getInstantEventScope() {
          perfetto.protos.TrackEventOuterClass.TrackEvent.LegacyEvent.InstantEventScope result = perfetto.protos.TrackEventOuterClass.TrackEvent.LegacyEvent.InstantEventScope.forNumber(instantEventScope_);
          return result == null ? perfetto.protos.TrackEventOuterClass.TrackEvent.LegacyEvent.InstantEventScope.SCOPE_UNSPECIFIED : result;
        }
        /**
         * <code>optional .perfetto.protos.TrackEvent.LegacyEvent.InstantEventScope instant_event_scope = 14;</code>
         * @param value The instantEventScope to set.
         * @return This builder for chaining.
         */
        public Builder setInstantEventScope(perfetto.protos.TrackEventOuterClass.TrackEvent.LegacyEvent.InstantEventScope value) {
          if (value == null) {
            throw new NullPointerException();
          }
          bitField0_ |= 0x00002000;
          instantEventScope_ = value.getNumber();
          onChanged();
          return this;
        }
        /**
         * <code>optional .perfetto.protos.TrackEvent.LegacyEvent.InstantEventScope instant_event_scope = 14;</code>
         * @return This builder for chaining.
         */
        public Builder clearInstantEventScope() {
          bitField0_ = (bitField0_ & ~0x00002000);
          instantEventScope_ = 0;
          onChanged();
          return this;
        }

        private int pidOverride_ ;
        /**
         * <pre>
         * Override the pid/tid if the writer needs to emit events on behalf of
         * another process/thread. This should be the exception. Normally, the
         * pid+tid from ThreadDescriptor is used.
         * </pre>
         *
         * <code>optional int32 pid_override = 18;</code>
         * @return Whether the pidOverride field is set.
         */
        @java.lang.Override
        public boolean hasPidOverride() {
          return ((bitField0_ & 0x00004000) != 0);
        }
        /**
         * <pre>
         * Override the pid/tid if the writer needs to emit events on behalf of
         * another process/thread. This should be the exception. Normally, the
         * pid+tid from ThreadDescriptor is used.
         * </pre>
         *
         * <code>optional int32 pid_override = 18;</code>
         * @return The pidOverride.
         */
        @java.lang.Override
        public int getPidOverride() {
          return pidOverride_;
        }
        /**
         * <pre>
         * Override the pid/tid if the writer needs to emit events on behalf of
         * another process/thread. This should be the exception. Normally, the
         * pid+tid from ThreadDescriptor is used.
         * </pre>
         *
         * <code>optional int32 pid_override = 18;</code>
         * @param value The pidOverride to set.
         * @return This builder for chaining.
         */
        public Builder setPidOverride(int value) {
          
          pidOverride_ = value;
          bitField0_ |= 0x00004000;
          onChanged();
          return this;
        }
        /**
         * <pre>
         * Override the pid/tid if the writer needs to emit events on behalf of
         * another process/thread. This should be the exception. Normally, the
         * pid+tid from ThreadDescriptor is used.
         * </pre>
         *
         * <code>optional int32 pid_override = 18;</code>
         * @return This builder for chaining.
         */
        public Builder clearPidOverride() {
          bitField0_ = (bitField0_ & ~0x00004000);
          pidOverride_ = 0;
          onChanged();
          return this;
        }

        private int tidOverride_ ;
        /**
         * <code>optional int32 tid_override = 19;</code>
         * @return Whether the tidOverride field is set.
         */
        @java.lang.Override
        public boolean hasTidOverride() {
          return ((bitField0_ & 0x00008000) != 0);
        }
        /**
         * <code>optional int32 tid_override = 19;</code>
         * @return The tidOverride.
         */
        @java.lang.Override
        public int getTidOverride() {
          return tidOverride_;
        }
        /**
         * <code>optional int32 tid_override = 19;</code>
         * @param value The tidOverride to set.
         * @return This builder for chaining.
         */
        public Builder setTidOverride(int value) {
          
          tidOverride_ = value;
          bitField0_ |= 0x00008000;
          onChanged();
          return this;
        }
        /**
         * <code>optional int32 tid_override = 19;</code>
         * @return This builder for chaining.
         */
        public Builder clearTidOverride() {
          bitField0_ = (bitField0_ & ~0x00008000);
          tidOverride_ = 0;
          onChanged();
          return this;
        }
        @java.lang.Override
        public final Builder setUnknownFields(
            final com.google.protobuf.UnknownFieldSet unknownFields) {
          return super.setUnknownFields(unknownFields);
        }

        @java.lang.Override
        public final Builder mergeUnknownFields(
            final com.google.protobuf.UnknownFieldSet unknownFields) {
          return super.mergeUnknownFields(unknownFields);
        }


        // @@protoc_insertion_point(builder_scope:perfetto.protos.TrackEvent.LegacyEvent)
      }

      // @@protoc_insertion_point(class_scope:perfetto.protos.TrackEvent.LegacyEvent)
      private static final perfetto.protos.TrackEventOuterClass.TrackEvent.LegacyEvent DEFAULT_INSTANCE;
      static {
        DEFAULT_INSTANCE = new perfetto.protos.TrackEventOuterClass.TrackEvent.LegacyEvent();
      }

      public static perfetto.protos.TrackEventOuterClass.TrackEvent.LegacyEvent getDefaultInstance() {
        return DEFAULT_INSTANCE;
      }

      @java.lang.Deprecated public static final com.google.protobuf.Parser<LegacyEvent>
          PARSER = new com.google.protobuf.AbstractParser<LegacyEvent>() {
        @java.lang.Override
        public LegacyEvent parsePartialFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws com.google.protobuf.InvalidProtocolBufferException {
          Builder builder = newBuilder();
          try {
            builder.mergeFrom(input, extensionRegistry);
          } catch (com.google.protobuf.InvalidProtocolBufferException e) {
            throw e.setUnfinishedMessage(builder.buildPartial());
          } catch (com.google.protobuf.UninitializedMessageException e) {
            throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
          } catch (java.io.IOException e) {
            throw new com.google.protobuf.InvalidProtocolBufferException(e)
                .setUnfinishedMessage(builder.buildPartial());
          }
          return builder.buildPartial();
        }
      };

      public static com.google.protobuf.Parser<LegacyEvent> parser() {
        return PARSER;
      }

      @java.lang.Override
      public com.google.protobuf.Parser<LegacyEvent> getParserForType() {
        return PARSER;
      }

      @java.lang.Override
      public perfetto.protos.TrackEventOuterClass.TrackEvent.LegacyEvent getDefaultInstanceForType() {
        return DEFAULT_INSTANCE;
      }

    }

    private int bitField0_;
    private int nameFieldCase_ = 0;
    private java.lang.Object nameField_;
    public enum NameFieldCase
        implements com.google.protobuf.Internal.EnumLite,
            com.google.protobuf.AbstractMessage.InternalOneOfEnum {
      NAME_IID(10),
      NAME(23),
      NAMEFIELD_NOT_SET(0);
      private final int value;
      private NameFieldCase(int value) {
        this.value = value;
      }
      /**
       * @param value The number of the enum to look for.
       * @return The enum associated with the given number.
       * @deprecated Use {@link #forNumber(int)} instead.
       */
      @java.lang.Deprecated
      public static NameFieldCase valueOf(int value) {
        return forNumber(value);
      }

      public static NameFieldCase forNumber(int value) {
        switch (value) {
          case 10: return NAME_IID;
          case 23: return NAME;
          case 0: return NAMEFIELD_NOT_SET;
          default: return null;
        }
      }
      public int getNumber() {
        return this.value;
      }
    };

    public NameFieldCase
    getNameFieldCase() {
      return NameFieldCase.forNumber(
          nameFieldCase_);
    }

    private int counterValueFieldCase_ = 0;
    private java.lang.Object counterValueField_;
    public enum CounterValueFieldCase
        implements com.google.protobuf.Internal.EnumLite,
            com.google.protobuf.AbstractMessage.InternalOneOfEnum {
      COUNTER_VALUE(30),
      DOUBLE_COUNTER_VALUE(44),
      COUNTERVALUEFIELD_NOT_SET(0);
      private final int value;
      private CounterValueFieldCase(int value) {
        this.value = value;
      }
      /**
       * @param value The number of the enum to look for.
       * @return The enum associated with the given number.
       * @deprecated Use {@link #forNumber(int)} instead.
       */
      @java.lang.Deprecated
      public static CounterValueFieldCase valueOf(int value) {
        return forNumber(value);
      }

      public static CounterValueFieldCase forNumber(int value) {
        switch (value) {
          case 30: return COUNTER_VALUE;
          case 44: return DOUBLE_COUNTER_VALUE;
          case 0: return COUNTERVALUEFIELD_NOT_SET;
          default: return null;
        }
      }
      public int getNumber() {
        return this.value;
      }
    };

    public CounterValueFieldCase
    getCounterValueFieldCase() {
      return CounterValueFieldCase.forNumber(
          counterValueFieldCase_);
    }

    private int sourceLocationFieldCase_ = 0;
    private java.lang.Object sourceLocationField_;
    public enum SourceLocationFieldCase
        implements com.google.protobuf.Internal.EnumLite,
            com.google.protobuf.AbstractMessage.InternalOneOfEnum {
      SOURCE_LOCATION(33),
      SOURCE_LOCATION_IID(34),
      SOURCELOCATIONFIELD_NOT_SET(0);
      private final int value;
      private SourceLocationFieldCase(int value) {
        this.value = value;
      }
      /**
       * @param value The number of the enum to look for.
       * @return The enum associated with the given number.
       * @deprecated Use {@link #forNumber(int)} instead.
       */
      @java.lang.Deprecated
      public static SourceLocationFieldCase valueOf(int value) {
        return forNumber(value);
      }

      public static SourceLocationFieldCase forNumber(int value) {
        switch (value) {
          case 33: return SOURCE_LOCATION;
          case 34: return SOURCE_LOCATION_IID;
          case 0: return SOURCELOCATIONFIELD_NOT_SET;
          default: return null;
        }
      }
      public int getNumber() {
        return this.value;
      }
    };

    public SourceLocationFieldCase
    getSourceLocationFieldCase() {
      return SourceLocationFieldCase.forNumber(
          sourceLocationFieldCase_);
    }

    private int timestampCase_ = 0;
    private java.lang.Object timestamp_;
    public enum TimestampCase
        implements com.google.protobuf.Internal.EnumLite,
            com.google.protobuf.AbstractMessage.InternalOneOfEnum {
      TIMESTAMP_DELTA_US(1),
      TIMESTAMP_ABSOLUTE_US(16),
      TIMESTAMP_NOT_SET(0);
      private final int value;
      private TimestampCase(int value) {
        this.value = value;
      }
      /**
       * @param value The number of the enum to look for.
       * @return The enum associated with the given number.
       * @deprecated Use {@link #forNumber(int)} instead.
       */
      @java.lang.Deprecated
      public static TimestampCase valueOf(int value) {
        return forNumber(value);
      }

      public static TimestampCase forNumber(int value) {
        switch (value) {
          case 1: return TIMESTAMP_DELTA_US;
          case 16: return TIMESTAMP_ABSOLUTE_US;
          case 0: return TIMESTAMP_NOT_SET;
          default: return null;
        }
      }
      public int getNumber() {
        return this.value;
      }
    };

    public TimestampCase
    getTimestampCase() {
      return TimestampCase.forNumber(
          timestampCase_);
    }

    private int threadTimeCase_ = 0;
    private java.lang.Object threadTime_;
    public enum ThreadTimeCase
        implements com.google.protobuf.Internal.EnumLite,
            com.google.protobuf.AbstractMessage.InternalOneOfEnum {
      THREAD_TIME_DELTA_US(2),
      THREAD_TIME_ABSOLUTE_US(17),
      THREADTIME_NOT_SET(0);
      private final int value;
      private ThreadTimeCase(int value) {
        this.value = value;
      }
      /**
       * @param value The number of the enum to look for.
       * @return The enum associated with the given number.
       * @deprecated Use {@link #forNumber(int)} instead.
       */
      @java.lang.Deprecated
      public static ThreadTimeCase valueOf(int value) {
        return forNumber(value);
      }

      public static ThreadTimeCase forNumber(int value) {
        switch (value) {
          case 2: return THREAD_TIME_DELTA_US;
          case 17: return THREAD_TIME_ABSOLUTE_US;
          case 0: return THREADTIME_NOT_SET;
          default: return null;
        }
      }
      public int getNumber() {
        return this.value;
      }
    };

    public ThreadTimeCase
    getThreadTimeCase() {
      return ThreadTimeCase.forNumber(
          threadTimeCase_);
    }

    private int threadInstructionCountCase_ = 0;
    private java.lang.Object threadInstructionCount_;
    public enum ThreadInstructionCountCase
        implements com.google.protobuf.Internal.EnumLite,
            com.google.protobuf.AbstractMessage.InternalOneOfEnum {
      THREAD_INSTRUCTION_COUNT_DELTA(8),
      THREAD_INSTRUCTION_COUNT_ABSOLUTE(20),
      THREADINSTRUCTIONCOUNT_NOT_SET(0);
      private final int value;
      private ThreadInstructionCountCase(int value) {
        this.value = value;
      }
      /**
       * @param value The number of the enum to look for.
       * @return The enum associated with the given number.
       * @deprecated Use {@link #forNumber(int)} instead.
       */
      @java.lang.Deprecated
      public static ThreadInstructionCountCase valueOf(int value) {
        return forNumber(value);
      }

      public static ThreadInstructionCountCase forNumber(int value) {
        switch (value) {
          case 8: return THREAD_INSTRUCTION_COUNT_DELTA;
          case 20: return THREAD_INSTRUCTION_COUNT_ABSOLUTE;
          case 0: return THREADINSTRUCTIONCOUNT_NOT_SET;
          default: return null;
        }
      }
      public int getNumber() {
        return this.value;
      }
    };

    public ThreadInstructionCountCase
    getThreadInstructionCountCase() {
      return ThreadInstructionCountCase.forNumber(
          threadInstructionCountCase_);
    }

    public static final int CATEGORY_IIDS_FIELD_NUMBER = 3;
    @SuppressWarnings("serial")
    private com.google.protobuf.Internal.LongList categoryIids_;
    /**
     * <pre>
     * Names of categories of the event. In the client library, categories are a
     * way to turn groups of individual events on or off.
     * interned EventCategoryName.
     * </pre>
     *
     * <code>repeated uint64 category_iids = 3;</code>
     * @return A list containing the categoryIids.
     */
    @java.lang.Override
    public java.util.List<java.lang.Long>
        getCategoryIidsList() {
      return categoryIids_;
    }
    /**
     * <pre>
     * Names of categories of the event. In the client library, categories are a
     * way to turn groups of individual events on or off.
     * interned EventCategoryName.
     * </pre>
     *
     * <code>repeated uint64 category_iids = 3;</code>
     * @return The count of categoryIids.
     */
    public int getCategoryIidsCount() {
      return categoryIids_.size();
    }
    /**
     * <pre>
     * Names of categories of the event. In the client library, categories are a
     * way to turn groups of individual events on or off.
     * interned EventCategoryName.
     * </pre>
     *
     * <code>repeated uint64 category_iids = 3;</code>
     * @param index The index of the element to return.
     * @return The categoryIids at the given index.
     */
    public long getCategoryIids(int index) {
      return categoryIids_.getLong(index);
    }

    public static final int CATEGORIES_FIELD_NUMBER = 22;
    @SuppressWarnings("serial")
    private com.google.protobuf.LazyStringList categories_;
    /**
     * <pre>
     * non-interned variant.
     * </pre>
     *
     * <code>repeated string categories = 22;</code>
     * @return A list containing the categories.
     */
    public com.google.protobuf.ProtocolStringList
        getCategoriesList() {
      return categories_;
    }
    /**
     * <pre>
     * non-interned variant.
     * </pre>
     *
     * <code>repeated string categories = 22;</code>
     * @return The count of categories.
     */
    public int getCategoriesCount() {
      return categories_.size();
    }
    /**
     * <pre>
     * non-interned variant.
     * </pre>
     *
     * <code>repeated string categories = 22;</code>
     * @param index The index of the element to return.
     * @return The categories at the given index.
     */
    public java.lang.String getCategories(int index) {
      return categories_.get(index);
    }
    /**
     * <pre>
     * non-interned variant.
     * </pre>
     *
     * <code>repeated string categories = 22;</code>
     * @param index The index of the value to return.
     * @return The bytes of the categories at the given index.
     */
    public com.google.protobuf.ByteString
        getCategoriesBytes(int index) {
      return categories_.getByteString(index);
    }

    public static final int NAME_IID_FIELD_NUMBER = 10;
    /**
     * <pre>
     * interned EventName.
     * </pre>
     *
     * <code>uint64 name_iid = 10;</code>
     * @return Whether the nameIid field is set.
     */
    @java.lang.Override
    public boolean hasNameIid() {
      return nameFieldCase_ == 10;
    }
    /**
     * <pre>
     * interned EventName.
     * </pre>
     *
     * <code>uint64 name_iid = 10;</code>
     * @return The nameIid.
     */
    @java.lang.Override
    public long getNameIid() {
      if (nameFieldCase_ == 10) {
        return (java.lang.Long) nameField_;
      }
      return 0L;
    }

    public static final int NAME_FIELD_NUMBER = 23;
    /**
     * <pre>
     * non-interned variant.
     * </pre>
     *
     * <code>string name = 23;</code>
     * @return Whether the name field is set.
     */
    public boolean hasName() {
      return nameFieldCase_ == 23;
    }
    /**
     * <pre>
     * non-interned variant.
     * </pre>
     *
     * <code>string name = 23;</code>
     * @return The name.
     */
    public java.lang.String getName() {
      java.lang.Object ref = "";
      if (nameFieldCase_ == 23) {
        ref = nameField_;
      }
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        if (bs.isValidUtf8() && (nameFieldCase_ == 23)) {
          nameField_ = s;
        }
        return s;
      }
    }
    /**
     * <pre>
     * non-interned variant.
     * </pre>
     *
     * <code>string name = 23;</code>
     * @return The bytes for name.
     */
    public com.google.protobuf.ByteString
        getNameBytes() {
      java.lang.Object ref = "";
      if (nameFieldCase_ == 23) {
        ref = nameField_;
      }
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        if (nameFieldCase_ == 23) {
          nameField_ = b;
        }
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    public static final int TYPE_FIELD_NUMBER = 9;
    private int type_ = 0;
    /**
     * <code>optional .perfetto.protos.TrackEvent.Type type = 9;</code>
     * @return Whether the type field is set.
     */
    @java.lang.Override public boolean hasType() {
      return ((bitField0_ & 0x00000004) != 0);
    }
    /**
     * <code>optional .perfetto.protos.TrackEvent.Type type = 9;</code>
     * @return The type.
     */
    @java.lang.Override public perfetto.protos.TrackEventOuterClass.TrackEvent.Type getType() {
      perfetto.protos.TrackEventOuterClass.TrackEvent.Type result = perfetto.protos.TrackEventOuterClass.TrackEvent.Type.forNumber(type_);
      return result == null ? perfetto.protos.TrackEventOuterClass.TrackEvent.Type.TYPE_UNSPECIFIED : result;
    }

    public static final int TRACK_UUID_FIELD_NUMBER = 11;
    private long trackUuid_ = 0L;
    /**
     * <pre>
     * Identifies the track of the event. The default value may be overridden
     * using TrackEventDefaults, e.g., to specify the track of the TraceWriter's
     * sequence (in most cases sequence = one thread). If no value is specified
     * here or in TrackEventDefaults, the TrackEvent will be associated with an
     * implicit trace-global track (uuid 0). See TrackDescriptor::uuid.
     * </pre>
     *
     * <code>optional uint64 track_uuid = 11;</code>
     * @return Whether the trackUuid field is set.
     */
    @java.lang.Override
    public boolean hasTrackUuid() {
      return ((bitField0_ & 0x00000008) != 0);
    }
    /**
     * <pre>
     * Identifies the track of the event. The default value may be overridden
     * using TrackEventDefaults, e.g., to specify the track of the TraceWriter's
     * sequence (in most cases sequence = one thread). If no value is specified
     * here or in TrackEventDefaults, the TrackEvent will be associated with an
     * implicit trace-global track (uuid 0). See TrackDescriptor::uuid.
     * </pre>
     *
     * <code>optional uint64 track_uuid = 11;</code>
     * @return The trackUuid.
     */
    @java.lang.Override
    public long getTrackUuid() {
      return trackUuid_;
    }

    public static final int COUNTER_VALUE_FIELD_NUMBER = 30;
    /**
     * <code>int64 counter_value = 30;</code>
     * @return Whether the counterValue field is set.
     */
    @java.lang.Override
    public boolean hasCounterValue() {
      return counterValueFieldCase_ == 30;
    }
    /**
     * <code>int64 counter_value = 30;</code>
     * @return The counterValue.
     */
    @java.lang.Override
    public long getCounterValue() {
      if (counterValueFieldCase_ == 30) {
        return (java.lang.Long) counterValueField_;
      }
      return 0L;
    }

    public static final int DOUBLE_COUNTER_VALUE_FIELD_NUMBER = 44;
    /**
     * <code>double double_counter_value = 44;</code>
     * @return Whether the doubleCounterValue field is set.
     */
    @java.lang.Override
    public boolean hasDoubleCounterValue() {
      return counterValueFieldCase_ == 44;
    }
    /**
     * <code>double double_counter_value = 44;</code>
     * @return The doubleCounterValue.
     */
    @java.lang.Override
    public double getDoubleCounterValue() {
      if (counterValueFieldCase_ == 44) {
        return (java.lang.Double) counterValueField_;
      }
      return 0D;
    }

    public static final int EXTRA_COUNTER_TRACK_UUIDS_FIELD_NUMBER = 31;
    @SuppressWarnings("serial")
    private com.google.protobuf.Internal.LongList extraCounterTrackUuids_;
    /**
     * <pre>
     * To encode counter values more efficiently, we support attaching additional
     * counter values to a TrackEvent of any type. All values will share the same
     * timestamp specified in the TracePacket. The value at
     * extra_counter_values[N] is for the counter track referenced by
     * extra_counter_track_uuids[N].
     * |extra_counter_track_uuids| may also be set via TrackEventDefaults. There
     * should always be equal or more uuids than values. It is valid to set more
     * uuids (e.g. via defaults) than values. If uuids are specified in
     * TrackEventDefaults and a TrackEvent, the TrackEvent uuids override the
     * default uuid list.
     * For example, this allows snapshotting the thread time clock at each
     * thread-track BEGIN and END event to capture the cpu time delta of a slice.
     * </pre>
     *
     * <code>repeated uint64 extra_counter_track_uuids = 31;</code>
     * @return A list containing the extraCounterTrackUuids.
     */
    @java.lang.Override
    public java.util.List<java.lang.Long>
        getExtraCounterTrackUuidsList() {
      return extraCounterTrackUuids_;
    }
    /**
     * <pre>
     * To encode counter values more efficiently, we support attaching additional
     * counter values to a TrackEvent of any type. All values will share the same
     * timestamp specified in the TracePacket. The value at
     * extra_counter_values[N] is for the counter track referenced by
     * extra_counter_track_uuids[N].
     * |extra_counter_track_uuids| may also be set via TrackEventDefaults. There
     * should always be equal or more uuids than values. It is valid to set more
     * uuids (e.g. via defaults) than values. If uuids are specified in
     * TrackEventDefaults and a TrackEvent, the TrackEvent uuids override the
     * default uuid list.
     * For example, this allows snapshotting the thread time clock at each
     * thread-track BEGIN and END event to capture the cpu time delta of a slice.
     * </pre>
     *
     * <code>repeated uint64 extra_counter_track_uuids = 31;</code>
     * @return The count of extraCounterTrackUuids.
     */
    public int getExtraCounterTrackUuidsCount() {
      return extraCounterTrackUuids_.size();
    }
    /**
     * <pre>
     * To encode counter values more efficiently, we support attaching additional
     * counter values to a TrackEvent of any type. All values will share the same
     * timestamp specified in the TracePacket. The value at
     * extra_counter_values[N] is for the counter track referenced by
     * extra_counter_track_uuids[N].
     * |extra_counter_track_uuids| may also be set via TrackEventDefaults. There
     * should always be equal or more uuids than values. It is valid to set more
     * uuids (e.g. via defaults) than values. If uuids are specified in
     * TrackEventDefaults and a TrackEvent, the TrackEvent uuids override the
     * default uuid list.
     * For example, this allows snapshotting the thread time clock at each
     * thread-track BEGIN and END event to capture the cpu time delta of a slice.
     * </pre>
     *
     * <code>repeated uint64 extra_counter_track_uuids = 31;</code>
     * @param index The index of the element to return.
     * @return The extraCounterTrackUuids at the given index.
     */
    public long getExtraCounterTrackUuids(int index) {
      return extraCounterTrackUuids_.getLong(index);
    }

    public static final int EXTRA_COUNTER_VALUES_FIELD_NUMBER = 12;
    @SuppressWarnings("serial")
    private com.google.protobuf.Internal.LongList extraCounterValues_;
    /**
     * <code>repeated int64 extra_counter_values = 12;</code>
     * @return A list containing the extraCounterValues.
     */
    @java.lang.Override
    public java.util.List<java.lang.Long>
        getExtraCounterValuesList() {
      return extraCounterValues_;
    }
    /**
     * <code>repeated int64 extra_counter_values = 12;</code>
     * @return The count of extraCounterValues.
     */
    public int getExtraCounterValuesCount() {
      return extraCounterValues_.size();
    }
    /**
     * <code>repeated int64 extra_counter_values = 12;</code>
     * @param index The index of the element to return.
     * @return The extraCounterValues at the given index.
     */
    public long getExtraCounterValues(int index) {
      return extraCounterValues_.getLong(index);
    }

    public static final int EXTRA_DOUBLE_COUNTER_TRACK_UUIDS_FIELD_NUMBER = 45;
    @SuppressWarnings("serial")
    private com.google.protobuf.Internal.LongList extraDoubleCounterTrackUuids_;
    /**
     * <pre>
     * Counter snapshots using floating point instead of integer values.
     * </pre>
     *
     * <code>repeated uint64 extra_double_counter_track_uuids = 45;</code>
     * @return A list containing the extraDoubleCounterTrackUuids.
     */
    @java.lang.Override
    public java.util.List<java.lang.Long>
        getExtraDoubleCounterTrackUuidsList() {
      return extraDoubleCounterTrackUuids_;
    }
    /**
     * <pre>
     * Counter snapshots using floating point instead of integer values.
     * </pre>
     *
     * <code>repeated uint64 extra_double_counter_track_uuids = 45;</code>
     * @return The count of extraDoubleCounterTrackUuids.
     */
    public int getExtraDoubleCounterTrackUuidsCount() {
      return extraDoubleCounterTrackUuids_.size();
    }
    /**
     * <pre>
     * Counter snapshots using floating point instead of integer values.
     * </pre>
     *
     * <code>repeated uint64 extra_double_counter_track_uuids = 45;</code>
     * @param index The index of the element to return.
     * @return The extraDoubleCounterTrackUuids at the given index.
     */
    public long getExtraDoubleCounterTrackUuids(int index) {
      return extraDoubleCounterTrackUuids_.getLong(index);
    }

    public static final int EXTRA_DOUBLE_COUNTER_VALUES_FIELD_NUMBER = 46;
    @SuppressWarnings("serial")
    private com.google.protobuf.Internal.DoubleList extraDoubleCounterValues_;
    /**
     * <code>repeated double extra_double_counter_values = 46;</code>
     * @return A list containing the extraDoubleCounterValues.
     */
    @java.lang.Override
    public java.util.List<java.lang.Double>
        getExtraDoubleCounterValuesList() {
      return extraDoubleCounterValues_;
    }
    /**
     * <code>repeated double extra_double_counter_values = 46;</code>
     * @return The count of extraDoubleCounterValues.
     */
    public int getExtraDoubleCounterValuesCount() {
      return extraDoubleCounterValues_.size();
    }
    /**
     * <code>repeated double extra_double_counter_values = 46;</code>
     * @param index The index of the element to return.
     * @return The extraDoubleCounterValues at the given index.
     */
    public double getExtraDoubleCounterValues(int index) {
      return extraDoubleCounterValues_.getDouble(index);
    }

    public static final int FLOW_IDS_OLD_FIELD_NUMBER = 36;
    @SuppressWarnings("serial")
    private com.google.protobuf.Internal.LongList flowIdsOld_;
    /**
     * <pre>
     * IDs of flows originating, passing through, or ending at this event.
     * Flow IDs are global within a trace.
     * A flow connects a sequence of TrackEvents within or across tracks, e.g.
     * an input event may be handled on one thread but cause another event on
     * a different thread - a flow between the two events can associate them.
     * The direction of the flows between events is inferred from the events'
     * timestamps. The earliest event with the same flow ID becomes the source
     * of the flow. Any events thereafter are intermediate steps of the flow,
     * until the flow terminates at the last event with the flow ID.
     * Flows can also be explicitly terminated (see |terminating_flow_ids|), so
     * that the same ID can later be reused for another flow.
     * DEPRECATED. Only kept for backwards compatibility. Use |flow_ids|.
     * </pre>
     *
     * <code>repeated uint64 flow_ids_old = 36 [deprecated = true];</code>
     * @deprecated perfetto.protos.TrackEvent.flow_ids_old is deprecated.
     *     See protos/perfetto/trace/track_event/track_event.proto;l=217
     * @return A list containing the flowIdsOld.
     */
    @java.lang.Override
    @java.lang.Deprecated public java.util.List<java.lang.Long>
        getFlowIdsOldList() {
      return flowIdsOld_;
    }
    /**
     * <pre>
     * IDs of flows originating, passing through, or ending at this event.
     * Flow IDs are global within a trace.
     * A flow connects a sequence of TrackEvents within or across tracks, e.g.
     * an input event may be handled on one thread but cause another event on
     * a different thread - a flow between the two events can associate them.
     * The direction of the flows between events is inferred from the events'
     * timestamps. The earliest event with the same flow ID becomes the source
     * of the flow. Any events thereafter are intermediate steps of the flow,
     * until the flow terminates at the last event with the flow ID.
     * Flows can also be explicitly terminated (see |terminating_flow_ids|), so
     * that the same ID can later be reused for another flow.
     * DEPRECATED. Only kept for backwards compatibility. Use |flow_ids|.
     * </pre>
     *
     * <code>repeated uint64 flow_ids_old = 36 [deprecated = true];</code>
     * @deprecated perfetto.protos.TrackEvent.flow_ids_old is deprecated.
     *     See protos/perfetto/trace/track_event/track_event.proto;l=217
     * @return The count of flowIdsOld.
     */
    @java.lang.Deprecated public int getFlowIdsOldCount() {
      return flowIdsOld_.size();
    }
    /**
     * <pre>
     * IDs of flows originating, passing through, or ending at this event.
     * Flow IDs are global within a trace.
     * A flow connects a sequence of TrackEvents within or across tracks, e.g.
     * an input event may be handled on one thread but cause another event on
     * a different thread - a flow between the two events can associate them.
     * The direction of the flows between events is inferred from the events'
     * timestamps. The earliest event with the same flow ID becomes the source
     * of the flow. Any events thereafter are intermediate steps of the flow,
     * until the flow terminates at the last event with the flow ID.
     * Flows can also be explicitly terminated (see |terminating_flow_ids|), so
     * that the same ID can later be reused for another flow.
     * DEPRECATED. Only kept for backwards compatibility. Use |flow_ids|.
     * </pre>
     *
     * <code>repeated uint64 flow_ids_old = 36 [deprecated = true];</code>
     * @deprecated perfetto.protos.TrackEvent.flow_ids_old is deprecated.
     *     See protos/perfetto/trace/track_event/track_event.proto;l=217
     * @param index The index of the element to return.
     * @return The flowIdsOld at the given index.
     */
    @java.lang.Deprecated public long getFlowIdsOld(int index) {
      return flowIdsOld_.getLong(index);
    }

    public static final int FLOW_IDS_FIELD_NUMBER = 47;
    @SuppressWarnings("serial")
    private com.google.protobuf.Internal.LongList flowIds_;
    /**
     * <pre>
     * TODO(b/204341740): replace "flow_ids_old" with "flow_ids" to reduce memory
     * consumption.
     * </pre>
     *
     * <code>repeated fixed64 flow_ids = 47;</code>
     * @return A list containing the flowIds.
     */
    @java.lang.Override
    public java.util.List<java.lang.Long>
        getFlowIdsList() {
      return flowIds_;
    }
    /**
     * <pre>
     * TODO(b/204341740): replace "flow_ids_old" with "flow_ids" to reduce memory
     * consumption.
     * </pre>
     *
     * <code>repeated fixed64 flow_ids = 47;</code>
     * @return The count of flowIds.
     */
    public int getFlowIdsCount() {
      return flowIds_.size();
    }
    /**
     * <pre>
     * TODO(b/204341740): replace "flow_ids_old" with "flow_ids" to reduce memory
     * consumption.
     * </pre>
     *
     * <code>repeated fixed64 flow_ids = 47;</code>
     * @param index The index of the element to return.
     * @return The flowIds at the given index.
     */
    public long getFlowIds(int index) {
      return flowIds_.getLong(index);
    }

    public static final int TERMINATING_FLOW_IDS_OLD_FIELD_NUMBER = 42;
    @SuppressWarnings("serial")
    private com.google.protobuf.Internal.LongList terminatingFlowIdsOld_;
    /**
     * <pre>
     * List of flow ids which should terminate on this event, otherwise same as
     * |flow_ids|.
     * Any one flow ID should be either listed as part of |flow_ids| OR
     * |terminating_flow_ids|, not both.
     * DEPRECATED. Only kept for backwards compatibility.  Use
     * |terminating_flow_ids|.
     * </pre>
     *
     * <code>repeated uint64 terminating_flow_ids_old = 42 [deprecated = true];</code>
     * @deprecated perfetto.protos.TrackEvent.terminating_flow_ids_old is deprecated.
     *     See protos/perfetto/trace/track_event/track_event.proto;l=228
     * @return A list containing the terminatingFlowIdsOld.
     */
    @java.lang.Override
    @java.lang.Deprecated public java.util.List<java.lang.Long>
        getTerminatingFlowIdsOldList() {
      return terminatingFlowIdsOld_;
    }
    /**
     * <pre>
     * List of flow ids which should terminate on this event, otherwise same as
     * |flow_ids|.
     * Any one flow ID should be either listed as part of |flow_ids| OR
     * |terminating_flow_ids|, not both.
     * DEPRECATED. Only kept for backwards compatibility.  Use
     * |terminating_flow_ids|.
     * </pre>
     *
     * <code>repeated uint64 terminating_flow_ids_old = 42 [deprecated = true];</code>
     * @deprecated perfetto.protos.TrackEvent.terminating_flow_ids_old is deprecated.
     *     See protos/perfetto/trace/track_event/track_event.proto;l=228
     * @return The count of terminatingFlowIdsOld.
     */
    @java.lang.Deprecated public int getTerminatingFlowIdsOldCount() {
      return terminatingFlowIdsOld_.size();
    }
    /**
     * <pre>
     * List of flow ids which should terminate on this event, otherwise same as
     * |flow_ids|.
     * Any one flow ID should be either listed as part of |flow_ids| OR
     * |terminating_flow_ids|, not both.
     * DEPRECATED. Only kept for backwards compatibility.  Use
     * |terminating_flow_ids|.
     * </pre>
     *
     * <code>repeated uint64 terminating_flow_ids_old = 42 [deprecated = true];</code>
     * @deprecated perfetto.protos.TrackEvent.terminating_flow_ids_old is deprecated.
     *     See protos/perfetto/trace/track_event/track_event.proto;l=228
     * @param index The index of the element to return.
     * @return The terminatingFlowIdsOld at the given index.
     */
    @java.lang.Deprecated public long getTerminatingFlowIdsOld(int index) {
      return terminatingFlowIdsOld_.getLong(index);
    }

    public static final int TERMINATING_FLOW_IDS_FIELD_NUMBER = 48;
    @SuppressWarnings("serial")
    private com.google.protobuf.Internal.LongList terminatingFlowIds_;
    /**
     * <pre>
     * TODO(b/204341740): replace "terminating_flow_ids_old" with
     * "terminating_flow_ids" to reduce memory consumption.
     * </pre>
     *
     * <code>repeated fixed64 terminating_flow_ids = 48;</code>
     * @return A list containing the terminatingFlowIds.
     */
    @java.lang.Override
    public java.util.List<java.lang.Long>
        getTerminatingFlowIdsList() {
      return terminatingFlowIds_;
    }
    /**
     * <pre>
     * TODO(b/204341740): replace "terminating_flow_ids_old" with
     * "terminating_flow_ids" to reduce memory consumption.
     * </pre>
     *
     * <code>repeated fixed64 terminating_flow_ids = 48;</code>
     * @return The count of terminatingFlowIds.
     */
    public int getTerminatingFlowIdsCount() {
      return terminatingFlowIds_.size();
    }
    /**
     * <pre>
     * TODO(b/204341740): replace "terminating_flow_ids_old" with
     * "terminating_flow_ids" to reduce memory consumption.
     * </pre>
     *
     * <code>repeated fixed64 terminating_flow_ids = 48;</code>
     * @param index The index of the element to return.
     * @return The terminatingFlowIds at the given index.
     */
    public long getTerminatingFlowIds(int index) {
      return terminatingFlowIds_.getLong(index);
    }

    public static final int DEBUG_ANNOTATIONS_FIELD_NUMBER = 4;
    @SuppressWarnings("serial")
    private java.util.List<perfetto.protos.DebugAnnotationOuterClass.DebugAnnotation> debugAnnotations_;
    /**
     * <pre>
     * Unstable key/value annotations shown in the trace viewer but not intended
     * for metrics use.
     * </pre>
     *
     * <code>repeated .perfetto.protos.DebugAnnotation debug_annotations = 4;</code>
     */
    @java.lang.Override
    public java.util.List<perfetto.protos.DebugAnnotationOuterClass.DebugAnnotation> getDebugAnnotationsList() {
      return debugAnnotations_;
    }
    /**
     * <pre>
     * Unstable key/value annotations shown in the trace viewer but not intended
     * for metrics use.
     * </pre>
     *
     * <code>repeated .perfetto.protos.DebugAnnotation debug_annotations = 4;</code>
     */
    @java.lang.Override
    public java.util.List<? extends perfetto.protos.DebugAnnotationOuterClass.DebugAnnotationOrBuilder> 
        getDebugAnnotationsOrBuilderList() {
      return debugAnnotations_;
    }
    /**
     * <pre>
     * Unstable key/value annotations shown in the trace viewer but not intended
     * for metrics use.
     * </pre>
     *
     * <code>repeated .perfetto.protos.DebugAnnotation debug_annotations = 4;</code>
     */
    @java.lang.Override
    public int getDebugAnnotationsCount() {
      return debugAnnotations_.size();
    }
    /**
     * <pre>
     * Unstable key/value annotations shown in the trace viewer but not intended
     * for metrics use.
     * </pre>
     *
     * <code>repeated .perfetto.protos.DebugAnnotation debug_annotations = 4;</code>
     */
    @java.lang.Override
    public perfetto.protos.DebugAnnotationOuterClass.DebugAnnotation getDebugAnnotations(int index) {
      return debugAnnotations_.get(index);
    }
    /**
     * <pre>
     * Unstable key/value annotations shown in the trace viewer but not intended
     * for metrics use.
     * </pre>
     *
     * <code>repeated .perfetto.protos.DebugAnnotation debug_annotations = 4;</code>
     */
    @java.lang.Override
    public perfetto.protos.DebugAnnotationOuterClass.DebugAnnotationOrBuilder getDebugAnnotationsOrBuilder(
        int index) {
      return debugAnnotations_.get(index);
    }

    public static final int TASK_EXECUTION_FIELD_NUMBER = 5;
    private perfetto.protos.TaskExecutionOuterClass.TaskExecution taskExecution_;
    /**
     * <pre>
     * Typed event arguments:
     * </pre>
     *
     * <code>optional .perfetto.protos.TaskExecution task_execution = 5;</code>
     * @return Whether the taskExecution field is set.
     */
    @java.lang.Override
    public boolean hasTaskExecution() {
      return ((bitField0_ & 0x00000040) != 0);
    }
    /**
     * <pre>
     * Typed event arguments:
     * </pre>
     *
     * <code>optional .perfetto.protos.TaskExecution task_execution = 5;</code>
     * @return The taskExecution.
     */
    @java.lang.Override
    public perfetto.protos.TaskExecutionOuterClass.TaskExecution getTaskExecution() {
      return taskExecution_ == null ? perfetto.protos.TaskExecutionOuterClass.TaskExecution.getDefaultInstance() : taskExecution_;
    }
    /**
     * <pre>
     * Typed event arguments:
     * </pre>
     *
     * <code>optional .perfetto.protos.TaskExecution task_execution = 5;</code>
     */
    @java.lang.Override
    public perfetto.protos.TaskExecutionOuterClass.TaskExecutionOrBuilder getTaskExecutionOrBuilder() {
      return taskExecution_ == null ? perfetto.protos.TaskExecutionOuterClass.TaskExecution.getDefaultInstance() : taskExecution_;
    }

    public static final int LOG_MESSAGE_FIELD_NUMBER = 21;
    private perfetto.protos.LogMessageOuterClass.LogMessage logMessage_;
    /**
     * <code>optional .perfetto.protos.LogMessage log_message = 21;</code>
     * @return Whether the logMessage field is set.
     */
    @java.lang.Override
    public boolean hasLogMessage() {
      return ((bitField0_ & 0x00000080) != 0);
    }
    /**
     * <code>optional .perfetto.protos.LogMessage log_message = 21;</code>
     * @return The logMessage.
     */
    @java.lang.Override
    public perfetto.protos.LogMessageOuterClass.LogMessage getLogMessage() {
      return logMessage_ == null ? perfetto.protos.LogMessageOuterClass.LogMessage.getDefaultInstance() : logMessage_;
    }
    /**
     * <code>optional .perfetto.protos.LogMessage log_message = 21;</code>
     */
    @java.lang.Override
    public perfetto.protos.LogMessageOuterClass.LogMessageOrBuilder getLogMessageOrBuilder() {
      return logMessage_ == null ? perfetto.protos.LogMessageOuterClass.LogMessage.getDefaultInstance() : logMessage_;
    }

    public static final int CC_SCHEDULER_STATE_FIELD_NUMBER = 24;
    private perfetto.protos.ChromeCompositorSchedulerStateOuterClass.ChromeCompositorSchedulerState ccSchedulerState_;
    /**
     * <code>optional .perfetto.protos.ChromeCompositorSchedulerState cc_scheduler_state = 24;</code>
     * @return Whether the ccSchedulerState field is set.
     */
    @java.lang.Override
    public boolean hasCcSchedulerState() {
      return ((bitField0_ & 0x00000100) != 0);
    }
    /**
     * <code>optional .perfetto.protos.ChromeCompositorSchedulerState cc_scheduler_state = 24;</code>
     * @return The ccSchedulerState.
     */
    @java.lang.Override
    public perfetto.protos.ChromeCompositorSchedulerStateOuterClass.ChromeCompositorSchedulerState getCcSchedulerState() {
      return ccSchedulerState_ == null ? perfetto.protos.ChromeCompositorSchedulerStateOuterClass.ChromeCompositorSchedulerState.getDefaultInstance() : ccSchedulerState_;
    }
    /**
     * <code>optional .perfetto.protos.ChromeCompositorSchedulerState cc_scheduler_state = 24;</code>
     */
    @java.lang.Override
    public perfetto.protos.ChromeCompositorSchedulerStateOuterClass.ChromeCompositorSchedulerStateOrBuilder getCcSchedulerStateOrBuilder() {
      return ccSchedulerState_ == null ? perfetto.protos.ChromeCompositorSchedulerStateOuterClass.ChromeCompositorSchedulerState.getDefaultInstance() : ccSchedulerState_;
    }

    public static final int CHROME_USER_EVENT_FIELD_NUMBER = 25;
    private perfetto.protos.ChromeUserEventOuterClass.ChromeUserEvent chromeUserEvent_;
    /**
     * <code>optional .perfetto.protos.ChromeUserEvent chrome_user_event = 25;</code>
     * @return Whether the chromeUserEvent field is set.
     */
    @java.lang.Override
    public boolean hasChromeUserEvent() {
      return ((bitField0_ & 0x00000200) != 0);
    }
    /**
     * <code>optional .perfetto.protos.ChromeUserEvent chrome_user_event = 25;</code>
     * @return The chromeUserEvent.
     */
    @java.lang.Override
    public perfetto.protos.ChromeUserEventOuterClass.ChromeUserEvent getChromeUserEvent() {
      return chromeUserEvent_ == null ? perfetto.protos.ChromeUserEventOuterClass.ChromeUserEvent.getDefaultInstance() : chromeUserEvent_;
    }
    /**
     * <code>optional .perfetto.protos.ChromeUserEvent chrome_user_event = 25;</code>
     */
    @java.lang.Override
    public perfetto.protos.ChromeUserEventOuterClass.ChromeUserEventOrBuilder getChromeUserEventOrBuilder() {
      return chromeUserEvent_ == null ? perfetto.protos.ChromeUserEventOuterClass.ChromeUserEvent.getDefaultInstance() : chromeUserEvent_;
    }

    public static final int CHROME_KEYED_SERVICE_FIELD_NUMBER = 26;
    private perfetto.protos.ChromeKeyedServiceOuterClass.ChromeKeyedService chromeKeyedService_;
    /**
     * <code>optional .perfetto.protos.ChromeKeyedService chrome_keyed_service = 26;</code>
     * @return Whether the chromeKeyedService field is set.
     */
    @java.lang.Override
    public boolean hasChromeKeyedService() {
      return ((bitField0_ & 0x00000400) != 0);
    }
    /**
     * <code>optional .perfetto.protos.ChromeKeyedService chrome_keyed_service = 26;</code>
     * @return The chromeKeyedService.
     */
    @java.lang.Override
    public perfetto.protos.ChromeKeyedServiceOuterClass.ChromeKeyedService getChromeKeyedService() {
      return chromeKeyedService_ == null ? perfetto.protos.ChromeKeyedServiceOuterClass.ChromeKeyedService.getDefaultInstance() : chromeKeyedService_;
    }
    /**
     * <code>optional .perfetto.protos.ChromeKeyedService chrome_keyed_service = 26;</code>
     */
    @java.lang.Override
    public perfetto.protos.ChromeKeyedServiceOuterClass.ChromeKeyedServiceOrBuilder getChromeKeyedServiceOrBuilder() {
      return chromeKeyedService_ == null ? perfetto.protos.ChromeKeyedServiceOuterClass.ChromeKeyedService.getDefaultInstance() : chromeKeyedService_;
    }

    public static final int CHROME_LEGACY_IPC_FIELD_NUMBER = 27;
    private perfetto.protos.ChromeLegacyIpcOuterClass.ChromeLegacyIpc chromeLegacyIpc_;
    /**
     * <code>optional .perfetto.protos.ChromeLegacyIpc chrome_legacy_ipc = 27;</code>
     * @return Whether the chromeLegacyIpc field is set.
     */
    @java.lang.Override
    public boolean hasChromeLegacyIpc() {
      return ((bitField0_ & 0x00000800) != 0);
    }
    /**
     * <code>optional .perfetto.protos.ChromeLegacyIpc chrome_legacy_ipc = 27;</code>
     * @return The chromeLegacyIpc.
     */
    @java.lang.Override
    public perfetto.protos.ChromeLegacyIpcOuterClass.ChromeLegacyIpc getChromeLegacyIpc() {
      return chromeLegacyIpc_ == null ? perfetto.protos.ChromeLegacyIpcOuterClass.ChromeLegacyIpc.getDefaultInstance() : chromeLegacyIpc_;
    }
    /**
     * <code>optional .perfetto.protos.ChromeLegacyIpc chrome_legacy_ipc = 27;</code>
     */
    @java.lang.Override
    public perfetto.protos.ChromeLegacyIpcOuterClass.ChromeLegacyIpcOrBuilder getChromeLegacyIpcOrBuilder() {
      return chromeLegacyIpc_ == null ? perfetto.protos.ChromeLegacyIpcOuterClass.ChromeLegacyIpc.getDefaultInstance() : chromeLegacyIpc_;
    }

    public static final int CHROME_HISTOGRAM_SAMPLE_FIELD_NUMBER = 28;
    private perfetto.protos.ChromeHistogramSampleOuterClass.ChromeHistogramSample chromeHistogramSample_;
    /**
     * <code>optional .perfetto.protos.ChromeHistogramSample chrome_histogram_sample = 28;</code>
     * @return Whether the chromeHistogramSample field is set.
     */
    @java.lang.Override
    public boolean hasChromeHistogramSample() {
      return ((bitField0_ & 0x00001000) != 0);
    }
    /**
     * <code>optional .perfetto.protos.ChromeHistogramSample chrome_histogram_sample = 28;</code>
     * @return The chromeHistogramSample.
     */
    @java.lang.Override
    public perfetto.protos.ChromeHistogramSampleOuterClass.ChromeHistogramSample getChromeHistogramSample() {
      return chromeHistogramSample_ == null ? perfetto.protos.ChromeHistogramSampleOuterClass.ChromeHistogramSample.getDefaultInstance() : chromeHistogramSample_;
    }
    /**
     * <code>optional .perfetto.protos.ChromeHistogramSample chrome_histogram_sample = 28;</code>
     */
    @java.lang.Override
    public perfetto.protos.ChromeHistogramSampleOuterClass.ChromeHistogramSampleOrBuilder getChromeHistogramSampleOrBuilder() {
      return chromeHistogramSample_ == null ? perfetto.protos.ChromeHistogramSampleOuterClass.ChromeHistogramSample.getDefaultInstance() : chromeHistogramSample_;
    }

    public static final int CHROME_LATENCY_INFO_FIELD_NUMBER = 29;
    private perfetto.protos.ChromeLatencyInfoOuterClass.ChromeLatencyInfo chromeLatencyInfo_;
    /**
     * <code>optional .perfetto.protos.ChromeLatencyInfo chrome_latency_info = 29;</code>
     * @return Whether the chromeLatencyInfo field is set.
     */
    @java.lang.Override
    public boolean hasChromeLatencyInfo() {
      return ((bitField0_ & 0x00002000) != 0);
    }
    /**
     * <code>optional .perfetto.protos.ChromeLatencyInfo chrome_latency_info = 29;</code>
     * @return The chromeLatencyInfo.
     */
    @java.lang.Override
    public perfetto.protos.ChromeLatencyInfoOuterClass.ChromeLatencyInfo getChromeLatencyInfo() {
      return chromeLatencyInfo_ == null ? perfetto.protos.ChromeLatencyInfoOuterClass.ChromeLatencyInfo.getDefaultInstance() : chromeLatencyInfo_;
    }
    /**
     * <code>optional .perfetto.protos.ChromeLatencyInfo chrome_latency_info = 29;</code>
     */
    @java.lang.Override
    public perfetto.protos.ChromeLatencyInfoOuterClass.ChromeLatencyInfoOrBuilder getChromeLatencyInfoOrBuilder() {
      return chromeLatencyInfo_ == null ? perfetto.protos.ChromeLatencyInfoOuterClass.ChromeLatencyInfo.getDefaultInstance() : chromeLatencyInfo_;
    }

    public static final int CHROME_FRAME_REPORTER_FIELD_NUMBER = 32;
    private perfetto.protos.ChromeFrameReporterOuterClass.ChromeFrameReporter chromeFrameReporter_;
    /**
     * <code>optional .perfetto.protos.ChromeFrameReporter chrome_frame_reporter = 32;</code>
     * @return Whether the chromeFrameReporter field is set.
     */
    @java.lang.Override
    public boolean hasChromeFrameReporter() {
      return ((bitField0_ & 0x00004000) != 0);
    }
    /**
     * <code>optional .perfetto.protos.ChromeFrameReporter chrome_frame_reporter = 32;</code>
     * @return The chromeFrameReporter.
     */
    @java.lang.Override
    public perfetto.protos.ChromeFrameReporterOuterClass.ChromeFrameReporter getChromeFrameReporter() {
      return chromeFrameReporter_ == null ? perfetto.protos.ChromeFrameReporterOuterClass.ChromeFrameReporter.getDefaultInstance() : chromeFrameReporter_;
    }
    /**
     * <code>optional .perfetto.protos.ChromeFrameReporter chrome_frame_reporter = 32;</code>
     */
    @java.lang.Override
    public perfetto.protos.ChromeFrameReporterOuterClass.ChromeFrameReporterOrBuilder getChromeFrameReporterOrBuilder() {
      return chromeFrameReporter_ == null ? perfetto.protos.ChromeFrameReporterOuterClass.ChromeFrameReporter.getDefaultInstance() : chromeFrameReporter_;
    }

    public static final int CHROME_APPLICATION_STATE_INFO_FIELD_NUMBER = 39;
    private perfetto.protos.ChromeApplicationStateInfoOuterClass.ChromeApplicationStateInfo chromeApplicationStateInfo_;
    /**
     * <code>optional .perfetto.protos.ChromeApplicationStateInfo chrome_application_state_info = 39;</code>
     * @return Whether the chromeApplicationStateInfo field is set.
     */
    @java.lang.Override
    public boolean hasChromeApplicationStateInfo() {
      return ((bitField0_ & 0x00008000) != 0);
    }
    /**
     * <code>optional .perfetto.protos.ChromeApplicationStateInfo chrome_application_state_info = 39;</code>
     * @return The chromeApplicationStateInfo.
     */
    @java.lang.Override
    public perfetto.protos.ChromeApplicationStateInfoOuterClass.ChromeApplicationStateInfo getChromeApplicationStateInfo() {
      return chromeApplicationStateInfo_ == null ? perfetto.protos.ChromeApplicationStateInfoOuterClass.ChromeApplicationStateInfo.getDefaultInstance() : chromeApplicationStateInfo_;
    }
    /**
     * <code>optional .perfetto.protos.ChromeApplicationStateInfo chrome_application_state_info = 39;</code>
     */
    @java.lang.Override
    public perfetto.protos.ChromeApplicationStateInfoOuterClass.ChromeApplicationStateInfoOrBuilder getChromeApplicationStateInfoOrBuilder() {
      return chromeApplicationStateInfo_ == null ? perfetto.protos.ChromeApplicationStateInfoOuterClass.ChromeApplicationStateInfo.getDefaultInstance() : chromeApplicationStateInfo_;
    }

    public static final int CHROME_RENDERER_SCHEDULER_STATE_FIELD_NUMBER = 40;
    private perfetto.protos.ChromeRendererSchedulerStateOuterClass.ChromeRendererSchedulerState chromeRendererSchedulerState_;
    /**
     * <code>optional .perfetto.protos.ChromeRendererSchedulerState chrome_renderer_scheduler_state = 40;</code>
     * @return Whether the chromeRendererSchedulerState field is set.
     */
    @java.lang.Override
    public boolean hasChromeRendererSchedulerState() {
      return ((bitField0_ & 0x00010000) != 0);
    }
    /**
     * <code>optional .perfetto.protos.ChromeRendererSchedulerState chrome_renderer_scheduler_state = 40;</code>
     * @return The chromeRendererSchedulerState.
     */
    @java.lang.Override
    public perfetto.protos.ChromeRendererSchedulerStateOuterClass.ChromeRendererSchedulerState getChromeRendererSchedulerState() {
      return chromeRendererSchedulerState_ == null ? perfetto.protos.ChromeRendererSchedulerStateOuterClass.ChromeRendererSchedulerState.getDefaultInstance() : chromeRendererSchedulerState_;
    }
    /**
     * <code>optional .perfetto.protos.ChromeRendererSchedulerState chrome_renderer_scheduler_state = 40;</code>
     */
    @java.lang.Override
    public perfetto.protos.ChromeRendererSchedulerStateOuterClass.ChromeRendererSchedulerStateOrBuilder getChromeRendererSchedulerStateOrBuilder() {
      return chromeRendererSchedulerState_ == null ? perfetto.protos.ChromeRendererSchedulerStateOuterClass.ChromeRendererSchedulerState.getDefaultInstance() : chromeRendererSchedulerState_;
    }

    public static final int CHROME_WINDOW_HANDLE_EVENT_INFO_FIELD_NUMBER = 41;
    private perfetto.protos.ChromeWindowHandleEventInfoOuterClass.ChromeWindowHandleEventInfo chromeWindowHandleEventInfo_;
    /**
     * <code>optional .perfetto.protos.ChromeWindowHandleEventInfo chrome_window_handle_event_info = 41;</code>
     * @return Whether the chromeWindowHandleEventInfo field is set.
     */
    @java.lang.Override
    public boolean hasChromeWindowHandleEventInfo() {
      return ((bitField0_ & 0x00020000) != 0);
    }
    /**
     * <code>optional .perfetto.protos.ChromeWindowHandleEventInfo chrome_window_handle_event_info = 41;</code>
     * @return The chromeWindowHandleEventInfo.
     */
    @java.lang.Override
    public perfetto.protos.ChromeWindowHandleEventInfoOuterClass.ChromeWindowHandleEventInfo getChromeWindowHandleEventInfo() {
      return chromeWindowHandleEventInfo_ == null ? perfetto.protos.ChromeWindowHandleEventInfoOuterClass.ChromeWindowHandleEventInfo.getDefaultInstance() : chromeWindowHandleEventInfo_;
    }
    /**
     * <code>optional .perfetto.protos.ChromeWindowHandleEventInfo chrome_window_handle_event_info = 41;</code>
     */
    @java.lang.Override
    public perfetto.protos.ChromeWindowHandleEventInfoOuterClass.ChromeWindowHandleEventInfoOrBuilder getChromeWindowHandleEventInfoOrBuilder() {
      return chromeWindowHandleEventInfo_ == null ? perfetto.protos.ChromeWindowHandleEventInfoOuterClass.ChromeWindowHandleEventInfo.getDefaultInstance() : chromeWindowHandleEventInfo_;
    }

    public static final int CHROME_CONTENT_SETTINGS_EVENT_INFO_FIELD_NUMBER = 43;
    private perfetto.protos.ChromeContentSettingsEventInfoOuterClass.ChromeContentSettingsEventInfo chromeContentSettingsEventInfo_;
    /**
     * <code>optional .perfetto.protos.ChromeContentSettingsEventInfo chrome_content_settings_event_info = 43;</code>
     * @return Whether the chromeContentSettingsEventInfo field is set.
     */
    @java.lang.Override
    public boolean hasChromeContentSettingsEventInfo() {
      return ((bitField0_ & 0x00040000) != 0);
    }
    /**
     * <code>optional .perfetto.protos.ChromeContentSettingsEventInfo chrome_content_settings_event_info = 43;</code>
     * @return The chromeContentSettingsEventInfo.
     */
    @java.lang.Override
    public perfetto.protos.ChromeContentSettingsEventInfoOuterClass.ChromeContentSettingsEventInfo getChromeContentSettingsEventInfo() {
      return chromeContentSettingsEventInfo_ == null ? perfetto.protos.ChromeContentSettingsEventInfoOuterClass.ChromeContentSettingsEventInfo.getDefaultInstance() : chromeContentSettingsEventInfo_;
    }
    /**
     * <code>optional .perfetto.protos.ChromeContentSettingsEventInfo chrome_content_settings_event_info = 43;</code>
     */
    @java.lang.Override
    public perfetto.protos.ChromeContentSettingsEventInfoOuterClass.ChromeContentSettingsEventInfoOrBuilder getChromeContentSettingsEventInfoOrBuilder() {
      return chromeContentSettingsEventInfo_ == null ? perfetto.protos.ChromeContentSettingsEventInfoOuterClass.ChromeContentSettingsEventInfo.getDefaultInstance() : chromeContentSettingsEventInfo_;
    }

    public static final int CHROME_ACTIVE_PROCESSES_FIELD_NUMBER = 49;
    private perfetto.protos.ChromeActiveProcessesOuterClass.ChromeActiveProcesses chromeActiveProcesses_;
    /**
     * <code>optional .perfetto.protos.ChromeActiveProcesses chrome_active_processes = 49;</code>
     * @return Whether the chromeActiveProcesses field is set.
     */
    @java.lang.Override
    public boolean hasChromeActiveProcesses() {
      return ((bitField0_ & 0x00080000) != 0);
    }
    /**
     * <code>optional .perfetto.protos.ChromeActiveProcesses chrome_active_processes = 49;</code>
     * @return The chromeActiveProcesses.
     */
    @java.lang.Override
    public perfetto.protos.ChromeActiveProcessesOuterClass.ChromeActiveProcesses getChromeActiveProcesses() {
      return chromeActiveProcesses_ == null ? perfetto.protos.ChromeActiveProcessesOuterClass.ChromeActiveProcesses.getDefaultInstance() : chromeActiveProcesses_;
    }
    /**
     * <code>optional .perfetto.protos.ChromeActiveProcesses chrome_active_processes = 49;</code>
     */
    @java.lang.Override
    public perfetto.protos.ChromeActiveProcessesOuterClass.ChromeActiveProcessesOrBuilder getChromeActiveProcessesOrBuilder() {
      return chromeActiveProcesses_ == null ? perfetto.protos.ChromeActiveProcessesOuterClass.ChromeActiveProcesses.getDefaultInstance() : chromeActiveProcesses_;
    }

    public static final int SOURCE_LOCATION_FIELD_NUMBER = 33;
    /**
     * <pre>
     * Non-interned field.
     * </pre>
     *
     * <code>.perfetto.protos.SourceLocation source_location = 33;</code>
     * @return Whether the sourceLocation field is set.
     */
    @java.lang.Override
    public boolean hasSourceLocation() {
      return sourceLocationFieldCase_ == 33;
    }
    /**
     * <pre>
     * Non-interned field.
     * </pre>
     *
     * <code>.perfetto.protos.SourceLocation source_location = 33;</code>
     * @return The sourceLocation.
     */
    @java.lang.Override
    public perfetto.protos.SourceLocationOuterClass.SourceLocation getSourceLocation() {
      if (sourceLocationFieldCase_ == 33) {
         return (perfetto.protos.SourceLocationOuterClass.SourceLocation) sourceLocationField_;
      }
      return perfetto.protos.SourceLocationOuterClass.SourceLocation.getDefaultInstance();
    }
    /**
     * <pre>
     * Non-interned field.
     * </pre>
     *
     * <code>.perfetto.protos.SourceLocation source_location = 33;</code>
     */
    @java.lang.Override
    public perfetto.protos.SourceLocationOuterClass.SourceLocationOrBuilder getSourceLocationOrBuilder() {
      if (sourceLocationFieldCase_ == 33) {
         return (perfetto.protos.SourceLocationOuterClass.SourceLocation) sourceLocationField_;
      }
      return perfetto.protos.SourceLocationOuterClass.SourceLocation.getDefaultInstance();
    }

    public static final int SOURCE_LOCATION_IID_FIELD_NUMBER = 34;
    /**
     * <pre>
     * Interned field.
     * </pre>
     *
     * <code>uint64 source_location_iid = 34;</code>
     * @return Whether the sourceLocationIid field is set.
     */
    @java.lang.Override
    public boolean hasSourceLocationIid() {
      return sourceLocationFieldCase_ == 34;
    }
    /**
     * <pre>
     * Interned field.
     * </pre>
     *
     * <code>uint64 source_location_iid = 34;</code>
     * @return The sourceLocationIid.
     */
    @java.lang.Override
    public long getSourceLocationIid() {
      if (sourceLocationFieldCase_ == 34) {
        return (java.lang.Long) sourceLocationField_;
      }
      return 0L;
    }

    public static final int CHROME_MESSAGE_PUMP_FIELD_NUMBER = 35;
    private perfetto.protos.ChromeMessagePumpOuterClass.ChromeMessagePump chromeMessagePump_;
    /**
     * <code>optional .perfetto.protos.ChromeMessagePump chrome_message_pump = 35;</code>
     * @return Whether the chromeMessagePump field is set.
     */
    @java.lang.Override
    public boolean hasChromeMessagePump() {
      return ((bitField0_ & 0x00400000) != 0);
    }
    /**
     * <code>optional .perfetto.protos.ChromeMessagePump chrome_message_pump = 35;</code>
     * @return The chromeMessagePump.
     */
    @java.lang.Override
    public perfetto.protos.ChromeMessagePumpOuterClass.ChromeMessagePump getChromeMessagePump() {
      return chromeMessagePump_ == null ? perfetto.protos.ChromeMessagePumpOuterClass.ChromeMessagePump.getDefaultInstance() : chromeMessagePump_;
    }
    /**
     * <code>optional .perfetto.protos.ChromeMessagePump chrome_message_pump = 35;</code>
     */
    @java.lang.Override
    public perfetto.protos.ChromeMessagePumpOuterClass.ChromeMessagePumpOrBuilder getChromeMessagePumpOrBuilder() {
      return chromeMessagePump_ == null ? perfetto.protos.ChromeMessagePumpOuterClass.ChromeMessagePump.getDefaultInstance() : chromeMessagePump_;
    }

    public static final int CHROME_MOJO_EVENT_INFO_FIELD_NUMBER = 38;
    private perfetto.protos.ChromeMojoEventInfoOuterClass.ChromeMojoEventInfo chromeMojoEventInfo_;
    /**
     * <code>optional .perfetto.protos.ChromeMojoEventInfo chrome_mojo_event_info = 38;</code>
     * @return Whether the chromeMojoEventInfo field is set.
     */
    @java.lang.Override
    public boolean hasChromeMojoEventInfo() {
      return ((bitField0_ & 0x00800000) != 0);
    }
    /**
     * <code>optional .perfetto.protos.ChromeMojoEventInfo chrome_mojo_event_info = 38;</code>
     * @return The chromeMojoEventInfo.
     */
    @java.lang.Override
    public perfetto.protos.ChromeMojoEventInfoOuterClass.ChromeMojoEventInfo getChromeMojoEventInfo() {
      return chromeMojoEventInfo_ == null ? perfetto.protos.ChromeMojoEventInfoOuterClass.ChromeMojoEventInfo.getDefaultInstance() : chromeMojoEventInfo_;
    }
    /**
     * <code>optional .perfetto.protos.ChromeMojoEventInfo chrome_mojo_event_info = 38;</code>
     */
    @java.lang.Override
    public perfetto.protos.ChromeMojoEventInfoOuterClass.ChromeMojoEventInfoOrBuilder getChromeMojoEventInfoOrBuilder() {
      return chromeMojoEventInfo_ == null ? perfetto.protos.ChromeMojoEventInfoOuterClass.ChromeMojoEventInfo.getDefaultInstance() : chromeMojoEventInfo_;
    }

    public static final int TIMESTAMP_DELTA_US_FIELD_NUMBER = 1;
    /**
     * <pre>
     * Delta timestamp value since the last TrackEvent or ThreadDescriptor. To
     * calculate the absolute timestamp value, sum up all delta values of the
     * preceding TrackEvents since the last ThreadDescriptor and add the sum to
     * the |reference_timestamp| in ThreadDescriptor. This value should always
     * be positive.
     * </pre>
     *
     * <code>int64 timestamp_delta_us = 1;</code>
     * @return Whether the timestampDeltaUs field is set.
     */
    @java.lang.Override
    public boolean hasTimestampDeltaUs() {
      return timestampCase_ == 1;
    }
    /**
     * <pre>
     * Delta timestamp value since the last TrackEvent or ThreadDescriptor. To
     * calculate the absolute timestamp value, sum up all delta values of the
     * preceding TrackEvents since the last ThreadDescriptor and add the sum to
     * the |reference_timestamp| in ThreadDescriptor. This value should always
     * be positive.
     * </pre>
     *
     * <code>int64 timestamp_delta_us = 1;</code>
     * @return The timestampDeltaUs.
     */
    @java.lang.Override
    public long getTimestampDeltaUs() {
      if (timestampCase_ == 1) {
        return (java.lang.Long) timestamp_;
      }
      return 0L;
    }

    public static final int TIMESTAMP_ABSOLUTE_US_FIELD_NUMBER = 16;
    /**
     * <pre>
     * Absolute value (e.g. a manually specified timestamp in the macro).
     * This is a one-off value that does not affect delta timestamp computation
     * in subsequent TrackEvents.
     * </pre>
     *
     * <code>int64 timestamp_absolute_us = 16;</code>
     * @return Whether the timestampAbsoluteUs field is set.
     */
    @java.lang.Override
    public boolean hasTimestampAbsoluteUs() {
      return timestampCase_ == 16;
    }
    /**
     * <pre>
     * Absolute value (e.g. a manually specified timestamp in the macro).
     * This is a one-off value that does not affect delta timestamp computation
     * in subsequent TrackEvents.
     * </pre>
     *
     * <code>int64 timestamp_absolute_us = 16;</code>
     * @return The timestampAbsoluteUs.
     */
    @java.lang.Override
    public long getTimestampAbsoluteUs() {
      if (timestampCase_ == 16) {
        return (java.lang.Long) timestamp_;
      }
      return 0L;
    }

    public static final int THREAD_TIME_DELTA_US_FIELD_NUMBER = 2;
    /**
     * <pre>
     * Delta timestamp value since the last TrackEvent or ThreadDescriptor. To
     * calculate the absolute timestamp value, sum up all delta values of the
     * preceding TrackEvents since the last ThreadDescriptor and add the sum to
     * the |reference_timestamp| in ThreadDescriptor. This value should always
     * be positive.
     * </pre>
     *
     * <code>int64 thread_time_delta_us = 2;</code>
     * @return Whether the threadTimeDeltaUs field is set.
     */
    @java.lang.Override
    public boolean hasThreadTimeDeltaUs() {
      return threadTimeCase_ == 2;
    }
    /**
     * <pre>
     * Delta timestamp value since the last TrackEvent or ThreadDescriptor. To
     * calculate the absolute timestamp value, sum up all delta values of the
     * preceding TrackEvents since the last ThreadDescriptor and add the sum to
     * the |reference_timestamp| in ThreadDescriptor. This value should always
     * be positive.
     * </pre>
     *
     * <code>int64 thread_time_delta_us = 2;</code>
     * @return The threadTimeDeltaUs.
     */
    @java.lang.Override
    public long getThreadTimeDeltaUs() {
      if (threadTimeCase_ == 2) {
        return (java.lang.Long) threadTime_;
      }
      return 0L;
    }

    public static final int THREAD_TIME_ABSOLUTE_US_FIELD_NUMBER = 17;
    /**
     * <pre>
     * This is a one-off absolute value that does not affect delta timestamp
     * computation in subsequent TrackEvents.
     * </pre>
     *
     * <code>int64 thread_time_absolute_us = 17;</code>
     * @return Whether the threadTimeAbsoluteUs field is set.
     */
    @java.lang.Override
    public boolean hasThreadTimeAbsoluteUs() {
      return threadTimeCase_ == 17;
    }
    /**
     * <pre>
     * This is a one-off absolute value that does not affect delta timestamp
     * computation in subsequent TrackEvents.
     * </pre>
     *
     * <code>int64 thread_time_absolute_us = 17;</code>
     * @return The threadTimeAbsoluteUs.
     */
    @java.lang.Override
    public long getThreadTimeAbsoluteUs() {
      if (threadTimeCase_ == 17) {
        return (java.lang.Long) threadTime_;
      }
      return 0L;
    }

    public static final int THREAD_INSTRUCTION_COUNT_DELTA_FIELD_NUMBER = 8;
    /**
     * <pre>
     * Same encoding as |thread_time| field above.
     * </pre>
     *
     * <code>int64 thread_instruction_count_delta = 8;</code>
     * @return Whether the threadInstructionCountDelta field is set.
     */
    @java.lang.Override
    public boolean hasThreadInstructionCountDelta() {
      return threadInstructionCountCase_ == 8;
    }
    /**
     * <pre>
     * Same encoding as |thread_time| field above.
     * </pre>
     *
     * <code>int64 thread_instruction_count_delta = 8;</code>
     * @return The threadInstructionCountDelta.
     */
    @java.lang.Override
    public long getThreadInstructionCountDelta() {
      if (threadInstructionCountCase_ == 8) {
        return (java.lang.Long) threadInstructionCount_;
      }
      return 0L;
    }

    public static final int THREAD_INSTRUCTION_COUNT_ABSOLUTE_FIELD_NUMBER = 20;
    /**
     * <code>int64 thread_instruction_count_absolute = 20;</code>
     * @return Whether the threadInstructionCountAbsolute field is set.
     */
    @java.lang.Override
    public boolean hasThreadInstructionCountAbsolute() {
      return threadInstructionCountCase_ == 20;
    }
    /**
     * <code>int64 thread_instruction_count_absolute = 20;</code>
     * @return The threadInstructionCountAbsolute.
     */
    @java.lang.Override
    public long getThreadInstructionCountAbsolute() {
      if (threadInstructionCountCase_ == 20) {
        return (java.lang.Long) threadInstructionCount_;
      }
      return 0L;
    }

    public static final int LEGACY_EVENT_FIELD_NUMBER = 6;
    private perfetto.protos.TrackEventOuterClass.TrackEvent.LegacyEvent legacyEvent_;
    /**
     * <code>optional .perfetto.protos.TrackEvent.LegacyEvent legacy_event = 6;</code>
     * @return Whether the legacyEvent field is set.
     */
    @java.lang.Override
    public boolean hasLegacyEvent() {
      return ((bitField0_ & 0x40000000) != 0);
    }
    /**
     * <code>optional .perfetto.protos.TrackEvent.LegacyEvent legacy_event = 6;</code>
     * @return The legacyEvent.
     */
    @java.lang.Override
    public perfetto.protos.TrackEventOuterClass.TrackEvent.LegacyEvent getLegacyEvent() {
      return legacyEvent_ == null ? perfetto.protos.TrackEventOuterClass.TrackEvent.LegacyEvent.getDefaultInstance() : legacyEvent_;
    }
    /**
     * <code>optional .perfetto.protos.TrackEvent.LegacyEvent legacy_event = 6;</code>
     */
    @java.lang.Override
    public perfetto.protos.TrackEventOuterClass.TrackEvent.LegacyEventOrBuilder getLegacyEventOrBuilder() {
      return legacyEvent_ == null ? perfetto.protos.TrackEventOuterClass.TrackEvent.LegacyEvent.getDefaultInstance() : legacyEvent_;
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      if (!extensionsAreInitialized()) {
        memoizedIsInitialized = 0;
        return false;
      }
      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      com.google.protobuf.GeneratedMessageV3
        .ExtendableMessage<perfetto.protos.TrackEventOuterClass.TrackEvent>.ExtensionWriter
          extensionWriter = newExtensionWriter();
      if (timestampCase_ == 1) {
        output.writeInt64(
            1, (long)((java.lang.Long) timestamp_));
      }
      if (threadTimeCase_ == 2) {
        output.writeInt64(
            2, (long)((java.lang.Long) threadTime_));
      }
      for (int i = 0; i < categoryIids_.size(); i++) {
        output.writeUInt64(3, categoryIids_.getLong(i));
      }
      for (int i = 0; i < debugAnnotations_.size(); i++) {
        output.writeMessage(4, debugAnnotations_.get(i));
      }
      if (((bitField0_ & 0x00000040) != 0)) {
        output.writeMessage(5, getTaskExecution());
      }
      if (((bitField0_ & 0x40000000) != 0)) {
        output.writeMessage(6, getLegacyEvent());
      }
      if (threadInstructionCountCase_ == 8) {
        output.writeInt64(
            8, (long)((java.lang.Long) threadInstructionCount_));
      }
      if (((bitField0_ & 0x00000004) != 0)) {
        output.writeEnum(9, type_);
      }
      if (nameFieldCase_ == 10) {
        output.writeUInt64(
            10, (long)((java.lang.Long) nameField_));
      }
      if (((bitField0_ & 0x00000008) != 0)) {
        output.writeUInt64(11, trackUuid_);
      }
      for (int i = 0; i < extraCounterValues_.size(); i++) {
        output.writeInt64(12, extraCounterValues_.getLong(i));
      }
      if (timestampCase_ == 16) {
        output.writeInt64(
            16, (long)((java.lang.Long) timestamp_));
      }
      if (threadTimeCase_ == 17) {
        output.writeInt64(
            17, (long)((java.lang.Long) threadTime_));
      }
      if (threadInstructionCountCase_ == 20) {
        output.writeInt64(
            20, (long)((java.lang.Long) threadInstructionCount_));
      }
      if (((bitField0_ & 0x00000080) != 0)) {
        output.writeMessage(21, getLogMessage());
      }
      for (int i = 0; i < categories_.size(); i++) {
        com.google.protobuf.GeneratedMessageV3.writeString(output, 22, categories_.getRaw(i));
      }
      if (nameFieldCase_ == 23) {
        com.google.protobuf.GeneratedMessageV3.writeString(output, 23, nameField_);
      }
      if (((bitField0_ & 0x00000100) != 0)) {
        output.writeMessage(24, getCcSchedulerState());
      }
      if (((bitField0_ & 0x00000200) != 0)) {
        output.writeMessage(25, getChromeUserEvent());
      }
      if (((bitField0_ & 0x00000400) != 0)) {
        output.writeMessage(26, getChromeKeyedService());
      }
      if (((bitField0_ & 0x00000800) != 0)) {
        output.writeMessage(27, getChromeLegacyIpc());
      }
      if (((bitField0_ & 0x00001000) != 0)) {
        output.writeMessage(28, getChromeHistogramSample());
      }
      if (((bitField0_ & 0x00002000) != 0)) {
        output.writeMessage(29, getChromeLatencyInfo());
      }
      if (counterValueFieldCase_ == 30) {
        output.writeInt64(
            30, (long)((java.lang.Long) counterValueField_));
      }
      for (int i = 0; i < extraCounterTrackUuids_.size(); i++) {
        output.writeUInt64(31, extraCounterTrackUuids_.getLong(i));
      }
      if (((bitField0_ & 0x00004000) != 0)) {
        output.writeMessage(32, getChromeFrameReporter());
      }
      if (sourceLocationFieldCase_ == 33) {
        output.writeMessage(33, (perfetto.protos.SourceLocationOuterClass.SourceLocation) sourceLocationField_);
      }
      if (sourceLocationFieldCase_ == 34) {
        output.writeUInt64(
            34, (long)((java.lang.Long) sourceLocationField_));
      }
      if (((bitField0_ & 0x00400000) != 0)) {
        output.writeMessage(35, getChromeMessagePump());
      }
      for (int i = 0; i < flowIdsOld_.size(); i++) {
        output.writeUInt64(36, flowIdsOld_.getLong(i));
      }
      if (((bitField0_ & 0x00800000) != 0)) {
        output.writeMessage(38, getChromeMojoEventInfo());
      }
      if (((bitField0_ & 0x00008000) != 0)) {
        output.writeMessage(39, getChromeApplicationStateInfo());
      }
      if (((bitField0_ & 0x00010000) != 0)) {
        output.writeMessage(40, getChromeRendererSchedulerState());
      }
      if (((bitField0_ & 0x00020000) != 0)) {
        output.writeMessage(41, getChromeWindowHandleEventInfo());
      }
      for (int i = 0; i < terminatingFlowIdsOld_.size(); i++) {
        output.writeUInt64(42, terminatingFlowIdsOld_.getLong(i));
      }
      if (((bitField0_ & 0x00040000) != 0)) {
        output.writeMessage(43, getChromeContentSettingsEventInfo());
      }
      if (counterValueFieldCase_ == 44) {
        output.writeDouble(
            44, (double)((java.lang.Double) counterValueField_));
      }
      for (int i = 0; i < extraDoubleCounterTrackUuids_.size(); i++) {
        output.writeUInt64(45, extraDoubleCounterTrackUuids_.getLong(i));
      }
      for (int i = 0; i < extraDoubleCounterValues_.size(); i++) {
        output.writeDouble(46, extraDoubleCounterValues_.getDouble(i));
      }
      for (int i = 0; i < flowIds_.size(); i++) {
        output.writeFixed64(47, flowIds_.getLong(i));
      }
      for (int i = 0; i < terminatingFlowIds_.size(); i++) {
        output.writeFixed64(48, terminatingFlowIds_.getLong(i));
      }
      if (((bitField0_ & 0x00080000) != 0)) {
        output.writeMessage(49, getChromeActiveProcesses());
      }
      extensionWriter.writeUntil(9900, output);
      extensionWriter.writeUntil(10001, output);
      getUnknownFields().writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (timestampCase_ == 1) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt64Size(
              1, (long)((java.lang.Long) timestamp_));
      }
      if (threadTimeCase_ == 2) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt64Size(
              2, (long)((java.lang.Long) threadTime_));
      }
      {
        int dataSize = 0;
        for (int i = 0; i < categoryIids_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeUInt64SizeNoTag(categoryIids_.getLong(i));
        }
        size += dataSize;
        size += 1 * getCategoryIidsList().size();
      }
      for (int i = 0; i < debugAnnotations_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(4, debugAnnotations_.get(i));
      }
      if (((bitField0_ & 0x00000040) != 0)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(5, getTaskExecution());
      }
      if (((bitField0_ & 0x40000000) != 0)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(6, getLegacyEvent());
      }
      if (threadInstructionCountCase_ == 8) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt64Size(
              8, (long)((java.lang.Long) threadInstructionCount_));
      }
      if (((bitField0_ & 0x00000004) != 0)) {
        size += com.google.protobuf.CodedOutputStream
          .computeEnumSize(9, type_);
      }
      if (nameFieldCase_ == 10) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt64Size(
              10, (long)((java.lang.Long) nameField_));
      }
      if (((bitField0_ & 0x00000008) != 0)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt64Size(11, trackUuid_);
      }
      {
        int dataSize = 0;
        for (int i = 0; i < extraCounterValues_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeInt64SizeNoTag(extraCounterValues_.getLong(i));
        }
        size += dataSize;
        size += 1 * getExtraCounterValuesList().size();
      }
      if (timestampCase_ == 16) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt64Size(
              16, (long)((java.lang.Long) timestamp_));
      }
      if (threadTimeCase_ == 17) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt64Size(
              17, (long)((java.lang.Long) threadTime_));
      }
      if (threadInstructionCountCase_ == 20) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt64Size(
              20, (long)((java.lang.Long) threadInstructionCount_));
      }
      if (((bitField0_ & 0x00000080) != 0)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(21, getLogMessage());
      }
      {
        int dataSize = 0;
        for (int i = 0; i < categories_.size(); i++) {
          dataSize += computeStringSizeNoTag(categories_.getRaw(i));
        }
        size += dataSize;
        size += 2 * getCategoriesList().size();
      }
      if (nameFieldCase_ == 23) {
        size += com.google.protobuf.GeneratedMessageV3.computeStringSize(23, nameField_);
      }
      if (((bitField0_ & 0x00000100) != 0)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(24, getCcSchedulerState());
      }
      if (((bitField0_ & 0x00000200) != 0)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(25, getChromeUserEvent());
      }
      if (((bitField0_ & 0x00000400) != 0)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(26, getChromeKeyedService());
      }
      if (((bitField0_ & 0x00000800) != 0)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(27, getChromeLegacyIpc());
      }
      if (((bitField0_ & 0x00001000) != 0)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(28, getChromeHistogramSample());
      }
      if (((bitField0_ & 0x00002000) != 0)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(29, getChromeLatencyInfo());
      }
      if (counterValueFieldCase_ == 30) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt64Size(
              30, (long)((java.lang.Long) counterValueField_));
      }
      {
        int dataSize = 0;
        for (int i = 0; i < extraCounterTrackUuids_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeUInt64SizeNoTag(extraCounterTrackUuids_.getLong(i));
        }
        size += dataSize;
        size += 2 * getExtraCounterTrackUuidsList().size();
      }
      if (((bitField0_ & 0x00004000) != 0)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(32, getChromeFrameReporter());
      }
      if (sourceLocationFieldCase_ == 33) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(33, (perfetto.protos.SourceLocationOuterClass.SourceLocation) sourceLocationField_);
      }
      if (sourceLocationFieldCase_ == 34) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt64Size(
              34, (long)((java.lang.Long) sourceLocationField_));
      }
      if (((bitField0_ & 0x00400000) != 0)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(35, getChromeMessagePump());
      }
      {
        int dataSize = 0;
        for (int i = 0; i < flowIdsOld_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeUInt64SizeNoTag(flowIdsOld_.getLong(i));
        }
        size += dataSize;
        size += 2 * getFlowIdsOldList().size();
      }
      if (((bitField0_ & 0x00800000) != 0)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(38, getChromeMojoEventInfo());
      }
      if (((bitField0_ & 0x00008000) != 0)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(39, getChromeApplicationStateInfo());
      }
      if (((bitField0_ & 0x00010000) != 0)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(40, getChromeRendererSchedulerState());
      }
      if (((bitField0_ & 0x00020000) != 0)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(41, getChromeWindowHandleEventInfo());
      }
      {
        int dataSize = 0;
        for (int i = 0; i < terminatingFlowIdsOld_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeUInt64SizeNoTag(terminatingFlowIdsOld_.getLong(i));
        }
        size += dataSize;
        size += 2 * getTerminatingFlowIdsOldList().size();
      }
      if (((bitField0_ & 0x00040000) != 0)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(43, getChromeContentSettingsEventInfo());
      }
      if (counterValueFieldCase_ == 44) {
        size += com.google.protobuf.CodedOutputStream
          .computeDoubleSize(
              44, (double)((java.lang.Double) counterValueField_));
      }
      {
        int dataSize = 0;
        for (int i = 0; i < extraDoubleCounterTrackUuids_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeUInt64SizeNoTag(extraDoubleCounterTrackUuids_.getLong(i));
        }
        size += dataSize;
        size += 2 * getExtraDoubleCounterTrackUuidsList().size();
      }
      {
        int dataSize = 0;
        dataSize = 8 * getExtraDoubleCounterValuesList().size();
        size += dataSize;
        size += 2 * getExtraDoubleCounterValuesList().size();
      }
      {
        int dataSize = 0;
        dataSize = 8 * getFlowIdsList().size();
        size += dataSize;
        size += 2 * getFlowIdsList().size();
      }
      {
        int dataSize = 0;
        dataSize = 8 * getTerminatingFlowIdsList().size();
        size += dataSize;
        size += 2 * getTerminatingFlowIdsList().size();
      }
      if (((bitField0_ & 0x00080000) != 0)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(49, getChromeActiveProcesses());
      }
      size += extensionsSerializedSize();
      size += getUnknownFields().getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof perfetto.protos.TrackEventOuterClass.TrackEvent)) {
        return super.equals(obj);
      }
      perfetto.protos.TrackEventOuterClass.TrackEvent other = (perfetto.protos.TrackEventOuterClass.TrackEvent) obj;

      if (!getCategoryIidsList()
          .equals(other.getCategoryIidsList())) return false;
      if (!getCategoriesList()
          .equals(other.getCategoriesList())) return false;
      if (hasType() != other.hasType()) return false;
      if (hasType()) {
        if (type_ != other.type_) return false;
      }
      if (hasTrackUuid() != other.hasTrackUuid()) return false;
      if (hasTrackUuid()) {
        if (getTrackUuid()
            != other.getTrackUuid()) return false;
      }
      if (!getExtraCounterTrackUuidsList()
          .equals(other.getExtraCounterTrackUuidsList())) return false;
      if (!getExtraCounterValuesList()
          .equals(other.getExtraCounterValuesList())) return false;
      if (!getExtraDoubleCounterTrackUuidsList()
          .equals(other.getExtraDoubleCounterTrackUuidsList())) return false;
      if (!getExtraDoubleCounterValuesList()
          .equals(other.getExtraDoubleCounterValuesList())) return false;
      if (!getFlowIdsOldList()
          .equals(other.getFlowIdsOldList())) return false;
      if (!getFlowIdsList()
          .equals(other.getFlowIdsList())) return false;
      if (!getTerminatingFlowIdsOldList()
          .equals(other.getTerminatingFlowIdsOldList())) return false;
      if (!getTerminatingFlowIdsList()
          .equals(other.getTerminatingFlowIdsList())) return false;
      if (!getDebugAnnotationsList()
          .equals(other.getDebugAnnotationsList())) return false;
      if (hasTaskExecution() != other.hasTaskExecution()) return false;
      if (hasTaskExecution()) {
        if (!getTaskExecution()
            .equals(other.getTaskExecution())) return false;
      }
      if (hasLogMessage() != other.hasLogMessage()) return false;
      if (hasLogMessage()) {
        if (!getLogMessage()
            .equals(other.getLogMessage())) return false;
      }
      if (hasCcSchedulerState() != other.hasCcSchedulerState()) return false;
      if (hasCcSchedulerState()) {
        if (!getCcSchedulerState()
            .equals(other.getCcSchedulerState())) return false;
      }
      if (hasChromeUserEvent() != other.hasChromeUserEvent()) return false;
      if (hasChromeUserEvent()) {
        if (!getChromeUserEvent()
            .equals(other.getChromeUserEvent())) return false;
      }
      if (hasChromeKeyedService() != other.hasChromeKeyedService()) return false;
      if (hasChromeKeyedService()) {
        if (!getChromeKeyedService()
            .equals(other.getChromeKeyedService())) return false;
      }
      if (hasChromeLegacyIpc() != other.hasChromeLegacyIpc()) return false;
      if (hasChromeLegacyIpc()) {
        if (!getChromeLegacyIpc()
            .equals(other.getChromeLegacyIpc())) return false;
      }
      if (hasChromeHistogramSample() != other.hasChromeHistogramSample()) return false;
      if (hasChromeHistogramSample()) {
        if (!getChromeHistogramSample()
            .equals(other.getChromeHistogramSample())) return false;
      }
      if (hasChromeLatencyInfo() != other.hasChromeLatencyInfo()) return false;
      if (hasChromeLatencyInfo()) {
        if (!getChromeLatencyInfo()
            .equals(other.getChromeLatencyInfo())) return false;
      }
      if (hasChromeFrameReporter() != other.hasChromeFrameReporter()) return false;
      if (hasChromeFrameReporter()) {
        if (!getChromeFrameReporter()
            .equals(other.getChromeFrameReporter())) return false;
      }
      if (hasChromeApplicationStateInfo() != other.hasChromeApplicationStateInfo()) return false;
      if (hasChromeApplicationStateInfo()) {
        if (!getChromeApplicationStateInfo()
            .equals(other.getChromeApplicationStateInfo())) return false;
      }
      if (hasChromeRendererSchedulerState() != other.hasChromeRendererSchedulerState()) return false;
      if (hasChromeRendererSchedulerState()) {
        if (!getChromeRendererSchedulerState()
            .equals(other.getChromeRendererSchedulerState())) return false;
      }
      if (hasChromeWindowHandleEventInfo() != other.hasChromeWindowHandleEventInfo()) return false;
      if (hasChromeWindowHandleEventInfo()) {
        if (!getChromeWindowHandleEventInfo()
            .equals(other.getChromeWindowHandleEventInfo())) return false;
      }
      if (hasChromeContentSettingsEventInfo() != other.hasChromeContentSettingsEventInfo()) return false;
      if (hasChromeContentSettingsEventInfo()) {
        if (!getChromeContentSettingsEventInfo()
            .equals(other.getChromeContentSettingsEventInfo())) return false;
      }
      if (hasChromeActiveProcesses() != other.hasChromeActiveProcesses()) return false;
      if (hasChromeActiveProcesses()) {
        if (!getChromeActiveProcesses()
            .equals(other.getChromeActiveProcesses())) return false;
      }
      if (hasChromeMessagePump() != other.hasChromeMessagePump()) return false;
      if (hasChromeMessagePump()) {
        if (!getChromeMessagePump()
            .equals(other.getChromeMessagePump())) return false;
      }
      if (hasChromeMojoEventInfo() != other.hasChromeMojoEventInfo()) return false;
      if (hasChromeMojoEventInfo()) {
        if (!getChromeMojoEventInfo()
            .equals(other.getChromeMojoEventInfo())) return false;
      }
      if (hasLegacyEvent() != other.hasLegacyEvent()) return false;
      if (hasLegacyEvent()) {
        if (!getLegacyEvent()
            .equals(other.getLegacyEvent())) return false;
      }
      if (!getNameFieldCase().equals(other.getNameFieldCase())) return false;
      switch (nameFieldCase_) {
        case 10:
          if (getNameIid()
              != other.getNameIid()) return false;
          break;
        case 23:
          if (!getName()
              .equals(other.getName())) return false;
          break;
        case 0:
        default:
      }
      if (!getCounterValueFieldCase().equals(other.getCounterValueFieldCase())) return false;
      switch (counterValueFieldCase_) {
        case 30:
          if (getCounterValue()
              != other.getCounterValue()) return false;
          break;
        case 44:
          if (java.lang.Double.doubleToLongBits(getDoubleCounterValue())
              != java.lang.Double.doubleToLongBits(
                  other.getDoubleCounterValue())) return false;
          break;
        case 0:
        default:
      }
      if (!getSourceLocationFieldCase().equals(other.getSourceLocationFieldCase())) return false;
      switch (sourceLocationFieldCase_) {
        case 33:
          if (!getSourceLocation()
              .equals(other.getSourceLocation())) return false;
          break;
        case 34:
          if (getSourceLocationIid()
              != other.getSourceLocationIid()) return false;
          break;
        case 0:
        default:
      }
      if (!getTimestampCase().equals(other.getTimestampCase())) return false;
      switch (timestampCase_) {
        case 1:
          if (getTimestampDeltaUs()
              != other.getTimestampDeltaUs()) return false;
          break;
        case 16:
          if (getTimestampAbsoluteUs()
              != other.getTimestampAbsoluteUs()) return false;
          break;
        case 0:
        default:
      }
      if (!getThreadTimeCase().equals(other.getThreadTimeCase())) return false;
      switch (threadTimeCase_) {
        case 2:
          if (getThreadTimeDeltaUs()
              != other.getThreadTimeDeltaUs()) return false;
          break;
        case 17:
          if (getThreadTimeAbsoluteUs()
              != other.getThreadTimeAbsoluteUs()) return false;
          break;
        case 0:
        default:
      }
      if (!getThreadInstructionCountCase().equals(other.getThreadInstructionCountCase())) return false;
      switch (threadInstructionCountCase_) {
        case 8:
          if (getThreadInstructionCountDelta()
              != other.getThreadInstructionCountDelta()) return false;
          break;
        case 20:
          if (getThreadInstructionCountAbsolute()
              != other.getThreadInstructionCountAbsolute()) return false;
          break;
        case 0:
        default:
      }
      if (!getUnknownFields().equals(other.getUnknownFields())) return false;
      if (!getExtensionFields().equals(other.getExtensionFields()))
        return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      if (getCategoryIidsCount() > 0) {
        hash = (37 * hash) + CATEGORY_IIDS_FIELD_NUMBER;
        hash = (53 * hash) + getCategoryIidsList().hashCode();
      }
      if (getCategoriesCount() > 0) {
        hash = (37 * hash) + CATEGORIES_FIELD_NUMBER;
        hash = (53 * hash) + getCategoriesList().hashCode();
      }
      if (hasType()) {
        hash = (37 * hash) + TYPE_FIELD_NUMBER;
        hash = (53 * hash) + type_;
      }
      if (hasTrackUuid()) {
        hash = (37 * hash) + TRACK_UUID_FIELD_NUMBER;
        hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
            getTrackUuid());
      }
      if (getExtraCounterTrackUuidsCount() > 0) {
        hash = (37 * hash) + EXTRA_COUNTER_TRACK_UUIDS_FIELD_NUMBER;
        hash = (53 * hash) + getExtraCounterTrackUuidsList().hashCode();
      }
      if (getExtraCounterValuesCount() > 0) {
        hash = (37 * hash) + EXTRA_COUNTER_VALUES_FIELD_NUMBER;
        hash = (53 * hash) + getExtraCounterValuesList().hashCode();
      }
      if (getExtraDoubleCounterTrackUuidsCount() > 0) {
        hash = (37 * hash) + EXTRA_DOUBLE_COUNTER_TRACK_UUIDS_FIELD_NUMBER;
        hash = (53 * hash) + getExtraDoubleCounterTrackUuidsList().hashCode();
      }
      if (getExtraDoubleCounterValuesCount() > 0) {
        hash = (37 * hash) + EXTRA_DOUBLE_COUNTER_VALUES_FIELD_NUMBER;
        hash = (53 * hash) + getExtraDoubleCounterValuesList().hashCode();
      }
      if (getFlowIdsOldCount() > 0) {
        hash = (37 * hash) + FLOW_IDS_OLD_FIELD_NUMBER;
        hash = (53 * hash) + getFlowIdsOldList().hashCode();
      }
      if (getFlowIdsCount() > 0) {
        hash = (37 * hash) + FLOW_IDS_FIELD_NUMBER;
        hash = (53 * hash) + getFlowIdsList().hashCode();
      }
      if (getTerminatingFlowIdsOldCount() > 0) {
        hash = (37 * hash) + TERMINATING_FLOW_IDS_OLD_FIELD_NUMBER;
        hash = (53 * hash) + getTerminatingFlowIdsOldList().hashCode();
      }
      if (getTerminatingFlowIdsCount() > 0) {
        hash = (37 * hash) + TERMINATING_FLOW_IDS_FIELD_NUMBER;
        hash = (53 * hash) + getTerminatingFlowIdsList().hashCode();
      }
      if (getDebugAnnotationsCount() > 0) {
        hash = (37 * hash) + DEBUG_ANNOTATIONS_FIELD_NUMBER;
        hash = (53 * hash) + getDebugAnnotationsList().hashCode();
      }
      if (hasTaskExecution()) {
        hash = (37 * hash) + TASK_EXECUTION_FIELD_NUMBER;
        hash = (53 * hash) + getTaskExecution().hashCode();
      }
      if (hasLogMessage()) {
        hash = (37 * hash) + LOG_MESSAGE_FIELD_NUMBER;
        hash = (53 * hash) + getLogMessage().hashCode();
      }
      if (hasCcSchedulerState()) {
        hash = (37 * hash) + CC_SCHEDULER_STATE_FIELD_NUMBER;
        hash = (53 * hash) + getCcSchedulerState().hashCode();
      }
      if (hasChromeUserEvent()) {
        hash = (37 * hash) + CHROME_USER_EVENT_FIELD_NUMBER;
        hash = (53 * hash) + getChromeUserEvent().hashCode();
      }
      if (hasChromeKeyedService()) {
        hash = (37 * hash) + CHROME_KEYED_SERVICE_FIELD_NUMBER;
        hash = (53 * hash) + getChromeKeyedService().hashCode();
      }
      if (hasChromeLegacyIpc()) {
        hash = (37 * hash) + CHROME_LEGACY_IPC_FIELD_NUMBER;
        hash = (53 * hash) + getChromeLegacyIpc().hashCode();
      }
      if (hasChromeHistogramSample()) {
        hash = (37 * hash) + CHROME_HISTOGRAM_SAMPLE_FIELD_NUMBER;
        hash = (53 * hash) + getChromeHistogramSample().hashCode();
      }
      if (hasChromeLatencyInfo()) {
        hash = (37 * hash) + CHROME_LATENCY_INFO_FIELD_NUMBER;
        hash = (53 * hash) + getChromeLatencyInfo().hashCode();
      }
      if (hasChromeFrameReporter()) {
        hash = (37 * hash) + CHROME_FRAME_REPORTER_FIELD_NUMBER;
        hash = (53 * hash) + getChromeFrameReporter().hashCode();
      }
      if (hasChromeApplicationStateInfo()) {
        hash = (37 * hash) + CHROME_APPLICATION_STATE_INFO_FIELD_NUMBER;
        hash = (53 * hash) + getChromeApplicationStateInfo().hashCode();
      }
      if (hasChromeRendererSchedulerState()) {
        hash = (37 * hash) + CHROME_RENDERER_SCHEDULER_STATE_FIELD_NUMBER;
        hash = (53 * hash) + getChromeRendererSchedulerState().hashCode();
      }
      if (hasChromeWindowHandleEventInfo()) {
        hash = (37 * hash) + CHROME_WINDOW_HANDLE_EVENT_INFO_FIELD_NUMBER;
        hash = (53 * hash) + getChromeWindowHandleEventInfo().hashCode();
      }
      if (hasChromeContentSettingsEventInfo()) {
        hash = (37 * hash) + CHROME_CONTENT_SETTINGS_EVENT_INFO_FIELD_NUMBER;
        hash = (53 * hash) + getChromeContentSettingsEventInfo().hashCode();
      }
      if (hasChromeActiveProcesses()) {
        hash = (37 * hash) + CHROME_ACTIVE_PROCESSES_FIELD_NUMBER;
        hash = (53 * hash) + getChromeActiveProcesses().hashCode();
      }
      if (hasChromeMessagePump()) {
        hash = (37 * hash) + CHROME_MESSAGE_PUMP_FIELD_NUMBER;
        hash = (53 * hash) + getChromeMessagePump().hashCode();
      }
      if (hasChromeMojoEventInfo()) {
        hash = (37 * hash) + CHROME_MOJO_EVENT_INFO_FIELD_NUMBER;
        hash = (53 * hash) + getChromeMojoEventInfo().hashCode();
      }
      if (hasLegacyEvent()) {
        hash = (37 * hash) + LEGACY_EVENT_FIELD_NUMBER;
        hash = (53 * hash) + getLegacyEvent().hashCode();
      }
      switch (nameFieldCase_) {
        case 10:
          hash = (37 * hash) + NAME_IID_FIELD_NUMBER;
          hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
              getNameIid());
          break;
        case 23:
          hash = (37 * hash) + NAME_FIELD_NUMBER;
          hash = (53 * hash) + getName().hashCode();
          break;
        case 0:
        default:
      }
      switch (counterValueFieldCase_) {
        case 30:
          hash = (37 * hash) + COUNTER_VALUE_FIELD_NUMBER;
          hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
              getCounterValue());
          break;
        case 44:
          hash = (37 * hash) + DOUBLE_COUNTER_VALUE_FIELD_NUMBER;
          hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
              java.lang.Double.doubleToLongBits(getDoubleCounterValue()));
          break;
        case 0:
        default:
      }
      switch (sourceLocationFieldCase_) {
        case 33:
          hash = (37 * hash) + SOURCE_LOCATION_FIELD_NUMBER;
          hash = (53 * hash) + getSourceLocation().hashCode();
          break;
        case 34:
          hash = (37 * hash) + SOURCE_LOCATION_IID_FIELD_NUMBER;
          hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
              getSourceLocationIid());
          break;
        case 0:
        default:
      }
      switch (timestampCase_) {
        case 1:
          hash = (37 * hash) + TIMESTAMP_DELTA_US_FIELD_NUMBER;
          hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
              getTimestampDeltaUs());
          break;
        case 16:
          hash = (37 * hash) + TIMESTAMP_ABSOLUTE_US_FIELD_NUMBER;
          hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
              getTimestampAbsoluteUs());
          break;
        case 0:
        default:
      }
      switch (threadTimeCase_) {
        case 2:
          hash = (37 * hash) + THREAD_TIME_DELTA_US_FIELD_NUMBER;
          hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
              getThreadTimeDeltaUs());
          break;
        case 17:
          hash = (37 * hash) + THREAD_TIME_ABSOLUTE_US_FIELD_NUMBER;
          hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
              getThreadTimeAbsoluteUs());
          break;
        case 0:
        default:
      }
      switch (threadInstructionCountCase_) {
        case 8:
          hash = (37 * hash) + THREAD_INSTRUCTION_COUNT_DELTA_FIELD_NUMBER;
          hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
              getThreadInstructionCountDelta());
          break;
        case 20:
          hash = (37 * hash) + THREAD_INSTRUCTION_COUNT_ABSOLUTE_FIELD_NUMBER;
          hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
              getThreadInstructionCountAbsolute());
          break;
        case 0:
        default:
      }
      hash = hashFields(hash, getExtensionFields());
      hash = (29 * hash) + getUnknownFields().hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static perfetto.protos.TrackEventOuterClass.TrackEvent parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static perfetto.protos.TrackEventOuterClass.TrackEvent parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static perfetto.protos.TrackEventOuterClass.TrackEvent parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static perfetto.protos.TrackEventOuterClass.TrackEvent parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static perfetto.protos.TrackEventOuterClass.TrackEvent parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static perfetto.protos.TrackEventOuterClass.TrackEvent parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static perfetto.protos.TrackEventOuterClass.TrackEvent parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static perfetto.protos.TrackEventOuterClass.TrackEvent parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static perfetto.protos.TrackEventOuterClass.TrackEvent parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static perfetto.protos.TrackEventOuterClass.TrackEvent parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static perfetto.protos.TrackEventOuterClass.TrackEvent parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static perfetto.protos.TrackEventOuterClass.TrackEvent parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(perfetto.protos.TrackEventOuterClass.TrackEvent prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * <pre>
     * Trace events emitted by client instrumentation library (TRACE_EVENT macros),
     * which describe activity on a track, such as a thread or asynchronous event
     * track. The track is specified using separate TrackDescriptor messages and
     * referred to via the track's UUID.
     * A simple TrackEvent packet specifies a timestamp, category, name and type:
     * ```protobuf
     *   trace_packet {
     *     timestamp: 1000
     *     track_event {
     *       categories: ["my_cat"]
     *       name: "my_event"
     *       type: TYPE_INSTANT
     *      }
     *    }
     * ```
     * To associate an event with a custom track (e.g. a thread), the track is
     * defined in a separate packet and referred to from the TrackEvent by its UUID:
     * ```protobuf
     *   trace_packet {
     *     track_descriptor {
     *       track_uuid: 1234
     *       name: "my_track"
     *       // Optionally, associate the track with a thread.
     *       thread_descriptor {
     *         pid: 10
     *         tid: 10
     *         ..
     *       }
     *     }
     *   }
     * ```
     * A pair of TYPE_SLICE_BEGIN and _END events form a slice on the track:
     * ```protobuf
     *   trace_packet {
     *     timestamp: 1200
     *     track_event {
     *       track_uuid: 1234
     *       categories: ["my_cat"]
     *       name: "my_slice"
     *       type: TYPE_SLICE_BEGIN
     *     }
     *   }
     *   trace_packet {
     *     timestamp: 1400
     *     track_event {
     *       track_uuid: 1234
     *       type: TYPE_SLICE_END
     *     }
     *   }
     * ```
     * TrackEvents also support optimizations to reduce data repetition and encoded
     * data size, e.g. through data interning (names, categories, ...) and delta
     * encoding of timestamps/counters. For details, see the InternedData message.
     * Further, default values for attributes of events on the same sequence (e.g.
     * their default track association) can be emitted as part of a
     * TrackEventDefaults message.
     * Next reserved id: 13 (up to 15). Next id: 50.
     * </pre>
     *
     * Protobuf type {@code perfetto.protos.TrackEvent}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.ExtendableBuilder<
          perfetto.protos.TrackEventOuterClass.TrackEvent, Builder> implements
        // @@protoc_insertion_point(builder_implements:perfetto.protos.TrackEvent)
        perfetto.protos.TrackEventOuterClass.TrackEventOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return perfetto.protos.TrackEventOuterClass.internal_static_perfetto_protos_TrackEvent_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return perfetto.protos.TrackEventOuterClass.internal_static_perfetto_protos_TrackEvent_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                perfetto.protos.TrackEventOuterClass.TrackEvent.class, perfetto.protos.TrackEventOuterClass.TrackEvent.Builder.class);
      }

      // Construct using perfetto.protos.TrackEventOuterClass.TrackEvent.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
          getDebugAnnotationsFieldBuilder();
          getTaskExecutionFieldBuilder();
          getLogMessageFieldBuilder();
          getCcSchedulerStateFieldBuilder();
          getChromeUserEventFieldBuilder();
          getChromeKeyedServiceFieldBuilder();
          getChromeLegacyIpcFieldBuilder();
          getChromeHistogramSampleFieldBuilder();
          getChromeLatencyInfoFieldBuilder();
          getChromeFrameReporterFieldBuilder();
          getChromeApplicationStateInfoFieldBuilder();
          getChromeRendererSchedulerStateFieldBuilder();
          getChromeWindowHandleEventInfoFieldBuilder();
          getChromeContentSettingsEventInfoFieldBuilder();
          getChromeActiveProcessesFieldBuilder();
          getChromeMessagePumpFieldBuilder();
          getChromeMojoEventInfoFieldBuilder();
          getLegacyEventFieldBuilder();
        }
      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        bitField0_ = 0;
        bitField1_ = 0;
        categoryIids_ = emptyLongList();
        categories_ = com.google.protobuf.LazyStringArrayList.EMPTY;
        bitField0_ = (bitField0_ & ~0x00000002);
        type_ = 0;
        trackUuid_ = 0L;
        extraCounterTrackUuids_ = emptyLongList();
        extraCounterValues_ = emptyLongList();
        extraDoubleCounterTrackUuids_ = emptyLongList();
        extraDoubleCounterValues_ = emptyDoubleList();
        flowIdsOld_ = emptyLongList();
        flowIds_ = emptyLongList();
        terminatingFlowIdsOld_ = emptyLongList();
        terminatingFlowIds_ = emptyLongList();
        if (debugAnnotationsBuilder_ == null) {
          debugAnnotations_ = java.util.Collections.emptyList();
        } else {
          debugAnnotations_ = null;
          debugAnnotationsBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00010000);
        taskExecution_ = null;
        if (taskExecutionBuilder_ != null) {
          taskExecutionBuilder_.dispose();
          taskExecutionBuilder_ = null;
        }
        logMessage_ = null;
        if (logMessageBuilder_ != null) {
          logMessageBuilder_.dispose();
          logMessageBuilder_ = null;
        }
        ccSchedulerState_ = null;
        if (ccSchedulerStateBuilder_ != null) {
          ccSchedulerStateBuilder_.dispose();
          ccSchedulerStateBuilder_ = null;
        }
        chromeUserEvent_ = null;
        if (chromeUserEventBuilder_ != null) {
          chromeUserEventBuilder_.dispose();
          chromeUserEventBuilder_ = null;
        }
        chromeKeyedService_ = null;
        if (chromeKeyedServiceBuilder_ != null) {
          chromeKeyedServiceBuilder_.dispose();
          chromeKeyedServiceBuilder_ = null;
        }
        chromeLegacyIpc_ = null;
        if (chromeLegacyIpcBuilder_ != null) {
          chromeLegacyIpcBuilder_.dispose();
          chromeLegacyIpcBuilder_ = null;
        }
        chromeHistogramSample_ = null;
        if (chromeHistogramSampleBuilder_ != null) {
          chromeHistogramSampleBuilder_.dispose();
          chromeHistogramSampleBuilder_ = null;
        }
        chromeLatencyInfo_ = null;
        if (chromeLatencyInfoBuilder_ != null) {
          chromeLatencyInfoBuilder_.dispose();
          chromeLatencyInfoBuilder_ = null;
        }
        chromeFrameReporter_ = null;
        if (chromeFrameReporterBuilder_ != null) {
          chromeFrameReporterBuilder_.dispose();
          chromeFrameReporterBuilder_ = null;
        }
        chromeApplicationStateInfo_ = null;
        if (chromeApplicationStateInfoBuilder_ != null) {
          chromeApplicationStateInfoBuilder_.dispose();
          chromeApplicationStateInfoBuilder_ = null;
        }
        chromeRendererSchedulerState_ = null;
        if (chromeRendererSchedulerStateBuilder_ != null) {
          chromeRendererSchedulerStateBuilder_.dispose();
          chromeRendererSchedulerStateBuilder_ = null;
        }
        chromeWindowHandleEventInfo_ = null;
        if (chromeWindowHandleEventInfoBuilder_ != null) {
          chromeWindowHandleEventInfoBuilder_.dispose();
          chromeWindowHandleEventInfoBuilder_ = null;
        }
        chromeContentSettingsEventInfo_ = null;
        if (chromeContentSettingsEventInfoBuilder_ != null) {
          chromeContentSettingsEventInfoBuilder_.dispose();
          chromeContentSettingsEventInfoBuilder_ = null;
        }
        chromeActiveProcesses_ = null;
        if (chromeActiveProcessesBuilder_ != null) {
          chromeActiveProcessesBuilder_.dispose();
          chromeActiveProcessesBuilder_ = null;
        }
        if (sourceLocationBuilder_ != null) {
          sourceLocationBuilder_.clear();
        }
        chromeMessagePump_ = null;
        if (chromeMessagePumpBuilder_ != null) {
          chromeMessagePumpBuilder_.dispose();
          chromeMessagePumpBuilder_ = null;
        }
        chromeMojoEventInfo_ = null;
        if (chromeMojoEventInfoBuilder_ != null) {
          chromeMojoEventInfoBuilder_.dispose();
          chromeMojoEventInfoBuilder_ = null;
        }
        legacyEvent_ = null;
        if (legacyEventBuilder_ != null) {
          legacyEventBuilder_.dispose();
          legacyEventBuilder_ = null;
        }
        nameFieldCase_ = 0;
        nameField_ = null;
        counterValueFieldCase_ = 0;
        counterValueField_ = null;
        sourceLocationFieldCase_ = 0;
        sourceLocationField_ = null;
        timestampCase_ = 0;
        timestamp_ = null;
        threadTimeCase_ = 0;
        threadTime_ = null;
        threadInstructionCountCase_ = 0;
        threadInstructionCount_ = null;
        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return perfetto.protos.TrackEventOuterClass.internal_static_perfetto_protos_TrackEvent_descriptor;
      }

      @java.lang.Override
      public perfetto.protos.TrackEventOuterClass.TrackEvent getDefaultInstanceForType() {
        return perfetto.protos.TrackEventOuterClass.TrackEvent.getDefaultInstance();
      }

      @java.lang.Override
      public perfetto.protos.TrackEventOuterClass.TrackEvent build() {
        perfetto.protos.TrackEventOuterClass.TrackEvent result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public perfetto.protos.TrackEventOuterClass.TrackEvent buildPartial() {
        perfetto.protos.TrackEventOuterClass.TrackEvent result = new perfetto.protos.TrackEventOuterClass.TrackEvent(this);
        buildPartialRepeatedFields(result);
        if (bitField0_ != 0) { buildPartial0(result); }
        if (bitField1_ != 0) { buildPartial1(result); }
        buildPartialOneofs(result);
        onBuilt();
        return result;
      }

      private void buildPartialRepeatedFields(perfetto.protos.TrackEventOuterClass.TrackEvent result) {
        if (((bitField0_ & 0x00000001) != 0)) {
          categoryIids_.makeImmutable();
          bitField0_ = (bitField0_ & ~0x00000001);
        }
        result.categoryIids_ = categoryIids_;
        if (((bitField0_ & 0x00000002) != 0)) {
          categories_ = categories_.getUnmodifiableView();
          bitField0_ = (bitField0_ & ~0x00000002);
        }
        result.categories_ = categories_;
        if (((bitField0_ & 0x00000100) != 0)) {
          extraCounterTrackUuids_.makeImmutable();
          bitField0_ = (bitField0_ & ~0x00000100);
        }
        result.extraCounterTrackUuids_ = extraCounterTrackUuids_;
        if (((bitField0_ & 0x00000200) != 0)) {
          extraCounterValues_.makeImmutable();
          bitField0_ = (bitField0_ & ~0x00000200);
        }
        result.extraCounterValues_ = extraCounterValues_;
        if (((bitField0_ & 0x00000400) != 0)) {
          extraDoubleCounterTrackUuids_.makeImmutable();
          bitField0_ = (bitField0_ & ~0x00000400);
        }
        result.extraDoubleCounterTrackUuids_ = extraDoubleCounterTrackUuids_;
        if (((bitField0_ & 0x00000800) != 0)) {
          extraDoubleCounterValues_.makeImmutable();
          bitField0_ = (bitField0_ & ~0x00000800);
        }
        result.extraDoubleCounterValues_ = extraDoubleCounterValues_;
        if (((bitField0_ & 0x00001000) != 0)) {
          flowIdsOld_.makeImmutable();
          bitField0_ = (bitField0_ & ~0x00001000);
        }
        result.flowIdsOld_ = flowIdsOld_;
        if (((bitField0_ & 0x00002000) != 0)) {
          flowIds_.makeImmutable();
          bitField0_ = (bitField0_ & ~0x00002000);
        }
        result.flowIds_ = flowIds_;
        if (((bitField0_ & 0x00004000) != 0)) {
          terminatingFlowIdsOld_.makeImmutable();
          bitField0_ = (bitField0_ & ~0x00004000);
        }
        result.terminatingFlowIdsOld_ = terminatingFlowIdsOld_;
        if (((bitField0_ & 0x00008000) != 0)) {
          terminatingFlowIds_.makeImmutable();
          bitField0_ = (bitField0_ & ~0x00008000);
        }
        result.terminatingFlowIds_ = terminatingFlowIds_;
        if (debugAnnotationsBuilder_ == null) {
          if (((bitField0_ & 0x00010000) != 0)) {
            debugAnnotations_ = java.util.Collections.unmodifiableList(debugAnnotations_);
            bitField0_ = (bitField0_ & ~0x00010000);
          }
          result.debugAnnotations_ = debugAnnotations_;
        } else {
          result.debugAnnotations_ = debugAnnotationsBuilder_.build();
        }
      }

      private void buildPartial0(perfetto.protos.TrackEventOuterClass.TrackEvent result) {
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000010) != 0)) {
          result.type_ = type_;
          to_bitField0_ |= 0x00000004;
        }
        if (((from_bitField0_ & 0x00000020) != 0)) {
          result.trackUuid_ = trackUuid_;
          to_bitField0_ |= 0x00000008;
        }
        if (((from_bitField0_ & 0x00020000) != 0)) {
          result.taskExecution_ = taskExecutionBuilder_ == null
              ? taskExecution_
              : taskExecutionBuilder_.build();
          to_bitField0_ |= 0x00000040;
        }
        if (((from_bitField0_ & 0x00040000) != 0)) {
          result.logMessage_ = logMessageBuilder_ == null
              ? logMessage_
              : logMessageBuilder_.build();
          to_bitField0_ |= 0x00000080;
        }
        if (((from_bitField0_ & 0x00080000) != 0)) {
          result.ccSchedulerState_ = ccSchedulerStateBuilder_ == null
              ? ccSchedulerState_
              : ccSchedulerStateBuilder_.build();
          to_bitField0_ |= 0x00000100;
        }
        if (((from_bitField0_ & 0x00100000) != 0)) {
          result.chromeUserEvent_ = chromeUserEventBuilder_ == null
              ? chromeUserEvent_
              : chromeUserEventBuilder_.build();
          to_bitField0_ |= 0x00000200;
        }
        if (((from_bitField0_ & 0x00200000) != 0)) {
          result.chromeKeyedService_ = chromeKeyedServiceBuilder_ == null
              ? chromeKeyedService_
              : chromeKeyedServiceBuilder_.build();
          to_bitField0_ |= 0x00000400;
        }
        if (((from_bitField0_ & 0x00400000) != 0)) {
          result.chromeLegacyIpc_ = chromeLegacyIpcBuilder_ == null
              ? chromeLegacyIpc_
              : chromeLegacyIpcBuilder_.build();
          to_bitField0_ |= 0x00000800;
        }
        if (((from_bitField0_ & 0x00800000) != 0)) {
          result.chromeHistogramSample_ = chromeHistogramSampleBuilder_ == null
              ? chromeHistogramSample_
              : chromeHistogramSampleBuilder_.build();
          to_bitField0_ |= 0x00001000;
        }
        if (((from_bitField0_ & 0x01000000) != 0)) {
          result.chromeLatencyInfo_ = chromeLatencyInfoBuilder_ == null
              ? chromeLatencyInfo_
              : chromeLatencyInfoBuilder_.build();
          to_bitField0_ |= 0x00002000;
        }
        if (((from_bitField0_ & 0x02000000) != 0)) {
          result.chromeFrameReporter_ = chromeFrameReporterBuilder_ == null
              ? chromeFrameReporter_
              : chromeFrameReporterBuilder_.build();
          to_bitField0_ |= 0x00004000;
        }
        if (((from_bitField0_ & 0x04000000) != 0)) {
          result.chromeApplicationStateInfo_ = chromeApplicationStateInfoBuilder_ == null
              ? chromeApplicationStateInfo_
              : chromeApplicationStateInfoBuilder_.build();
          to_bitField0_ |= 0x00008000;
        }
        if (((from_bitField0_ & 0x08000000) != 0)) {
          result.chromeRendererSchedulerState_ = chromeRendererSchedulerStateBuilder_ == null
              ? chromeRendererSchedulerState_
              : chromeRendererSchedulerStateBuilder_.build();
          to_bitField0_ |= 0x00010000;
        }
        if (((from_bitField0_ & 0x10000000) != 0)) {
          result.chromeWindowHandleEventInfo_ = chromeWindowHandleEventInfoBuilder_ == null
              ? chromeWindowHandleEventInfo_
              : chromeWindowHandleEventInfoBuilder_.build();
          to_bitField0_ |= 0x00020000;
        }
        if (((from_bitField0_ & 0x20000000) != 0)) {
          result.chromeContentSettingsEventInfo_ = chromeContentSettingsEventInfoBuilder_ == null
              ? chromeContentSettingsEventInfo_
              : chromeContentSettingsEventInfoBuilder_.build();
          to_bitField0_ |= 0x00040000;
        }
        if (((from_bitField0_ & 0x40000000) != 0)) {
          result.chromeActiveProcesses_ = chromeActiveProcessesBuilder_ == null
              ? chromeActiveProcesses_
              : chromeActiveProcessesBuilder_.build();
          to_bitField0_ |= 0x00080000;
        }
        result.bitField0_ |= to_bitField0_;
      }

      private void buildPartial1(perfetto.protos.TrackEventOuterClass.TrackEvent result) {
        int from_bitField1_ = bitField1_;
        int to_bitField0_ = 0;
        if (((from_bitField1_ & 0x00000002) != 0)) {
          result.chromeMessagePump_ = chromeMessagePumpBuilder_ == null
              ? chromeMessagePump_
              : chromeMessagePumpBuilder_.build();
          to_bitField0_ |= 0x00400000;
        }
        if (((from_bitField1_ & 0x00000004) != 0)) {
          result.chromeMojoEventInfo_ = chromeMojoEventInfoBuilder_ == null
              ? chromeMojoEventInfo_
              : chromeMojoEventInfoBuilder_.build();
          to_bitField0_ |= 0x00800000;
        }
        if (((from_bitField1_ & 0x00000200) != 0)) {
          result.legacyEvent_ = legacyEventBuilder_ == null
              ? legacyEvent_
              : legacyEventBuilder_.build();
          to_bitField0_ |= 0x40000000;
        }
        result.bitField0_ |= to_bitField0_;
      }

      private void buildPartialOneofs(perfetto.protos.TrackEventOuterClass.TrackEvent result) {
        result.nameFieldCase_ = nameFieldCase_;
        result.nameField_ = this.nameField_;
        result.counterValueFieldCase_ = counterValueFieldCase_;
        result.counterValueField_ = this.counterValueField_;
        result.sourceLocationFieldCase_ = sourceLocationFieldCase_;
        result.sourceLocationField_ = this.sourceLocationField_;
        if (sourceLocationFieldCase_ == 33 &&
            sourceLocationBuilder_ != null) {
          result.sourceLocationField_ = sourceLocationBuilder_.build();
        }
        result.timestampCase_ = timestampCase_;
        result.timestamp_ = this.timestamp_;
        result.threadTimeCase_ = threadTimeCase_;
        result.threadTime_ = this.threadTime_;
        result.threadInstructionCountCase_ = threadInstructionCountCase_;
        result.threadInstructionCount_ = this.threadInstructionCount_;
      }

      @java.lang.Override
      public Builder clone() {
        return super.clone();
      }
      @java.lang.Override
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.setField(field, value);
      }
      @java.lang.Override
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return super.clearField(field);
      }
      @java.lang.Override
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return super.clearOneof(oneof);
      }
      @java.lang.Override
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, java.lang.Object value) {
        return super.setRepeatedField(field, index, value);
      }
      @java.lang.Override
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.addRepeatedField(field, value);
      }
      @java.lang.Override
      public <Type> Builder setExtension(
          com.google.protobuf.GeneratedMessage.GeneratedExtension<
              perfetto.protos.TrackEventOuterClass.TrackEvent, Type> extension,
          Type value) {
        return super.setExtension(extension, value);
      }
      @java.lang.Override
      public <Type> Builder setExtension(
          com.google.protobuf.GeneratedMessage.GeneratedExtension<
              perfetto.protos.TrackEventOuterClass.TrackEvent, java.util.List<Type>> extension,
          int index, Type value) {
        return super.setExtension(extension, index, value);
      }
      @java.lang.Override
      public <Type> Builder addExtension(
          com.google.protobuf.GeneratedMessage.GeneratedExtension<
              perfetto.protos.TrackEventOuterClass.TrackEvent, java.util.List<Type>> extension,
          Type value) {
        return super.addExtension(extension, value);
      }
      @java.lang.Override
      public <Type> Builder clearExtension(
          com.google.protobuf.GeneratedMessage.GeneratedExtension<
              perfetto.protos.TrackEventOuterClass.TrackEvent, ?> extension) {
        return super.clearExtension(extension);
      }
      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof perfetto.protos.TrackEventOuterClass.TrackEvent) {
          return mergeFrom((perfetto.protos.TrackEventOuterClass.TrackEvent)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(perfetto.protos.TrackEventOuterClass.TrackEvent other) {
        if (other == perfetto.protos.TrackEventOuterClass.TrackEvent.getDefaultInstance()) return this;
        if (!other.categoryIids_.isEmpty()) {
          if (categoryIids_.isEmpty()) {
            categoryIids_ = other.categoryIids_;
            bitField0_ = (bitField0_ & ~0x00000001);
          } else {
            ensureCategoryIidsIsMutable();
            categoryIids_.addAll(other.categoryIids_);
          }
          onChanged();
        }
        if (!other.categories_.isEmpty()) {
          if (categories_.isEmpty()) {
            categories_ = other.categories_;
            bitField0_ = (bitField0_ & ~0x00000002);
          } else {
            ensureCategoriesIsMutable();
            categories_.addAll(other.categories_);
          }
          onChanged();
        }
        if (other.hasType()) {
          setType(other.getType());
        }
        if (other.hasTrackUuid()) {
          setTrackUuid(other.getTrackUuid());
        }
        if (!other.extraCounterTrackUuids_.isEmpty()) {
          if (extraCounterTrackUuids_.isEmpty()) {
            extraCounterTrackUuids_ = other.extraCounterTrackUuids_;
            bitField0_ = (bitField0_ & ~0x00000100);
          } else {
            ensureExtraCounterTrackUuidsIsMutable();
            extraCounterTrackUuids_.addAll(other.extraCounterTrackUuids_);
          }
          onChanged();
        }
        if (!other.extraCounterValues_.isEmpty()) {
          if (extraCounterValues_.isEmpty()) {
            extraCounterValues_ = other.extraCounterValues_;
            bitField0_ = (bitField0_ & ~0x00000200);
          } else {
            ensureExtraCounterValuesIsMutable();
            extraCounterValues_.addAll(other.extraCounterValues_);
          }
          onChanged();
        }
        if (!other.extraDoubleCounterTrackUuids_.isEmpty()) {
          if (extraDoubleCounterTrackUuids_.isEmpty()) {
            extraDoubleCounterTrackUuids_ = other.extraDoubleCounterTrackUuids_;
            bitField0_ = (bitField0_ & ~0x00000400);
          } else {
            ensureExtraDoubleCounterTrackUuidsIsMutable();
            extraDoubleCounterTrackUuids_.addAll(other.extraDoubleCounterTrackUuids_);
          }
          onChanged();
        }
        if (!other.extraDoubleCounterValues_.isEmpty()) {
          if (extraDoubleCounterValues_.isEmpty()) {
            extraDoubleCounterValues_ = other.extraDoubleCounterValues_;
            bitField0_ = (bitField0_ & ~0x00000800);
          } else {
            ensureExtraDoubleCounterValuesIsMutable();
            extraDoubleCounterValues_.addAll(other.extraDoubleCounterValues_);
          }
          onChanged();
        }
        if (!other.flowIdsOld_.isEmpty()) {
          if (flowIdsOld_.isEmpty()) {
            flowIdsOld_ = other.flowIdsOld_;
            bitField0_ = (bitField0_ & ~0x00001000);
          } else {
            ensureFlowIdsOldIsMutable();
            flowIdsOld_.addAll(other.flowIdsOld_);
          }
          onChanged();
        }
        if (!other.flowIds_.isEmpty()) {
          if (flowIds_.isEmpty()) {
            flowIds_ = other.flowIds_;
            bitField0_ = (bitField0_ & ~0x00002000);
          } else {
            ensureFlowIdsIsMutable();
            flowIds_.addAll(other.flowIds_);
          }
          onChanged();
        }
        if (!other.terminatingFlowIdsOld_.isEmpty()) {
          if (terminatingFlowIdsOld_.isEmpty()) {
            terminatingFlowIdsOld_ = other.terminatingFlowIdsOld_;
            bitField0_ = (bitField0_ & ~0x00004000);
          } else {
            ensureTerminatingFlowIdsOldIsMutable();
            terminatingFlowIdsOld_.addAll(other.terminatingFlowIdsOld_);
          }
          onChanged();
        }
        if (!other.terminatingFlowIds_.isEmpty()) {
          if (terminatingFlowIds_.isEmpty()) {
            terminatingFlowIds_ = other.terminatingFlowIds_;
            bitField0_ = (bitField0_ & ~0x00008000);
          } else {
            ensureTerminatingFlowIdsIsMutable();
            terminatingFlowIds_.addAll(other.terminatingFlowIds_);
          }
          onChanged();
        }
        if (debugAnnotationsBuilder_ == null) {
          if (!other.debugAnnotations_.isEmpty()) {
            if (debugAnnotations_.isEmpty()) {
              debugAnnotations_ = other.debugAnnotations_;
              bitField0_ = (bitField0_ & ~0x00010000);
            } else {
              ensureDebugAnnotationsIsMutable();
              debugAnnotations_.addAll(other.debugAnnotations_);
            }
            onChanged();
          }
        } else {
          if (!other.debugAnnotations_.isEmpty()) {
            if (debugAnnotationsBuilder_.isEmpty()) {
              debugAnnotationsBuilder_.dispose();
              debugAnnotationsBuilder_ = null;
              debugAnnotations_ = other.debugAnnotations_;
              bitField0_ = (bitField0_ & ~0x00010000);
              debugAnnotationsBuilder_ = 
                com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders ?
                   getDebugAnnotationsFieldBuilder() : null;
            } else {
              debugAnnotationsBuilder_.addAllMessages(other.debugAnnotations_);
            }
          }
        }
        if (other.hasTaskExecution()) {
          mergeTaskExecution(other.getTaskExecution());
        }
        if (other.hasLogMessage()) {
          mergeLogMessage(other.getLogMessage());
        }
        if (other.hasCcSchedulerState()) {
          mergeCcSchedulerState(other.getCcSchedulerState());
        }
        if (other.hasChromeUserEvent()) {
          mergeChromeUserEvent(other.getChromeUserEvent());
        }
        if (other.hasChromeKeyedService()) {
          mergeChromeKeyedService(other.getChromeKeyedService());
        }
        if (other.hasChromeLegacyIpc()) {
          mergeChromeLegacyIpc(other.getChromeLegacyIpc());
        }
        if (other.hasChromeHistogramSample()) {
          mergeChromeHistogramSample(other.getChromeHistogramSample());
        }
        if (other.hasChromeLatencyInfo()) {
          mergeChromeLatencyInfo(other.getChromeLatencyInfo());
        }
        if (other.hasChromeFrameReporter()) {
          mergeChromeFrameReporter(other.getChromeFrameReporter());
        }
        if (other.hasChromeApplicationStateInfo()) {
          mergeChromeApplicationStateInfo(other.getChromeApplicationStateInfo());
        }
        if (other.hasChromeRendererSchedulerState()) {
          mergeChromeRendererSchedulerState(other.getChromeRendererSchedulerState());
        }
        if (other.hasChromeWindowHandleEventInfo()) {
          mergeChromeWindowHandleEventInfo(other.getChromeWindowHandleEventInfo());
        }
        if (other.hasChromeContentSettingsEventInfo()) {
          mergeChromeContentSettingsEventInfo(other.getChromeContentSettingsEventInfo());
        }
        if (other.hasChromeActiveProcesses()) {
          mergeChromeActiveProcesses(other.getChromeActiveProcesses());
        }
        if (other.hasChromeMessagePump()) {
          mergeChromeMessagePump(other.getChromeMessagePump());
        }
        if (other.hasChromeMojoEventInfo()) {
          mergeChromeMojoEventInfo(other.getChromeMojoEventInfo());
        }
        if (other.hasLegacyEvent()) {
          mergeLegacyEvent(other.getLegacyEvent());
        }
        switch (other.getNameFieldCase()) {
          case NAME_IID: {
            setNameIid(other.getNameIid());
            break;
          }
          case NAME: {
            nameFieldCase_ = 23;
            nameField_ = other.nameField_;
            onChanged();
            break;
          }
          case NAMEFIELD_NOT_SET: {
            break;
          }
        }
        switch (other.getCounterValueFieldCase()) {
          case COUNTER_VALUE: {
            setCounterValue(other.getCounterValue());
            break;
          }
          case DOUBLE_COUNTER_VALUE: {
            setDoubleCounterValue(other.getDoubleCounterValue());
            break;
          }
          case COUNTERVALUEFIELD_NOT_SET: {
            break;
          }
        }
        switch (other.getSourceLocationFieldCase()) {
          case SOURCE_LOCATION: {
            mergeSourceLocation(other.getSourceLocation());
            break;
          }
          case SOURCE_LOCATION_IID: {
            setSourceLocationIid(other.getSourceLocationIid());
            break;
          }
          case SOURCELOCATIONFIELD_NOT_SET: {
            break;
          }
        }
        switch (other.getTimestampCase()) {
          case TIMESTAMP_DELTA_US: {
            setTimestampDeltaUs(other.getTimestampDeltaUs());
            break;
          }
          case TIMESTAMP_ABSOLUTE_US: {
            setTimestampAbsoluteUs(other.getTimestampAbsoluteUs());
            break;
          }
          case TIMESTAMP_NOT_SET: {
            break;
          }
        }
        switch (other.getThreadTimeCase()) {
          case THREAD_TIME_DELTA_US: {
            setThreadTimeDeltaUs(other.getThreadTimeDeltaUs());
            break;
          }
          case THREAD_TIME_ABSOLUTE_US: {
            setThreadTimeAbsoluteUs(other.getThreadTimeAbsoluteUs());
            break;
          }
          case THREADTIME_NOT_SET: {
            break;
          }
        }
        switch (other.getThreadInstructionCountCase()) {
          case THREAD_INSTRUCTION_COUNT_DELTA: {
            setThreadInstructionCountDelta(other.getThreadInstructionCountDelta());
            break;
          }
          case THREAD_INSTRUCTION_COUNT_ABSOLUTE: {
            setThreadInstructionCountAbsolute(other.getThreadInstructionCountAbsolute());
            break;
          }
          case THREADINSTRUCTIONCOUNT_NOT_SET: {
            break;
          }
        }
        this.mergeExtensionFields(other);
        this.mergeUnknownFields(other.getUnknownFields());
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        if (!extensionsAreInitialized()) {
          return false;
        }
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        if (extensionRegistry == null) {
          throw new java.lang.NullPointerException();
        }
        try {
          boolean done = false;
          while (!done) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                done = true;
                break;
              case 8: {
                timestamp_ = input.readInt64();
                timestampCase_ = 1;
                break;
              } // case 8
              case 16: {
                threadTime_ = input.readInt64();
                threadTimeCase_ = 2;
                break;
              } // case 16
              case 24: {
                long v = input.readUInt64();
                ensureCategoryIidsIsMutable();
                categoryIids_.addLong(v);
                break;
              } // case 24
              case 26: {
                int length = input.readRawVarint32();
                int limit = input.pushLimit(length);
                ensureCategoryIidsIsMutable();
                while (input.getBytesUntilLimit() > 0) {
                  categoryIids_.addLong(input.readUInt64());
                }
                input.popLimit(limit);
                break;
              } // case 26
              case 34: {
                perfetto.protos.DebugAnnotationOuterClass.DebugAnnotation m =
                    input.readMessage(
                        perfetto.protos.DebugAnnotationOuterClass.DebugAnnotation.PARSER,
                        extensionRegistry);
                if (debugAnnotationsBuilder_ == null) {
                  ensureDebugAnnotationsIsMutable();
                  debugAnnotations_.add(m);
                } else {
                  debugAnnotationsBuilder_.addMessage(m);
                }
                break;
              } // case 34
              case 42: {
                input.readMessage(
                    getTaskExecutionFieldBuilder().getBuilder(),
                    extensionRegistry);
                bitField0_ |= 0x00020000;
                break;
              } // case 42
              case 50: {
                input.readMessage(
                    getLegacyEventFieldBuilder().getBuilder(),
                    extensionRegistry);
                bitField1_ |= 0x00000200;
                break;
              } // case 50
              case 64: {
                threadInstructionCount_ = input.readInt64();
                threadInstructionCountCase_ = 8;
                break;
              } // case 64
              case 72: {
                int tmpRaw = input.readEnum();
                perfetto.protos.TrackEventOuterClass.TrackEvent.Type tmpValue =
                    perfetto.protos.TrackEventOuterClass.TrackEvent.Type.forNumber(tmpRaw);
                if (tmpValue == null) {
                  mergeUnknownVarintField(9, tmpRaw);
                } else {
                  type_ = tmpRaw;
                  bitField0_ |= 0x00000010;
                }
                break;
              } // case 72
              case 80: {
                nameField_ = input.readUInt64();
                nameFieldCase_ = 10;
                break;
              } // case 80
              case 88: {
                trackUuid_ = input.readUInt64();
                bitField0_ |= 0x00000020;
                break;
              } // case 88
              case 96: {
                long v = input.readInt64();
                ensureExtraCounterValuesIsMutable();
                extraCounterValues_.addLong(v);
                break;
              } // case 96
              case 98: {
                int length = input.readRawVarint32();
                int limit = input.pushLimit(length);
                ensureExtraCounterValuesIsMutable();
                while (input.getBytesUntilLimit() > 0) {
                  extraCounterValues_.addLong(input.readInt64());
                }
                input.popLimit(limit);
                break;
              } // case 98
              case 128: {
                timestamp_ = input.readInt64();
                timestampCase_ = 16;
                break;
              } // case 128
              case 136: {
                threadTime_ = input.readInt64();
                threadTimeCase_ = 17;
                break;
              } // case 136
              case 160: {
                threadInstructionCount_ = input.readInt64();
                threadInstructionCountCase_ = 20;
                break;
              } // case 160
              case 170: {
                input.readMessage(
                    getLogMessageFieldBuilder().getBuilder(),
                    extensionRegistry);
                bitField0_ |= 0x00040000;
                break;
              } // case 170
              case 178: {
                com.google.protobuf.ByteString bs = input.readBytes();
                ensureCategoriesIsMutable();
                categories_.add(bs);
                break;
              } // case 178
              case 186: {
                com.google.protobuf.ByteString bs = input.readBytes();
                nameFieldCase_ = 23;
                nameField_ = bs;
                break;
              } // case 186
              case 194: {
                input.readMessage(
                    getCcSchedulerStateFieldBuilder().getBuilder(),
                    extensionRegistry);
                bitField0_ |= 0x00080000;
                break;
              } // case 194
              case 202: {
                input.readMessage(
                    getChromeUserEventFieldBuilder().getBuilder(),
                    extensionRegistry);
                bitField0_ |= 0x00100000;
                break;
              } // case 202
              case 210: {
                input.readMessage(
                    getChromeKeyedServiceFieldBuilder().getBuilder(),
                    extensionRegistry);
                bitField0_ |= 0x00200000;
                break;
              } // case 210
              case 218: {
                input.readMessage(
                    getChromeLegacyIpcFieldBuilder().getBuilder(),
                    extensionRegistry);
                bitField0_ |= 0x00400000;
                break;
              } // case 218
              case 226: {
                input.readMessage(
                    getChromeHistogramSampleFieldBuilder().getBuilder(),
                    extensionRegistry);
                bitField0_ |= 0x00800000;
                break;
              } // case 226
              case 234: {
                input.readMessage(
                    getChromeLatencyInfoFieldBuilder().getBuilder(),
                    extensionRegistry);
                bitField0_ |= 0x01000000;
                break;
              } // case 234
              case 240: {
                counterValueField_ = input.readInt64();
                counterValueFieldCase_ = 30;
                break;
              } // case 240
              case 248: {
                long v = input.readUInt64();
                ensureExtraCounterTrackUuidsIsMutable();
                extraCounterTrackUuids_.addLong(v);
                break;
              } // case 248
              case 250: {
                int length = input.readRawVarint32();
                int limit = input.pushLimit(length);
                ensureExtraCounterTrackUuidsIsMutable();
                while (input.getBytesUntilLimit() > 0) {
                  extraCounterTrackUuids_.addLong(input.readUInt64());
                }
                input.popLimit(limit);
                break;
              } // case 250
              case 258: {
                input.readMessage(
                    getChromeFrameReporterFieldBuilder().getBuilder(),
                    extensionRegistry);
                bitField0_ |= 0x02000000;
                break;
              } // case 258
              case 266: {
                input.readMessage(
                    getSourceLocationFieldBuilder().getBuilder(),
                    extensionRegistry);
                sourceLocationFieldCase_ = 33;
                break;
              } // case 266
              case 272: {
                sourceLocationField_ = input.readUInt64();
                sourceLocationFieldCase_ = 34;
                break;
              } // case 272
              case 282: {
                input.readMessage(
                    getChromeMessagePumpFieldBuilder().getBuilder(),
                    extensionRegistry);
                bitField1_ |= 0x00000002;
                break;
              } // case 282
              case 288: {
                long v = input.readUInt64();
                ensureFlowIdsOldIsMutable();
                flowIdsOld_.addLong(v);
                break;
              } // case 288
              case 290: {
                int length = input.readRawVarint32();
                int limit = input.pushLimit(length);
                ensureFlowIdsOldIsMutable();
                while (input.getBytesUntilLimit() > 0) {
                  flowIdsOld_.addLong(input.readUInt64());
                }
                input.popLimit(limit);
                break;
              } // case 290
              case 306: {
                input.readMessage(
                    getChromeMojoEventInfoFieldBuilder().getBuilder(),
                    extensionRegistry);
                bitField1_ |= 0x00000004;
                break;
              } // case 306
              case 314: {
                input.readMessage(
                    getChromeApplicationStateInfoFieldBuilder().getBuilder(),
                    extensionRegistry);
                bitField0_ |= 0x04000000;
                break;
              } // case 314
              case 322: {
                input.readMessage(
                    getChromeRendererSchedulerStateFieldBuilder().getBuilder(),
                    extensionRegistry);
                bitField0_ |= 0x08000000;
                break;
              } // case 322
              case 330: {
                input.readMessage(
                    getChromeWindowHandleEventInfoFieldBuilder().getBuilder(),
                    extensionRegistry);
                bitField0_ |= 0x10000000;
                break;
              } // case 330
              case 336: {
                long v = input.readUInt64();
                ensureTerminatingFlowIdsOldIsMutable();
                terminatingFlowIdsOld_.addLong(v);
                break;
              } // case 336
              case 338: {
                int length = input.readRawVarint32();
                int limit = input.pushLimit(length);
                ensureTerminatingFlowIdsOldIsMutable();
                while (input.getBytesUntilLimit() > 0) {
                  terminatingFlowIdsOld_.addLong(input.readUInt64());
                }
                input.popLimit(limit);
                break;
              } // case 338
              case 346: {
                input.readMessage(
                    getChromeContentSettingsEventInfoFieldBuilder().getBuilder(),
                    extensionRegistry);
                bitField0_ |= 0x20000000;
                break;
              } // case 346
              case 353: {
                counterValueField_ = input.readDouble();
                counterValueFieldCase_ = 44;
                break;
              } // case 353
              case 360: {
                long v = input.readUInt64();
                ensureExtraDoubleCounterTrackUuidsIsMutable();
                extraDoubleCounterTrackUuids_.addLong(v);
                break;
              } // case 360
              case 362: {
                int length = input.readRawVarint32();
                int limit = input.pushLimit(length);
                ensureExtraDoubleCounterTrackUuidsIsMutable();
                while (input.getBytesUntilLimit() > 0) {
                  extraDoubleCounterTrackUuids_.addLong(input.readUInt64());
                }
                input.popLimit(limit);
                break;
              } // case 362
              case 369: {
                double v = input.readDouble();
                ensureExtraDoubleCounterValuesIsMutable();
                extraDoubleCounterValues_.addDouble(v);
                break;
              } // case 369
              case 370: {
                int length = input.readRawVarint32();
                int limit = input.pushLimit(length);
                ensureExtraDoubleCounterValuesIsMutable();
                while (input.getBytesUntilLimit() > 0) {
                  extraDoubleCounterValues_.addDouble(input.readDouble());
                }
                input.popLimit(limit);
                break;
              } // case 370
              case 377: {
                long v = input.readFixed64();
                ensureFlowIdsIsMutable();
                flowIds_.addLong(v);
                break;
              } // case 377
              case 378: {
                int length = input.readRawVarint32();
                int limit = input.pushLimit(length);
                ensureFlowIdsIsMutable();
                while (input.getBytesUntilLimit() > 0) {
                  flowIds_.addLong(input.readFixed64());
                }
                input.popLimit(limit);
                break;
              } // case 378
              case 385: {
                long v = input.readFixed64();
                ensureTerminatingFlowIdsIsMutable();
                terminatingFlowIds_.addLong(v);
                break;
              } // case 385
              case 386: {
                int length = input.readRawVarint32();
                int limit = input.pushLimit(length);
                ensureTerminatingFlowIdsIsMutable();
                while (input.getBytesUntilLimit() > 0) {
                  terminatingFlowIds_.addLong(input.readFixed64());
                }
                input.popLimit(limit);
                break;
              } // case 386
              case 394: {
                input.readMessage(
                    getChromeActiveProcessesFieldBuilder().getBuilder(),
                    extensionRegistry);
                bitField0_ |= 0x40000000;
                break;
              } // case 394
              default: {
                if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                  done = true; // was an endgroup tag
                }
                break;
              } // default:
            } // switch (tag)
          } // while (!done)
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.unwrapIOException();
        } finally {
          onChanged();
        } // finally
        return this;
      }
      private int nameFieldCase_ = 0;
      private java.lang.Object nameField_;
      public NameFieldCase
          getNameFieldCase() {
        return NameFieldCase.forNumber(
            nameFieldCase_);
      }

      public Builder clearNameField() {
        nameFieldCase_ = 0;
        nameField_ = null;
        onChanged();
        return this;
      }

      private int counterValueFieldCase_ = 0;
      private java.lang.Object counterValueField_;
      public CounterValueFieldCase
          getCounterValueFieldCase() {
        return CounterValueFieldCase.forNumber(
            counterValueFieldCase_);
      }

      public Builder clearCounterValueField() {
        counterValueFieldCase_ = 0;
        counterValueField_ = null;
        onChanged();
        return this;
      }

      private int sourceLocationFieldCase_ = 0;
      private java.lang.Object sourceLocationField_;
      public SourceLocationFieldCase
          getSourceLocationFieldCase() {
        return SourceLocationFieldCase.forNumber(
            sourceLocationFieldCase_);
      }

      public Builder clearSourceLocationField() {
        sourceLocationFieldCase_ = 0;
        sourceLocationField_ = null;
        onChanged();
        return this;
      }

      private int timestampCase_ = 0;
      private java.lang.Object timestamp_;
      public TimestampCase
          getTimestampCase() {
        return TimestampCase.forNumber(
            timestampCase_);
      }

      public Builder clearTimestamp() {
        timestampCase_ = 0;
        timestamp_ = null;
        onChanged();
        return this;
      }

      private int threadTimeCase_ = 0;
      private java.lang.Object threadTime_;
      public ThreadTimeCase
          getThreadTimeCase() {
        return ThreadTimeCase.forNumber(
            threadTimeCase_);
      }

      public Builder clearThreadTime() {
        threadTimeCase_ = 0;
        threadTime_ = null;
        onChanged();
        return this;
      }

      private int threadInstructionCountCase_ = 0;
      private java.lang.Object threadInstructionCount_;
      public ThreadInstructionCountCase
          getThreadInstructionCountCase() {
        return ThreadInstructionCountCase.forNumber(
            threadInstructionCountCase_);
      }

      public Builder clearThreadInstructionCount() {
        threadInstructionCountCase_ = 0;
        threadInstructionCount_ = null;
        onChanged();
        return this;
      }

      private int bitField0_;
      private int bitField1_;

      private com.google.protobuf.Internal.LongList categoryIids_ = emptyLongList();
      private void ensureCategoryIidsIsMutable() {
        if (!((bitField0_ & 0x00000001) != 0)) {
          categoryIids_ = mutableCopy(categoryIids_);
          bitField0_ |= 0x00000001;
        }
      }
      /**
       * <pre>
       * Names of categories of the event. In the client library, categories are a
       * way to turn groups of individual events on or off.
       * interned EventCategoryName.
       * </pre>
       *
       * <code>repeated uint64 category_iids = 3;</code>
       * @return A list containing the categoryIids.
       */
      public java.util.List<java.lang.Long>
          getCategoryIidsList() {
        return ((bitField0_ & 0x00000001) != 0) ?
                 java.util.Collections.unmodifiableList(categoryIids_) : categoryIids_;
      }
      /**
       * <pre>
       * Names of categories of the event. In the client library, categories are a
       * way to turn groups of individual events on or off.
       * interned EventCategoryName.
       * </pre>
       *
       * <code>repeated uint64 category_iids = 3;</code>
       * @return The count of categoryIids.
       */
      public int getCategoryIidsCount() {
        return categoryIids_.size();
      }
      /**
       * <pre>
       * Names of categories of the event. In the client library, categories are a
       * way to turn groups of individual events on or off.
       * interned EventCategoryName.
       * </pre>
       *
       * <code>repeated uint64 category_iids = 3;</code>
       * @param index The index of the element to return.
       * @return The categoryIids at the given index.
       */
      public long getCategoryIids(int index) {
        return categoryIids_.getLong(index);
      }
      /**
       * <pre>
       * Names of categories of the event. In the client library, categories are a
       * way to turn groups of individual events on or off.
       * interned EventCategoryName.
       * </pre>
       *
       * <code>repeated uint64 category_iids = 3;</code>
       * @param index The index to set the value at.
       * @param value The categoryIids to set.
       * @return This builder for chaining.
       */
      public Builder setCategoryIids(
          int index, long value) {
        
        ensureCategoryIidsIsMutable();
        categoryIids_.setLong(index, value);
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Names of categories of the event. In the client library, categories are a
       * way to turn groups of individual events on or off.
       * interned EventCategoryName.
       * </pre>
       *
       * <code>repeated uint64 category_iids = 3;</code>
       * @param value The categoryIids to add.
       * @return This builder for chaining.
       */
      public Builder addCategoryIids(long value) {
        
        ensureCategoryIidsIsMutable();
        categoryIids_.addLong(value);
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Names of categories of the event. In the client library, categories are a
       * way to turn groups of individual events on or off.
       * interned EventCategoryName.
       * </pre>
       *
       * <code>repeated uint64 category_iids = 3;</code>
       * @param values The categoryIids to add.
       * @return This builder for chaining.
       */
      public Builder addAllCategoryIids(
          java.lang.Iterable<? extends java.lang.Long> values) {
        ensureCategoryIidsIsMutable();
        com.google.protobuf.AbstractMessageLite.Builder.addAll(
            values, categoryIids_);
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Names of categories of the event. In the client library, categories are a
       * way to turn groups of individual events on or off.
       * interned EventCategoryName.
       * </pre>
       *
       * <code>repeated uint64 category_iids = 3;</code>
       * @return This builder for chaining.
       */
      public Builder clearCategoryIids() {
        categoryIids_ = emptyLongList();
        bitField0_ = (bitField0_ & ~0x00000001);
        onChanged();
        return this;
      }

      private com.google.protobuf.LazyStringList categories_ = com.google.protobuf.LazyStringArrayList.EMPTY;
      private void ensureCategoriesIsMutable() {
        if (!((bitField0_ & 0x00000002) != 0)) {
          categories_ = new com.google.protobuf.LazyStringArrayList(categories_);
          bitField0_ |= 0x00000002;
         }
      }
      /**
       * <pre>
       * non-interned variant.
       * </pre>
       *
       * <code>repeated string categories = 22;</code>
       * @return A list containing the categories.
       */
      public com.google.protobuf.ProtocolStringList
          getCategoriesList() {
        return categories_.getUnmodifiableView();
      }
      /**
       * <pre>
       * non-interned variant.
       * </pre>
       *
       * <code>repeated string categories = 22;</code>
       * @return The count of categories.
       */
      public int getCategoriesCount() {
        return categories_.size();
      }
      /**
       * <pre>
       * non-interned variant.
       * </pre>
       *
       * <code>repeated string categories = 22;</code>
       * @param index The index of the element to return.
       * @return The categories at the given index.
       */
      public java.lang.String getCategories(int index) {
        return categories_.get(index);
      }
      /**
       * <pre>
       * non-interned variant.
       * </pre>
       *
       * <code>repeated string categories = 22;</code>
       * @param index The index of the value to return.
       * @return The bytes of the categories at the given index.
       */
      public com.google.protobuf.ByteString
          getCategoriesBytes(int index) {
        return categories_.getByteString(index);
      }
      /**
       * <pre>
       * non-interned variant.
       * </pre>
       *
       * <code>repeated string categories = 22;</code>
       * @param index The index to set the value at.
       * @param value The categories to set.
       * @return This builder for chaining.
       */
      public Builder setCategories(
          int index, java.lang.String value) {
        if (value == null) { throw new NullPointerException(); }
        ensureCategoriesIsMutable();
        categories_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <pre>
       * non-interned variant.
       * </pre>
       *
       * <code>repeated string categories = 22;</code>
       * @param value The categories to add.
       * @return This builder for chaining.
       */
      public Builder addCategories(
          java.lang.String value) {
        if (value == null) { throw new NullPointerException(); }
        ensureCategoriesIsMutable();
        categories_.add(value);
        onChanged();
        return this;
      }
      /**
       * <pre>
       * non-interned variant.
       * </pre>
       *
       * <code>repeated string categories = 22;</code>
       * @param values The categories to add.
       * @return This builder for chaining.
       */
      public Builder addAllCategories(
          java.lang.Iterable<java.lang.String> values) {
        ensureCategoriesIsMutable();
        com.google.protobuf.AbstractMessageLite.Builder.addAll(
            values, categories_);
        onChanged();
        return this;
      }
      /**
       * <pre>
       * non-interned variant.
       * </pre>
       *
       * <code>repeated string categories = 22;</code>
       * @return This builder for chaining.
       */
      public Builder clearCategories() {
        categories_ = com.google.protobuf.LazyStringArrayList.EMPTY;
        bitField0_ = (bitField0_ & ~0x00000002);
        onChanged();
        return this;
      }
      /**
       * <pre>
       * non-interned variant.
       * </pre>
       *
       * <code>repeated string categories = 22;</code>
       * @param value The bytes of the categories to add.
       * @return This builder for chaining.
       */
      public Builder addCategoriesBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) { throw new NullPointerException(); }
        ensureCategoriesIsMutable();
        categories_.add(value);
        onChanged();
        return this;
      }

      /**
       * <pre>
       * interned EventName.
       * </pre>
       *
       * <code>uint64 name_iid = 10;</code>
       * @return Whether the nameIid field is set.
       */
      public boolean hasNameIid() {
        return nameFieldCase_ == 10;
      }
      /**
       * <pre>
       * interned EventName.
       * </pre>
       *
       * <code>uint64 name_iid = 10;</code>
       * @return The nameIid.
       */
      public long getNameIid() {
        if (nameFieldCase_ == 10) {
          return (java.lang.Long) nameField_;
        }
        return 0L;
      }
      /**
       * <pre>
       * interned EventName.
       * </pre>
       *
       * <code>uint64 name_iid = 10;</code>
       * @param value The nameIid to set.
       * @return This builder for chaining.
       */
      public Builder setNameIid(long value) {
        
        nameFieldCase_ = 10;
        nameField_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * interned EventName.
       * </pre>
       *
       * <code>uint64 name_iid = 10;</code>
       * @return This builder for chaining.
       */
      public Builder clearNameIid() {
        if (nameFieldCase_ == 10) {
          nameFieldCase_ = 0;
          nameField_ = null;
          onChanged();
        }
        return this;
      }

      /**
       * <pre>
       * non-interned variant.
       * </pre>
       *
       * <code>string name = 23;</code>
       * @return Whether the name field is set.
       */
      @java.lang.Override
      public boolean hasName() {
        return nameFieldCase_ == 23;
      }
      /**
       * <pre>
       * non-interned variant.
       * </pre>
       *
       * <code>string name = 23;</code>
       * @return The name.
       */
      @java.lang.Override
      public java.lang.String getName() {
        java.lang.Object ref = "";
        if (nameFieldCase_ == 23) {
          ref = nameField_;
        }
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          if (nameFieldCase_ == 23) {
            if (bs.isValidUtf8()) {
              nameField_ = s;
            }
          }
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <pre>
       * non-interned variant.
       * </pre>
       *
       * <code>string name = 23;</code>
       * @return The bytes for name.
       */
      @java.lang.Override
      public com.google.protobuf.ByteString
          getNameBytes() {
        java.lang.Object ref = "";
        if (nameFieldCase_ == 23) {
          ref = nameField_;
        }
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          if (nameFieldCase_ == 23) {
            nameField_ = b;
          }
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <pre>
       * non-interned variant.
       * </pre>
       *
       * <code>string name = 23;</code>
       * @param value The name to set.
       * @return This builder for chaining.
       */
      public Builder setName(
          java.lang.String value) {
        if (value == null) { throw new NullPointerException(); }
        nameFieldCase_ = 23;
        nameField_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * non-interned variant.
       * </pre>
       *
       * <code>string name = 23;</code>
       * @return This builder for chaining.
       */
      public Builder clearName() {
        if (nameFieldCase_ == 23) {
          nameFieldCase_ = 0;
          nameField_ = null;
          onChanged();
        }
        return this;
      }
      /**
       * <pre>
       * non-interned variant.
       * </pre>
       *
       * <code>string name = 23;</code>
       * @param value The bytes for name to set.
       * @return This builder for chaining.
       */
      public Builder setNameBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) { throw new NullPointerException(); }
        nameFieldCase_ = 23;
        nameField_ = value;
        onChanged();
        return this;
      }

      private int type_ = 0;
      /**
       * <code>optional .perfetto.protos.TrackEvent.Type type = 9;</code>
       * @return Whether the type field is set.
       */
      @java.lang.Override public boolean hasType() {
        return ((bitField0_ & 0x00000010) != 0);
      }
      /**
       * <code>optional .perfetto.protos.TrackEvent.Type type = 9;</code>
       * @return The type.
       */
      @java.lang.Override
      public perfetto.protos.TrackEventOuterClass.TrackEvent.Type getType() {
        perfetto.protos.TrackEventOuterClass.TrackEvent.Type result = perfetto.protos.TrackEventOuterClass.TrackEvent.Type.forNumber(type_);
        return result == null ? perfetto.protos.TrackEventOuterClass.TrackEvent.Type.TYPE_UNSPECIFIED : result;
      }
      /**
       * <code>optional .perfetto.protos.TrackEvent.Type type = 9;</code>
       * @param value The type to set.
       * @return This builder for chaining.
       */
      public Builder setType(perfetto.protos.TrackEventOuterClass.TrackEvent.Type value) {
        if (value == null) {
          throw new NullPointerException();
        }
        bitField0_ |= 0x00000010;
        type_ = value.getNumber();
        onChanged();
        return this;
      }
      /**
       * <code>optional .perfetto.protos.TrackEvent.Type type = 9;</code>
       * @return This builder for chaining.
       */
      public Builder clearType() {
        bitField0_ = (bitField0_ & ~0x00000010);
        type_ = 0;
        onChanged();
        return this;
      }

      private long trackUuid_ ;
      /**
       * <pre>
       * Identifies the track of the event. The default value may be overridden
       * using TrackEventDefaults, e.g., to specify the track of the TraceWriter's
       * sequence (in most cases sequence = one thread). If no value is specified
       * here or in TrackEventDefaults, the TrackEvent will be associated with an
       * implicit trace-global track (uuid 0). See TrackDescriptor::uuid.
       * </pre>
       *
       * <code>optional uint64 track_uuid = 11;</code>
       * @return Whether the trackUuid field is set.
       */
      @java.lang.Override
      public boolean hasTrackUuid() {
        return ((bitField0_ & 0x00000020) != 0);
      }
      /**
       * <pre>
       * Identifies the track of the event. The default value may be overridden
       * using TrackEventDefaults, e.g., to specify the track of the TraceWriter's
       * sequence (in most cases sequence = one thread). If no value is specified
       * here or in TrackEventDefaults, the TrackEvent will be associated with an
       * implicit trace-global track (uuid 0). See TrackDescriptor::uuid.
       * </pre>
       *
       * <code>optional uint64 track_uuid = 11;</code>
       * @return The trackUuid.
       */
      @java.lang.Override
      public long getTrackUuid() {
        return trackUuid_;
      }
      /**
       * <pre>
       * Identifies the track of the event. The default value may be overridden
       * using TrackEventDefaults, e.g., to specify the track of the TraceWriter's
       * sequence (in most cases sequence = one thread). If no value is specified
       * here or in TrackEventDefaults, the TrackEvent will be associated with an
       * implicit trace-global track (uuid 0). See TrackDescriptor::uuid.
       * </pre>
       *
       * <code>optional uint64 track_uuid = 11;</code>
       * @param value The trackUuid to set.
       * @return This builder for chaining.
       */
      public Builder setTrackUuid(long value) {
        
        trackUuid_ = value;
        bitField0_ |= 0x00000020;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Identifies the track of the event. The default value may be overridden
       * using TrackEventDefaults, e.g., to specify the track of the TraceWriter's
       * sequence (in most cases sequence = one thread). If no value is specified
       * here or in TrackEventDefaults, the TrackEvent will be associated with an
       * implicit trace-global track (uuid 0). See TrackDescriptor::uuid.
       * </pre>
       *
       * <code>optional uint64 track_uuid = 11;</code>
       * @return This builder for chaining.
       */
      public Builder clearTrackUuid() {
        bitField0_ = (bitField0_ & ~0x00000020);
        trackUuid_ = 0L;
        onChanged();
        return this;
      }

      /**
       * <code>int64 counter_value = 30;</code>
       * @return Whether the counterValue field is set.
       */
      public boolean hasCounterValue() {
        return counterValueFieldCase_ == 30;
      }
      /**
       * <code>int64 counter_value = 30;</code>
       * @return The counterValue.
       */
      public long getCounterValue() {
        if (counterValueFieldCase_ == 30) {
          return (java.lang.Long) counterValueField_;
        }
        return 0L;
      }
      /**
       * <code>int64 counter_value = 30;</code>
       * @param value The counterValue to set.
       * @return This builder for chaining.
       */
      public Builder setCounterValue(long value) {
        
        counterValueFieldCase_ = 30;
        counterValueField_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>int64 counter_value = 30;</code>
       * @return This builder for chaining.
       */
      public Builder clearCounterValue() {
        if (counterValueFieldCase_ == 30) {
          counterValueFieldCase_ = 0;
          counterValueField_ = null;
          onChanged();
        }
        return this;
      }

      /**
       * <code>double double_counter_value = 44;</code>
       * @return Whether the doubleCounterValue field is set.
       */
      public boolean hasDoubleCounterValue() {
        return counterValueFieldCase_ == 44;
      }
      /**
       * <code>double double_counter_value = 44;</code>
       * @return The doubleCounterValue.
       */
      public double getDoubleCounterValue() {
        if (counterValueFieldCase_ == 44) {
          return (java.lang.Double) counterValueField_;
        }
        return 0D;
      }
      /**
       * <code>double double_counter_value = 44;</code>
       * @param value The doubleCounterValue to set.
       * @return This builder for chaining.
       */
      public Builder setDoubleCounterValue(double value) {
        
        counterValueFieldCase_ = 44;
        counterValueField_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>double double_counter_value = 44;</code>
       * @return This builder for chaining.
       */
      public Builder clearDoubleCounterValue() {
        if (counterValueFieldCase_ == 44) {
          counterValueFieldCase_ = 0;
          counterValueField_ = null;
          onChanged();
        }
        return this;
      }

      private com.google.protobuf.Internal.LongList extraCounterTrackUuids_ = emptyLongList();
      private void ensureExtraCounterTrackUuidsIsMutable() {
        if (!((bitField0_ & 0x00000100) != 0)) {
          extraCounterTrackUuids_ = mutableCopy(extraCounterTrackUuids_);
          bitField0_ |= 0x00000100;
        }
      }
      /**
       * <pre>
       * To encode counter values more efficiently, we support attaching additional
       * counter values to a TrackEvent of any type. All values will share the same
       * timestamp specified in the TracePacket. The value at
       * extra_counter_values[N] is for the counter track referenced by
       * extra_counter_track_uuids[N].
       * |extra_counter_track_uuids| may also be set via TrackEventDefaults. There
       * should always be equal or more uuids than values. It is valid to set more
       * uuids (e.g. via defaults) than values. If uuids are specified in
       * TrackEventDefaults and a TrackEvent, the TrackEvent uuids override the
       * default uuid list.
       * For example, this allows snapshotting the thread time clock at each
       * thread-track BEGIN and END event to capture the cpu time delta of a slice.
       * </pre>
       *
       * <code>repeated uint64 extra_counter_track_uuids = 31;</code>
       * @return A list containing the extraCounterTrackUuids.
       */
      public java.util.List<java.lang.Long>
          getExtraCounterTrackUuidsList() {
        return ((bitField0_ & 0x00000100) != 0) ?
                 java.util.Collections.unmodifiableList(extraCounterTrackUuids_) : extraCounterTrackUuids_;
      }
      /**
       * <pre>
       * To encode counter values more efficiently, we support attaching additional
       * counter values to a TrackEvent of any type. All values will share the same
       * timestamp specified in the TracePacket. The value at
       * extra_counter_values[N] is for the counter track referenced by
       * extra_counter_track_uuids[N].
       * |extra_counter_track_uuids| may also be set via TrackEventDefaults. There
       * should always be equal or more uuids than values. It is valid to set more
       * uuids (e.g. via defaults) than values. If uuids are specified in
       * TrackEventDefaults and a TrackEvent, the TrackEvent uuids override the
       * default uuid list.
       * For example, this allows snapshotting the thread time clock at each
       * thread-track BEGIN and END event to capture the cpu time delta of a slice.
       * </pre>
       *
       * <code>repeated uint64 extra_counter_track_uuids = 31;</code>
       * @return The count of extraCounterTrackUuids.
       */
      public int getExtraCounterTrackUuidsCount() {
        return extraCounterTrackUuids_.size();
      }
      /**
       * <pre>
       * To encode counter values more efficiently, we support attaching additional
       * counter values to a TrackEvent of any type. All values will share the same
       * timestamp specified in the TracePacket. The value at
       * extra_counter_values[N] is for the counter track referenced by
       * extra_counter_track_uuids[N].
       * |extra_counter_track_uuids| may also be set via TrackEventDefaults. There
       * should always be equal or more uuids than values. It is valid to set more
       * uuids (e.g. via defaults) than values. If uuids are specified in
       * TrackEventDefaults and a TrackEvent, the TrackEvent uuids override the
       * default uuid list.
       * For example, this allows snapshotting the thread time clock at each
       * thread-track BEGIN and END event to capture the cpu time delta of a slice.
       * </pre>
       *
       * <code>repeated uint64 extra_counter_track_uuids = 31;</code>
       * @param index The index of the element to return.
       * @return The extraCounterTrackUuids at the given index.
       */
      public long getExtraCounterTrackUuids(int index) {
        return extraCounterTrackUuids_.getLong(index);
      }
      /**
       * <pre>
       * To encode counter values more efficiently, we support attaching additional
       * counter values to a TrackEvent of any type. All values will share the same
       * timestamp specified in the TracePacket. The value at
       * extra_counter_values[N] is for the counter track referenced by
       * extra_counter_track_uuids[N].
       * |extra_counter_track_uuids| may also be set via TrackEventDefaults. There
       * should always be equal or more uuids than values. It is valid to set more
       * uuids (e.g. via defaults) than values. If uuids are specified in
       * TrackEventDefaults and a TrackEvent, the TrackEvent uuids override the
       * default uuid list.
       * For example, this allows snapshotting the thread time clock at each
       * thread-track BEGIN and END event to capture the cpu time delta of a slice.
       * </pre>
       *
       * <code>repeated uint64 extra_counter_track_uuids = 31;</code>
       * @param index The index to set the value at.
       * @param value The extraCounterTrackUuids to set.
       * @return This builder for chaining.
       */
      public Builder setExtraCounterTrackUuids(
          int index, long value) {
        
        ensureExtraCounterTrackUuidsIsMutable();
        extraCounterTrackUuids_.setLong(index, value);
        onChanged();
        return this;
      }
      /**
       * <pre>
       * To encode counter values more efficiently, we support attaching additional
       * counter values to a TrackEvent of any type. All values will share the same
       * timestamp specified in the TracePacket. The value at
       * extra_counter_values[N] is for the counter track referenced by
       * extra_counter_track_uuids[N].
       * |extra_counter_track_uuids| may also be set via TrackEventDefaults. There
       * should always be equal or more uuids than values. It is valid to set more
       * uuids (e.g. via defaults) than values. If uuids are specified in
       * TrackEventDefaults and a TrackEvent, the TrackEvent uuids override the
       * default uuid list.
       * For example, this allows snapshotting the thread time clock at each
       * thread-track BEGIN and END event to capture the cpu time delta of a slice.
       * </pre>
       *
       * <code>repeated uint64 extra_counter_track_uuids = 31;</code>
       * @param value The extraCounterTrackUuids to add.
       * @return This builder for chaining.
       */
      public Builder addExtraCounterTrackUuids(long value) {
        
        ensureExtraCounterTrackUuidsIsMutable();
        extraCounterTrackUuids_.addLong(value);
        onChanged();
        return this;
      }
      /**
       * <pre>
       * To encode counter values more efficiently, we support attaching additional
       * counter values to a TrackEvent of any type. All values will share the same
       * timestamp specified in the TracePacket. The value at
       * extra_counter_values[N] is for the counter track referenced by
       * extra_counter_track_uuids[N].
       * |extra_counter_track_uuids| may also be set via TrackEventDefaults. There
       * should always be equal or more uuids than values. It is valid to set more
       * uuids (e.g. via defaults) than values. If uuids are specified in
       * TrackEventDefaults and a TrackEvent, the TrackEvent uuids override the
       * default uuid list.
       * For example, this allows snapshotting the thread time clock at each
       * thread-track BEGIN and END event to capture the cpu time delta of a slice.
       * </pre>
       *
       * <code>repeated uint64 extra_counter_track_uuids = 31;</code>
       * @param values The extraCounterTrackUuids to add.
       * @return This builder for chaining.
       */
      public Builder addAllExtraCounterTrackUuids(
          java.lang.Iterable<? extends java.lang.Long> values) {
        ensureExtraCounterTrackUuidsIsMutable();
        com.google.protobuf.AbstractMessageLite.Builder.addAll(
            values, extraCounterTrackUuids_);
        onChanged();
        return this;
      }
      /**
       * <pre>
       * To encode counter values more efficiently, we support attaching additional
       * counter values to a TrackEvent of any type. All values will share the same
       * timestamp specified in the TracePacket. The value at
       * extra_counter_values[N] is for the counter track referenced by
       * extra_counter_track_uuids[N].
       * |extra_counter_track_uuids| may also be set via TrackEventDefaults. There
       * should always be equal or more uuids than values. It is valid to set more
       * uuids (e.g. via defaults) than values. If uuids are specified in
       * TrackEventDefaults and a TrackEvent, the TrackEvent uuids override the
       * default uuid list.
       * For example, this allows snapshotting the thread time clock at each
       * thread-track BEGIN and END event to capture the cpu time delta of a slice.
       * </pre>
       *
       * <code>repeated uint64 extra_counter_track_uuids = 31;</code>
       * @return This builder for chaining.
       */
      public Builder clearExtraCounterTrackUuids() {
        extraCounterTrackUuids_ = emptyLongList();
        bitField0_ = (bitField0_ & ~0x00000100);
        onChanged();
        return this;
      }

      private com.google.protobuf.Internal.LongList extraCounterValues_ = emptyLongList();
      private void ensureExtraCounterValuesIsMutable() {
        if (!((bitField0_ & 0x00000200) != 0)) {
          extraCounterValues_ = mutableCopy(extraCounterValues_);
          bitField0_ |= 0x00000200;
        }
      }
      /**
       * <code>repeated int64 extra_counter_values = 12;</code>
       * @return A list containing the extraCounterValues.
       */
      public java.util.List<java.lang.Long>
          getExtraCounterValuesList() {
        return ((bitField0_ & 0x00000200) != 0) ?
                 java.util.Collections.unmodifiableList(extraCounterValues_) : extraCounterValues_;
      }
      /**
       * <code>repeated int64 extra_counter_values = 12;</code>
       * @return The count of extraCounterValues.
       */
      public int getExtraCounterValuesCount() {
        return extraCounterValues_.size();
      }
      /**
       * <code>repeated int64 extra_counter_values = 12;</code>
       * @param index The index of the element to return.
       * @return The extraCounterValues at the given index.
       */
      public long getExtraCounterValues(int index) {
        return extraCounterValues_.getLong(index);
      }
      /**
       * <code>repeated int64 extra_counter_values = 12;</code>
       * @param index The index to set the value at.
       * @param value The extraCounterValues to set.
       * @return This builder for chaining.
       */
      public Builder setExtraCounterValues(
          int index, long value) {
        
        ensureExtraCounterValuesIsMutable();
        extraCounterValues_.setLong(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int64 extra_counter_values = 12;</code>
       * @param value The extraCounterValues to add.
       * @return This builder for chaining.
       */
      public Builder addExtraCounterValues(long value) {
        
        ensureExtraCounterValuesIsMutable();
        extraCounterValues_.addLong(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int64 extra_counter_values = 12;</code>
       * @param values The extraCounterValues to add.
       * @return This builder for chaining.
       */
      public Builder addAllExtraCounterValues(
          java.lang.Iterable<? extends java.lang.Long> values) {
        ensureExtraCounterValuesIsMutable();
        com.google.protobuf.AbstractMessageLite.Builder.addAll(
            values, extraCounterValues_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int64 extra_counter_values = 12;</code>
       * @return This builder for chaining.
       */
      public Builder clearExtraCounterValues() {
        extraCounterValues_ = emptyLongList();
        bitField0_ = (bitField0_ & ~0x00000200);
        onChanged();
        return this;
      }

      private com.google.protobuf.Internal.LongList extraDoubleCounterTrackUuids_ = emptyLongList();
      private void ensureExtraDoubleCounterTrackUuidsIsMutable() {
        if (!((bitField0_ & 0x00000400) != 0)) {
          extraDoubleCounterTrackUuids_ = mutableCopy(extraDoubleCounterTrackUuids_);
          bitField0_ |= 0x00000400;
        }
      }
      /**
       * <pre>
       * Counter snapshots using floating point instead of integer values.
       * </pre>
       *
       * <code>repeated uint64 extra_double_counter_track_uuids = 45;</code>
       * @return A list containing the extraDoubleCounterTrackUuids.
       */
      public java.util.List<java.lang.Long>
          getExtraDoubleCounterTrackUuidsList() {
        return ((bitField0_ & 0x00000400) != 0) ?
                 java.util.Collections.unmodifiableList(extraDoubleCounterTrackUuids_) : extraDoubleCounterTrackUuids_;
      }
      /**
       * <pre>
       * Counter snapshots using floating point instead of integer values.
       * </pre>
       *
       * <code>repeated uint64 extra_double_counter_track_uuids = 45;</code>
       * @return The count of extraDoubleCounterTrackUuids.
       */
      public int getExtraDoubleCounterTrackUuidsCount() {
        return extraDoubleCounterTrackUuids_.size();
      }
      /**
       * <pre>
       * Counter snapshots using floating point instead of integer values.
       * </pre>
       *
       * <code>repeated uint64 extra_double_counter_track_uuids = 45;</code>
       * @param index The index of the element to return.
       * @return The extraDoubleCounterTrackUuids at the given index.
       */
      public long getExtraDoubleCounterTrackUuids(int index) {
        return extraDoubleCounterTrackUuids_.getLong(index);
      }
      /**
       * <pre>
       * Counter snapshots using floating point instead of integer values.
       * </pre>
       *
       * <code>repeated uint64 extra_double_counter_track_uuids = 45;</code>
       * @param index The index to set the value at.
       * @param value The extraDoubleCounterTrackUuids to set.
       * @return This builder for chaining.
       */
      public Builder setExtraDoubleCounterTrackUuids(
          int index, long value) {
        
        ensureExtraDoubleCounterTrackUuidsIsMutable();
        extraDoubleCounterTrackUuids_.setLong(index, value);
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Counter snapshots using floating point instead of integer values.
       * </pre>
       *
       * <code>repeated uint64 extra_double_counter_track_uuids = 45;</code>
       * @param value The extraDoubleCounterTrackUuids to add.
       * @return This builder for chaining.
       */
      public Builder addExtraDoubleCounterTrackUuids(long value) {
        
        ensureExtraDoubleCounterTrackUuidsIsMutable();
        extraDoubleCounterTrackUuids_.addLong(value);
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Counter snapshots using floating point instead of integer values.
       * </pre>
       *
       * <code>repeated uint64 extra_double_counter_track_uuids = 45;</code>
       * @param values The extraDoubleCounterTrackUuids to add.
       * @return This builder for chaining.
       */
      public Builder addAllExtraDoubleCounterTrackUuids(
          java.lang.Iterable<? extends java.lang.Long> values) {
        ensureExtraDoubleCounterTrackUuidsIsMutable();
        com.google.protobuf.AbstractMessageLite.Builder.addAll(
            values, extraDoubleCounterTrackUuids_);
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Counter snapshots using floating point instead of integer values.
       * </pre>
       *
       * <code>repeated uint64 extra_double_counter_track_uuids = 45;</code>
       * @return This builder for chaining.
       */
      public Builder clearExtraDoubleCounterTrackUuids() {
        extraDoubleCounterTrackUuids_ = emptyLongList();
        bitField0_ = (bitField0_ & ~0x00000400);
        onChanged();
        return this;
      }

      private com.google.protobuf.Internal.DoubleList extraDoubleCounterValues_ = emptyDoubleList();
      private void ensureExtraDoubleCounterValuesIsMutable() {
        if (!((bitField0_ & 0x00000800) != 0)) {
          extraDoubleCounterValues_ = mutableCopy(extraDoubleCounterValues_);
          bitField0_ |= 0x00000800;
        }
      }
      /**
       * <code>repeated double extra_double_counter_values = 46;</code>
       * @return A list containing the extraDoubleCounterValues.
       */
      public java.util.List<java.lang.Double>
          getExtraDoubleCounterValuesList() {
        return ((bitField0_ & 0x00000800) != 0) ?
                 java.util.Collections.unmodifiableList(extraDoubleCounterValues_) : extraDoubleCounterValues_;
      }
      /**
       * <code>repeated double extra_double_counter_values = 46;</code>
       * @return The count of extraDoubleCounterValues.
       */
      public int getExtraDoubleCounterValuesCount() {
        return extraDoubleCounterValues_.size();
      }
      /**
       * <code>repeated double extra_double_counter_values = 46;</code>
       * @param index The index of the element to return.
       * @return The extraDoubleCounterValues at the given index.
       */
      public double getExtraDoubleCounterValues(int index) {
        return extraDoubleCounterValues_.getDouble(index);
      }
      /**
       * <code>repeated double extra_double_counter_values = 46;</code>
       * @param index The index to set the value at.
       * @param value The extraDoubleCounterValues to set.
       * @return This builder for chaining.
       */
      public Builder setExtraDoubleCounterValues(
          int index, double value) {
        
        ensureExtraDoubleCounterValuesIsMutable();
        extraDoubleCounterValues_.setDouble(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated double extra_double_counter_values = 46;</code>
       * @param value The extraDoubleCounterValues to add.
       * @return This builder for chaining.
       */
      public Builder addExtraDoubleCounterValues(double value) {
        
        ensureExtraDoubleCounterValuesIsMutable();
        extraDoubleCounterValues_.addDouble(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated double extra_double_counter_values = 46;</code>
       * @param values The extraDoubleCounterValues to add.
       * @return This builder for chaining.
       */
      public Builder addAllExtraDoubleCounterValues(
          java.lang.Iterable<? extends java.lang.Double> values) {
        ensureExtraDoubleCounterValuesIsMutable();
        com.google.protobuf.AbstractMessageLite.Builder.addAll(
            values, extraDoubleCounterValues_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated double extra_double_counter_values = 46;</code>
       * @return This builder for chaining.
       */
      public Builder clearExtraDoubleCounterValues() {
        extraDoubleCounterValues_ = emptyDoubleList();
        bitField0_ = (bitField0_ & ~0x00000800);
        onChanged();
        return this;
      }

      private com.google.protobuf.Internal.LongList flowIdsOld_ = emptyLongList();
      private void ensureFlowIdsOldIsMutable() {
        if (!((bitField0_ & 0x00001000) != 0)) {
          flowIdsOld_ = mutableCopy(flowIdsOld_);
          bitField0_ |= 0x00001000;
        }
      }
      /**
       * <pre>
       * IDs of flows originating, passing through, or ending at this event.
       * Flow IDs are global within a trace.
       * A flow connects a sequence of TrackEvents within or across tracks, e.g.
       * an input event may be handled on one thread but cause another event on
       * a different thread - a flow between the two events can associate them.
       * The direction of the flows between events is inferred from the events'
       * timestamps. The earliest event with the same flow ID becomes the source
       * of the flow. Any events thereafter are intermediate steps of the flow,
       * until the flow terminates at the last event with the flow ID.
       * Flows can also be explicitly terminated (see |terminating_flow_ids|), so
       * that the same ID can later be reused for another flow.
       * DEPRECATED. Only kept for backwards compatibility. Use |flow_ids|.
       * </pre>
       *
       * <code>repeated uint64 flow_ids_old = 36 [deprecated = true];</code>
       * @deprecated perfetto.protos.TrackEvent.flow_ids_old is deprecated.
       *     See protos/perfetto/trace/track_event/track_event.proto;l=217
       * @return A list containing the flowIdsOld.
       */
      @java.lang.Deprecated public java.util.List<java.lang.Long>
          getFlowIdsOldList() {
        return ((bitField0_ & 0x00001000) != 0) ?
                 java.util.Collections.unmodifiableList(flowIdsOld_) : flowIdsOld_;
      }
      /**
       * <pre>
       * IDs of flows originating, passing through, or ending at this event.
       * Flow IDs are global within a trace.
       * A flow connects a sequence of TrackEvents within or across tracks, e.g.
       * an input event may be handled on one thread but cause another event on
       * a different thread - a flow between the two events can associate them.
       * The direction of the flows between events is inferred from the events'
       * timestamps. The earliest event with the same flow ID becomes the source
       * of the flow. Any events thereafter are intermediate steps of the flow,
       * until the flow terminates at the last event with the flow ID.
       * Flows can also be explicitly terminated (see |terminating_flow_ids|), so
       * that the same ID can later be reused for another flow.
       * DEPRECATED. Only kept for backwards compatibility. Use |flow_ids|.
       * </pre>
       *
       * <code>repeated uint64 flow_ids_old = 36 [deprecated = true];</code>
       * @deprecated perfetto.protos.TrackEvent.flow_ids_old is deprecated.
       *     See protos/perfetto/trace/track_event/track_event.proto;l=217
       * @return The count of flowIdsOld.
       */
      @java.lang.Deprecated public int getFlowIdsOldCount() {
        return flowIdsOld_.size();
      }
      /**
       * <pre>
       * IDs of flows originating, passing through, or ending at this event.
       * Flow IDs are global within a trace.
       * A flow connects a sequence of TrackEvents within or across tracks, e.g.
       * an input event may be handled on one thread but cause another event on
       * a different thread - a flow between the two events can associate them.
       * The direction of the flows between events is inferred from the events'
       * timestamps. The earliest event with the same flow ID becomes the source
       * of the flow. Any events thereafter are intermediate steps of the flow,
       * until the flow terminates at the last event with the flow ID.
       * Flows can also be explicitly terminated (see |terminating_flow_ids|), so
       * that the same ID can later be reused for another flow.
       * DEPRECATED. Only kept for backwards compatibility. Use |flow_ids|.
       * </pre>
       *
       * <code>repeated uint64 flow_ids_old = 36 [deprecated = true];</code>
       * @deprecated perfetto.protos.TrackEvent.flow_ids_old is deprecated.
       *     See protos/perfetto/trace/track_event/track_event.proto;l=217
       * @param index The index of the element to return.
       * @return The flowIdsOld at the given index.
       */
      @java.lang.Deprecated public long getFlowIdsOld(int index) {
        return flowIdsOld_.getLong(index);
      }
      /**
       * <pre>
       * IDs of flows originating, passing through, or ending at this event.
       * Flow IDs are global within a trace.
       * A flow connects a sequence of TrackEvents within or across tracks, e.g.
       * an input event may be handled on one thread but cause another event on
       * a different thread - a flow between the two events can associate them.
       * The direction of the flows between events is inferred from the events'
       * timestamps. The earliest event with the same flow ID becomes the source
       * of the flow. Any events thereafter are intermediate steps of the flow,
       * until the flow terminates at the last event with the flow ID.
       * Flows can also be explicitly terminated (see |terminating_flow_ids|), so
       * that the same ID can later be reused for another flow.
       * DEPRECATED. Only kept for backwards compatibility. Use |flow_ids|.
       * </pre>
       *
       * <code>repeated uint64 flow_ids_old = 36 [deprecated = true];</code>
       * @deprecated perfetto.protos.TrackEvent.flow_ids_old is deprecated.
       *     See protos/perfetto/trace/track_event/track_event.proto;l=217
       * @param index The index to set the value at.
       * @param value The flowIdsOld to set.
       * @return This builder for chaining.
       */
      @java.lang.Deprecated public Builder setFlowIdsOld(
          int index, long value) {
        
        ensureFlowIdsOldIsMutable();
        flowIdsOld_.setLong(index, value);
        onChanged();
        return this;
      }
      /**
       * <pre>
       * IDs of flows originating, passing through, or ending at this event.
       * Flow IDs are global within a trace.
       * A flow connects a sequence of TrackEvents within or across tracks, e.g.
       * an input event may be handled on one thread but cause another event on
       * a different thread - a flow between the two events can associate them.
       * The direction of the flows between events is inferred from the events'
       * timestamps. The earliest event with the same flow ID becomes the source
       * of the flow. Any events thereafter are intermediate steps of the flow,
       * until the flow terminates at the last event with the flow ID.
       * Flows can also be explicitly terminated (see |terminating_flow_ids|), so
       * that the same ID can later be reused for another flow.
       * DEPRECATED. Only kept for backwards compatibility. Use |flow_ids|.
       * </pre>
       *
       * <code>repeated uint64 flow_ids_old = 36 [deprecated = true];</code>
       * @deprecated perfetto.protos.TrackEvent.flow_ids_old is deprecated.
       *     See protos/perfetto/trace/track_event/track_event.proto;l=217
       * @param value The flowIdsOld to add.
       * @return This builder for chaining.
       */
      @java.lang.Deprecated public Builder addFlowIdsOld(long value) {
        
        ensureFlowIdsOldIsMutable();
        flowIdsOld_.addLong(value);
        onChanged();
        return this;
      }
      /**
       * <pre>
       * IDs of flows originating, passing through, or ending at this event.
       * Flow IDs are global within a trace.
       * A flow connects a sequence of TrackEvents within or across tracks, e.g.
       * an input event may be handled on one thread but cause another event on
       * a different thread - a flow between the two events can associate them.
       * The direction of the flows between events is inferred from the events'
       * timestamps. The earliest event with the same flow ID becomes the source
       * of the flow. Any events thereafter are intermediate steps of the flow,
       * until the flow terminates at the last event with the flow ID.
       * Flows can also be explicitly terminated (see |terminating_flow_ids|), so
       * that the same ID can later be reused for another flow.
       * DEPRECATED. Only kept for backwards compatibility. Use |flow_ids|.
       * </pre>
       *
       * <code>repeated uint64 flow_ids_old = 36 [deprecated = true];</code>
       * @deprecated perfetto.protos.TrackEvent.flow_ids_old is deprecated.
       *     See protos/perfetto/trace/track_event/track_event.proto;l=217
       * @param values The flowIdsOld to add.
       * @return This builder for chaining.
       */
      @java.lang.Deprecated public Builder addAllFlowIdsOld(
          java.lang.Iterable<? extends java.lang.Long> values) {
        ensureFlowIdsOldIsMutable();
        com.google.protobuf.AbstractMessageLite.Builder.addAll(
            values, flowIdsOld_);
        onChanged();
        return this;
      }
      /**
       * <pre>
       * IDs of flows originating, passing through, or ending at this event.
       * Flow IDs are global within a trace.
       * A flow connects a sequence of TrackEvents within or across tracks, e.g.
       * an input event may be handled on one thread but cause another event on
       * a different thread - a flow between the two events can associate them.
       * The direction of the flows between events is inferred from the events'
       * timestamps. The earliest event with the same flow ID becomes the source
       * of the flow. Any events thereafter are intermediate steps of the flow,
       * until the flow terminates at the last event with the flow ID.
       * Flows can also be explicitly terminated (see |terminating_flow_ids|), so
       * that the same ID can later be reused for another flow.
       * DEPRECATED. Only kept for backwards compatibility. Use |flow_ids|.
       * </pre>
       *
       * <code>repeated uint64 flow_ids_old = 36 [deprecated = true];</code>
       * @deprecated perfetto.protos.TrackEvent.flow_ids_old is deprecated.
       *     See protos/perfetto/trace/track_event/track_event.proto;l=217
       * @return This builder for chaining.
       */
      @java.lang.Deprecated public Builder clearFlowIdsOld() {
        flowIdsOld_ = emptyLongList();
        bitField0_ = (bitField0_ & ~0x00001000);
        onChanged();
        return this;
      }

      private com.google.protobuf.Internal.LongList flowIds_ = emptyLongList();
      private void ensureFlowIdsIsMutable() {
        if (!((bitField0_ & 0x00002000) != 0)) {
          flowIds_ = mutableCopy(flowIds_);
          bitField0_ |= 0x00002000;
        }
      }
      /**
       * <pre>
       * TODO(b/204341740): replace "flow_ids_old" with "flow_ids" to reduce memory
       * consumption.
       * </pre>
       *
       * <code>repeated fixed64 flow_ids = 47;</code>
       * @return A list containing the flowIds.
       */
      public java.util.List<java.lang.Long>
          getFlowIdsList() {
        return ((bitField0_ & 0x00002000) != 0) ?
                 java.util.Collections.unmodifiableList(flowIds_) : flowIds_;
      }
      /**
       * <pre>
       * TODO(b/204341740): replace "flow_ids_old" with "flow_ids" to reduce memory
       * consumption.
       * </pre>
       *
       * <code>repeated fixed64 flow_ids = 47;</code>
       * @return The count of flowIds.
       */
      public int getFlowIdsCount() {
        return flowIds_.size();
      }
      /**
       * <pre>
       * TODO(b/204341740): replace "flow_ids_old" with "flow_ids" to reduce memory
       * consumption.
       * </pre>
       *
       * <code>repeated fixed64 flow_ids = 47;</code>
       * @param index The index of the element to return.
       * @return The flowIds at the given index.
       */
      public long getFlowIds(int index) {
        return flowIds_.getLong(index);
      }
      /**
       * <pre>
       * TODO(b/204341740): replace "flow_ids_old" with "flow_ids" to reduce memory
       * consumption.
       * </pre>
       *
       * <code>repeated fixed64 flow_ids = 47;</code>
       * @param index The index to set the value at.
       * @param value The flowIds to set.
       * @return This builder for chaining.
       */
      public Builder setFlowIds(
          int index, long value) {
        
        ensureFlowIdsIsMutable();
        flowIds_.setLong(index, value);
        onChanged();
        return this;
      }
      /**
       * <pre>
       * TODO(b/204341740): replace "flow_ids_old" with "flow_ids" to reduce memory
       * consumption.
       * </pre>
       *
       * <code>repeated fixed64 flow_ids = 47;</code>
       * @param value The flowIds to add.
       * @return This builder for chaining.
       */
      public Builder addFlowIds(long value) {
        
        ensureFlowIdsIsMutable();
        flowIds_.addLong(value);
        onChanged();
        return this;
      }
      /**
       * <pre>
       * TODO(b/204341740): replace "flow_ids_old" with "flow_ids" to reduce memory
       * consumption.
       * </pre>
       *
       * <code>repeated fixed64 flow_ids = 47;</code>
       * @param values The flowIds to add.
       * @return This builder for chaining.
       */
      public Builder addAllFlowIds(
          java.lang.Iterable<? extends java.lang.Long> values) {
        ensureFlowIdsIsMutable();
        com.google.protobuf.AbstractMessageLite.Builder.addAll(
            values, flowIds_);
        onChanged();
        return this;
      }
      /**
       * <pre>
       * TODO(b/204341740): replace "flow_ids_old" with "flow_ids" to reduce memory
       * consumption.
       * </pre>
       *
       * <code>repeated fixed64 flow_ids = 47;</code>
       * @return This builder for chaining.
       */
      public Builder clearFlowIds() {
        flowIds_ = emptyLongList();
        bitField0_ = (bitField0_ & ~0x00002000);
        onChanged();
        return this;
      }

      private com.google.protobuf.Internal.LongList terminatingFlowIdsOld_ = emptyLongList();
      private void ensureTerminatingFlowIdsOldIsMutable() {
        if (!((bitField0_ & 0x00004000) != 0)) {
          terminatingFlowIdsOld_ = mutableCopy(terminatingFlowIdsOld_);
          bitField0_ |= 0x00004000;
        }
      }
      /**
       * <pre>
       * List of flow ids which should terminate on this event, otherwise same as
       * |flow_ids|.
       * Any one flow ID should be either listed as part of |flow_ids| OR
       * |terminating_flow_ids|, not both.
       * DEPRECATED. Only kept for backwards compatibility.  Use
       * |terminating_flow_ids|.
       * </pre>
       *
       * <code>repeated uint64 terminating_flow_ids_old = 42 [deprecated = true];</code>
       * @deprecated perfetto.protos.TrackEvent.terminating_flow_ids_old is deprecated.
       *     See protos/perfetto/trace/track_event/track_event.proto;l=228
       * @return A list containing the terminatingFlowIdsOld.
       */
      @java.lang.Deprecated public java.util.List<java.lang.Long>
          getTerminatingFlowIdsOldList() {
        return ((bitField0_ & 0x00004000) != 0) ?
                 java.util.Collections.unmodifiableList(terminatingFlowIdsOld_) : terminatingFlowIdsOld_;
      }
      /**
       * <pre>
       * List of flow ids which should terminate on this event, otherwise same as
       * |flow_ids|.
       * Any one flow ID should be either listed as part of |flow_ids| OR
       * |terminating_flow_ids|, not both.
       * DEPRECATED. Only kept for backwards compatibility.  Use
       * |terminating_flow_ids|.
       * </pre>
       *
       * <code>repeated uint64 terminating_flow_ids_old = 42 [deprecated = true];</code>
       * @deprecated perfetto.protos.TrackEvent.terminating_flow_ids_old is deprecated.
       *     See protos/perfetto/trace/track_event/track_event.proto;l=228
       * @return The count of terminatingFlowIdsOld.
       */
      @java.lang.Deprecated public int getTerminatingFlowIdsOldCount() {
        return terminatingFlowIdsOld_.size();
      }
      /**
       * <pre>
       * List of flow ids which should terminate on this event, otherwise same as
       * |flow_ids|.
       * Any one flow ID should be either listed as part of |flow_ids| OR
       * |terminating_flow_ids|, not both.
       * DEPRECATED. Only kept for backwards compatibility.  Use
       * |terminating_flow_ids|.
       * </pre>
       *
       * <code>repeated uint64 terminating_flow_ids_old = 42 [deprecated = true];</code>
       * @deprecated perfetto.protos.TrackEvent.terminating_flow_ids_old is deprecated.
       *     See protos/perfetto/trace/track_event/track_event.proto;l=228
       * @param index The index of the element to return.
       * @return The terminatingFlowIdsOld at the given index.
       */
      @java.lang.Deprecated public long getTerminatingFlowIdsOld(int index) {
        return terminatingFlowIdsOld_.getLong(index);
      }
      /**
       * <pre>
       * List of flow ids which should terminate on this event, otherwise same as
       * |flow_ids|.
       * Any one flow ID should be either listed as part of |flow_ids| OR
       * |terminating_flow_ids|, not both.
       * DEPRECATED. Only kept for backwards compatibility.  Use
       * |terminating_flow_ids|.
       * </pre>
       *
       * <code>repeated uint64 terminating_flow_ids_old = 42 [deprecated = true];</code>
       * @deprecated perfetto.protos.TrackEvent.terminating_flow_ids_old is deprecated.
       *     See protos/perfetto/trace/track_event/track_event.proto;l=228
       * @param index The index to set the value at.
       * @param value The terminatingFlowIdsOld to set.
       * @return This builder for chaining.
       */
      @java.lang.Deprecated public Builder setTerminatingFlowIdsOld(
          int index, long value) {
        
        ensureTerminatingFlowIdsOldIsMutable();
        terminatingFlowIdsOld_.setLong(index, value);
        onChanged();
        return this;
      }
      /**
       * <pre>
       * List of flow ids which should terminate on this event, otherwise same as
       * |flow_ids|.
       * Any one flow ID should be either listed as part of |flow_ids| OR
       * |terminating_flow_ids|, not both.
       * DEPRECATED. Only kept for backwards compatibility.  Use
       * |terminating_flow_ids|.
       * </pre>
       *
       * <code>repeated uint64 terminating_flow_ids_old = 42 [deprecated = true];</code>
       * @deprecated perfetto.protos.TrackEvent.terminating_flow_ids_old is deprecated.
       *     See protos/perfetto/trace/track_event/track_event.proto;l=228
       * @param value The terminatingFlowIdsOld to add.
       * @return This builder for chaining.
       */
      @java.lang.Deprecated public Builder addTerminatingFlowIdsOld(long value) {
        
        ensureTerminatingFlowIdsOldIsMutable();
        terminatingFlowIdsOld_.addLong(value);
        onChanged();
        return this;
      }
      /**
       * <pre>
       * List of flow ids which should terminate on this event, otherwise same as
       * |flow_ids|.
       * Any one flow ID should be either listed as part of |flow_ids| OR
       * |terminating_flow_ids|, not both.
       * DEPRECATED. Only kept for backwards compatibility.  Use
       * |terminating_flow_ids|.
       * </pre>
       *
       * <code>repeated uint64 terminating_flow_ids_old = 42 [deprecated = true];</code>
       * @deprecated perfetto.protos.TrackEvent.terminating_flow_ids_old is deprecated.
       *     See protos/perfetto/trace/track_event/track_event.proto;l=228
       * @param values The terminatingFlowIdsOld to add.
       * @return This builder for chaining.
       */
      @java.lang.Deprecated public Builder addAllTerminatingFlowIdsOld(
          java.lang.Iterable<? extends java.lang.Long> values) {
        ensureTerminatingFlowIdsOldIsMutable();
        com.google.protobuf.AbstractMessageLite.Builder.addAll(
            values, terminatingFlowIdsOld_);
        onChanged();
        return this;
      }
      /**
       * <pre>
       * List of flow ids which should terminate on this event, otherwise same as
       * |flow_ids|.
       * Any one flow ID should be either listed as part of |flow_ids| OR
       * |terminating_flow_ids|, not both.
       * DEPRECATED. Only kept for backwards compatibility.  Use
       * |terminating_flow_ids|.
       * </pre>
       *
       * <code>repeated uint64 terminating_flow_ids_old = 42 [deprecated = true];</code>
       * @deprecated perfetto.protos.TrackEvent.terminating_flow_ids_old is deprecated.
       *     See protos/perfetto/trace/track_event/track_event.proto;l=228
       * @return This builder for chaining.
       */
      @java.lang.Deprecated public Builder clearTerminatingFlowIdsOld() {
        terminatingFlowIdsOld_ = emptyLongList();
        bitField0_ = (bitField0_ & ~0x00004000);
        onChanged();
        return this;
      }

      private com.google.protobuf.Internal.LongList terminatingFlowIds_ = emptyLongList();
      private void ensureTerminatingFlowIdsIsMutable() {
        if (!((bitField0_ & 0x00008000) != 0)) {
          terminatingFlowIds_ = mutableCopy(terminatingFlowIds_);
          bitField0_ |= 0x00008000;
        }
      }
      /**
       * <pre>
       * TODO(b/204341740): replace "terminating_flow_ids_old" with
       * "terminating_flow_ids" to reduce memory consumption.
       * </pre>
       *
       * <code>repeated fixed64 terminating_flow_ids = 48;</code>
       * @return A list containing the terminatingFlowIds.
       */
      public java.util.List<java.lang.Long>
          getTerminatingFlowIdsList() {
        return ((bitField0_ & 0x00008000) != 0) ?
                 java.util.Collections.unmodifiableList(terminatingFlowIds_) : terminatingFlowIds_;
      }
      /**
       * <pre>
       * TODO(b/204341740): replace "terminating_flow_ids_old" with
       * "terminating_flow_ids" to reduce memory consumption.
       * </pre>
       *
       * <code>repeated fixed64 terminating_flow_ids = 48;</code>
       * @return The count of terminatingFlowIds.
       */
      public int getTerminatingFlowIdsCount() {
        return terminatingFlowIds_.size();
      }
      /**
       * <pre>
       * TODO(b/204341740): replace "terminating_flow_ids_old" with
       * "terminating_flow_ids" to reduce memory consumption.
       * </pre>
       *
       * <code>repeated fixed64 terminating_flow_ids = 48;</code>
       * @param index The index of the element to return.
       * @return The terminatingFlowIds at the given index.
       */
      public long getTerminatingFlowIds(int index) {
        return terminatingFlowIds_.getLong(index);
      }
      /**
       * <pre>
       * TODO(b/204341740): replace "terminating_flow_ids_old" with
       * "terminating_flow_ids" to reduce memory consumption.
       * </pre>
       *
       * <code>repeated fixed64 terminating_flow_ids = 48;</code>
       * @param index The index to set the value at.
       * @param value The terminatingFlowIds to set.
       * @return This builder for chaining.
       */
      public Builder setTerminatingFlowIds(
          int index, long value) {
        
        ensureTerminatingFlowIdsIsMutable();
        terminatingFlowIds_.setLong(index, value);
        onChanged();
        return this;
      }
      /**
       * <pre>
       * TODO(b/204341740): replace "terminating_flow_ids_old" with
       * "terminating_flow_ids" to reduce memory consumption.
       * </pre>
       *
       * <code>repeated fixed64 terminating_flow_ids = 48;</code>
       * @param value The terminatingFlowIds to add.
       * @return This builder for chaining.
       */
      public Builder addTerminatingFlowIds(long value) {
        
        ensureTerminatingFlowIdsIsMutable();
        terminatingFlowIds_.addLong(value);
        onChanged();
        return this;
      }
      /**
       * <pre>
       * TODO(b/204341740): replace "terminating_flow_ids_old" with
       * "terminating_flow_ids" to reduce memory consumption.
       * </pre>
       *
       * <code>repeated fixed64 terminating_flow_ids = 48;</code>
       * @param values The terminatingFlowIds to add.
       * @return This builder for chaining.
       */
      public Builder addAllTerminatingFlowIds(
          java.lang.Iterable<? extends java.lang.Long> values) {
        ensureTerminatingFlowIdsIsMutable();
        com.google.protobuf.AbstractMessageLite.Builder.addAll(
            values, terminatingFlowIds_);
        onChanged();
        return this;
      }
      /**
       * <pre>
       * TODO(b/204341740): replace "terminating_flow_ids_old" with
       * "terminating_flow_ids" to reduce memory consumption.
       * </pre>
       *
       * <code>repeated fixed64 terminating_flow_ids = 48;</code>
       * @return This builder for chaining.
       */
      public Builder clearTerminatingFlowIds() {
        terminatingFlowIds_ = emptyLongList();
        bitField0_ = (bitField0_ & ~0x00008000);
        onChanged();
        return this;
      }

      private java.util.List<perfetto.protos.DebugAnnotationOuterClass.DebugAnnotation> debugAnnotations_ =
        java.util.Collections.emptyList();
      private void ensureDebugAnnotationsIsMutable() {
        if (!((bitField0_ & 0x00010000) != 0)) {
          debugAnnotations_ = new java.util.ArrayList<perfetto.protos.DebugAnnotationOuterClass.DebugAnnotation>(debugAnnotations_);
          bitField0_ |= 0x00010000;
         }
      }

      private com.google.protobuf.RepeatedFieldBuilderV3<
          perfetto.protos.DebugAnnotationOuterClass.DebugAnnotation, perfetto.protos.DebugAnnotationOuterClass.DebugAnnotation.Builder, perfetto.protos.DebugAnnotationOuterClass.DebugAnnotationOrBuilder> debugAnnotationsBuilder_;

      /**
       * <pre>
       * Unstable key/value annotations shown in the trace viewer but not intended
       * for metrics use.
       * </pre>
       *
       * <code>repeated .perfetto.protos.DebugAnnotation debug_annotations = 4;</code>
       */
      public java.util.List<perfetto.protos.DebugAnnotationOuterClass.DebugAnnotation> getDebugAnnotationsList() {
        if (debugAnnotationsBuilder_ == null) {
          return java.util.Collections.unmodifiableList(debugAnnotations_);
        } else {
          return debugAnnotationsBuilder_.getMessageList();
        }
      }
      /**
       * <pre>
       * Unstable key/value annotations shown in the trace viewer but not intended
       * for metrics use.
       * </pre>
       *
       * <code>repeated .perfetto.protos.DebugAnnotation debug_annotations = 4;</code>
       */
      public int getDebugAnnotationsCount() {
        if (debugAnnotationsBuilder_ == null) {
          return debugAnnotations_.size();
        } else {
          return debugAnnotationsBuilder_.getCount();
        }
      }
      /**
       * <pre>
       * Unstable key/value annotations shown in the trace viewer but not intended
       * for metrics use.
       * </pre>
       *
       * <code>repeated .perfetto.protos.DebugAnnotation debug_annotations = 4;</code>
       */
      public perfetto.protos.DebugAnnotationOuterClass.DebugAnnotation getDebugAnnotations(int index) {
        if (debugAnnotationsBuilder_ == null) {
          return debugAnnotations_.get(index);
        } else {
          return debugAnnotationsBuilder_.getMessage(index);
        }
      }
      /**
       * <pre>
       * Unstable key/value annotations shown in the trace viewer but not intended
       * for metrics use.
       * </pre>
       *
       * <code>repeated .perfetto.protos.DebugAnnotation debug_annotations = 4;</code>
       */
      public Builder setDebugAnnotations(
          int index, perfetto.protos.DebugAnnotationOuterClass.DebugAnnotation value) {
        if (debugAnnotationsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureDebugAnnotationsIsMutable();
          debugAnnotations_.set(index, value);
          onChanged();
        } else {
          debugAnnotationsBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <pre>
       * Unstable key/value annotations shown in the trace viewer but not intended
       * for metrics use.
       * </pre>
       *
       * <code>repeated .perfetto.protos.DebugAnnotation debug_annotations = 4;</code>
       */
      public Builder setDebugAnnotations(
          int index, perfetto.protos.DebugAnnotationOuterClass.DebugAnnotation.Builder builderForValue) {
        if (debugAnnotationsBuilder_ == null) {
          ensureDebugAnnotationsIsMutable();
          debugAnnotations_.set(index, builderForValue.build());
          onChanged();
        } else {
          debugAnnotationsBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * Unstable key/value annotations shown in the trace viewer but not intended
       * for metrics use.
       * </pre>
       *
       * <code>repeated .perfetto.protos.DebugAnnotation debug_annotations = 4;</code>
       */
      public Builder addDebugAnnotations(perfetto.protos.DebugAnnotationOuterClass.DebugAnnotation value) {
        if (debugAnnotationsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureDebugAnnotationsIsMutable();
          debugAnnotations_.add(value);
          onChanged();
        } else {
          debugAnnotationsBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <pre>
       * Unstable key/value annotations shown in the trace viewer but not intended
       * for metrics use.
       * </pre>
       *
       * <code>repeated .perfetto.protos.DebugAnnotation debug_annotations = 4;</code>
       */
      public Builder addDebugAnnotations(
          int index, perfetto.protos.DebugAnnotationOuterClass.DebugAnnotation value) {
        if (debugAnnotationsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureDebugAnnotationsIsMutable();
          debugAnnotations_.add(index, value);
          onChanged();
        } else {
          debugAnnotationsBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <pre>
       * Unstable key/value annotations shown in the trace viewer but not intended
       * for metrics use.
       * </pre>
       *
       * <code>repeated .perfetto.protos.DebugAnnotation debug_annotations = 4;</code>
       */
      public Builder addDebugAnnotations(
          perfetto.protos.DebugAnnotationOuterClass.DebugAnnotation.Builder builderForValue) {
        if (debugAnnotationsBuilder_ == null) {
          ensureDebugAnnotationsIsMutable();
          debugAnnotations_.add(builderForValue.build());
          onChanged();
        } else {
          debugAnnotationsBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * Unstable key/value annotations shown in the trace viewer but not intended
       * for metrics use.
       * </pre>
       *
       * <code>repeated .perfetto.protos.DebugAnnotation debug_annotations = 4;</code>
       */
      public Builder addDebugAnnotations(
          int index, perfetto.protos.DebugAnnotationOuterClass.DebugAnnotation.Builder builderForValue) {
        if (debugAnnotationsBuilder_ == null) {
          ensureDebugAnnotationsIsMutable();
          debugAnnotations_.add(index, builderForValue.build());
          onChanged();
        } else {
          debugAnnotationsBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * Unstable key/value annotations shown in the trace viewer but not intended
       * for metrics use.
       * </pre>
       *
       * <code>repeated .perfetto.protos.DebugAnnotation debug_annotations = 4;</code>
       */
      public Builder addAllDebugAnnotations(
          java.lang.Iterable<? extends perfetto.protos.DebugAnnotationOuterClass.DebugAnnotation> values) {
        if (debugAnnotationsBuilder_ == null) {
          ensureDebugAnnotationsIsMutable();
          com.google.protobuf.AbstractMessageLite.Builder.addAll(
              values, debugAnnotations_);
          onChanged();
        } else {
          debugAnnotationsBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <pre>
       * Unstable key/value annotations shown in the trace viewer but not intended
       * for metrics use.
       * </pre>
       *
       * <code>repeated .perfetto.protos.DebugAnnotation debug_annotations = 4;</code>
       */
      public Builder clearDebugAnnotations() {
        if (debugAnnotationsBuilder_ == null) {
          debugAnnotations_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00010000);
          onChanged();
        } else {
          debugAnnotationsBuilder_.clear();
        }
        return this;
      }
      /**
       * <pre>
       * Unstable key/value annotations shown in the trace viewer but not intended
       * for metrics use.
       * </pre>
       *
       * <code>repeated .perfetto.protos.DebugAnnotation debug_annotations = 4;</code>
       */
      public Builder removeDebugAnnotations(int index) {
        if (debugAnnotationsBuilder_ == null) {
          ensureDebugAnnotationsIsMutable();
          debugAnnotations_.remove(index);
          onChanged();
        } else {
          debugAnnotationsBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <pre>
       * Unstable key/value annotations shown in the trace viewer but not intended
       * for metrics use.
       * </pre>
       *
       * <code>repeated .perfetto.protos.DebugAnnotation debug_annotations = 4;</code>
       */
      public perfetto.protos.DebugAnnotationOuterClass.DebugAnnotation.Builder getDebugAnnotationsBuilder(
          int index) {
        return getDebugAnnotationsFieldBuilder().getBuilder(index);
      }
      /**
       * <pre>
       * Unstable key/value annotations shown in the trace viewer but not intended
       * for metrics use.
       * </pre>
       *
       * <code>repeated .perfetto.protos.DebugAnnotation debug_annotations = 4;</code>
       */
      public perfetto.protos.DebugAnnotationOuterClass.DebugAnnotationOrBuilder getDebugAnnotationsOrBuilder(
          int index) {
        if (debugAnnotationsBuilder_ == null) {
          return debugAnnotations_.get(index);  } else {
          return debugAnnotationsBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <pre>
       * Unstable key/value annotations shown in the trace viewer but not intended
       * for metrics use.
       * </pre>
       *
       * <code>repeated .perfetto.protos.DebugAnnotation debug_annotations = 4;</code>
       */
      public java.util.List<? extends perfetto.protos.DebugAnnotationOuterClass.DebugAnnotationOrBuilder> 
           getDebugAnnotationsOrBuilderList() {
        if (debugAnnotationsBuilder_ != null) {
          return debugAnnotationsBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(debugAnnotations_);
        }
      }
      /**
       * <pre>
       * Unstable key/value annotations shown in the trace viewer but not intended
       * for metrics use.
       * </pre>
       *
       * <code>repeated .perfetto.protos.DebugAnnotation debug_annotations = 4;</code>
       */
      public perfetto.protos.DebugAnnotationOuterClass.DebugAnnotation.Builder addDebugAnnotationsBuilder() {
        return getDebugAnnotationsFieldBuilder().addBuilder(
            perfetto.protos.DebugAnnotationOuterClass.DebugAnnotation.getDefaultInstance());
      }
      /**
       * <pre>
       * Unstable key/value annotations shown in the trace viewer but not intended
       * for metrics use.
       * </pre>
       *
       * <code>repeated .perfetto.protos.DebugAnnotation debug_annotations = 4;</code>
       */
      public perfetto.protos.DebugAnnotationOuterClass.DebugAnnotation.Builder addDebugAnnotationsBuilder(
          int index) {
        return getDebugAnnotationsFieldBuilder().addBuilder(
            index, perfetto.protos.DebugAnnotationOuterClass.DebugAnnotation.getDefaultInstance());
      }
      /**
       * <pre>
       * Unstable key/value annotations shown in the trace viewer but not intended
       * for metrics use.
       * </pre>
       *
       * <code>repeated .perfetto.protos.DebugAnnotation debug_annotations = 4;</code>
       */
      public java.util.List<perfetto.protos.DebugAnnotationOuterClass.DebugAnnotation.Builder> 
           getDebugAnnotationsBuilderList() {
        return getDebugAnnotationsFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilderV3<
          perfetto.protos.DebugAnnotationOuterClass.DebugAnnotation, perfetto.protos.DebugAnnotationOuterClass.DebugAnnotation.Builder, perfetto.protos.DebugAnnotationOuterClass.DebugAnnotationOrBuilder> 
          getDebugAnnotationsFieldBuilder() {
        if (debugAnnotationsBuilder_ == null) {
          debugAnnotationsBuilder_ = new com.google.protobuf.RepeatedFieldBuilderV3<
              perfetto.protos.DebugAnnotationOuterClass.DebugAnnotation, perfetto.protos.DebugAnnotationOuterClass.DebugAnnotation.Builder, perfetto.protos.DebugAnnotationOuterClass.DebugAnnotationOrBuilder>(
                  debugAnnotations_,
                  ((bitField0_ & 0x00010000) != 0),
                  getParentForChildren(),
                  isClean());
          debugAnnotations_ = null;
        }
        return debugAnnotationsBuilder_;
      }

      private perfetto.protos.TaskExecutionOuterClass.TaskExecution taskExecution_;
      private com.google.protobuf.SingleFieldBuilderV3<
          perfetto.protos.TaskExecutionOuterClass.TaskExecution, perfetto.protos.TaskExecutionOuterClass.TaskExecution.Builder, perfetto.protos.TaskExecutionOuterClass.TaskExecutionOrBuilder> taskExecutionBuilder_;
      /**
       * <pre>
       * Typed event arguments:
       * </pre>
       *
       * <code>optional .perfetto.protos.TaskExecution task_execution = 5;</code>
       * @return Whether the taskExecution field is set.
       */
      public boolean hasTaskExecution() {
        return ((bitField0_ & 0x00020000) != 0);
      }
      /**
       * <pre>
       * Typed event arguments:
       * </pre>
       *
       * <code>optional .perfetto.protos.TaskExecution task_execution = 5;</code>
       * @return The taskExecution.
       */
      public perfetto.protos.TaskExecutionOuterClass.TaskExecution getTaskExecution() {
        if (taskExecutionBuilder_ == null) {
          return taskExecution_ == null ? perfetto.protos.TaskExecutionOuterClass.TaskExecution.getDefaultInstance() : taskExecution_;
        } else {
          return taskExecutionBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       * Typed event arguments:
       * </pre>
       *
       * <code>optional .perfetto.protos.TaskExecution task_execution = 5;</code>
       */
      public Builder setTaskExecution(perfetto.protos.TaskExecutionOuterClass.TaskExecution value) {
        if (taskExecutionBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          taskExecution_ = value;
        } else {
          taskExecutionBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00020000;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Typed event arguments:
       * </pre>
       *
       * <code>optional .perfetto.protos.TaskExecution task_execution = 5;</code>
       */
      public Builder setTaskExecution(
          perfetto.protos.TaskExecutionOuterClass.TaskExecution.Builder builderForValue) {
        if (taskExecutionBuilder_ == null) {
          taskExecution_ = builderForValue.build();
        } else {
          taskExecutionBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00020000;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Typed event arguments:
       * </pre>
       *
       * <code>optional .perfetto.protos.TaskExecution task_execution = 5;</code>
       */
      public Builder mergeTaskExecution(perfetto.protos.TaskExecutionOuterClass.TaskExecution value) {
        if (taskExecutionBuilder_ == null) {
          if (((bitField0_ & 0x00020000) != 0) &&
            taskExecution_ != null &&
            taskExecution_ != perfetto.protos.TaskExecutionOuterClass.TaskExecution.getDefaultInstance()) {
            getTaskExecutionBuilder().mergeFrom(value);
          } else {
            taskExecution_ = value;
          }
        } else {
          taskExecutionBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00020000;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Typed event arguments:
       * </pre>
       *
       * <code>optional .perfetto.protos.TaskExecution task_execution = 5;</code>
       */
      public Builder clearTaskExecution() {
        bitField0_ = (bitField0_ & ~0x00020000);
        taskExecution_ = null;
        if (taskExecutionBuilder_ != null) {
          taskExecutionBuilder_.dispose();
          taskExecutionBuilder_ = null;
        }
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Typed event arguments:
       * </pre>
       *
       * <code>optional .perfetto.protos.TaskExecution task_execution = 5;</code>
       */
      public perfetto.protos.TaskExecutionOuterClass.TaskExecution.Builder getTaskExecutionBuilder() {
        bitField0_ |= 0x00020000;
        onChanged();
        return getTaskExecutionFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       * Typed event arguments:
       * </pre>
       *
       * <code>optional .perfetto.protos.TaskExecution task_execution = 5;</code>
       */
      public perfetto.protos.TaskExecutionOuterClass.TaskExecutionOrBuilder getTaskExecutionOrBuilder() {
        if (taskExecutionBuilder_ != null) {
          return taskExecutionBuilder_.getMessageOrBuilder();
        } else {
          return taskExecution_ == null ?
              perfetto.protos.TaskExecutionOuterClass.TaskExecution.getDefaultInstance() : taskExecution_;
        }
      }
      /**
       * <pre>
       * Typed event arguments:
       * </pre>
       *
       * <code>optional .perfetto.protos.TaskExecution task_execution = 5;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          perfetto.protos.TaskExecutionOuterClass.TaskExecution, perfetto.protos.TaskExecutionOuterClass.TaskExecution.Builder, perfetto.protos.TaskExecutionOuterClass.TaskExecutionOrBuilder> 
          getTaskExecutionFieldBuilder() {
        if (taskExecutionBuilder_ == null) {
          taskExecutionBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              perfetto.protos.TaskExecutionOuterClass.TaskExecution, perfetto.protos.TaskExecutionOuterClass.TaskExecution.Builder, perfetto.protos.TaskExecutionOuterClass.TaskExecutionOrBuilder>(
                  getTaskExecution(),
                  getParentForChildren(),
                  isClean());
          taskExecution_ = null;
        }
        return taskExecutionBuilder_;
      }

      private perfetto.protos.LogMessageOuterClass.LogMessage logMessage_;
      private com.google.protobuf.SingleFieldBuilderV3<
          perfetto.protos.LogMessageOuterClass.LogMessage, perfetto.protos.LogMessageOuterClass.LogMessage.Builder, perfetto.protos.LogMessageOuterClass.LogMessageOrBuilder> logMessageBuilder_;
      /**
       * <code>optional .perfetto.protos.LogMessage log_message = 21;</code>
       * @return Whether the logMessage field is set.
       */
      public boolean hasLogMessage() {
        return ((bitField0_ & 0x00040000) != 0);
      }
      /**
       * <code>optional .perfetto.protos.LogMessage log_message = 21;</code>
       * @return The logMessage.
       */
      public perfetto.protos.LogMessageOuterClass.LogMessage getLogMessage() {
        if (logMessageBuilder_ == null) {
          return logMessage_ == null ? perfetto.protos.LogMessageOuterClass.LogMessage.getDefaultInstance() : logMessage_;
        } else {
          return logMessageBuilder_.getMessage();
        }
      }
      /**
       * <code>optional .perfetto.protos.LogMessage log_message = 21;</code>
       */
      public Builder setLogMessage(perfetto.protos.LogMessageOuterClass.LogMessage value) {
        if (logMessageBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          logMessage_ = value;
        } else {
          logMessageBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00040000;
        onChanged();
        return this;
      }
      /**
       * <code>optional .perfetto.protos.LogMessage log_message = 21;</code>
       */
      public Builder setLogMessage(
          perfetto.protos.LogMessageOuterClass.LogMessage.Builder builderForValue) {
        if (logMessageBuilder_ == null) {
          logMessage_ = builderForValue.build();
        } else {
          logMessageBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00040000;
        onChanged();
        return this;
      }
      /**
       * <code>optional .perfetto.protos.LogMessage log_message = 21;</code>
       */
      public Builder mergeLogMessage(perfetto.protos.LogMessageOuterClass.LogMessage value) {
        if (logMessageBuilder_ == null) {
          if (((bitField0_ & 0x00040000) != 0) &&
            logMessage_ != null &&
            logMessage_ != perfetto.protos.LogMessageOuterClass.LogMessage.getDefaultInstance()) {
            getLogMessageBuilder().mergeFrom(value);
          } else {
            logMessage_ = value;
          }
        } else {
          logMessageBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00040000;
        onChanged();
        return this;
      }
      /**
       * <code>optional .perfetto.protos.LogMessage log_message = 21;</code>
       */
      public Builder clearLogMessage() {
        bitField0_ = (bitField0_ & ~0x00040000);
        logMessage_ = null;
        if (logMessageBuilder_ != null) {
          logMessageBuilder_.dispose();
          logMessageBuilder_ = null;
        }
        onChanged();
        return this;
      }
      /**
       * <code>optional .perfetto.protos.LogMessage log_message = 21;</code>
       */
      public perfetto.protos.LogMessageOuterClass.LogMessage.Builder getLogMessageBuilder() {
        bitField0_ |= 0x00040000;
        onChanged();
        return getLogMessageFieldBuilder().getBuilder();
      }
      /**
       * <code>optional .perfetto.protos.LogMessage log_message = 21;</code>
       */
      public perfetto.protos.LogMessageOuterClass.LogMessageOrBuilder getLogMessageOrBuilder() {
        if (logMessageBuilder_ != null) {
          return logMessageBuilder_.getMessageOrBuilder();
        } else {
          return logMessage_ == null ?
              perfetto.protos.LogMessageOuterClass.LogMessage.getDefaultInstance() : logMessage_;
        }
      }
      /**
       * <code>optional .perfetto.protos.LogMessage log_message = 21;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          perfetto.protos.LogMessageOuterClass.LogMessage, perfetto.protos.LogMessageOuterClass.LogMessage.Builder, perfetto.protos.LogMessageOuterClass.LogMessageOrBuilder> 
          getLogMessageFieldBuilder() {
        if (logMessageBuilder_ == null) {
          logMessageBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              perfetto.protos.LogMessageOuterClass.LogMessage, perfetto.protos.LogMessageOuterClass.LogMessage.Builder, perfetto.protos.LogMessageOuterClass.LogMessageOrBuilder>(
                  getLogMessage(),
                  getParentForChildren(),
                  isClean());
          logMessage_ = null;
        }
        return logMessageBuilder_;
      }

      private perfetto.protos.ChromeCompositorSchedulerStateOuterClass.ChromeCompositorSchedulerState ccSchedulerState_;
      private com.google.protobuf.SingleFieldBuilderV3<
          perfetto.protos.ChromeCompositorSchedulerStateOuterClass.ChromeCompositorSchedulerState, perfetto.protos.ChromeCompositorSchedulerStateOuterClass.ChromeCompositorSchedulerState.Builder, perfetto.protos.ChromeCompositorSchedulerStateOuterClass.ChromeCompositorSchedulerStateOrBuilder> ccSchedulerStateBuilder_;
      /**
       * <code>optional .perfetto.protos.ChromeCompositorSchedulerState cc_scheduler_state = 24;</code>
       * @return Whether the ccSchedulerState field is set.
       */
      public boolean hasCcSchedulerState() {
        return ((bitField0_ & 0x00080000) != 0);
      }
      /**
       * <code>optional .perfetto.protos.ChromeCompositorSchedulerState cc_scheduler_state = 24;</code>
       * @return The ccSchedulerState.
       */
      public perfetto.protos.ChromeCompositorSchedulerStateOuterClass.ChromeCompositorSchedulerState getCcSchedulerState() {
        if (ccSchedulerStateBuilder_ == null) {
          return ccSchedulerState_ == null ? perfetto.protos.ChromeCompositorSchedulerStateOuterClass.ChromeCompositorSchedulerState.getDefaultInstance() : ccSchedulerState_;
        } else {
          return ccSchedulerStateBuilder_.getMessage();
        }
      }
      /**
       * <code>optional .perfetto.protos.ChromeCompositorSchedulerState cc_scheduler_state = 24;</code>
       */
      public Builder setCcSchedulerState(perfetto.protos.ChromeCompositorSchedulerStateOuterClass.ChromeCompositorSchedulerState value) {
        if (ccSchedulerStateBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ccSchedulerState_ = value;
        } else {
          ccSchedulerStateBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00080000;
        onChanged();
        return this;
      }
      /**
       * <code>optional .perfetto.protos.ChromeCompositorSchedulerState cc_scheduler_state = 24;</code>
       */
      public Builder setCcSchedulerState(
          perfetto.protos.ChromeCompositorSchedulerStateOuterClass.ChromeCompositorSchedulerState.Builder builderForValue) {
        if (ccSchedulerStateBuilder_ == null) {
          ccSchedulerState_ = builderForValue.build();
        } else {
          ccSchedulerStateBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00080000;
        onChanged();
        return this;
      }
      /**
       * <code>optional .perfetto.protos.ChromeCompositorSchedulerState cc_scheduler_state = 24;</code>
       */
      public Builder mergeCcSchedulerState(perfetto.protos.ChromeCompositorSchedulerStateOuterClass.ChromeCompositorSchedulerState value) {
        if (ccSchedulerStateBuilder_ == null) {
          if (((bitField0_ & 0x00080000) != 0) &&
            ccSchedulerState_ != null &&
            ccSchedulerState_ != perfetto.protos.ChromeCompositorSchedulerStateOuterClass.ChromeCompositorSchedulerState.getDefaultInstance()) {
            getCcSchedulerStateBuilder().mergeFrom(value);
          } else {
            ccSchedulerState_ = value;
          }
        } else {
          ccSchedulerStateBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00080000;
        onChanged();
        return this;
      }
      /**
       * <code>optional .perfetto.protos.ChromeCompositorSchedulerState cc_scheduler_state = 24;</code>
       */
      public Builder clearCcSchedulerState() {
        bitField0_ = (bitField0_ & ~0x00080000);
        ccSchedulerState_ = null;
        if (ccSchedulerStateBuilder_ != null) {
          ccSchedulerStateBuilder_.dispose();
          ccSchedulerStateBuilder_ = null;
        }
        onChanged();
        return this;
      }
      /**
       * <code>optional .perfetto.protos.ChromeCompositorSchedulerState cc_scheduler_state = 24;</code>
       */
      public perfetto.protos.ChromeCompositorSchedulerStateOuterClass.ChromeCompositorSchedulerState.Builder getCcSchedulerStateBuilder() {
        bitField0_ |= 0x00080000;
        onChanged();
        return getCcSchedulerStateFieldBuilder().getBuilder();
      }
      /**
       * <code>optional .perfetto.protos.ChromeCompositorSchedulerState cc_scheduler_state = 24;</code>
       */
      public perfetto.protos.ChromeCompositorSchedulerStateOuterClass.ChromeCompositorSchedulerStateOrBuilder getCcSchedulerStateOrBuilder() {
        if (ccSchedulerStateBuilder_ != null) {
          return ccSchedulerStateBuilder_.getMessageOrBuilder();
        } else {
          return ccSchedulerState_ == null ?
              perfetto.protos.ChromeCompositorSchedulerStateOuterClass.ChromeCompositorSchedulerState.getDefaultInstance() : ccSchedulerState_;
        }
      }
      /**
       * <code>optional .perfetto.protos.ChromeCompositorSchedulerState cc_scheduler_state = 24;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          perfetto.protos.ChromeCompositorSchedulerStateOuterClass.ChromeCompositorSchedulerState, perfetto.protos.ChromeCompositorSchedulerStateOuterClass.ChromeCompositorSchedulerState.Builder, perfetto.protos.ChromeCompositorSchedulerStateOuterClass.ChromeCompositorSchedulerStateOrBuilder> 
          getCcSchedulerStateFieldBuilder() {
        if (ccSchedulerStateBuilder_ == null) {
          ccSchedulerStateBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              perfetto.protos.ChromeCompositorSchedulerStateOuterClass.ChromeCompositorSchedulerState, perfetto.protos.ChromeCompositorSchedulerStateOuterClass.ChromeCompositorSchedulerState.Builder, perfetto.protos.ChromeCompositorSchedulerStateOuterClass.ChromeCompositorSchedulerStateOrBuilder>(
                  getCcSchedulerState(),
                  getParentForChildren(),
                  isClean());
          ccSchedulerState_ = null;
        }
        return ccSchedulerStateBuilder_;
      }

      private perfetto.protos.ChromeUserEventOuterClass.ChromeUserEvent chromeUserEvent_;
      private com.google.protobuf.SingleFieldBuilderV3<
          perfetto.protos.ChromeUserEventOuterClass.ChromeUserEvent, perfetto.protos.ChromeUserEventOuterClass.ChromeUserEvent.Builder, perfetto.protos.ChromeUserEventOuterClass.ChromeUserEventOrBuilder> chromeUserEventBuilder_;
      /**
       * <code>optional .perfetto.protos.ChromeUserEvent chrome_user_event = 25;</code>
       * @return Whether the chromeUserEvent field is set.
       */
      public boolean hasChromeUserEvent() {
        return ((bitField0_ & 0x00100000) != 0);
      }
      /**
       * <code>optional .perfetto.protos.ChromeUserEvent chrome_user_event = 25;</code>
       * @return The chromeUserEvent.
       */
      public perfetto.protos.ChromeUserEventOuterClass.ChromeUserEvent getChromeUserEvent() {
        if (chromeUserEventBuilder_ == null) {
          return chromeUserEvent_ == null ? perfetto.protos.ChromeUserEventOuterClass.ChromeUserEvent.getDefaultInstance() : chromeUserEvent_;
        } else {
          return chromeUserEventBuilder_.getMessage();
        }
      }
      /**
       * <code>optional .perfetto.protos.ChromeUserEvent chrome_user_event = 25;</code>
       */
      public Builder setChromeUserEvent(perfetto.protos.ChromeUserEventOuterClass.ChromeUserEvent value) {
        if (chromeUserEventBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          chromeUserEvent_ = value;
        } else {
          chromeUserEventBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00100000;
        onChanged();
        return this;
      }
      /**
       * <code>optional .perfetto.protos.ChromeUserEvent chrome_user_event = 25;</code>
       */
      public Builder setChromeUserEvent(
          perfetto.protos.ChromeUserEventOuterClass.ChromeUserEvent.Builder builderForValue) {
        if (chromeUserEventBuilder_ == null) {
          chromeUserEvent_ = builderForValue.build();
        } else {
          chromeUserEventBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00100000;
        onChanged();
        return this;
      }
      /**
       * <code>optional .perfetto.protos.ChromeUserEvent chrome_user_event = 25;</code>
       */
      public Builder mergeChromeUserEvent(perfetto.protos.ChromeUserEventOuterClass.ChromeUserEvent value) {
        if (chromeUserEventBuilder_ == null) {
          if (((bitField0_ & 0x00100000) != 0) &&
            chromeUserEvent_ != null &&
            chromeUserEvent_ != perfetto.protos.ChromeUserEventOuterClass.ChromeUserEvent.getDefaultInstance()) {
            getChromeUserEventBuilder().mergeFrom(value);
          } else {
            chromeUserEvent_ = value;
          }
        } else {
          chromeUserEventBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00100000;
        onChanged();
        return this;
      }
      /**
       * <code>optional .perfetto.protos.ChromeUserEvent chrome_user_event = 25;</code>
       */
      public Builder clearChromeUserEvent() {
        bitField0_ = (bitField0_ & ~0x00100000);
        chromeUserEvent_ = null;
        if (chromeUserEventBuilder_ != null) {
          chromeUserEventBuilder_.dispose();
          chromeUserEventBuilder_ = null;
        }
        onChanged();
        return this;
      }
      /**
       * <code>optional .perfetto.protos.ChromeUserEvent chrome_user_event = 25;</code>
       */
      public perfetto.protos.ChromeUserEventOuterClass.ChromeUserEvent.Builder getChromeUserEventBuilder() {
        bitField0_ |= 0x00100000;
        onChanged();
        return getChromeUserEventFieldBuilder().getBuilder();
      }
      /**
       * <code>optional .perfetto.protos.ChromeUserEvent chrome_user_event = 25;</code>
       */
      public perfetto.protos.ChromeUserEventOuterClass.ChromeUserEventOrBuilder getChromeUserEventOrBuilder() {
        if (chromeUserEventBuilder_ != null) {
          return chromeUserEventBuilder_.getMessageOrBuilder();
        } else {
          return chromeUserEvent_ == null ?
              perfetto.protos.ChromeUserEventOuterClass.ChromeUserEvent.getDefaultInstance() : chromeUserEvent_;
        }
      }
      /**
       * <code>optional .perfetto.protos.ChromeUserEvent chrome_user_event = 25;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          perfetto.protos.ChromeUserEventOuterClass.ChromeUserEvent, perfetto.protos.ChromeUserEventOuterClass.ChromeUserEvent.Builder, perfetto.protos.ChromeUserEventOuterClass.ChromeUserEventOrBuilder> 
          getChromeUserEventFieldBuilder() {
        if (chromeUserEventBuilder_ == null) {
          chromeUserEventBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              perfetto.protos.ChromeUserEventOuterClass.ChromeUserEvent, perfetto.protos.ChromeUserEventOuterClass.ChromeUserEvent.Builder, perfetto.protos.ChromeUserEventOuterClass.ChromeUserEventOrBuilder>(
                  getChromeUserEvent(),
                  getParentForChildren(),
                  isClean());
          chromeUserEvent_ = null;
        }
        return chromeUserEventBuilder_;
      }

      private perfetto.protos.ChromeKeyedServiceOuterClass.ChromeKeyedService chromeKeyedService_;
      private com.google.protobuf.SingleFieldBuilderV3<
          perfetto.protos.ChromeKeyedServiceOuterClass.ChromeKeyedService, perfetto.protos.ChromeKeyedServiceOuterClass.ChromeKeyedService.Builder, perfetto.protos.ChromeKeyedServiceOuterClass.ChromeKeyedServiceOrBuilder> chromeKeyedServiceBuilder_;
      /**
       * <code>optional .perfetto.protos.ChromeKeyedService chrome_keyed_service = 26;</code>
       * @return Whether the chromeKeyedService field is set.
       */
      public boolean hasChromeKeyedService() {
        return ((bitField0_ & 0x00200000) != 0);
      }
      /**
       * <code>optional .perfetto.protos.ChromeKeyedService chrome_keyed_service = 26;</code>
       * @return The chromeKeyedService.
       */
      public perfetto.protos.ChromeKeyedServiceOuterClass.ChromeKeyedService getChromeKeyedService() {
        if (chromeKeyedServiceBuilder_ == null) {
          return chromeKeyedService_ == null ? perfetto.protos.ChromeKeyedServiceOuterClass.ChromeKeyedService.getDefaultInstance() : chromeKeyedService_;
        } else {
          return chromeKeyedServiceBuilder_.getMessage();
        }
      }
      /**
       * <code>optional .perfetto.protos.ChromeKeyedService chrome_keyed_service = 26;</code>
       */
      public Builder setChromeKeyedService(perfetto.protos.ChromeKeyedServiceOuterClass.ChromeKeyedService value) {
        if (chromeKeyedServiceBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          chromeKeyedService_ = value;
        } else {
          chromeKeyedServiceBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00200000;
        onChanged();
        return this;
      }
      /**
       * <code>optional .perfetto.protos.ChromeKeyedService chrome_keyed_service = 26;</code>
       */
      public Builder setChromeKeyedService(
          perfetto.protos.ChromeKeyedServiceOuterClass.ChromeKeyedService.Builder builderForValue) {
        if (chromeKeyedServiceBuilder_ == null) {
          chromeKeyedService_ = builderForValue.build();
        } else {
          chromeKeyedServiceBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00200000;
        onChanged();
        return this;
      }
      /**
       * <code>optional .perfetto.protos.ChromeKeyedService chrome_keyed_service = 26;</code>
       */
      public Builder mergeChromeKeyedService(perfetto.protos.ChromeKeyedServiceOuterClass.ChromeKeyedService value) {
        if (chromeKeyedServiceBuilder_ == null) {
          if (((bitField0_ & 0x00200000) != 0) &&
            chromeKeyedService_ != null &&
            chromeKeyedService_ != perfetto.protos.ChromeKeyedServiceOuterClass.ChromeKeyedService.getDefaultInstance()) {
            getChromeKeyedServiceBuilder().mergeFrom(value);
          } else {
            chromeKeyedService_ = value;
          }
        } else {
          chromeKeyedServiceBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00200000;
        onChanged();
        return this;
      }
      /**
       * <code>optional .perfetto.protos.ChromeKeyedService chrome_keyed_service = 26;</code>
       */
      public Builder clearChromeKeyedService() {
        bitField0_ = (bitField0_ & ~0x00200000);
        chromeKeyedService_ = null;
        if (chromeKeyedServiceBuilder_ != null) {
          chromeKeyedServiceBuilder_.dispose();
          chromeKeyedServiceBuilder_ = null;
        }
        onChanged();
        return this;
      }
      /**
       * <code>optional .perfetto.protos.ChromeKeyedService chrome_keyed_service = 26;</code>
       */
      public perfetto.protos.ChromeKeyedServiceOuterClass.ChromeKeyedService.Builder getChromeKeyedServiceBuilder() {
        bitField0_ |= 0x00200000;
        onChanged();
        return getChromeKeyedServiceFieldBuilder().getBuilder();
      }
      /**
       * <code>optional .perfetto.protos.ChromeKeyedService chrome_keyed_service = 26;</code>
       */
      public perfetto.protos.ChromeKeyedServiceOuterClass.ChromeKeyedServiceOrBuilder getChromeKeyedServiceOrBuilder() {
        if (chromeKeyedServiceBuilder_ != null) {
          return chromeKeyedServiceBuilder_.getMessageOrBuilder();
        } else {
          return chromeKeyedService_ == null ?
              perfetto.protos.ChromeKeyedServiceOuterClass.ChromeKeyedService.getDefaultInstance() : chromeKeyedService_;
        }
      }
      /**
       * <code>optional .perfetto.protos.ChromeKeyedService chrome_keyed_service = 26;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          perfetto.protos.ChromeKeyedServiceOuterClass.ChromeKeyedService, perfetto.protos.ChromeKeyedServiceOuterClass.ChromeKeyedService.Builder, perfetto.protos.ChromeKeyedServiceOuterClass.ChromeKeyedServiceOrBuilder> 
          getChromeKeyedServiceFieldBuilder() {
        if (chromeKeyedServiceBuilder_ == null) {
          chromeKeyedServiceBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              perfetto.protos.ChromeKeyedServiceOuterClass.ChromeKeyedService, perfetto.protos.ChromeKeyedServiceOuterClass.ChromeKeyedService.Builder, perfetto.protos.ChromeKeyedServiceOuterClass.ChromeKeyedServiceOrBuilder>(
                  getChromeKeyedService(),
                  getParentForChildren(),
                  isClean());
          chromeKeyedService_ = null;
        }
        return chromeKeyedServiceBuilder_;
      }

      private perfetto.protos.ChromeLegacyIpcOuterClass.ChromeLegacyIpc chromeLegacyIpc_;
      private com.google.protobuf.SingleFieldBuilderV3<
          perfetto.protos.ChromeLegacyIpcOuterClass.ChromeLegacyIpc, perfetto.protos.ChromeLegacyIpcOuterClass.ChromeLegacyIpc.Builder, perfetto.protos.ChromeLegacyIpcOuterClass.ChromeLegacyIpcOrBuilder> chromeLegacyIpcBuilder_;
      /**
       * <code>optional .perfetto.protos.ChromeLegacyIpc chrome_legacy_ipc = 27;</code>
       * @return Whether the chromeLegacyIpc field is set.
       */
      public boolean hasChromeLegacyIpc() {
        return ((bitField0_ & 0x00400000) != 0);
      }
      /**
       * <code>optional .perfetto.protos.ChromeLegacyIpc chrome_legacy_ipc = 27;</code>
       * @return The chromeLegacyIpc.
       */
      public perfetto.protos.ChromeLegacyIpcOuterClass.ChromeLegacyIpc getChromeLegacyIpc() {
        if (chromeLegacyIpcBuilder_ == null) {
          return chromeLegacyIpc_ == null ? perfetto.protos.ChromeLegacyIpcOuterClass.ChromeLegacyIpc.getDefaultInstance() : chromeLegacyIpc_;
        } else {
          return chromeLegacyIpcBuilder_.getMessage();
        }
      }
      /**
       * <code>optional .perfetto.protos.ChromeLegacyIpc chrome_legacy_ipc = 27;</code>
       */
      public Builder setChromeLegacyIpc(perfetto.protos.ChromeLegacyIpcOuterClass.ChromeLegacyIpc value) {
        if (chromeLegacyIpcBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          chromeLegacyIpc_ = value;
        } else {
          chromeLegacyIpcBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00400000;
        onChanged();
        return this;
      }
      /**
       * <code>optional .perfetto.protos.ChromeLegacyIpc chrome_legacy_ipc = 27;</code>
       */
      public Builder setChromeLegacyIpc(
          perfetto.protos.ChromeLegacyIpcOuterClass.ChromeLegacyIpc.Builder builderForValue) {
        if (chromeLegacyIpcBuilder_ == null) {
          chromeLegacyIpc_ = builderForValue.build();
        } else {
          chromeLegacyIpcBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00400000;
        onChanged();
        return this;
      }
      /**
       * <code>optional .perfetto.protos.ChromeLegacyIpc chrome_legacy_ipc = 27;</code>
       */
      public Builder mergeChromeLegacyIpc(perfetto.protos.ChromeLegacyIpcOuterClass.ChromeLegacyIpc value) {
        if (chromeLegacyIpcBuilder_ == null) {
          if (((bitField0_ & 0x00400000) != 0) &&
            chromeLegacyIpc_ != null &&
            chromeLegacyIpc_ != perfetto.protos.ChromeLegacyIpcOuterClass.ChromeLegacyIpc.getDefaultInstance()) {
            getChromeLegacyIpcBuilder().mergeFrom(value);
          } else {
            chromeLegacyIpc_ = value;
          }
        } else {
          chromeLegacyIpcBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00400000;
        onChanged();
        return this;
      }
      /**
       * <code>optional .perfetto.protos.ChromeLegacyIpc chrome_legacy_ipc = 27;</code>
       */
      public Builder clearChromeLegacyIpc() {
        bitField0_ = (bitField0_ & ~0x00400000);
        chromeLegacyIpc_ = null;
        if (chromeLegacyIpcBuilder_ != null) {
          chromeLegacyIpcBuilder_.dispose();
          chromeLegacyIpcBuilder_ = null;
        }
        onChanged();
        return this;
      }
      /**
       * <code>optional .perfetto.protos.ChromeLegacyIpc chrome_legacy_ipc = 27;</code>
       */
      public perfetto.protos.ChromeLegacyIpcOuterClass.ChromeLegacyIpc.Builder getChromeLegacyIpcBuilder() {
        bitField0_ |= 0x00400000;
        onChanged();
        return getChromeLegacyIpcFieldBuilder().getBuilder();
      }
      /**
       * <code>optional .perfetto.protos.ChromeLegacyIpc chrome_legacy_ipc = 27;</code>
       */
      public perfetto.protos.ChromeLegacyIpcOuterClass.ChromeLegacyIpcOrBuilder getChromeLegacyIpcOrBuilder() {
        if (chromeLegacyIpcBuilder_ != null) {
          return chromeLegacyIpcBuilder_.getMessageOrBuilder();
        } else {
          return chromeLegacyIpc_ == null ?
              perfetto.protos.ChromeLegacyIpcOuterClass.ChromeLegacyIpc.getDefaultInstance() : chromeLegacyIpc_;
        }
      }
      /**
       * <code>optional .perfetto.protos.ChromeLegacyIpc chrome_legacy_ipc = 27;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          perfetto.protos.ChromeLegacyIpcOuterClass.ChromeLegacyIpc, perfetto.protos.ChromeLegacyIpcOuterClass.ChromeLegacyIpc.Builder, perfetto.protos.ChromeLegacyIpcOuterClass.ChromeLegacyIpcOrBuilder> 
          getChromeLegacyIpcFieldBuilder() {
        if (chromeLegacyIpcBuilder_ == null) {
          chromeLegacyIpcBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              perfetto.protos.ChromeLegacyIpcOuterClass.ChromeLegacyIpc, perfetto.protos.ChromeLegacyIpcOuterClass.ChromeLegacyIpc.Builder, perfetto.protos.ChromeLegacyIpcOuterClass.ChromeLegacyIpcOrBuilder>(
                  getChromeLegacyIpc(),
                  getParentForChildren(),
                  isClean());
          chromeLegacyIpc_ = null;
        }
        return chromeLegacyIpcBuilder_;
      }

      private perfetto.protos.ChromeHistogramSampleOuterClass.ChromeHistogramSample chromeHistogramSample_;
      private com.google.protobuf.SingleFieldBuilderV3<
          perfetto.protos.ChromeHistogramSampleOuterClass.ChromeHistogramSample, perfetto.protos.ChromeHistogramSampleOuterClass.ChromeHistogramSample.Builder, perfetto.protos.ChromeHistogramSampleOuterClass.ChromeHistogramSampleOrBuilder> chromeHistogramSampleBuilder_;
      /**
       * <code>optional .perfetto.protos.ChromeHistogramSample chrome_histogram_sample = 28;</code>
       * @return Whether the chromeHistogramSample field is set.
       */
      public boolean hasChromeHistogramSample() {
        return ((bitField0_ & 0x00800000) != 0);
      }
      /**
       * <code>optional .perfetto.protos.ChromeHistogramSample chrome_histogram_sample = 28;</code>
       * @return The chromeHistogramSample.
       */
      public perfetto.protos.ChromeHistogramSampleOuterClass.ChromeHistogramSample getChromeHistogramSample() {
        if (chromeHistogramSampleBuilder_ == null) {
          return chromeHistogramSample_ == null ? perfetto.protos.ChromeHistogramSampleOuterClass.ChromeHistogramSample.getDefaultInstance() : chromeHistogramSample_;
        } else {
          return chromeHistogramSampleBuilder_.getMessage();
        }
      }
      /**
       * <code>optional .perfetto.protos.ChromeHistogramSample chrome_histogram_sample = 28;</code>
       */
      public Builder setChromeHistogramSample(perfetto.protos.ChromeHistogramSampleOuterClass.ChromeHistogramSample value) {
        if (chromeHistogramSampleBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          chromeHistogramSample_ = value;
        } else {
          chromeHistogramSampleBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00800000;
        onChanged();
        return this;
      }
      /**
       * <code>optional .perfetto.protos.ChromeHistogramSample chrome_histogram_sample = 28;</code>
       */
      public Builder setChromeHistogramSample(
          perfetto.protos.ChromeHistogramSampleOuterClass.ChromeHistogramSample.Builder builderForValue) {
        if (chromeHistogramSampleBuilder_ == null) {
          chromeHistogramSample_ = builderForValue.build();
        } else {
          chromeHistogramSampleBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00800000;
        onChanged();
        return this;
      }
      /**
       * <code>optional .perfetto.protos.ChromeHistogramSample chrome_histogram_sample = 28;</code>
       */
      public Builder mergeChromeHistogramSample(perfetto.protos.ChromeHistogramSampleOuterClass.ChromeHistogramSample value) {
        if (chromeHistogramSampleBuilder_ == null) {
          if (((bitField0_ & 0x00800000) != 0) &&
            chromeHistogramSample_ != null &&
            chromeHistogramSample_ != perfetto.protos.ChromeHistogramSampleOuterClass.ChromeHistogramSample.getDefaultInstance()) {
            getChromeHistogramSampleBuilder().mergeFrom(value);
          } else {
            chromeHistogramSample_ = value;
          }
        } else {
          chromeHistogramSampleBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00800000;
        onChanged();
        return this;
      }
      /**
       * <code>optional .perfetto.protos.ChromeHistogramSample chrome_histogram_sample = 28;</code>
       */
      public Builder clearChromeHistogramSample() {
        bitField0_ = (bitField0_ & ~0x00800000);
        chromeHistogramSample_ = null;
        if (chromeHistogramSampleBuilder_ != null) {
          chromeHistogramSampleBuilder_.dispose();
          chromeHistogramSampleBuilder_ = null;
        }
        onChanged();
        return this;
      }
      /**
       * <code>optional .perfetto.protos.ChromeHistogramSample chrome_histogram_sample = 28;</code>
       */
      public perfetto.protos.ChromeHistogramSampleOuterClass.ChromeHistogramSample.Builder getChromeHistogramSampleBuilder() {
        bitField0_ |= 0x00800000;
        onChanged();
        return getChromeHistogramSampleFieldBuilder().getBuilder();
      }
      /**
       * <code>optional .perfetto.protos.ChromeHistogramSample chrome_histogram_sample = 28;</code>
       */
      public perfetto.protos.ChromeHistogramSampleOuterClass.ChromeHistogramSampleOrBuilder getChromeHistogramSampleOrBuilder() {
        if (chromeHistogramSampleBuilder_ != null) {
          return chromeHistogramSampleBuilder_.getMessageOrBuilder();
        } else {
          return chromeHistogramSample_ == null ?
              perfetto.protos.ChromeHistogramSampleOuterClass.ChromeHistogramSample.getDefaultInstance() : chromeHistogramSample_;
        }
      }
      /**
       * <code>optional .perfetto.protos.ChromeHistogramSample chrome_histogram_sample = 28;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          perfetto.protos.ChromeHistogramSampleOuterClass.ChromeHistogramSample, perfetto.protos.ChromeHistogramSampleOuterClass.ChromeHistogramSample.Builder, perfetto.protos.ChromeHistogramSampleOuterClass.ChromeHistogramSampleOrBuilder> 
          getChromeHistogramSampleFieldBuilder() {
        if (chromeHistogramSampleBuilder_ == null) {
          chromeHistogramSampleBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              perfetto.protos.ChromeHistogramSampleOuterClass.ChromeHistogramSample, perfetto.protos.ChromeHistogramSampleOuterClass.ChromeHistogramSample.Builder, perfetto.protos.ChromeHistogramSampleOuterClass.ChromeHistogramSampleOrBuilder>(
                  getChromeHistogramSample(),
                  getParentForChildren(),
                  isClean());
          chromeHistogramSample_ = null;
        }
        return chromeHistogramSampleBuilder_;
      }

      private perfetto.protos.ChromeLatencyInfoOuterClass.ChromeLatencyInfo chromeLatencyInfo_;
      private com.google.protobuf.SingleFieldBuilderV3<
          perfetto.protos.ChromeLatencyInfoOuterClass.ChromeLatencyInfo, perfetto.protos.ChromeLatencyInfoOuterClass.ChromeLatencyInfo.Builder, perfetto.protos.ChromeLatencyInfoOuterClass.ChromeLatencyInfoOrBuilder> chromeLatencyInfoBuilder_;
      /**
       * <code>optional .perfetto.protos.ChromeLatencyInfo chrome_latency_info = 29;</code>
       * @return Whether the chromeLatencyInfo field is set.
       */
      public boolean hasChromeLatencyInfo() {
        return ((bitField0_ & 0x01000000) != 0);
      }
      /**
       * <code>optional .perfetto.protos.ChromeLatencyInfo chrome_latency_info = 29;</code>
       * @return The chromeLatencyInfo.
       */
      public perfetto.protos.ChromeLatencyInfoOuterClass.ChromeLatencyInfo getChromeLatencyInfo() {
        if (chromeLatencyInfoBuilder_ == null) {
          return chromeLatencyInfo_ == null ? perfetto.protos.ChromeLatencyInfoOuterClass.ChromeLatencyInfo.getDefaultInstance() : chromeLatencyInfo_;
        } else {
          return chromeLatencyInfoBuilder_.getMessage();
        }
      }
      /**
       * <code>optional .perfetto.protos.ChromeLatencyInfo chrome_latency_info = 29;</code>
       */
      public Builder setChromeLatencyInfo(perfetto.protos.ChromeLatencyInfoOuterClass.ChromeLatencyInfo value) {
        if (chromeLatencyInfoBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          chromeLatencyInfo_ = value;
        } else {
          chromeLatencyInfoBuilder_.setMessage(value);
        }
        bitField0_ |= 0x01000000;
        onChanged();
        return this;
      }
      /**
       * <code>optional .perfetto.protos.ChromeLatencyInfo chrome_latency_info = 29;</code>
       */
      public Builder setChromeLatencyInfo(
          perfetto.protos.ChromeLatencyInfoOuterClass.ChromeLatencyInfo.Builder builderForValue) {
        if (chromeLatencyInfoBuilder_ == null) {
          chromeLatencyInfo_ = builderForValue.build();
        } else {
          chromeLatencyInfoBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x01000000;
        onChanged();
        return this;
      }
      /**
       * <code>optional .perfetto.protos.ChromeLatencyInfo chrome_latency_info = 29;</code>
       */
      public Builder mergeChromeLatencyInfo(perfetto.protos.ChromeLatencyInfoOuterClass.ChromeLatencyInfo value) {
        if (chromeLatencyInfoBuilder_ == null) {
          if (((bitField0_ & 0x01000000) != 0) &&
            chromeLatencyInfo_ != null &&
            chromeLatencyInfo_ != perfetto.protos.ChromeLatencyInfoOuterClass.ChromeLatencyInfo.getDefaultInstance()) {
            getChromeLatencyInfoBuilder().mergeFrom(value);
          } else {
            chromeLatencyInfo_ = value;
          }
        } else {
          chromeLatencyInfoBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x01000000;
        onChanged();
        return this;
      }
      /**
       * <code>optional .perfetto.protos.ChromeLatencyInfo chrome_latency_info = 29;</code>
       */
      public Builder clearChromeLatencyInfo() {
        bitField0_ = (bitField0_ & ~0x01000000);
        chromeLatencyInfo_ = null;
        if (chromeLatencyInfoBuilder_ != null) {
          chromeLatencyInfoBuilder_.dispose();
          chromeLatencyInfoBuilder_ = null;
        }
        onChanged();
        return this;
      }
      /**
       * <code>optional .perfetto.protos.ChromeLatencyInfo chrome_latency_info = 29;</code>
       */
      public perfetto.protos.ChromeLatencyInfoOuterClass.ChromeLatencyInfo.Builder getChromeLatencyInfoBuilder() {
        bitField0_ |= 0x01000000;
        onChanged();
        return getChromeLatencyInfoFieldBuilder().getBuilder();
      }
      /**
       * <code>optional .perfetto.protos.ChromeLatencyInfo chrome_latency_info = 29;</code>
       */
      public perfetto.protos.ChromeLatencyInfoOuterClass.ChromeLatencyInfoOrBuilder getChromeLatencyInfoOrBuilder() {
        if (chromeLatencyInfoBuilder_ != null) {
          return chromeLatencyInfoBuilder_.getMessageOrBuilder();
        } else {
          return chromeLatencyInfo_ == null ?
              perfetto.protos.ChromeLatencyInfoOuterClass.ChromeLatencyInfo.getDefaultInstance() : chromeLatencyInfo_;
        }
      }
      /**
       * <code>optional .perfetto.protos.ChromeLatencyInfo chrome_latency_info = 29;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          perfetto.protos.ChromeLatencyInfoOuterClass.ChromeLatencyInfo, perfetto.protos.ChromeLatencyInfoOuterClass.ChromeLatencyInfo.Builder, perfetto.protos.ChromeLatencyInfoOuterClass.ChromeLatencyInfoOrBuilder> 
          getChromeLatencyInfoFieldBuilder() {
        if (chromeLatencyInfoBuilder_ == null) {
          chromeLatencyInfoBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              perfetto.protos.ChromeLatencyInfoOuterClass.ChromeLatencyInfo, perfetto.protos.ChromeLatencyInfoOuterClass.ChromeLatencyInfo.Builder, perfetto.protos.ChromeLatencyInfoOuterClass.ChromeLatencyInfoOrBuilder>(
                  getChromeLatencyInfo(),
                  getParentForChildren(),
                  isClean());
          chromeLatencyInfo_ = null;
        }
        return chromeLatencyInfoBuilder_;
      }

      private perfetto.protos.ChromeFrameReporterOuterClass.ChromeFrameReporter chromeFrameReporter_;
      private com.google.protobuf.SingleFieldBuilderV3<
          perfetto.protos.ChromeFrameReporterOuterClass.ChromeFrameReporter, perfetto.protos.ChromeFrameReporterOuterClass.ChromeFrameReporter.Builder, perfetto.protos.ChromeFrameReporterOuterClass.ChromeFrameReporterOrBuilder> chromeFrameReporterBuilder_;
      /**
       * <code>optional .perfetto.protos.ChromeFrameReporter chrome_frame_reporter = 32;</code>
       * @return Whether the chromeFrameReporter field is set.
       */
      public boolean hasChromeFrameReporter() {
        return ((bitField0_ & 0x02000000) != 0);
      }
      /**
       * <code>optional .perfetto.protos.ChromeFrameReporter chrome_frame_reporter = 32;</code>
       * @return The chromeFrameReporter.
       */
      public perfetto.protos.ChromeFrameReporterOuterClass.ChromeFrameReporter getChromeFrameReporter() {
        if (chromeFrameReporterBuilder_ == null) {
          return chromeFrameReporter_ == null ? perfetto.protos.ChromeFrameReporterOuterClass.ChromeFrameReporter.getDefaultInstance() : chromeFrameReporter_;
        } else {
          return chromeFrameReporterBuilder_.getMessage();
        }
      }
      /**
       * <code>optional .perfetto.protos.ChromeFrameReporter chrome_frame_reporter = 32;</code>
       */
      public Builder setChromeFrameReporter(perfetto.protos.ChromeFrameReporterOuterClass.ChromeFrameReporter value) {
        if (chromeFrameReporterBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          chromeFrameReporter_ = value;
        } else {
          chromeFrameReporterBuilder_.setMessage(value);
        }
        bitField0_ |= 0x02000000;
        onChanged();
        return this;
      }
      /**
       * <code>optional .perfetto.protos.ChromeFrameReporter chrome_frame_reporter = 32;</code>
       */
      public Builder setChromeFrameReporter(
          perfetto.protos.ChromeFrameReporterOuterClass.ChromeFrameReporter.Builder builderForValue) {
        if (chromeFrameReporterBuilder_ == null) {
          chromeFrameReporter_ = builderForValue.build();
        } else {
          chromeFrameReporterBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x02000000;
        onChanged();
        return this;
      }
      /**
       * <code>optional .perfetto.protos.ChromeFrameReporter chrome_frame_reporter = 32;</code>
       */
      public Builder mergeChromeFrameReporter(perfetto.protos.ChromeFrameReporterOuterClass.ChromeFrameReporter value) {
        if (chromeFrameReporterBuilder_ == null) {
          if (((bitField0_ & 0x02000000) != 0) &&
            chromeFrameReporter_ != null &&
            chromeFrameReporter_ != perfetto.protos.ChromeFrameReporterOuterClass.ChromeFrameReporter.getDefaultInstance()) {
            getChromeFrameReporterBuilder().mergeFrom(value);
          } else {
            chromeFrameReporter_ = value;
          }
        } else {
          chromeFrameReporterBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x02000000;
        onChanged();
        return this;
      }
      /**
       * <code>optional .perfetto.protos.ChromeFrameReporter chrome_frame_reporter = 32;</code>
       */
      public Builder clearChromeFrameReporter() {
        bitField0_ = (bitField0_ & ~0x02000000);
        chromeFrameReporter_ = null;
        if (chromeFrameReporterBuilder_ != null) {
          chromeFrameReporterBuilder_.dispose();
          chromeFrameReporterBuilder_ = null;
        }
        onChanged();
        return this;
      }
      /**
       * <code>optional .perfetto.protos.ChromeFrameReporter chrome_frame_reporter = 32;</code>
       */
      public perfetto.protos.ChromeFrameReporterOuterClass.ChromeFrameReporter.Builder getChromeFrameReporterBuilder() {
        bitField0_ |= 0x02000000;
        onChanged();
        return getChromeFrameReporterFieldBuilder().getBuilder();
      }
      /**
       * <code>optional .perfetto.protos.ChromeFrameReporter chrome_frame_reporter = 32;</code>
       */
      public perfetto.protos.ChromeFrameReporterOuterClass.ChromeFrameReporterOrBuilder getChromeFrameReporterOrBuilder() {
        if (chromeFrameReporterBuilder_ != null) {
          return chromeFrameReporterBuilder_.getMessageOrBuilder();
        } else {
          return chromeFrameReporter_ == null ?
              perfetto.protos.ChromeFrameReporterOuterClass.ChromeFrameReporter.getDefaultInstance() : chromeFrameReporter_;
        }
      }
      /**
       * <code>optional .perfetto.protos.ChromeFrameReporter chrome_frame_reporter = 32;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          perfetto.protos.ChromeFrameReporterOuterClass.ChromeFrameReporter, perfetto.protos.ChromeFrameReporterOuterClass.ChromeFrameReporter.Builder, perfetto.protos.ChromeFrameReporterOuterClass.ChromeFrameReporterOrBuilder> 
          getChromeFrameReporterFieldBuilder() {
        if (chromeFrameReporterBuilder_ == null) {
          chromeFrameReporterBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              perfetto.protos.ChromeFrameReporterOuterClass.ChromeFrameReporter, perfetto.protos.ChromeFrameReporterOuterClass.ChromeFrameReporter.Builder, perfetto.protos.ChromeFrameReporterOuterClass.ChromeFrameReporterOrBuilder>(
                  getChromeFrameReporter(),
                  getParentForChildren(),
                  isClean());
          chromeFrameReporter_ = null;
        }
        return chromeFrameReporterBuilder_;
      }

      private perfetto.protos.ChromeApplicationStateInfoOuterClass.ChromeApplicationStateInfo chromeApplicationStateInfo_;
      private com.google.protobuf.SingleFieldBuilderV3<
          perfetto.protos.ChromeApplicationStateInfoOuterClass.ChromeApplicationStateInfo, perfetto.protos.ChromeApplicationStateInfoOuterClass.ChromeApplicationStateInfo.Builder, perfetto.protos.ChromeApplicationStateInfoOuterClass.ChromeApplicationStateInfoOrBuilder> chromeApplicationStateInfoBuilder_;
      /**
       * <code>optional .perfetto.protos.ChromeApplicationStateInfo chrome_application_state_info = 39;</code>
       * @return Whether the chromeApplicationStateInfo field is set.
       */
      public boolean hasChromeApplicationStateInfo() {
        return ((bitField0_ & 0x04000000) != 0);
      }
      /**
       * <code>optional .perfetto.protos.ChromeApplicationStateInfo chrome_application_state_info = 39;</code>
       * @return The chromeApplicationStateInfo.
       */
      public perfetto.protos.ChromeApplicationStateInfoOuterClass.ChromeApplicationStateInfo getChromeApplicationStateInfo() {
        if (chromeApplicationStateInfoBuilder_ == null) {
          return chromeApplicationStateInfo_ == null ? perfetto.protos.ChromeApplicationStateInfoOuterClass.ChromeApplicationStateInfo.getDefaultInstance() : chromeApplicationStateInfo_;
        } else {
          return chromeApplicationStateInfoBuilder_.getMessage();
        }
      }
      /**
       * <code>optional .perfetto.protos.ChromeApplicationStateInfo chrome_application_state_info = 39;</code>
       */
      public Builder setChromeApplicationStateInfo(perfetto.protos.ChromeApplicationStateInfoOuterClass.ChromeApplicationStateInfo value) {
        if (chromeApplicationStateInfoBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          chromeApplicationStateInfo_ = value;
        } else {
          chromeApplicationStateInfoBuilder_.setMessage(value);
        }
        bitField0_ |= 0x04000000;
        onChanged();
        return this;
      }
      /**
       * <code>optional .perfetto.protos.ChromeApplicationStateInfo chrome_application_state_info = 39;</code>
       */
      public Builder setChromeApplicationStateInfo(
          perfetto.protos.ChromeApplicationStateInfoOuterClass.ChromeApplicationStateInfo.Builder builderForValue) {
        if (chromeApplicationStateInfoBuilder_ == null) {
          chromeApplicationStateInfo_ = builderForValue.build();
        } else {
          chromeApplicationStateInfoBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x04000000;
        onChanged();
        return this;
      }
      /**
       * <code>optional .perfetto.protos.ChromeApplicationStateInfo chrome_application_state_info = 39;</code>
       */
      public Builder mergeChromeApplicationStateInfo(perfetto.protos.ChromeApplicationStateInfoOuterClass.ChromeApplicationStateInfo value) {
        if (chromeApplicationStateInfoBuilder_ == null) {
          if (((bitField0_ & 0x04000000) != 0) &&
            chromeApplicationStateInfo_ != null &&
            chromeApplicationStateInfo_ != perfetto.protos.ChromeApplicationStateInfoOuterClass.ChromeApplicationStateInfo.getDefaultInstance()) {
            getChromeApplicationStateInfoBuilder().mergeFrom(value);
          } else {
            chromeApplicationStateInfo_ = value;
          }
        } else {
          chromeApplicationStateInfoBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x04000000;
        onChanged();
        return this;
      }
      /**
       * <code>optional .perfetto.protos.ChromeApplicationStateInfo chrome_application_state_info = 39;</code>
       */
      public Builder clearChromeApplicationStateInfo() {
        bitField0_ = (bitField0_ & ~0x04000000);
        chromeApplicationStateInfo_ = null;
        if (chromeApplicationStateInfoBuilder_ != null) {
          chromeApplicationStateInfoBuilder_.dispose();
          chromeApplicationStateInfoBuilder_ = null;
        }
        onChanged();
        return this;
      }
      /**
       * <code>optional .perfetto.protos.ChromeApplicationStateInfo chrome_application_state_info = 39;</code>
       */
      public perfetto.protos.ChromeApplicationStateInfoOuterClass.ChromeApplicationStateInfo.Builder getChromeApplicationStateInfoBuilder() {
        bitField0_ |= 0x04000000;
        onChanged();
        return getChromeApplicationStateInfoFieldBuilder().getBuilder();
      }
      /**
       * <code>optional .perfetto.protos.ChromeApplicationStateInfo chrome_application_state_info = 39;</code>
       */
      public perfetto.protos.ChromeApplicationStateInfoOuterClass.ChromeApplicationStateInfoOrBuilder getChromeApplicationStateInfoOrBuilder() {
        if (chromeApplicationStateInfoBuilder_ != null) {
          return chromeApplicationStateInfoBuilder_.getMessageOrBuilder();
        } else {
          return chromeApplicationStateInfo_ == null ?
              perfetto.protos.ChromeApplicationStateInfoOuterClass.ChromeApplicationStateInfo.getDefaultInstance() : chromeApplicationStateInfo_;
        }
      }
      /**
       * <code>optional .perfetto.protos.ChromeApplicationStateInfo chrome_application_state_info = 39;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          perfetto.protos.ChromeApplicationStateInfoOuterClass.ChromeApplicationStateInfo, perfetto.protos.ChromeApplicationStateInfoOuterClass.ChromeApplicationStateInfo.Builder, perfetto.protos.ChromeApplicationStateInfoOuterClass.ChromeApplicationStateInfoOrBuilder> 
          getChromeApplicationStateInfoFieldBuilder() {
        if (chromeApplicationStateInfoBuilder_ == null) {
          chromeApplicationStateInfoBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              perfetto.protos.ChromeApplicationStateInfoOuterClass.ChromeApplicationStateInfo, perfetto.protos.ChromeApplicationStateInfoOuterClass.ChromeApplicationStateInfo.Builder, perfetto.protos.ChromeApplicationStateInfoOuterClass.ChromeApplicationStateInfoOrBuilder>(
                  getChromeApplicationStateInfo(),
                  getParentForChildren(),
                  isClean());
          chromeApplicationStateInfo_ = null;
        }
        return chromeApplicationStateInfoBuilder_;
      }

      private perfetto.protos.ChromeRendererSchedulerStateOuterClass.ChromeRendererSchedulerState chromeRendererSchedulerState_;
      private com.google.protobuf.SingleFieldBuilderV3<
          perfetto.protos.ChromeRendererSchedulerStateOuterClass.ChromeRendererSchedulerState, perfetto.protos.ChromeRendererSchedulerStateOuterClass.ChromeRendererSchedulerState.Builder, perfetto.protos.ChromeRendererSchedulerStateOuterClass.ChromeRendererSchedulerStateOrBuilder> chromeRendererSchedulerStateBuilder_;
      /**
       * <code>optional .perfetto.protos.ChromeRendererSchedulerState chrome_renderer_scheduler_state = 40;</code>
       * @return Whether the chromeRendererSchedulerState field is set.
       */
      public boolean hasChromeRendererSchedulerState() {
        return ((bitField0_ & 0x08000000) != 0);
      }
      /**
       * <code>optional .perfetto.protos.ChromeRendererSchedulerState chrome_renderer_scheduler_state = 40;</code>
       * @return The chromeRendererSchedulerState.
       */
      public perfetto.protos.ChromeRendererSchedulerStateOuterClass.ChromeRendererSchedulerState getChromeRendererSchedulerState() {
        if (chromeRendererSchedulerStateBuilder_ == null) {
          return chromeRendererSchedulerState_ == null ? perfetto.protos.ChromeRendererSchedulerStateOuterClass.ChromeRendererSchedulerState.getDefaultInstance() : chromeRendererSchedulerState_;
        } else {
          return chromeRendererSchedulerStateBuilder_.getMessage();
        }
      }
      /**
       * <code>optional .perfetto.protos.ChromeRendererSchedulerState chrome_renderer_scheduler_state = 40;</code>
       */
      public Builder setChromeRendererSchedulerState(perfetto.protos.ChromeRendererSchedulerStateOuterClass.ChromeRendererSchedulerState value) {
        if (chromeRendererSchedulerStateBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          chromeRendererSchedulerState_ = value;
        } else {
          chromeRendererSchedulerStateBuilder_.setMessage(value);
        }
        bitField0_ |= 0x08000000;
        onChanged();
        return this;
      }
      /**
       * <code>optional .perfetto.protos.ChromeRendererSchedulerState chrome_renderer_scheduler_state = 40;</code>
       */
      public Builder setChromeRendererSchedulerState(
          perfetto.protos.ChromeRendererSchedulerStateOuterClass.ChromeRendererSchedulerState.Builder builderForValue) {
        if (chromeRendererSchedulerStateBuilder_ == null) {
          chromeRendererSchedulerState_ = builderForValue.build();
        } else {
          chromeRendererSchedulerStateBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x08000000;
        onChanged();
        return this;
      }
      /**
       * <code>optional .perfetto.protos.ChromeRendererSchedulerState chrome_renderer_scheduler_state = 40;</code>
       */
      public Builder mergeChromeRendererSchedulerState(perfetto.protos.ChromeRendererSchedulerStateOuterClass.ChromeRendererSchedulerState value) {
        if (chromeRendererSchedulerStateBuilder_ == null) {
          if (((bitField0_ & 0x08000000) != 0) &&
            chromeRendererSchedulerState_ != null &&
            chromeRendererSchedulerState_ != perfetto.protos.ChromeRendererSchedulerStateOuterClass.ChromeRendererSchedulerState.getDefaultInstance()) {
            getChromeRendererSchedulerStateBuilder().mergeFrom(value);
          } else {
            chromeRendererSchedulerState_ = value;
          }
        } else {
          chromeRendererSchedulerStateBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x08000000;
        onChanged();
        return this;
      }
      /**
       * <code>optional .perfetto.protos.ChromeRendererSchedulerState chrome_renderer_scheduler_state = 40;</code>
       */
      public Builder clearChromeRendererSchedulerState() {
        bitField0_ = (bitField0_ & ~0x08000000);
        chromeRendererSchedulerState_ = null;
        if (chromeRendererSchedulerStateBuilder_ != null) {
          chromeRendererSchedulerStateBuilder_.dispose();
          chromeRendererSchedulerStateBuilder_ = null;
        }
        onChanged();
        return this;
      }
      /**
       * <code>optional .perfetto.protos.ChromeRendererSchedulerState chrome_renderer_scheduler_state = 40;</code>
       */
      public perfetto.protos.ChromeRendererSchedulerStateOuterClass.ChromeRendererSchedulerState.Builder getChromeRendererSchedulerStateBuilder() {
        bitField0_ |= 0x08000000;
        onChanged();
        return getChromeRendererSchedulerStateFieldBuilder().getBuilder();
      }
      /**
       * <code>optional .perfetto.protos.ChromeRendererSchedulerState chrome_renderer_scheduler_state = 40;</code>
       */
      public perfetto.protos.ChromeRendererSchedulerStateOuterClass.ChromeRendererSchedulerStateOrBuilder getChromeRendererSchedulerStateOrBuilder() {
        if (chromeRendererSchedulerStateBuilder_ != null) {
          return chromeRendererSchedulerStateBuilder_.getMessageOrBuilder();
        } else {
          return chromeRendererSchedulerState_ == null ?
              perfetto.protos.ChromeRendererSchedulerStateOuterClass.ChromeRendererSchedulerState.getDefaultInstance() : chromeRendererSchedulerState_;
        }
      }
      /**
       * <code>optional .perfetto.protos.ChromeRendererSchedulerState chrome_renderer_scheduler_state = 40;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          perfetto.protos.ChromeRendererSchedulerStateOuterClass.ChromeRendererSchedulerState, perfetto.protos.ChromeRendererSchedulerStateOuterClass.ChromeRendererSchedulerState.Builder, perfetto.protos.ChromeRendererSchedulerStateOuterClass.ChromeRendererSchedulerStateOrBuilder> 
          getChromeRendererSchedulerStateFieldBuilder() {
        if (chromeRendererSchedulerStateBuilder_ == null) {
          chromeRendererSchedulerStateBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              perfetto.protos.ChromeRendererSchedulerStateOuterClass.ChromeRendererSchedulerState, perfetto.protos.ChromeRendererSchedulerStateOuterClass.ChromeRendererSchedulerState.Builder, perfetto.protos.ChromeRendererSchedulerStateOuterClass.ChromeRendererSchedulerStateOrBuilder>(
                  getChromeRendererSchedulerState(),
                  getParentForChildren(),
                  isClean());
          chromeRendererSchedulerState_ = null;
        }
        return chromeRendererSchedulerStateBuilder_;
      }

      private perfetto.protos.ChromeWindowHandleEventInfoOuterClass.ChromeWindowHandleEventInfo chromeWindowHandleEventInfo_;
      private com.google.protobuf.SingleFieldBuilderV3<
          perfetto.protos.ChromeWindowHandleEventInfoOuterClass.ChromeWindowHandleEventInfo, perfetto.protos.ChromeWindowHandleEventInfoOuterClass.ChromeWindowHandleEventInfo.Builder, perfetto.protos.ChromeWindowHandleEventInfoOuterClass.ChromeWindowHandleEventInfoOrBuilder> chromeWindowHandleEventInfoBuilder_;
      /**
       * <code>optional .perfetto.protos.ChromeWindowHandleEventInfo chrome_window_handle_event_info = 41;</code>
       * @return Whether the chromeWindowHandleEventInfo field is set.
       */
      public boolean hasChromeWindowHandleEventInfo() {
        return ((bitField0_ & 0x10000000) != 0);
      }
      /**
       * <code>optional .perfetto.protos.ChromeWindowHandleEventInfo chrome_window_handle_event_info = 41;</code>
       * @return The chromeWindowHandleEventInfo.
       */
      public perfetto.protos.ChromeWindowHandleEventInfoOuterClass.ChromeWindowHandleEventInfo getChromeWindowHandleEventInfo() {
        if (chromeWindowHandleEventInfoBuilder_ == null) {
          return chromeWindowHandleEventInfo_ == null ? perfetto.protos.ChromeWindowHandleEventInfoOuterClass.ChromeWindowHandleEventInfo.getDefaultInstance() : chromeWindowHandleEventInfo_;
        } else {
          return chromeWindowHandleEventInfoBuilder_.getMessage();
        }
      }
      /**
       * <code>optional .perfetto.protos.ChromeWindowHandleEventInfo chrome_window_handle_event_info = 41;</code>
       */
      public Builder setChromeWindowHandleEventInfo(perfetto.protos.ChromeWindowHandleEventInfoOuterClass.ChromeWindowHandleEventInfo value) {
        if (chromeWindowHandleEventInfoBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          chromeWindowHandleEventInfo_ = value;
        } else {
          chromeWindowHandleEventInfoBuilder_.setMessage(value);
        }
        bitField0_ |= 0x10000000;
        onChanged();
        return this;
      }
      /**
       * <code>optional .perfetto.protos.ChromeWindowHandleEventInfo chrome_window_handle_event_info = 41;</code>
       */
      public Builder setChromeWindowHandleEventInfo(
          perfetto.protos.ChromeWindowHandleEventInfoOuterClass.ChromeWindowHandleEventInfo.Builder builderForValue) {
        if (chromeWindowHandleEventInfoBuilder_ == null) {
          chromeWindowHandleEventInfo_ = builderForValue.build();
        } else {
          chromeWindowHandleEventInfoBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x10000000;
        onChanged();
        return this;
      }
      /**
       * <code>optional .perfetto.protos.ChromeWindowHandleEventInfo chrome_window_handle_event_info = 41;</code>
       */
      public Builder mergeChromeWindowHandleEventInfo(perfetto.protos.ChromeWindowHandleEventInfoOuterClass.ChromeWindowHandleEventInfo value) {
        if (chromeWindowHandleEventInfoBuilder_ == null) {
          if (((bitField0_ & 0x10000000) != 0) &&
            chromeWindowHandleEventInfo_ != null &&
            chromeWindowHandleEventInfo_ != perfetto.protos.ChromeWindowHandleEventInfoOuterClass.ChromeWindowHandleEventInfo.getDefaultInstance()) {
            getChromeWindowHandleEventInfoBuilder().mergeFrom(value);
          } else {
            chromeWindowHandleEventInfo_ = value;
          }
        } else {
          chromeWindowHandleEventInfoBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x10000000;
        onChanged();
        return this;
      }
      /**
       * <code>optional .perfetto.protos.ChromeWindowHandleEventInfo chrome_window_handle_event_info = 41;</code>
       */
      public Builder clearChromeWindowHandleEventInfo() {
        bitField0_ = (bitField0_ & ~0x10000000);
        chromeWindowHandleEventInfo_ = null;
        if (chromeWindowHandleEventInfoBuilder_ != null) {
          chromeWindowHandleEventInfoBuilder_.dispose();
          chromeWindowHandleEventInfoBuilder_ = null;
        }
        onChanged();
        return this;
      }
      /**
       * <code>optional .perfetto.protos.ChromeWindowHandleEventInfo chrome_window_handle_event_info = 41;</code>
       */
      public perfetto.protos.ChromeWindowHandleEventInfoOuterClass.ChromeWindowHandleEventInfo.Builder getChromeWindowHandleEventInfoBuilder() {
        bitField0_ |= 0x10000000;
        onChanged();
        return getChromeWindowHandleEventInfoFieldBuilder().getBuilder();
      }
      /**
       * <code>optional .perfetto.protos.ChromeWindowHandleEventInfo chrome_window_handle_event_info = 41;</code>
       */
      public perfetto.protos.ChromeWindowHandleEventInfoOuterClass.ChromeWindowHandleEventInfoOrBuilder getChromeWindowHandleEventInfoOrBuilder() {
        if (chromeWindowHandleEventInfoBuilder_ != null) {
          return chromeWindowHandleEventInfoBuilder_.getMessageOrBuilder();
        } else {
          return chromeWindowHandleEventInfo_ == null ?
              perfetto.protos.ChromeWindowHandleEventInfoOuterClass.ChromeWindowHandleEventInfo.getDefaultInstance() : chromeWindowHandleEventInfo_;
        }
      }
      /**
       * <code>optional .perfetto.protos.ChromeWindowHandleEventInfo chrome_window_handle_event_info = 41;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          perfetto.protos.ChromeWindowHandleEventInfoOuterClass.ChromeWindowHandleEventInfo, perfetto.protos.ChromeWindowHandleEventInfoOuterClass.ChromeWindowHandleEventInfo.Builder, perfetto.protos.ChromeWindowHandleEventInfoOuterClass.ChromeWindowHandleEventInfoOrBuilder> 
          getChromeWindowHandleEventInfoFieldBuilder() {
        if (chromeWindowHandleEventInfoBuilder_ == null) {
          chromeWindowHandleEventInfoBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              perfetto.protos.ChromeWindowHandleEventInfoOuterClass.ChromeWindowHandleEventInfo, perfetto.protos.ChromeWindowHandleEventInfoOuterClass.ChromeWindowHandleEventInfo.Builder, perfetto.protos.ChromeWindowHandleEventInfoOuterClass.ChromeWindowHandleEventInfoOrBuilder>(
                  getChromeWindowHandleEventInfo(),
                  getParentForChildren(),
                  isClean());
          chromeWindowHandleEventInfo_ = null;
        }
        return chromeWindowHandleEventInfoBuilder_;
      }

      private perfetto.protos.ChromeContentSettingsEventInfoOuterClass.ChromeContentSettingsEventInfo chromeContentSettingsEventInfo_;
      private com.google.protobuf.SingleFieldBuilderV3<
          perfetto.protos.ChromeContentSettingsEventInfoOuterClass.ChromeContentSettingsEventInfo, perfetto.protos.ChromeContentSettingsEventInfoOuterClass.ChromeContentSettingsEventInfo.Builder, perfetto.protos.ChromeContentSettingsEventInfoOuterClass.ChromeContentSettingsEventInfoOrBuilder> chromeContentSettingsEventInfoBuilder_;
      /**
       * <code>optional .perfetto.protos.ChromeContentSettingsEventInfo chrome_content_settings_event_info = 43;</code>
       * @return Whether the chromeContentSettingsEventInfo field is set.
       */
      public boolean hasChromeContentSettingsEventInfo() {
        return ((bitField0_ & 0x20000000) != 0);
      }
      /**
       * <code>optional .perfetto.protos.ChromeContentSettingsEventInfo chrome_content_settings_event_info = 43;</code>
       * @return The chromeContentSettingsEventInfo.
       */
      public perfetto.protos.ChromeContentSettingsEventInfoOuterClass.ChromeContentSettingsEventInfo getChromeContentSettingsEventInfo() {
        if (chromeContentSettingsEventInfoBuilder_ == null) {
          return chromeContentSettingsEventInfo_ == null ? perfetto.protos.ChromeContentSettingsEventInfoOuterClass.ChromeContentSettingsEventInfo.getDefaultInstance() : chromeContentSettingsEventInfo_;
        } else {
          return chromeContentSettingsEventInfoBuilder_.getMessage();
        }
      }
      /**
       * <code>optional .perfetto.protos.ChromeContentSettingsEventInfo chrome_content_settings_event_info = 43;</code>
       */
      public Builder setChromeContentSettingsEventInfo(perfetto.protos.ChromeContentSettingsEventInfoOuterClass.ChromeContentSettingsEventInfo value) {
        if (chromeContentSettingsEventInfoBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          chromeContentSettingsEventInfo_ = value;
        } else {
          chromeContentSettingsEventInfoBuilder_.setMessage(value);
        }
        bitField0_ |= 0x20000000;
        onChanged();
        return this;
      }
      /**
       * <code>optional .perfetto.protos.ChromeContentSettingsEventInfo chrome_content_settings_event_info = 43;</code>
       */
      public Builder setChromeContentSettingsEventInfo(
          perfetto.protos.ChromeContentSettingsEventInfoOuterClass.ChromeContentSettingsEventInfo.Builder builderForValue) {
        if (chromeContentSettingsEventInfoBuilder_ == null) {
          chromeContentSettingsEventInfo_ = builderForValue.build();
        } else {
          chromeContentSettingsEventInfoBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x20000000;
        onChanged();
        return this;
      }
      /**
       * <code>optional .perfetto.protos.ChromeContentSettingsEventInfo chrome_content_settings_event_info = 43;</code>
       */
      public Builder mergeChromeContentSettingsEventInfo(perfetto.protos.ChromeContentSettingsEventInfoOuterClass.ChromeContentSettingsEventInfo value) {
        if (chromeContentSettingsEventInfoBuilder_ == null) {
          if (((bitField0_ & 0x20000000) != 0) &&
            chromeContentSettingsEventInfo_ != null &&
            chromeContentSettingsEventInfo_ != perfetto.protos.ChromeContentSettingsEventInfoOuterClass.ChromeContentSettingsEventInfo.getDefaultInstance()) {
            getChromeContentSettingsEventInfoBuilder().mergeFrom(value);
          } else {
            chromeContentSettingsEventInfo_ = value;
          }
        } else {
          chromeContentSettingsEventInfoBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x20000000;
        onChanged();
        return this;
      }
      /**
       * <code>optional .perfetto.protos.ChromeContentSettingsEventInfo chrome_content_settings_event_info = 43;</code>
       */
      public Builder clearChromeContentSettingsEventInfo() {
        bitField0_ = (bitField0_ & ~0x20000000);
        chromeContentSettingsEventInfo_ = null;
        if (chromeContentSettingsEventInfoBuilder_ != null) {
          chromeContentSettingsEventInfoBuilder_.dispose();
          chromeContentSettingsEventInfoBuilder_ = null;
        }
        onChanged();
        return this;
      }
      /**
       * <code>optional .perfetto.protos.ChromeContentSettingsEventInfo chrome_content_settings_event_info = 43;</code>
       */
      public perfetto.protos.ChromeContentSettingsEventInfoOuterClass.ChromeContentSettingsEventInfo.Builder getChromeContentSettingsEventInfoBuilder() {
        bitField0_ |= 0x20000000;
        onChanged();
        return getChromeContentSettingsEventInfoFieldBuilder().getBuilder();
      }
      /**
       * <code>optional .perfetto.protos.ChromeContentSettingsEventInfo chrome_content_settings_event_info = 43;</code>
       */
      public perfetto.protos.ChromeContentSettingsEventInfoOuterClass.ChromeContentSettingsEventInfoOrBuilder getChromeContentSettingsEventInfoOrBuilder() {
        if (chromeContentSettingsEventInfoBuilder_ != null) {
          return chromeContentSettingsEventInfoBuilder_.getMessageOrBuilder();
        } else {
          return chromeContentSettingsEventInfo_ == null ?
              perfetto.protos.ChromeContentSettingsEventInfoOuterClass.ChromeContentSettingsEventInfo.getDefaultInstance() : chromeContentSettingsEventInfo_;
        }
      }
      /**
       * <code>optional .perfetto.protos.ChromeContentSettingsEventInfo chrome_content_settings_event_info = 43;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          perfetto.protos.ChromeContentSettingsEventInfoOuterClass.ChromeContentSettingsEventInfo, perfetto.protos.ChromeContentSettingsEventInfoOuterClass.ChromeContentSettingsEventInfo.Builder, perfetto.protos.ChromeContentSettingsEventInfoOuterClass.ChromeContentSettingsEventInfoOrBuilder> 
          getChromeContentSettingsEventInfoFieldBuilder() {
        if (chromeContentSettingsEventInfoBuilder_ == null) {
          chromeContentSettingsEventInfoBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              perfetto.protos.ChromeContentSettingsEventInfoOuterClass.ChromeContentSettingsEventInfo, perfetto.protos.ChromeContentSettingsEventInfoOuterClass.ChromeContentSettingsEventInfo.Builder, perfetto.protos.ChromeContentSettingsEventInfoOuterClass.ChromeContentSettingsEventInfoOrBuilder>(
                  getChromeContentSettingsEventInfo(),
                  getParentForChildren(),
                  isClean());
          chromeContentSettingsEventInfo_ = null;
        }
        return chromeContentSettingsEventInfoBuilder_;
      }

      private perfetto.protos.ChromeActiveProcessesOuterClass.ChromeActiveProcesses chromeActiveProcesses_;
      private com.google.protobuf.SingleFieldBuilderV3<
          perfetto.protos.ChromeActiveProcessesOuterClass.ChromeActiveProcesses, perfetto.protos.ChromeActiveProcessesOuterClass.ChromeActiveProcesses.Builder, perfetto.protos.ChromeActiveProcessesOuterClass.ChromeActiveProcessesOrBuilder> chromeActiveProcessesBuilder_;
      /**
       * <code>optional .perfetto.protos.ChromeActiveProcesses chrome_active_processes = 49;</code>
       * @return Whether the chromeActiveProcesses field is set.
       */
      public boolean hasChromeActiveProcesses() {
        return ((bitField0_ & 0x40000000) != 0);
      }
      /**
       * <code>optional .perfetto.protos.ChromeActiveProcesses chrome_active_processes = 49;</code>
       * @return The chromeActiveProcesses.
       */
      public perfetto.protos.ChromeActiveProcessesOuterClass.ChromeActiveProcesses getChromeActiveProcesses() {
        if (chromeActiveProcessesBuilder_ == null) {
          return chromeActiveProcesses_ == null ? perfetto.protos.ChromeActiveProcessesOuterClass.ChromeActiveProcesses.getDefaultInstance() : chromeActiveProcesses_;
        } else {
          return chromeActiveProcessesBuilder_.getMessage();
        }
      }
      /**
       * <code>optional .perfetto.protos.ChromeActiveProcesses chrome_active_processes = 49;</code>
       */
      public Builder setChromeActiveProcesses(perfetto.protos.ChromeActiveProcessesOuterClass.ChromeActiveProcesses value) {
        if (chromeActiveProcessesBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          chromeActiveProcesses_ = value;
        } else {
          chromeActiveProcessesBuilder_.setMessage(value);
        }
        bitField0_ |= 0x40000000;
        onChanged();
        return this;
      }
      /**
       * <code>optional .perfetto.protos.ChromeActiveProcesses chrome_active_processes = 49;</code>
       */
      public Builder setChromeActiveProcesses(
          perfetto.protos.ChromeActiveProcessesOuterClass.ChromeActiveProcesses.Builder builderForValue) {
        if (chromeActiveProcessesBuilder_ == null) {
          chromeActiveProcesses_ = builderForValue.build();
        } else {
          chromeActiveProcessesBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x40000000;
        onChanged();
        return this;
      }
      /**
       * <code>optional .perfetto.protos.ChromeActiveProcesses chrome_active_processes = 49;</code>
       */
      public Builder mergeChromeActiveProcesses(perfetto.protos.ChromeActiveProcessesOuterClass.ChromeActiveProcesses value) {
        if (chromeActiveProcessesBuilder_ == null) {
          if (((bitField0_ & 0x40000000) != 0) &&
            chromeActiveProcesses_ != null &&
            chromeActiveProcesses_ != perfetto.protos.ChromeActiveProcessesOuterClass.ChromeActiveProcesses.getDefaultInstance()) {
            getChromeActiveProcessesBuilder().mergeFrom(value);
          } else {
            chromeActiveProcesses_ = value;
          }
        } else {
          chromeActiveProcessesBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x40000000;
        onChanged();
        return this;
      }
      /**
       * <code>optional .perfetto.protos.ChromeActiveProcesses chrome_active_processes = 49;</code>
       */
      public Builder clearChromeActiveProcesses() {
        bitField0_ = (bitField0_ & ~0x40000000);
        chromeActiveProcesses_ = null;
        if (chromeActiveProcessesBuilder_ != null) {
          chromeActiveProcessesBuilder_.dispose();
          chromeActiveProcessesBuilder_ = null;
        }
        onChanged();
        return this;
      }
      /**
       * <code>optional .perfetto.protos.ChromeActiveProcesses chrome_active_processes = 49;</code>
       */
      public perfetto.protos.ChromeActiveProcessesOuterClass.ChromeActiveProcesses.Builder getChromeActiveProcessesBuilder() {
        bitField0_ |= 0x40000000;
        onChanged();
        return getChromeActiveProcessesFieldBuilder().getBuilder();
      }
      /**
       * <code>optional .perfetto.protos.ChromeActiveProcesses chrome_active_processes = 49;</code>
       */
      public perfetto.protos.ChromeActiveProcessesOuterClass.ChromeActiveProcessesOrBuilder getChromeActiveProcessesOrBuilder() {
        if (chromeActiveProcessesBuilder_ != null) {
          return chromeActiveProcessesBuilder_.getMessageOrBuilder();
        } else {
          return chromeActiveProcesses_ == null ?
              perfetto.protos.ChromeActiveProcessesOuterClass.ChromeActiveProcesses.getDefaultInstance() : chromeActiveProcesses_;
        }
      }
      /**
       * <code>optional .perfetto.protos.ChromeActiveProcesses chrome_active_processes = 49;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          perfetto.protos.ChromeActiveProcessesOuterClass.ChromeActiveProcesses, perfetto.protos.ChromeActiveProcessesOuterClass.ChromeActiveProcesses.Builder, perfetto.protos.ChromeActiveProcessesOuterClass.ChromeActiveProcessesOrBuilder> 
          getChromeActiveProcessesFieldBuilder() {
        if (chromeActiveProcessesBuilder_ == null) {
          chromeActiveProcessesBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              perfetto.protos.ChromeActiveProcessesOuterClass.ChromeActiveProcesses, perfetto.protos.ChromeActiveProcessesOuterClass.ChromeActiveProcesses.Builder, perfetto.protos.ChromeActiveProcessesOuterClass.ChromeActiveProcessesOrBuilder>(
                  getChromeActiveProcesses(),
                  getParentForChildren(),
                  isClean());
          chromeActiveProcesses_ = null;
        }
        return chromeActiveProcessesBuilder_;
      }

      private com.google.protobuf.SingleFieldBuilderV3<
          perfetto.protos.SourceLocationOuterClass.SourceLocation, perfetto.protos.SourceLocationOuterClass.SourceLocation.Builder, perfetto.protos.SourceLocationOuterClass.SourceLocationOrBuilder> sourceLocationBuilder_;
      /**
       * <pre>
       * Non-interned field.
       * </pre>
       *
       * <code>.perfetto.protos.SourceLocation source_location = 33;</code>
       * @return Whether the sourceLocation field is set.
       */
      @java.lang.Override
      public boolean hasSourceLocation() {
        return sourceLocationFieldCase_ == 33;
      }
      /**
       * <pre>
       * Non-interned field.
       * </pre>
       *
       * <code>.perfetto.protos.SourceLocation source_location = 33;</code>
       * @return The sourceLocation.
       */
      @java.lang.Override
      public perfetto.protos.SourceLocationOuterClass.SourceLocation getSourceLocation() {
        if (sourceLocationBuilder_ == null) {
          if (sourceLocationFieldCase_ == 33) {
            return (perfetto.protos.SourceLocationOuterClass.SourceLocation) sourceLocationField_;
          }
          return perfetto.protos.SourceLocationOuterClass.SourceLocation.getDefaultInstance();
        } else {
          if (sourceLocationFieldCase_ == 33) {
            return sourceLocationBuilder_.getMessage();
          }
          return perfetto.protos.SourceLocationOuterClass.SourceLocation.getDefaultInstance();
        }
      }
      /**
       * <pre>
       * Non-interned field.
       * </pre>
       *
       * <code>.perfetto.protos.SourceLocation source_location = 33;</code>
       */
      public Builder setSourceLocation(perfetto.protos.SourceLocationOuterClass.SourceLocation value) {
        if (sourceLocationBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          sourceLocationField_ = value;
          onChanged();
        } else {
          sourceLocationBuilder_.setMessage(value);
        }
        sourceLocationFieldCase_ = 33;
        return this;
      }
      /**
       * <pre>
       * Non-interned field.
       * </pre>
       *
       * <code>.perfetto.protos.SourceLocation source_location = 33;</code>
       */
      public Builder setSourceLocation(
          perfetto.protos.SourceLocationOuterClass.SourceLocation.Builder builderForValue) {
        if (sourceLocationBuilder_ == null) {
          sourceLocationField_ = builderForValue.build();
          onChanged();
        } else {
          sourceLocationBuilder_.setMessage(builderForValue.build());
        }
        sourceLocationFieldCase_ = 33;
        return this;
      }
      /**
       * <pre>
       * Non-interned field.
       * </pre>
       *
       * <code>.perfetto.protos.SourceLocation source_location = 33;</code>
       */
      public Builder mergeSourceLocation(perfetto.protos.SourceLocationOuterClass.SourceLocation value) {
        if (sourceLocationBuilder_ == null) {
          if (sourceLocationFieldCase_ == 33 &&
              sourceLocationField_ != perfetto.protos.SourceLocationOuterClass.SourceLocation.getDefaultInstance()) {
            sourceLocationField_ = perfetto.protos.SourceLocationOuterClass.SourceLocation.newBuilder((perfetto.protos.SourceLocationOuterClass.SourceLocation) sourceLocationField_)
                .mergeFrom(value).buildPartial();
          } else {
            sourceLocationField_ = value;
          }
          onChanged();
        } else {
          if (sourceLocationFieldCase_ == 33) {
            sourceLocationBuilder_.mergeFrom(value);
          } else {
            sourceLocationBuilder_.setMessage(value);
          }
        }
        sourceLocationFieldCase_ = 33;
        return this;
      }
      /**
       * <pre>
       * Non-interned field.
       * </pre>
       *
       * <code>.perfetto.protos.SourceLocation source_location = 33;</code>
       */
      public Builder clearSourceLocation() {
        if (sourceLocationBuilder_ == null) {
          if (sourceLocationFieldCase_ == 33) {
            sourceLocationFieldCase_ = 0;
            sourceLocationField_ = null;
            onChanged();
          }
        } else {
          if (sourceLocationFieldCase_ == 33) {
            sourceLocationFieldCase_ = 0;
            sourceLocationField_ = null;
          }
          sourceLocationBuilder_.clear();
        }
        return this;
      }
      /**
       * <pre>
       * Non-interned field.
       * </pre>
       *
       * <code>.perfetto.protos.SourceLocation source_location = 33;</code>
       */
      public perfetto.protos.SourceLocationOuterClass.SourceLocation.Builder getSourceLocationBuilder() {
        return getSourceLocationFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       * Non-interned field.
       * </pre>
       *
       * <code>.perfetto.protos.SourceLocation source_location = 33;</code>
       */
      @java.lang.Override
      public perfetto.protos.SourceLocationOuterClass.SourceLocationOrBuilder getSourceLocationOrBuilder() {
        if ((sourceLocationFieldCase_ == 33) && (sourceLocationBuilder_ != null)) {
          return sourceLocationBuilder_.getMessageOrBuilder();
        } else {
          if (sourceLocationFieldCase_ == 33) {
            return (perfetto.protos.SourceLocationOuterClass.SourceLocation) sourceLocationField_;
          }
          return perfetto.protos.SourceLocationOuterClass.SourceLocation.getDefaultInstance();
        }
      }
      /**
       * <pre>
       * Non-interned field.
       * </pre>
       *
       * <code>.perfetto.protos.SourceLocation source_location = 33;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          perfetto.protos.SourceLocationOuterClass.SourceLocation, perfetto.protos.SourceLocationOuterClass.SourceLocation.Builder, perfetto.protos.SourceLocationOuterClass.SourceLocationOrBuilder> 
          getSourceLocationFieldBuilder() {
        if (sourceLocationBuilder_ == null) {
          if (!(sourceLocationFieldCase_ == 33)) {
            sourceLocationField_ = perfetto.protos.SourceLocationOuterClass.SourceLocation.getDefaultInstance();
          }
          sourceLocationBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              perfetto.protos.SourceLocationOuterClass.SourceLocation, perfetto.protos.SourceLocationOuterClass.SourceLocation.Builder, perfetto.protos.SourceLocationOuterClass.SourceLocationOrBuilder>(
                  (perfetto.protos.SourceLocationOuterClass.SourceLocation) sourceLocationField_,
                  getParentForChildren(),
                  isClean());
          sourceLocationField_ = null;
        }
        sourceLocationFieldCase_ = 33;
        onChanged();
        return sourceLocationBuilder_;
      }

      /**
       * <pre>
       * Interned field.
       * </pre>
       *
       * <code>uint64 source_location_iid = 34;</code>
       * @return Whether the sourceLocationIid field is set.
       */
      public boolean hasSourceLocationIid() {
        return sourceLocationFieldCase_ == 34;
      }
      /**
       * <pre>
       * Interned field.
       * </pre>
       *
       * <code>uint64 source_location_iid = 34;</code>
       * @return The sourceLocationIid.
       */
      public long getSourceLocationIid() {
        if (sourceLocationFieldCase_ == 34) {
          return (java.lang.Long) sourceLocationField_;
        }
        return 0L;
      }
      /**
       * <pre>
       * Interned field.
       * </pre>
       *
       * <code>uint64 source_location_iid = 34;</code>
       * @param value The sourceLocationIid to set.
       * @return This builder for chaining.
       */
      public Builder setSourceLocationIid(long value) {
        
        sourceLocationFieldCase_ = 34;
        sourceLocationField_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Interned field.
       * </pre>
       *
       * <code>uint64 source_location_iid = 34;</code>
       * @return This builder for chaining.
       */
      public Builder clearSourceLocationIid() {
        if (sourceLocationFieldCase_ == 34) {
          sourceLocationFieldCase_ = 0;
          sourceLocationField_ = null;
          onChanged();
        }
        return this;
      }

      private perfetto.protos.ChromeMessagePumpOuterClass.ChromeMessagePump chromeMessagePump_;
      private com.google.protobuf.SingleFieldBuilderV3<
          perfetto.protos.ChromeMessagePumpOuterClass.ChromeMessagePump, perfetto.protos.ChromeMessagePumpOuterClass.ChromeMessagePump.Builder, perfetto.protos.ChromeMessagePumpOuterClass.ChromeMessagePumpOrBuilder> chromeMessagePumpBuilder_;
      /**
       * <code>optional .perfetto.protos.ChromeMessagePump chrome_message_pump = 35;</code>
       * @return Whether the chromeMessagePump field is set.
       */
      public boolean hasChromeMessagePump() {
        return ((bitField1_ & 0x00000002) != 0);
      }
      /**
       * <code>optional .perfetto.protos.ChromeMessagePump chrome_message_pump = 35;</code>
       * @return The chromeMessagePump.
       */
      public perfetto.protos.ChromeMessagePumpOuterClass.ChromeMessagePump getChromeMessagePump() {
        if (chromeMessagePumpBuilder_ == null) {
          return chromeMessagePump_ == null ? perfetto.protos.ChromeMessagePumpOuterClass.ChromeMessagePump.getDefaultInstance() : chromeMessagePump_;
        } else {
          return chromeMessagePumpBuilder_.getMessage();
        }
      }
      /**
       * <code>optional .perfetto.protos.ChromeMessagePump chrome_message_pump = 35;</code>
       */
      public Builder setChromeMessagePump(perfetto.protos.ChromeMessagePumpOuterClass.ChromeMessagePump value) {
        if (chromeMessagePumpBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          chromeMessagePump_ = value;
        } else {
          chromeMessagePumpBuilder_.setMessage(value);
        }
        bitField1_ |= 0x00000002;
        onChanged();
        return this;
      }
      /**
       * <code>optional .perfetto.protos.ChromeMessagePump chrome_message_pump = 35;</code>
       */
      public Builder setChromeMessagePump(
          perfetto.protos.ChromeMessagePumpOuterClass.ChromeMessagePump.Builder builderForValue) {
        if (chromeMessagePumpBuilder_ == null) {
          chromeMessagePump_ = builderForValue.build();
        } else {
          chromeMessagePumpBuilder_.setMessage(builderForValue.build());
        }
        bitField1_ |= 0x00000002;
        onChanged();
        return this;
      }
      /**
       * <code>optional .perfetto.protos.ChromeMessagePump chrome_message_pump = 35;</code>
       */
      public Builder mergeChromeMessagePump(perfetto.protos.ChromeMessagePumpOuterClass.ChromeMessagePump value) {
        if (chromeMessagePumpBuilder_ == null) {
          if (((bitField1_ & 0x00000002) != 0) &&
            chromeMessagePump_ != null &&
            chromeMessagePump_ != perfetto.protos.ChromeMessagePumpOuterClass.ChromeMessagePump.getDefaultInstance()) {
            getChromeMessagePumpBuilder().mergeFrom(value);
          } else {
            chromeMessagePump_ = value;
          }
        } else {
          chromeMessagePumpBuilder_.mergeFrom(value);
        }
        bitField1_ |= 0x00000002;
        onChanged();
        return this;
      }
      /**
       * <code>optional .perfetto.protos.ChromeMessagePump chrome_message_pump = 35;</code>
       */
      public Builder clearChromeMessagePump() {
        bitField1_ = (bitField1_ & ~0x00000002);
        chromeMessagePump_ = null;
        if (chromeMessagePumpBuilder_ != null) {
          chromeMessagePumpBuilder_.dispose();
          chromeMessagePumpBuilder_ = null;
        }
        onChanged();
        return this;
      }
      /**
       * <code>optional .perfetto.protos.ChromeMessagePump chrome_message_pump = 35;</code>
       */
      public perfetto.protos.ChromeMessagePumpOuterClass.ChromeMessagePump.Builder getChromeMessagePumpBuilder() {
        bitField1_ |= 0x00000002;
        onChanged();
        return getChromeMessagePumpFieldBuilder().getBuilder();
      }
      /**
       * <code>optional .perfetto.protos.ChromeMessagePump chrome_message_pump = 35;</code>
       */
      public perfetto.protos.ChromeMessagePumpOuterClass.ChromeMessagePumpOrBuilder getChromeMessagePumpOrBuilder() {
        if (chromeMessagePumpBuilder_ != null) {
          return chromeMessagePumpBuilder_.getMessageOrBuilder();
        } else {
          return chromeMessagePump_ == null ?
              perfetto.protos.ChromeMessagePumpOuterClass.ChromeMessagePump.getDefaultInstance() : chromeMessagePump_;
        }
      }
      /**
       * <code>optional .perfetto.protos.ChromeMessagePump chrome_message_pump = 35;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          perfetto.protos.ChromeMessagePumpOuterClass.ChromeMessagePump, perfetto.protos.ChromeMessagePumpOuterClass.ChromeMessagePump.Builder, perfetto.protos.ChromeMessagePumpOuterClass.ChromeMessagePumpOrBuilder> 
          getChromeMessagePumpFieldBuilder() {
        if (chromeMessagePumpBuilder_ == null) {
          chromeMessagePumpBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              perfetto.protos.ChromeMessagePumpOuterClass.ChromeMessagePump, perfetto.protos.ChromeMessagePumpOuterClass.ChromeMessagePump.Builder, perfetto.protos.ChromeMessagePumpOuterClass.ChromeMessagePumpOrBuilder>(
                  getChromeMessagePump(),
                  getParentForChildren(),
                  isClean());
          chromeMessagePump_ = null;
        }
        return chromeMessagePumpBuilder_;
      }

      private perfetto.protos.ChromeMojoEventInfoOuterClass.ChromeMojoEventInfo chromeMojoEventInfo_;
      private com.google.protobuf.SingleFieldBuilderV3<
          perfetto.protos.ChromeMojoEventInfoOuterClass.ChromeMojoEventInfo, perfetto.protos.ChromeMojoEventInfoOuterClass.ChromeMojoEventInfo.Builder, perfetto.protos.ChromeMojoEventInfoOuterClass.ChromeMojoEventInfoOrBuilder> chromeMojoEventInfoBuilder_;
      /**
       * <code>optional .perfetto.protos.ChromeMojoEventInfo chrome_mojo_event_info = 38;</code>
       * @return Whether the chromeMojoEventInfo field is set.
       */
      public boolean hasChromeMojoEventInfo() {
        return ((bitField1_ & 0x00000004) != 0);
      }
      /**
       * <code>optional .perfetto.protos.ChromeMojoEventInfo chrome_mojo_event_info = 38;</code>
       * @return The chromeMojoEventInfo.
       */
      public perfetto.protos.ChromeMojoEventInfoOuterClass.ChromeMojoEventInfo getChromeMojoEventInfo() {
        if (chromeMojoEventInfoBuilder_ == null) {
          return chromeMojoEventInfo_ == null ? perfetto.protos.ChromeMojoEventInfoOuterClass.ChromeMojoEventInfo.getDefaultInstance() : chromeMojoEventInfo_;
        } else {
          return chromeMojoEventInfoBuilder_.getMessage();
        }
      }
      /**
       * <code>optional .perfetto.protos.ChromeMojoEventInfo chrome_mojo_event_info = 38;</code>
       */
      public Builder setChromeMojoEventInfo(perfetto.protos.ChromeMojoEventInfoOuterClass.ChromeMojoEventInfo value) {
        if (chromeMojoEventInfoBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          chromeMojoEventInfo_ = value;
        } else {
          chromeMojoEventInfoBuilder_.setMessage(value);
        }
        bitField1_ |= 0x00000004;
        onChanged();
        return this;
      }
      /**
       * <code>optional .perfetto.protos.ChromeMojoEventInfo chrome_mojo_event_info = 38;</code>
       */
      public Builder setChromeMojoEventInfo(
          perfetto.protos.ChromeMojoEventInfoOuterClass.ChromeMojoEventInfo.Builder builderForValue) {
        if (chromeMojoEventInfoBuilder_ == null) {
          chromeMojoEventInfo_ = builderForValue.build();
        } else {
          chromeMojoEventInfoBuilder_.setMessage(builderForValue.build());
        }
        bitField1_ |= 0x00000004;
        onChanged();
        return this;
      }
      /**
       * <code>optional .perfetto.protos.ChromeMojoEventInfo chrome_mojo_event_info = 38;</code>
       */
      public Builder mergeChromeMojoEventInfo(perfetto.protos.ChromeMojoEventInfoOuterClass.ChromeMojoEventInfo value) {
        if (chromeMojoEventInfoBuilder_ == null) {
          if (((bitField1_ & 0x00000004) != 0) &&
            chromeMojoEventInfo_ != null &&
            chromeMojoEventInfo_ != perfetto.protos.ChromeMojoEventInfoOuterClass.ChromeMojoEventInfo.getDefaultInstance()) {
            getChromeMojoEventInfoBuilder().mergeFrom(value);
          } else {
            chromeMojoEventInfo_ = value;
          }
        } else {
          chromeMojoEventInfoBuilder_.mergeFrom(value);
        }
        bitField1_ |= 0x00000004;
        onChanged();
        return this;
      }
      /**
       * <code>optional .perfetto.protos.ChromeMojoEventInfo chrome_mojo_event_info = 38;</code>
       */
      public Builder clearChromeMojoEventInfo() {
        bitField1_ = (bitField1_ & ~0x00000004);
        chromeMojoEventInfo_ = null;
        if (chromeMojoEventInfoBuilder_ != null) {
          chromeMojoEventInfoBuilder_.dispose();
          chromeMojoEventInfoBuilder_ = null;
        }
        onChanged();
        return this;
      }
      /**
       * <code>optional .perfetto.protos.ChromeMojoEventInfo chrome_mojo_event_info = 38;</code>
       */
      public perfetto.protos.ChromeMojoEventInfoOuterClass.ChromeMojoEventInfo.Builder getChromeMojoEventInfoBuilder() {
        bitField1_ |= 0x00000004;
        onChanged();
        return getChromeMojoEventInfoFieldBuilder().getBuilder();
      }
      /**
       * <code>optional .perfetto.protos.ChromeMojoEventInfo chrome_mojo_event_info = 38;</code>
       */
      public perfetto.protos.ChromeMojoEventInfoOuterClass.ChromeMojoEventInfoOrBuilder getChromeMojoEventInfoOrBuilder() {
        if (chromeMojoEventInfoBuilder_ != null) {
          return chromeMojoEventInfoBuilder_.getMessageOrBuilder();
        } else {
          return chromeMojoEventInfo_ == null ?
              perfetto.protos.ChromeMojoEventInfoOuterClass.ChromeMojoEventInfo.getDefaultInstance() : chromeMojoEventInfo_;
        }
      }
      /**
       * <code>optional .perfetto.protos.ChromeMojoEventInfo chrome_mojo_event_info = 38;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          perfetto.protos.ChromeMojoEventInfoOuterClass.ChromeMojoEventInfo, perfetto.protos.ChromeMojoEventInfoOuterClass.ChromeMojoEventInfo.Builder, perfetto.protos.ChromeMojoEventInfoOuterClass.ChromeMojoEventInfoOrBuilder> 
          getChromeMojoEventInfoFieldBuilder() {
        if (chromeMojoEventInfoBuilder_ == null) {
          chromeMojoEventInfoBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              perfetto.protos.ChromeMojoEventInfoOuterClass.ChromeMojoEventInfo, perfetto.protos.ChromeMojoEventInfoOuterClass.ChromeMojoEventInfo.Builder, perfetto.protos.ChromeMojoEventInfoOuterClass.ChromeMojoEventInfoOrBuilder>(
                  getChromeMojoEventInfo(),
                  getParentForChildren(),
                  isClean());
          chromeMojoEventInfo_ = null;
        }
        return chromeMojoEventInfoBuilder_;
      }

      /**
       * <pre>
       * Delta timestamp value since the last TrackEvent or ThreadDescriptor. To
       * calculate the absolute timestamp value, sum up all delta values of the
       * preceding TrackEvents since the last ThreadDescriptor and add the sum to
       * the |reference_timestamp| in ThreadDescriptor. This value should always
       * be positive.
       * </pre>
       *
       * <code>int64 timestamp_delta_us = 1;</code>
       * @return Whether the timestampDeltaUs field is set.
       */
      public boolean hasTimestampDeltaUs() {
        return timestampCase_ == 1;
      }
      /**
       * <pre>
       * Delta timestamp value since the last TrackEvent or ThreadDescriptor. To
       * calculate the absolute timestamp value, sum up all delta values of the
       * preceding TrackEvents since the last ThreadDescriptor and add the sum to
       * the |reference_timestamp| in ThreadDescriptor. This value should always
       * be positive.
       * </pre>
       *
       * <code>int64 timestamp_delta_us = 1;</code>
       * @return The timestampDeltaUs.
       */
      public long getTimestampDeltaUs() {
        if (timestampCase_ == 1) {
          return (java.lang.Long) timestamp_;
        }
        return 0L;
      }
      /**
       * <pre>
       * Delta timestamp value since the last TrackEvent or ThreadDescriptor. To
       * calculate the absolute timestamp value, sum up all delta values of the
       * preceding TrackEvents since the last ThreadDescriptor and add the sum to
       * the |reference_timestamp| in ThreadDescriptor. This value should always
       * be positive.
       * </pre>
       *
       * <code>int64 timestamp_delta_us = 1;</code>
       * @param value The timestampDeltaUs to set.
       * @return This builder for chaining.
       */
      public Builder setTimestampDeltaUs(long value) {
        
        timestampCase_ = 1;
        timestamp_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Delta timestamp value since the last TrackEvent or ThreadDescriptor. To
       * calculate the absolute timestamp value, sum up all delta values of the
       * preceding TrackEvents since the last ThreadDescriptor and add the sum to
       * the |reference_timestamp| in ThreadDescriptor. This value should always
       * be positive.
       * </pre>
       *
       * <code>int64 timestamp_delta_us = 1;</code>
       * @return This builder for chaining.
       */
      public Builder clearTimestampDeltaUs() {
        if (timestampCase_ == 1) {
          timestampCase_ = 0;
          timestamp_ = null;
          onChanged();
        }
        return this;
      }

      /**
       * <pre>
       * Absolute value (e.g. a manually specified timestamp in the macro).
       * This is a one-off value that does not affect delta timestamp computation
       * in subsequent TrackEvents.
       * </pre>
       *
       * <code>int64 timestamp_absolute_us = 16;</code>
       * @return Whether the timestampAbsoluteUs field is set.
       */
      public boolean hasTimestampAbsoluteUs() {
        return timestampCase_ == 16;
      }
      /**
       * <pre>
       * Absolute value (e.g. a manually specified timestamp in the macro).
       * This is a one-off value that does not affect delta timestamp computation
       * in subsequent TrackEvents.
       * </pre>
       *
       * <code>int64 timestamp_absolute_us = 16;</code>
       * @return The timestampAbsoluteUs.
       */
      public long getTimestampAbsoluteUs() {
        if (timestampCase_ == 16) {
          return (java.lang.Long) timestamp_;
        }
        return 0L;
      }
      /**
       * <pre>
       * Absolute value (e.g. a manually specified timestamp in the macro).
       * This is a one-off value that does not affect delta timestamp computation
       * in subsequent TrackEvents.
       * </pre>
       *
       * <code>int64 timestamp_absolute_us = 16;</code>
       * @param value The timestampAbsoluteUs to set.
       * @return This builder for chaining.
       */
      public Builder setTimestampAbsoluteUs(long value) {
        
        timestampCase_ = 16;
        timestamp_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Absolute value (e.g. a manually specified timestamp in the macro).
       * This is a one-off value that does not affect delta timestamp computation
       * in subsequent TrackEvents.
       * </pre>
       *
       * <code>int64 timestamp_absolute_us = 16;</code>
       * @return This builder for chaining.
       */
      public Builder clearTimestampAbsoluteUs() {
        if (timestampCase_ == 16) {
          timestampCase_ = 0;
          timestamp_ = null;
          onChanged();
        }
        return this;
      }

      /**
       * <pre>
       * Delta timestamp value since the last TrackEvent or ThreadDescriptor. To
       * calculate the absolute timestamp value, sum up all delta values of the
       * preceding TrackEvents since the last ThreadDescriptor and add the sum to
       * the |reference_timestamp| in ThreadDescriptor. This value should always
       * be positive.
       * </pre>
       *
       * <code>int64 thread_time_delta_us = 2;</code>
       * @return Whether the threadTimeDeltaUs field is set.
       */
      public boolean hasThreadTimeDeltaUs() {
        return threadTimeCase_ == 2;
      }
      /**
       * <pre>
       * Delta timestamp value since the last TrackEvent or ThreadDescriptor. To
       * calculate the absolute timestamp value, sum up all delta values of the
       * preceding TrackEvents since the last ThreadDescriptor and add the sum to
       * the |reference_timestamp| in ThreadDescriptor. This value should always
       * be positive.
       * </pre>
       *
       * <code>int64 thread_time_delta_us = 2;</code>
       * @return The threadTimeDeltaUs.
       */
      public long getThreadTimeDeltaUs() {
        if (threadTimeCase_ == 2) {
          return (java.lang.Long) threadTime_;
        }
        return 0L;
      }
      /**
       * <pre>
       * Delta timestamp value since the last TrackEvent or ThreadDescriptor. To
       * calculate the absolute timestamp value, sum up all delta values of the
       * preceding TrackEvents since the last ThreadDescriptor and add the sum to
       * the |reference_timestamp| in ThreadDescriptor. This value should always
       * be positive.
       * </pre>
       *
       * <code>int64 thread_time_delta_us = 2;</code>
       * @param value The threadTimeDeltaUs to set.
       * @return This builder for chaining.
       */
      public Builder setThreadTimeDeltaUs(long value) {
        
        threadTimeCase_ = 2;
        threadTime_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Delta timestamp value since the last TrackEvent or ThreadDescriptor. To
       * calculate the absolute timestamp value, sum up all delta values of the
       * preceding TrackEvents since the last ThreadDescriptor and add the sum to
       * the |reference_timestamp| in ThreadDescriptor. This value should always
       * be positive.
       * </pre>
       *
       * <code>int64 thread_time_delta_us = 2;</code>
       * @return This builder for chaining.
       */
      public Builder clearThreadTimeDeltaUs() {
        if (threadTimeCase_ == 2) {
          threadTimeCase_ = 0;
          threadTime_ = null;
          onChanged();
        }
        return this;
      }

      /**
       * <pre>
       * This is a one-off absolute value that does not affect delta timestamp
       * computation in subsequent TrackEvents.
       * </pre>
       *
       * <code>int64 thread_time_absolute_us = 17;</code>
       * @return Whether the threadTimeAbsoluteUs field is set.
       */
      public boolean hasThreadTimeAbsoluteUs() {
        return threadTimeCase_ == 17;
      }
      /**
       * <pre>
       * This is a one-off absolute value that does not affect delta timestamp
       * computation in subsequent TrackEvents.
       * </pre>
       *
       * <code>int64 thread_time_absolute_us = 17;</code>
       * @return The threadTimeAbsoluteUs.
       */
      public long getThreadTimeAbsoluteUs() {
        if (threadTimeCase_ == 17) {
          return (java.lang.Long) threadTime_;
        }
        return 0L;
      }
      /**
       * <pre>
       * This is a one-off absolute value that does not affect delta timestamp
       * computation in subsequent TrackEvents.
       * </pre>
       *
       * <code>int64 thread_time_absolute_us = 17;</code>
       * @param value The threadTimeAbsoluteUs to set.
       * @return This builder for chaining.
       */
      public Builder setThreadTimeAbsoluteUs(long value) {
        
        threadTimeCase_ = 17;
        threadTime_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * This is a one-off absolute value that does not affect delta timestamp
       * computation in subsequent TrackEvents.
       * </pre>
       *
       * <code>int64 thread_time_absolute_us = 17;</code>
       * @return This builder for chaining.
       */
      public Builder clearThreadTimeAbsoluteUs() {
        if (threadTimeCase_ == 17) {
          threadTimeCase_ = 0;
          threadTime_ = null;
          onChanged();
        }
        return this;
      }

      /**
       * <pre>
       * Same encoding as |thread_time| field above.
       * </pre>
       *
       * <code>int64 thread_instruction_count_delta = 8;</code>
       * @return Whether the threadInstructionCountDelta field is set.
       */
      public boolean hasThreadInstructionCountDelta() {
        return threadInstructionCountCase_ == 8;
      }
      /**
       * <pre>
       * Same encoding as |thread_time| field above.
       * </pre>
       *
       * <code>int64 thread_instruction_count_delta = 8;</code>
       * @return The threadInstructionCountDelta.
       */
      public long getThreadInstructionCountDelta() {
        if (threadInstructionCountCase_ == 8) {
          return (java.lang.Long) threadInstructionCount_;
        }
        return 0L;
      }
      /**
       * <pre>
       * Same encoding as |thread_time| field above.
       * </pre>
       *
       * <code>int64 thread_instruction_count_delta = 8;</code>
       * @param value The threadInstructionCountDelta to set.
       * @return This builder for chaining.
       */
      public Builder setThreadInstructionCountDelta(long value) {
        
        threadInstructionCountCase_ = 8;
        threadInstructionCount_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Same encoding as |thread_time| field above.
       * </pre>
       *
       * <code>int64 thread_instruction_count_delta = 8;</code>
       * @return This builder for chaining.
       */
      public Builder clearThreadInstructionCountDelta() {
        if (threadInstructionCountCase_ == 8) {
          threadInstructionCountCase_ = 0;
          threadInstructionCount_ = null;
          onChanged();
        }
        return this;
      }

      /**
       * <code>int64 thread_instruction_count_absolute = 20;</code>
       * @return Whether the threadInstructionCountAbsolute field is set.
       */
      public boolean hasThreadInstructionCountAbsolute() {
        return threadInstructionCountCase_ == 20;
      }
      /**
       * <code>int64 thread_instruction_count_absolute = 20;</code>
       * @return The threadInstructionCountAbsolute.
       */
      public long getThreadInstructionCountAbsolute() {
        if (threadInstructionCountCase_ == 20) {
          return (java.lang.Long) threadInstructionCount_;
        }
        return 0L;
      }
      /**
       * <code>int64 thread_instruction_count_absolute = 20;</code>
       * @param value The threadInstructionCountAbsolute to set.
       * @return This builder for chaining.
       */
      public Builder setThreadInstructionCountAbsolute(long value) {
        
        threadInstructionCountCase_ = 20;
        threadInstructionCount_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>int64 thread_instruction_count_absolute = 20;</code>
       * @return This builder for chaining.
       */
      public Builder clearThreadInstructionCountAbsolute() {
        if (threadInstructionCountCase_ == 20) {
          threadInstructionCountCase_ = 0;
          threadInstructionCount_ = null;
          onChanged();
        }
        return this;
      }

      private perfetto.protos.TrackEventOuterClass.TrackEvent.LegacyEvent legacyEvent_;
      private com.google.protobuf.SingleFieldBuilderV3<
          perfetto.protos.TrackEventOuterClass.TrackEvent.LegacyEvent, perfetto.protos.TrackEventOuterClass.TrackEvent.LegacyEvent.Builder, perfetto.protos.TrackEventOuterClass.TrackEvent.LegacyEventOrBuilder> legacyEventBuilder_;
      /**
       * <code>optional .perfetto.protos.TrackEvent.LegacyEvent legacy_event = 6;</code>
       * @return Whether the legacyEvent field is set.
       */
      public boolean hasLegacyEvent() {
        return ((bitField1_ & 0x00000200) != 0);
      }
      /**
       * <code>optional .perfetto.protos.TrackEvent.LegacyEvent legacy_event = 6;</code>
       * @return The legacyEvent.
       */
      public perfetto.protos.TrackEventOuterClass.TrackEvent.LegacyEvent getLegacyEvent() {
        if (legacyEventBuilder_ == null) {
          return legacyEvent_ == null ? perfetto.protos.TrackEventOuterClass.TrackEvent.LegacyEvent.getDefaultInstance() : legacyEvent_;
        } else {
          return legacyEventBuilder_.getMessage();
        }
      }
      /**
       * <code>optional .perfetto.protos.TrackEvent.LegacyEvent legacy_event = 6;</code>
       */
      public Builder setLegacyEvent(perfetto.protos.TrackEventOuterClass.TrackEvent.LegacyEvent value) {
        if (legacyEventBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          legacyEvent_ = value;
        } else {
          legacyEventBuilder_.setMessage(value);
        }
        bitField1_ |= 0x00000200;
        onChanged();
        return this;
      }
      /**
       * <code>optional .perfetto.protos.TrackEvent.LegacyEvent legacy_event = 6;</code>
       */
      public Builder setLegacyEvent(
          perfetto.protos.TrackEventOuterClass.TrackEvent.LegacyEvent.Builder builderForValue) {
        if (legacyEventBuilder_ == null) {
          legacyEvent_ = builderForValue.build();
        } else {
          legacyEventBuilder_.setMessage(builderForValue.build());
        }
        bitField1_ |= 0x00000200;
        onChanged();
        return this;
      }
      /**
       * <code>optional .perfetto.protos.TrackEvent.LegacyEvent legacy_event = 6;</code>
       */
      public Builder mergeLegacyEvent(perfetto.protos.TrackEventOuterClass.TrackEvent.LegacyEvent value) {
        if (legacyEventBuilder_ == null) {
          if (((bitField1_ & 0x00000200) != 0) &&
            legacyEvent_ != null &&
            legacyEvent_ != perfetto.protos.TrackEventOuterClass.TrackEvent.LegacyEvent.getDefaultInstance()) {
            getLegacyEventBuilder().mergeFrom(value);
          } else {
            legacyEvent_ = value;
          }
        } else {
          legacyEventBuilder_.mergeFrom(value);
        }
        bitField1_ |= 0x00000200;
        onChanged();
        return this;
      }
      /**
       * <code>optional .perfetto.protos.TrackEvent.LegacyEvent legacy_event = 6;</code>
       */
      public Builder clearLegacyEvent() {
        bitField1_ = (bitField1_ & ~0x00000200);
        legacyEvent_ = null;
        if (legacyEventBuilder_ != null) {
          legacyEventBuilder_.dispose();
          legacyEventBuilder_ = null;
        }
        onChanged();
        return this;
      }
      /**
       * <code>optional .perfetto.protos.TrackEvent.LegacyEvent legacy_event = 6;</code>
       */
      public perfetto.protos.TrackEventOuterClass.TrackEvent.LegacyEvent.Builder getLegacyEventBuilder() {
        bitField1_ |= 0x00000200;
        onChanged();
        return getLegacyEventFieldBuilder().getBuilder();
      }
      /**
       * <code>optional .perfetto.protos.TrackEvent.LegacyEvent legacy_event = 6;</code>
       */
      public perfetto.protos.TrackEventOuterClass.TrackEvent.LegacyEventOrBuilder getLegacyEventOrBuilder() {
        if (legacyEventBuilder_ != null) {
          return legacyEventBuilder_.getMessageOrBuilder();
        } else {
          return legacyEvent_ == null ?
              perfetto.protos.TrackEventOuterClass.TrackEvent.LegacyEvent.getDefaultInstance() : legacyEvent_;
        }
      }
      /**
       * <code>optional .perfetto.protos.TrackEvent.LegacyEvent legacy_event = 6;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          perfetto.protos.TrackEventOuterClass.TrackEvent.LegacyEvent, perfetto.protos.TrackEventOuterClass.TrackEvent.LegacyEvent.Builder, perfetto.protos.TrackEventOuterClass.TrackEvent.LegacyEventOrBuilder> 
          getLegacyEventFieldBuilder() {
        if (legacyEventBuilder_ == null) {
          legacyEventBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              perfetto.protos.TrackEventOuterClass.TrackEvent.LegacyEvent, perfetto.protos.TrackEventOuterClass.TrackEvent.LegacyEvent.Builder, perfetto.protos.TrackEventOuterClass.TrackEvent.LegacyEventOrBuilder>(
                  getLegacyEvent(),
                  getParentForChildren(),
                  isClean());
          legacyEvent_ = null;
        }
        return legacyEventBuilder_;
      }
      @java.lang.Override
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      @java.lang.Override
      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:perfetto.protos.TrackEvent)
    }

    // @@protoc_insertion_point(class_scope:perfetto.protos.TrackEvent)
    private static final perfetto.protos.TrackEventOuterClass.TrackEvent DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new perfetto.protos.TrackEventOuterClass.TrackEvent();
    }

    public static perfetto.protos.TrackEventOuterClass.TrackEvent getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    @java.lang.Deprecated public static final com.google.protobuf.Parser<TrackEvent>
        PARSER = new com.google.protobuf.AbstractParser<TrackEvent>() {
      @java.lang.Override
      public TrackEvent parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        Builder builder = newBuilder();
        try {
          builder.mergeFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.setUnfinishedMessage(builder.buildPartial());
        } catch (com.google.protobuf.UninitializedMessageException e) {
          throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
        } catch (java.io.IOException e) {
          throw new com.google.protobuf.InvalidProtocolBufferException(e)
              .setUnfinishedMessage(builder.buildPartial());
        }
        return builder.buildPartial();
      }
    };

    public static com.google.protobuf.Parser<TrackEvent> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<TrackEvent> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public perfetto.protos.TrackEventOuterClass.TrackEvent getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface TrackEventDefaultsOrBuilder extends
      // @@protoc_insertion_point(interface_extends:perfetto.protos.TrackEventDefaults)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <code>optional uint64 track_uuid = 11;</code>
     * @return Whether the trackUuid field is set.
     */
    boolean hasTrackUuid();
    /**
     * <code>optional uint64 track_uuid = 11;</code>
     * @return The trackUuid.
     */
    long getTrackUuid();

    /**
     * <code>repeated uint64 extra_counter_track_uuids = 31;</code>
     * @return A list containing the extraCounterTrackUuids.
     */
    java.util.List<java.lang.Long> getExtraCounterTrackUuidsList();
    /**
     * <code>repeated uint64 extra_counter_track_uuids = 31;</code>
     * @return The count of extraCounterTrackUuids.
     */
    int getExtraCounterTrackUuidsCount();
    /**
     * <code>repeated uint64 extra_counter_track_uuids = 31;</code>
     * @param index The index of the element to return.
     * @return The extraCounterTrackUuids at the given index.
     */
    long getExtraCounterTrackUuids(int index);

    /**
     * <code>repeated uint64 extra_double_counter_track_uuids = 45;</code>
     * @return A list containing the extraDoubleCounterTrackUuids.
     */
    java.util.List<java.lang.Long> getExtraDoubleCounterTrackUuidsList();
    /**
     * <code>repeated uint64 extra_double_counter_track_uuids = 45;</code>
     * @return The count of extraDoubleCounterTrackUuids.
     */
    int getExtraDoubleCounterTrackUuidsCount();
    /**
     * <code>repeated uint64 extra_double_counter_track_uuids = 45;</code>
     * @param index The index of the element to return.
     * @return The extraDoubleCounterTrackUuids at the given index.
     */
    long getExtraDoubleCounterTrackUuids(int index);
  }
  /**
   * <pre>
   * Default values for fields of all TrackEvents on the same packet sequence.
   * Should be emitted as part of TracePacketDefaults whenever incremental state
   * is cleared. It's defined here because field IDs should match those of the
   * corresponding fields in TrackEvent.
   * </pre>
   *
   * Protobuf type {@code perfetto.protos.TrackEventDefaults}
   */
  public static final class TrackEventDefaults extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:perfetto.protos.TrackEventDefaults)
      TrackEventDefaultsOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use TrackEventDefaults.newBuilder() to construct.
    private TrackEventDefaults(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private TrackEventDefaults() {
      extraCounterTrackUuids_ = emptyLongList();
      extraDoubleCounterTrackUuids_ = emptyLongList();
    }

    @java.lang.Override
    @SuppressWarnings({"unused"})
    protected java.lang.Object newInstance(
        UnusedPrivateParameter unused) {
      return new TrackEventDefaults();
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return perfetto.protos.TrackEventOuterClass.internal_static_perfetto_protos_TrackEventDefaults_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return perfetto.protos.TrackEventOuterClass.internal_static_perfetto_protos_TrackEventDefaults_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              perfetto.protos.TrackEventOuterClass.TrackEventDefaults.class, perfetto.protos.TrackEventOuterClass.TrackEventDefaults.Builder.class);
    }

    private int bitField0_;
    public static final int TRACK_UUID_FIELD_NUMBER = 11;
    private long trackUuid_ = 0L;
    /**
     * <code>optional uint64 track_uuid = 11;</code>
     * @return Whether the trackUuid field is set.
     */
    @java.lang.Override
    public boolean hasTrackUuid() {
      return ((bitField0_ & 0x00000001) != 0);
    }
    /**
     * <code>optional uint64 track_uuid = 11;</code>
     * @return The trackUuid.
     */
    @java.lang.Override
    public long getTrackUuid() {
      return trackUuid_;
    }

    public static final int EXTRA_COUNTER_TRACK_UUIDS_FIELD_NUMBER = 31;
    @SuppressWarnings("serial")
    private com.google.protobuf.Internal.LongList extraCounterTrackUuids_;
    /**
     * <code>repeated uint64 extra_counter_track_uuids = 31;</code>
     * @return A list containing the extraCounterTrackUuids.
     */
    @java.lang.Override
    public java.util.List<java.lang.Long>
        getExtraCounterTrackUuidsList() {
      return extraCounterTrackUuids_;
    }
    /**
     * <code>repeated uint64 extra_counter_track_uuids = 31;</code>
     * @return The count of extraCounterTrackUuids.
     */
    public int getExtraCounterTrackUuidsCount() {
      return extraCounterTrackUuids_.size();
    }
    /**
     * <code>repeated uint64 extra_counter_track_uuids = 31;</code>
     * @param index The index of the element to return.
     * @return The extraCounterTrackUuids at the given index.
     */
    public long getExtraCounterTrackUuids(int index) {
      return extraCounterTrackUuids_.getLong(index);
    }

    public static final int EXTRA_DOUBLE_COUNTER_TRACK_UUIDS_FIELD_NUMBER = 45;
    @SuppressWarnings("serial")
    private com.google.protobuf.Internal.LongList extraDoubleCounterTrackUuids_;
    /**
     * <code>repeated uint64 extra_double_counter_track_uuids = 45;</code>
     * @return A list containing the extraDoubleCounterTrackUuids.
     */
    @java.lang.Override
    public java.util.List<java.lang.Long>
        getExtraDoubleCounterTrackUuidsList() {
      return extraDoubleCounterTrackUuids_;
    }
    /**
     * <code>repeated uint64 extra_double_counter_track_uuids = 45;</code>
     * @return The count of extraDoubleCounterTrackUuids.
     */
    public int getExtraDoubleCounterTrackUuidsCount() {
      return extraDoubleCounterTrackUuids_.size();
    }
    /**
     * <code>repeated uint64 extra_double_counter_track_uuids = 45;</code>
     * @param index The index of the element to return.
     * @return The extraDoubleCounterTrackUuids at the given index.
     */
    public long getExtraDoubleCounterTrackUuids(int index) {
      return extraDoubleCounterTrackUuids_.getLong(index);
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (((bitField0_ & 0x00000001) != 0)) {
        output.writeUInt64(11, trackUuid_);
      }
      for (int i = 0; i < extraCounterTrackUuids_.size(); i++) {
        output.writeUInt64(31, extraCounterTrackUuids_.getLong(i));
      }
      for (int i = 0; i < extraDoubleCounterTrackUuids_.size(); i++) {
        output.writeUInt64(45, extraDoubleCounterTrackUuids_.getLong(i));
      }
      getUnknownFields().writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) != 0)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt64Size(11, trackUuid_);
      }
      {
        int dataSize = 0;
        for (int i = 0; i < extraCounterTrackUuids_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeUInt64SizeNoTag(extraCounterTrackUuids_.getLong(i));
        }
        size += dataSize;
        size += 2 * getExtraCounterTrackUuidsList().size();
      }
      {
        int dataSize = 0;
        for (int i = 0; i < extraDoubleCounterTrackUuids_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeUInt64SizeNoTag(extraDoubleCounterTrackUuids_.getLong(i));
        }
        size += dataSize;
        size += 2 * getExtraDoubleCounterTrackUuidsList().size();
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof perfetto.protos.TrackEventOuterClass.TrackEventDefaults)) {
        return super.equals(obj);
      }
      perfetto.protos.TrackEventOuterClass.TrackEventDefaults other = (perfetto.protos.TrackEventOuterClass.TrackEventDefaults) obj;

      if (hasTrackUuid() != other.hasTrackUuid()) return false;
      if (hasTrackUuid()) {
        if (getTrackUuid()
            != other.getTrackUuid()) return false;
      }
      if (!getExtraCounterTrackUuidsList()
          .equals(other.getExtraCounterTrackUuidsList())) return false;
      if (!getExtraDoubleCounterTrackUuidsList()
          .equals(other.getExtraDoubleCounterTrackUuidsList())) return false;
      if (!getUnknownFields().equals(other.getUnknownFields())) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      if (hasTrackUuid()) {
        hash = (37 * hash) + TRACK_UUID_FIELD_NUMBER;
        hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
            getTrackUuid());
      }
      if (getExtraCounterTrackUuidsCount() > 0) {
        hash = (37 * hash) + EXTRA_COUNTER_TRACK_UUIDS_FIELD_NUMBER;
        hash = (53 * hash) + getExtraCounterTrackUuidsList().hashCode();
      }
      if (getExtraDoubleCounterTrackUuidsCount() > 0) {
        hash = (37 * hash) + EXTRA_DOUBLE_COUNTER_TRACK_UUIDS_FIELD_NUMBER;
        hash = (53 * hash) + getExtraDoubleCounterTrackUuidsList().hashCode();
      }
      hash = (29 * hash) + getUnknownFields().hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static perfetto.protos.TrackEventOuterClass.TrackEventDefaults parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static perfetto.protos.TrackEventOuterClass.TrackEventDefaults parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static perfetto.protos.TrackEventOuterClass.TrackEventDefaults parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static perfetto.protos.TrackEventOuterClass.TrackEventDefaults parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static perfetto.protos.TrackEventOuterClass.TrackEventDefaults parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static perfetto.protos.TrackEventOuterClass.TrackEventDefaults parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static perfetto.protos.TrackEventOuterClass.TrackEventDefaults parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static perfetto.protos.TrackEventOuterClass.TrackEventDefaults parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static perfetto.protos.TrackEventOuterClass.TrackEventDefaults parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static perfetto.protos.TrackEventOuterClass.TrackEventDefaults parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static perfetto.protos.TrackEventOuterClass.TrackEventDefaults parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static perfetto.protos.TrackEventOuterClass.TrackEventDefaults parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(perfetto.protos.TrackEventOuterClass.TrackEventDefaults prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * <pre>
     * Default values for fields of all TrackEvents on the same packet sequence.
     * Should be emitted as part of TracePacketDefaults whenever incremental state
     * is cleared. It's defined here because field IDs should match those of the
     * corresponding fields in TrackEvent.
     * </pre>
     *
     * Protobuf type {@code perfetto.protos.TrackEventDefaults}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:perfetto.protos.TrackEventDefaults)
        perfetto.protos.TrackEventOuterClass.TrackEventDefaultsOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return perfetto.protos.TrackEventOuterClass.internal_static_perfetto_protos_TrackEventDefaults_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return perfetto.protos.TrackEventOuterClass.internal_static_perfetto_protos_TrackEventDefaults_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                perfetto.protos.TrackEventOuterClass.TrackEventDefaults.class, perfetto.protos.TrackEventOuterClass.TrackEventDefaults.Builder.class);
      }

      // Construct using perfetto.protos.TrackEventOuterClass.TrackEventDefaults.newBuilder()
      private Builder() {

      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);

      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        bitField0_ = 0;
        trackUuid_ = 0L;
        extraCounterTrackUuids_ = emptyLongList();
        extraDoubleCounterTrackUuids_ = emptyLongList();
        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return perfetto.protos.TrackEventOuterClass.internal_static_perfetto_protos_TrackEventDefaults_descriptor;
      }

      @java.lang.Override
      public perfetto.protos.TrackEventOuterClass.TrackEventDefaults getDefaultInstanceForType() {
        return perfetto.protos.TrackEventOuterClass.TrackEventDefaults.getDefaultInstance();
      }

      @java.lang.Override
      public perfetto.protos.TrackEventOuterClass.TrackEventDefaults build() {
        perfetto.protos.TrackEventOuterClass.TrackEventDefaults result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public perfetto.protos.TrackEventOuterClass.TrackEventDefaults buildPartial() {
        perfetto.protos.TrackEventOuterClass.TrackEventDefaults result = new perfetto.protos.TrackEventOuterClass.TrackEventDefaults(this);
        buildPartialRepeatedFields(result);
        if (bitField0_ != 0) { buildPartial0(result); }
        onBuilt();
        return result;
      }

      private void buildPartialRepeatedFields(perfetto.protos.TrackEventOuterClass.TrackEventDefaults result) {
        if (((bitField0_ & 0x00000002) != 0)) {
          extraCounterTrackUuids_.makeImmutable();
          bitField0_ = (bitField0_ & ~0x00000002);
        }
        result.extraCounterTrackUuids_ = extraCounterTrackUuids_;
        if (((bitField0_ & 0x00000004) != 0)) {
          extraDoubleCounterTrackUuids_.makeImmutable();
          bitField0_ = (bitField0_ & ~0x00000004);
        }
        result.extraDoubleCounterTrackUuids_ = extraDoubleCounterTrackUuids_;
      }

      private void buildPartial0(perfetto.protos.TrackEventOuterClass.TrackEventDefaults result) {
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) != 0)) {
          result.trackUuid_ = trackUuid_;
          to_bitField0_ |= 0x00000001;
        }
        result.bitField0_ |= to_bitField0_;
      }

      @java.lang.Override
      public Builder clone() {
        return super.clone();
      }
      @java.lang.Override
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.setField(field, value);
      }
      @java.lang.Override
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return super.clearField(field);
      }
      @java.lang.Override
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return super.clearOneof(oneof);
      }
      @java.lang.Override
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, java.lang.Object value) {
        return super.setRepeatedField(field, index, value);
      }
      @java.lang.Override
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.addRepeatedField(field, value);
      }
      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof perfetto.protos.TrackEventOuterClass.TrackEventDefaults) {
          return mergeFrom((perfetto.protos.TrackEventOuterClass.TrackEventDefaults)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(perfetto.protos.TrackEventOuterClass.TrackEventDefaults other) {
        if (other == perfetto.protos.TrackEventOuterClass.TrackEventDefaults.getDefaultInstance()) return this;
        if (other.hasTrackUuid()) {
          setTrackUuid(other.getTrackUuid());
        }
        if (!other.extraCounterTrackUuids_.isEmpty()) {
          if (extraCounterTrackUuids_.isEmpty()) {
            extraCounterTrackUuids_ = other.extraCounterTrackUuids_;
            bitField0_ = (bitField0_ & ~0x00000002);
          } else {
            ensureExtraCounterTrackUuidsIsMutable();
            extraCounterTrackUuids_.addAll(other.extraCounterTrackUuids_);
          }
          onChanged();
        }
        if (!other.extraDoubleCounterTrackUuids_.isEmpty()) {
          if (extraDoubleCounterTrackUuids_.isEmpty()) {
            extraDoubleCounterTrackUuids_ = other.extraDoubleCounterTrackUuids_;
            bitField0_ = (bitField0_ & ~0x00000004);
          } else {
            ensureExtraDoubleCounterTrackUuidsIsMutable();
            extraDoubleCounterTrackUuids_.addAll(other.extraDoubleCounterTrackUuids_);
          }
          onChanged();
        }
        this.mergeUnknownFields(other.getUnknownFields());
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        if (extensionRegistry == null) {
          throw new java.lang.NullPointerException();
        }
        try {
          boolean done = false;
          while (!done) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                done = true;
                break;
              case 88: {
                trackUuid_ = input.readUInt64();
                bitField0_ |= 0x00000001;
                break;
              } // case 88
              case 248: {
                long v = input.readUInt64();
                ensureExtraCounterTrackUuidsIsMutable();
                extraCounterTrackUuids_.addLong(v);
                break;
              } // case 248
              case 250: {
                int length = input.readRawVarint32();
                int limit = input.pushLimit(length);
                ensureExtraCounterTrackUuidsIsMutable();
                while (input.getBytesUntilLimit() > 0) {
                  extraCounterTrackUuids_.addLong(input.readUInt64());
                }
                input.popLimit(limit);
                break;
              } // case 250
              case 360: {
                long v = input.readUInt64();
                ensureExtraDoubleCounterTrackUuidsIsMutable();
                extraDoubleCounterTrackUuids_.addLong(v);
                break;
              } // case 360
              case 362: {
                int length = input.readRawVarint32();
                int limit = input.pushLimit(length);
                ensureExtraDoubleCounterTrackUuidsIsMutable();
                while (input.getBytesUntilLimit() > 0) {
                  extraDoubleCounterTrackUuids_.addLong(input.readUInt64());
                }
                input.popLimit(limit);
                break;
              } // case 362
              default: {
                if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                  done = true; // was an endgroup tag
                }
                break;
              } // default:
            } // switch (tag)
          } // while (!done)
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.unwrapIOException();
        } finally {
          onChanged();
        } // finally
        return this;
      }
      private int bitField0_;

      private long trackUuid_ ;
      /**
       * <code>optional uint64 track_uuid = 11;</code>
       * @return Whether the trackUuid field is set.
       */
      @java.lang.Override
      public boolean hasTrackUuid() {
        return ((bitField0_ & 0x00000001) != 0);
      }
      /**
       * <code>optional uint64 track_uuid = 11;</code>
       * @return The trackUuid.
       */
      @java.lang.Override
      public long getTrackUuid() {
        return trackUuid_;
      }
      /**
       * <code>optional uint64 track_uuid = 11;</code>
       * @param value The trackUuid to set.
       * @return This builder for chaining.
       */
      public Builder setTrackUuid(long value) {
        
        trackUuid_ = value;
        bitField0_ |= 0x00000001;
        onChanged();
        return this;
      }
      /**
       * <code>optional uint64 track_uuid = 11;</code>
       * @return This builder for chaining.
       */
      public Builder clearTrackUuid() {
        bitField0_ = (bitField0_ & ~0x00000001);
        trackUuid_ = 0L;
        onChanged();
        return this;
      }

      private com.google.protobuf.Internal.LongList extraCounterTrackUuids_ = emptyLongList();
      private void ensureExtraCounterTrackUuidsIsMutable() {
        if (!((bitField0_ & 0x00000002) != 0)) {
          extraCounterTrackUuids_ = mutableCopy(extraCounterTrackUuids_);
          bitField0_ |= 0x00000002;
        }
      }
      /**
       * <code>repeated uint64 extra_counter_track_uuids = 31;</code>
       * @return A list containing the extraCounterTrackUuids.
       */
      public java.util.List<java.lang.Long>
          getExtraCounterTrackUuidsList() {
        return ((bitField0_ & 0x00000002) != 0) ?
                 java.util.Collections.unmodifiableList(extraCounterTrackUuids_) : extraCounterTrackUuids_;
      }
      /**
       * <code>repeated uint64 extra_counter_track_uuids = 31;</code>
       * @return The count of extraCounterTrackUuids.
       */
      public int getExtraCounterTrackUuidsCount() {
        return extraCounterTrackUuids_.size();
      }
      /**
       * <code>repeated uint64 extra_counter_track_uuids = 31;</code>
       * @param index The index of the element to return.
       * @return The extraCounterTrackUuids at the given index.
       */
      public long getExtraCounterTrackUuids(int index) {
        return extraCounterTrackUuids_.getLong(index);
      }
      /**
       * <code>repeated uint64 extra_counter_track_uuids = 31;</code>
       * @param index The index to set the value at.
       * @param value The extraCounterTrackUuids to set.
       * @return This builder for chaining.
       */
      public Builder setExtraCounterTrackUuids(
          int index, long value) {
        
        ensureExtraCounterTrackUuidsIsMutable();
        extraCounterTrackUuids_.setLong(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated uint64 extra_counter_track_uuids = 31;</code>
       * @param value The extraCounterTrackUuids to add.
       * @return This builder for chaining.
       */
      public Builder addExtraCounterTrackUuids(long value) {
        
        ensureExtraCounterTrackUuidsIsMutable();
        extraCounterTrackUuids_.addLong(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated uint64 extra_counter_track_uuids = 31;</code>
       * @param values The extraCounterTrackUuids to add.
       * @return This builder for chaining.
       */
      public Builder addAllExtraCounterTrackUuids(
          java.lang.Iterable<? extends java.lang.Long> values) {
        ensureExtraCounterTrackUuidsIsMutable();
        com.google.protobuf.AbstractMessageLite.Builder.addAll(
            values, extraCounterTrackUuids_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated uint64 extra_counter_track_uuids = 31;</code>
       * @return This builder for chaining.
       */
      public Builder clearExtraCounterTrackUuids() {
        extraCounterTrackUuids_ = emptyLongList();
        bitField0_ = (bitField0_ & ~0x00000002);
        onChanged();
        return this;
      }

      private com.google.protobuf.Internal.LongList extraDoubleCounterTrackUuids_ = emptyLongList();
      private void ensureExtraDoubleCounterTrackUuidsIsMutable() {
        if (!((bitField0_ & 0x00000004) != 0)) {
          extraDoubleCounterTrackUuids_ = mutableCopy(extraDoubleCounterTrackUuids_);
          bitField0_ |= 0x00000004;
        }
      }
      /**
       * <code>repeated uint64 extra_double_counter_track_uuids = 45;</code>
       * @return A list containing the extraDoubleCounterTrackUuids.
       */
      public java.util.List<java.lang.Long>
          getExtraDoubleCounterTrackUuidsList() {
        return ((bitField0_ & 0x00000004) != 0) ?
                 java.util.Collections.unmodifiableList(extraDoubleCounterTrackUuids_) : extraDoubleCounterTrackUuids_;
      }
      /**
       * <code>repeated uint64 extra_double_counter_track_uuids = 45;</code>
       * @return The count of extraDoubleCounterTrackUuids.
       */
      public int getExtraDoubleCounterTrackUuidsCount() {
        return extraDoubleCounterTrackUuids_.size();
      }
      /**
       * <code>repeated uint64 extra_double_counter_track_uuids = 45;</code>
       * @param index The index of the element to return.
       * @return The extraDoubleCounterTrackUuids at the given index.
       */
      public long getExtraDoubleCounterTrackUuids(int index) {
        return extraDoubleCounterTrackUuids_.getLong(index);
      }
      /**
       * <code>repeated uint64 extra_double_counter_track_uuids = 45;</code>
       * @param index The index to set the value at.
       * @param value The extraDoubleCounterTrackUuids to set.
       * @return This builder for chaining.
       */
      public Builder setExtraDoubleCounterTrackUuids(
          int index, long value) {
        
        ensureExtraDoubleCounterTrackUuidsIsMutable();
        extraDoubleCounterTrackUuids_.setLong(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated uint64 extra_double_counter_track_uuids = 45;</code>
       * @param value The extraDoubleCounterTrackUuids to add.
       * @return This builder for chaining.
       */
      public Builder addExtraDoubleCounterTrackUuids(long value) {
        
        ensureExtraDoubleCounterTrackUuidsIsMutable();
        extraDoubleCounterTrackUuids_.addLong(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated uint64 extra_double_counter_track_uuids = 45;</code>
       * @param values The extraDoubleCounterTrackUuids to add.
       * @return This builder for chaining.
       */
      public Builder addAllExtraDoubleCounterTrackUuids(
          java.lang.Iterable<? extends java.lang.Long> values) {
        ensureExtraDoubleCounterTrackUuidsIsMutable();
        com.google.protobuf.AbstractMessageLite.Builder.addAll(
            values, extraDoubleCounterTrackUuids_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated uint64 extra_double_counter_track_uuids = 45;</code>
       * @return This builder for chaining.
       */
      public Builder clearExtraDoubleCounterTrackUuids() {
        extraDoubleCounterTrackUuids_ = emptyLongList();
        bitField0_ = (bitField0_ & ~0x00000004);
        onChanged();
        return this;
      }
      @java.lang.Override
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      @java.lang.Override
      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:perfetto.protos.TrackEventDefaults)
    }

    // @@protoc_insertion_point(class_scope:perfetto.protos.TrackEventDefaults)
    private static final perfetto.protos.TrackEventOuterClass.TrackEventDefaults DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new perfetto.protos.TrackEventOuterClass.TrackEventDefaults();
    }

    public static perfetto.protos.TrackEventOuterClass.TrackEventDefaults getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    @java.lang.Deprecated public static final com.google.protobuf.Parser<TrackEventDefaults>
        PARSER = new com.google.protobuf.AbstractParser<TrackEventDefaults>() {
      @java.lang.Override
      public TrackEventDefaults parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        Builder builder = newBuilder();
        try {
          builder.mergeFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.setUnfinishedMessage(builder.buildPartial());
        } catch (com.google.protobuf.UninitializedMessageException e) {
          throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
        } catch (java.io.IOException e) {
          throw new com.google.protobuf.InvalidProtocolBufferException(e)
              .setUnfinishedMessage(builder.buildPartial());
        }
        return builder.buildPartial();
      }
    };

    public static com.google.protobuf.Parser<TrackEventDefaults> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<TrackEventDefaults> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public perfetto.protos.TrackEventOuterClass.TrackEventDefaults getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface EventCategoryOrBuilder extends
      // @@protoc_insertion_point(interface_extends:perfetto.protos.EventCategory)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <code>optional uint64 iid = 1;</code>
     * @return Whether the iid field is set.
     */
    boolean hasIid();
    /**
     * <code>optional uint64 iid = 1;</code>
     * @return The iid.
     */
    long getIid();

    /**
     * <code>optional string name = 2;</code>
     * @return Whether the name field is set.
     */
    boolean hasName();
    /**
     * <code>optional string name = 2;</code>
     * @return The name.
     */
    java.lang.String getName();
    /**
     * <code>optional string name = 2;</code>
     * @return The bytes for name.
     */
    com.google.protobuf.ByteString
        getNameBytes();
  }
  /**
   * Protobuf type {@code perfetto.protos.EventCategory}
   */
  public static final class EventCategory extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:perfetto.protos.EventCategory)
      EventCategoryOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use EventCategory.newBuilder() to construct.
    private EventCategory(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private EventCategory() {
      name_ = "";
    }

    @java.lang.Override
    @SuppressWarnings({"unused"})
    protected java.lang.Object newInstance(
        UnusedPrivateParameter unused) {
      return new EventCategory();
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return perfetto.protos.TrackEventOuterClass.internal_static_perfetto_protos_EventCategory_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return perfetto.protos.TrackEventOuterClass.internal_static_perfetto_protos_EventCategory_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              perfetto.protos.TrackEventOuterClass.EventCategory.class, perfetto.protos.TrackEventOuterClass.EventCategory.Builder.class);
    }

    private int bitField0_;
    public static final int IID_FIELD_NUMBER = 1;
    private long iid_ = 0L;
    /**
     * <code>optional uint64 iid = 1;</code>
     * @return Whether the iid field is set.
     */
    @java.lang.Override
    public boolean hasIid() {
      return ((bitField0_ & 0x00000001) != 0);
    }
    /**
     * <code>optional uint64 iid = 1;</code>
     * @return The iid.
     */
    @java.lang.Override
    public long getIid() {
      return iid_;
    }

    public static final int NAME_FIELD_NUMBER = 2;
    @SuppressWarnings("serial")
    private volatile java.lang.Object name_ = "";
    /**
     * <code>optional string name = 2;</code>
     * @return Whether the name field is set.
     */
    @java.lang.Override
    public boolean hasName() {
      return ((bitField0_ & 0x00000002) != 0);
    }
    /**
     * <code>optional string name = 2;</code>
     * @return The name.
     */
    @java.lang.Override
    public java.lang.String getName() {
      java.lang.Object ref = name_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        if (bs.isValidUtf8()) {
          name_ = s;
        }
        return s;
      }
    }
    /**
     * <code>optional string name = 2;</code>
     * @return The bytes for name.
     */
    @java.lang.Override
    public com.google.protobuf.ByteString
        getNameBytes() {
      java.lang.Object ref = name_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        name_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (((bitField0_ & 0x00000001) != 0)) {
        output.writeUInt64(1, iid_);
      }
      if (((bitField0_ & 0x00000002) != 0)) {
        com.google.protobuf.GeneratedMessageV3.writeString(output, 2, name_);
      }
      getUnknownFields().writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) != 0)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt64Size(1, iid_);
      }
      if (((bitField0_ & 0x00000002) != 0)) {
        size += com.google.protobuf.GeneratedMessageV3.computeStringSize(2, name_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof perfetto.protos.TrackEventOuterClass.EventCategory)) {
        return super.equals(obj);
      }
      perfetto.protos.TrackEventOuterClass.EventCategory other = (perfetto.protos.TrackEventOuterClass.EventCategory) obj;

      if (hasIid() != other.hasIid()) return false;
      if (hasIid()) {
        if (getIid()
            != other.getIid()) return false;
      }
      if (hasName() != other.hasName()) return false;
      if (hasName()) {
        if (!getName()
            .equals(other.getName())) return false;
      }
      if (!getUnknownFields().equals(other.getUnknownFields())) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      if (hasIid()) {
        hash = (37 * hash) + IID_FIELD_NUMBER;
        hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
            getIid());
      }
      if (hasName()) {
        hash = (37 * hash) + NAME_FIELD_NUMBER;
        hash = (53 * hash) + getName().hashCode();
      }
      hash = (29 * hash) + getUnknownFields().hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static perfetto.protos.TrackEventOuterClass.EventCategory parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static perfetto.protos.TrackEventOuterClass.EventCategory parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static perfetto.protos.TrackEventOuterClass.EventCategory parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static perfetto.protos.TrackEventOuterClass.EventCategory parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static perfetto.protos.TrackEventOuterClass.EventCategory parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static perfetto.protos.TrackEventOuterClass.EventCategory parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static perfetto.protos.TrackEventOuterClass.EventCategory parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static perfetto.protos.TrackEventOuterClass.EventCategory parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static perfetto.protos.TrackEventOuterClass.EventCategory parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static perfetto.protos.TrackEventOuterClass.EventCategory parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static perfetto.protos.TrackEventOuterClass.EventCategory parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static perfetto.protos.TrackEventOuterClass.EventCategory parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(perfetto.protos.TrackEventOuterClass.EventCategory prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code perfetto.protos.EventCategory}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:perfetto.protos.EventCategory)
        perfetto.protos.TrackEventOuterClass.EventCategoryOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return perfetto.protos.TrackEventOuterClass.internal_static_perfetto_protos_EventCategory_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return perfetto.protos.TrackEventOuterClass.internal_static_perfetto_protos_EventCategory_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                perfetto.protos.TrackEventOuterClass.EventCategory.class, perfetto.protos.TrackEventOuterClass.EventCategory.Builder.class);
      }

      // Construct using perfetto.protos.TrackEventOuterClass.EventCategory.newBuilder()
      private Builder() {

      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);

      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        bitField0_ = 0;
        iid_ = 0L;
        name_ = "";
        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return perfetto.protos.TrackEventOuterClass.internal_static_perfetto_protos_EventCategory_descriptor;
      }

      @java.lang.Override
      public perfetto.protos.TrackEventOuterClass.EventCategory getDefaultInstanceForType() {
        return perfetto.protos.TrackEventOuterClass.EventCategory.getDefaultInstance();
      }

      @java.lang.Override
      public perfetto.protos.TrackEventOuterClass.EventCategory build() {
        perfetto.protos.TrackEventOuterClass.EventCategory result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public perfetto.protos.TrackEventOuterClass.EventCategory buildPartial() {
        perfetto.protos.TrackEventOuterClass.EventCategory result = new perfetto.protos.TrackEventOuterClass.EventCategory(this);
        if (bitField0_ != 0) { buildPartial0(result); }
        onBuilt();
        return result;
      }

      private void buildPartial0(perfetto.protos.TrackEventOuterClass.EventCategory result) {
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) != 0)) {
          result.iid_ = iid_;
          to_bitField0_ |= 0x00000001;
        }
        if (((from_bitField0_ & 0x00000002) != 0)) {
          result.name_ = name_;
          to_bitField0_ |= 0x00000002;
        }
        result.bitField0_ |= to_bitField0_;
      }

      @java.lang.Override
      public Builder clone() {
        return super.clone();
      }
      @java.lang.Override
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.setField(field, value);
      }
      @java.lang.Override
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return super.clearField(field);
      }
      @java.lang.Override
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return super.clearOneof(oneof);
      }
      @java.lang.Override
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, java.lang.Object value) {
        return super.setRepeatedField(field, index, value);
      }
      @java.lang.Override
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.addRepeatedField(field, value);
      }
      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof perfetto.protos.TrackEventOuterClass.EventCategory) {
          return mergeFrom((perfetto.protos.TrackEventOuterClass.EventCategory)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(perfetto.protos.TrackEventOuterClass.EventCategory other) {
        if (other == perfetto.protos.TrackEventOuterClass.EventCategory.getDefaultInstance()) return this;
        if (other.hasIid()) {
          setIid(other.getIid());
        }
        if (other.hasName()) {
          name_ = other.name_;
          bitField0_ |= 0x00000002;
          onChanged();
        }
        this.mergeUnknownFields(other.getUnknownFields());
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        if (extensionRegistry == null) {
          throw new java.lang.NullPointerException();
        }
        try {
          boolean done = false;
          while (!done) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                done = true;
                break;
              case 8: {
                iid_ = input.readUInt64();
                bitField0_ |= 0x00000001;
                break;
              } // case 8
              case 18: {
                name_ = input.readBytes();
                bitField0_ |= 0x00000002;
                break;
              } // case 18
              default: {
                if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                  done = true; // was an endgroup tag
                }
                break;
              } // default:
            } // switch (tag)
          } // while (!done)
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.unwrapIOException();
        } finally {
          onChanged();
        } // finally
        return this;
      }
      private int bitField0_;

      private long iid_ ;
      /**
       * <code>optional uint64 iid = 1;</code>
       * @return Whether the iid field is set.
       */
      @java.lang.Override
      public boolean hasIid() {
        return ((bitField0_ & 0x00000001) != 0);
      }
      /**
       * <code>optional uint64 iid = 1;</code>
       * @return The iid.
       */
      @java.lang.Override
      public long getIid() {
        return iid_;
      }
      /**
       * <code>optional uint64 iid = 1;</code>
       * @param value The iid to set.
       * @return This builder for chaining.
       */
      public Builder setIid(long value) {
        
        iid_ = value;
        bitField0_ |= 0x00000001;
        onChanged();
        return this;
      }
      /**
       * <code>optional uint64 iid = 1;</code>
       * @return This builder for chaining.
       */
      public Builder clearIid() {
        bitField0_ = (bitField0_ & ~0x00000001);
        iid_ = 0L;
        onChanged();
        return this;
      }

      private java.lang.Object name_ = "";
      /**
       * <code>optional string name = 2;</code>
       * @return Whether the name field is set.
       */
      public boolean hasName() {
        return ((bitField0_ & 0x00000002) != 0);
      }
      /**
       * <code>optional string name = 2;</code>
       * @return The name.
       */
      public java.lang.String getName() {
        java.lang.Object ref = name_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          if (bs.isValidUtf8()) {
            name_ = s;
          }
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <code>optional string name = 2;</code>
       * @return The bytes for name.
       */
      public com.google.protobuf.ByteString
          getNameBytes() {
        java.lang.Object ref = name_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          name_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <code>optional string name = 2;</code>
       * @param value The name to set.
       * @return This builder for chaining.
       */
      public Builder setName(
          java.lang.String value) {
        if (value == null) { throw new NullPointerException(); }
        name_ = value;
        bitField0_ |= 0x00000002;
        onChanged();
        return this;
      }
      /**
       * <code>optional string name = 2;</code>
       * @return This builder for chaining.
       */
      public Builder clearName() {
        name_ = getDefaultInstance().getName();
        bitField0_ = (bitField0_ & ~0x00000002);
        onChanged();
        return this;
      }
      /**
       * <code>optional string name = 2;</code>
       * @param value The bytes for name to set.
       * @return This builder for chaining.
       */
      public Builder setNameBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) { throw new NullPointerException(); }
        name_ = value;
        bitField0_ |= 0x00000002;
        onChanged();
        return this;
      }
      @java.lang.Override
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      @java.lang.Override
      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:perfetto.protos.EventCategory)
    }

    // @@protoc_insertion_point(class_scope:perfetto.protos.EventCategory)
    private static final perfetto.protos.TrackEventOuterClass.EventCategory DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new perfetto.protos.TrackEventOuterClass.EventCategory();
    }

    public static perfetto.protos.TrackEventOuterClass.EventCategory getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    @java.lang.Deprecated public static final com.google.protobuf.Parser<EventCategory>
        PARSER = new com.google.protobuf.AbstractParser<EventCategory>() {
      @java.lang.Override
      public EventCategory parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        Builder builder = newBuilder();
        try {
          builder.mergeFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.setUnfinishedMessage(builder.buildPartial());
        } catch (com.google.protobuf.UninitializedMessageException e) {
          throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
        } catch (java.io.IOException e) {
          throw new com.google.protobuf.InvalidProtocolBufferException(e)
              .setUnfinishedMessage(builder.buildPartial());
        }
        return builder.buildPartial();
      }
    };

    public static com.google.protobuf.Parser<EventCategory> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<EventCategory> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public perfetto.protos.TrackEventOuterClass.EventCategory getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface EventNameOrBuilder extends
      // @@protoc_insertion_point(interface_extends:perfetto.protos.EventName)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <code>optional uint64 iid = 1;</code>
     * @return Whether the iid field is set.
     */
    boolean hasIid();
    /**
     * <code>optional uint64 iid = 1;</code>
     * @return The iid.
     */
    long getIid();

    /**
     * <code>optional string name = 2;</code>
     * @return Whether the name field is set.
     */
    boolean hasName();
    /**
     * <code>optional string name = 2;</code>
     * @return The name.
     */
    java.lang.String getName();
    /**
     * <code>optional string name = 2;</code>
     * @return The bytes for name.
     */
    com.google.protobuf.ByteString
        getNameBytes();
  }
  /**
   * Protobuf type {@code perfetto.protos.EventName}
   */
  public static final class EventName extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:perfetto.protos.EventName)
      EventNameOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use EventName.newBuilder() to construct.
    private EventName(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private EventName() {
      name_ = "";
    }

    @java.lang.Override
    @SuppressWarnings({"unused"})
    protected java.lang.Object newInstance(
        UnusedPrivateParameter unused) {
      return new EventName();
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return perfetto.protos.TrackEventOuterClass.internal_static_perfetto_protos_EventName_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return perfetto.protos.TrackEventOuterClass.internal_static_perfetto_protos_EventName_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              perfetto.protos.TrackEventOuterClass.EventName.class, perfetto.protos.TrackEventOuterClass.EventName.Builder.class);
    }

    private int bitField0_;
    public static final int IID_FIELD_NUMBER = 1;
    private long iid_ = 0L;
    /**
     * <code>optional uint64 iid = 1;</code>
     * @return Whether the iid field is set.
     */
    @java.lang.Override
    public boolean hasIid() {
      return ((bitField0_ & 0x00000001) != 0);
    }
    /**
     * <code>optional uint64 iid = 1;</code>
     * @return The iid.
     */
    @java.lang.Override
    public long getIid() {
      return iid_;
    }

    public static final int NAME_FIELD_NUMBER = 2;
    @SuppressWarnings("serial")
    private volatile java.lang.Object name_ = "";
    /**
     * <code>optional string name = 2;</code>
     * @return Whether the name field is set.
     */
    @java.lang.Override
    public boolean hasName() {
      return ((bitField0_ & 0x00000002) != 0);
    }
    /**
     * <code>optional string name = 2;</code>
     * @return The name.
     */
    @java.lang.Override
    public java.lang.String getName() {
      java.lang.Object ref = name_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        if (bs.isValidUtf8()) {
          name_ = s;
        }
        return s;
      }
    }
    /**
     * <code>optional string name = 2;</code>
     * @return The bytes for name.
     */
    @java.lang.Override
    public com.google.protobuf.ByteString
        getNameBytes() {
      java.lang.Object ref = name_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        name_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (((bitField0_ & 0x00000001) != 0)) {
        output.writeUInt64(1, iid_);
      }
      if (((bitField0_ & 0x00000002) != 0)) {
        com.google.protobuf.GeneratedMessageV3.writeString(output, 2, name_);
      }
      getUnknownFields().writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) != 0)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt64Size(1, iid_);
      }
      if (((bitField0_ & 0x00000002) != 0)) {
        size += com.google.protobuf.GeneratedMessageV3.computeStringSize(2, name_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof perfetto.protos.TrackEventOuterClass.EventName)) {
        return super.equals(obj);
      }
      perfetto.protos.TrackEventOuterClass.EventName other = (perfetto.protos.TrackEventOuterClass.EventName) obj;

      if (hasIid() != other.hasIid()) return false;
      if (hasIid()) {
        if (getIid()
            != other.getIid()) return false;
      }
      if (hasName() != other.hasName()) return false;
      if (hasName()) {
        if (!getName()
            .equals(other.getName())) return false;
      }
      if (!getUnknownFields().equals(other.getUnknownFields())) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      if (hasIid()) {
        hash = (37 * hash) + IID_FIELD_NUMBER;
        hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
            getIid());
      }
      if (hasName()) {
        hash = (37 * hash) + NAME_FIELD_NUMBER;
        hash = (53 * hash) + getName().hashCode();
      }
      hash = (29 * hash) + getUnknownFields().hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static perfetto.protos.TrackEventOuterClass.EventName parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static perfetto.protos.TrackEventOuterClass.EventName parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static perfetto.protos.TrackEventOuterClass.EventName parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static perfetto.protos.TrackEventOuterClass.EventName parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static perfetto.protos.TrackEventOuterClass.EventName parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static perfetto.protos.TrackEventOuterClass.EventName parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static perfetto.protos.TrackEventOuterClass.EventName parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static perfetto.protos.TrackEventOuterClass.EventName parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static perfetto.protos.TrackEventOuterClass.EventName parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static perfetto.protos.TrackEventOuterClass.EventName parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static perfetto.protos.TrackEventOuterClass.EventName parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static perfetto.protos.TrackEventOuterClass.EventName parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(perfetto.protos.TrackEventOuterClass.EventName prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code perfetto.protos.EventName}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:perfetto.protos.EventName)
        perfetto.protos.TrackEventOuterClass.EventNameOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return perfetto.protos.TrackEventOuterClass.internal_static_perfetto_protos_EventName_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return perfetto.protos.TrackEventOuterClass.internal_static_perfetto_protos_EventName_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                perfetto.protos.TrackEventOuterClass.EventName.class, perfetto.protos.TrackEventOuterClass.EventName.Builder.class);
      }

      // Construct using perfetto.protos.TrackEventOuterClass.EventName.newBuilder()
      private Builder() {

      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);

      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        bitField0_ = 0;
        iid_ = 0L;
        name_ = "";
        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return perfetto.protos.TrackEventOuterClass.internal_static_perfetto_protos_EventName_descriptor;
      }

      @java.lang.Override
      public perfetto.protos.TrackEventOuterClass.EventName getDefaultInstanceForType() {
        return perfetto.protos.TrackEventOuterClass.EventName.getDefaultInstance();
      }

      @java.lang.Override
      public perfetto.protos.TrackEventOuterClass.EventName build() {
        perfetto.protos.TrackEventOuterClass.EventName result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public perfetto.protos.TrackEventOuterClass.EventName buildPartial() {
        perfetto.protos.TrackEventOuterClass.EventName result = new perfetto.protos.TrackEventOuterClass.EventName(this);
        if (bitField0_ != 0) { buildPartial0(result); }
        onBuilt();
        return result;
      }

      private void buildPartial0(perfetto.protos.TrackEventOuterClass.EventName result) {
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) != 0)) {
          result.iid_ = iid_;
          to_bitField0_ |= 0x00000001;
        }
        if (((from_bitField0_ & 0x00000002) != 0)) {
          result.name_ = name_;
          to_bitField0_ |= 0x00000002;
        }
        result.bitField0_ |= to_bitField0_;
      }

      @java.lang.Override
      public Builder clone() {
        return super.clone();
      }
      @java.lang.Override
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.setField(field, value);
      }
      @java.lang.Override
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return super.clearField(field);
      }
      @java.lang.Override
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return super.clearOneof(oneof);
      }
      @java.lang.Override
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, java.lang.Object value) {
        return super.setRepeatedField(field, index, value);
      }
      @java.lang.Override
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.addRepeatedField(field, value);
      }
      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof perfetto.protos.TrackEventOuterClass.EventName) {
          return mergeFrom((perfetto.protos.TrackEventOuterClass.EventName)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(perfetto.protos.TrackEventOuterClass.EventName other) {
        if (other == perfetto.protos.TrackEventOuterClass.EventName.getDefaultInstance()) return this;
        if (other.hasIid()) {
          setIid(other.getIid());
        }
        if (other.hasName()) {
          name_ = other.name_;
          bitField0_ |= 0x00000002;
          onChanged();
        }
        this.mergeUnknownFields(other.getUnknownFields());
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        if (extensionRegistry == null) {
          throw new java.lang.NullPointerException();
        }
        try {
          boolean done = false;
          while (!done) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                done = true;
                break;
              case 8: {
                iid_ = input.readUInt64();
                bitField0_ |= 0x00000001;
                break;
              } // case 8
              case 18: {
                name_ = input.readBytes();
                bitField0_ |= 0x00000002;
                break;
              } // case 18
              default: {
                if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                  done = true; // was an endgroup tag
                }
                break;
              } // default:
            } // switch (tag)
          } // while (!done)
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.unwrapIOException();
        } finally {
          onChanged();
        } // finally
        return this;
      }
      private int bitField0_;

      private long iid_ ;
      /**
       * <code>optional uint64 iid = 1;</code>
       * @return Whether the iid field is set.
       */
      @java.lang.Override
      public boolean hasIid() {
        return ((bitField0_ & 0x00000001) != 0);
      }
      /**
       * <code>optional uint64 iid = 1;</code>
       * @return The iid.
       */
      @java.lang.Override
      public long getIid() {
        return iid_;
      }
      /**
       * <code>optional uint64 iid = 1;</code>
       * @param value The iid to set.
       * @return This builder for chaining.
       */
      public Builder setIid(long value) {
        
        iid_ = value;
        bitField0_ |= 0x00000001;
        onChanged();
        return this;
      }
      /**
       * <code>optional uint64 iid = 1;</code>
       * @return This builder for chaining.
       */
      public Builder clearIid() {
        bitField0_ = (bitField0_ & ~0x00000001);
        iid_ = 0L;
        onChanged();
        return this;
      }

      private java.lang.Object name_ = "";
      /**
       * <code>optional string name = 2;</code>
       * @return Whether the name field is set.
       */
      public boolean hasName() {
        return ((bitField0_ & 0x00000002) != 0);
      }
      /**
       * <code>optional string name = 2;</code>
       * @return The name.
       */
      public java.lang.String getName() {
        java.lang.Object ref = name_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          if (bs.isValidUtf8()) {
            name_ = s;
          }
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <code>optional string name = 2;</code>
       * @return The bytes for name.
       */
      public com.google.protobuf.ByteString
          getNameBytes() {
        java.lang.Object ref = name_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          name_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <code>optional string name = 2;</code>
       * @param value The name to set.
       * @return This builder for chaining.
       */
      public Builder setName(
          java.lang.String value) {
        if (value == null) { throw new NullPointerException(); }
        name_ = value;
        bitField0_ |= 0x00000002;
        onChanged();
        return this;
      }
      /**
       * <code>optional string name = 2;</code>
       * @return This builder for chaining.
       */
      public Builder clearName() {
        name_ = getDefaultInstance().getName();
        bitField0_ = (bitField0_ & ~0x00000002);
        onChanged();
        return this;
      }
      /**
       * <code>optional string name = 2;</code>
       * @param value The bytes for name to set.
       * @return This builder for chaining.
       */
      public Builder setNameBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) { throw new NullPointerException(); }
        name_ = value;
        bitField0_ |= 0x00000002;
        onChanged();
        return this;
      }
      @java.lang.Override
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      @java.lang.Override
      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:perfetto.protos.EventName)
    }

    // @@protoc_insertion_point(class_scope:perfetto.protos.EventName)
    private static final perfetto.protos.TrackEventOuterClass.EventName DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new perfetto.protos.TrackEventOuterClass.EventName();
    }

    public static perfetto.protos.TrackEventOuterClass.EventName getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    @java.lang.Deprecated public static final com.google.protobuf.Parser<EventName>
        PARSER = new com.google.protobuf.AbstractParser<EventName>() {
      @java.lang.Override
      public EventName parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        Builder builder = newBuilder();
        try {
          builder.mergeFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.setUnfinishedMessage(builder.buildPartial());
        } catch (com.google.protobuf.UninitializedMessageException e) {
          throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
        } catch (java.io.IOException e) {
          throw new com.google.protobuf.InvalidProtocolBufferException(e)
              .setUnfinishedMessage(builder.buildPartial());
        }
        return builder.buildPartial();
      }
    };

    public static com.google.protobuf.Parser<EventName> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<EventName> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public perfetto.protos.TrackEventOuterClass.EventName getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_perfetto_protos_TrackEvent_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_perfetto_protos_TrackEvent_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_perfetto_protos_TrackEvent_LegacyEvent_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_perfetto_protos_TrackEvent_LegacyEvent_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_perfetto_protos_TrackEventDefaults_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_perfetto_protos_TrackEventDefaults_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_perfetto_protos_EventCategory_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_perfetto_protos_EventCategory_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_perfetto_protos_EventName_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_perfetto_protos_EventName_fieldAccessorTable;

  public static com.google.protobuf.Descriptors.FileDescriptor
      getDescriptor() {
    return descriptor;
  }
  private static  com.google.protobuf.Descriptors.FileDescriptor
      descriptor;
  static {
    java.lang.String[] descriptorData = {
      "\n3protos/perfetto/trace/track_event/trac" +
      "k_event.proto\022\017perfetto.protos\0328protos/p" +
      "erfetto/trace/track_event/debug_annotati" +
      "on.proto\0323protos/perfetto/trace/track_ev" +
      "ent/log_message.proto\0326protos/perfetto/t" +
      "race/track_event/task_execution.proto\032?p" +
      "rotos/perfetto/trace/track_event/chrome_" +
      "active_processes.proto\032Eprotos/perfetto/" +
      "trace/track_event/chrome_application_sta" +
      "te_info.proto\032Iprotos/perfetto/trace/tra" +
      "ck_event/chrome_compositor_scheduler_sta" +
      "te.proto\032Jprotos/perfetto/trace/track_ev" +
      "ent/chrome_content_settings_event_info.p" +
      "roto\032=protos/perfetto/trace/track_event/" +
      "chrome_frame_reporter.proto\032?protos/perf" +
      "etto/trace/track_event/chrome_histogram_" +
      "sample.proto\032<protos/perfetto/trace/trac" +
      "k_event/chrome_keyed_service.proto\032;prot" +
      "os/perfetto/trace/track_event/chrome_lat" +
      "ency_info.proto\0329protos/perfetto/trace/t" +
      "rack_event/chrome_legacy_ipc.proto\032;prot" +
      "os/perfetto/trace/track_event/chrome_mes" +
      "sage_pump.proto\032>protos/perfetto/trace/t" +
      "rack_event/chrome_mojo_event_info.proto\032" +
      "Gprotos/perfetto/trace/track_event/chrom" +
      "e_renderer_scheduler_state.proto\0329protos" +
      "/perfetto/trace/track_event/chrome_user_" +
      "event.proto\032Gprotos/perfetto/trace/track" +
      "_event/chrome_window_handle_event_info.p" +
      "roto\0327protos/perfetto/trace/track_event/" +
      "source_location.proto\"\232\027\n\nTrackEvent\022\025\n\r" +
      "category_iids\030\003 \003(\004\022\022\n\ncategories\030\026 \003(\t\022" +
      "\022\n\010name_iid\030\n \001(\004H\000\022\016\n\004name\030\027 \001(\tH\000\022.\n\004t" +
      "ype\030\t \001(\0162 .perfetto.protos.TrackEvent.T" +
      "ype\022\022\n\ntrack_uuid\030\013 \001(\004\022\027\n\rcounter_value" +
      "\030\036 \001(\003H\001\022\036\n\024double_counter_value\030, \001(\001H\001" +
      "\022!\n\031extra_counter_track_uuids\030\037 \003(\004\022\034\n\024e" +
      "xtra_counter_values\030\014 \003(\003\022(\n extra_doubl" +
      "e_counter_track_uuids\030- \003(\004\022#\n\033extra_dou" +
      "ble_counter_values\030. \003(\001\022\030\n\014flow_ids_old" +
      "\030$ \003(\004B\002\030\001\022\020\n\010flow_ids\030/ \003(\006\022$\n\030terminat" +
      "ing_flow_ids_old\030* \003(\004B\002\030\001\022\034\n\024terminatin" +
      "g_flow_ids\0300 \003(\006\022;\n\021debug_annotations\030\004 " +
      "\003(\0132 .perfetto.protos.DebugAnnotation\0226\n" +
      "\016task_execution\030\005 \001(\0132\036.perfetto.protos." +
      "TaskExecution\0220\n\013log_message\030\025 \001(\0132\033.per" +
      "fetto.protos.LogMessage\022K\n\022cc_scheduler_" +
      "state\030\030 \001(\0132/.perfetto.protos.ChromeComp" +
      "ositorSchedulerState\022;\n\021chrome_user_even" +
      "t\030\031 \001(\0132 .perfetto.protos.ChromeUserEven" +
      "t\022A\n\024chrome_keyed_service\030\032 \001(\0132#.perfet" +
      "to.protos.ChromeKeyedService\022;\n\021chrome_l" +
      "egacy_ipc\030\033 \001(\0132 .perfetto.protos.Chrome" +
      "LegacyIpc\022G\n\027chrome_histogram_sample\030\034 \001" +
      "(\0132&.perfetto.protos.ChromeHistogramSamp" +
      "le\022?\n\023chrome_latency_info\030\035 \001(\0132\".perfet" +
      "to.protos.ChromeLatencyInfo\022C\n\025chrome_fr" +
      "ame_reporter\030  \001(\0132$.perfetto.protos.Chr" +
      "omeFrameReporter\022R\n\035chrome_application_s" +
      "tate_info\030\' \001(\0132+.perfetto.protos.Chrome" +
      "ApplicationStateInfo\022V\n\037chrome_renderer_" +
      "scheduler_state\030( \001(\0132-.perfetto.protos." +
      "ChromeRendererSchedulerState\022U\n\037chrome_w" +
      "indow_handle_event_info\030) \001(\0132,.perfetto" +
      ".protos.ChromeWindowHandleEventInfo\022[\n\"c" +
      "hrome_content_settings_event_info\030+ \001(\0132" +
      "/.perfetto.protos.ChromeContentSettingsE" +
      "ventInfo\022G\n\027chrome_active_processes\0301 \001(" +
      "\0132&.perfetto.protos.ChromeActiveProcesse" +
      "s\022:\n\017source_location\030! \001(\0132\037.perfetto.pr" +
      "otos.SourceLocationH\002\022\035\n\023source_location" +
      "_iid\030\" \001(\004H\002\022?\n\023chrome_message_pump\030# \001(" +
      "\0132\".perfetto.protos.ChromeMessagePump\022D\n" +
      "\026chrome_mojo_event_info\030& \001(\0132$.perfetto" +
      ".protos.ChromeMojoEventInfo\022\034\n\022timestamp" +
      "_delta_us\030\001 \001(\003H\003\022\037\n\025timestamp_absolute_" +
      "us\030\020 \001(\003H\003\022\036\n\024thread_time_delta_us\030\002 \001(\003" +
      "H\004\022!\n\027thread_time_absolute_us\030\021 \001(\003H\004\022(\n" +
      "\036thread_instruction_count_delta\030\010 \001(\003H\005\022" +
      "+\n!thread_instruction_count_absolute\030\024 \001" +
      "(\003H\005\022=\n\014legacy_event\030\006 \001(\0132\'.perfetto.pr" +
      "otos.TrackEvent.LegacyEvent\032\252\005\n\013LegacyEv" +
      "ent\022\020\n\010name_iid\030\001 \001(\004\022\r\n\005phase\030\002 \001(\005\022\023\n\013" +
      "duration_us\030\003 \001(\003\022\032\n\022thread_duration_us\030" +
      "\004 \001(\003\022 \n\030thread_instruction_delta\030\017 \001(\003\022" +
      "\025\n\013unscoped_id\030\006 \001(\004H\000\022\022\n\010local_id\030\n \001(\004" +
      "H\000\022\023\n\tglobal_id\030\013 \001(\004H\000\022\020\n\010id_scope\030\007 \001(" +
      "\t\022\025\n\ruse_async_tts\030\t \001(\010\022\017\n\007bind_id\030\010 \001(" +
      "\004\022\031\n\021bind_to_enclosing\030\014 \001(\010\022M\n\016flow_dir" +
      "ection\030\r \001(\01625.perfetto.protos.TrackEven" +
      "t.LegacyEvent.FlowDirection\022V\n\023instant_e" +
      "vent_scope\030\016 \001(\01629.perfetto.protos.Track" +
      "Event.LegacyEvent.InstantEventScope\022\024\n\014p" +
      "id_override\030\022 \001(\005\022\024\n\014tid_override\030\023 \001(\005\"" +
      "P\n\rFlowDirection\022\024\n\020FLOW_UNSPECIFIED\020\000\022\013" +
      "\n\007FLOW_IN\020\001\022\014\n\010FLOW_OUT\020\002\022\016\n\nFLOW_INOUT\020" +
      "\003\"a\n\021InstantEventScope\022\025\n\021SCOPE_UNSPECIF" +
      "IED\020\000\022\020\n\014SCOPE_GLOBAL\020\001\022\021\n\rSCOPE_PROCESS" +
      "\020\002\022\020\n\014SCOPE_THREAD\020\003B\004\n\002idJ\004\010\005\020\006\"j\n\004Type" +
      "\022\024\n\020TYPE_UNSPECIFIED\020\000\022\024\n\020TYPE_SLICE_BEG" +
      "IN\020\001\022\022\n\016TYPE_SLICE_END\020\002\022\020\n\014TYPE_INSTANT" +
      "\020\003\022\020\n\014TYPE_COUNTER\020\004*\006\010\350\007\020\254M*\006\010\254M\020\221NB\014\n\n" +
      "name_fieldB\025\n\023counter_value_fieldB\027\n\025sou" +
      "rce_location_fieldB\013\n\ttimestampB\r\n\013threa" +
      "d_timeB\032\n\030thread_instruction_count\"u\n\022Tr" +
      "ackEventDefaults\022\022\n\ntrack_uuid\030\013 \001(\004\022!\n\031" +
      "extra_counter_track_uuids\030\037 \003(\004\022(\n extra" +
      "_double_counter_track_uuids\030- \003(\004\"*\n\rEve" +
      "ntCategory\022\013\n\003iid\030\001 \001(\004\022\014\n\004name\030\002 \001(\t\"&\n" +
      "\tEventName\022\013\n\003iid\030\001 \001(\004\022\014\n\004name\030\002 \001(\t"
    };
    descriptor = com.google.protobuf.Descriptors.FileDescriptor
      .internalBuildGeneratedFileFrom(descriptorData,
        new com.google.protobuf.Descriptors.FileDescriptor[] {
          perfetto.protos.DebugAnnotationOuterClass.getDescriptor(),
          perfetto.protos.LogMessageOuterClass.getDescriptor(),
          perfetto.protos.TaskExecutionOuterClass.getDescriptor(),
          perfetto.protos.ChromeActiveProcessesOuterClass.getDescriptor(),
          perfetto.protos.ChromeApplicationStateInfoOuterClass.getDescriptor(),
          perfetto.protos.ChromeCompositorSchedulerStateOuterClass.getDescriptor(),
          perfetto.protos.ChromeContentSettingsEventInfoOuterClass.getDescriptor(),
          perfetto.protos.ChromeFrameReporterOuterClass.getDescriptor(),
          perfetto.protos.ChromeHistogramSampleOuterClass.getDescriptor(),
          perfetto.protos.ChromeKeyedServiceOuterClass.getDescriptor(),
          perfetto.protos.ChromeLatencyInfoOuterClass.getDescriptor(),
          perfetto.protos.ChromeLegacyIpcOuterClass.getDescriptor(),
          perfetto.protos.ChromeMessagePumpOuterClass.getDescriptor(),
          perfetto.protos.ChromeMojoEventInfoOuterClass.getDescriptor(),
          perfetto.protos.ChromeRendererSchedulerStateOuterClass.getDescriptor(),
          perfetto.protos.ChromeUserEventOuterClass.getDescriptor(),
          perfetto.protos.ChromeWindowHandleEventInfoOuterClass.getDescriptor(),
          perfetto.protos.SourceLocationOuterClass.getDescriptor(),
        });
    internal_static_perfetto_protos_TrackEvent_descriptor =
      getDescriptor().getMessageTypes().get(0);
    internal_static_perfetto_protos_TrackEvent_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_perfetto_protos_TrackEvent_descriptor,
        new java.lang.String[] { "CategoryIids", "Categories", "NameIid", "Name", "Type", "TrackUuid", "CounterValue", "DoubleCounterValue", "ExtraCounterTrackUuids", "ExtraCounterValues", "ExtraDoubleCounterTrackUuids", "ExtraDoubleCounterValues", "FlowIdsOld", "FlowIds", "TerminatingFlowIdsOld", "TerminatingFlowIds", "DebugAnnotations", "TaskExecution", "LogMessage", "CcSchedulerState", "ChromeUserEvent", "ChromeKeyedService", "ChromeLegacyIpc", "ChromeHistogramSample", "ChromeLatencyInfo", "ChromeFrameReporter", "ChromeApplicationStateInfo", "ChromeRendererSchedulerState", "ChromeWindowHandleEventInfo", "ChromeContentSettingsEventInfo", "ChromeActiveProcesses", "SourceLocation", "SourceLocationIid", "ChromeMessagePump", "ChromeMojoEventInfo", "TimestampDeltaUs", "TimestampAbsoluteUs", "ThreadTimeDeltaUs", "ThreadTimeAbsoluteUs", "ThreadInstructionCountDelta", "ThreadInstructionCountAbsolute", "LegacyEvent", "NameField", "CounterValueField", "SourceLocationField", "Timestamp", "ThreadTime", "ThreadInstructionCount", });
    internal_static_perfetto_protos_TrackEvent_LegacyEvent_descriptor =
      internal_static_perfetto_protos_TrackEvent_descriptor.getNestedTypes().get(0);
    internal_static_perfetto_protos_TrackEvent_LegacyEvent_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_perfetto_protos_TrackEvent_LegacyEvent_descriptor,
        new java.lang.String[] { "NameIid", "Phase", "DurationUs", "ThreadDurationUs", "ThreadInstructionDelta", "UnscopedId", "LocalId", "GlobalId", "IdScope", "UseAsyncTts", "BindId", "BindToEnclosing", "FlowDirection", "InstantEventScope", "PidOverride", "TidOverride", "Id", });
    internal_static_perfetto_protos_TrackEventDefaults_descriptor =
      getDescriptor().getMessageTypes().get(1);
    internal_static_perfetto_protos_TrackEventDefaults_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_perfetto_protos_TrackEventDefaults_descriptor,
        new java.lang.String[] { "TrackUuid", "ExtraCounterTrackUuids", "ExtraDoubleCounterTrackUuids", });
    internal_static_perfetto_protos_EventCategory_descriptor =
      getDescriptor().getMessageTypes().get(2);
    internal_static_perfetto_protos_EventCategory_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_perfetto_protos_EventCategory_descriptor,
        new java.lang.String[] { "Iid", "Name", });
    internal_static_perfetto_protos_EventName_descriptor =
      getDescriptor().getMessageTypes().get(3);
    internal_static_perfetto_protos_EventName_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_perfetto_protos_EventName_descriptor,
        new java.lang.String[] { "Iid", "Name", });
    perfetto.protos.DebugAnnotationOuterClass.getDescriptor();
    perfetto.protos.LogMessageOuterClass.getDescriptor();
    perfetto.protos.TaskExecutionOuterClass.getDescriptor();
    perfetto.protos.ChromeActiveProcessesOuterClass.getDescriptor();
    perfetto.protos.ChromeApplicationStateInfoOuterClass.getDescriptor();
    perfetto.protos.ChromeCompositorSchedulerStateOuterClass.getDescriptor();
    perfetto.protos.ChromeContentSettingsEventInfoOuterClass.getDescriptor();
    perfetto.protos.ChromeFrameReporterOuterClass.getDescriptor();
    perfetto.protos.ChromeHistogramSampleOuterClass.getDescriptor();
    perfetto.protos.ChromeKeyedServiceOuterClass.getDescriptor();
    perfetto.protos.ChromeLatencyInfoOuterClass.getDescriptor();
    perfetto.protos.ChromeLegacyIpcOuterClass.getDescriptor();
    perfetto.protos.ChromeMessagePumpOuterClass.getDescriptor();
    perfetto.protos.ChromeMojoEventInfoOuterClass.getDescriptor();
    perfetto.protos.ChromeRendererSchedulerStateOuterClass.getDescriptor();
    perfetto.protos.ChromeUserEventOuterClass.getDescriptor();
    perfetto.protos.ChromeWindowHandleEventInfoOuterClass.getDescriptor();
    perfetto.protos.SourceLocationOuterClass.getDescriptor();
  }

  // @@protoc_insertion_point(outer_class_scope)
}
