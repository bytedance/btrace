// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: protos/perfetto/trace/ui_state.proto

package perfetto.protos;

public final class UiStateOuterClass {
  private UiStateOuterClass() {}
  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistryLite registry) {
  }

  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistry registry) {
    registerAllExtensions(
        (com.google.protobuf.ExtensionRegistryLite) registry);
  }
  public interface UiStateOrBuilder extends
      // @@protoc_insertion_point(interface_extends:perfetto.protos.UiState)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <pre>
     * The start and end bounds of the viewport of the UI in nanoseconds.
     * This is the absolute time associated to slices and other events in
     * trace processor tables (i.e. the |ts| column of most tables)
     * </pre>
     *
     * <code>optional int64 timeline_start_ts = 1;</code>
     * @return Whether the timelineStartTs field is set.
     */
    boolean hasTimelineStartTs();
    /**
     * <pre>
     * The start and end bounds of the viewport of the UI in nanoseconds.
     * This is the absolute time associated to slices and other events in
     * trace processor tables (i.e. the |ts| column of most tables)
     * </pre>
     *
     * <code>optional int64 timeline_start_ts = 1;</code>
     * @return The timelineStartTs.
     */
    long getTimelineStartTs();

    /**
     * <code>optional int64 timeline_end_ts = 2;</code>
     * @return Whether the timelineEndTs field is set.
     */
    boolean hasTimelineEndTs();
    /**
     * <code>optional int64 timeline_end_ts = 2;</code>
     * @return The timelineEndTs.
     */
    long getTimelineEndTs();

    /**
     * <code>optional .perfetto.protos.UiState.HighlightProcess highlight_process = 3;</code>
     * @return Whether the highlightProcess field is set.
     */
    boolean hasHighlightProcess();
    /**
     * <code>optional .perfetto.protos.UiState.HighlightProcess highlight_process = 3;</code>
     * @return The highlightProcess.
     */
    perfetto.protos.UiStateOuterClass.UiState.HighlightProcess getHighlightProcess();
    /**
     * <code>optional .perfetto.protos.UiState.HighlightProcess highlight_process = 3;</code>
     */
    perfetto.protos.UiStateOuterClass.UiState.HighlightProcessOrBuilder getHighlightProcessOrBuilder();
  }
  /**
   * <pre>
   * Common state for UIs visualizing Perfetto traces.
   * This message can be appended as a TracePacket by UIs to save the
   * visible state (e.g. scroll position/zoom state) for future opening
   * of the trace.
   * Design doc: go/trace-ui-state.
   * </pre>
   *
   * Protobuf type {@code perfetto.protos.UiState}
   */
  public static final class UiState extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:perfetto.protos.UiState)
      UiStateOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use UiState.newBuilder() to construct.
    private UiState(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private UiState() {
    }

    @java.lang.Override
    @SuppressWarnings({"unused"})
    protected java.lang.Object newInstance(
        UnusedPrivateParameter unused) {
      return new UiState();
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return perfetto.protos.UiStateOuterClass.internal_static_perfetto_protos_UiState_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return perfetto.protos.UiStateOuterClass.internal_static_perfetto_protos_UiState_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              perfetto.protos.UiStateOuterClass.UiState.class, perfetto.protos.UiStateOuterClass.UiState.Builder.class);
    }

    public interface HighlightProcessOrBuilder extends
        // @@protoc_insertion_point(interface_extends:perfetto.protos.UiState.HighlightProcess)
        com.google.protobuf.MessageOrBuilder {

      /**
       * <pre>
       * The pid of the process to highlight. This is useful for UIs to focus
       * on tracks of a particular process in the trace.
       * If more than one process in a trace has the same pid, it is UI
       * implementation specific how the process to be focused will be
       * chosen.
       * </pre>
       *
       * <code>uint32 pid = 1;</code>
       * @return Whether the pid field is set.
       */
      boolean hasPid();
      /**
       * <pre>
       * The pid of the process to highlight. This is useful for UIs to focus
       * on tracks of a particular process in the trace.
       * If more than one process in a trace has the same pid, it is UI
       * implementation specific how the process to be focused will be
       * chosen.
       * </pre>
       *
       * <code>uint32 pid = 1;</code>
       * @return The pid.
       */
      int getPid();

      /**
       * <pre>
       * The command line of the process to highlight; for most Android apps,
       * this is the package name of the app. This is useful for UIs to focus
       * on a particular app in the trace.
       * If more than one process hasthe same cmdline, it is UI implementation
       * specific how the process to be focused will be chosen.
       * </pre>
       *
       * <code>string cmdline = 2;</code>
       * @return Whether the cmdline field is set.
       */
      boolean hasCmdline();
      /**
       * <pre>
       * The command line of the process to highlight; for most Android apps,
       * this is the package name of the app. This is useful for UIs to focus
       * on a particular app in the trace.
       * If more than one process hasthe same cmdline, it is UI implementation
       * specific how the process to be focused will be chosen.
       * </pre>
       *
       * <code>string cmdline = 2;</code>
       * @return The cmdline.
       */
      java.lang.String getCmdline();
      /**
       * <pre>
       * The command line of the process to highlight; for most Android apps,
       * this is the package name of the app. This is useful for UIs to focus
       * on a particular app in the trace.
       * If more than one process hasthe same cmdline, it is UI implementation
       * specific how the process to be focused will be chosen.
       * </pre>
       *
       * <code>string cmdline = 2;</code>
       * @return The bytes for cmdline.
       */
      com.google.protobuf.ByteString
          getCmdlineBytes();

      public perfetto.protos.UiStateOuterClass.UiState.HighlightProcess.SelectorCase getSelectorCase();
    }
    /**
     * <pre>
     * Indicates that the given process should be highlighted by the UI.
     * </pre>
     *
     * Protobuf type {@code perfetto.protos.UiState.HighlightProcess}
     */
    public static final class HighlightProcess extends
        com.google.protobuf.GeneratedMessageV3 implements
        // @@protoc_insertion_point(message_implements:perfetto.protos.UiState.HighlightProcess)
        HighlightProcessOrBuilder {
    private static final long serialVersionUID = 0L;
      // Use HighlightProcess.newBuilder() to construct.
      private HighlightProcess(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
        super(builder);
      }
      private HighlightProcess() {
      }

      @java.lang.Override
      @SuppressWarnings({"unused"})
      protected java.lang.Object newInstance(
          UnusedPrivateParameter unused) {
        return new HighlightProcess();
      }

      @java.lang.Override
      public final com.google.protobuf.UnknownFieldSet
      getUnknownFields() {
        return this.unknownFields;
      }
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return perfetto.protos.UiStateOuterClass.internal_static_perfetto_protos_UiState_HighlightProcess_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return perfetto.protos.UiStateOuterClass.internal_static_perfetto_protos_UiState_HighlightProcess_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                perfetto.protos.UiStateOuterClass.UiState.HighlightProcess.class, perfetto.protos.UiStateOuterClass.UiState.HighlightProcess.Builder.class);
      }

      private int bitField0_;
      private int selectorCase_ = 0;
      private java.lang.Object selector_;
      public enum SelectorCase
          implements com.google.protobuf.Internal.EnumLite,
              com.google.protobuf.AbstractMessage.InternalOneOfEnum {
        PID(1),
        CMDLINE(2),
        SELECTOR_NOT_SET(0);
        private final int value;
        private SelectorCase(int value) {
          this.value = value;
        }
        /**
         * @param value The number of the enum to look for.
         * @return The enum associated with the given number.
         * @deprecated Use {@link #forNumber(int)} instead.
         */
        @java.lang.Deprecated
        public static SelectorCase valueOf(int value) {
          return forNumber(value);
        }

        public static SelectorCase forNumber(int value) {
          switch (value) {
            case 1: return PID;
            case 2: return CMDLINE;
            case 0: return SELECTOR_NOT_SET;
            default: return null;
          }
        }
        public int getNumber() {
          return this.value;
        }
      };

      public SelectorCase
      getSelectorCase() {
        return SelectorCase.forNumber(
            selectorCase_);
      }

      public static final int PID_FIELD_NUMBER = 1;
      /**
       * <pre>
       * The pid of the process to highlight. This is useful for UIs to focus
       * on tracks of a particular process in the trace.
       * If more than one process in a trace has the same pid, it is UI
       * implementation specific how the process to be focused will be
       * chosen.
       * </pre>
       *
       * <code>uint32 pid = 1;</code>
       * @return Whether the pid field is set.
       */
      @java.lang.Override
      public boolean hasPid() {
        return selectorCase_ == 1;
      }
      /**
       * <pre>
       * The pid of the process to highlight. This is useful for UIs to focus
       * on tracks of a particular process in the trace.
       * If more than one process in a trace has the same pid, it is UI
       * implementation specific how the process to be focused will be
       * chosen.
       * </pre>
       *
       * <code>uint32 pid = 1;</code>
       * @return The pid.
       */
      @java.lang.Override
      public int getPid() {
        if (selectorCase_ == 1) {
          return (java.lang.Integer) selector_;
        }
        return 0;
      }

      public static final int CMDLINE_FIELD_NUMBER = 2;
      /**
       * <pre>
       * The command line of the process to highlight; for most Android apps,
       * this is the package name of the app. This is useful for UIs to focus
       * on a particular app in the trace.
       * If more than one process hasthe same cmdline, it is UI implementation
       * specific how the process to be focused will be chosen.
       * </pre>
       *
       * <code>string cmdline = 2;</code>
       * @return Whether the cmdline field is set.
       */
      public boolean hasCmdline() {
        return selectorCase_ == 2;
      }
      /**
       * <pre>
       * The command line of the process to highlight; for most Android apps,
       * this is the package name of the app. This is useful for UIs to focus
       * on a particular app in the trace.
       * If more than one process hasthe same cmdline, it is UI implementation
       * specific how the process to be focused will be chosen.
       * </pre>
       *
       * <code>string cmdline = 2;</code>
       * @return The cmdline.
       */
      public java.lang.String getCmdline() {
        java.lang.Object ref = "";
        if (selectorCase_ == 2) {
          ref = selector_;
        }
        if (ref instanceof java.lang.String) {
          return (java.lang.String) ref;
        } else {
          com.google.protobuf.ByteString bs = 
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          if (bs.isValidUtf8() && (selectorCase_ == 2)) {
            selector_ = s;
          }
          return s;
        }
      }
      /**
       * <pre>
       * The command line of the process to highlight; for most Android apps,
       * this is the package name of the app. This is useful for UIs to focus
       * on a particular app in the trace.
       * If more than one process hasthe same cmdline, it is UI implementation
       * specific how the process to be focused will be chosen.
       * </pre>
       *
       * <code>string cmdline = 2;</code>
       * @return The bytes for cmdline.
       */
      public com.google.protobuf.ByteString
          getCmdlineBytes() {
        java.lang.Object ref = "";
        if (selectorCase_ == 2) {
          ref = selector_;
        }
        if (ref instanceof java.lang.String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          if (selectorCase_ == 2) {
            selector_ = b;
          }
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }

      private byte memoizedIsInitialized = -1;
      @java.lang.Override
      public final boolean isInitialized() {
        byte isInitialized = memoizedIsInitialized;
        if (isInitialized == 1) return true;
        if (isInitialized == 0) return false;

        memoizedIsInitialized = 1;
        return true;
      }

      @java.lang.Override
      public void writeTo(com.google.protobuf.CodedOutputStream output)
                          throws java.io.IOException {
        if (selectorCase_ == 1) {
          output.writeUInt32(
              1, (int)((java.lang.Integer) selector_));
        }
        if (selectorCase_ == 2) {
          com.google.protobuf.GeneratedMessageV3.writeString(output, 2, selector_);
        }
        getUnknownFields().writeTo(output);
      }

      @java.lang.Override
      public int getSerializedSize() {
        int size = memoizedSize;
        if (size != -1) return size;

        size = 0;
        if (selectorCase_ == 1) {
          size += com.google.protobuf.CodedOutputStream
            .computeUInt32Size(
                1, (int)((java.lang.Integer) selector_));
        }
        if (selectorCase_ == 2) {
          size += com.google.protobuf.GeneratedMessageV3.computeStringSize(2, selector_);
        }
        size += getUnknownFields().getSerializedSize();
        memoizedSize = size;
        return size;
      }

      @java.lang.Override
      public boolean equals(final java.lang.Object obj) {
        if (obj == this) {
         return true;
        }
        if (!(obj instanceof perfetto.protos.UiStateOuterClass.UiState.HighlightProcess)) {
          return super.equals(obj);
        }
        perfetto.protos.UiStateOuterClass.UiState.HighlightProcess other = (perfetto.protos.UiStateOuterClass.UiState.HighlightProcess) obj;

        if (!getSelectorCase().equals(other.getSelectorCase())) return false;
        switch (selectorCase_) {
          case 1:
            if (getPid()
                != other.getPid()) return false;
            break;
          case 2:
            if (!getCmdline()
                .equals(other.getCmdline())) return false;
            break;
          case 0:
          default:
        }
        if (!getUnknownFields().equals(other.getUnknownFields())) return false;
        return true;
      }

      @java.lang.Override
      public int hashCode() {
        if (memoizedHashCode != 0) {
          return memoizedHashCode;
        }
        int hash = 41;
        hash = (19 * hash) + getDescriptor().hashCode();
        switch (selectorCase_) {
          case 1:
            hash = (37 * hash) + PID_FIELD_NUMBER;
            hash = (53 * hash) + getPid();
            break;
          case 2:
            hash = (37 * hash) + CMDLINE_FIELD_NUMBER;
            hash = (53 * hash) + getCmdline().hashCode();
            break;
          case 0:
          default:
        }
        hash = (29 * hash) + getUnknownFields().hashCode();
        memoizedHashCode = hash;
        return hash;
      }

      public static perfetto.protos.UiStateOuterClass.UiState.HighlightProcess parseFrom(
          java.nio.ByteBuffer data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static perfetto.protos.UiStateOuterClass.UiState.HighlightProcess parseFrom(
          java.nio.ByteBuffer data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static perfetto.protos.UiStateOuterClass.UiState.HighlightProcess parseFrom(
          com.google.protobuf.ByteString data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static perfetto.protos.UiStateOuterClass.UiState.HighlightProcess parseFrom(
          com.google.protobuf.ByteString data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static perfetto.protos.UiStateOuterClass.UiState.HighlightProcess parseFrom(byte[] data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static perfetto.protos.UiStateOuterClass.UiState.HighlightProcess parseFrom(
          byte[] data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static perfetto.protos.UiStateOuterClass.UiState.HighlightProcess parseFrom(java.io.InputStream input)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseWithIOException(PARSER, input);
      }
      public static perfetto.protos.UiStateOuterClass.UiState.HighlightProcess parseFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseWithIOException(PARSER, input, extensionRegistry);
      }
      public static perfetto.protos.UiStateOuterClass.UiState.HighlightProcess parseDelimitedFrom(java.io.InputStream input)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseDelimitedWithIOException(PARSER, input);
      }
      public static perfetto.protos.UiStateOuterClass.UiState.HighlightProcess parseDelimitedFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
      }
      public static perfetto.protos.UiStateOuterClass.UiState.HighlightProcess parseFrom(
          com.google.protobuf.CodedInputStream input)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseWithIOException(PARSER, input);
      }
      public static perfetto.protos.UiStateOuterClass.UiState.HighlightProcess parseFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseWithIOException(PARSER, input, extensionRegistry);
      }

      @java.lang.Override
      public Builder newBuilderForType() { return newBuilder(); }
      public static Builder newBuilder() {
        return DEFAULT_INSTANCE.toBuilder();
      }
      public static Builder newBuilder(perfetto.protos.UiStateOuterClass.UiState.HighlightProcess prototype) {
        return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
      }
      @java.lang.Override
      public Builder toBuilder() {
        return this == DEFAULT_INSTANCE
            ? new Builder() : new Builder().mergeFrom(this);
      }

      @java.lang.Override
      protected Builder newBuilderForType(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        Builder builder = new Builder(parent);
        return builder;
      }
      /**
       * <pre>
       * Indicates that the given process should be highlighted by the UI.
       * </pre>
       *
       * Protobuf type {@code perfetto.protos.UiState.HighlightProcess}
       */
      public static final class Builder extends
          com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
          // @@protoc_insertion_point(builder_implements:perfetto.protos.UiState.HighlightProcess)
          perfetto.protos.UiStateOuterClass.UiState.HighlightProcessOrBuilder {
        public static final com.google.protobuf.Descriptors.Descriptor
            getDescriptor() {
          return perfetto.protos.UiStateOuterClass.internal_static_perfetto_protos_UiState_HighlightProcess_descriptor;
        }

        @java.lang.Override
        protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
            internalGetFieldAccessorTable() {
          return perfetto.protos.UiStateOuterClass.internal_static_perfetto_protos_UiState_HighlightProcess_fieldAccessorTable
              .ensureFieldAccessorsInitialized(
                  perfetto.protos.UiStateOuterClass.UiState.HighlightProcess.class, perfetto.protos.UiStateOuterClass.UiState.HighlightProcess.Builder.class);
        }

        // Construct using perfetto.protos.UiStateOuterClass.UiState.HighlightProcess.newBuilder()
        private Builder() {

        }

        private Builder(
            com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
          super(parent);

        }
        @java.lang.Override
        public Builder clear() {
          super.clear();
          bitField0_ = 0;
          selectorCase_ = 0;
          selector_ = null;
          return this;
        }

        @java.lang.Override
        public com.google.protobuf.Descriptors.Descriptor
            getDescriptorForType() {
          return perfetto.protos.UiStateOuterClass.internal_static_perfetto_protos_UiState_HighlightProcess_descriptor;
        }

        @java.lang.Override
        public perfetto.protos.UiStateOuterClass.UiState.HighlightProcess getDefaultInstanceForType() {
          return perfetto.protos.UiStateOuterClass.UiState.HighlightProcess.getDefaultInstance();
        }

        @java.lang.Override
        public perfetto.protos.UiStateOuterClass.UiState.HighlightProcess build() {
          perfetto.protos.UiStateOuterClass.UiState.HighlightProcess result = buildPartial();
          if (!result.isInitialized()) {
            throw newUninitializedMessageException(result);
          }
          return result;
        }

        @java.lang.Override
        public perfetto.protos.UiStateOuterClass.UiState.HighlightProcess buildPartial() {
          perfetto.protos.UiStateOuterClass.UiState.HighlightProcess result = new perfetto.protos.UiStateOuterClass.UiState.HighlightProcess(this);
          if (bitField0_ != 0) { buildPartial0(result); }
          buildPartialOneofs(result);
          onBuilt();
          return result;
        }

        private void buildPartial0(perfetto.protos.UiStateOuterClass.UiState.HighlightProcess result) {
          int from_bitField0_ = bitField0_;
        }

        private void buildPartialOneofs(perfetto.protos.UiStateOuterClass.UiState.HighlightProcess result) {
          result.selectorCase_ = selectorCase_;
          result.selector_ = this.selector_;
        }

        @java.lang.Override
        public Builder clone() {
          return super.clone();
        }
        @java.lang.Override
        public Builder setField(
            com.google.protobuf.Descriptors.FieldDescriptor field,
            java.lang.Object value) {
          return super.setField(field, value);
        }
        @java.lang.Override
        public Builder clearField(
            com.google.protobuf.Descriptors.FieldDescriptor field) {
          return super.clearField(field);
        }
        @java.lang.Override
        public Builder clearOneof(
            com.google.protobuf.Descriptors.OneofDescriptor oneof) {
          return super.clearOneof(oneof);
        }
        @java.lang.Override
        public Builder setRepeatedField(
            com.google.protobuf.Descriptors.FieldDescriptor field,
            int index, java.lang.Object value) {
          return super.setRepeatedField(field, index, value);
        }
        @java.lang.Override
        public Builder addRepeatedField(
            com.google.protobuf.Descriptors.FieldDescriptor field,
            java.lang.Object value) {
          return super.addRepeatedField(field, value);
        }
        @java.lang.Override
        public Builder mergeFrom(com.google.protobuf.Message other) {
          if (other instanceof perfetto.protos.UiStateOuterClass.UiState.HighlightProcess) {
            return mergeFrom((perfetto.protos.UiStateOuterClass.UiState.HighlightProcess)other);
          } else {
            super.mergeFrom(other);
            return this;
          }
        }

        public Builder mergeFrom(perfetto.protos.UiStateOuterClass.UiState.HighlightProcess other) {
          if (other == perfetto.protos.UiStateOuterClass.UiState.HighlightProcess.getDefaultInstance()) return this;
          switch (other.getSelectorCase()) {
            case PID: {
              setPid(other.getPid());
              break;
            }
            case CMDLINE: {
              selectorCase_ = 2;
              selector_ = other.selector_;
              onChanged();
              break;
            }
            case SELECTOR_NOT_SET: {
              break;
            }
          }
          this.mergeUnknownFields(other.getUnknownFields());
          onChanged();
          return this;
        }

        @java.lang.Override
        public final boolean isInitialized() {
          return true;
        }

        @java.lang.Override
        public Builder mergeFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws java.io.IOException {
          if (extensionRegistry == null) {
            throw new java.lang.NullPointerException();
          }
          try {
            boolean done = false;
            while (!done) {
              int tag = input.readTag();
              switch (tag) {
                case 0:
                  done = true;
                  break;
                case 8: {
                  selector_ = input.readUInt32();
                  selectorCase_ = 1;
                  break;
                } // case 8
                case 18: {
                  com.google.protobuf.ByteString bs = input.readBytes();
                  selectorCase_ = 2;
                  selector_ = bs;
                  break;
                } // case 18
                default: {
                  if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                    done = true; // was an endgroup tag
                  }
                  break;
                } // default:
              } // switch (tag)
            } // while (!done)
          } catch (com.google.protobuf.InvalidProtocolBufferException e) {
            throw e.unwrapIOException();
          } finally {
            onChanged();
          } // finally
          return this;
        }
        private int selectorCase_ = 0;
        private java.lang.Object selector_;
        public SelectorCase
            getSelectorCase() {
          return SelectorCase.forNumber(
              selectorCase_);
        }

        public Builder clearSelector() {
          selectorCase_ = 0;
          selector_ = null;
          onChanged();
          return this;
        }

        private int bitField0_;

        /**
         * <pre>
         * The pid of the process to highlight. This is useful for UIs to focus
         * on tracks of a particular process in the trace.
         * If more than one process in a trace has the same pid, it is UI
         * implementation specific how the process to be focused will be
         * chosen.
         * </pre>
         *
         * <code>uint32 pid = 1;</code>
         * @return Whether the pid field is set.
         */
        public boolean hasPid() {
          return selectorCase_ == 1;
        }
        /**
         * <pre>
         * The pid of the process to highlight. This is useful for UIs to focus
         * on tracks of a particular process in the trace.
         * If more than one process in a trace has the same pid, it is UI
         * implementation specific how the process to be focused will be
         * chosen.
         * </pre>
         *
         * <code>uint32 pid = 1;</code>
         * @return The pid.
         */
        public int getPid() {
          if (selectorCase_ == 1) {
            return (java.lang.Integer) selector_;
          }
          return 0;
        }
        /**
         * <pre>
         * The pid of the process to highlight. This is useful for UIs to focus
         * on tracks of a particular process in the trace.
         * If more than one process in a trace has the same pid, it is UI
         * implementation specific how the process to be focused will be
         * chosen.
         * </pre>
         *
         * <code>uint32 pid = 1;</code>
         * @param value The pid to set.
         * @return This builder for chaining.
         */
        public Builder setPid(int value) {
          
          selectorCase_ = 1;
          selector_ = value;
          onChanged();
          return this;
        }
        /**
         * <pre>
         * The pid of the process to highlight. This is useful for UIs to focus
         * on tracks of a particular process in the trace.
         * If more than one process in a trace has the same pid, it is UI
         * implementation specific how the process to be focused will be
         * chosen.
         * </pre>
         *
         * <code>uint32 pid = 1;</code>
         * @return This builder for chaining.
         */
        public Builder clearPid() {
          if (selectorCase_ == 1) {
            selectorCase_ = 0;
            selector_ = null;
            onChanged();
          }
          return this;
        }

        /**
         * <pre>
         * The command line of the process to highlight; for most Android apps,
         * this is the package name of the app. This is useful for UIs to focus
         * on a particular app in the trace.
         * If more than one process hasthe same cmdline, it is UI implementation
         * specific how the process to be focused will be chosen.
         * </pre>
         *
         * <code>string cmdline = 2;</code>
         * @return Whether the cmdline field is set.
         */
        @java.lang.Override
        public boolean hasCmdline() {
          return selectorCase_ == 2;
        }
        /**
         * <pre>
         * The command line of the process to highlight; for most Android apps,
         * this is the package name of the app. This is useful for UIs to focus
         * on a particular app in the trace.
         * If more than one process hasthe same cmdline, it is UI implementation
         * specific how the process to be focused will be chosen.
         * </pre>
         *
         * <code>string cmdline = 2;</code>
         * @return The cmdline.
         */
        @java.lang.Override
        public java.lang.String getCmdline() {
          java.lang.Object ref = "";
          if (selectorCase_ == 2) {
            ref = selector_;
          }
          if (!(ref instanceof java.lang.String)) {
            com.google.protobuf.ByteString bs =
                (com.google.protobuf.ByteString) ref;
            java.lang.String s = bs.toStringUtf8();
            if (selectorCase_ == 2) {
              if (bs.isValidUtf8()) {
                selector_ = s;
              }
            }
            return s;
          } else {
            return (java.lang.String) ref;
          }
        }
        /**
         * <pre>
         * The command line of the process to highlight; for most Android apps,
         * this is the package name of the app. This is useful for UIs to focus
         * on a particular app in the trace.
         * If more than one process hasthe same cmdline, it is UI implementation
         * specific how the process to be focused will be chosen.
         * </pre>
         *
         * <code>string cmdline = 2;</code>
         * @return The bytes for cmdline.
         */
        @java.lang.Override
        public com.google.protobuf.ByteString
            getCmdlineBytes() {
          java.lang.Object ref = "";
          if (selectorCase_ == 2) {
            ref = selector_;
          }
          if (ref instanceof String) {
            com.google.protobuf.ByteString b = 
                com.google.protobuf.ByteString.copyFromUtf8(
                    (java.lang.String) ref);
            if (selectorCase_ == 2) {
              selector_ = b;
            }
            return b;
          } else {
            return (com.google.protobuf.ByteString) ref;
          }
        }
        /**
         * <pre>
         * The command line of the process to highlight; for most Android apps,
         * this is the package name of the app. This is useful for UIs to focus
         * on a particular app in the trace.
         * If more than one process hasthe same cmdline, it is UI implementation
         * specific how the process to be focused will be chosen.
         * </pre>
         *
         * <code>string cmdline = 2;</code>
         * @param value The cmdline to set.
         * @return This builder for chaining.
         */
        public Builder setCmdline(
            java.lang.String value) {
          if (value == null) { throw new NullPointerException(); }
          selectorCase_ = 2;
          selector_ = value;
          onChanged();
          return this;
        }
        /**
         * <pre>
         * The command line of the process to highlight; for most Android apps,
         * this is the package name of the app. This is useful for UIs to focus
         * on a particular app in the trace.
         * If more than one process hasthe same cmdline, it is UI implementation
         * specific how the process to be focused will be chosen.
         * </pre>
         *
         * <code>string cmdline = 2;</code>
         * @return This builder for chaining.
         */
        public Builder clearCmdline() {
          if (selectorCase_ == 2) {
            selectorCase_ = 0;
            selector_ = null;
            onChanged();
          }
          return this;
        }
        /**
         * <pre>
         * The command line of the process to highlight; for most Android apps,
         * this is the package name of the app. This is useful for UIs to focus
         * on a particular app in the trace.
         * If more than one process hasthe same cmdline, it is UI implementation
         * specific how the process to be focused will be chosen.
         * </pre>
         *
         * <code>string cmdline = 2;</code>
         * @param value The bytes for cmdline to set.
         * @return This builder for chaining.
         */
        public Builder setCmdlineBytes(
            com.google.protobuf.ByteString value) {
          if (value == null) { throw new NullPointerException(); }
          selectorCase_ = 2;
          selector_ = value;
          onChanged();
          return this;
        }
        @java.lang.Override
        public final Builder setUnknownFields(
            final com.google.protobuf.UnknownFieldSet unknownFields) {
          return super.setUnknownFields(unknownFields);
        }

        @java.lang.Override
        public final Builder mergeUnknownFields(
            final com.google.protobuf.UnknownFieldSet unknownFields) {
          return super.mergeUnknownFields(unknownFields);
        }


        // @@protoc_insertion_point(builder_scope:perfetto.protos.UiState.HighlightProcess)
      }

      // @@protoc_insertion_point(class_scope:perfetto.protos.UiState.HighlightProcess)
      private static final perfetto.protos.UiStateOuterClass.UiState.HighlightProcess DEFAULT_INSTANCE;
      static {
        DEFAULT_INSTANCE = new perfetto.protos.UiStateOuterClass.UiState.HighlightProcess();
      }

      public static perfetto.protos.UiStateOuterClass.UiState.HighlightProcess getDefaultInstance() {
        return DEFAULT_INSTANCE;
      }

      @java.lang.Deprecated public static final com.google.protobuf.Parser<HighlightProcess>
          PARSER = new com.google.protobuf.AbstractParser<HighlightProcess>() {
        @java.lang.Override
        public HighlightProcess parsePartialFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws com.google.protobuf.InvalidProtocolBufferException {
          Builder builder = newBuilder();
          try {
            builder.mergeFrom(input, extensionRegistry);
          } catch (com.google.protobuf.InvalidProtocolBufferException e) {
            throw e.setUnfinishedMessage(builder.buildPartial());
          } catch (com.google.protobuf.UninitializedMessageException e) {
            throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
          } catch (java.io.IOException e) {
            throw new com.google.protobuf.InvalidProtocolBufferException(e)
                .setUnfinishedMessage(builder.buildPartial());
          }
          return builder.buildPartial();
        }
      };

      public static com.google.protobuf.Parser<HighlightProcess> parser() {
        return PARSER;
      }

      @java.lang.Override
      public com.google.protobuf.Parser<HighlightProcess> getParserForType() {
        return PARSER;
      }

      @java.lang.Override
      public perfetto.protos.UiStateOuterClass.UiState.HighlightProcess getDefaultInstanceForType() {
        return DEFAULT_INSTANCE;
      }

    }

    private int bitField0_;
    public static final int TIMELINE_START_TS_FIELD_NUMBER = 1;
    private long timelineStartTs_ = 0L;
    /**
     * <pre>
     * The start and end bounds of the viewport of the UI in nanoseconds.
     * This is the absolute time associated to slices and other events in
     * trace processor tables (i.e. the |ts| column of most tables)
     * </pre>
     *
     * <code>optional int64 timeline_start_ts = 1;</code>
     * @return Whether the timelineStartTs field is set.
     */
    @java.lang.Override
    public boolean hasTimelineStartTs() {
      return ((bitField0_ & 0x00000001) != 0);
    }
    /**
     * <pre>
     * The start and end bounds of the viewport of the UI in nanoseconds.
     * This is the absolute time associated to slices and other events in
     * trace processor tables (i.e. the |ts| column of most tables)
     * </pre>
     *
     * <code>optional int64 timeline_start_ts = 1;</code>
     * @return The timelineStartTs.
     */
    @java.lang.Override
    public long getTimelineStartTs() {
      return timelineStartTs_;
    }

    public static final int TIMELINE_END_TS_FIELD_NUMBER = 2;
    private long timelineEndTs_ = 0L;
    /**
     * <code>optional int64 timeline_end_ts = 2;</code>
     * @return Whether the timelineEndTs field is set.
     */
    @java.lang.Override
    public boolean hasTimelineEndTs() {
      return ((bitField0_ & 0x00000002) != 0);
    }
    /**
     * <code>optional int64 timeline_end_ts = 2;</code>
     * @return The timelineEndTs.
     */
    @java.lang.Override
    public long getTimelineEndTs() {
      return timelineEndTs_;
    }

    public static final int HIGHLIGHT_PROCESS_FIELD_NUMBER = 3;
    private perfetto.protos.UiStateOuterClass.UiState.HighlightProcess highlightProcess_;
    /**
     * <code>optional .perfetto.protos.UiState.HighlightProcess highlight_process = 3;</code>
     * @return Whether the highlightProcess field is set.
     */
    @java.lang.Override
    public boolean hasHighlightProcess() {
      return ((bitField0_ & 0x00000004) != 0);
    }
    /**
     * <code>optional .perfetto.protos.UiState.HighlightProcess highlight_process = 3;</code>
     * @return The highlightProcess.
     */
    @java.lang.Override
    public perfetto.protos.UiStateOuterClass.UiState.HighlightProcess getHighlightProcess() {
      return highlightProcess_ == null ? perfetto.protos.UiStateOuterClass.UiState.HighlightProcess.getDefaultInstance() : highlightProcess_;
    }
    /**
     * <code>optional .perfetto.protos.UiState.HighlightProcess highlight_process = 3;</code>
     */
    @java.lang.Override
    public perfetto.protos.UiStateOuterClass.UiState.HighlightProcessOrBuilder getHighlightProcessOrBuilder() {
      return highlightProcess_ == null ? perfetto.protos.UiStateOuterClass.UiState.HighlightProcess.getDefaultInstance() : highlightProcess_;
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (((bitField0_ & 0x00000001) != 0)) {
        output.writeInt64(1, timelineStartTs_);
      }
      if (((bitField0_ & 0x00000002) != 0)) {
        output.writeInt64(2, timelineEndTs_);
      }
      if (((bitField0_ & 0x00000004) != 0)) {
        output.writeMessage(3, getHighlightProcess());
      }
      getUnknownFields().writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) != 0)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt64Size(1, timelineStartTs_);
      }
      if (((bitField0_ & 0x00000002) != 0)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt64Size(2, timelineEndTs_);
      }
      if (((bitField0_ & 0x00000004) != 0)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(3, getHighlightProcess());
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof perfetto.protos.UiStateOuterClass.UiState)) {
        return super.equals(obj);
      }
      perfetto.protos.UiStateOuterClass.UiState other = (perfetto.protos.UiStateOuterClass.UiState) obj;

      if (hasTimelineStartTs() != other.hasTimelineStartTs()) return false;
      if (hasTimelineStartTs()) {
        if (getTimelineStartTs()
            != other.getTimelineStartTs()) return false;
      }
      if (hasTimelineEndTs() != other.hasTimelineEndTs()) return false;
      if (hasTimelineEndTs()) {
        if (getTimelineEndTs()
            != other.getTimelineEndTs()) return false;
      }
      if (hasHighlightProcess() != other.hasHighlightProcess()) return false;
      if (hasHighlightProcess()) {
        if (!getHighlightProcess()
            .equals(other.getHighlightProcess())) return false;
      }
      if (!getUnknownFields().equals(other.getUnknownFields())) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      if (hasTimelineStartTs()) {
        hash = (37 * hash) + TIMELINE_START_TS_FIELD_NUMBER;
        hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
            getTimelineStartTs());
      }
      if (hasTimelineEndTs()) {
        hash = (37 * hash) + TIMELINE_END_TS_FIELD_NUMBER;
        hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
            getTimelineEndTs());
      }
      if (hasHighlightProcess()) {
        hash = (37 * hash) + HIGHLIGHT_PROCESS_FIELD_NUMBER;
        hash = (53 * hash) + getHighlightProcess().hashCode();
      }
      hash = (29 * hash) + getUnknownFields().hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static perfetto.protos.UiStateOuterClass.UiState parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static perfetto.protos.UiStateOuterClass.UiState parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static perfetto.protos.UiStateOuterClass.UiState parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static perfetto.protos.UiStateOuterClass.UiState parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static perfetto.protos.UiStateOuterClass.UiState parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static perfetto.protos.UiStateOuterClass.UiState parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static perfetto.protos.UiStateOuterClass.UiState parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static perfetto.protos.UiStateOuterClass.UiState parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static perfetto.protos.UiStateOuterClass.UiState parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static perfetto.protos.UiStateOuterClass.UiState parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static perfetto.protos.UiStateOuterClass.UiState parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static perfetto.protos.UiStateOuterClass.UiState parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(perfetto.protos.UiStateOuterClass.UiState prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * <pre>
     * Common state for UIs visualizing Perfetto traces.
     * This message can be appended as a TracePacket by UIs to save the
     * visible state (e.g. scroll position/zoom state) for future opening
     * of the trace.
     * Design doc: go/trace-ui-state.
     * </pre>
     *
     * Protobuf type {@code perfetto.protos.UiState}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:perfetto.protos.UiState)
        perfetto.protos.UiStateOuterClass.UiStateOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return perfetto.protos.UiStateOuterClass.internal_static_perfetto_protos_UiState_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return perfetto.protos.UiStateOuterClass.internal_static_perfetto_protos_UiState_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                perfetto.protos.UiStateOuterClass.UiState.class, perfetto.protos.UiStateOuterClass.UiState.Builder.class);
      }

      // Construct using perfetto.protos.UiStateOuterClass.UiState.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
          getHighlightProcessFieldBuilder();
        }
      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        bitField0_ = 0;
        timelineStartTs_ = 0L;
        timelineEndTs_ = 0L;
        highlightProcess_ = null;
        if (highlightProcessBuilder_ != null) {
          highlightProcessBuilder_.dispose();
          highlightProcessBuilder_ = null;
        }
        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return perfetto.protos.UiStateOuterClass.internal_static_perfetto_protos_UiState_descriptor;
      }

      @java.lang.Override
      public perfetto.protos.UiStateOuterClass.UiState getDefaultInstanceForType() {
        return perfetto.protos.UiStateOuterClass.UiState.getDefaultInstance();
      }

      @java.lang.Override
      public perfetto.protos.UiStateOuterClass.UiState build() {
        perfetto.protos.UiStateOuterClass.UiState result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public perfetto.protos.UiStateOuterClass.UiState buildPartial() {
        perfetto.protos.UiStateOuterClass.UiState result = new perfetto.protos.UiStateOuterClass.UiState(this);
        if (bitField0_ != 0) { buildPartial0(result); }
        onBuilt();
        return result;
      }

      private void buildPartial0(perfetto.protos.UiStateOuterClass.UiState result) {
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) != 0)) {
          result.timelineStartTs_ = timelineStartTs_;
          to_bitField0_ |= 0x00000001;
        }
        if (((from_bitField0_ & 0x00000002) != 0)) {
          result.timelineEndTs_ = timelineEndTs_;
          to_bitField0_ |= 0x00000002;
        }
        if (((from_bitField0_ & 0x00000004) != 0)) {
          result.highlightProcess_ = highlightProcessBuilder_ == null
              ? highlightProcess_
              : highlightProcessBuilder_.build();
          to_bitField0_ |= 0x00000004;
        }
        result.bitField0_ |= to_bitField0_;
      }

      @java.lang.Override
      public Builder clone() {
        return super.clone();
      }
      @java.lang.Override
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.setField(field, value);
      }
      @java.lang.Override
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return super.clearField(field);
      }
      @java.lang.Override
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return super.clearOneof(oneof);
      }
      @java.lang.Override
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, java.lang.Object value) {
        return super.setRepeatedField(field, index, value);
      }
      @java.lang.Override
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.addRepeatedField(field, value);
      }
      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof perfetto.protos.UiStateOuterClass.UiState) {
          return mergeFrom((perfetto.protos.UiStateOuterClass.UiState)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(perfetto.protos.UiStateOuterClass.UiState other) {
        if (other == perfetto.protos.UiStateOuterClass.UiState.getDefaultInstance()) return this;
        if (other.hasTimelineStartTs()) {
          setTimelineStartTs(other.getTimelineStartTs());
        }
        if (other.hasTimelineEndTs()) {
          setTimelineEndTs(other.getTimelineEndTs());
        }
        if (other.hasHighlightProcess()) {
          mergeHighlightProcess(other.getHighlightProcess());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        if (extensionRegistry == null) {
          throw new java.lang.NullPointerException();
        }
        try {
          boolean done = false;
          while (!done) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                done = true;
                break;
              case 8: {
                timelineStartTs_ = input.readInt64();
                bitField0_ |= 0x00000001;
                break;
              } // case 8
              case 16: {
                timelineEndTs_ = input.readInt64();
                bitField0_ |= 0x00000002;
                break;
              } // case 16
              case 26: {
                input.readMessage(
                    getHighlightProcessFieldBuilder().getBuilder(),
                    extensionRegistry);
                bitField0_ |= 0x00000004;
                break;
              } // case 26
              default: {
                if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                  done = true; // was an endgroup tag
                }
                break;
              } // default:
            } // switch (tag)
          } // while (!done)
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.unwrapIOException();
        } finally {
          onChanged();
        } // finally
        return this;
      }
      private int bitField0_;

      private long timelineStartTs_ ;
      /**
       * <pre>
       * The start and end bounds of the viewport of the UI in nanoseconds.
       * This is the absolute time associated to slices and other events in
       * trace processor tables (i.e. the |ts| column of most tables)
       * </pre>
       *
       * <code>optional int64 timeline_start_ts = 1;</code>
       * @return Whether the timelineStartTs field is set.
       */
      @java.lang.Override
      public boolean hasTimelineStartTs() {
        return ((bitField0_ & 0x00000001) != 0);
      }
      /**
       * <pre>
       * The start and end bounds of the viewport of the UI in nanoseconds.
       * This is the absolute time associated to slices and other events in
       * trace processor tables (i.e. the |ts| column of most tables)
       * </pre>
       *
       * <code>optional int64 timeline_start_ts = 1;</code>
       * @return The timelineStartTs.
       */
      @java.lang.Override
      public long getTimelineStartTs() {
        return timelineStartTs_;
      }
      /**
       * <pre>
       * The start and end bounds of the viewport of the UI in nanoseconds.
       * This is the absolute time associated to slices and other events in
       * trace processor tables (i.e. the |ts| column of most tables)
       * </pre>
       *
       * <code>optional int64 timeline_start_ts = 1;</code>
       * @param value The timelineStartTs to set.
       * @return This builder for chaining.
       */
      public Builder setTimelineStartTs(long value) {
        
        timelineStartTs_ = value;
        bitField0_ |= 0x00000001;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * The start and end bounds of the viewport of the UI in nanoseconds.
       * This is the absolute time associated to slices and other events in
       * trace processor tables (i.e. the |ts| column of most tables)
       * </pre>
       *
       * <code>optional int64 timeline_start_ts = 1;</code>
       * @return This builder for chaining.
       */
      public Builder clearTimelineStartTs() {
        bitField0_ = (bitField0_ & ~0x00000001);
        timelineStartTs_ = 0L;
        onChanged();
        return this;
      }

      private long timelineEndTs_ ;
      /**
       * <code>optional int64 timeline_end_ts = 2;</code>
       * @return Whether the timelineEndTs field is set.
       */
      @java.lang.Override
      public boolean hasTimelineEndTs() {
        return ((bitField0_ & 0x00000002) != 0);
      }
      /**
       * <code>optional int64 timeline_end_ts = 2;</code>
       * @return The timelineEndTs.
       */
      @java.lang.Override
      public long getTimelineEndTs() {
        return timelineEndTs_;
      }
      /**
       * <code>optional int64 timeline_end_ts = 2;</code>
       * @param value The timelineEndTs to set.
       * @return This builder for chaining.
       */
      public Builder setTimelineEndTs(long value) {
        
        timelineEndTs_ = value;
        bitField0_ |= 0x00000002;
        onChanged();
        return this;
      }
      /**
       * <code>optional int64 timeline_end_ts = 2;</code>
       * @return This builder for chaining.
       */
      public Builder clearTimelineEndTs() {
        bitField0_ = (bitField0_ & ~0x00000002);
        timelineEndTs_ = 0L;
        onChanged();
        return this;
      }

      private perfetto.protos.UiStateOuterClass.UiState.HighlightProcess highlightProcess_;
      private com.google.protobuf.SingleFieldBuilderV3<
          perfetto.protos.UiStateOuterClass.UiState.HighlightProcess, perfetto.protos.UiStateOuterClass.UiState.HighlightProcess.Builder, perfetto.protos.UiStateOuterClass.UiState.HighlightProcessOrBuilder> highlightProcessBuilder_;
      /**
       * <code>optional .perfetto.protos.UiState.HighlightProcess highlight_process = 3;</code>
       * @return Whether the highlightProcess field is set.
       */
      public boolean hasHighlightProcess() {
        return ((bitField0_ & 0x00000004) != 0);
      }
      /**
       * <code>optional .perfetto.protos.UiState.HighlightProcess highlight_process = 3;</code>
       * @return The highlightProcess.
       */
      public perfetto.protos.UiStateOuterClass.UiState.HighlightProcess getHighlightProcess() {
        if (highlightProcessBuilder_ == null) {
          return highlightProcess_ == null ? perfetto.protos.UiStateOuterClass.UiState.HighlightProcess.getDefaultInstance() : highlightProcess_;
        } else {
          return highlightProcessBuilder_.getMessage();
        }
      }
      /**
       * <code>optional .perfetto.protos.UiState.HighlightProcess highlight_process = 3;</code>
       */
      public Builder setHighlightProcess(perfetto.protos.UiStateOuterClass.UiState.HighlightProcess value) {
        if (highlightProcessBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          highlightProcess_ = value;
        } else {
          highlightProcessBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000004;
        onChanged();
        return this;
      }
      /**
       * <code>optional .perfetto.protos.UiState.HighlightProcess highlight_process = 3;</code>
       */
      public Builder setHighlightProcess(
          perfetto.protos.UiStateOuterClass.UiState.HighlightProcess.Builder builderForValue) {
        if (highlightProcessBuilder_ == null) {
          highlightProcess_ = builderForValue.build();
        } else {
          highlightProcessBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000004;
        onChanged();
        return this;
      }
      /**
       * <code>optional .perfetto.protos.UiState.HighlightProcess highlight_process = 3;</code>
       */
      public Builder mergeHighlightProcess(perfetto.protos.UiStateOuterClass.UiState.HighlightProcess value) {
        if (highlightProcessBuilder_ == null) {
          if (((bitField0_ & 0x00000004) != 0) &&
            highlightProcess_ != null &&
            highlightProcess_ != perfetto.protos.UiStateOuterClass.UiState.HighlightProcess.getDefaultInstance()) {
            getHighlightProcessBuilder().mergeFrom(value);
          } else {
            highlightProcess_ = value;
          }
        } else {
          highlightProcessBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00000004;
        onChanged();
        return this;
      }
      /**
       * <code>optional .perfetto.protos.UiState.HighlightProcess highlight_process = 3;</code>
       */
      public Builder clearHighlightProcess() {
        bitField0_ = (bitField0_ & ~0x00000004);
        highlightProcess_ = null;
        if (highlightProcessBuilder_ != null) {
          highlightProcessBuilder_.dispose();
          highlightProcessBuilder_ = null;
        }
        onChanged();
        return this;
      }
      /**
       * <code>optional .perfetto.protos.UiState.HighlightProcess highlight_process = 3;</code>
       */
      public perfetto.protos.UiStateOuterClass.UiState.HighlightProcess.Builder getHighlightProcessBuilder() {
        bitField0_ |= 0x00000004;
        onChanged();
        return getHighlightProcessFieldBuilder().getBuilder();
      }
      /**
       * <code>optional .perfetto.protos.UiState.HighlightProcess highlight_process = 3;</code>
       */
      public perfetto.protos.UiStateOuterClass.UiState.HighlightProcessOrBuilder getHighlightProcessOrBuilder() {
        if (highlightProcessBuilder_ != null) {
          return highlightProcessBuilder_.getMessageOrBuilder();
        } else {
          return highlightProcess_ == null ?
              perfetto.protos.UiStateOuterClass.UiState.HighlightProcess.getDefaultInstance() : highlightProcess_;
        }
      }
      /**
       * <code>optional .perfetto.protos.UiState.HighlightProcess highlight_process = 3;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          perfetto.protos.UiStateOuterClass.UiState.HighlightProcess, perfetto.protos.UiStateOuterClass.UiState.HighlightProcess.Builder, perfetto.protos.UiStateOuterClass.UiState.HighlightProcessOrBuilder> 
          getHighlightProcessFieldBuilder() {
        if (highlightProcessBuilder_ == null) {
          highlightProcessBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              perfetto.protos.UiStateOuterClass.UiState.HighlightProcess, perfetto.protos.UiStateOuterClass.UiState.HighlightProcess.Builder, perfetto.protos.UiStateOuterClass.UiState.HighlightProcessOrBuilder>(
                  getHighlightProcess(),
                  getParentForChildren(),
                  isClean());
          highlightProcess_ = null;
        }
        return highlightProcessBuilder_;
      }
      @java.lang.Override
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      @java.lang.Override
      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:perfetto.protos.UiState)
    }

    // @@protoc_insertion_point(class_scope:perfetto.protos.UiState)
    private static final perfetto.protos.UiStateOuterClass.UiState DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new perfetto.protos.UiStateOuterClass.UiState();
    }

    public static perfetto.protos.UiStateOuterClass.UiState getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    @java.lang.Deprecated public static final com.google.protobuf.Parser<UiState>
        PARSER = new com.google.protobuf.AbstractParser<UiState>() {
      @java.lang.Override
      public UiState parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        Builder builder = newBuilder();
        try {
          builder.mergeFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.setUnfinishedMessage(builder.buildPartial());
        } catch (com.google.protobuf.UninitializedMessageException e) {
          throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
        } catch (java.io.IOException e) {
          throw new com.google.protobuf.InvalidProtocolBufferException(e)
              .setUnfinishedMessage(builder.buildPartial());
        }
        return builder.buildPartial();
      }
    };

    public static com.google.protobuf.Parser<UiState> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<UiState> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public perfetto.protos.UiStateOuterClass.UiState getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_perfetto_protos_UiState_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_perfetto_protos_UiState_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_perfetto_protos_UiState_HighlightProcess_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_perfetto_protos_UiState_HighlightProcess_fieldAccessorTable;

  public static com.google.protobuf.Descriptors.FileDescriptor
      getDescriptor() {
    return descriptor;
  }
  private static  com.google.protobuf.Descriptors.FileDescriptor
      descriptor;
  static {
    java.lang.String[] descriptorData = {
      "\n$protos/perfetto/trace/ui_state.proto\022\017" +
      "perfetto.protos\"\305\001\n\007UiState\022\031\n\021timeline_" +
      "start_ts\030\001 \001(\003\022\027\n\017timeline_end_ts\030\002 \001(\003\022" +
      "D\n\021highlight_process\030\003 \001(\0132).perfetto.pr" +
      "otos.UiState.HighlightProcess\032@\n\020Highlig" +
      "htProcess\022\r\n\003pid\030\001 \001(\rH\000\022\021\n\007cmdline\030\002 \001(" +
      "\tH\000B\n\n\010selector"
    };
    descriptor = com.google.protobuf.Descriptors.FileDescriptor
      .internalBuildGeneratedFileFrom(descriptorData,
        new com.google.protobuf.Descriptors.FileDescriptor[] {
        });
    internal_static_perfetto_protos_UiState_descriptor =
      getDescriptor().getMessageTypes().get(0);
    internal_static_perfetto_protos_UiState_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_perfetto_protos_UiState_descriptor,
        new java.lang.String[] { "TimelineStartTs", "TimelineEndTs", "HighlightProcess", });
    internal_static_perfetto_protos_UiState_HighlightProcess_descriptor =
      internal_static_perfetto_protos_UiState_descriptor.getNestedTypes().get(0);
    internal_static_perfetto_protos_UiState_HighlightProcess_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_perfetto_protos_UiState_HighlightProcess_descriptor,
        new java.lang.String[] { "Pid", "Cmdline", "Selector", });
  }

  // @@protoc_insertion_point(outer_class_scope)
}
