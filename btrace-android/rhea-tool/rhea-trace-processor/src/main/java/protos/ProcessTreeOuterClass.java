// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: protos/perfetto/trace/ps/process_tree.proto

package perfetto.protos;

public final class ProcessTreeOuterClass {
  private ProcessTreeOuterClass() {}
  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistryLite registry) {
  }

  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistry registry) {
    registerAllExtensions(
        (com.google.protobuf.ExtensionRegistryLite) registry);
  }
  public interface ProcessTreeOrBuilder extends
      // @@protoc_insertion_point(interface_extends:perfetto.protos.ProcessTree)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <pre>
     * List of processes and threads in the client. These lists are incremental
     * and not exhaustive. A process and its threads might show up separately in
     * different ProcessTree messages. A thread might event not show up at all, if
     * no sched_switch activity was detected, for instance:
     * #0 { processes: [{pid: 10, ...}], threads: [{pid: 11, tgid: 10}] }
     * #1 { threads: [{pid: 12, tgid: 10}] }
     * #2 { processes: [{pid: 20, ...}], threads: [{pid: 13, tgid: 10}] }
     * </pre>
     *
     * <code>repeated .perfetto.protos.ProcessTree.Process processes = 1;</code>
     */
    java.util.List<perfetto.protos.ProcessTreeOuterClass.ProcessTree.Process> 
        getProcessesList();
    /**
     * <pre>
     * List of processes and threads in the client. These lists are incremental
     * and not exhaustive. A process and its threads might show up separately in
     * different ProcessTree messages. A thread might event not show up at all, if
     * no sched_switch activity was detected, for instance:
     * #0 { processes: [{pid: 10, ...}], threads: [{pid: 11, tgid: 10}] }
     * #1 { threads: [{pid: 12, tgid: 10}] }
     * #2 { processes: [{pid: 20, ...}], threads: [{pid: 13, tgid: 10}] }
     * </pre>
     *
     * <code>repeated .perfetto.protos.ProcessTree.Process processes = 1;</code>
     */
    perfetto.protos.ProcessTreeOuterClass.ProcessTree.Process getProcesses(int index);
    /**
     * <pre>
     * List of processes and threads in the client. These lists are incremental
     * and not exhaustive. A process and its threads might show up separately in
     * different ProcessTree messages. A thread might event not show up at all, if
     * no sched_switch activity was detected, for instance:
     * #0 { processes: [{pid: 10, ...}], threads: [{pid: 11, tgid: 10}] }
     * #1 { threads: [{pid: 12, tgid: 10}] }
     * #2 { processes: [{pid: 20, ...}], threads: [{pid: 13, tgid: 10}] }
     * </pre>
     *
     * <code>repeated .perfetto.protos.ProcessTree.Process processes = 1;</code>
     */
    int getProcessesCount();
    /**
     * <pre>
     * List of processes and threads in the client. These lists are incremental
     * and not exhaustive. A process and its threads might show up separately in
     * different ProcessTree messages. A thread might event not show up at all, if
     * no sched_switch activity was detected, for instance:
     * #0 { processes: [{pid: 10, ...}], threads: [{pid: 11, tgid: 10}] }
     * #1 { threads: [{pid: 12, tgid: 10}] }
     * #2 { processes: [{pid: 20, ...}], threads: [{pid: 13, tgid: 10}] }
     * </pre>
     *
     * <code>repeated .perfetto.protos.ProcessTree.Process processes = 1;</code>
     */
    java.util.List<? extends perfetto.protos.ProcessTreeOuterClass.ProcessTree.ProcessOrBuilder> 
        getProcessesOrBuilderList();
    /**
     * <pre>
     * List of processes and threads in the client. These lists are incremental
     * and not exhaustive. A process and its threads might show up separately in
     * different ProcessTree messages. A thread might event not show up at all, if
     * no sched_switch activity was detected, for instance:
     * #0 { processes: [{pid: 10, ...}], threads: [{pid: 11, tgid: 10}] }
     * #1 { threads: [{pid: 12, tgid: 10}] }
     * #2 { processes: [{pid: 20, ...}], threads: [{pid: 13, tgid: 10}] }
     * </pre>
     *
     * <code>repeated .perfetto.protos.ProcessTree.Process processes = 1;</code>
     */
    perfetto.protos.ProcessTreeOuterClass.ProcessTree.ProcessOrBuilder getProcessesOrBuilder(
        int index);

    /**
     * <code>repeated .perfetto.protos.ProcessTree.Thread threads = 2;</code>
     */
    java.util.List<perfetto.protos.ProcessTreeOuterClass.ProcessTree.Thread> 
        getThreadsList();
    /**
     * <code>repeated .perfetto.protos.ProcessTree.Thread threads = 2;</code>
     */
    perfetto.protos.ProcessTreeOuterClass.ProcessTree.Thread getThreads(int index);
    /**
     * <code>repeated .perfetto.protos.ProcessTree.Thread threads = 2;</code>
     */
    int getThreadsCount();
    /**
     * <code>repeated .perfetto.protos.ProcessTree.Thread threads = 2;</code>
     */
    java.util.List<? extends perfetto.protos.ProcessTreeOuterClass.ProcessTree.ThreadOrBuilder> 
        getThreadsOrBuilderList();
    /**
     * <code>repeated .perfetto.protos.ProcessTree.Thread threads = 2;</code>
     */
    perfetto.protos.ProcessTreeOuterClass.ProcessTree.ThreadOrBuilder getThreadsOrBuilder(
        int index);

    /**
     * <pre>
     * The time at which we finish collecting this process tree;
     * the top-level packet timestamp is the time at which
     * we begin collection.
     * </pre>
     *
     * <code>optional uint64 collection_end_timestamp = 3;</code>
     * @return Whether the collectionEndTimestamp field is set.
     */
    boolean hasCollectionEndTimestamp();
    /**
     * <pre>
     * The time at which we finish collecting this process tree;
     * the top-level packet timestamp is the time at which
     * we begin collection.
     * </pre>
     *
     * <code>optional uint64 collection_end_timestamp = 3;</code>
     * @return The collectionEndTimestamp.
     */
    long getCollectionEndTimestamp();
  }
  /**
   * <pre>
   * Metadata about the processes and threads in the trace.
   * Note: this proto was designed to be filled in by traced_probes and should
   * only be populated with accurate information coming from the system. Other
   * trace writers should prefer to fill ThreadDescriptor and ProcessDescriptor
   * in TrackDescriptor.
   * </pre>
   *
   * Protobuf type {@code perfetto.protos.ProcessTree}
   */
  public static final class ProcessTree extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:perfetto.protos.ProcessTree)
      ProcessTreeOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use ProcessTree.newBuilder() to construct.
    private ProcessTree(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private ProcessTree() {
      processes_ = java.util.Collections.emptyList();
      threads_ = java.util.Collections.emptyList();
    }

    @java.lang.Override
    @SuppressWarnings({"unused"})
    protected java.lang.Object newInstance(
        UnusedPrivateParameter unused) {
      return new ProcessTree();
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return perfetto.protos.ProcessTreeOuterClass.internal_static_perfetto_protos_ProcessTree_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return perfetto.protos.ProcessTreeOuterClass.internal_static_perfetto_protos_ProcessTree_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              perfetto.protos.ProcessTreeOuterClass.ProcessTree.class, perfetto.protos.ProcessTreeOuterClass.ProcessTree.Builder.class);
    }

    public interface ThreadOrBuilder extends
        // @@protoc_insertion_point(interface_extends:perfetto.protos.ProcessTree.Thread)
        com.google.protobuf.MessageOrBuilder {

      /**
       * <pre>
       * The thread ID (as per gettid()) in the root PID namespace.
       * </pre>
       *
       * <code>optional int32 tid = 1;</code>
       * @return Whether the tid field is set.
       */
      boolean hasTid();
      /**
       * <pre>
       * The thread ID (as per gettid()) in the root PID namespace.
       * </pre>
       *
       * <code>optional int32 tid = 1;</code>
       * @return The tid.
       */
      int getTid();

      /**
       * <pre>
       * Thread group id (i.e. the PID of the process, == TID of the main thread)
       * </pre>
       *
       * <code>optional int32 tgid = 3;</code>
       * @return Whether the tgid field is set.
       */
      boolean hasTgid();
      /**
       * <pre>
       * Thread group id (i.e. the PID of the process, == TID of the main thread)
       * </pre>
       *
       * <code>optional int32 tgid = 3;</code>
       * @return The tgid.
       */
      int getTgid();

      /**
       * <pre>
       * The name of the thread.
       * </pre>
       *
       * <code>optional string name = 2;</code>
       * @return Whether the name field is set.
       */
      boolean hasName();
      /**
       * <pre>
       * The name of the thread.
       * </pre>
       *
       * <code>optional string name = 2;</code>
       * @return The name.
       */
      java.lang.String getName();
      /**
       * <pre>
       * The name of the thread.
       * </pre>
       *
       * <code>optional string name = 2;</code>
       * @return The bytes for name.
       */
      com.google.protobuf.ByteString
          getNameBytes();

      /**
       * <pre>
       * The non-root-level thread IDs if the thread runs in a PID namespace. Read
       * from the NSpid entry of /proc/&lt;tid&gt;/status, with the first element (root-
       * level thread ID) omitted.
       * </pre>
       *
       * <code>repeated int32 nstid = 4;</code>
       * @return A list containing the nstid.
       */
      java.util.List<java.lang.Integer> getNstidList();
      /**
       * <pre>
       * The non-root-level thread IDs if the thread runs in a PID namespace. Read
       * from the NSpid entry of /proc/&lt;tid&gt;/status, with the first element (root-
       * level thread ID) omitted.
       * </pre>
       *
       * <code>repeated int32 nstid = 4;</code>
       * @return The count of nstid.
       */
      int getNstidCount();
      /**
       * <pre>
       * The non-root-level thread IDs if the thread runs in a PID namespace. Read
       * from the NSpid entry of /proc/&lt;tid&gt;/status, with the first element (root-
       * level thread ID) omitted.
       * </pre>
       *
       * <code>repeated int32 nstid = 4;</code>
       * @param index The index of the element to return.
       * @return The nstid at the given index.
       */
      int getNstid(int index);
    }
    /**
     * <pre>
     * Representation of a thread.
     * </pre>
     *
     * Protobuf type {@code perfetto.protos.ProcessTree.Thread}
     */
    public static final class Thread extends
        com.google.protobuf.GeneratedMessageV3 implements
        // @@protoc_insertion_point(message_implements:perfetto.protos.ProcessTree.Thread)
        ThreadOrBuilder {
    private static final long serialVersionUID = 0L;
      // Use Thread.newBuilder() to construct.
      private Thread(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
        super(builder);
      }
      private Thread() {
        name_ = "";
        nstid_ = emptyIntList();
      }

      @java.lang.Override
      @SuppressWarnings({"unused"})
      protected java.lang.Object newInstance(
          UnusedPrivateParameter unused) {
        return new Thread();
      }

      @java.lang.Override
      public final com.google.protobuf.UnknownFieldSet
      getUnknownFields() {
        return this.unknownFields;
      }
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return perfetto.protos.ProcessTreeOuterClass.internal_static_perfetto_protos_ProcessTree_Thread_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return perfetto.protos.ProcessTreeOuterClass.internal_static_perfetto_protos_ProcessTree_Thread_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                perfetto.protos.ProcessTreeOuterClass.ProcessTree.Thread.class, perfetto.protos.ProcessTreeOuterClass.ProcessTree.Thread.Builder.class);
      }

      private int bitField0_;
      public static final int TID_FIELD_NUMBER = 1;
      private int tid_ = 0;
      /**
       * <pre>
       * The thread ID (as per gettid()) in the root PID namespace.
       * </pre>
       *
       * <code>optional int32 tid = 1;</code>
       * @return Whether the tid field is set.
       */
      @java.lang.Override
      public boolean hasTid() {
        return ((bitField0_ & 0x00000001) != 0);
      }
      /**
       * <pre>
       * The thread ID (as per gettid()) in the root PID namespace.
       * </pre>
       *
       * <code>optional int32 tid = 1;</code>
       * @return The tid.
       */
      @java.lang.Override
      public int getTid() {
        return tid_;
      }

      public static final int TGID_FIELD_NUMBER = 3;
      private int tgid_ = 0;
      /**
       * <pre>
       * Thread group id (i.e. the PID of the process, == TID of the main thread)
       * </pre>
       *
       * <code>optional int32 tgid = 3;</code>
       * @return Whether the tgid field is set.
       */
      @java.lang.Override
      public boolean hasTgid() {
        return ((bitField0_ & 0x00000002) != 0);
      }
      /**
       * <pre>
       * Thread group id (i.e. the PID of the process, == TID of the main thread)
       * </pre>
       *
       * <code>optional int32 tgid = 3;</code>
       * @return The tgid.
       */
      @java.lang.Override
      public int getTgid() {
        return tgid_;
      }

      public static final int NAME_FIELD_NUMBER = 2;
      @SuppressWarnings("serial")
      private volatile java.lang.Object name_ = "";
      /**
       * <pre>
       * The name of the thread.
       * </pre>
       *
       * <code>optional string name = 2;</code>
       * @return Whether the name field is set.
       */
      @java.lang.Override
      public boolean hasName() {
        return ((bitField0_ & 0x00000004) != 0);
      }
      /**
       * <pre>
       * The name of the thread.
       * </pre>
       *
       * <code>optional string name = 2;</code>
       * @return The name.
       */
      @java.lang.Override
      public java.lang.String getName() {
        java.lang.Object ref = name_;
        if (ref instanceof java.lang.String) {
          return (java.lang.String) ref;
        } else {
          com.google.protobuf.ByteString bs = 
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          if (bs.isValidUtf8()) {
            name_ = s;
          }
          return s;
        }
      }
      /**
       * <pre>
       * The name of the thread.
       * </pre>
       *
       * <code>optional string name = 2;</code>
       * @return The bytes for name.
       */
      @java.lang.Override
      public com.google.protobuf.ByteString
          getNameBytes() {
        java.lang.Object ref = name_;
        if (ref instanceof java.lang.String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          name_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }

      public static final int NSTID_FIELD_NUMBER = 4;
      @SuppressWarnings("serial")
      private com.google.protobuf.Internal.IntList nstid_;
      /**
       * <pre>
       * The non-root-level thread IDs if the thread runs in a PID namespace. Read
       * from the NSpid entry of /proc/&lt;tid&gt;/status, with the first element (root-
       * level thread ID) omitted.
       * </pre>
       *
       * <code>repeated int32 nstid = 4;</code>
       * @return A list containing the nstid.
       */
      @java.lang.Override
      public java.util.List<java.lang.Integer>
          getNstidList() {
        return nstid_;
      }
      /**
       * <pre>
       * The non-root-level thread IDs if the thread runs in a PID namespace. Read
       * from the NSpid entry of /proc/&lt;tid&gt;/status, with the first element (root-
       * level thread ID) omitted.
       * </pre>
       *
       * <code>repeated int32 nstid = 4;</code>
       * @return The count of nstid.
       */
      public int getNstidCount() {
        return nstid_.size();
      }
      /**
       * <pre>
       * The non-root-level thread IDs if the thread runs in a PID namespace. Read
       * from the NSpid entry of /proc/&lt;tid&gt;/status, with the first element (root-
       * level thread ID) omitted.
       * </pre>
       *
       * <code>repeated int32 nstid = 4;</code>
       * @param index The index of the element to return.
       * @return The nstid at the given index.
       */
      public int getNstid(int index) {
        return nstid_.getInt(index);
      }

      private byte memoizedIsInitialized = -1;
      @java.lang.Override
      public final boolean isInitialized() {
        byte isInitialized = memoizedIsInitialized;
        if (isInitialized == 1) return true;
        if (isInitialized == 0) return false;

        memoizedIsInitialized = 1;
        return true;
      }

      @java.lang.Override
      public void writeTo(com.google.protobuf.CodedOutputStream output)
                          throws java.io.IOException {
        if (((bitField0_ & 0x00000001) != 0)) {
          output.writeInt32(1, tid_);
        }
        if (((bitField0_ & 0x00000004) != 0)) {
          com.google.protobuf.GeneratedMessageV3.writeString(output, 2, name_);
        }
        if (((bitField0_ & 0x00000002) != 0)) {
          output.writeInt32(3, tgid_);
        }
        for (int i = 0; i < nstid_.size(); i++) {
          output.writeInt32(4, nstid_.getInt(i));
        }
        getUnknownFields().writeTo(output);
      }

      @java.lang.Override
      public int getSerializedSize() {
        int size = memoizedSize;
        if (size != -1) return size;

        size = 0;
        if (((bitField0_ & 0x00000001) != 0)) {
          size += com.google.protobuf.CodedOutputStream
            .computeInt32Size(1, tid_);
        }
        if (((bitField0_ & 0x00000004) != 0)) {
          size += com.google.protobuf.GeneratedMessageV3.computeStringSize(2, name_);
        }
        if (((bitField0_ & 0x00000002) != 0)) {
          size += com.google.protobuf.CodedOutputStream
            .computeInt32Size(3, tgid_);
        }
        {
          int dataSize = 0;
          for (int i = 0; i < nstid_.size(); i++) {
            dataSize += com.google.protobuf.CodedOutputStream
              .computeInt32SizeNoTag(nstid_.getInt(i));
          }
          size += dataSize;
          size += 1 * getNstidList().size();
        }
        size += getUnknownFields().getSerializedSize();
        memoizedSize = size;
        return size;
      }

      @java.lang.Override
      public boolean equals(final java.lang.Object obj) {
        if (obj == this) {
         return true;
        }
        if (!(obj instanceof perfetto.protos.ProcessTreeOuterClass.ProcessTree.Thread)) {
          return super.equals(obj);
        }
        perfetto.protos.ProcessTreeOuterClass.ProcessTree.Thread other = (perfetto.protos.ProcessTreeOuterClass.ProcessTree.Thread) obj;

        if (hasTid() != other.hasTid()) return false;
        if (hasTid()) {
          if (getTid()
              != other.getTid()) return false;
        }
        if (hasTgid() != other.hasTgid()) return false;
        if (hasTgid()) {
          if (getTgid()
              != other.getTgid()) return false;
        }
        if (hasName() != other.hasName()) return false;
        if (hasName()) {
          if (!getName()
              .equals(other.getName())) return false;
        }
        if (!getNstidList()
            .equals(other.getNstidList())) return false;
        if (!getUnknownFields().equals(other.getUnknownFields())) return false;
        return true;
      }

      @java.lang.Override
      public int hashCode() {
        if (memoizedHashCode != 0) {
          return memoizedHashCode;
        }
        int hash = 41;
        hash = (19 * hash) + getDescriptor().hashCode();
        if (hasTid()) {
          hash = (37 * hash) + TID_FIELD_NUMBER;
          hash = (53 * hash) + getTid();
        }
        if (hasTgid()) {
          hash = (37 * hash) + TGID_FIELD_NUMBER;
          hash = (53 * hash) + getTgid();
        }
        if (hasName()) {
          hash = (37 * hash) + NAME_FIELD_NUMBER;
          hash = (53 * hash) + getName().hashCode();
        }
        if (getNstidCount() > 0) {
          hash = (37 * hash) + NSTID_FIELD_NUMBER;
          hash = (53 * hash) + getNstidList().hashCode();
        }
        hash = (29 * hash) + getUnknownFields().hashCode();
        memoizedHashCode = hash;
        return hash;
      }

      public static perfetto.protos.ProcessTreeOuterClass.ProcessTree.Thread parseFrom(
          java.nio.ByteBuffer data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static perfetto.protos.ProcessTreeOuterClass.ProcessTree.Thread parseFrom(
          java.nio.ByteBuffer data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static perfetto.protos.ProcessTreeOuterClass.ProcessTree.Thread parseFrom(
          com.google.protobuf.ByteString data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static perfetto.protos.ProcessTreeOuterClass.ProcessTree.Thread parseFrom(
          com.google.protobuf.ByteString data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static perfetto.protos.ProcessTreeOuterClass.ProcessTree.Thread parseFrom(byte[] data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static perfetto.protos.ProcessTreeOuterClass.ProcessTree.Thread parseFrom(
          byte[] data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static perfetto.protos.ProcessTreeOuterClass.ProcessTree.Thread parseFrom(java.io.InputStream input)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseWithIOException(PARSER, input);
      }
      public static perfetto.protos.ProcessTreeOuterClass.ProcessTree.Thread parseFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseWithIOException(PARSER, input, extensionRegistry);
      }
      public static perfetto.protos.ProcessTreeOuterClass.ProcessTree.Thread parseDelimitedFrom(java.io.InputStream input)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseDelimitedWithIOException(PARSER, input);
      }
      public static perfetto.protos.ProcessTreeOuterClass.ProcessTree.Thread parseDelimitedFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
      }
      public static perfetto.protos.ProcessTreeOuterClass.ProcessTree.Thread parseFrom(
          com.google.protobuf.CodedInputStream input)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseWithIOException(PARSER, input);
      }
      public static perfetto.protos.ProcessTreeOuterClass.ProcessTree.Thread parseFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseWithIOException(PARSER, input, extensionRegistry);
      }

      @java.lang.Override
      public Builder newBuilderForType() { return newBuilder(); }
      public static Builder newBuilder() {
        return DEFAULT_INSTANCE.toBuilder();
      }
      public static Builder newBuilder(perfetto.protos.ProcessTreeOuterClass.ProcessTree.Thread prototype) {
        return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
      }
      @java.lang.Override
      public Builder toBuilder() {
        return this == DEFAULT_INSTANCE
            ? new Builder() : new Builder().mergeFrom(this);
      }

      @java.lang.Override
      protected Builder newBuilderForType(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        Builder builder = new Builder(parent);
        return builder;
      }
      /**
       * <pre>
       * Representation of a thread.
       * </pre>
       *
       * Protobuf type {@code perfetto.protos.ProcessTree.Thread}
       */
      public static final class Builder extends
          com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
          // @@protoc_insertion_point(builder_implements:perfetto.protos.ProcessTree.Thread)
          perfetto.protos.ProcessTreeOuterClass.ProcessTree.ThreadOrBuilder {
        public static final com.google.protobuf.Descriptors.Descriptor
            getDescriptor() {
          return perfetto.protos.ProcessTreeOuterClass.internal_static_perfetto_protos_ProcessTree_Thread_descriptor;
        }

        @java.lang.Override
        protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
            internalGetFieldAccessorTable() {
          return perfetto.protos.ProcessTreeOuterClass.internal_static_perfetto_protos_ProcessTree_Thread_fieldAccessorTable
              .ensureFieldAccessorsInitialized(
                  perfetto.protos.ProcessTreeOuterClass.ProcessTree.Thread.class, perfetto.protos.ProcessTreeOuterClass.ProcessTree.Thread.Builder.class);
        }

        // Construct using perfetto.protos.ProcessTreeOuterClass.ProcessTree.Thread.newBuilder()
        private Builder() {

        }

        private Builder(
            com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
          super(parent);

        }
        @java.lang.Override
        public Builder clear() {
          super.clear();
          bitField0_ = 0;
          tid_ = 0;
          tgid_ = 0;
          name_ = "";
          nstid_ = emptyIntList();
          return this;
        }

        @java.lang.Override
        public com.google.protobuf.Descriptors.Descriptor
            getDescriptorForType() {
          return perfetto.protos.ProcessTreeOuterClass.internal_static_perfetto_protos_ProcessTree_Thread_descriptor;
        }

        @java.lang.Override
        public perfetto.protos.ProcessTreeOuterClass.ProcessTree.Thread getDefaultInstanceForType() {
          return perfetto.protos.ProcessTreeOuterClass.ProcessTree.Thread.getDefaultInstance();
        }

        @java.lang.Override
        public perfetto.protos.ProcessTreeOuterClass.ProcessTree.Thread build() {
          perfetto.protos.ProcessTreeOuterClass.ProcessTree.Thread result = buildPartial();
          if (!result.isInitialized()) {
            throw newUninitializedMessageException(result);
          }
          return result;
        }

        @java.lang.Override
        public perfetto.protos.ProcessTreeOuterClass.ProcessTree.Thread buildPartial() {
          perfetto.protos.ProcessTreeOuterClass.ProcessTree.Thread result = new perfetto.protos.ProcessTreeOuterClass.ProcessTree.Thread(this);
          buildPartialRepeatedFields(result);
          if (bitField0_ != 0) { buildPartial0(result); }
          onBuilt();
          return result;
        }

        private void buildPartialRepeatedFields(perfetto.protos.ProcessTreeOuterClass.ProcessTree.Thread result) {
          if (((bitField0_ & 0x00000008) != 0)) {
            nstid_.makeImmutable();
            bitField0_ = (bitField0_ & ~0x00000008);
          }
          result.nstid_ = nstid_;
        }

        private void buildPartial0(perfetto.protos.ProcessTreeOuterClass.ProcessTree.Thread result) {
          int from_bitField0_ = bitField0_;
          int to_bitField0_ = 0;
          if (((from_bitField0_ & 0x00000001) != 0)) {
            result.tid_ = tid_;
            to_bitField0_ |= 0x00000001;
          }
          if (((from_bitField0_ & 0x00000002) != 0)) {
            result.tgid_ = tgid_;
            to_bitField0_ |= 0x00000002;
          }
          if (((from_bitField0_ & 0x00000004) != 0)) {
            result.name_ = name_;
            to_bitField0_ |= 0x00000004;
          }
          result.bitField0_ |= to_bitField0_;
        }

        @java.lang.Override
        public Builder clone() {
          return super.clone();
        }
        @java.lang.Override
        public Builder setField(
            com.google.protobuf.Descriptors.FieldDescriptor field,
            java.lang.Object value) {
          return super.setField(field, value);
        }
        @java.lang.Override
        public Builder clearField(
            com.google.protobuf.Descriptors.FieldDescriptor field) {
          return super.clearField(field);
        }
        @java.lang.Override
        public Builder clearOneof(
            com.google.protobuf.Descriptors.OneofDescriptor oneof) {
          return super.clearOneof(oneof);
        }
        @java.lang.Override
        public Builder setRepeatedField(
            com.google.protobuf.Descriptors.FieldDescriptor field,
            int index, java.lang.Object value) {
          return super.setRepeatedField(field, index, value);
        }
        @java.lang.Override
        public Builder addRepeatedField(
            com.google.protobuf.Descriptors.FieldDescriptor field,
            java.lang.Object value) {
          return super.addRepeatedField(field, value);
        }
        @java.lang.Override
        public Builder mergeFrom(com.google.protobuf.Message other) {
          if (other instanceof perfetto.protos.ProcessTreeOuterClass.ProcessTree.Thread) {
            return mergeFrom((perfetto.protos.ProcessTreeOuterClass.ProcessTree.Thread)other);
          } else {
            super.mergeFrom(other);
            return this;
          }
        }

        public Builder mergeFrom(perfetto.protos.ProcessTreeOuterClass.ProcessTree.Thread other) {
          if (other == perfetto.protos.ProcessTreeOuterClass.ProcessTree.Thread.getDefaultInstance()) return this;
          if (other.hasTid()) {
            setTid(other.getTid());
          }
          if (other.hasTgid()) {
            setTgid(other.getTgid());
          }
          if (other.hasName()) {
            name_ = other.name_;
            bitField0_ |= 0x00000004;
            onChanged();
          }
          if (!other.nstid_.isEmpty()) {
            if (nstid_.isEmpty()) {
              nstid_ = other.nstid_;
              bitField0_ = (bitField0_ & ~0x00000008);
            } else {
              ensureNstidIsMutable();
              nstid_.addAll(other.nstid_);
            }
            onChanged();
          }
          this.mergeUnknownFields(other.getUnknownFields());
          onChanged();
          return this;
        }

        @java.lang.Override
        public final boolean isInitialized() {
          return true;
        }

        @java.lang.Override
        public Builder mergeFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws java.io.IOException {
          if (extensionRegistry == null) {
            throw new java.lang.NullPointerException();
          }
          try {
            boolean done = false;
            while (!done) {
              int tag = input.readTag();
              switch (tag) {
                case 0:
                  done = true;
                  break;
                case 8: {
                  tid_ = input.readInt32();
                  bitField0_ |= 0x00000001;
                  break;
                } // case 8
                case 18: {
                  name_ = input.readBytes();
                  bitField0_ |= 0x00000004;
                  break;
                } // case 18
                case 24: {
                  tgid_ = input.readInt32();
                  bitField0_ |= 0x00000002;
                  break;
                } // case 24
                case 32: {
                  int v = input.readInt32();
                  ensureNstidIsMutable();
                  nstid_.addInt(v);
                  break;
                } // case 32
                case 34: {
                  int length = input.readRawVarint32();
                  int limit = input.pushLimit(length);
                  ensureNstidIsMutable();
                  while (input.getBytesUntilLimit() > 0) {
                    nstid_.addInt(input.readInt32());
                  }
                  input.popLimit(limit);
                  break;
                } // case 34
                default: {
                  if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                    done = true; // was an endgroup tag
                  }
                  break;
                } // default:
              } // switch (tag)
            } // while (!done)
          } catch (com.google.protobuf.InvalidProtocolBufferException e) {
            throw e.unwrapIOException();
          } finally {
            onChanged();
          } // finally
          return this;
        }
        private int bitField0_;

        private int tid_ ;
        /**
         * <pre>
         * The thread ID (as per gettid()) in the root PID namespace.
         * </pre>
         *
         * <code>optional int32 tid = 1;</code>
         * @return Whether the tid field is set.
         */
        @java.lang.Override
        public boolean hasTid() {
          return ((bitField0_ & 0x00000001) != 0);
        }
        /**
         * <pre>
         * The thread ID (as per gettid()) in the root PID namespace.
         * </pre>
         *
         * <code>optional int32 tid = 1;</code>
         * @return The tid.
         */
        @java.lang.Override
        public int getTid() {
          return tid_;
        }
        /**
         * <pre>
         * The thread ID (as per gettid()) in the root PID namespace.
         * </pre>
         *
         * <code>optional int32 tid = 1;</code>
         * @param value The tid to set.
         * @return This builder for chaining.
         */
        public Builder setTid(int value) {
          
          tid_ = value;
          bitField0_ |= 0x00000001;
          onChanged();
          return this;
        }
        /**
         * <pre>
         * The thread ID (as per gettid()) in the root PID namespace.
         * </pre>
         *
         * <code>optional int32 tid = 1;</code>
         * @return This builder for chaining.
         */
        public Builder clearTid() {
          bitField0_ = (bitField0_ & ~0x00000001);
          tid_ = 0;
          onChanged();
          return this;
        }

        private int tgid_ ;
        /**
         * <pre>
         * Thread group id (i.e. the PID of the process, == TID of the main thread)
         * </pre>
         *
         * <code>optional int32 tgid = 3;</code>
         * @return Whether the tgid field is set.
         */
        @java.lang.Override
        public boolean hasTgid() {
          return ((bitField0_ & 0x00000002) != 0);
        }
        /**
         * <pre>
         * Thread group id (i.e. the PID of the process, == TID of the main thread)
         * </pre>
         *
         * <code>optional int32 tgid = 3;</code>
         * @return The tgid.
         */
        @java.lang.Override
        public int getTgid() {
          return tgid_;
        }
        /**
         * <pre>
         * Thread group id (i.e. the PID of the process, == TID of the main thread)
         * </pre>
         *
         * <code>optional int32 tgid = 3;</code>
         * @param value The tgid to set.
         * @return This builder for chaining.
         */
        public Builder setTgid(int value) {
          
          tgid_ = value;
          bitField0_ |= 0x00000002;
          onChanged();
          return this;
        }
        /**
         * <pre>
         * Thread group id (i.e. the PID of the process, == TID of the main thread)
         * </pre>
         *
         * <code>optional int32 tgid = 3;</code>
         * @return This builder for chaining.
         */
        public Builder clearTgid() {
          bitField0_ = (bitField0_ & ~0x00000002);
          tgid_ = 0;
          onChanged();
          return this;
        }

        private java.lang.Object name_ = "";
        /**
         * <pre>
         * The name of the thread.
         * </pre>
         *
         * <code>optional string name = 2;</code>
         * @return Whether the name field is set.
         */
        public boolean hasName() {
          return ((bitField0_ & 0x00000004) != 0);
        }
        /**
         * <pre>
         * The name of the thread.
         * </pre>
         *
         * <code>optional string name = 2;</code>
         * @return The name.
         */
        public java.lang.String getName() {
          java.lang.Object ref = name_;
          if (!(ref instanceof java.lang.String)) {
            com.google.protobuf.ByteString bs =
                (com.google.protobuf.ByteString) ref;
            java.lang.String s = bs.toStringUtf8();
            if (bs.isValidUtf8()) {
              name_ = s;
            }
            return s;
          } else {
            return (java.lang.String) ref;
          }
        }
        /**
         * <pre>
         * The name of the thread.
         * </pre>
         *
         * <code>optional string name = 2;</code>
         * @return The bytes for name.
         */
        public com.google.protobuf.ByteString
            getNameBytes() {
          java.lang.Object ref = name_;
          if (ref instanceof String) {
            com.google.protobuf.ByteString b = 
                com.google.protobuf.ByteString.copyFromUtf8(
                    (java.lang.String) ref);
            name_ = b;
            return b;
          } else {
            return (com.google.protobuf.ByteString) ref;
          }
        }
        /**
         * <pre>
         * The name of the thread.
         * </pre>
         *
         * <code>optional string name = 2;</code>
         * @param value The name to set.
         * @return This builder for chaining.
         */
        public Builder setName(
            java.lang.String value) {
          if (value == null) { throw new NullPointerException(); }
          name_ = value;
          bitField0_ |= 0x00000004;
          onChanged();
          return this;
        }
        /**
         * <pre>
         * The name of the thread.
         * </pre>
         *
         * <code>optional string name = 2;</code>
         * @return This builder for chaining.
         */
        public Builder clearName() {
          name_ = getDefaultInstance().getName();
          bitField0_ = (bitField0_ & ~0x00000004);
          onChanged();
          return this;
        }
        /**
         * <pre>
         * The name of the thread.
         * </pre>
         *
         * <code>optional string name = 2;</code>
         * @param value The bytes for name to set.
         * @return This builder for chaining.
         */
        public Builder setNameBytes(
            com.google.protobuf.ByteString value) {
          if (value == null) { throw new NullPointerException(); }
          name_ = value;
          bitField0_ |= 0x00000004;
          onChanged();
          return this;
        }

        private com.google.protobuf.Internal.IntList nstid_ = emptyIntList();
        private void ensureNstidIsMutable() {
          if (!((bitField0_ & 0x00000008) != 0)) {
            nstid_ = mutableCopy(nstid_);
            bitField0_ |= 0x00000008;
          }
        }
        /**
         * <pre>
         * The non-root-level thread IDs if the thread runs in a PID namespace. Read
         * from the NSpid entry of /proc/&lt;tid&gt;/status, with the first element (root-
         * level thread ID) omitted.
         * </pre>
         *
         * <code>repeated int32 nstid = 4;</code>
         * @return A list containing the nstid.
         */
        public java.util.List<java.lang.Integer>
            getNstidList() {
          return ((bitField0_ & 0x00000008) != 0) ?
                   java.util.Collections.unmodifiableList(nstid_) : nstid_;
        }
        /**
         * <pre>
         * The non-root-level thread IDs if the thread runs in a PID namespace. Read
         * from the NSpid entry of /proc/&lt;tid&gt;/status, with the first element (root-
         * level thread ID) omitted.
         * </pre>
         *
         * <code>repeated int32 nstid = 4;</code>
         * @return The count of nstid.
         */
        public int getNstidCount() {
          return nstid_.size();
        }
        /**
         * <pre>
         * The non-root-level thread IDs if the thread runs in a PID namespace. Read
         * from the NSpid entry of /proc/&lt;tid&gt;/status, with the first element (root-
         * level thread ID) omitted.
         * </pre>
         *
         * <code>repeated int32 nstid = 4;</code>
         * @param index The index of the element to return.
         * @return The nstid at the given index.
         */
        public int getNstid(int index) {
          return nstid_.getInt(index);
        }
        /**
         * <pre>
         * The non-root-level thread IDs if the thread runs in a PID namespace. Read
         * from the NSpid entry of /proc/&lt;tid&gt;/status, with the first element (root-
         * level thread ID) omitted.
         * </pre>
         *
         * <code>repeated int32 nstid = 4;</code>
         * @param index The index to set the value at.
         * @param value The nstid to set.
         * @return This builder for chaining.
         */
        public Builder setNstid(
            int index, int value) {
          
          ensureNstidIsMutable();
          nstid_.setInt(index, value);
          onChanged();
          return this;
        }
        /**
         * <pre>
         * The non-root-level thread IDs if the thread runs in a PID namespace. Read
         * from the NSpid entry of /proc/&lt;tid&gt;/status, with the first element (root-
         * level thread ID) omitted.
         * </pre>
         *
         * <code>repeated int32 nstid = 4;</code>
         * @param value The nstid to add.
         * @return This builder for chaining.
         */
        public Builder addNstid(int value) {
          
          ensureNstidIsMutable();
          nstid_.addInt(value);
          onChanged();
          return this;
        }
        /**
         * <pre>
         * The non-root-level thread IDs if the thread runs in a PID namespace. Read
         * from the NSpid entry of /proc/&lt;tid&gt;/status, with the first element (root-
         * level thread ID) omitted.
         * </pre>
         *
         * <code>repeated int32 nstid = 4;</code>
         * @param values The nstid to add.
         * @return This builder for chaining.
         */
        public Builder addAllNstid(
            java.lang.Iterable<? extends java.lang.Integer> values) {
          ensureNstidIsMutable();
          com.google.protobuf.AbstractMessageLite.Builder.addAll(
              values, nstid_);
          onChanged();
          return this;
        }
        /**
         * <pre>
         * The non-root-level thread IDs if the thread runs in a PID namespace. Read
         * from the NSpid entry of /proc/&lt;tid&gt;/status, with the first element (root-
         * level thread ID) omitted.
         * </pre>
         *
         * <code>repeated int32 nstid = 4;</code>
         * @return This builder for chaining.
         */
        public Builder clearNstid() {
          nstid_ = emptyIntList();
          bitField0_ = (bitField0_ & ~0x00000008);
          onChanged();
          return this;
        }
        @java.lang.Override
        public final Builder setUnknownFields(
            final com.google.protobuf.UnknownFieldSet unknownFields) {
          return super.setUnknownFields(unknownFields);
        }

        @java.lang.Override
        public final Builder mergeUnknownFields(
            final com.google.protobuf.UnknownFieldSet unknownFields) {
          return super.mergeUnknownFields(unknownFields);
        }


        // @@protoc_insertion_point(builder_scope:perfetto.protos.ProcessTree.Thread)
      }

      // @@protoc_insertion_point(class_scope:perfetto.protos.ProcessTree.Thread)
      private static final perfetto.protos.ProcessTreeOuterClass.ProcessTree.Thread DEFAULT_INSTANCE;
      static {
        DEFAULT_INSTANCE = new perfetto.protos.ProcessTreeOuterClass.ProcessTree.Thread();
      }

      public static perfetto.protos.ProcessTreeOuterClass.ProcessTree.Thread getDefaultInstance() {
        return DEFAULT_INSTANCE;
      }

      @java.lang.Deprecated public static final com.google.protobuf.Parser<Thread>
          PARSER = new com.google.protobuf.AbstractParser<Thread>() {
        @java.lang.Override
        public Thread parsePartialFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws com.google.protobuf.InvalidProtocolBufferException {
          Builder builder = newBuilder();
          try {
            builder.mergeFrom(input, extensionRegistry);
          } catch (com.google.protobuf.InvalidProtocolBufferException e) {
            throw e.setUnfinishedMessage(builder.buildPartial());
          } catch (com.google.protobuf.UninitializedMessageException e) {
            throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
          } catch (java.io.IOException e) {
            throw new com.google.protobuf.InvalidProtocolBufferException(e)
                .setUnfinishedMessage(builder.buildPartial());
          }
          return builder.buildPartial();
        }
      };

      public static com.google.protobuf.Parser<Thread> parser() {
        return PARSER;
      }

      @java.lang.Override
      public com.google.protobuf.Parser<Thread> getParserForType() {
        return PARSER;
      }

      @java.lang.Override
      public perfetto.protos.ProcessTreeOuterClass.ProcessTree.Thread getDefaultInstanceForType() {
        return DEFAULT_INSTANCE;
      }

    }

    public interface ProcessOrBuilder extends
        // @@protoc_insertion_point(interface_extends:perfetto.protos.ProcessTree.Process)
        com.google.protobuf.MessageOrBuilder {

      /**
       * <pre>
       * The UNIX process ID, aka thread group ID (as per getpid()) in the root
       * PID namespace.
       * </pre>
       *
       * <code>optional int32 pid = 1;</code>
       * @return Whether the pid field is set.
       */
      boolean hasPid();
      /**
       * <pre>
       * The UNIX process ID, aka thread group ID (as per getpid()) in the root
       * PID namespace.
       * </pre>
       *
       * <code>optional int32 pid = 1;</code>
       * @return The pid.
       */
      int getPid();

      /**
       * <pre>
       * The parent process ID, as per getppid().
       * </pre>
       *
       * <code>optional int32 ppid = 2;</code>
       * @return Whether the ppid field is set.
       */
      boolean hasPpid();
      /**
       * <pre>
       * The parent process ID, as per getppid().
       * </pre>
       *
       * <code>optional int32 ppid = 2;</code>
       * @return The ppid.
       */
      int getPpid();

      /**
       * <pre>
       * The command line for the process, as per /proc/pid/cmdline.
       * If it is a kernel thread there will only be one cmdline field
       * and it will contain /proc/pid/comm.
       * </pre>
       *
       * <code>repeated string cmdline = 3;</code>
       * @return A list containing the cmdline.
       */
      java.util.List<java.lang.String>
          getCmdlineList();
      /**
       * <pre>
       * The command line for the process, as per /proc/pid/cmdline.
       * If it is a kernel thread there will only be one cmdline field
       * and it will contain /proc/pid/comm.
       * </pre>
       *
       * <code>repeated string cmdline = 3;</code>
       * @return The count of cmdline.
       */
      int getCmdlineCount();
      /**
       * <pre>
       * The command line for the process, as per /proc/pid/cmdline.
       * If it is a kernel thread there will only be one cmdline field
       * and it will contain /proc/pid/comm.
       * </pre>
       *
       * <code>repeated string cmdline = 3;</code>
       * @param index The index of the element to return.
       * @return The cmdline at the given index.
       */
      java.lang.String getCmdline(int index);
      /**
       * <pre>
       * The command line for the process, as per /proc/pid/cmdline.
       * If it is a kernel thread there will only be one cmdline field
       * and it will contain /proc/pid/comm.
       * </pre>
       *
       * <code>repeated string cmdline = 3;</code>
       * @param index The index of the value to return.
       * @return The bytes of the cmdline at the given index.
       */
      com.google.protobuf.ByteString
          getCmdlineBytes(int index);

      /**
       * <pre>
       * No longer used as of Apr 2018, when the dedicated |threads| field was
       * introduced in ProcessTree.
       * </pre>
       *
       * <code>repeated .perfetto.protos.ProcessTree.Thread threads_deprecated = 4 [deprecated = true];</code>
       */
      @java.lang.Deprecated java.util.List<perfetto.protos.ProcessTreeOuterClass.ProcessTree.Thread> 
          getThreadsDeprecatedList();
      /**
       * <pre>
       * No longer used as of Apr 2018, when the dedicated |threads| field was
       * introduced in ProcessTree.
       * </pre>
       *
       * <code>repeated .perfetto.protos.ProcessTree.Thread threads_deprecated = 4 [deprecated = true];</code>
       */
      @java.lang.Deprecated perfetto.protos.ProcessTreeOuterClass.ProcessTree.Thread getThreadsDeprecated(int index);
      /**
       * <pre>
       * No longer used as of Apr 2018, when the dedicated |threads| field was
       * introduced in ProcessTree.
       * </pre>
       *
       * <code>repeated .perfetto.protos.ProcessTree.Thread threads_deprecated = 4 [deprecated = true];</code>
       */
      @java.lang.Deprecated int getThreadsDeprecatedCount();
      /**
       * <pre>
       * No longer used as of Apr 2018, when the dedicated |threads| field was
       * introduced in ProcessTree.
       * </pre>
       *
       * <code>repeated .perfetto.protos.ProcessTree.Thread threads_deprecated = 4 [deprecated = true];</code>
       */
      @java.lang.Deprecated java.util.List<? extends perfetto.protos.ProcessTreeOuterClass.ProcessTree.ThreadOrBuilder> 
          getThreadsDeprecatedOrBuilderList();
      /**
       * <pre>
       * No longer used as of Apr 2018, when the dedicated |threads| field was
       * introduced in ProcessTree.
       * </pre>
       *
       * <code>repeated .perfetto.protos.ProcessTree.Thread threads_deprecated = 4 [deprecated = true];</code>
       */
      @java.lang.Deprecated perfetto.protos.ProcessTreeOuterClass.ProcessTree.ThreadOrBuilder getThreadsDeprecatedOrBuilder(
          int index);

      /**
       * <pre>
       * The uid for the process, as per /proc/pid/status.
       * </pre>
       *
       * <code>optional int32 uid = 5;</code>
       * @return Whether the uid field is set.
       */
      boolean hasUid();
      /**
       * <pre>
       * The uid for the process, as per /proc/pid/status.
       * </pre>
       *
       * <code>optional int32 uid = 5;</code>
       * @return The uid.
       */
      int getUid();

      /**
       * <pre>
       * The non-root-level process IDs if the process runs in a PID namespace.
       * Read from the NSpid entry of /proc/&lt;pid&gt;/status, with the first element (
       * root-level process ID) omitted.
       * </pre>
       *
       * <code>repeated int32 nspid = 6;</code>
       * @return A list containing the nspid.
       */
      java.util.List<java.lang.Integer> getNspidList();
      /**
       * <pre>
       * The non-root-level process IDs if the process runs in a PID namespace.
       * Read from the NSpid entry of /proc/&lt;pid&gt;/status, with the first element (
       * root-level process ID) omitted.
       * </pre>
       *
       * <code>repeated int32 nspid = 6;</code>
       * @return The count of nspid.
       */
      int getNspidCount();
      /**
       * <pre>
       * The non-root-level process IDs if the process runs in a PID namespace.
       * Read from the NSpid entry of /proc/&lt;pid&gt;/status, with the first element (
       * root-level process ID) omitted.
       * </pre>
       *
       * <code>repeated int32 nspid = 6;</code>
       * @param index The index of the element to return.
       * @return The nspid at the given index.
       */
      int getNspid(int index);
    }
    /**
     * <pre>
     * Representation of a process.
     * </pre>
     *
     * Protobuf type {@code perfetto.protos.ProcessTree.Process}
     */
    public static final class Process extends
        com.google.protobuf.GeneratedMessageV3 implements
        // @@protoc_insertion_point(message_implements:perfetto.protos.ProcessTree.Process)
        ProcessOrBuilder {
    private static final long serialVersionUID = 0L;
      // Use Process.newBuilder() to construct.
      private Process(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
        super(builder);
      }
      private Process() {
        cmdline_ = com.google.protobuf.LazyStringArrayList.EMPTY;
        threadsDeprecated_ = java.util.Collections.emptyList();
        nspid_ = emptyIntList();
      }

      @java.lang.Override
      @SuppressWarnings({"unused"})
      protected java.lang.Object newInstance(
          UnusedPrivateParameter unused) {
        return new Process();
      }

      @java.lang.Override
      public final com.google.protobuf.UnknownFieldSet
      getUnknownFields() {
        return this.unknownFields;
      }
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return perfetto.protos.ProcessTreeOuterClass.internal_static_perfetto_protos_ProcessTree_Process_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return perfetto.protos.ProcessTreeOuterClass.internal_static_perfetto_protos_ProcessTree_Process_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                perfetto.protos.ProcessTreeOuterClass.ProcessTree.Process.class, perfetto.protos.ProcessTreeOuterClass.ProcessTree.Process.Builder.class);
      }

      private int bitField0_;
      public static final int PID_FIELD_NUMBER = 1;
      private int pid_ = 0;
      /**
       * <pre>
       * The UNIX process ID, aka thread group ID (as per getpid()) in the root
       * PID namespace.
       * </pre>
       *
       * <code>optional int32 pid = 1;</code>
       * @return Whether the pid field is set.
       */
      @java.lang.Override
      public boolean hasPid() {
        return ((bitField0_ & 0x00000001) != 0);
      }
      /**
       * <pre>
       * The UNIX process ID, aka thread group ID (as per getpid()) in the root
       * PID namespace.
       * </pre>
       *
       * <code>optional int32 pid = 1;</code>
       * @return The pid.
       */
      @java.lang.Override
      public int getPid() {
        return pid_;
      }

      public static final int PPID_FIELD_NUMBER = 2;
      private int ppid_ = 0;
      /**
       * <pre>
       * The parent process ID, as per getppid().
       * </pre>
       *
       * <code>optional int32 ppid = 2;</code>
       * @return Whether the ppid field is set.
       */
      @java.lang.Override
      public boolean hasPpid() {
        return ((bitField0_ & 0x00000002) != 0);
      }
      /**
       * <pre>
       * The parent process ID, as per getppid().
       * </pre>
       *
       * <code>optional int32 ppid = 2;</code>
       * @return The ppid.
       */
      @java.lang.Override
      public int getPpid() {
        return ppid_;
      }

      public static final int CMDLINE_FIELD_NUMBER = 3;
      @SuppressWarnings("serial")
      private com.google.protobuf.LazyStringList cmdline_;
      /**
       * <pre>
       * The command line for the process, as per /proc/pid/cmdline.
       * If it is a kernel thread there will only be one cmdline field
       * and it will contain /proc/pid/comm.
       * </pre>
       *
       * <code>repeated string cmdline = 3;</code>
       * @return A list containing the cmdline.
       */
      public com.google.protobuf.ProtocolStringList
          getCmdlineList() {
        return cmdline_;
      }
      /**
       * <pre>
       * The command line for the process, as per /proc/pid/cmdline.
       * If it is a kernel thread there will only be one cmdline field
       * and it will contain /proc/pid/comm.
       * </pre>
       *
       * <code>repeated string cmdline = 3;</code>
       * @return The count of cmdline.
       */
      public int getCmdlineCount() {
        return cmdline_.size();
      }
      /**
       * <pre>
       * The command line for the process, as per /proc/pid/cmdline.
       * If it is a kernel thread there will only be one cmdline field
       * and it will contain /proc/pid/comm.
       * </pre>
       *
       * <code>repeated string cmdline = 3;</code>
       * @param index The index of the element to return.
       * @return The cmdline at the given index.
       */
      public java.lang.String getCmdline(int index) {
        return cmdline_.get(index);
      }
      /**
       * <pre>
       * The command line for the process, as per /proc/pid/cmdline.
       * If it is a kernel thread there will only be one cmdline field
       * and it will contain /proc/pid/comm.
       * </pre>
       *
       * <code>repeated string cmdline = 3;</code>
       * @param index The index of the value to return.
       * @return The bytes of the cmdline at the given index.
       */
      public com.google.protobuf.ByteString
          getCmdlineBytes(int index) {
        return cmdline_.getByteString(index);
      }

      public static final int THREADS_DEPRECATED_FIELD_NUMBER = 4;
      @SuppressWarnings("serial")
      private java.util.List<perfetto.protos.ProcessTreeOuterClass.ProcessTree.Thread> threadsDeprecated_;
      /**
       * <pre>
       * No longer used as of Apr 2018, when the dedicated |threads| field was
       * introduced in ProcessTree.
       * </pre>
       *
       * <code>repeated .perfetto.protos.ProcessTree.Thread threads_deprecated = 4 [deprecated = true];</code>
       */
      @java.lang.Override
      @java.lang.Deprecated public java.util.List<perfetto.protos.ProcessTreeOuterClass.ProcessTree.Thread> getThreadsDeprecatedList() {
        return threadsDeprecated_;
      }
      /**
       * <pre>
       * No longer used as of Apr 2018, when the dedicated |threads| field was
       * introduced in ProcessTree.
       * </pre>
       *
       * <code>repeated .perfetto.protos.ProcessTree.Thread threads_deprecated = 4 [deprecated = true];</code>
       */
      @java.lang.Override
      @java.lang.Deprecated public java.util.List<? extends perfetto.protos.ProcessTreeOuterClass.ProcessTree.ThreadOrBuilder> 
          getThreadsDeprecatedOrBuilderList() {
        return threadsDeprecated_;
      }
      /**
       * <pre>
       * No longer used as of Apr 2018, when the dedicated |threads| field was
       * introduced in ProcessTree.
       * </pre>
       *
       * <code>repeated .perfetto.protos.ProcessTree.Thread threads_deprecated = 4 [deprecated = true];</code>
       */
      @java.lang.Override
      @java.lang.Deprecated public int getThreadsDeprecatedCount() {
        return threadsDeprecated_.size();
      }
      /**
       * <pre>
       * No longer used as of Apr 2018, when the dedicated |threads| field was
       * introduced in ProcessTree.
       * </pre>
       *
       * <code>repeated .perfetto.protos.ProcessTree.Thread threads_deprecated = 4 [deprecated = true];</code>
       */
      @java.lang.Override
      @java.lang.Deprecated public perfetto.protos.ProcessTreeOuterClass.ProcessTree.Thread getThreadsDeprecated(int index) {
        return threadsDeprecated_.get(index);
      }
      /**
       * <pre>
       * No longer used as of Apr 2018, when the dedicated |threads| field was
       * introduced in ProcessTree.
       * </pre>
       *
       * <code>repeated .perfetto.protos.ProcessTree.Thread threads_deprecated = 4 [deprecated = true];</code>
       */
      @java.lang.Override
      @java.lang.Deprecated public perfetto.protos.ProcessTreeOuterClass.ProcessTree.ThreadOrBuilder getThreadsDeprecatedOrBuilder(
          int index) {
        return threadsDeprecated_.get(index);
      }

      public static final int UID_FIELD_NUMBER = 5;
      private int uid_ = 0;
      /**
       * <pre>
       * The uid for the process, as per /proc/pid/status.
       * </pre>
       *
       * <code>optional int32 uid = 5;</code>
       * @return Whether the uid field is set.
       */
      @java.lang.Override
      public boolean hasUid() {
        return ((bitField0_ & 0x00000004) != 0);
      }
      /**
       * <pre>
       * The uid for the process, as per /proc/pid/status.
       * </pre>
       *
       * <code>optional int32 uid = 5;</code>
       * @return The uid.
       */
      @java.lang.Override
      public int getUid() {
        return uid_;
      }

      public static final int NSPID_FIELD_NUMBER = 6;
      @SuppressWarnings("serial")
      private com.google.protobuf.Internal.IntList nspid_;
      /**
       * <pre>
       * The non-root-level process IDs if the process runs in a PID namespace.
       * Read from the NSpid entry of /proc/&lt;pid&gt;/status, with the first element (
       * root-level process ID) omitted.
       * </pre>
       *
       * <code>repeated int32 nspid = 6;</code>
       * @return A list containing the nspid.
       */
      @java.lang.Override
      public java.util.List<java.lang.Integer>
          getNspidList() {
        return nspid_;
      }
      /**
       * <pre>
       * The non-root-level process IDs if the process runs in a PID namespace.
       * Read from the NSpid entry of /proc/&lt;pid&gt;/status, with the first element (
       * root-level process ID) omitted.
       * </pre>
       *
       * <code>repeated int32 nspid = 6;</code>
       * @return The count of nspid.
       */
      public int getNspidCount() {
        return nspid_.size();
      }
      /**
       * <pre>
       * The non-root-level process IDs if the process runs in a PID namespace.
       * Read from the NSpid entry of /proc/&lt;pid&gt;/status, with the first element (
       * root-level process ID) omitted.
       * </pre>
       *
       * <code>repeated int32 nspid = 6;</code>
       * @param index The index of the element to return.
       * @return The nspid at the given index.
       */
      public int getNspid(int index) {
        return nspid_.getInt(index);
      }

      private byte memoizedIsInitialized = -1;
      @java.lang.Override
      public final boolean isInitialized() {
        byte isInitialized = memoizedIsInitialized;
        if (isInitialized == 1) return true;
        if (isInitialized == 0) return false;

        memoizedIsInitialized = 1;
        return true;
      }

      @java.lang.Override
      public void writeTo(com.google.protobuf.CodedOutputStream output)
                          throws java.io.IOException {
        if (((bitField0_ & 0x00000001) != 0)) {
          output.writeInt32(1, pid_);
        }
        if (((bitField0_ & 0x00000002) != 0)) {
          output.writeInt32(2, ppid_);
        }
        for (int i = 0; i < cmdline_.size(); i++) {
          com.google.protobuf.GeneratedMessageV3.writeString(output, 3, cmdline_.getRaw(i));
        }
        for (int i = 0; i < threadsDeprecated_.size(); i++) {
          output.writeMessage(4, threadsDeprecated_.get(i));
        }
        if (((bitField0_ & 0x00000004) != 0)) {
          output.writeInt32(5, uid_);
        }
        for (int i = 0; i < nspid_.size(); i++) {
          output.writeInt32(6, nspid_.getInt(i));
        }
        getUnknownFields().writeTo(output);
      }

      @java.lang.Override
      public int getSerializedSize() {
        int size = memoizedSize;
        if (size != -1) return size;

        size = 0;
        if (((bitField0_ & 0x00000001) != 0)) {
          size += com.google.protobuf.CodedOutputStream
            .computeInt32Size(1, pid_);
        }
        if (((bitField0_ & 0x00000002) != 0)) {
          size += com.google.protobuf.CodedOutputStream
            .computeInt32Size(2, ppid_);
        }
        {
          int dataSize = 0;
          for (int i = 0; i < cmdline_.size(); i++) {
            dataSize += computeStringSizeNoTag(cmdline_.getRaw(i));
          }
          size += dataSize;
          size += 1 * getCmdlineList().size();
        }
        for (int i = 0; i < threadsDeprecated_.size(); i++) {
          size += com.google.protobuf.CodedOutputStream
            .computeMessageSize(4, threadsDeprecated_.get(i));
        }
        if (((bitField0_ & 0x00000004) != 0)) {
          size += com.google.protobuf.CodedOutputStream
            .computeInt32Size(5, uid_);
        }
        {
          int dataSize = 0;
          for (int i = 0; i < nspid_.size(); i++) {
            dataSize += com.google.protobuf.CodedOutputStream
              .computeInt32SizeNoTag(nspid_.getInt(i));
          }
          size += dataSize;
          size += 1 * getNspidList().size();
        }
        size += getUnknownFields().getSerializedSize();
        memoizedSize = size;
        return size;
      }

      @java.lang.Override
      public boolean equals(final java.lang.Object obj) {
        if (obj == this) {
         return true;
        }
        if (!(obj instanceof perfetto.protos.ProcessTreeOuterClass.ProcessTree.Process)) {
          return super.equals(obj);
        }
        perfetto.protos.ProcessTreeOuterClass.ProcessTree.Process other = (perfetto.protos.ProcessTreeOuterClass.ProcessTree.Process) obj;

        if (hasPid() != other.hasPid()) return false;
        if (hasPid()) {
          if (getPid()
              != other.getPid()) return false;
        }
        if (hasPpid() != other.hasPpid()) return false;
        if (hasPpid()) {
          if (getPpid()
              != other.getPpid()) return false;
        }
        if (!getCmdlineList()
            .equals(other.getCmdlineList())) return false;
        if (!getThreadsDeprecatedList()
            .equals(other.getThreadsDeprecatedList())) return false;
        if (hasUid() != other.hasUid()) return false;
        if (hasUid()) {
          if (getUid()
              != other.getUid()) return false;
        }
        if (!getNspidList()
            .equals(other.getNspidList())) return false;
        if (!getUnknownFields().equals(other.getUnknownFields())) return false;
        return true;
      }

      @java.lang.Override
      public int hashCode() {
        if (memoizedHashCode != 0) {
          return memoizedHashCode;
        }
        int hash = 41;
        hash = (19 * hash) + getDescriptor().hashCode();
        if (hasPid()) {
          hash = (37 * hash) + PID_FIELD_NUMBER;
          hash = (53 * hash) + getPid();
        }
        if (hasPpid()) {
          hash = (37 * hash) + PPID_FIELD_NUMBER;
          hash = (53 * hash) + getPpid();
        }
        if (getCmdlineCount() > 0) {
          hash = (37 * hash) + CMDLINE_FIELD_NUMBER;
          hash = (53 * hash) + getCmdlineList().hashCode();
        }
        if (getThreadsDeprecatedCount() > 0) {
          hash = (37 * hash) + THREADS_DEPRECATED_FIELD_NUMBER;
          hash = (53 * hash) + getThreadsDeprecatedList().hashCode();
        }
        if (hasUid()) {
          hash = (37 * hash) + UID_FIELD_NUMBER;
          hash = (53 * hash) + getUid();
        }
        if (getNspidCount() > 0) {
          hash = (37 * hash) + NSPID_FIELD_NUMBER;
          hash = (53 * hash) + getNspidList().hashCode();
        }
        hash = (29 * hash) + getUnknownFields().hashCode();
        memoizedHashCode = hash;
        return hash;
      }

      public static perfetto.protos.ProcessTreeOuterClass.ProcessTree.Process parseFrom(
          java.nio.ByteBuffer data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static perfetto.protos.ProcessTreeOuterClass.ProcessTree.Process parseFrom(
          java.nio.ByteBuffer data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static perfetto.protos.ProcessTreeOuterClass.ProcessTree.Process parseFrom(
          com.google.protobuf.ByteString data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static perfetto.protos.ProcessTreeOuterClass.ProcessTree.Process parseFrom(
          com.google.protobuf.ByteString data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static perfetto.protos.ProcessTreeOuterClass.ProcessTree.Process parseFrom(byte[] data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static perfetto.protos.ProcessTreeOuterClass.ProcessTree.Process parseFrom(
          byte[] data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static perfetto.protos.ProcessTreeOuterClass.ProcessTree.Process parseFrom(java.io.InputStream input)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseWithIOException(PARSER, input);
      }
      public static perfetto.protos.ProcessTreeOuterClass.ProcessTree.Process parseFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseWithIOException(PARSER, input, extensionRegistry);
      }
      public static perfetto.protos.ProcessTreeOuterClass.ProcessTree.Process parseDelimitedFrom(java.io.InputStream input)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseDelimitedWithIOException(PARSER, input);
      }
      public static perfetto.protos.ProcessTreeOuterClass.ProcessTree.Process parseDelimitedFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
      }
      public static perfetto.protos.ProcessTreeOuterClass.ProcessTree.Process parseFrom(
          com.google.protobuf.CodedInputStream input)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseWithIOException(PARSER, input);
      }
      public static perfetto.protos.ProcessTreeOuterClass.ProcessTree.Process parseFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseWithIOException(PARSER, input, extensionRegistry);
      }

      @java.lang.Override
      public Builder newBuilderForType() { return newBuilder(); }
      public static Builder newBuilder() {
        return DEFAULT_INSTANCE.toBuilder();
      }
      public static Builder newBuilder(perfetto.protos.ProcessTreeOuterClass.ProcessTree.Process prototype) {
        return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
      }
      @java.lang.Override
      public Builder toBuilder() {
        return this == DEFAULT_INSTANCE
            ? new Builder() : new Builder().mergeFrom(this);
      }

      @java.lang.Override
      protected Builder newBuilderForType(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        Builder builder = new Builder(parent);
        return builder;
      }
      /**
       * <pre>
       * Representation of a process.
       * </pre>
       *
       * Protobuf type {@code perfetto.protos.ProcessTree.Process}
       */
      public static final class Builder extends
          com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
          // @@protoc_insertion_point(builder_implements:perfetto.protos.ProcessTree.Process)
          perfetto.protos.ProcessTreeOuterClass.ProcessTree.ProcessOrBuilder {
        public static final com.google.protobuf.Descriptors.Descriptor
            getDescriptor() {
          return perfetto.protos.ProcessTreeOuterClass.internal_static_perfetto_protos_ProcessTree_Process_descriptor;
        }

        @java.lang.Override
        protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
            internalGetFieldAccessorTable() {
          return perfetto.protos.ProcessTreeOuterClass.internal_static_perfetto_protos_ProcessTree_Process_fieldAccessorTable
              .ensureFieldAccessorsInitialized(
                  perfetto.protos.ProcessTreeOuterClass.ProcessTree.Process.class, perfetto.protos.ProcessTreeOuterClass.ProcessTree.Process.Builder.class);
        }

        // Construct using perfetto.protos.ProcessTreeOuterClass.ProcessTree.Process.newBuilder()
        private Builder() {

        }

        private Builder(
            com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
          super(parent);

        }
        @java.lang.Override
        public Builder clear() {
          super.clear();
          bitField0_ = 0;
          pid_ = 0;
          ppid_ = 0;
          cmdline_ = com.google.protobuf.LazyStringArrayList.EMPTY;
          bitField0_ = (bitField0_ & ~0x00000004);
          if (threadsDeprecatedBuilder_ == null) {
            threadsDeprecated_ = java.util.Collections.emptyList();
          } else {
            threadsDeprecated_ = null;
            threadsDeprecatedBuilder_.clear();
          }
          bitField0_ = (bitField0_ & ~0x00000008);
          uid_ = 0;
          nspid_ = emptyIntList();
          return this;
        }

        @java.lang.Override
        public com.google.protobuf.Descriptors.Descriptor
            getDescriptorForType() {
          return perfetto.protos.ProcessTreeOuterClass.internal_static_perfetto_protos_ProcessTree_Process_descriptor;
        }

        @java.lang.Override
        public perfetto.protos.ProcessTreeOuterClass.ProcessTree.Process getDefaultInstanceForType() {
          return perfetto.protos.ProcessTreeOuterClass.ProcessTree.Process.getDefaultInstance();
        }

        @java.lang.Override
        public perfetto.protos.ProcessTreeOuterClass.ProcessTree.Process build() {
          perfetto.protos.ProcessTreeOuterClass.ProcessTree.Process result = buildPartial();
          if (!result.isInitialized()) {
            throw newUninitializedMessageException(result);
          }
          return result;
        }

        @java.lang.Override
        public perfetto.protos.ProcessTreeOuterClass.ProcessTree.Process buildPartial() {
          perfetto.protos.ProcessTreeOuterClass.ProcessTree.Process result = new perfetto.protos.ProcessTreeOuterClass.ProcessTree.Process(this);
          buildPartialRepeatedFields(result);
          if (bitField0_ != 0) { buildPartial0(result); }
          onBuilt();
          return result;
        }

        private void buildPartialRepeatedFields(perfetto.protos.ProcessTreeOuterClass.ProcessTree.Process result) {
          if (((bitField0_ & 0x00000004) != 0)) {
            cmdline_ = cmdline_.getUnmodifiableView();
            bitField0_ = (bitField0_ & ~0x00000004);
          }
          result.cmdline_ = cmdline_;
          if (threadsDeprecatedBuilder_ == null) {
            if (((bitField0_ & 0x00000008) != 0)) {
              threadsDeprecated_ = java.util.Collections.unmodifiableList(threadsDeprecated_);
              bitField0_ = (bitField0_ & ~0x00000008);
            }
            result.threadsDeprecated_ = threadsDeprecated_;
          } else {
            result.threadsDeprecated_ = threadsDeprecatedBuilder_.build();
          }
          if (((bitField0_ & 0x00000020) != 0)) {
            nspid_.makeImmutable();
            bitField0_ = (bitField0_ & ~0x00000020);
          }
          result.nspid_ = nspid_;
        }

        private void buildPartial0(perfetto.protos.ProcessTreeOuterClass.ProcessTree.Process result) {
          int from_bitField0_ = bitField0_;
          int to_bitField0_ = 0;
          if (((from_bitField0_ & 0x00000001) != 0)) {
            result.pid_ = pid_;
            to_bitField0_ |= 0x00000001;
          }
          if (((from_bitField0_ & 0x00000002) != 0)) {
            result.ppid_ = ppid_;
            to_bitField0_ |= 0x00000002;
          }
          if (((from_bitField0_ & 0x00000010) != 0)) {
            result.uid_ = uid_;
            to_bitField0_ |= 0x00000004;
          }
          result.bitField0_ |= to_bitField0_;
        }

        @java.lang.Override
        public Builder clone() {
          return super.clone();
        }
        @java.lang.Override
        public Builder setField(
            com.google.protobuf.Descriptors.FieldDescriptor field,
            java.lang.Object value) {
          return super.setField(field, value);
        }
        @java.lang.Override
        public Builder clearField(
            com.google.protobuf.Descriptors.FieldDescriptor field) {
          return super.clearField(field);
        }
        @java.lang.Override
        public Builder clearOneof(
            com.google.protobuf.Descriptors.OneofDescriptor oneof) {
          return super.clearOneof(oneof);
        }
        @java.lang.Override
        public Builder setRepeatedField(
            com.google.protobuf.Descriptors.FieldDescriptor field,
            int index, java.lang.Object value) {
          return super.setRepeatedField(field, index, value);
        }
        @java.lang.Override
        public Builder addRepeatedField(
            com.google.protobuf.Descriptors.FieldDescriptor field,
            java.lang.Object value) {
          return super.addRepeatedField(field, value);
        }
        @java.lang.Override
        public Builder mergeFrom(com.google.protobuf.Message other) {
          if (other instanceof perfetto.protos.ProcessTreeOuterClass.ProcessTree.Process) {
            return mergeFrom((perfetto.protos.ProcessTreeOuterClass.ProcessTree.Process)other);
          } else {
            super.mergeFrom(other);
            return this;
          }
        }

        public Builder mergeFrom(perfetto.protos.ProcessTreeOuterClass.ProcessTree.Process other) {
          if (other == perfetto.protos.ProcessTreeOuterClass.ProcessTree.Process.getDefaultInstance()) return this;
          if (other.hasPid()) {
            setPid(other.getPid());
          }
          if (other.hasPpid()) {
            setPpid(other.getPpid());
          }
          if (!other.cmdline_.isEmpty()) {
            if (cmdline_.isEmpty()) {
              cmdline_ = other.cmdline_;
              bitField0_ = (bitField0_ & ~0x00000004);
            } else {
              ensureCmdlineIsMutable();
              cmdline_.addAll(other.cmdline_);
            }
            onChanged();
          }
          if (threadsDeprecatedBuilder_ == null) {
            if (!other.threadsDeprecated_.isEmpty()) {
              if (threadsDeprecated_.isEmpty()) {
                threadsDeprecated_ = other.threadsDeprecated_;
                bitField0_ = (bitField0_ & ~0x00000008);
              } else {
                ensureThreadsDeprecatedIsMutable();
                threadsDeprecated_.addAll(other.threadsDeprecated_);
              }
              onChanged();
            }
          } else {
            if (!other.threadsDeprecated_.isEmpty()) {
              if (threadsDeprecatedBuilder_.isEmpty()) {
                threadsDeprecatedBuilder_.dispose();
                threadsDeprecatedBuilder_ = null;
                threadsDeprecated_ = other.threadsDeprecated_;
                bitField0_ = (bitField0_ & ~0x00000008);
                threadsDeprecatedBuilder_ = 
                  com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders ?
                     getThreadsDeprecatedFieldBuilder() : null;
              } else {
                threadsDeprecatedBuilder_.addAllMessages(other.threadsDeprecated_);
              }
            }
          }
          if (other.hasUid()) {
            setUid(other.getUid());
          }
          if (!other.nspid_.isEmpty()) {
            if (nspid_.isEmpty()) {
              nspid_ = other.nspid_;
              bitField0_ = (bitField0_ & ~0x00000020);
            } else {
              ensureNspidIsMutable();
              nspid_.addAll(other.nspid_);
            }
            onChanged();
          }
          this.mergeUnknownFields(other.getUnknownFields());
          onChanged();
          return this;
        }

        @java.lang.Override
        public final boolean isInitialized() {
          return true;
        }

        @java.lang.Override
        public Builder mergeFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws java.io.IOException {
          if (extensionRegistry == null) {
            throw new java.lang.NullPointerException();
          }
          try {
            boolean done = false;
            while (!done) {
              int tag = input.readTag();
              switch (tag) {
                case 0:
                  done = true;
                  break;
                case 8: {
                  pid_ = input.readInt32();
                  bitField0_ |= 0x00000001;
                  break;
                } // case 8
                case 16: {
                  ppid_ = input.readInt32();
                  bitField0_ |= 0x00000002;
                  break;
                } // case 16
                case 26: {
                  com.google.protobuf.ByteString bs = input.readBytes();
                  ensureCmdlineIsMutable();
                  cmdline_.add(bs);
                  break;
                } // case 26
                case 34: {
                  perfetto.protos.ProcessTreeOuterClass.ProcessTree.Thread m =
                      input.readMessage(
                          perfetto.protos.ProcessTreeOuterClass.ProcessTree.Thread.PARSER,
                          extensionRegistry);
                  if (threadsDeprecatedBuilder_ == null) {
                    ensureThreadsDeprecatedIsMutable();
                    threadsDeprecated_.add(m);
                  } else {
                    threadsDeprecatedBuilder_.addMessage(m);
                  }
                  break;
                } // case 34
                case 40: {
                  uid_ = input.readInt32();
                  bitField0_ |= 0x00000010;
                  break;
                } // case 40
                case 48: {
                  int v = input.readInt32();
                  ensureNspidIsMutable();
                  nspid_.addInt(v);
                  break;
                } // case 48
                case 50: {
                  int length = input.readRawVarint32();
                  int limit = input.pushLimit(length);
                  ensureNspidIsMutable();
                  while (input.getBytesUntilLimit() > 0) {
                    nspid_.addInt(input.readInt32());
                  }
                  input.popLimit(limit);
                  break;
                } // case 50
                default: {
                  if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                    done = true; // was an endgroup tag
                  }
                  break;
                } // default:
              } // switch (tag)
            } // while (!done)
          } catch (com.google.protobuf.InvalidProtocolBufferException e) {
            throw e.unwrapIOException();
          } finally {
            onChanged();
          } // finally
          return this;
        }
        private int bitField0_;

        private int pid_ ;
        /**
         * <pre>
         * The UNIX process ID, aka thread group ID (as per getpid()) in the root
         * PID namespace.
         * </pre>
         *
         * <code>optional int32 pid = 1;</code>
         * @return Whether the pid field is set.
         */
        @java.lang.Override
        public boolean hasPid() {
          return ((bitField0_ & 0x00000001) != 0);
        }
        /**
         * <pre>
         * The UNIX process ID, aka thread group ID (as per getpid()) in the root
         * PID namespace.
         * </pre>
         *
         * <code>optional int32 pid = 1;</code>
         * @return The pid.
         */
        @java.lang.Override
        public int getPid() {
          return pid_;
        }
        /**
         * <pre>
         * The UNIX process ID, aka thread group ID (as per getpid()) in the root
         * PID namespace.
         * </pre>
         *
         * <code>optional int32 pid = 1;</code>
         * @param value The pid to set.
         * @return This builder for chaining.
         */
        public Builder setPid(int value) {
          
          pid_ = value;
          bitField0_ |= 0x00000001;
          onChanged();
          return this;
        }
        /**
         * <pre>
         * The UNIX process ID, aka thread group ID (as per getpid()) in the root
         * PID namespace.
         * </pre>
         *
         * <code>optional int32 pid = 1;</code>
         * @return This builder for chaining.
         */
        public Builder clearPid() {
          bitField0_ = (bitField0_ & ~0x00000001);
          pid_ = 0;
          onChanged();
          return this;
        }

        private int ppid_ ;
        /**
         * <pre>
         * The parent process ID, as per getppid().
         * </pre>
         *
         * <code>optional int32 ppid = 2;</code>
         * @return Whether the ppid field is set.
         */
        @java.lang.Override
        public boolean hasPpid() {
          return ((bitField0_ & 0x00000002) != 0);
        }
        /**
         * <pre>
         * The parent process ID, as per getppid().
         * </pre>
         *
         * <code>optional int32 ppid = 2;</code>
         * @return The ppid.
         */
        @java.lang.Override
        public int getPpid() {
          return ppid_;
        }
        /**
         * <pre>
         * The parent process ID, as per getppid().
         * </pre>
         *
         * <code>optional int32 ppid = 2;</code>
         * @param value The ppid to set.
         * @return This builder for chaining.
         */
        public Builder setPpid(int value) {
          
          ppid_ = value;
          bitField0_ |= 0x00000002;
          onChanged();
          return this;
        }
        /**
         * <pre>
         * The parent process ID, as per getppid().
         * </pre>
         *
         * <code>optional int32 ppid = 2;</code>
         * @return This builder for chaining.
         */
        public Builder clearPpid() {
          bitField0_ = (bitField0_ & ~0x00000002);
          ppid_ = 0;
          onChanged();
          return this;
        }

        private com.google.protobuf.LazyStringList cmdline_ = com.google.protobuf.LazyStringArrayList.EMPTY;
        private void ensureCmdlineIsMutable() {
          if (!((bitField0_ & 0x00000004) != 0)) {
            cmdline_ = new com.google.protobuf.LazyStringArrayList(cmdline_);
            bitField0_ |= 0x00000004;
           }
        }
        /**
         * <pre>
         * The command line for the process, as per /proc/pid/cmdline.
         * If it is a kernel thread there will only be one cmdline field
         * and it will contain /proc/pid/comm.
         * </pre>
         *
         * <code>repeated string cmdline = 3;</code>
         * @return A list containing the cmdline.
         */
        public com.google.protobuf.ProtocolStringList
            getCmdlineList() {
          return cmdline_.getUnmodifiableView();
        }
        /**
         * <pre>
         * The command line for the process, as per /proc/pid/cmdline.
         * If it is a kernel thread there will only be one cmdline field
         * and it will contain /proc/pid/comm.
         * </pre>
         *
         * <code>repeated string cmdline = 3;</code>
         * @return The count of cmdline.
         */
        public int getCmdlineCount() {
          return cmdline_.size();
        }
        /**
         * <pre>
         * The command line for the process, as per /proc/pid/cmdline.
         * If it is a kernel thread there will only be one cmdline field
         * and it will contain /proc/pid/comm.
         * </pre>
         *
         * <code>repeated string cmdline = 3;</code>
         * @param index The index of the element to return.
         * @return The cmdline at the given index.
         */
        public java.lang.String getCmdline(int index) {
          return cmdline_.get(index);
        }
        /**
         * <pre>
         * The command line for the process, as per /proc/pid/cmdline.
         * If it is a kernel thread there will only be one cmdline field
         * and it will contain /proc/pid/comm.
         * </pre>
         *
         * <code>repeated string cmdline = 3;</code>
         * @param index The index of the value to return.
         * @return The bytes of the cmdline at the given index.
         */
        public com.google.protobuf.ByteString
            getCmdlineBytes(int index) {
          return cmdline_.getByteString(index);
        }
        /**
         * <pre>
         * The command line for the process, as per /proc/pid/cmdline.
         * If it is a kernel thread there will only be one cmdline field
         * and it will contain /proc/pid/comm.
         * </pre>
         *
         * <code>repeated string cmdline = 3;</code>
         * @param index The index to set the value at.
         * @param value The cmdline to set.
         * @return This builder for chaining.
         */
        public Builder setCmdline(
            int index, java.lang.String value) {
          if (value == null) { throw new NullPointerException(); }
          ensureCmdlineIsMutable();
          cmdline_.set(index, value);
          onChanged();
          return this;
        }
        /**
         * <pre>
         * The command line for the process, as per /proc/pid/cmdline.
         * If it is a kernel thread there will only be one cmdline field
         * and it will contain /proc/pid/comm.
         * </pre>
         *
         * <code>repeated string cmdline = 3;</code>
         * @param value The cmdline to add.
         * @return This builder for chaining.
         */
        public Builder addCmdline(
            java.lang.String value) {
          if (value == null) { throw new NullPointerException(); }
          ensureCmdlineIsMutable();
          cmdline_.add(value);
          onChanged();
          return this;
        }
        /**
         * <pre>
         * The command line for the process, as per /proc/pid/cmdline.
         * If it is a kernel thread there will only be one cmdline field
         * and it will contain /proc/pid/comm.
         * </pre>
         *
         * <code>repeated string cmdline = 3;</code>
         * @param values The cmdline to add.
         * @return This builder for chaining.
         */
        public Builder addAllCmdline(
            java.lang.Iterable<java.lang.String> values) {
          ensureCmdlineIsMutable();
          com.google.protobuf.AbstractMessageLite.Builder.addAll(
              values, cmdline_);
          onChanged();
          return this;
        }
        /**
         * <pre>
         * The command line for the process, as per /proc/pid/cmdline.
         * If it is a kernel thread there will only be one cmdline field
         * and it will contain /proc/pid/comm.
         * </pre>
         *
         * <code>repeated string cmdline = 3;</code>
         * @return This builder for chaining.
         */
        public Builder clearCmdline() {
          cmdline_ = com.google.protobuf.LazyStringArrayList.EMPTY;
          bitField0_ = (bitField0_ & ~0x00000004);
          onChanged();
          return this;
        }
        /**
         * <pre>
         * The command line for the process, as per /proc/pid/cmdline.
         * If it is a kernel thread there will only be one cmdline field
         * and it will contain /proc/pid/comm.
         * </pre>
         *
         * <code>repeated string cmdline = 3;</code>
         * @param value The bytes of the cmdline to add.
         * @return This builder for chaining.
         */
        public Builder addCmdlineBytes(
            com.google.protobuf.ByteString value) {
          if (value == null) { throw new NullPointerException(); }
          ensureCmdlineIsMutable();
          cmdline_.add(value);
          onChanged();
          return this;
        }

        private java.util.List<perfetto.protos.ProcessTreeOuterClass.ProcessTree.Thread> threadsDeprecated_ =
          java.util.Collections.emptyList();
        private void ensureThreadsDeprecatedIsMutable() {
          if (!((bitField0_ & 0x00000008) != 0)) {
            threadsDeprecated_ = new java.util.ArrayList<perfetto.protos.ProcessTreeOuterClass.ProcessTree.Thread>(threadsDeprecated_);
            bitField0_ |= 0x00000008;
           }
        }

        private com.google.protobuf.RepeatedFieldBuilderV3<
            perfetto.protos.ProcessTreeOuterClass.ProcessTree.Thread, perfetto.protos.ProcessTreeOuterClass.ProcessTree.Thread.Builder, perfetto.protos.ProcessTreeOuterClass.ProcessTree.ThreadOrBuilder> threadsDeprecatedBuilder_;

        /**
         * <pre>
         * No longer used as of Apr 2018, when the dedicated |threads| field was
         * introduced in ProcessTree.
         * </pre>
         *
         * <code>repeated .perfetto.protos.ProcessTree.Thread threads_deprecated = 4 [deprecated = true];</code>
         */
        @java.lang.Deprecated public java.util.List<perfetto.protos.ProcessTreeOuterClass.ProcessTree.Thread> getThreadsDeprecatedList() {
          if (threadsDeprecatedBuilder_ == null) {
            return java.util.Collections.unmodifiableList(threadsDeprecated_);
          } else {
            return threadsDeprecatedBuilder_.getMessageList();
          }
        }
        /**
         * <pre>
         * No longer used as of Apr 2018, when the dedicated |threads| field was
         * introduced in ProcessTree.
         * </pre>
         *
         * <code>repeated .perfetto.protos.ProcessTree.Thread threads_deprecated = 4 [deprecated = true];</code>
         */
        @java.lang.Deprecated public int getThreadsDeprecatedCount() {
          if (threadsDeprecatedBuilder_ == null) {
            return threadsDeprecated_.size();
          } else {
            return threadsDeprecatedBuilder_.getCount();
          }
        }
        /**
         * <pre>
         * No longer used as of Apr 2018, when the dedicated |threads| field was
         * introduced in ProcessTree.
         * </pre>
         *
         * <code>repeated .perfetto.protos.ProcessTree.Thread threads_deprecated = 4 [deprecated = true];</code>
         */
        @java.lang.Deprecated public perfetto.protos.ProcessTreeOuterClass.ProcessTree.Thread getThreadsDeprecated(int index) {
          if (threadsDeprecatedBuilder_ == null) {
            return threadsDeprecated_.get(index);
          } else {
            return threadsDeprecatedBuilder_.getMessage(index);
          }
        }
        /**
         * <pre>
         * No longer used as of Apr 2018, when the dedicated |threads| field was
         * introduced in ProcessTree.
         * </pre>
         *
         * <code>repeated .perfetto.protos.ProcessTree.Thread threads_deprecated = 4 [deprecated = true];</code>
         */
        @java.lang.Deprecated public Builder setThreadsDeprecated(
            int index, perfetto.protos.ProcessTreeOuterClass.ProcessTree.Thread value) {
          if (threadsDeprecatedBuilder_ == null) {
            if (value == null) {
              throw new NullPointerException();
            }
            ensureThreadsDeprecatedIsMutable();
            threadsDeprecated_.set(index, value);
            onChanged();
          } else {
            threadsDeprecatedBuilder_.setMessage(index, value);
          }
          return this;
        }
        /**
         * <pre>
         * No longer used as of Apr 2018, when the dedicated |threads| field was
         * introduced in ProcessTree.
         * </pre>
         *
         * <code>repeated .perfetto.protos.ProcessTree.Thread threads_deprecated = 4 [deprecated = true];</code>
         */
        @java.lang.Deprecated public Builder setThreadsDeprecated(
            int index, perfetto.protos.ProcessTreeOuterClass.ProcessTree.Thread.Builder builderForValue) {
          if (threadsDeprecatedBuilder_ == null) {
            ensureThreadsDeprecatedIsMutable();
            threadsDeprecated_.set(index, builderForValue.build());
            onChanged();
          } else {
            threadsDeprecatedBuilder_.setMessage(index, builderForValue.build());
          }
          return this;
        }
        /**
         * <pre>
         * No longer used as of Apr 2018, when the dedicated |threads| field was
         * introduced in ProcessTree.
         * </pre>
         *
         * <code>repeated .perfetto.protos.ProcessTree.Thread threads_deprecated = 4 [deprecated = true];</code>
         */
        @java.lang.Deprecated public Builder addThreadsDeprecated(perfetto.protos.ProcessTreeOuterClass.ProcessTree.Thread value) {
          if (threadsDeprecatedBuilder_ == null) {
            if (value == null) {
              throw new NullPointerException();
            }
            ensureThreadsDeprecatedIsMutable();
            threadsDeprecated_.add(value);
            onChanged();
          } else {
            threadsDeprecatedBuilder_.addMessage(value);
          }
          return this;
        }
        /**
         * <pre>
         * No longer used as of Apr 2018, when the dedicated |threads| field was
         * introduced in ProcessTree.
         * </pre>
         *
         * <code>repeated .perfetto.protos.ProcessTree.Thread threads_deprecated = 4 [deprecated = true];</code>
         */
        @java.lang.Deprecated public Builder addThreadsDeprecated(
            int index, perfetto.protos.ProcessTreeOuterClass.ProcessTree.Thread value) {
          if (threadsDeprecatedBuilder_ == null) {
            if (value == null) {
              throw new NullPointerException();
            }
            ensureThreadsDeprecatedIsMutable();
            threadsDeprecated_.add(index, value);
            onChanged();
          } else {
            threadsDeprecatedBuilder_.addMessage(index, value);
          }
          return this;
        }
        /**
         * <pre>
         * No longer used as of Apr 2018, when the dedicated |threads| field was
         * introduced in ProcessTree.
         * </pre>
         *
         * <code>repeated .perfetto.protos.ProcessTree.Thread threads_deprecated = 4 [deprecated = true];</code>
         */
        @java.lang.Deprecated public Builder addThreadsDeprecated(
            perfetto.protos.ProcessTreeOuterClass.ProcessTree.Thread.Builder builderForValue) {
          if (threadsDeprecatedBuilder_ == null) {
            ensureThreadsDeprecatedIsMutable();
            threadsDeprecated_.add(builderForValue.build());
            onChanged();
          } else {
            threadsDeprecatedBuilder_.addMessage(builderForValue.build());
          }
          return this;
        }
        /**
         * <pre>
         * No longer used as of Apr 2018, when the dedicated |threads| field was
         * introduced in ProcessTree.
         * </pre>
         *
         * <code>repeated .perfetto.protos.ProcessTree.Thread threads_deprecated = 4 [deprecated = true];</code>
         */
        @java.lang.Deprecated public Builder addThreadsDeprecated(
            int index, perfetto.protos.ProcessTreeOuterClass.ProcessTree.Thread.Builder builderForValue) {
          if (threadsDeprecatedBuilder_ == null) {
            ensureThreadsDeprecatedIsMutable();
            threadsDeprecated_.add(index, builderForValue.build());
            onChanged();
          } else {
            threadsDeprecatedBuilder_.addMessage(index, builderForValue.build());
          }
          return this;
        }
        /**
         * <pre>
         * No longer used as of Apr 2018, when the dedicated |threads| field was
         * introduced in ProcessTree.
         * </pre>
         *
         * <code>repeated .perfetto.protos.ProcessTree.Thread threads_deprecated = 4 [deprecated = true];</code>
         */
        @java.lang.Deprecated public Builder addAllThreadsDeprecated(
            java.lang.Iterable<? extends perfetto.protos.ProcessTreeOuterClass.ProcessTree.Thread> values) {
          if (threadsDeprecatedBuilder_ == null) {
            ensureThreadsDeprecatedIsMutable();
            com.google.protobuf.AbstractMessageLite.Builder.addAll(
                values, threadsDeprecated_);
            onChanged();
          } else {
            threadsDeprecatedBuilder_.addAllMessages(values);
          }
          return this;
        }
        /**
         * <pre>
         * No longer used as of Apr 2018, when the dedicated |threads| field was
         * introduced in ProcessTree.
         * </pre>
         *
         * <code>repeated .perfetto.protos.ProcessTree.Thread threads_deprecated = 4 [deprecated = true];</code>
         */
        @java.lang.Deprecated public Builder clearThreadsDeprecated() {
          if (threadsDeprecatedBuilder_ == null) {
            threadsDeprecated_ = java.util.Collections.emptyList();
            bitField0_ = (bitField0_ & ~0x00000008);
            onChanged();
          } else {
            threadsDeprecatedBuilder_.clear();
          }
          return this;
        }
        /**
         * <pre>
         * No longer used as of Apr 2018, when the dedicated |threads| field was
         * introduced in ProcessTree.
         * </pre>
         *
         * <code>repeated .perfetto.protos.ProcessTree.Thread threads_deprecated = 4 [deprecated = true];</code>
         */
        @java.lang.Deprecated public Builder removeThreadsDeprecated(int index) {
          if (threadsDeprecatedBuilder_ == null) {
            ensureThreadsDeprecatedIsMutable();
            threadsDeprecated_.remove(index);
            onChanged();
          } else {
            threadsDeprecatedBuilder_.remove(index);
          }
          return this;
        }
        /**
         * <pre>
         * No longer used as of Apr 2018, when the dedicated |threads| field was
         * introduced in ProcessTree.
         * </pre>
         *
         * <code>repeated .perfetto.protos.ProcessTree.Thread threads_deprecated = 4 [deprecated = true];</code>
         */
        @java.lang.Deprecated public perfetto.protos.ProcessTreeOuterClass.ProcessTree.Thread.Builder getThreadsDeprecatedBuilder(
            int index) {
          return getThreadsDeprecatedFieldBuilder().getBuilder(index);
        }
        /**
         * <pre>
         * No longer used as of Apr 2018, when the dedicated |threads| field was
         * introduced in ProcessTree.
         * </pre>
         *
         * <code>repeated .perfetto.protos.ProcessTree.Thread threads_deprecated = 4 [deprecated = true];</code>
         */
        @java.lang.Deprecated public perfetto.protos.ProcessTreeOuterClass.ProcessTree.ThreadOrBuilder getThreadsDeprecatedOrBuilder(
            int index) {
          if (threadsDeprecatedBuilder_ == null) {
            return threadsDeprecated_.get(index);  } else {
            return threadsDeprecatedBuilder_.getMessageOrBuilder(index);
          }
        }
        /**
         * <pre>
         * No longer used as of Apr 2018, when the dedicated |threads| field was
         * introduced in ProcessTree.
         * </pre>
         *
         * <code>repeated .perfetto.protos.ProcessTree.Thread threads_deprecated = 4 [deprecated = true];</code>
         */
        @java.lang.Deprecated public java.util.List<? extends perfetto.protos.ProcessTreeOuterClass.ProcessTree.ThreadOrBuilder> 
             getThreadsDeprecatedOrBuilderList() {
          if (threadsDeprecatedBuilder_ != null) {
            return threadsDeprecatedBuilder_.getMessageOrBuilderList();
          } else {
            return java.util.Collections.unmodifiableList(threadsDeprecated_);
          }
        }
        /**
         * <pre>
         * No longer used as of Apr 2018, when the dedicated |threads| field was
         * introduced in ProcessTree.
         * </pre>
         *
         * <code>repeated .perfetto.protos.ProcessTree.Thread threads_deprecated = 4 [deprecated = true];</code>
         */
        @java.lang.Deprecated public perfetto.protos.ProcessTreeOuterClass.ProcessTree.Thread.Builder addThreadsDeprecatedBuilder() {
          return getThreadsDeprecatedFieldBuilder().addBuilder(
              perfetto.protos.ProcessTreeOuterClass.ProcessTree.Thread.getDefaultInstance());
        }
        /**
         * <pre>
         * No longer used as of Apr 2018, when the dedicated |threads| field was
         * introduced in ProcessTree.
         * </pre>
         *
         * <code>repeated .perfetto.protos.ProcessTree.Thread threads_deprecated = 4 [deprecated = true];</code>
         */
        @java.lang.Deprecated public perfetto.protos.ProcessTreeOuterClass.ProcessTree.Thread.Builder addThreadsDeprecatedBuilder(
            int index) {
          return getThreadsDeprecatedFieldBuilder().addBuilder(
              index, perfetto.protos.ProcessTreeOuterClass.ProcessTree.Thread.getDefaultInstance());
        }
        /**
         * <pre>
         * No longer used as of Apr 2018, when the dedicated |threads| field was
         * introduced in ProcessTree.
         * </pre>
         *
         * <code>repeated .perfetto.protos.ProcessTree.Thread threads_deprecated = 4 [deprecated = true];</code>
         */
        @java.lang.Deprecated public java.util.List<perfetto.protos.ProcessTreeOuterClass.ProcessTree.Thread.Builder> 
             getThreadsDeprecatedBuilderList() {
          return getThreadsDeprecatedFieldBuilder().getBuilderList();
        }
        private com.google.protobuf.RepeatedFieldBuilderV3<
            perfetto.protos.ProcessTreeOuterClass.ProcessTree.Thread, perfetto.protos.ProcessTreeOuterClass.ProcessTree.Thread.Builder, perfetto.protos.ProcessTreeOuterClass.ProcessTree.ThreadOrBuilder> 
            getThreadsDeprecatedFieldBuilder() {
          if (threadsDeprecatedBuilder_ == null) {
            threadsDeprecatedBuilder_ = new com.google.protobuf.RepeatedFieldBuilderV3<
                perfetto.protos.ProcessTreeOuterClass.ProcessTree.Thread, perfetto.protos.ProcessTreeOuterClass.ProcessTree.Thread.Builder, perfetto.protos.ProcessTreeOuterClass.ProcessTree.ThreadOrBuilder>(
                    threadsDeprecated_,
                    ((bitField0_ & 0x00000008) != 0),
                    getParentForChildren(),
                    isClean());
            threadsDeprecated_ = null;
          }
          return threadsDeprecatedBuilder_;
        }

        private int uid_ ;
        /**
         * <pre>
         * The uid for the process, as per /proc/pid/status.
         * </pre>
         *
         * <code>optional int32 uid = 5;</code>
         * @return Whether the uid field is set.
         */
        @java.lang.Override
        public boolean hasUid() {
          return ((bitField0_ & 0x00000010) != 0);
        }
        /**
         * <pre>
         * The uid for the process, as per /proc/pid/status.
         * </pre>
         *
         * <code>optional int32 uid = 5;</code>
         * @return The uid.
         */
        @java.lang.Override
        public int getUid() {
          return uid_;
        }
        /**
         * <pre>
         * The uid for the process, as per /proc/pid/status.
         * </pre>
         *
         * <code>optional int32 uid = 5;</code>
         * @param value The uid to set.
         * @return This builder for chaining.
         */
        public Builder setUid(int value) {
          
          uid_ = value;
          bitField0_ |= 0x00000010;
          onChanged();
          return this;
        }
        /**
         * <pre>
         * The uid for the process, as per /proc/pid/status.
         * </pre>
         *
         * <code>optional int32 uid = 5;</code>
         * @return This builder for chaining.
         */
        public Builder clearUid() {
          bitField0_ = (bitField0_ & ~0x00000010);
          uid_ = 0;
          onChanged();
          return this;
        }

        private com.google.protobuf.Internal.IntList nspid_ = emptyIntList();
        private void ensureNspidIsMutable() {
          if (!((bitField0_ & 0x00000020) != 0)) {
            nspid_ = mutableCopy(nspid_);
            bitField0_ |= 0x00000020;
          }
        }
        /**
         * <pre>
         * The non-root-level process IDs if the process runs in a PID namespace.
         * Read from the NSpid entry of /proc/&lt;pid&gt;/status, with the first element (
         * root-level process ID) omitted.
         * </pre>
         *
         * <code>repeated int32 nspid = 6;</code>
         * @return A list containing the nspid.
         */
        public java.util.List<java.lang.Integer>
            getNspidList() {
          return ((bitField0_ & 0x00000020) != 0) ?
                   java.util.Collections.unmodifiableList(nspid_) : nspid_;
        }
        /**
         * <pre>
         * The non-root-level process IDs if the process runs in a PID namespace.
         * Read from the NSpid entry of /proc/&lt;pid&gt;/status, with the first element (
         * root-level process ID) omitted.
         * </pre>
         *
         * <code>repeated int32 nspid = 6;</code>
         * @return The count of nspid.
         */
        public int getNspidCount() {
          return nspid_.size();
        }
        /**
         * <pre>
         * The non-root-level process IDs if the process runs in a PID namespace.
         * Read from the NSpid entry of /proc/&lt;pid&gt;/status, with the first element (
         * root-level process ID) omitted.
         * </pre>
         *
         * <code>repeated int32 nspid = 6;</code>
         * @param index The index of the element to return.
         * @return The nspid at the given index.
         */
        public int getNspid(int index) {
          return nspid_.getInt(index);
        }
        /**
         * <pre>
         * The non-root-level process IDs if the process runs in a PID namespace.
         * Read from the NSpid entry of /proc/&lt;pid&gt;/status, with the first element (
         * root-level process ID) omitted.
         * </pre>
         *
         * <code>repeated int32 nspid = 6;</code>
         * @param index The index to set the value at.
         * @param value The nspid to set.
         * @return This builder for chaining.
         */
        public Builder setNspid(
            int index, int value) {
          
          ensureNspidIsMutable();
          nspid_.setInt(index, value);
          onChanged();
          return this;
        }
        /**
         * <pre>
         * The non-root-level process IDs if the process runs in a PID namespace.
         * Read from the NSpid entry of /proc/&lt;pid&gt;/status, with the first element (
         * root-level process ID) omitted.
         * </pre>
         *
         * <code>repeated int32 nspid = 6;</code>
         * @param value The nspid to add.
         * @return This builder for chaining.
         */
        public Builder addNspid(int value) {
          
          ensureNspidIsMutable();
          nspid_.addInt(value);
          onChanged();
          return this;
        }
        /**
         * <pre>
         * The non-root-level process IDs if the process runs in a PID namespace.
         * Read from the NSpid entry of /proc/&lt;pid&gt;/status, with the first element (
         * root-level process ID) omitted.
         * </pre>
         *
         * <code>repeated int32 nspid = 6;</code>
         * @param values The nspid to add.
         * @return This builder for chaining.
         */
        public Builder addAllNspid(
            java.lang.Iterable<? extends java.lang.Integer> values) {
          ensureNspidIsMutable();
          com.google.protobuf.AbstractMessageLite.Builder.addAll(
              values, nspid_);
          onChanged();
          return this;
        }
        /**
         * <pre>
         * The non-root-level process IDs if the process runs in a PID namespace.
         * Read from the NSpid entry of /proc/&lt;pid&gt;/status, with the first element (
         * root-level process ID) omitted.
         * </pre>
         *
         * <code>repeated int32 nspid = 6;</code>
         * @return This builder for chaining.
         */
        public Builder clearNspid() {
          nspid_ = emptyIntList();
          bitField0_ = (bitField0_ & ~0x00000020);
          onChanged();
          return this;
        }
        @java.lang.Override
        public final Builder setUnknownFields(
            final com.google.protobuf.UnknownFieldSet unknownFields) {
          return super.setUnknownFields(unknownFields);
        }

        @java.lang.Override
        public final Builder mergeUnknownFields(
            final com.google.protobuf.UnknownFieldSet unknownFields) {
          return super.mergeUnknownFields(unknownFields);
        }


        // @@protoc_insertion_point(builder_scope:perfetto.protos.ProcessTree.Process)
      }

      // @@protoc_insertion_point(class_scope:perfetto.protos.ProcessTree.Process)
      private static final perfetto.protos.ProcessTreeOuterClass.ProcessTree.Process DEFAULT_INSTANCE;
      static {
        DEFAULT_INSTANCE = new perfetto.protos.ProcessTreeOuterClass.ProcessTree.Process();
      }

      public static perfetto.protos.ProcessTreeOuterClass.ProcessTree.Process getDefaultInstance() {
        return DEFAULT_INSTANCE;
      }

      @java.lang.Deprecated public static final com.google.protobuf.Parser<Process>
          PARSER = new com.google.protobuf.AbstractParser<Process>() {
        @java.lang.Override
        public Process parsePartialFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws com.google.protobuf.InvalidProtocolBufferException {
          Builder builder = newBuilder();
          try {
            builder.mergeFrom(input, extensionRegistry);
          } catch (com.google.protobuf.InvalidProtocolBufferException e) {
            throw e.setUnfinishedMessage(builder.buildPartial());
          } catch (com.google.protobuf.UninitializedMessageException e) {
            throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
          } catch (java.io.IOException e) {
            throw new com.google.protobuf.InvalidProtocolBufferException(e)
                .setUnfinishedMessage(builder.buildPartial());
          }
          return builder.buildPartial();
        }
      };

      public static com.google.protobuf.Parser<Process> parser() {
        return PARSER;
      }

      @java.lang.Override
      public com.google.protobuf.Parser<Process> getParserForType() {
        return PARSER;
      }

      @java.lang.Override
      public perfetto.protos.ProcessTreeOuterClass.ProcessTree.Process getDefaultInstanceForType() {
        return DEFAULT_INSTANCE;
      }

    }

    private int bitField0_;
    public static final int PROCESSES_FIELD_NUMBER = 1;
    @SuppressWarnings("serial")
    private java.util.List<perfetto.protos.ProcessTreeOuterClass.ProcessTree.Process> processes_;
    /**
     * <pre>
     * List of processes and threads in the client. These lists are incremental
     * and not exhaustive. A process and its threads might show up separately in
     * different ProcessTree messages. A thread might event not show up at all, if
     * no sched_switch activity was detected, for instance:
     * #0 { processes: [{pid: 10, ...}], threads: [{pid: 11, tgid: 10}] }
     * #1 { threads: [{pid: 12, tgid: 10}] }
     * #2 { processes: [{pid: 20, ...}], threads: [{pid: 13, tgid: 10}] }
     * </pre>
     *
     * <code>repeated .perfetto.protos.ProcessTree.Process processes = 1;</code>
     */
    @java.lang.Override
    public java.util.List<perfetto.protos.ProcessTreeOuterClass.ProcessTree.Process> getProcessesList() {
      return processes_;
    }
    /**
     * <pre>
     * List of processes and threads in the client. These lists are incremental
     * and not exhaustive. A process and its threads might show up separately in
     * different ProcessTree messages. A thread might event not show up at all, if
     * no sched_switch activity was detected, for instance:
     * #0 { processes: [{pid: 10, ...}], threads: [{pid: 11, tgid: 10}] }
     * #1 { threads: [{pid: 12, tgid: 10}] }
     * #2 { processes: [{pid: 20, ...}], threads: [{pid: 13, tgid: 10}] }
     * </pre>
     *
     * <code>repeated .perfetto.protos.ProcessTree.Process processes = 1;</code>
     */
    @java.lang.Override
    public java.util.List<? extends perfetto.protos.ProcessTreeOuterClass.ProcessTree.ProcessOrBuilder> 
        getProcessesOrBuilderList() {
      return processes_;
    }
    /**
     * <pre>
     * List of processes and threads in the client. These lists are incremental
     * and not exhaustive. A process and its threads might show up separately in
     * different ProcessTree messages. A thread might event not show up at all, if
     * no sched_switch activity was detected, for instance:
     * #0 { processes: [{pid: 10, ...}], threads: [{pid: 11, tgid: 10}] }
     * #1 { threads: [{pid: 12, tgid: 10}] }
     * #2 { processes: [{pid: 20, ...}], threads: [{pid: 13, tgid: 10}] }
     * </pre>
     *
     * <code>repeated .perfetto.protos.ProcessTree.Process processes = 1;</code>
     */
    @java.lang.Override
    public int getProcessesCount() {
      return processes_.size();
    }
    /**
     * <pre>
     * List of processes and threads in the client. These lists are incremental
     * and not exhaustive. A process and its threads might show up separately in
     * different ProcessTree messages. A thread might event not show up at all, if
     * no sched_switch activity was detected, for instance:
     * #0 { processes: [{pid: 10, ...}], threads: [{pid: 11, tgid: 10}] }
     * #1 { threads: [{pid: 12, tgid: 10}] }
     * #2 { processes: [{pid: 20, ...}], threads: [{pid: 13, tgid: 10}] }
     * </pre>
     *
     * <code>repeated .perfetto.protos.ProcessTree.Process processes = 1;</code>
     */
    @java.lang.Override
    public perfetto.protos.ProcessTreeOuterClass.ProcessTree.Process getProcesses(int index) {
      return processes_.get(index);
    }
    /**
     * <pre>
     * List of processes and threads in the client. These lists are incremental
     * and not exhaustive. A process and its threads might show up separately in
     * different ProcessTree messages. A thread might event not show up at all, if
     * no sched_switch activity was detected, for instance:
     * #0 { processes: [{pid: 10, ...}], threads: [{pid: 11, tgid: 10}] }
     * #1 { threads: [{pid: 12, tgid: 10}] }
     * #2 { processes: [{pid: 20, ...}], threads: [{pid: 13, tgid: 10}] }
     * </pre>
     *
     * <code>repeated .perfetto.protos.ProcessTree.Process processes = 1;</code>
     */
    @java.lang.Override
    public perfetto.protos.ProcessTreeOuterClass.ProcessTree.ProcessOrBuilder getProcessesOrBuilder(
        int index) {
      return processes_.get(index);
    }

    public static final int THREADS_FIELD_NUMBER = 2;
    @SuppressWarnings("serial")
    private java.util.List<perfetto.protos.ProcessTreeOuterClass.ProcessTree.Thread> threads_;
    /**
     * <code>repeated .perfetto.protos.ProcessTree.Thread threads = 2;</code>
     */
    @java.lang.Override
    public java.util.List<perfetto.protos.ProcessTreeOuterClass.ProcessTree.Thread> getThreadsList() {
      return threads_;
    }
    /**
     * <code>repeated .perfetto.protos.ProcessTree.Thread threads = 2;</code>
     */
    @java.lang.Override
    public java.util.List<? extends perfetto.protos.ProcessTreeOuterClass.ProcessTree.ThreadOrBuilder> 
        getThreadsOrBuilderList() {
      return threads_;
    }
    /**
     * <code>repeated .perfetto.protos.ProcessTree.Thread threads = 2;</code>
     */
    @java.lang.Override
    public int getThreadsCount() {
      return threads_.size();
    }
    /**
     * <code>repeated .perfetto.protos.ProcessTree.Thread threads = 2;</code>
     */
    @java.lang.Override
    public perfetto.protos.ProcessTreeOuterClass.ProcessTree.Thread getThreads(int index) {
      return threads_.get(index);
    }
    /**
     * <code>repeated .perfetto.protos.ProcessTree.Thread threads = 2;</code>
     */
    @java.lang.Override
    public perfetto.protos.ProcessTreeOuterClass.ProcessTree.ThreadOrBuilder getThreadsOrBuilder(
        int index) {
      return threads_.get(index);
    }

    public static final int COLLECTION_END_TIMESTAMP_FIELD_NUMBER = 3;
    private long collectionEndTimestamp_ = 0L;
    /**
     * <pre>
     * The time at which we finish collecting this process tree;
     * the top-level packet timestamp is the time at which
     * we begin collection.
     * </pre>
     *
     * <code>optional uint64 collection_end_timestamp = 3;</code>
     * @return Whether the collectionEndTimestamp field is set.
     */
    @java.lang.Override
    public boolean hasCollectionEndTimestamp() {
      return ((bitField0_ & 0x00000001) != 0);
    }
    /**
     * <pre>
     * The time at which we finish collecting this process tree;
     * the top-level packet timestamp is the time at which
     * we begin collection.
     * </pre>
     *
     * <code>optional uint64 collection_end_timestamp = 3;</code>
     * @return The collectionEndTimestamp.
     */
    @java.lang.Override
    public long getCollectionEndTimestamp() {
      return collectionEndTimestamp_;
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      for (int i = 0; i < processes_.size(); i++) {
        output.writeMessage(1, processes_.get(i));
      }
      for (int i = 0; i < threads_.size(); i++) {
        output.writeMessage(2, threads_.get(i));
      }
      if (((bitField0_ & 0x00000001) != 0)) {
        output.writeUInt64(3, collectionEndTimestamp_);
      }
      getUnknownFields().writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      for (int i = 0; i < processes_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(1, processes_.get(i));
      }
      for (int i = 0; i < threads_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(2, threads_.get(i));
      }
      if (((bitField0_ & 0x00000001) != 0)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt64Size(3, collectionEndTimestamp_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof perfetto.protos.ProcessTreeOuterClass.ProcessTree)) {
        return super.equals(obj);
      }
      perfetto.protos.ProcessTreeOuterClass.ProcessTree other = (perfetto.protos.ProcessTreeOuterClass.ProcessTree) obj;

      if (!getProcessesList()
          .equals(other.getProcessesList())) return false;
      if (!getThreadsList()
          .equals(other.getThreadsList())) return false;
      if (hasCollectionEndTimestamp() != other.hasCollectionEndTimestamp()) return false;
      if (hasCollectionEndTimestamp()) {
        if (getCollectionEndTimestamp()
            != other.getCollectionEndTimestamp()) return false;
      }
      if (!getUnknownFields().equals(other.getUnknownFields())) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      if (getProcessesCount() > 0) {
        hash = (37 * hash) + PROCESSES_FIELD_NUMBER;
        hash = (53 * hash) + getProcessesList().hashCode();
      }
      if (getThreadsCount() > 0) {
        hash = (37 * hash) + THREADS_FIELD_NUMBER;
        hash = (53 * hash) + getThreadsList().hashCode();
      }
      if (hasCollectionEndTimestamp()) {
        hash = (37 * hash) + COLLECTION_END_TIMESTAMP_FIELD_NUMBER;
        hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
            getCollectionEndTimestamp());
      }
      hash = (29 * hash) + getUnknownFields().hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static perfetto.protos.ProcessTreeOuterClass.ProcessTree parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static perfetto.protos.ProcessTreeOuterClass.ProcessTree parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static perfetto.protos.ProcessTreeOuterClass.ProcessTree parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static perfetto.protos.ProcessTreeOuterClass.ProcessTree parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static perfetto.protos.ProcessTreeOuterClass.ProcessTree parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static perfetto.protos.ProcessTreeOuterClass.ProcessTree parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static perfetto.protos.ProcessTreeOuterClass.ProcessTree parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static perfetto.protos.ProcessTreeOuterClass.ProcessTree parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static perfetto.protos.ProcessTreeOuterClass.ProcessTree parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static perfetto.protos.ProcessTreeOuterClass.ProcessTree parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static perfetto.protos.ProcessTreeOuterClass.ProcessTree parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static perfetto.protos.ProcessTreeOuterClass.ProcessTree parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(perfetto.protos.ProcessTreeOuterClass.ProcessTree prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * <pre>
     * Metadata about the processes and threads in the trace.
     * Note: this proto was designed to be filled in by traced_probes and should
     * only be populated with accurate information coming from the system. Other
     * trace writers should prefer to fill ThreadDescriptor and ProcessDescriptor
     * in TrackDescriptor.
     * </pre>
     *
     * Protobuf type {@code perfetto.protos.ProcessTree}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:perfetto.protos.ProcessTree)
        perfetto.protos.ProcessTreeOuterClass.ProcessTreeOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return perfetto.protos.ProcessTreeOuterClass.internal_static_perfetto_protos_ProcessTree_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return perfetto.protos.ProcessTreeOuterClass.internal_static_perfetto_protos_ProcessTree_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                perfetto.protos.ProcessTreeOuterClass.ProcessTree.class, perfetto.protos.ProcessTreeOuterClass.ProcessTree.Builder.class);
      }

      // Construct using perfetto.protos.ProcessTreeOuterClass.ProcessTree.newBuilder()
      private Builder() {

      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);

      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        bitField0_ = 0;
        if (processesBuilder_ == null) {
          processes_ = java.util.Collections.emptyList();
        } else {
          processes_ = null;
          processesBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000001);
        if (threadsBuilder_ == null) {
          threads_ = java.util.Collections.emptyList();
        } else {
          threads_ = null;
          threadsBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000002);
        collectionEndTimestamp_ = 0L;
        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return perfetto.protos.ProcessTreeOuterClass.internal_static_perfetto_protos_ProcessTree_descriptor;
      }

      @java.lang.Override
      public perfetto.protos.ProcessTreeOuterClass.ProcessTree getDefaultInstanceForType() {
        return perfetto.protos.ProcessTreeOuterClass.ProcessTree.getDefaultInstance();
      }

      @java.lang.Override
      public perfetto.protos.ProcessTreeOuterClass.ProcessTree build() {
        perfetto.protos.ProcessTreeOuterClass.ProcessTree result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public perfetto.protos.ProcessTreeOuterClass.ProcessTree buildPartial() {
        perfetto.protos.ProcessTreeOuterClass.ProcessTree result = new perfetto.protos.ProcessTreeOuterClass.ProcessTree(this);
        buildPartialRepeatedFields(result);
        if (bitField0_ != 0) { buildPartial0(result); }
        onBuilt();
        return result;
      }

      private void buildPartialRepeatedFields(perfetto.protos.ProcessTreeOuterClass.ProcessTree result) {
        if (processesBuilder_ == null) {
          if (((bitField0_ & 0x00000001) != 0)) {
            processes_ = java.util.Collections.unmodifiableList(processes_);
            bitField0_ = (bitField0_ & ~0x00000001);
          }
          result.processes_ = processes_;
        } else {
          result.processes_ = processesBuilder_.build();
        }
        if (threadsBuilder_ == null) {
          if (((bitField0_ & 0x00000002) != 0)) {
            threads_ = java.util.Collections.unmodifiableList(threads_);
            bitField0_ = (bitField0_ & ~0x00000002);
          }
          result.threads_ = threads_;
        } else {
          result.threads_ = threadsBuilder_.build();
        }
      }

      private void buildPartial0(perfetto.protos.ProcessTreeOuterClass.ProcessTree result) {
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000004) != 0)) {
          result.collectionEndTimestamp_ = collectionEndTimestamp_;
          to_bitField0_ |= 0x00000001;
        }
        result.bitField0_ |= to_bitField0_;
      }

      @java.lang.Override
      public Builder clone() {
        return super.clone();
      }
      @java.lang.Override
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.setField(field, value);
      }
      @java.lang.Override
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return super.clearField(field);
      }
      @java.lang.Override
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return super.clearOneof(oneof);
      }
      @java.lang.Override
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, java.lang.Object value) {
        return super.setRepeatedField(field, index, value);
      }
      @java.lang.Override
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.addRepeatedField(field, value);
      }
      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof perfetto.protos.ProcessTreeOuterClass.ProcessTree) {
          return mergeFrom((perfetto.protos.ProcessTreeOuterClass.ProcessTree)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(perfetto.protos.ProcessTreeOuterClass.ProcessTree other) {
        if (other == perfetto.protos.ProcessTreeOuterClass.ProcessTree.getDefaultInstance()) return this;
        if (processesBuilder_ == null) {
          if (!other.processes_.isEmpty()) {
            if (processes_.isEmpty()) {
              processes_ = other.processes_;
              bitField0_ = (bitField0_ & ~0x00000001);
            } else {
              ensureProcessesIsMutable();
              processes_.addAll(other.processes_);
            }
            onChanged();
          }
        } else {
          if (!other.processes_.isEmpty()) {
            if (processesBuilder_.isEmpty()) {
              processesBuilder_.dispose();
              processesBuilder_ = null;
              processes_ = other.processes_;
              bitField0_ = (bitField0_ & ~0x00000001);
              processesBuilder_ = 
                com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders ?
                   getProcessesFieldBuilder() : null;
            } else {
              processesBuilder_.addAllMessages(other.processes_);
            }
          }
        }
        if (threadsBuilder_ == null) {
          if (!other.threads_.isEmpty()) {
            if (threads_.isEmpty()) {
              threads_ = other.threads_;
              bitField0_ = (bitField0_ & ~0x00000002);
            } else {
              ensureThreadsIsMutable();
              threads_.addAll(other.threads_);
            }
            onChanged();
          }
        } else {
          if (!other.threads_.isEmpty()) {
            if (threadsBuilder_.isEmpty()) {
              threadsBuilder_.dispose();
              threadsBuilder_ = null;
              threads_ = other.threads_;
              bitField0_ = (bitField0_ & ~0x00000002);
              threadsBuilder_ = 
                com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders ?
                   getThreadsFieldBuilder() : null;
            } else {
              threadsBuilder_.addAllMessages(other.threads_);
            }
          }
        }
        if (other.hasCollectionEndTimestamp()) {
          setCollectionEndTimestamp(other.getCollectionEndTimestamp());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        if (extensionRegistry == null) {
          throw new java.lang.NullPointerException();
        }
        try {
          boolean done = false;
          while (!done) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                done = true;
                break;
              case 10: {
                perfetto.protos.ProcessTreeOuterClass.ProcessTree.Process m =
                    input.readMessage(
                        perfetto.protos.ProcessTreeOuterClass.ProcessTree.Process.PARSER,
                        extensionRegistry);
                if (processesBuilder_ == null) {
                  ensureProcessesIsMutable();
                  processes_.add(m);
                } else {
                  processesBuilder_.addMessage(m);
                }
                break;
              } // case 10
              case 18: {
                perfetto.protos.ProcessTreeOuterClass.ProcessTree.Thread m =
                    input.readMessage(
                        perfetto.protos.ProcessTreeOuterClass.ProcessTree.Thread.PARSER,
                        extensionRegistry);
                if (threadsBuilder_ == null) {
                  ensureThreadsIsMutable();
                  threads_.add(m);
                } else {
                  threadsBuilder_.addMessage(m);
                }
                break;
              } // case 18
              case 24: {
                collectionEndTimestamp_ = input.readUInt64();
                bitField0_ |= 0x00000004;
                break;
              } // case 24
              default: {
                if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                  done = true; // was an endgroup tag
                }
                break;
              } // default:
            } // switch (tag)
          } // while (!done)
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.unwrapIOException();
        } finally {
          onChanged();
        } // finally
        return this;
      }
      private int bitField0_;

      private java.util.List<perfetto.protos.ProcessTreeOuterClass.ProcessTree.Process> processes_ =
        java.util.Collections.emptyList();
      private void ensureProcessesIsMutable() {
        if (!((bitField0_ & 0x00000001) != 0)) {
          processes_ = new java.util.ArrayList<perfetto.protos.ProcessTreeOuterClass.ProcessTree.Process>(processes_);
          bitField0_ |= 0x00000001;
         }
      }

      private com.google.protobuf.RepeatedFieldBuilderV3<
          perfetto.protos.ProcessTreeOuterClass.ProcessTree.Process, perfetto.protos.ProcessTreeOuterClass.ProcessTree.Process.Builder, perfetto.protos.ProcessTreeOuterClass.ProcessTree.ProcessOrBuilder> processesBuilder_;

      /**
       * <pre>
       * List of processes and threads in the client. These lists are incremental
       * and not exhaustive. A process and its threads might show up separately in
       * different ProcessTree messages. A thread might event not show up at all, if
       * no sched_switch activity was detected, for instance:
       * #0 { processes: [{pid: 10, ...}], threads: [{pid: 11, tgid: 10}] }
       * #1 { threads: [{pid: 12, tgid: 10}] }
       * #2 { processes: [{pid: 20, ...}], threads: [{pid: 13, tgid: 10}] }
       * </pre>
       *
       * <code>repeated .perfetto.protos.ProcessTree.Process processes = 1;</code>
       */
      public java.util.List<perfetto.protos.ProcessTreeOuterClass.ProcessTree.Process> getProcessesList() {
        if (processesBuilder_ == null) {
          return java.util.Collections.unmodifiableList(processes_);
        } else {
          return processesBuilder_.getMessageList();
        }
      }
      /**
       * <pre>
       * List of processes and threads in the client. These lists are incremental
       * and not exhaustive. A process and its threads might show up separately in
       * different ProcessTree messages. A thread might event not show up at all, if
       * no sched_switch activity was detected, for instance:
       * #0 { processes: [{pid: 10, ...}], threads: [{pid: 11, tgid: 10}] }
       * #1 { threads: [{pid: 12, tgid: 10}] }
       * #2 { processes: [{pid: 20, ...}], threads: [{pid: 13, tgid: 10}] }
       * </pre>
       *
       * <code>repeated .perfetto.protos.ProcessTree.Process processes = 1;</code>
       */
      public int getProcessesCount() {
        if (processesBuilder_ == null) {
          return processes_.size();
        } else {
          return processesBuilder_.getCount();
        }
      }
      /**
       * <pre>
       * List of processes and threads in the client. These lists are incremental
       * and not exhaustive. A process and its threads might show up separately in
       * different ProcessTree messages. A thread might event not show up at all, if
       * no sched_switch activity was detected, for instance:
       * #0 { processes: [{pid: 10, ...}], threads: [{pid: 11, tgid: 10}] }
       * #1 { threads: [{pid: 12, tgid: 10}] }
       * #2 { processes: [{pid: 20, ...}], threads: [{pid: 13, tgid: 10}] }
       * </pre>
       *
       * <code>repeated .perfetto.protos.ProcessTree.Process processes = 1;</code>
       */
      public perfetto.protos.ProcessTreeOuterClass.ProcessTree.Process getProcesses(int index) {
        if (processesBuilder_ == null) {
          return processes_.get(index);
        } else {
          return processesBuilder_.getMessage(index);
        }
      }
      /**
       * <pre>
       * List of processes and threads in the client. These lists are incremental
       * and not exhaustive. A process and its threads might show up separately in
       * different ProcessTree messages. A thread might event not show up at all, if
       * no sched_switch activity was detected, for instance:
       * #0 { processes: [{pid: 10, ...}], threads: [{pid: 11, tgid: 10}] }
       * #1 { threads: [{pid: 12, tgid: 10}] }
       * #2 { processes: [{pid: 20, ...}], threads: [{pid: 13, tgid: 10}] }
       * </pre>
       *
       * <code>repeated .perfetto.protos.ProcessTree.Process processes = 1;</code>
       */
      public Builder setProcesses(
          int index, perfetto.protos.ProcessTreeOuterClass.ProcessTree.Process value) {
        if (processesBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureProcessesIsMutable();
          processes_.set(index, value);
          onChanged();
        } else {
          processesBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <pre>
       * List of processes and threads in the client. These lists are incremental
       * and not exhaustive. A process and its threads might show up separately in
       * different ProcessTree messages. A thread might event not show up at all, if
       * no sched_switch activity was detected, for instance:
       * #0 { processes: [{pid: 10, ...}], threads: [{pid: 11, tgid: 10}] }
       * #1 { threads: [{pid: 12, tgid: 10}] }
       * #2 { processes: [{pid: 20, ...}], threads: [{pid: 13, tgid: 10}] }
       * </pre>
       *
       * <code>repeated .perfetto.protos.ProcessTree.Process processes = 1;</code>
       */
      public Builder setProcesses(
          int index, perfetto.protos.ProcessTreeOuterClass.ProcessTree.Process.Builder builderForValue) {
        if (processesBuilder_ == null) {
          ensureProcessesIsMutable();
          processes_.set(index, builderForValue.build());
          onChanged();
        } else {
          processesBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * List of processes and threads in the client. These lists are incremental
       * and not exhaustive. A process and its threads might show up separately in
       * different ProcessTree messages. A thread might event not show up at all, if
       * no sched_switch activity was detected, for instance:
       * #0 { processes: [{pid: 10, ...}], threads: [{pid: 11, tgid: 10}] }
       * #1 { threads: [{pid: 12, tgid: 10}] }
       * #2 { processes: [{pid: 20, ...}], threads: [{pid: 13, tgid: 10}] }
       * </pre>
       *
       * <code>repeated .perfetto.protos.ProcessTree.Process processes = 1;</code>
       */
      public Builder addProcesses(perfetto.protos.ProcessTreeOuterClass.ProcessTree.Process value) {
        if (processesBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureProcessesIsMutable();
          processes_.add(value);
          onChanged();
        } else {
          processesBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <pre>
       * List of processes and threads in the client. These lists are incremental
       * and not exhaustive. A process and its threads might show up separately in
       * different ProcessTree messages. A thread might event not show up at all, if
       * no sched_switch activity was detected, for instance:
       * #0 { processes: [{pid: 10, ...}], threads: [{pid: 11, tgid: 10}] }
       * #1 { threads: [{pid: 12, tgid: 10}] }
       * #2 { processes: [{pid: 20, ...}], threads: [{pid: 13, tgid: 10}] }
       * </pre>
       *
       * <code>repeated .perfetto.protos.ProcessTree.Process processes = 1;</code>
       */
      public Builder addProcesses(
          int index, perfetto.protos.ProcessTreeOuterClass.ProcessTree.Process value) {
        if (processesBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureProcessesIsMutable();
          processes_.add(index, value);
          onChanged();
        } else {
          processesBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <pre>
       * List of processes and threads in the client. These lists are incremental
       * and not exhaustive. A process and its threads might show up separately in
       * different ProcessTree messages. A thread might event not show up at all, if
       * no sched_switch activity was detected, for instance:
       * #0 { processes: [{pid: 10, ...}], threads: [{pid: 11, tgid: 10}] }
       * #1 { threads: [{pid: 12, tgid: 10}] }
       * #2 { processes: [{pid: 20, ...}], threads: [{pid: 13, tgid: 10}] }
       * </pre>
       *
       * <code>repeated .perfetto.protos.ProcessTree.Process processes = 1;</code>
       */
      public Builder addProcesses(
          perfetto.protos.ProcessTreeOuterClass.ProcessTree.Process.Builder builderForValue) {
        if (processesBuilder_ == null) {
          ensureProcessesIsMutable();
          processes_.add(builderForValue.build());
          onChanged();
        } else {
          processesBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * List of processes and threads in the client. These lists are incremental
       * and not exhaustive. A process and its threads might show up separately in
       * different ProcessTree messages. A thread might event not show up at all, if
       * no sched_switch activity was detected, for instance:
       * #0 { processes: [{pid: 10, ...}], threads: [{pid: 11, tgid: 10}] }
       * #1 { threads: [{pid: 12, tgid: 10}] }
       * #2 { processes: [{pid: 20, ...}], threads: [{pid: 13, tgid: 10}] }
       * </pre>
       *
       * <code>repeated .perfetto.protos.ProcessTree.Process processes = 1;</code>
       */
      public Builder addProcesses(
          int index, perfetto.protos.ProcessTreeOuterClass.ProcessTree.Process.Builder builderForValue) {
        if (processesBuilder_ == null) {
          ensureProcessesIsMutable();
          processes_.add(index, builderForValue.build());
          onChanged();
        } else {
          processesBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * List of processes and threads in the client. These lists are incremental
       * and not exhaustive. A process and its threads might show up separately in
       * different ProcessTree messages. A thread might event not show up at all, if
       * no sched_switch activity was detected, for instance:
       * #0 { processes: [{pid: 10, ...}], threads: [{pid: 11, tgid: 10}] }
       * #1 { threads: [{pid: 12, tgid: 10}] }
       * #2 { processes: [{pid: 20, ...}], threads: [{pid: 13, tgid: 10}] }
       * </pre>
       *
       * <code>repeated .perfetto.protos.ProcessTree.Process processes = 1;</code>
       */
      public Builder addAllProcesses(
          java.lang.Iterable<? extends perfetto.protos.ProcessTreeOuterClass.ProcessTree.Process> values) {
        if (processesBuilder_ == null) {
          ensureProcessesIsMutable();
          com.google.protobuf.AbstractMessageLite.Builder.addAll(
              values, processes_);
          onChanged();
        } else {
          processesBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <pre>
       * List of processes and threads in the client. These lists are incremental
       * and not exhaustive. A process and its threads might show up separately in
       * different ProcessTree messages. A thread might event not show up at all, if
       * no sched_switch activity was detected, for instance:
       * #0 { processes: [{pid: 10, ...}], threads: [{pid: 11, tgid: 10}] }
       * #1 { threads: [{pid: 12, tgid: 10}] }
       * #2 { processes: [{pid: 20, ...}], threads: [{pid: 13, tgid: 10}] }
       * </pre>
       *
       * <code>repeated .perfetto.protos.ProcessTree.Process processes = 1;</code>
       */
      public Builder clearProcesses() {
        if (processesBuilder_ == null) {
          processes_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000001);
          onChanged();
        } else {
          processesBuilder_.clear();
        }
        return this;
      }
      /**
       * <pre>
       * List of processes and threads in the client. These lists are incremental
       * and not exhaustive. A process and its threads might show up separately in
       * different ProcessTree messages. A thread might event not show up at all, if
       * no sched_switch activity was detected, for instance:
       * #0 { processes: [{pid: 10, ...}], threads: [{pid: 11, tgid: 10}] }
       * #1 { threads: [{pid: 12, tgid: 10}] }
       * #2 { processes: [{pid: 20, ...}], threads: [{pid: 13, tgid: 10}] }
       * </pre>
       *
       * <code>repeated .perfetto.protos.ProcessTree.Process processes = 1;</code>
       */
      public Builder removeProcesses(int index) {
        if (processesBuilder_ == null) {
          ensureProcessesIsMutable();
          processes_.remove(index);
          onChanged();
        } else {
          processesBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <pre>
       * List of processes and threads in the client. These lists are incremental
       * and not exhaustive. A process and its threads might show up separately in
       * different ProcessTree messages. A thread might event not show up at all, if
       * no sched_switch activity was detected, for instance:
       * #0 { processes: [{pid: 10, ...}], threads: [{pid: 11, tgid: 10}] }
       * #1 { threads: [{pid: 12, tgid: 10}] }
       * #2 { processes: [{pid: 20, ...}], threads: [{pid: 13, tgid: 10}] }
       * </pre>
       *
       * <code>repeated .perfetto.protos.ProcessTree.Process processes = 1;</code>
       */
      public perfetto.protos.ProcessTreeOuterClass.ProcessTree.Process.Builder getProcessesBuilder(
          int index) {
        return getProcessesFieldBuilder().getBuilder(index);
      }
      /**
       * <pre>
       * List of processes and threads in the client. These lists are incremental
       * and not exhaustive. A process and its threads might show up separately in
       * different ProcessTree messages. A thread might event not show up at all, if
       * no sched_switch activity was detected, for instance:
       * #0 { processes: [{pid: 10, ...}], threads: [{pid: 11, tgid: 10}] }
       * #1 { threads: [{pid: 12, tgid: 10}] }
       * #2 { processes: [{pid: 20, ...}], threads: [{pid: 13, tgid: 10}] }
       * </pre>
       *
       * <code>repeated .perfetto.protos.ProcessTree.Process processes = 1;</code>
       */
      public perfetto.protos.ProcessTreeOuterClass.ProcessTree.ProcessOrBuilder getProcessesOrBuilder(
          int index) {
        if (processesBuilder_ == null) {
          return processes_.get(index);  } else {
          return processesBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <pre>
       * List of processes and threads in the client. These lists are incremental
       * and not exhaustive. A process and its threads might show up separately in
       * different ProcessTree messages. A thread might event not show up at all, if
       * no sched_switch activity was detected, for instance:
       * #0 { processes: [{pid: 10, ...}], threads: [{pid: 11, tgid: 10}] }
       * #1 { threads: [{pid: 12, tgid: 10}] }
       * #2 { processes: [{pid: 20, ...}], threads: [{pid: 13, tgid: 10}] }
       * </pre>
       *
       * <code>repeated .perfetto.protos.ProcessTree.Process processes = 1;</code>
       */
      public java.util.List<? extends perfetto.protos.ProcessTreeOuterClass.ProcessTree.ProcessOrBuilder> 
           getProcessesOrBuilderList() {
        if (processesBuilder_ != null) {
          return processesBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(processes_);
        }
      }
      /**
       * <pre>
       * List of processes and threads in the client. These lists are incremental
       * and not exhaustive. A process and its threads might show up separately in
       * different ProcessTree messages. A thread might event not show up at all, if
       * no sched_switch activity was detected, for instance:
       * #0 { processes: [{pid: 10, ...}], threads: [{pid: 11, tgid: 10}] }
       * #1 { threads: [{pid: 12, tgid: 10}] }
       * #2 { processes: [{pid: 20, ...}], threads: [{pid: 13, tgid: 10}] }
       * </pre>
       *
       * <code>repeated .perfetto.protos.ProcessTree.Process processes = 1;</code>
       */
      public perfetto.protos.ProcessTreeOuterClass.ProcessTree.Process.Builder addProcessesBuilder() {
        return getProcessesFieldBuilder().addBuilder(
            perfetto.protos.ProcessTreeOuterClass.ProcessTree.Process.getDefaultInstance());
      }
      /**
       * <pre>
       * List of processes and threads in the client. These lists are incremental
       * and not exhaustive. A process and its threads might show up separately in
       * different ProcessTree messages. A thread might event not show up at all, if
       * no sched_switch activity was detected, for instance:
       * #0 { processes: [{pid: 10, ...}], threads: [{pid: 11, tgid: 10}] }
       * #1 { threads: [{pid: 12, tgid: 10}] }
       * #2 { processes: [{pid: 20, ...}], threads: [{pid: 13, tgid: 10}] }
       * </pre>
       *
       * <code>repeated .perfetto.protos.ProcessTree.Process processes = 1;</code>
       */
      public perfetto.protos.ProcessTreeOuterClass.ProcessTree.Process.Builder addProcessesBuilder(
          int index) {
        return getProcessesFieldBuilder().addBuilder(
            index, perfetto.protos.ProcessTreeOuterClass.ProcessTree.Process.getDefaultInstance());
      }
      /**
       * <pre>
       * List of processes and threads in the client. These lists are incremental
       * and not exhaustive. A process and its threads might show up separately in
       * different ProcessTree messages. A thread might event not show up at all, if
       * no sched_switch activity was detected, for instance:
       * #0 { processes: [{pid: 10, ...}], threads: [{pid: 11, tgid: 10}] }
       * #1 { threads: [{pid: 12, tgid: 10}] }
       * #2 { processes: [{pid: 20, ...}], threads: [{pid: 13, tgid: 10}] }
       * </pre>
       *
       * <code>repeated .perfetto.protos.ProcessTree.Process processes = 1;</code>
       */
      public java.util.List<perfetto.protos.ProcessTreeOuterClass.ProcessTree.Process.Builder> 
           getProcessesBuilderList() {
        return getProcessesFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilderV3<
          perfetto.protos.ProcessTreeOuterClass.ProcessTree.Process, perfetto.protos.ProcessTreeOuterClass.ProcessTree.Process.Builder, perfetto.protos.ProcessTreeOuterClass.ProcessTree.ProcessOrBuilder> 
          getProcessesFieldBuilder() {
        if (processesBuilder_ == null) {
          processesBuilder_ = new com.google.protobuf.RepeatedFieldBuilderV3<
              perfetto.protos.ProcessTreeOuterClass.ProcessTree.Process, perfetto.protos.ProcessTreeOuterClass.ProcessTree.Process.Builder, perfetto.protos.ProcessTreeOuterClass.ProcessTree.ProcessOrBuilder>(
                  processes_,
                  ((bitField0_ & 0x00000001) != 0),
                  getParentForChildren(),
                  isClean());
          processes_ = null;
        }
        return processesBuilder_;
      }

      private java.util.List<perfetto.protos.ProcessTreeOuterClass.ProcessTree.Thread> threads_ =
        java.util.Collections.emptyList();
      private void ensureThreadsIsMutable() {
        if (!((bitField0_ & 0x00000002) != 0)) {
          threads_ = new java.util.ArrayList<perfetto.protos.ProcessTreeOuterClass.ProcessTree.Thread>(threads_);
          bitField0_ |= 0x00000002;
         }
      }

      private com.google.protobuf.RepeatedFieldBuilderV3<
          perfetto.protos.ProcessTreeOuterClass.ProcessTree.Thread, perfetto.protos.ProcessTreeOuterClass.ProcessTree.Thread.Builder, perfetto.protos.ProcessTreeOuterClass.ProcessTree.ThreadOrBuilder> threadsBuilder_;

      /**
       * <code>repeated .perfetto.protos.ProcessTree.Thread threads = 2;</code>
       */
      public java.util.List<perfetto.protos.ProcessTreeOuterClass.ProcessTree.Thread> getThreadsList() {
        if (threadsBuilder_ == null) {
          return java.util.Collections.unmodifiableList(threads_);
        } else {
          return threadsBuilder_.getMessageList();
        }
      }
      /**
       * <code>repeated .perfetto.protos.ProcessTree.Thread threads = 2;</code>
       */
      public int getThreadsCount() {
        if (threadsBuilder_ == null) {
          return threads_.size();
        } else {
          return threadsBuilder_.getCount();
        }
      }
      /**
       * <code>repeated .perfetto.protos.ProcessTree.Thread threads = 2;</code>
       */
      public perfetto.protos.ProcessTreeOuterClass.ProcessTree.Thread getThreads(int index) {
        if (threadsBuilder_ == null) {
          return threads_.get(index);
        } else {
          return threadsBuilder_.getMessage(index);
        }
      }
      /**
       * <code>repeated .perfetto.protos.ProcessTree.Thread threads = 2;</code>
       */
      public Builder setThreads(
          int index, perfetto.protos.ProcessTreeOuterClass.ProcessTree.Thread value) {
        if (threadsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureThreadsIsMutable();
          threads_.set(index, value);
          onChanged();
        } else {
          threadsBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .perfetto.protos.ProcessTree.Thread threads = 2;</code>
       */
      public Builder setThreads(
          int index, perfetto.protos.ProcessTreeOuterClass.ProcessTree.Thread.Builder builderForValue) {
        if (threadsBuilder_ == null) {
          ensureThreadsIsMutable();
          threads_.set(index, builderForValue.build());
          onChanged();
        } else {
          threadsBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .perfetto.protos.ProcessTree.Thread threads = 2;</code>
       */
      public Builder addThreads(perfetto.protos.ProcessTreeOuterClass.ProcessTree.Thread value) {
        if (threadsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureThreadsIsMutable();
          threads_.add(value);
          onChanged();
        } else {
          threadsBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <code>repeated .perfetto.protos.ProcessTree.Thread threads = 2;</code>
       */
      public Builder addThreads(
          int index, perfetto.protos.ProcessTreeOuterClass.ProcessTree.Thread value) {
        if (threadsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureThreadsIsMutable();
          threads_.add(index, value);
          onChanged();
        } else {
          threadsBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .perfetto.protos.ProcessTree.Thread threads = 2;</code>
       */
      public Builder addThreads(
          perfetto.protos.ProcessTreeOuterClass.ProcessTree.Thread.Builder builderForValue) {
        if (threadsBuilder_ == null) {
          ensureThreadsIsMutable();
          threads_.add(builderForValue.build());
          onChanged();
        } else {
          threadsBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .perfetto.protos.ProcessTree.Thread threads = 2;</code>
       */
      public Builder addThreads(
          int index, perfetto.protos.ProcessTreeOuterClass.ProcessTree.Thread.Builder builderForValue) {
        if (threadsBuilder_ == null) {
          ensureThreadsIsMutable();
          threads_.add(index, builderForValue.build());
          onChanged();
        } else {
          threadsBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .perfetto.protos.ProcessTree.Thread threads = 2;</code>
       */
      public Builder addAllThreads(
          java.lang.Iterable<? extends perfetto.protos.ProcessTreeOuterClass.ProcessTree.Thread> values) {
        if (threadsBuilder_ == null) {
          ensureThreadsIsMutable();
          com.google.protobuf.AbstractMessageLite.Builder.addAll(
              values, threads_);
          onChanged();
        } else {
          threadsBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <code>repeated .perfetto.protos.ProcessTree.Thread threads = 2;</code>
       */
      public Builder clearThreads() {
        if (threadsBuilder_ == null) {
          threads_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000002);
          onChanged();
        } else {
          threadsBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>repeated .perfetto.protos.ProcessTree.Thread threads = 2;</code>
       */
      public Builder removeThreads(int index) {
        if (threadsBuilder_ == null) {
          ensureThreadsIsMutable();
          threads_.remove(index);
          onChanged();
        } else {
          threadsBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <code>repeated .perfetto.protos.ProcessTree.Thread threads = 2;</code>
       */
      public perfetto.protos.ProcessTreeOuterClass.ProcessTree.Thread.Builder getThreadsBuilder(
          int index) {
        return getThreadsFieldBuilder().getBuilder(index);
      }
      /**
       * <code>repeated .perfetto.protos.ProcessTree.Thread threads = 2;</code>
       */
      public perfetto.protos.ProcessTreeOuterClass.ProcessTree.ThreadOrBuilder getThreadsOrBuilder(
          int index) {
        if (threadsBuilder_ == null) {
          return threads_.get(index);  } else {
          return threadsBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <code>repeated .perfetto.protos.ProcessTree.Thread threads = 2;</code>
       */
      public java.util.List<? extends perfetto.protos.ProcessTreeOuterClass.ProcessTree.ThreadOrBuilder> 
           getThreadsOrBuilderList() {
        if (threadsBuilder_ != null) {
          return threadsBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(threads_);
        }
      }
      /**
       * <code>repeated .perfetto.protos.ProcessTree.Thread threads = 2;</code>
       */
      public perfetto.protos.ProcessTreeOuterClass.ProcessTree.Thread.Builder addThreadsBuilder() {
        return getThreadsFieldBuilder().addBuilder(
            perfetto.protos.ProcessTreeOuterClass.ProcessTree.Thread.getDefaultInstance());
      }
      /**
       * <code>repeated .perfetto.protos.ProcessTree.Thread threads = 2;</code>
       */
      public perfetto.protos.ProcessTreeOuterClass.ProcessTree.Thread.Builder addThreadsBuilder(
          int index) {
        return getThreadsFieldBuilder().addBuilder(
            index, perfetto.protos.ProcessTreeOuterClass.ProcessTree.Thread.getDefaultInstance());
      }
      /**
       * <code>repeated .perfetto.protos.ProcessTree.Thread threads = 2;</code>
       */
      public java.util.List<perfetto.protos.ProcessTreeOuterClass.ProcessTree.Thread.Builder> 
           getThreadsBuilderList() {
        return getThreadsFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilderV3<
          perfetto.protos.ProcessTreeOuterClass.ProcessTree.Thread, perfetto.protos.ProcessTreeOuterClass.ProcessTree.Thread.Builder, perfetto.protos.ProcessTreeOuterClass.ProcessTree.ThreadOrBuilder> 
          getThreadsFieldBuilder() {
        if (threadsBuilder_ == null) {
          threadsBuilder_ = new com.google.protobuf.RepeatedFieldBuilderV3<
              perfetto.protos.ProcessTreeOuterClass.ProcessTree.Thread, perfetto.protos.ProcessTreeOuterClass.ProcessTree.Thread.Builder, perfetto.protos.ProcessTreeOuterClass.ProcessTree.ThreadOrBuilder>(
                  threads_,
                  ((bitField0_ & 0x00000002) != 0),
                  getParentForChildren(),
                  isClean());
          threads_ = null;
        }
        return threadsBuilder_;
      }

      private long collectionEndTimestamp_ ;
      /**
       * <pre>
       * The time at which we finish collecting this process tree;
       * the top-level packet timestamp is the time at which
       * we begin collection.
       * </pre>
       *
       * <code>optional uint64 collection_end_timestamp = 3;</code>
       * @return Whether the collectionEndTimestamp field is set.
       */
      @java.lang.Override
      public boolean hasCollectionEndTimestamp() {
        return ((bitField0_ & 0x00000004) != 0);
      }
      /**
       * <pre>
       * The time at which we finish collecting this process tree;
       * the top-level packet timestamp is the time at which
       * we begin collection.
       * </pre>
       *
       * <code>optional uint64 collection_end_timestamp = 3;</code>
       * @return The collectionEndTimestamp.
       */
      @java.lang.Override
      public long getCollectionEndTimestamp() {
        return collectionEndTimestamp_;
      }
      /**
       * <pre>
       * The time at which we finish collecting this process tree;
       * the top-level packet timestamp is the time at which
       * we begin collection.
       * </pre>
       *
       * <code>optional uint64 collection_end_timestamp = 3;</code>
       * @param value The collectionEndTimestamp to set.
       * @return This builder for chaining.
       */
      public Builder setCollectionEndTimestamp(long value) {
        
        collectionEndTimestamp_ = value;
        bitField0_ |= 0x00000004;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * The time at which we finish collecting this process tree;
       * the top-level packet timestamp is the time at which
       * we begin collection.
       * </pre>
       *
       * <code>optional uint64 collection_end_timestamp = 3;</code>
       * @return This builder for chaining.
       */
      public Builder clearCollectionEndTimestamp() {
        bitField0_ = (bitField0_ & ~0x00000004);
        collectionEndTimestamp_ = 0L;
        onChanged();
        return this;
      }
      @java.lang.Override
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      @java.lang.Override
      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:perfetto.protos.ProcessTree)
    }

    // @@protoc_insertion_point(class_scope:perfetto.protos.ProcessTree)
    private static final perfetto.protos.ProcessTreeOuterClass.ProcessTree DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new perfetto.protos.ProcessTreeOuterClass.ProcessTree();
    }

    public static perfetto.protos.ProcessTreeOuterClass.ProcessTree getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    @java.lang.Deprecated public static final com.google.protobuf.Parser<ProcessTree>
        PARSER = new com.google.protobuf.AbstractParser<ProcessTree>() {
      @java.lang.Override
      public ProcessTree parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        Builder builder = newBuilder();
        try {
          builder.mergeFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.setUnfinishedMessage(builder.buildPartial());
        } catch (com.google.protobuf.UninitializedMessageException e) {
          throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
        } catch (java.io.IOException e) {
          throw new com.google.protobuf.InvalidProtocolBufferException(e)
              .setUnfinishedMessage(builder.buildPartial());
        }
        return builder.buildPartial();
      }
    };

    public static com.google.protobuf.Parser<ProcessTree> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<ProcessTree> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public perfetto.protos.ProcessTreeOuterClass.ProcessTree getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_perfetto_protos_ProcessTree_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_perfetto_protos_ProcessTree_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_perfetto_protos_ProcessTree_Thread_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_perfetto_protos_ProcessTree_Thread_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_perfetto_protos_ProcessTree_Process_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_perfetto_protos_ProcessTree_Process_fieldAccessorTable;

  public static com.google.protobuf.Descriptors.FileDescriptor
      getDescriptor() {
    return descriptor;
  }
  private static  com.google.protobuf.Descriptors.FileDescriptor
      descriptor;
  static {
    java.lang.String[] descriptorData = {
      "\n+protos/perfetto/trace/ps/process_tree." +
      "proto\022\017perfetto.protos\"\371\002\n\013ProcessTree\0227" +
      "\n\tprocesses\030\001 \003(\0132$.perfetto.protos.Proc" +
      "essTree.Process\0224\n\007threads\030\002 \003(\0132#.perfe" +
      "tto.protos.ProcessTree.Thread\022 \n\030collect" +
      "ion_end_timestamp\030\003 \001(\004\032@\n\006Thread\022\013\n\003tid" +
      "\030\001 \001(\005\022\014\n\004tgid\030\003 \001(\005\022\014\n\004name\030\002 \001(\t\022\r\n\005ns" +
      "tid\030\004 \003(\005\032\226\001\n\007Process\022\013\n\003pid\030\001 \001(\005\022\014\n\004pp" +
      "id\030\002 \001(\005\022\017\n\007cmdline\030\003 \003(\t\022C\n\022threads_dep" +
      "recated\030\004 \003(\0132#.perfetto.protos.ProcessT" +
      "ree.ThreadB\002\030\001\022\013\n\003uid\030\005 \001(\005\022\r\n\005nspid\030\006 \003" +
      "(\005"
    };
    descriptor = com.google.protobuf.Descriptors.FileDescriptor
      .internalBuildGeneratedFileFrom(descriptorData,
        new com.google.protobuf.Descriptors.FileDescriptor[] {
        });
    internal_static_perfetto_protos_ProcessTree_descriptor =
      getDescriptor().getMessageTypes().get(0);
    internal_static_perfetto_protos_ProcessTree_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_perfetto_protos_ProcessTree_descriptor,
        new java.lang.String[] { "Processes", "Threads", "CollectionEndTimestamp", });
    internal_static_perfetto_protos_ProcessTree_Thread_descriptor =
      internal_static_perfetto_protos_ProcessTree_descriptor.getNestedTypes().get(0);
    internal_static_perfetto_protos_ProcessTree_Thread_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_perfetto_protos_ProcessTree_Thread_descriptor,
        new java.lang.String[] { "Tid", "Tgid", "Name", "Nstid", });
    internal_static_perfetto_protos_ProcessTree_Process_descriptor =
      internal_static_perfetto_protos_ProcessTree_descriptor.getNestedTypes().get(1);
    internal_static_perfetto_protos_ProcessTree_Process_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_perfetto_protos_ProcessTree_Process_descriptor,
        new java.lang.String[] { "Pid", "Ppid", "Cmdline", "ThreadsDeprecated", "Uid", "Nspid", });
  }

  // @@protoc_insertion_point(outer_class_scope)
}
