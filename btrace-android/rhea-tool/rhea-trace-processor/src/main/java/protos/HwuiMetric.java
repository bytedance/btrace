// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: protos/perfetto/metrics/android/hwui_metric.proto

package perfetto.protos;

public final class HwuiMetric {
  private HwuiMetric() {}
  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistryLite registry) {
  }

  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistry registry) {
    registerAllExtensions(
        (com.google.protobuf.ExtensionRegistryLite) registry);
  }
  public interface ProcessRenderInfoOrBuilder extends
      // @@protoc_insertion_point(interface_extends:perfetto.protos.ProcessRenderInfo)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <pre>
     * Name of the package launched
     * </pre>
     *
     * <code>optional string process_name = 1;</code>
     * @return Whether the processName field is set.
     */
    boolean hasProcessName();
    /**
     * <pre>
     * Name of the package launched
     * </pre>
     *
     * <code>optional string process_name = 1;</code>
     * @return The processName.
     */
    java.lang.String getProcessName();
    /**
     * <pre>
     * Name of the package launched
     * </pre>
     *
     * <code>optional string process_name = 1;</code>
     * @return The bytes for processName.
     */
    com.google.protobuf.ByteString
        getProcessNameBytes();

    /**
     * <pre>
     * CPU time spent on RenderThread in milliseconds.
     * </pre>
     *
     * <code>optional int64 rt_cpu_time_ms = 2;</code>
     * @return Whether the rtCpuTimeMs field is set.
     */
    boolean hasRtCpuTimeMs();
    /**
     * <pre>
     * CPU time spent on RenderThread in milliseconds.
     * </pre>
     *
     * <code>optional int64 rt_cpu_time_ms = 2;</code>
     * @return The rtCpuTimeMs.
     */
    long getRtCpuTimeMs();

    /**
     * <pre>
     * Number of frames drawn on RenderThread, followed by max/min/avg CPU time to draw a frame
     * in nanoseconds.
     * </pre>
     *
     * <code>optional uint32 draw_frame_count = 3;</code>
     * @return Whether the drawFrameCount field is set.
     */
    boolean hasDrawFrameCount();
    /**
     * <pre>
     * Number of frames drawn on RenderThread, followed by max/min/avg CPU time to draw a frame
     * in nanoseconds.
     * </pre>
     *
     * <code>optional uint32 draw_frame_count = 3;</code>
     * @return The drawFrameCount.
     */
    int getDrawFrameCount();

    /**
     * <code>optional int64 draw_frame_max = 4;</code>
     * @return Whether the drawFrameMax field is set.
     */
    boolean hasDrawFrameMax();
    /**
     * <code>optional int64 draw_frame_max = 4;</code>
     * @return The drawFrameMax.
     */
    long getDrawFrameMax();

    /**
     * <code>optional int64 draw_frame_min = 5;</code>
     * @return Whether the drawFrameMin field is set.
     */
    boolean hasDrawFrameMin();
    /**
     * <code>optional int64 draw_frame_min = 5;</code>
     * @return The drawFrameMin.
     */
    long getDrawFrameMin();

    /**
     * <code>optional double draw_frame_avg = 6;</code>
     * @return Whether the drawFrameAvg field is set.
     */
    boolean hasDrawFrameAvg();
    /**
     * <code>optional double draw_frame_avg = 6;</code>
     * @return The drawFrameAvg.
     */
    double getDrawFrameAvg();

    /**
     * <pre>
     * Number of GPU commands flushes and max/min/avg time per flush in nanoseconds.
     * </pre>
     *
     * <code>optional uint32 flush_count = 7;</code>
     * @return Whether the flushCount field is set.
     */
    boolean hasFlushCount();
    /**
     * <pre>
     * Number of GPU commands flushes and max/min/avg time per flush in nanoseconds.
     * </pre>
     *
     * <code>optional uint32 flush_count = 7;</code>
     * @return The flushCount.
     */
    int getFlushCount();

    /**
     * <code>optional int64 flush_max = 8;</code>
     * @return Whether the flushMax field is set.
     */
    boolean hasFlushMax();
    /**
     * <code>optional int64 flush_max = 8;</code>
     * @return The flushMax.
     */
    long getFlushMax();

    /**
     * <code>optional int64 flush_min = 9;</code>
     * @return Whether the flushMin field is set.
     */
    boolean hasFlushMin();
    /**
     * <code>optional int64 flush_min = 9;</code>
     * @return The flushMin.
     */
    long getFlushMin();

    /**
     * <code>optional double flush_avg = 10;</code>
     * @return Whether the flushAvg field is set.
     */
    boolean hasFlushAvg();
    /**
     * <code>optional double flush_avg = 10;</code>
     * @return The flushAvg.
     */
    double getFlushAvg();

    /**
     * <pre>
     * Number of View tree preparation counts and max/min/avg time to traverse the tree in
     * nanoseconds.
     * </pre>
     *
     * <code>optional uint32 prepare_tree_count = 11;</code>
     * @return Whether the prepareTreeCount field is set.
     */
    boolean hasPrepareTreeCount();
    /**
     * <pre>
     * Number of View tree preparation counts and max/min/avg time to traverse the tree in
     * nanoseconds.
     * </pre>
     *
     * <code>optional uint32 prepare_tree_count = 11;</code>
     * @return The prepareTreeCount.
     */
    int getPrepareTreeCount();

    /**
     * <code>optional int64 prepare_tree_max = 12;</code>
     * @return Whether the prepareTreeMax field is set.
     */
    boolean hasPrepareTreeMax();
    /**
     * <code>optional int64 prepare_tree_max = 12;</code>
     * @return The prepareTreeMax.
     */
    long getPrepareTreeMax();

    /**
     * <code>optional int64 prepare_tree_min = 13;</code>
     * @return Whether the prepareTreeMin field is set.
     */
    boolean hasPrepareTreeMin();
    /**
     * <code>optional int64 prepare_tree_min = 13;</code>
     * @return The prepareTreeMin.
     */
    long getPrepareTreeMin();

    /**
     * <code>optional double prepare_tree_avg = 14;</code>
     * @return Whether the prepareTreeAvg field is set.
     */
    boolean hasPrepareTreeAvg();
    /**
     * <code>optional double prepare_tree_avg = 14;</code>
     * @return The prepareTreeAvg.
     */
    double getPrepareTreeAvg();

    /**
     * <pre>
     * Number of times the GPU rendered a frame and max/min/avg time for GPU to finish rendering in
     * in nanoseconds.
     * </pre>
     *
     * <code>optional uint32 gpu_completion_count = 15;</code>
     * @return Whether the gpuCompletionCount field is set.
     */
    boolean hasGpuCompletionCount();
    /**
     * <pre>
     * Number of times the GPU rendered a frame and max/min/avg time for GPU to finish rendering in
     * in nanoseconds.
     * </pre>
     *
     * <code>optional uint32 gpu_completion_count = 15;</code>
     * @return The gpuCompletionCount.
     */
    int getGpuCompletionCount();

    /**
     * <code>optional int64 gpu_completion_max = 16;</code>
     * @return Whether the gpuCompletionMax field is set.
     */
    boolean hasGpuCompletionMax();
    /**
     * <code>optional int64 gpu_completion_max = 16;</code>
     * @return The gpuCompletionMax.
     */
    long getGpuCompletionMax();

    /**
     * <code>optional int64 gpu_completion_min = 17;</code>
     * @return Whether the gpuCompletionMin field is set.
     */
    boolean hasGpuCompletionMin();
    /**
     * <code>optional int64 gpu_completion_min = 17;</code>
     * @return The gpuCompletionMin.
     */
    long getGpuCompletionMin();

    /**
     * <code>optional double gpu_completion_avg = 18;</code>
     * @return Whether the gpuCompletionAvg field is set.
     */
    boolean hasGpuCompletionAvg();
    /**
     * <code>optional double gpu_completion_avg = 18;</code>
     * @return The gpuCompletionAvg.
     */
    double getGpuCompletionAvg();

    /**
     * <pre>
     * Number of times a frame was recorded/serialized in a display list on the UI thread with
     * max/min/avg time in nanoseconds.
     * </pre>
     *
     * <code>optional uint32 ui_record_count = 19;</code>
     * @return Whether the uiRecordCount field is set.
     */
    boolean hasUiRecordCount();
    /**
     * <pre>
     * Number of times a frame was recorded/serialized in a display list on the UI thread with
     * max/min/avg time in nanoseconds.
     * </pre>
     *
     * <code>optional uint32 ui_record_count = 19;</code>
     * @return The uiRecordCount.
     */
    int getUiRecordCount();

    /**
     * <code>optional int64 ui_record_max = 20;</code>
     * @return Whether the uiRecordMax field is set.
     */
    boolean hasUiRecordMax();
    /**
     * <code>optional int64 ui_record_max = 20;</code>
     * @return The uiRecordMax.
     */
    long getUiRecordMax();

    /**
     * <code>optional int64 ui_record_min = 21;</code>
     * @return Whether the uiRecordMin field is set.
     */
    boolean hasUiRecordMin();
    /**
     * <code>optional int64 ui_record_min = 21;</code>
     * @return The uiRecordMin.
     */
    long getUiRecordMin();

    /**
     * <code>optional double ui_record_avg = 22;</code>
     * @return Whether the uiRecordAvg field is set.
     */
    boolean hasUiRecordAvg();
    /**
     * <code>optional double ui_record_avg = 22;</code>
     * @return The uiRecordAvg.
     */
    double getUiRecordAvg();

    /**
     * <pre>
     * number of unique shader programs that were used to render frames, followed by total and average
     * times to prepare a shader in nanoseconds.
     * </pre>
     *
     * <code>optional uint32 shader_compile_count = 23;</code>
     * @return Whether the shaderCompileCount field is set.
     */
    boolean hasShaderCompileCount();
    /**
     * <pre>
     * number of unique shader programs that were used to render frames, followed by total and average
     * times to prepare a shader in nanoseconds.
     * </pre>
     *
     * <code>optional uint32 shader_compile_count = 23;</code>
     * @return The shaderCompileCount.
     */
    int getShaderCompileCount();

    /**
     * <code>optional int64 shader_compile_time = 24;</code>
     * @return Whether the shaderCompileTime field is set.
     */
    boolean hasShaderCompileTime();
    /**
     * <code>optional int64 shader_compile_time = 24;</code>
     * @return The shaderCompileTime.
     */
    long getShaderCompileTime();

    /**
     * <code>optional double shader_compile_avg = 25;</code>
     * @return Whether the shaderCompileAvg field is set.
     */
    boolean hasShaderCompileAvg();
    /**
     * <code>optional double shader_compile_avg = 25;</code>
     * @return The shaderCompileAvg.
     */
    double getShaderCompileAvg();

    /**
     * <pre>
     * number of shader programs loaded from the disk cache, followed by total time and average time
     * to prepare a shader in nanoseconds.
     * </pre>
     *
     * <code>optional uint32 cache_hit_count = 26;</code>
     * @return Whether the cacheHitCount field is set.
     */
    boolean hasCacheHitCount();
    /**
     * <pre>
     * number of shader programs loaded from the disk cache, followed by total time and average time
     * to prepare a shader in nanoseconds.
     * </pre>
     *
     * <code>optional uint32 cache_hit_count = 26;</code>
     * @return The cacheHitCount.
     */
    int getCacheHitCount();

    /**
     * <code>optional int64 cache_hit_time = 27;</code>
     * @return Whether the cacheHitTime field is set.
     */
    boolean hasCacheHitTime();
    /**
     * <code>optional int64 cache_hit_time = 27;</code>
     * @return The cacheHitTime.
     */
    long getCacheHitTime();

    /**
     * <code>optional double cache_hit_avg = 28;</code>
     * @return Whether the cacheHitAvg field is set.
     */
    boolean hasCacheHitAvg();
    /**
     * <code>optional double cache_hit_avg = 28;</code>
     * @return The cacheHitAvg.
     */
    double getCacheHitAvg();

    /**
     * <pre>
     * number of shader programs compiled/linked, followed by total time and average time to prepare
     * a shader in nanoseconds.
     * </pre>
     *
     * <code>optional uint32 cache_miss_count = 29;</code>
     * @return Whether the cacheMissCount field is set.
     */
    boolean hasCacheMissCount();
    /**
     * <pre>
     * number of shader programs compiled/linked, followed by total time and average time to prepare
     * a shader in nanoseconds.
     * </pre>
     *
     * <code>optional uint32 cache_miss_count = 29;</code>
     * @return The cacheMissCount.
     */
    int getCacheMissCount();

    /**
     * <code>optional int64 cache_miss_time = 30;</code>
     * @return Whether the cacheMissTime field is set.
     */
    boolean hasCacheMissTime();
    /**
     * <code>optional int64 cache_miss_time = 30;</code>
     * @return The cacheMissTime.
     */
    long getCacheMissTime();

    /**
     * <code>optional double cache_miss_avg = 31;</code>
     * @return Whether the cacheMissAvg field is set.
     */
    boolean hasCacheMissAvg();
    /**
     * <code>optional double cache_miss_avg = 31;</code>
     * @return The cacheMissAvg.
     */
    double getCacheMissAvg();

    /**
     * <pre>
     * max/min/avg CPU memory used for graphics by HWUI at the end of a frame.
     * </pre>
     *
     * <code>optional int64 graphics_cpu_mem_max = 32;</code>
     * @return Whether the graphicsCpuMemMax field is set.
     */
    boolean hasGraphicsCpuMemMax();
    /**
     * <pre>
     * max/min/avg CPU memory used for graphics by HWUI at the end of a frame.
     * </pre>
     *
     * <code>optional int64 graphics_cpu_mem_max = 32;</code>
     * @return The graphicsCpuMemMax.
     */
    long getGraphicsCpuMemMax();

    /**
     * <code>optional int64 graphics_cpu_mem_min = 33;</code>
     * @return Whether the graphicsCpuMemMin field is set.
     */
    boolean hasGraphicsCpuMemMin();
    /**
     * <code>optional int64 graphics_cpu_mem_min = 33;</code>
     * @return The graphicsCpuMemMin.
     */
    long getGraphicsCpuMemMin();

    /**
     * <code>optional double graphics_cpu_mem_avg = 34;</code>
     * @return Whether the graphicsCpuMemAvg field is set.
     */
    boolean hasGraphicsCpuMemAvg();
    /**
     * <code>optional double graphics_cpu_mem_avg = 34;</code>
     * @return The graphicsCpuMemAvg.
     */
    double getGraphicsCpuMemAvg();

    /**
     * <pre>
     * max/min/avg GPU memory used by HWUI at the end of a frame excluding textures.
     * </pre>
     *
     * <code>optional int64 graphics_gpu_mem_max = 35;</code>
     * @return Whether the graphicsGpuMemMax field is set.
     */
    boolean hasGraphicsGpuMemMax();
    /**
     * <pre>
     * max/min/avg GPU memory used by HWUI at the end of a frame excluding textures.
     * </pre>
     *
     * <code>optional int64 graphics_gpu_mem_max = 35;</code>
     * @return The graphicsGpuMemMax.
     */
    long getGraphicsGpuMemMax();

    /**
     * <code>optional int64 graphics_gpu_mem_min = 36;</code>
     * @return Whether the graphicsGpuMemMin field is set.
     */
    boolean hasGraphicsGpuMemMin();
    /**
     * <code>optional int64 graphics_gpu_mem_min = 36;</code>
     * @return The graphicsGpuMemMin.
     */
    long getGraphicsGpuMemMin();

    /**
     * <code>optional double graphics_gpu_mem_avg = 37;</code>
     * @return Whether the graphicsGpuMemAvg field is set.
     */
    boolean hasGraphicsGpuMemAvg();
    /**
     * <code>optional double graphics_gpu_mem_avg = 37;</code>
     * @return The graphicsGpuMemAvg.
     */
    double getGraphicsGpuMemAvg();

    /**
     * <pre>
     * max/min/avg memory used for GPU textures by HWUI at the end of a frame.
     * </pre>
     *
     * <code>optional int64 texture_mem_max = 38;</code>
     * @return Whether the textureMemMax field is set.
     */
    boolean hasTextureMemMax();
    /**
     * <pre>
     * max/min/avg memory used for GPU textures by HWUI at the end of a frame.
     * </pre>
     *
     * <code>optional int64 texture_mem_max = 38;</code>
     * @return The textureMemMax.
     */
    long getTextureMemMax();

    /**
     * <code>optional int64 texture_mem_min = 39;</code>
     * @return Whether the textureMemMin field is set.
     */
    boolean hasTextureMemMin();
    /**
     * <code>optional int64 texture_mem_min = 39;</code>
     * @return The textureMemMin.
     */
    long getTextureMemMin();

    /**
     * <code>optional double texture_mem_avg = 40;</code>
     * @return Whether the textureMemAvg field is set.
     */
    boolean hasTextureMemAvg();
    /**
     * <code>optional double texture_mem_avg = 40;</code>
     * @return The textureMemAvg.
     */
    double getTextureMemAvg();

    /**
     * <pre>
     * max/min/avg memory used by HWUI at the end of a frame. This is a sum of previous 3 categories.
     * </pre>
     *
     * <code>optional int64 all_mem_max = 41;</code>
     * @return Whether the allMemMax field is set.
     */
    boolean hasAllMemMax();
    /**
     * <pre>
     * max/min/avg memory used by HWUI at the end of a frame. This is a sum of previous 3 categories.
     * </pre>
     *
     * <code>optional int64 all_mem_max = 41;</code>
     * @return The allMemMax.
     */
    long getAllMemMax();

    /**
     * <code>optional int64 all_mem_min = 42;</code>
     * @return Whether the allMemMin field is set.
     */
    boolean hasAllMemMin();
    /**
     * <code>optional int64 all_mem_min = 42;</code>
     * @return The allMemMin.
     */
    long getAllMemMin();

    /**
     * <code>optional double all_mem_avg = 43;</code>
     * @return Whether the allMemAvg field is set.
     */
    boolean hasAllMemAvg();
    /**
     * <code>optional double all_mem_avg = 43;</code>
     * @return The allMemAvg.
     */
    double getAllMemAvg();
  }
  /**
   * <pre>
   * Android HWUI graphics performance and graphics memory usage metrics.
   * </pre>
   *
   * Protobuf type {@code perfetto.protos.ProcessRenderInfo}
   */
  public static final class ProcessRenderInfo extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:perfetto.protos.ProcessRenderInfo)
      ProcessRenderInfoOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use ProcessRenderInfo.newBuilder() to construct.
    private ProcessRenderInfo(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private ProcessRenderInfo() {
      processName_ = "";
    }

    @java.lang.Override
    @SuppressWarnings({"unused"})
    protected java.lang.Object newInstance(
        UnusedPrivateParameter unused) {
      return new ProcessRenderInfo();
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return perfetto.protos.HwuiMetric.internal_static_perfetto_protos_ProcessRenderInfo_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return perfetto.protos.HwuiMetric.internal_static_perfetto_protos_ProcessRenderInfo_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              perfetto.protos.HwuiMetric.ProcessRenderInfo.class, perfetto.protos.HwuiMetric.ProcessRenderInfo.Builder.class);
    }

    private int bitField0_;
    private int bitField1_;
    public static final int PROCESS_NAME_FIELD_NUMBER = 1;
    @SuppressWarnings("serial")
    private volatile java.lang.Object processName_ = "";
    /**
     * <pre>
     * Name of the package launched
     * </pre>
     *
     * <code>optional string process_name = 1;</code>
     * @return Whether the processName field is set.
     */
    @java.lang.Override
    public boolean hasProcessName() {
      return ((bitField0_ & 0x00000001) != 0);
    }
    /**
     * <pre>
     * Name of the package launched
     * </pre>
     *
     * <code>optional string process_name = 1;</code>
     * @return The processName.
     */
    @java.lang.Override
    public java.lang.String getProcessName() {
      java.lang.Object ref = processName_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        if (bs.isValidUtf8()) {
          processName_ = s;
        }
        return s;
      }
    }
    /**
     * <pre>
     * Name of the package launched
     * </pre>
     *
     * <code>optional string process_name = 1;</code>
     * @return The bytes for processName.
     */
    @java.lang.Override
    public com.google.protobuf.ByteString
        getProcessNameBytes() {
      java.lang.Object ref = processName_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        processName_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    public static final int RT_CPU_TIME_MS_FIELD_NUMBER = 2;
    private long rtCpuTimeMs_ = 0L;
    /**
     * <pre>
     * CPU time spent on RenderThread in milliseconds.
     * </pre>
     *
     * <code>optional int64 rt_cpu_time_ms = 2;</code>
     * @return Whether the rtCpuTimeMs field is set.
     */
    @java.lang.Override
    public boolean hasRtCpuTimeMs() {
      return ((bitField0_ & 0x00000002) != 0);
    }
    /**
     * <pre>
     * CPU time spent on RenderThread in milliseconds.
     * </pre>
     *
     * <code>optional int64 rt_cpu_time_ms = 2;</code>
     * @return The rtCpuTimeMs.
     */
    @java.lang.Override
    public long getRtCpuTimeMs() {
      return rtCpuTimeMs_;
    }

    public static final int DRAW_FRAME_COUNT_FIELD_NUMBER = 3;
    private int drawFrameCount_ = 0;
    /**
     * <pre>
     * Number of frames drawn on RenderThread, followed by max/min/avg CPU time to draw a frame
     * in nanoseconds.
     * </pre>
     *
     * <code>optional uint32 draw_frame_count = 3;</code>
     * @return Whether the drawFrameCount field is set.
     */
    @java.lang.Override
    public boolean hasDrawFrameCount() {
      return ((bitField0_ & 0x00000004) != 0);
    }
    /**
     * <pre>
     * Number of frames drawn on RenderThread, followed by max/min/avg CPU time to draw a frame
     * in nanoseconds.
     * </pre>
     *
     * <code>optional uint32 draw_frame_count = 3;</code>
     * @return The drawFrameCount.
     */
    @java.lang.Override
    public int getDrawFrameCount() {
      return drawFrameCount_;
    }

    public static final int DRAW_FRAME_MAX_FIELD_NUMBER = 4;
    private long drawFrameMax_ = 0L;
    /**
     * <code>optional int64 draw_frame_max = 4;</code>
     * @return Whether the drawFrameMax field is set.
     */
    @java.lang.Override
    public boolean hasDrawFrameMax() {
      return ((bitField0_ & 0x00000008) != 0);
    }
    /**
     * <code>optional int64 draw_frame_max = 4;</code>
     * @return The drawFrameMax.
     */
    @java.lang.Override
    public long getDrawFrameMax() {
      return drawFrameMax_;
    }

    public static final int DRAW_FRAME_MIN_FIELD_NUMBER = 5;
    private long drawFrameMin_ = 0L;
    /**
     * <code>optional int64 draw_frame_min = 5;</code>
     * @return Whether the drawFrameMin field is set.
     */
    @java.lang.Override
    public boolean hasDrawFrameMin() {
      return ((bitField0_ & 0x00000010) != 0);
    }
    /**
     * <code>optional int64 draw_frame_min = 5;</code>
     * @return The drawFrameMin.
     */
    @java.lang.Override
    public long getDrawFrameMin() {
      return drawFrameMin_;
    }

    public static final int DRAW_FRAME_AVG_FIELD_NUMBER = 6;
    private double drawFrameAvg_ = 0D;
    /**
     * <code>optional double draw_frame_avg = 6;</code>
     * @return Whether the drawFrameAvg field is set.
     */
    @java.lang.Override
    public boolean hasDrawFrameAvg() {
      return ((bitField0_ & 0x00000020) != 0);
    }
    /**
     * <code>optional double draw_frame_avg = 6;</code>
     * @return The drawFrameAvg.
     */
    @java.lang.Override
    public double getDrawFrameAvg() {
      return drawFrameAvg_;
    }

    public static final int FLUSH_COUNT_FIELD_NUMBER = 7;
    private int flushCount_ = 0;
    /**
     * <pre>
     * Number of GPU commands flushes and max/min/avg time per flush in nanoseconds.
     * </pre>
     *
     * <code>optional uint32 flush_count = 7;</code>
     * @return Whether the flushCount field is set.
     */
    @java.lang.Override
    public boolean hasFlushCount() {
      return ((bitField0_ & 0x00000040) != 0);
    }
    /**
     * <pre>
     * Number of GPU commands flushes and max/min/avg time per flush in nanoseconds.
     * </pre>
     *
     * <code>optional uint32 flush_count = 7;</code>
     * @return The flushCount.
     */
    @java.lang.Override
    public int getFlushCount() {
      return flushCount_;
    }

    public static final int FLUSH_MAX_FIELD_NUMBER = 8;
    private long flushMax_ = 0L;
    /**
     * <code>optional int64 flush_max = 8;</code>
     * @return Whether the flushMax field is set.
     */
    @java.lang.Override
    public boolean hasFlushMax() {
      return ((bitField0_ & 0x00000080) != 0);
    }
    /**
     * <code>optional int64 flush_max = 8;</code>
     * @return The flushMax.
     */
    @java.lang.Override
    public long getFlushMax() {
      return flushMax_;
    }

    public static final int FLUSH_MIN_FIELD_NUMBER = 9;
    private long flushMin_ = 0L;
    /**
     * <code>optional int64 flush_min = 9;</code>
     * @return Whether the flushMin field is set.
     */
    @java.lang.Override
    public boolean hasFlushMin() {
      return ((bitField0_ & 0x00000100) != 0);
    }
    /**
     * <code>optional int64 flush_min = 9;</code>
     * @return The flushMin.
     */
    @java.lang.Override
    public long getFlushMin() {
      return flushMin_;
    }

    public static final int FLUSH_AVG_FIELD_NUMBER = 10;
    private double flushAvg_ = 0D;
    /**
     * <code>optional double flush_avg = 10;</code>
     * @return Whether the flushAvg field is set.
     */
    @java.lang.Override
    public boolean hasFlushAvg() {
      return ((bitField0_ & 0x00000200) != 0);
    }
    /**
     * <code>optional double flush_avg = 10;</code>
     * @return The flushAvg.
     */
    @java.lang.Override
    public double getFlushAvg() {
      return flushAvg_;
    }

    public static final int PREPARE_TREE_COUNT_FIELD_NUMBER = 11;
    private int prepareTreeCount_ = 0;
    /**
     * <pre>
     * Number of View tree preparation counts and max/min/avg time to traverse the tree in
     * nanoseconds.
     * </pre>
     *
     * <code>optional uint32 prepare_tree_count = 11;</code>
     * @return Whether the prepareTreeCount field is set.
     */
    @java.lang.Override
    public boolean hasPrepareTreeCount() {
      return ((bitField0_ & 0x00000400) != 0);
    }
    /**
     * <pre>
     * Number of View tree preparation counts and max/min/avg time to traverse the tree in
     * nanoseconds.
     * </pre>
     *
     * <code>optional uint32 prepare_tree_count = 11;</code>
     * @return The prepareTreeCount.
     */
    @java.lang.Override
    public int getPrepareTreeCount() {
      return prepareTreeCount_;
    }

    public static final int PREPARE_TREE_MAX_FIELD_NUMBER = 12;
    private long prepareTreeMax_ = 0L;
    /**
     * <code>optional int64 prepare_tree_max = 12;</code>
     * @return Whether the prepareTreeMax field is set.
     */
    @java.lang.Override
    public boolean hasPrepareTreeMax() {
      return ((bitField0_ & 0x00000800) != 0);
    }
    /**
     * <code>optional int64 prepare_tree_max = 12;</code>
     * @return The prepareTreeMax.
     */
    @java.lang.Override
    public long getPrepareTreeMax() {
      return prepareTreeMax_;
    }

    public static final int PREPARE_TREE_MIN_FIELD_NUMBER = 13;
    private long prepareTreeMin_ = 0L;
    /**
     * <code>optional int64 prepare_tree_min = 13;</code>
     * @return Whether the prepareTreeMin field is set.
     */
    @java.lang.Override
    public boolean hasPrepareTreeMin() {
      return ((bitField0_ & 0x00001000) != 0);
    }
    /**
     * <code>optional int64 prepare_tree_min = 13;</code>
     * @return The prepareTreeMin.
     */
    @java.lang.Override
    public long getPrepareTreeMin() {
      return prepareTreeMin_;
    }

    public static final int PREPARE_TREE_AVG_FIELD_NUMBER = 14;
    private double prepareTreeAvg_ = 0D;
    /**
     * <code>optional double prepare_tree_avg = 14;</code>
     * @return Whether the prepareTreeAvg field is set.
     */
    @java.lang.Override
    public boolean hasPrepareTreeAvg() {
      return ((bitField0_ & 0x00002000) != 0);
    }
    /**
     * <code>optional double prepare_tree_avg = 14;</code>
     * @return The prepareTreeAvg.
     */
    @java.lang.Override
    public double getPrepareTreeAvg() {
      return prepareTreeAvg_;
    }

    public static final int GPU_COMPLETION_COUNT_FIELD_NUMBER = 15;
    private int gpuCompletionCount_ = 0;
    /**
     * <pre>
     * Number of times the GPU rendered a frame and max/min/avg time for GPU to finish rendering in
     * in nanoseconds.
     * </pre>
     *
     * <code>optional uint32 gpu_completion_count = 15;</code>
     * @return Whether the gpuCompletionCount field is set.
     */
    @java.lang.Override
    public boolean hasGpuCompletionCount() {
      return ((bitField0_ & 0x00004000) != 0);
    }
    /**
     * <pre>
     * Number of times the GPU rendered a frame and max/min/avg time for GPU to finish rendering in
     * in nanoseconds.
     * </pre>
     *
     * <code>optional uint32 gpu_completion_count = 15;</code>
     * @return The gpuCompletionCount.
     */
    @java.lang.Override
    public int getGpuCompletionCount() {
      return gpuCompletionCount_;
    }

    public static final int GPU_COMPLETION_MAX_FIELD_NUMBER = 16;
    private long gpuCompletionMax_ = 0L;
    /**
     * <code>optional int64 gpu_completion_max = 16;</code>
     * @return Whether the gpuCompletionMax field is set.
     */
    @java.lang.Override
    public boolean hasGpuCompletionMax() {
      return ((bitField0_ & 0x00008000) != 0);
    }
    /**
     * <code>optional int64 gpu_completion_max = 16;</code>
     * @return The gpuCompletionMax.
     */
    @java.lang.Override
    public long getGpuCompletionMax() {
      return gpuCompletionMax_;
    }

    public static final int GPU_COMPLETION_MIN_FIELD_NUMBER = 17;
    private long gpuCompletionMin_ = 0L;
    /**
     * <code>optional int64 gpu_completion_min = 17;</code>
     * @return Whether the gpuCompletionMin field is set.
     */
    @java.lang.Override
    public boolean hasGpuCompletionMin() {
      return ((bitField0_ & 0x00010000) != 0);
    }
    /**
     * <code>optional int64 gpu_completion_min = 17;</code>
     * @return The gpuCompletionMin.
     */
    @java.lang.Override
    public long getGpuCompletionMin() {
      return gpuCompletionMin_;
    }

    public static final int GPU_COMPLETION_AVG_FIELD_NUMBER = 18;
    private double gpuCompletionAvg_ = 0D;
    /**
     * <code>optional double gpu_completion_avg = 18;</code>
     * @return Whether the gpuCompletionAvg field is set.
     */
    @java.lang.Override
    public boolean hasGpuCompletionAvg() {
      return ((bitField0_ & 0x00020000) != 0);
    }
    /**
     * <code>optional double gpu_completion_avg = 18;</code>
     * @return The gpuCompletionAvg.
     */
    @java.lang.Override
    public double getGpuCompletionAvg() {
      return gpuCompletionAvg_;
    }

    public static final int UI_RECORD_COUNT_FIELD_NUMBER = 19;
    private int uiRecordCount_ = 0;
    /**
     * <pre>
     * Number of times a frame was recorded/serialized in a display list on the UI thread with
     * max/min/avg time in nanoseconds.
     * </pre>
     *
     * <code>optional uint32 ui_record_count = 19;</code>
     * @return Whether the uiRecordCount field is set.
     */
    @java.lang.Override
    public boolean hasUiRecordCount() {
      return ((bitField0_ & 0x00040000) != 0);
    }
    /**
     * <pre>
     * Number of times a frame was recorded/serialized in a display list on the UI thread with
     * max/min/avg time in nanoseconds.
     * </pre>
     *
     * <code>optional uint32 ui_record_count = 19;</code>
     * @return The uiRecordCount.
     */
    @java.lang.Override
    public int getUiRecordCount() {
      return uiRecordCount_;
    }

    public static final int UI_RECORD_MAX_FIELD_NUMBER = 20;
    private long uiRecordMax_ = 0L;
    /**
     * <code>optional int64 ui_record_max = 20;</code>
     * @return Whether the uiRecordMax field is set.
     */
    @java.lang.Override
    public boolean hasUiRecordMax() {
      return ((bitField0_ & 0x00080000) != 0);
    }
    /**
     * <code>optional int64 ui_record_max = 20;</code>
     * @return The uiRecordMax.
     */
    @java.lang.Override
    public long getUiRecordMax() {
      return uiRecordMax_;
    }

    public static final int UI_RECORD_MIN_FIELD_NUMBER = 21;
    private long uiRecordMin_ = 0L;
    /**
     * <code>optional int64 ui_record_min = 21;</code>
     * @return Whether the uiRecordMin field is set.
     */
    @java.lang.Override
    public boolean hasUiRecordMin() {
      return ((bitField0_ & 0x00100000) != 0);
    }
    /**
     * <code>optional int64 ui_record_min = 21;</code>
     * @return The uiRecordMin.
     */
    @java.lang.Override
    public long getUiRecordMin() {
      return uiRecordMin_;
    }

    public static final int UI_RECORD_AVG_FIELD_NUMBER = 22;
    private double uiRecordAvg_ = 0D;
    /**
     * <code>optional double ui_record_avg = 22;</code>
     * @return Whether the uiRecordAvg field is set.
     */
    @java.lang.Override
    public boolean hasUiRecordAvg() {
      return ((bitField0_ & 0x00200000) != 0);
    }
    /**
     * <code>optional double ui_record_avg = 22;</code>
     * @return The uiRecordAvg.
     */
    @java.lang.Override
    public double getUiRecordAvg() {
      return uiRecordAvg_;
    }

    public static final int SHADER_COMPILE_COUNT_FIELD_NUMBER = 23;
    private int shaderCompileCount_ = 0;
    /**
     * <pre>
     * number of unique shader programs that were used to render frames, followed by total and average
     * times to prepare a shader in nanoseconds.
     * </pre>
     *
     * <code>optional uint32 shader_compile_count = 23;</code>
     * @return Whether the shaderCompileCount field is set.
     */
    @java.lang.Override
    public boolean hasShaderCompileCount() {
      return ((bitField0_ & 0x00400000) != 0);
    }
    /**
     * <pre>
     * number of unique shader programs that were used to render frames, followed by total and average
     * times to prepare a shader in nanoseconds.
     * </pre>
     *
     * <code>optional uint32 shader_compile_count = 23;</code>
     * @return The shaderCompileCount.
     */
    @java.lang.Override
    public int getShaderCompileCount() {
      return shaderCompileCount_;
    }

    public static final int SHADER_COMPILE_TIME_FIELD_NUMBER = 24;
    private long shaderCompileTime_ = 0L;
    /**
     * <code>optional int64 shader_compile_time = 24;</code>
     * @return Whether the shaderCompileTime field is set.
     */
    @java.lang.Override
    public boolean hasShaderCompileTime() {
      return ((bitField0_ & 0x00800000) != 0);
    }
    /**
     * <code>optional int64 shader_compile_time = 24;</code>
     * @return The shaderCompileTime.
     */
    @java.lang.Override
    public long getShaderCompileTime() {
      return shaderCompileTime_;
    }

    public static final int SHADER_COMPILE_AVG_FIELD_NUMBER = 25;
    private double shaderCompileAvg_ = 0D;
    /**
     * <code>optional double shader_compile_avg = 25;</code>
     * @return Whether the shaderCompileAvg field is set.
     */
    @java.lang.Override
    public boolean hasShaderCompileAvg() {
      return ((bitField0_ & 0x01000000) != 0);
    }
    /**
     * <code>optional double shader_compile_avg = 25;</code>
     * @return The shaderCompileAvg.
     */
    @java.lang.Override
    public double getShaderCompileAvg() {
      return shaderCompileAvg_;
    }

    public static final int CACHE_HIT_COUNT_FIELD_NUMBER = 26;
    private int cacheHitCount_ = 0;
    /**
     * <pre>
     * number of shader programs loaded from the disk cache, followed by total time and average time
     * to prepare a shader in nanoseconds.
     * </pre>
     *
     * <code>optional uint32 cache_hit_count = 26;</code>
     * @return Whether the cacheHitCount field is set.
     */
    @java.lang.Override
    public boolean hasCacheHitCount() {
      return ((bitField0_ & 0x02000000) != 0);
    }
    /**
     * <pre>
     * number of shader programs loaded from the disk cache, followed by total time and average time
     * to prepare a shader in nanoseconds.
     * </pre>
     *
     * <code>optional uint32 cache_hit_count = 26;</code>
     * @return The cacheHitCount.
     */
    @java.lang.Override
    public int getCacheHitCount() {
      return cacheHitCount_;
    }

    public static final int CACHE_HIT_TIME_FIELD_NUMBER = 27;
    private long cacheHitTime_ = 0L;
    /**
     * <code>optional int64 cache_hit_time = 27;</code>
     * @return Whether the cacheHitTime field is set.
     */
    @java.lang.Override
    public boolean hasCacheHitTime() {
      return ((bitField0_ & 0x04000000) != 0);
    }
    /**
     * <code>optional int64 cache_hit_time = 27;</code>
     * @return The cacheHitTime.
     */
    @java.lang.Override
    public long getCacheHitTime() {
      return cacheHitTime_;
    }

    public static final int CACHE_HIT_AVG_FIELD_NUMBER = 28;
    private double cacheHitAvg_ = 0D;
    /**
     * <code>optional double cache_hit_avg = 28;</code>
     * @return Whether the cacheHitAvg field is set.
     */
    @java.lang.Override
    public boolean hasCacheHitAvg() {
      return ((bitField0_ & 0x08000000) != 0);
    }
    /**
     * <code>optional double cache_hit_avg = 28;</code>
     * @return The cacheHitAvg.
     */
    @java.lang.Override
    public double getCacheHitAvg() {
      return cacheHitAvg_;
    }

    public static final int CACHE_MISS_COUNT_FIELD_NUMBER = 29;
    private int cacheMissCount_ = 0;
    /**
     * <pre>
     * number of shader programs compiled/linked, followed by total time and average time to prepare
     * a shader in nanoseconds.
     * </pre>
     *
     * <code>optional uint32 cache_miss_count = 29;</code>
     * @return Whether the cacheMissCount field is set.
     */
    @java.lang.Override
    public boolean hasCacheMissCount() {
      return ((bitField0_ & 0x10000000) != 0);
    }
    /**
     * <pre>
     * number of shader programs compiled/linked, followed by total time and average time to prepare
     * a shader in nanoseconds.
     * </pre>
     *
     * <code>optional uint32 cache_miss_count = 29;</code>
     * @return The cacheMissCount.
     */
    @java.lang.Override
    public int getCacheMissCount() {
      return cacheMissCount_;
    }

    public static final int CACHE_MISS_TIME_FIELD_NUMBER = 30;
    private long cacheMissTime_ = 0L;
    /**
     * <code>optional int64 cache_miss_time = 30;</code>
     * @return Whether the cacheMissTime field is set.
     */
    @java.lang.Override
    public boolean hasCacheMissTime() {
      return ((bitField0_ & 0x20000000) != 0);
    }
    /**
     * <code>optional int64 cache_miss_time = 30;</code>
     * @return The cacheMissTime.
     */
    @java.lang.Override
    public long getCacheMissTime() {
      return cacheMissTime_;
    }

    public static final int CACHE_MISS_AVG_FIELD_NUMBER = 31;
    private double cacheMissAvg_ = 0D;
    /**
     * <code>optional double cache_miss_avg = 31;</code>
     * @return Whether the cacheMissAvg field is set.
     */
    @java.lang.Override
    public boolean hasCacheMissAvg() {
      return ((bitField0_ & 0x40000000) != 0);
    }
    /**
     * <code>optional double cache_miss_avg = 31;</code>
     * @return The cacheMissAvg.
     */
    @java.lang.Override
    public double getCacheMissAvg() {
      return cacheMissAvg_;
    }

    public static final int GRAPHICS_CPU_MEM_MAX_FIELD_NUMBER = 32;
    private long graphicsCpuMemMax_ = 0L;
    /**
     * <pre>
     * max/min/avg CPU memory used for graphics by HWUI at the end of a frame.
     * </pre>
     *
     * <code>optional int64 graphics_cpu_mem_max = 32;</code>
     * @return Whether the graphicsCpuMemMax field is set.
     */
    @java.lang.Override
    public boolean hasGraphicsCpuMemMax() {
      return ((bitField0_ & 0x80000000) != 0);
    }
    /**
     * <pre>
     * max/min/avg CPU memory used for graphics by HWUI at the end of a frame.
     * </pre>
     *
     * <code>optional int64 graphics_cpu_mem_max = 32;</code>
     * @return The graphicsCpuMemMax.
     */
    @java.lang.Override
    public long getGraphicsCpuMemMax() {
      return graphicsCpuMemMax_;
    }

    public static final int GRAPHICS_CPU_MEM_MIN_FIELD_NUMBER = 33;
    private long graphicsCpuMemMin_ = 0L;
    /**
     * <code>optional int64 graphics_cpu_mem_min = 33;</code>
     * @return Whether the graphicsCpuMemMin field is set.
     */
    @java.lang.Override
    public boolean hasGraphicsCpuMemMin() {
      return ((bitField1_ & 0x00000001) != 0);
    }
    /**
     * <code>optional int64 graphics_cpu_mem_min = 33;</code>
     * @return The graphicsCpuMemMin.
     */
    @java.lang.Override
    public long getGraphicsCpuMemMin() {
      return graphicsCpuMemMin_;
    }

    public static final int GRAPHICS_CPU_MEM_AVG_FIELD_NUMBER = 34;
    private double graphicsCpuMemAvg_ = 0D;
    /**
     * <code>optional double graphics_cpu_mem_avg = 34;</code>
     * @return Whether the graphicsCpuMemAvg field is set.
     */
    @java.lang.Override
    public boolean hasGraphicsCpuMemAvg() {
      return ((bitField1_ & 0x00000002) != 0);
    }
    /**
     * <code>optional double graphics_cpu_mem_avg = 34;</code>
     * @return The graphicsCpuMemAvg.
     */
    @java.lang.Override
    public double getGraphicsCpuMemAvg() {
      return graphicsCpuMemAvg_;
    }

    public static final int GRAPHICS_GPU_MEM_MAX_FIELD_NUMBER = 35;
    private long graphicsGpuMemMax_ = 0L;
    /**
     * <pre>
     * max/min/avg GPU memory used by HWUI at the end of a frame excluding textures.
     * </pre>
     *
     * <code>optional int64 graphics_gpu_mem_max = 35;</code>
     * @return Whether the graphicsGpuMemMax field is set.
     */
    @java.lang.Override
    public boolean hasGraphicsGpuMemMax() {
      return ((bitField1_ & 0x00000004) != 0);
    }
    /**
     * <pre>
     * max/min/avg GPU memory used by HWUI at the end of a frame excluding textures.
     * </pre>
     *
     * <code>optional int64 graphics_gpu_mem_max = 35;</code>
     * @return The graphicsGpuMemMax.
     */
    @java.lang.Override
    public long getGraphicsGpuMemMax() {
      return graphicsGpuMemMax_;
    }

    public static final int GRAPHICS_GPU_MEM_MIN_FIELD_NUMBER = 36;
    private long graphicsGpuMemMin_ = 0L;
    /**
     * <code>optional int64 graphics_gpu_mem_min = 36;</code>
     * @return Whether the graphicsGpuMemMin field is set.
     */
    @java.lang.Override
    public boolean hasGraphicsGpuMemMin() {
      return ((bitField1_ & 0x00000008) != 0);
    }
    /**
     * <code>optional int64 graphics_gpu_mem_min = 36;</code>
     * @return The graphicsGpuMemMin.
     */
    @java.lang.Override
    public long getGraphicsGpuMemMin() {
      return graphicsGpuMemMin_;
    }

    public static final int GRAPHICS_GPU_MEM_AVG_FIELD_NUMBER = 37;
    private double graphicsGpuMemAvg_ = 0D;
    /**
     * <code>optional double graphics_gpu_mem_avg = 37;</code>
     * @return Whether the graphicsGpuMemAvg field is set.
     */
    @java.lang.Override
    public boolean hasGraphicsGpuMemAvg() {
      return ((bitField1_ & 0x00000010) != 0);
    }
    /**
     * <code>optional double graphics_gpu_mem_avg = 37;</code>
     * @return The graphicsGpuMemAvg.
     */
    @java.lang.Override
    public double getGraphicsGpuMemAvg() {
      return graphicsGpuMemAvg_;
    }

    public static final int TEXTURE_MEM_MAX_FIELD_NUMBER = 38;
    private long textureMemMax_ = 0L;
    /**
     * <pre>
     * max/min/avg memory used for GPU textures by HWUI at the end of a frame.
     * </pre>
     *
     * <code>optional int64 texture_mem_max = 38;</code>
     * @return Whether the textureMemMax field is set.
     */
    @java.lang.Override
    public boolean hasTextureMemMax() {
      return ((bitField1_ & 0x00000020) != 0);
    }
    /**
     * <pre>
     * max/min/avg memory used for GPU textures by HWUI at the end of a frame.
     * </pre>
     *
     * <code>optional int64 texture_mem_max = 38;</code>
     * @return The textureMemMax.
     */
    @java.lang.Override
    public long getTextureMemMax() {
      return textureMemMax_;
    }

    public static final int TEXTURE_MEM_MIN_FIELD_NUMBER = 39;
    private long textureMemMin_ = 0L;
    /**
     * <code>optional int64 texture_mem_min = 39;</code>
     * @return Whether the textureMemMin field is set.
     */
    @java.lang.Override
    public boolean hasTextureMemMin() {
      return ((bitField1_ & 0x00000040) != 0);
    }
    /**
     * <code>optional int64 texture_mem_min = 39;</code>
     * @return The textureMemMin.
     */
    @java.lang.Override
    public long getTextureMemMin() {
      return textureMemMin_;
    }

    public static final int TEXTURE_MEM_AVG_FIELD_NUMBER = 40;
    private double textureMemAvg_ = 0D;
    /**
     * <code>optional double texture_mem_avg = 40;</code>
     * @return Whether the textureMemAvg field is set.
     */
    @java.lang.Override
    public boolean hasTextureMemAvg() {
      return ((bitField1_ & 0x00000080) != 0);
    }
    /**
     * <code>optional double texture_mem_avg = 40;</code>
     * @return The textureMemAvg.
     */
    @java.lang.Override
    public double getTextureMemAvg() {
      return textureMemAvg_;
    }

    public static final int ALL_MEM_MAX_FIELD_NUMBER = 41;
    private long allMemMax_ = 0L;
    /**
     * <pre>
     * max/min/avg memory used by HWUI at the end of a frame. This is a sum of previous 3 categories.
     * </pre>
     *
     * <code>optional int64 all_mem_max = 41;</code>
     * @return Whether the allMemMax field is set.
     */
    @java.lang.Override
    public boolean hasAllMemMax() {
      return ((bitField1_ & 0x00000100) != 0);
    }
    /**
     * <pre>
     * max/min/avg memory used by HWUI at the end of a frame. This is a sum of previous 3 categories.
     * </pre>
     *
     * <code>optional int64 all_mem_max = 41;</code>
     * @return The allMemMax.
     */
    @java.lang.Override
    public long getAllMemMax() {
      return allMemMax_;
    }

    public static final int ALL_MEM_MIN_FIELD_NUMBER = 42;
    private long allMemMin_ = 0L;
    /**
     * <code>optional int64 all_mem_min = 42;</code>
     * @return Whether the allMemMin field is set.
     */
    @java.lang.Override
    public boolean hasAllMemMin() {
      return ((bitField1_ & 0x00000200) != 0);
    }
    /**
     * <code>optional int64 all_mem_min = 42;</code>
     * @return The allMemMin.
     */
    @java.lang.Override
    public long getAllMemMin() {
      return allMemMin_;
    }

    public static final int ALL_MEM_AVG_FIELD_NUMBER = 43;
    private double allMemAvg_ = 0D;
    /**
     * <code>optional double all_mem_avg = 43;</code>
     * @return Whether the allMemAvg field is set.
     */
    @java.lang.Override
    public boolean hasAllMemAvg() {
      return ((bitField1_ & 0x00000400) != 0);
    }
    /**
     * <code>optional double all_mem_avg = 43;</code>
     * @return The allMemAvg.
     */
    @java.lang.Override
    public double getAllMemAvg() {
      return allMemAvg_;
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (((bitField0_ & 0x00000001) != 0)) {
        com.google.protobuf.GeneratedMessageV3.writeString(output, 1, processName_);
      }
      if (((bitField0_ & 0x00000002) != 0)) {
        output.writeInt64(2, rtCpuTimeMs_);
      }
      if (((bitField0_ & 0x00000004) != 0)) {
        output.writeUInt32(3, drawFrameCount_);
      }
      if (((bitField0_ & 0x00000008) != 0)) {
        output.writeInt64(4, drawFrameMax_);
      }
      if (((bitField0_ & 0x00000010) != 0)) {
        output.writeInt64(5, drawFrameMin_);
      }
      if (((bitField0_ & 0x00000020) != 0)) {
        output.writeDouble(6, drawFrameAvg_);
      }
      if (((bitField0_ & 0x00000040) != 0)) {
        output.writeUInt32(7, flushCount_);
      }
      if (((bitField0_ & 0x00000080) != 0)) {
        output.writeInt64(8, flushMax_);
      }
      if (((bitField0_ & 0x00000100) != 0)) {
        output.writeInt64(9, flushMin_);
      }
      if (((bitField0_ & 0x00000200) != 0)) {
        output.writeDouble(10, flushAvg_);
      }
      if (((bitField0_ & 0x00000400) != 0)) {
        output.writeUInt32(11, prepareTreeCount_);
      }
      if (((bitField0_ & 0x00000800) != 0)) {
        output.writeInt64(12, prepareTreeMax_);
      }
      if (((bitField0_ & 0x00001000) != 0)) {
        output.writeInt64(13, prepareTreeMin_);
      }
      if (((bitField0_ & 0x00002000) != 0)) {
        output.writeDouble(14, prepareTreeAvg_);
      }
      if (((bitField0_ & 0x00004000) != 0)) {
        output.writeUInt32(15, gpuCompletionCount_);
      }
      if (((bitField0_ & 0x00008000) != 0)) {
        output.writeInt64(16, gpuCompletionMax_);
      }
      if (((bitField0_ & 0x00010000) != 0)) {
        output.writeInt64(17, gpuCompletionMin_);
      }
      if (((bitField0_ & 0x00020000) != 0)) {
        output.writeDouble(18, gpuCompletionAvg_);
      }
      if (((bitField0_ & 0x00040000) != 0)) {
        output.writeUInt32(19, uiRecordCount_);
      }
      if (((bitField0_ & 0x00080000) != 0)) {
        output.writeInt64(20, uiRecordMax_);
      }
      if (((bitField0_ & 0x00100000) != 0)) {
        output.writeInt64(21, uiRecordMin_);
      }
      if (((bitField0_ & 0x00200000) != 0)) {
        output.writeDouble(22, uiRecordAvg_);
      }
      if (((bitField0_ & 0x00400000) != 0)) {
        output.writeUInt32(23, shaderCompileCount_);
      }
      if (((bitField0_ & 0x00800000) != 0)) {
        output.writeInt64(24, shaderCompileTime_);
      }
      if (((bitField0_ & 0x01000000) != 0)) {
        output.writeDouble(25, shaderCompileAvg_);
      }
      if (((bitField0_ & 0x02000000) != 0)) {
        output.writeUInt32(26, cacheHitCount_);
      }
      if (((bitField0_ & 0x04000000) != 0)) {
        output.writeInt64(27, cacheHitTime_);
      }
      if (((bitField0_ & 0x08000000) != 0)) {
        output.writeDouble(28, cacheHitAvg_);
      }
      if (((bitField0_ & 0x10000000) != 0)) {
        output.writeUInt32(29, cacheMissCount_);
      }
      if (((bitField0_ & 0x20000000) != 0)) {
        output.writeInt64(30, cacheMissTime_);
      }
      if (((bitField0_ & 0x40000000) != 0)) {
        output.writeDouble(31, cacheMissAvg_);
      }
      if (((bitField0_ & 0x80000000) != 0)) {
        output.writeInt64(32, graphicsCpuMemMax_);
      }
      if (((bitField1_ & 0x00000001) != 0)) {
        output.writeInt64(33, graphicsCpuMemMin_);
      }
      if (((bitField1_ & 0x00000002) != 0)) {
        output.writeDouble(34, graphicsCpuMemAvg_);
      }
      if (((bitField1_ & 0x00000004) != 0)) {
        output.writeInt64(35, graphicsGpuMemMax_);
      }
      if (((bitField1_ & 0x00000008) != 0)) {
        output.writeInt64(36, graphicsGpuMemMin_);
      }
      if (((bitField1_ & 0x00000010) != 0)) {
        output.writeDouble(37, graphicsGpuMemAvg_);
      }
      if (((bitField1_ & 0x00000020) != 0)) {
        output.writeInt64(38, textureMemMax_);
      }
      if (((bitField1_ & 0x00000040) != 0)) {
        output.writeInt64(39, textureMemMin_);
      }
      if (((bitField1_ & 0x00000080) != 0)) {
        output.writeDouble(40, textureMemAvg_);
      }
      if (((bitField1_ & 0x00000100) != 0)) {
        output.writeInt64(41, allMemMax_);
      }
      if (((bitField1_ & 0x00000200) != 0)) {
        output.writeInt64(42, allMemMin_);
      }
      if (((bitField1_ & 0x00000400) != 0)) {
        output.writeDouble(43, allMemAvg_);
      }
      getUnknownFields().writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) != 0)) {
        size += com.google.protobuf.GeneratedMessageV3.computeStringSize(1, processName_);
      }
      if (((bitField0_ & 0x00000002) != 0)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt64Size(2, rtCpuTimeMs_);
      }
      if (((bitField0_ & 0x00000004) != 0)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(3, drawFrameCount_);
      }
      if (((bitField0_ & 0x00000008) != 0)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt64Size(4, drawFrameMax_);
      }
      if (((bitField0_ & 0x00000010) != 0)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt64Size(5, drawFrameMin_);
      }
      if (((bitField0_ & 0x00000020) != 0)) {
        size += com.google.protobuf.CodedOutputStream
          .computeDoubleSize(6, drawFrameAvg_);
      }
      if (((bitField0_ & 0x00000040) != 0)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(7, flushCount_);
      }
      if (((bitField0_ & 0x00000080) != 0)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt64Size(8, flushMax_);
      }
      if (((bitField0_ & 0x00000100) != 0)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt64Size(9, flushMin_);
      }
      if (((bitField0_ & 0x00000200) != 0)) {
        size += com.google.protobuf.CodedOutputStream
          .computeDoubleSize(10, flushAvg_);
      }
      if (((bitField0_ & 0x00000400) != 0)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(11, prepareTreeCount_);
      }
      if (((bitField0_ & 0x00000800) != 0)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt64Size(12, prepareTreeMax_);
      }
      if (((bitField0_ & 0x00001000) != 0)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt64Size(13, prepareTreeMin_);
      }
      if (((bitField0_ & 0x00002000) != 0)) {
        size += com.google.protobuf.CodedOutputStream
          .computeDoubleSize(14, prepareTreeAvg_);
      }
      if (((bitField0_ & 0x00004000) != 0)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(15, gpuCompletionCount_);
      }
      if (((bitField0_ & 0x00008000) != 0)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt64Size(16, gpuCompletionMax_);
      }
      if (((bitField0_ & 0x00010000) != 0)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt64Size(17, gpuCompletionMin_);
      }
      if (((bitField0_ & 0x00020000) != 0)) {
        size += com.google.protobuf.CodedOutputStream
          .computeDoubleSize(18, gpuCompletionAvg_);
      }
      if (((bitField0_ & 0x00040000) != 0)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(19, uiRecordCount_);
      }
      if (((bitField0_ & 0x00080000) != 0)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt64Size(20, uiRecordMax_);
      }
      if (((bitField0_ & 0x00100000) != 0)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt64Size(21, uiRecordMin_);
      }
      if (((bitField0_ & 0x00200000) != 0)) {
        size += com.google.protobuf.CodedOutputStream
          .computeDoubleSize(22, uiRecordAvg_);
      }
      if (((bitField0_ & 0x00400000) != 0)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(23, shaderCompileCount_);
      }
      if (((bitField0_ & 0x00800000) != 0)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt64Size(24, shaderCompileTime_);
      }
      if (((bitField0_ & 0x01000000) != 0)) {
        size += com.google.protobuf.CodedOutputStream
          .computeDoubleSize(25, shaderCompileAvg_);
      }
      if (((bitField0_ & 0x02000000) != 0)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(26, cacheHitCount_);
      }
      if (((bitField0_ & 0x04000000) != 0)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt64Size(27, cacheHitTime_);
      }
      if (((bitField0_ & 0x08000000) != 0)) {
        size += com.google.protobuf.CodedOutputStream
          .computeDoubleSize(28, cacheHitAvg_);
      }
      if (((bitField0_ & 0x10000000) != 0)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(29, cacheMissCount_);
      }
      if (((bitField0_ & 0x20000000) != 0)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt64Size(30, cacheMissTime_);
      }
      if (((bitField0_ & 0x40000000) != 0)) {
        size += com.google.protobuf.CodedOutputStream
          .computeDoubleSize(31, cacheMissAvg_);
      }
      if (((bitField0_ & 0x80000000) != 0)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt64Size(32, graphicsCpuMemMax_);
      }
      if (((bitField1_ & 0x00000001) != 0)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt64Size(33, graphicsCpuMemMin_);
      }
      if (((bitField1_ & 0x00000002) != 0)) {
        size += com.google.protobuf.CodedOutputStream
          .computeDoubleSize(34, graphicsCpuMemAvg_);
      }
      if (((bitField1_ & 0x00000004) != 0)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt64Size(35, graphicsGpuMemMax_);
      }
      if (((bitField1_ & 0x00000008) != 0)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt64Size(36, graphicsGpuMemMin_);
      }
      if (((bitField1_ & 0x00000010) != 0)) {
        size += com.google.protobuf.CodedOutputStream
          .computeDoubleSize(37, graphicsGpuMemAvg_);
      }
      if (((bitField1_ & 0x00000020) != 0)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt64Size(38, textureMemMax_);
      }
      if (((bitField1_ & 0x00000040) != 0)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt64Size(39, textureMemMin_);
      }
      if (((bitField1_ & 0x00000080) != 0)) {
        size += com.google.protobuf.CodedOutputStream
          .computeDoubleSize(40, textureMemAvg_);
      }
      if (((bitField1_ & 0x00000100) != 0)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt64Size(41, allMemMax_);
      }
      if (((bitField1_ & 0x00000200) != 0)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt64Size(42, allMemMin_);
      }
      if (((bitField1_ & 0x00000400) != 0)) {
        size += com.google.protobuf.CodedOutputStream
          .computeDoubleSize(43, allMemAvg_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof perfetto.protos.HwuiMetric.ProcessRenderInfo)) {
        return super.equals(obj);
      }
      perfetto.protos.HwuiMetric.ProcessRenderInfo other = (perfetto.protos.HwuiMetric.ProcessRenderInfo) obj;

      if (hasProcessName() != other.hasProcessName()) return false;
      if (hasProcessName()) {
        if (!getProcessName()
            .equals(other.getProcessName())) return false;
      }
      if (hasRtCpuTimeMs() != other.hasRtCpuTimeMs()) return false;
      if (hasRtCpuTimeMs()) {
        if (getRtCpuTimeMs()
            != other.getRtCpuTimeMs()) return false;
      }
      if (hasDrawFrameCount() != other.hasDrawFrameCount()) return false;
      if (hasDrawFrameCount()) {
        if (getDrawFrameCount()
            != other.getDrawFrameCount()) return false;
      }
      if (hasDrawFrameMax() != other.hasDrawFrameMax()) return false;
      if (hasDrawFrameMax()) {
        if (getDrawFrameMax()
            != other.getDrawFrameMax()) return false;
      }
      if (hasDrawFrameMin() != other.hasDrawFrameMin()) return false;
      if (hasDrawFrameMin()) {
        if (getDrawFrameMin()
            != other.getDrawFrameMin()) return false;
      }
      if (hasDrawFrameAvg() != other.hasDrawFrameAvg()) return false;
      if (hasDrawFrameAvg()) {
        if (java.lang.Double.doubleToLongBits(getDrawFrameAvg())
            != java.lang.Double.doubleToLongBits(
                other.getDrawFrameAvg())) return false;
      }
      if (hasFlushCount() != other.hasFlushCount()) return false;
      if (hasFlushCount()) {
        if (getFlushCount()
            != other.getFlushCount()) return false;
      }
      if (hasFlushMax() != other.hasFlushMax()) return false;
      if (hasFlushMax()) {
        if (getFlushMax()
            != other.getFlushMax()) return false;
      }
      if (hasFlushMin() != other.hasFlushMin()) return false;
      if (hasFlushMin()) {
        if (getFlushMin()
            != other.getFlushMin()) return false;
      }
      if (hasFlushAvg() != other.hasFlushAvg()) return false;
      if (hasFlushAvg()) {
        if (java.lang.Double.doubleToLongBits(getFlushAvg())
            != java.lang.Double.doubleToLongBits(
                other.getFlushAvg())) return false;
      }
      if (hasPrepareTreeCount() != other.hasPrepareTreeCount()) return false;
      if (hasPrepareTreeCount()) {
        if (getPrepareTreeCount()
            != other.getPrepareTreeCount()) return false;
      }
      if (hasPrepareTreeMax() != other.hasPrepareTreeMax()) return false;
      if (hasPrepareTreeMax()) {
        if (getPrepareTreeMax()
            != other.getPrepareTreeMax()) return false;
      }
      if (hasPrepareTreeMin() != other.hasPrepareTreeMin()) return false;
      if (hasPrepareTreeMin()) {
        if (getPrepareTreeMin()
            != other.getPrepareTreeMin()) return false;
      }
      if (hasPrepareTreeAvg() != other.hasPrepareTreeAvg()) return false;
      if (hasPrepareTreeAvg()) {
        if (java.lang.Double.doubleToLongBits(getPrepareTreeAvg())
            != java.lang.Double.doubleToLongBits(
                other.getPrepareTreeAvg())) return false;
      }
      if (hasGpuCompletionCount() != other.hasGpuCompletionCount()) return false;
      if (hasGpuCompletionCount()) {
        if (getGpuCompletionCount()
            != other.getGpuCompletionCount()) return false;
      }
      if (hasGpuCompletionMax() != other.hasGpuCompletionMax()) return false;
      if (hasGpuCompletionMax()) {
        if (getGpuCompletionMax()
            != other.getGpuCompletionMax()) return false;
      }
      if (hasGpuCompletionMin() != other.hasGpuCompletionMin()) return false;
      if (hasGpuCompletionMin()) {
        if (getGpuCompletionMin()
            != other.getGpuCompletionMin()) return false;
      }
      if (hasGpuCompletionAvg() != other.hasGpuCompletionAvg()) return false;
      if (hasGpuCompletionAvg()) {
        if (java.lang.Double.doubleToLongBits(getGpuCompletionAvg())
            != java.lang.Double.doubleToLongBits(
                other.getGpuCompletionAvg())) return false;
      }
      if (hasUiRecordCount() != other.hasUiRecordCount()) return false;
      if (hasUiRecordCount()) {
        if (getUiRecordCount()
            != other.getUiRecordCount()) return false;
      }
      if (hasUiRecordMax() != other.hasUiRecordMax()) return false;
      if (hasUiRecordMax()) {
        if (getUiRecordMax()
            != other.getUiRecordMax()) return false;
      }
      if (hasUiRecordMin() != other.hasUiRecordMin()) return false;
      if (hasUiRecordMin()) {
        if (getUiRecordMin()
            != other.getUiRecordMin()) return false;
      }
      if (hasUiRecordAvg() != other.hasUiRecordAvg()) return false;
      if (hasUiRecordAvg()) {
        if (java.lang.Double.doubleToLongBits(getUiRecordAvg())
            != java.lang.Double.doubleToLongBits(
                other.getUiRecordAvg())) return false;
      }
      if (hasShaderCompileCount() != other.hasShaderCompileCount()) return false;
      if (hasShaderCompileCount()) {
        if (getShaderCompileCount()
            != other.getShaderCompileCount()) return false;
      }
      if (hasShaderCompileTime() != other.hasShaderCompileTime()) return false;
      if (hasShaderCompileTime()) {
        if (getShaderCompileTime()
            != other.getShaderCompileTime()) return false;
      }
      if (hasShaderCompileAvg() != other.hasShaderCompileAvg()) return false;
      if (hasShaderCompileAvg()) {
        if (java.lang.Double.doubleToLongBits(getShaderCompileAvg())
            != java.lang.Double.doubleToLongBits(
                other.getShaderCompileAvg())) return false;
      }
      if (hasCacheHitCount() != other.hasCacheHitCount()) return false;
      if (hasCacheHitCount()) {
        if (getCacheHitCount()
            != other.getCacheHitCount()) return false;
      }
      if (hasCacheHitTime() != other.hasCacheHitTime()) return false;
      if (hasCacheHitTime()) {
        if (getCacheHitTime()
            != other.getCacheHitTime()) return false;
      }
      if (hasCacheHitAvg() != other.hasCacheHitAvg()) return false;
      if (hasCacheHitAvg()) {
        if (java.lang.Double.doubleToLongBits(getCacheHitAvg())
            != java.lang.Double.doubleToLongBits(
                other.getCacheHitAvg())) return false;
      }
      if (hasCacheMissCount() != other.hasCacheMissCount()) return false;
      if (hasCacheMissCount()) {
        if (getCacheMissCount()
            != other.getCacheMissCount()) return false;
      }
      if (hasCacheMissTime() != other.hasCacheMissTime()) return false;
      if (hasCacheMissTime()) {
        if (getCacheMissTime()
            != other.getCacheMissTime()) return false;
      }
      if (hasCacheMissAvg() != other.hasCacheMissAvg()) return false;
      if (hasCacheMissAvg()) {
        if (java.lang.Double.doubleToLongBits(getCacheMissAvg())
            != java.lang.Double.doubleToLongBits(
                other.getCacheMissAvg())) return false;
      }
      if (hasGraphicsCpuMemMax() != other.hasGraphicsCpuMemMax()) return false;
      if (hasGraphicsCpuMemMax()) {
        if (getGraphicsCpuMemMax()
            != other.getGraphicsCpuMemMax()) return false;
      }
      if (hasGraphicsCpuMemMin() != other.hasGraphicsCpuMemMin()) return false;
      if (hasGraphicsCpuMemMin()) {
        if (getGraphicsCpuMemMin()
            != other.getGraphicsCpuMemMin()) return false;
      }
      if (hasGraphicsCpuMemAvg() != other.hasGraphicsCpuMemAvg()) return false;
      if (hasGraphicsCpuMemAvg()) {
        if (java.lang.Double.doubleToLongBits(getGraphicsCpuMemAvg())
            != java.lang.Double.doubleToLongBits(
                other.getGraphicsCpuMemAvg())) return false;
      }
      if (hasGraphicsGpuMemMax() != other.hasGraphicsGpuMemMax()) return false;
      if (hasGraphicsGpuMemMax()) {
        if (getGraphicsGpuMemMax()
            != other.getGraphicsGpuMemMax()) return false;
      }
      if (hasGraphicsGpuMemMin() != other.hasGraphicsGpuMemMin()) return false;
      if (hasGraphicsGpuMemMin()) {
        if (getGraphicsGpuMemMin()
            != other.getGraphicsGpuMemMin()) return false;
      }
      if (hasGraphicsGpuMemAvg() != other.hasGraphicsGpuMemAvg()) return false;
      if (hasGraphicsGpuMemAvg()) {
        if (java.lang.Double.doubleToLongBits(getGraphicsGpuMemAvg())
            != java.lang.Double.doubleToLongBits(
                other.getGraphicsGpuMemAvg())) return false;
      }
      if (hasTextureMemMax() != other.hasTextureMemMax()) return false;
      if (hasTextureMemMax()) {
        if (getTextureMemMax()
            != other.getTextureMemMax()) return false;
      }
      if (hasTextureMemMin() != other.hasTextureMemMin()) return false;
      if (hasTextureMemMin()) {
        if (getTextureMemMin()
            != other.getTextureMemMin()) return false;
      }
      if (hasTextureMemAvg() != other.hasTextureMemAvg()) return false;
      if (hasTextureMemAvg()) {
        if (java.lang.Double.doubleToLongBits(getTextureMemAvg())
            != java.lang.Double.doubleToLongBits(
                other.getTextureMemAvg())) return false;
      }
      if (hasAllMemMax() != other.hasAllMemMax()) return false;
      if (hasAllMemMax()) {
        if (getAllMemMax()
            != other.getAllMemMax()) return false;
      }
      if (hasAllMemMin() != other.hasAllMemMin()) return false;
      if (hasAllMemMin()) {
        if (getAllMemMin()
            != other.getAllMemMin()) return false;
      }
      if (hasAllMemAvg() != other.hasAllMemAvg()) return false;
      if (hasAllMemAvg()) {
        if (java.lang.Double.doubleToLongBits(getAllMemAvg())
            != java.lang.Double.doubleToLongBits(
                other.getAllMemAvg())) return false;
      }
      if (!getUnknownFields().equals(other.getUnknownFields())) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      if (hasProcessName()) {
        hash = (37 * hash) + PROCESS_NAME_FIELD_NUMBER;
        hash = (53 * hash) + getProcessName().hashCode();
      }
      if (hasRtCpuTimeMs()) {
        hash = (37 * hash) + RT_CPU_TIME_MS_FIELD_NUMBER;
        hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
            getRtCpuTimeMs());
      }
      if (hasDrawFrameCount()) {
        hash = (37 * hash) + DRAW_FRAME_COUNT_FIELD_NUMBER;
        hash = (53 * hash) + getDrawFrameCount();
      }
      if (hasDrawFrameMax()) {
        hash = (37 * hash) + DRAW_FRAME_MAX_FIELD_NUMBER;
        hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
            getDrawFrameMax());
      }
      if (hasDrawFrameMin()) {
        hash = (37 * hash) + DRAW_FRAME_MIN_FIELD_NUMBER;
        hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
            getDrawFrameMin());
      }
      if (hasDrawFrameAvg()) {
        hash = (37 * hash) + DRAW_FRAME_AVG_FIELD_NUMBER;
        hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
            java.lang.Double.doubleToLongBits(getDrawFrameAvg()));
      }
      if (hasFlushCount()) {
        hash = (37 * hash) + FLUSH_COUNT_FIELD_NUMBER;
        hash = (53 * hash) + getFlushCount();
      }
      if (hasFlushMax()) {
        hash = (37 * hash) + FLUSH_MAX_FIELD_NUMBER;
        hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
            getFlushMax());
      }
      if (hasFlushMin()) {
        hash = (37 * hash) + FLUSH_MIN_FIELD_NUMBER;
        hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
            getFlushMin());
      }
      if (hasFlushAvg()) {
        hash = (37 * hash) + FLUSH_AVG_FIELD_NUMBER;
        hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
            java.lang.Double.doubleToLongBits(getFlushAvg()));
      }
      if (hasPrepareTreeCount()) {
        hash = (37 * hash) + PREPARE_TREE_COUNT_FIELD_NUMBER;
        hash = (53 * hash) + getPrepareTreeCount();
      }
      if (hasPrepareTreeMax()) {
        hash = (37 * hash) + PREPARE_TREE_MAX_FIELD_NUMBER;
        hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
            getPrepareTreeMax());
      }
      if (hasPrepareTreeMin()) {
        hash = (37 * hash) + PREPARE_TREE_MIN_FIELD_NUMBER;
        hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
            getPrepareTreeMin());
      }
      if (hasPrepareTreeAvg()) {
        hash = (37 * hash) + PREPARE_TREE_AVG_FIELD_NUMBER;
        hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
            java.lang.Double.doubleToLongBits(getPrepareTreeAvg()));
      }
      if (hasGpuCompletionCount()) {
        hash = (37 * hash) + GPU_COMPLETION_COUNT_FIELD_NUMBER;
        hash = (53 * hash) + getGpuCompletionCount();
      }
      if (hasGpuCompletionMax()) {
        hash = (37 * hash) + GPU_COMPLETION_MAX_FIELD_NUMBER;
        hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
            getGpuCompletionMax());
      }
      if (hasGpuCompletionMin()) {
        hash = (37 * hash) + GPU_COMPLETION_MIN_FIELD_NUMBER;
        hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
            getGpuCompletionMin());
      }
      if (hasGpuCompletionAvg()) {
        hash = (37 * hash) + GPU_COMPLETION_AVG_FIELD_NUMBER;
        hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
            java.lang.Double.doubleToLongBits(getGpuCompletionAvg()));
      }
      if (hasUiRecordCount()) {
        hash = (37 * hash) + UI_RECORD_COUNT_FIELD_NUMBER;
        hash = (53 * hash) + getUiRecordCount();
      }
      if (hasUiRecordMax()) {
        hash = (37 * hash) + UI_RECORD_MAX_FIELD_NUMBER;
        hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
            getUiRecordMax());
      }
      if (hasUiRecordMin()) {
        hash = (37 * hash) + UI_RECORD_MIN_FIELD_NUMBER;
        hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
            getUiRecordMin());
      }
      if (hasUiRecordAvg()) {
        hash = (37 * hash) + UI_RECORD_AVG_FIELD_NUMBER;
        hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
            java.lang.Double.doubleToLongBits(getUiRecordAvg()));
      }
      if (hasShaderCompileCount()) {
        hash = (37 * hash) + SHADER_COMPILE_COUNT_FIELD_NUMBER;
        hash = (53 * hash) + getShaderCompileCount();
      }
      if (hasShaderCompileTime()) {
        hash = (37 * hash) + SHADER_COMPILE_TIME_FIELD_NUMBER;
        hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
            getShaderCompileTime());
      }
      if (hasShaderCompileAvg()) {
        hash = (37 * hash) + SHADER_COMPILE_AVG_FIELD_NUMBER;
        hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
            java.lang.Double.doubleToLongBits(getShaderCompileAvg()));
      }
      if (hasCacheHitCount()) {
        hash = (37 * hash) + CACHE_HIT_COUNT_FIELD_NUMBER;
        hash = (53 * hash) + getCacheHitCount();
      }
      if (hasCacheHitTime()) {
        hash = (37 * hash) + CACHE_HIT_TIME_FIELD_NUMBER;
        hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
            getCacheHitTime());
      }
      if (hasCacheHitAvg()) {
        hash = (37 * hash) + CACHE_HIT_AVG_FIELD_NUMBER;
        hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
            java.lang.Double.doubleToLongBits(getCacheHitAvg()));
      }
      if (hasCacheMissCount()) {
        hash = (37 * hash) + CACHE_MISS_COUNT_FIELD_NUMBER;
        hash = (53 * hash) + getCacheMissCount();
      }
      if (hasCacheMissTime()) {
        hash = (37 * hash) + CACHE_MISS_TIME_FIELD_NUMBER;
        hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
            getCacheMissTime());
      }
      if (hasCacheMissAvg()) {
        hash = (37 * hash) + CACHE_MISS_AVG_FIELD_NUMBER;
        hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
            java.lang.Double.doubleToLongBits(getCacheMissAvg()));
      }
      if (hasGraphicsCpuMemMax()) {
        hash = (37 * hash) + GRAPHICS_CPU_MEM_MAX_FIELD_NUMBER;
        hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
            getGraphicsCpuMemMax());
      }
      if (hasGraphicsCpuMemMin()) {
        hash = (37 * hash) + GRAPHICS_CPU_MEM_MIN_FIELD_NUMBER;
        hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
            getGraphicsCpuMemMin());
      }
      if (hasGraphicsCpuMemAvg()) {
        hash = (37 * hash) + GRAPHICS_CPU_MEM_AVG_FIELD_NUMBER;
        hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
            java.lang.Double.doubleToLongBits(getGraphicsCpuMemAvg()));
      }
      if (hasGraphicsGpuMemMax()) {
        hash = (37 * hash) + GRAPHICS_GPU_MEM_MAX_FIELD_NUMBER;
        hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
            getGraphicsGpuMemMax());
      }
      if (hasGraphicsGpuMemMin()) {
        hash = (37 * hash) + GRAPHICS_GPU_MEM_MIN_FIELD_NUMBER;
        hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
            getGraphicsGpuMemMin());
      }
      if (hasGraphicsGpuMemAvg()) {
        hash = (37 * hash) + GRAPHICS_GPU_MEM_AVG_FIELD_NUMBER;
        hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
            java.lang.Double.doubleToLongBits(getGraphicsGpuMemAvg()));
      }
      if (hasTextureMemMax()) {
        hash = (37 * hash) + TEXTURE_MEM_MAX_FIELD_NUMBER;
        hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
            getTextureMemMax());
      }
      if (hasTextureMemMin()) {
        hash = (37 * hash) + TEXTURE_MEM_MIN_FIELD_NUMBER;
        hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
            getTextureMemMin());
      }
      if (hasTextureMemAvg()) {
        hash = (37 * hash) + TEXTURE_MEM_AVG_FIELD_NUMBER;
        hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
            java.lang.Double.doubleToLongBits(getTextureMemAvg()));
      }
      if (hasAllMemMax()) {
        hash = (37 * hash) + ALL_MEM_MAX_FIELD_NUMBER;
        hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
            getAllMemMax());
      }
      if (hasAllMemMin()) {
        hash = (37 * hash) + ALL_MEM_MIN_FIELD_NUMBER;
        hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
            getAllMemMin());
      }
      if (hasAllMemAvg()) {
        hash = (37 * hash) + ALL_MEM_AVG_FIELD_NUMBER;
        hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
            java.lang.Double.doubleToLongBits(getAllMemAvg()));
      }
      hash = (29 * hash) + getUnknownFields().hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static perfetto.protos.HwuiMetric.ProcessRenderInfo parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static perfetto.protos.HwuiMetric.ProcessRenderInfo parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static perfetto.protos.HwuiMetric.ProcessRenderInfo parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static perfetto.protos.HwuiMetric.ProcessRenderInfo parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static perfetto.protos.HwuiMetric.ProcessRenderInfo parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static perfetto.protos.HwuiMetric.ProcessRenderInfo parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static perfetto.protos.HwuiMetric.ProcessRenderInfo parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static perfetto.protos.HwuiMetric.ProcessRenderInfo parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static perfetto.protos.HwuiMetric.ProcessRenderInfo parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static perfetto.protos.HwuiMetric.ProcessRenderInfo parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static perfetto.protos.HwuiMetric.ProcessRenderInfo parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static perfetto.protos.HwuiMetric.ProcessRenderInfo parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(perfetto.protos.HwuiMetric.ProcessRenderInfo prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * <pre>
     * Android HWUI graphics performance and graphics memory usage metrics.
     * </pre>
     *
     * Protobuf type {@code perfetto.protos.ProcessRenderInfo}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:perfetto.protos.ProcessRenderInfo)
        perfetto.protos.HwuiMetric.ProcessRenderInfoOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return perfetto.protos.HwuiMetric.internal_static_perfetto_protos_ProcessRenderInfo_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return perfetto.protos.HwuiMetric.internal_static_perfetto_protos_ProcessRenderInfo_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                perfetto.protos.HwuiMetric.ProcessRenderInfo.class, perfetto.protos.HwuiMetric.ProcessRenderInfo.Builder.class);
      }

      // Construct using perfetto.protos.HwuiMetric.ProcessRenderInfo.newBuilder()
      private Builder() {

      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);

      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        bitField0_ = 0;
        bitField1_ = 0;
        processName_ = "";
        rtCpuTimeMs_ = 0L;
        drawFrameCount_ = 0;
        drawFrameMax_ = 0L;
        drawFrameMin_ = 0L;
        drawFrameAvg_ = 0D;
        flushCount_ = 0;
        flushMax_ = 0L;
        flushMin_ = 0L;
        flushAvg_ = 0D;
        prepareTreeCount_ = 0;
        prepareTreeMax_ = 0L;
        prepareTreeMin_ = 0L;
        prepareTreeAvg_ = 0D;
        gpuCompletionCount_ = 0;
        gpuCompletionMax_ = 0L;
        gpuCompletionMin_ = 0L;
        gpuCompletionAvg_ = 0D;
        uiRecordCount_ = 0;
        uiRecordMax_ = 0L;
        uiRecordMin_ = 0L;
        uiRecordAvg_ = 0D;
        shaderCompileCount_ = 0;
        shaderCompileTime_ = 0L;
        shaderCompileAvg_ = 0D;
        cacheHitCount_ = 0;
        cacheHitTime_ = 0L;
        cacheHitAvg_ = 0D;
        cacheMissCount_ = 0;
        cacheMissTime_ = 0L;
        cacheMissAvg_ = 0D;
        graphicsCpuMemMax_ = 0L;
        graphicsCpuMemMin_ = 0L;
        graphicsCpuMemAvg_ = 0D;
        graphicsGpuMemMax_ = 0L;
        graphicsGpuMemMin_ = 0L;
        graphicsGpuMemAvg_ = 0D;
        textureMemMax_ = 0L;
        textureMemMin_ = 0L;
        textureMemAvg_ = 0D;
        allMemMax_ = 0L;
        allMemMin_ = 0L;
        allMemAvg_ = 0D;
        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return perfetto.protos.HwuiMetric.internal_static_perfetto_protos_ProcessRenderInfo_descriptor;
      }

      @java.lang.Override
      public perfetto.protos.HwuiMetric.ProcessRenderInfo getDefaultInstanceForType() {
        return perfetto.protos.HwuiMetric.ProcessRenderInfo.getDefaultInstance();
      }

      @java.lang.Override
      public perfetto.protos.HwuiMetric.ProcessRenderInfo build() {
        perfetto.protos.HwuiMetric.ProcessRenderInfo result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public perfetto.protos.HwuiMetric.ProcessRenderInfo buildPartial() {
        perfetto.protos.HwuiMetric.ProcessRenderInfo result = new perfetto.protos.HwuiMetric.ProcessRenderInfo(this);
        if (bitField0_ != 0) { buildPartial0(result); }
        if (bitField1_ != 0) { buildPartial1(result); }
        onBuilt();
        return result;
      }

      private void buildPartial0(perfetto.protos.HwuiMetric.ProcessRenderInfo result) {
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) != 0)) {
          result.processName_ = processName_;
          to_bitField0_ |= 0x00000001;
        }
        if (((from_bitField0_ & 0x00000002) != 0)) {
          result.rtCpuTimeMs_ = rtCpuTimeMs_;
          to_bitField0_ |= 0x00000002;
        }
        if (((from_bitField0_ & 0x00000004) != 0)) {
          result.drawFrameCount_ = drawFrameCount_;
          to_bitField0_ |= 0x00000004;
        }
        if (((from_bitField0_ & 0x00000008) != 0)) {
          result.drawFrameMax_ = drawFrameMax_;
          to_bitField0_ |= 0x00000008;
        }
        if (((from_bitField0_ & 0x00000010) != 0)) {
          result.drawFrameMin_ = drawFrameMin_;
          to_bitField0_ |= 0x00000010;
        }
        if (((from_bitField0_ & 0x00000020) != 0)) {
          result.drawFrameAvg_ = drawFrameAvg_;
          to_bitField0_ |= 0x00000020;
        }
        if (((from_bitField0_ & 0x00000040) != 0)) {
          result.flushCount_ = flushCount_;
          to_bitField0_ |= 0x00000040;
        }
        if (((from_bitField0_ & 0x00000080) != 0)) {
          result.flushMax_ = flushMax_;
          to_bitField0_ |= 0x00000080;
        }
        if (((from_bitField0_ & 0x00000100) != 0)) {
          result.flushMin_ = flushMin_;
          to_bitField0_ |= 0x00000100;
        }
        if (((from_bitField0_ & 0x00000200) != 0)) {
          result.flushAvg_ = flushAvg_;
          to_bitField0_ |= 0x00000200;
        }
        if (((from_bitField0_ & 0x00000400) != 0)) {
          result.prepareTreeCount_ = prepareTreeCount_;
          to_bitField0_ |= 0x00000400;
        }
        if (((from_bitField0_ & 0x00000800) != 0)) {
          result.prepareTreeMax_ = prepareTreeMax_;
          to_bitField0_ |= 0x00000800;
        }
        if (((from_bitField0_ & 0x00001000) != 0)) {
          result.prepareTreeMin_ = prepareTreeMin_;
          to_bitField0_ |= 0x00001000;
        }
        if (((from_bitField0_ & 0x00002000) != 0)) {
          result.prepareTreeAvg_ = prepareTreeAvg_;
          to_bitField0_ |= 0x00002000;
        }
        if (((from_bitField0_ & 0x00004000) != 0)) {
          result.gpuCompletionCount_ = gpuCompletionCount_;
          to_bitField0_ |= 0x00004000;
        }
        if (((from_bitField0_ & 0x00008000) != 0)) {
          result.gpuCompletionMax_ = gpuCompletionMax_;
          to_bitField0_ |= 0x00008000;
        }
        if (((from_bitField0_ & 0x00010000) != 0)) {
          result.gpuCompletionMin_ = gpuCompletionMin_;
          to_bitField0_ |= 0x00010000;
        }
        if (((from_bitField0_ & 0x00020000) != 0)) {
          result.gpuCompletionAvg_ = gpuCompletionAvg_;
          to_bitField0_ |= 0x00020000;
        }
        if (((from_bitField0_ & 0x00040000) != 0)) {
          result.uiRecordCount_ = uiRecordCount_;
          to_bitField0_ |= 0x00040000;
        }
        if (((from_bitField0_ & 0x00080000) != 0)) {
          result.uiRecordMax_ = uiRecordMax_;
          to_bitField0_ |= 0x00080000;
        }
        if (((from_bitField0_ & 0x00100000) != 0)) {
          result.uiRecordMin_ = uiRecordMin_;
          to_bitField0_ |= 0x00100000;
        }
        if (((from_bitField0_ & 0x00200000) != 0)) {
          result.uiRecordAvg_ = uiRecordAvg_;
          to_bitField0_ |= 0x00200000;
        }
        if (((from_bitField0_ & 0x00400000) != 0)) {
          result.shaderCompileCount_ = shaderCompileCount_;
          to_bitField0_ |= 0x00400000;
        }
        if (((from_bitField0_ & 0x00800000) != 0)) {
          result.shaderCompileTime_ = shaderCompileTime_;
          to_bitField0_ |= 0x00800000;
        }
        if (((from_bitField0_ & 0x01000000) != 0)) {
          result.shaderCompileAvg_ = shaderCompileAvg_;
          to_bitField0_ |= 0x01000000;
        }
        if (((from_bitField0_ & 0x02000000) != 0)) {
          result.cacheHitCount_ = cacheHitCount_;
          to_bitField0_ |= 0x02000000;
        }
        if (((from_bitField0_ & 0x04000000) != 0)) {
          result.cacheHitTime_ = cacheHitTime_;
          to_bitField0_ |= 0x04000000;
        }
        if (((from_bitField0_ & 0x08000000) != 0)) {
          result.cacheHitAvg_ = cacheHitAvg_;
          to_bitField0_ |= 0x08000000;
        }
        if (((from_bitField0_ & 0x10000000) != 0)) {
          result.cacheMissCount_ = cacheMissCount_;
          to_bitField0_ |= 0x10000000;
        }
        if (((from_bitField0_ & 0x20000000) != 0)) {
          result.cacheMissTime_ = cacheMissTime_;
          to_bitField0_ |= 0x20000000;
        }
        if (((from_bitField0_ & 0x40000000) != 0)) {
          result.cacheMissAvg_ = cacheMissAvg_;
          to_bitField0_ |= 0x40000000;
        }
        if (((from_bitField0_ & 0x80000000) != 0)) {
          result.graphicsCpuMemMax_ = graphicsCpuMemMax_;
          to_bitField0_ |= 0x80000000;
        }
        result.bitField0_ |= to_bitField0_;
      }

      private void buildPartial1(perfetto.protos.HwuiMetric.ProcessRenderInfo result) {
        int from_bitField1_ = bitField1_;
        int to_bitField1_ = 0;
        if (((from_bitField1_ & 0x00000001) != 0)) {
          result.graphicsCpuMemMin_ = graphicsCpuMemMin_;
          to_bitField1_ |= 0x00000001;
        }
        if (((from_bitField1_ & 0x00000002) != 0)) {
          result.graphicsCpuMemAvg_ = graphicsCpuMemAvg_;
          to_bitField1_ |= 0x00000002;
        }
        if (((from_bitField1_ & 0x00000004) != 0)) {
          result.graphicsGpuMemMax_ = graphicsGpuMemMax_;
          to_bitField1_ |= 0x00000004;
        }
        if (((from_bitField1_ & 0x00000008) != 0)) {
          result.graphicsGpuMemMin_ = graphicsGpuMemMin_;
          to_bitField1_ |= 0x00000008;
        }
        if (((from_bitField1_ & 0x00000010) != 0)) {
          result.graphicsGpuMemAvg_ = graphicsGpuMemAvg_;
          to_bitField1_ |= 0x00000010;
        }
        if (((from_bitField1_ & 0x00000020) != 0)) {
          result.textureMemMax_ = textureMemMax_;
          to_bitField1_ |= 0x00000020;
        }
        if (((from_bitField1_ & 0x00000040) != 0)) {
          result.textureMemMin_ = textureMemMin_;
          to_bitField1_ |= 0x00000040;
        }
        if (((from_bitField1_ & 0x00000080) != 0)) {
          result.textureMemAvg_ = textureMemAvg_;
          to_bitField1_ |= 0x00000080;
        }
        if (((from_bitField1_ & 0x00000100) != 0)) {
          result.allMemMax_ = allMemMax_;
          to_bitField1_ |= 0x00000100;
        }
        if (((from_bitField1_ & 0x00000200) != 0)) {
          result.allMemMin_ = allMemMin_;
          to_bitField1_ |= 0x00000200;
        }
        if (((from_bitField1_ & 0x00000400) != 0)) {
          result.allMemAvg_ = allMemAvg_;
          to_bitField1_ |= 0x00000400;
        }
        result.bitField1_ |= to_bitField1_;
      }

      @java.lang.Override
      public Builder clone() {
        return super.clone();
      }
      @java.lang.Override
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.setField(field, value);
      }
      @java.lang.Override
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return super.clearField(field);
      }
      @java.lang.Override
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return super.clearOneof(oneof);
      }
      @java.lang.Override
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, java.lang.Object value) {
        return super.setRepeatedField(field, index, value);
      }
      @java.lang.Override
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.addRepeatedField(field, value);
      }
      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof perfetto.protos.HwuiMetric.ProcessRenderInfo) {
          return mergeFrom((perfetto.protos.HwuiMetric.ProcessRenderInfo)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(perfetto.protos.HwuiMetric.ProcessRenderInfo other) {
        if (other == perfetto.protos.HwuiMetric.ProcessRenderInfo.getDefaultInstance()) return this;
        if (other.hasProcessName()) {
          processName_ = other.processName_;
          bitField0_ |= 0x00000001;
          onChanged();
        }
        if (other.hasRtCpuTimeMs()) {
          setRtCpuTimeMs(other.getRtCpuTimeMs());
        }
        if (other.hasDrawFrameCount()) {
          setDrawFrameCount(other.getDrawFrameCount());
        }
        if (other.hasDrawFrameMax()) {
          setDrawFrameMax(other.getDrawFrameMax());
        }
        if (other.hasDrawFrameMin()) {
          setDrawFrameMin(other.getDrawFrameMin());
        }
        if (other.hasDrawFrameAvg()) {
          setDrawFrameAvg(other.getDrawFrameAvg());
        }
        if (other.hasFlushCount()) {
          setFlushCount(other.getFlushCount());
        }
        if (other.hasFlushMax()) {
          setFlushMax(other.getFlushMax());
        }
        if (other.hasFlushMin()) {
          setFlushMin(other.getFlushMin());
        }
        if (other.hasFlushAvg()) {
          setFlushAvg(other.getFlushAvg());
        }
        if (other.hasPrepareTreeCount()) {
          setPrepareTreeCount(other.getPrepareTreeCount());
        }
        if (other.hasPrepareTreeMax()) {
          setPrepareTreeMax(other.getPrepareTreeMax());
        }
        if (other.hasPrepareTreeMin()) {
          setPrepareTreeMin(other.getPrepareTreeMin());
        }
        if (other.hasPrepareTreeAvg()) {
          setPrepareTreeAvg(other.getPrepareTreeAvg());
        }
        if (other.hasGpuCompletionCount()) {
          setGpuCompletionCount(other.getGpuCompletionCount());
        }
        if (other.hasGpuCompletionMax()) {
          setGpuCompletionMax(other.getGpuCompletionMax());
        }
        if (other.hasGpuCompletionMin()) {
          setGpuCompletionMin(other.getGpuCompletionMin());
        }
        if (other.hasGpuCompletionAvg()) {
          setGpuCompletionAvg(other.getGpuCompletionAvg());
        }
        if (other.hasUiRecordCount()) {
          setUiRecordCount(other.getUiRecordCount());
        }
        if (other.hasUiRecordMax()) {
          setUiRecordMax(other.getUiRecordMax());
        }
        if (other.hasUiRecordMin()) {
          setUiRecordMin(other.getUiRecordMin());
        }
        if (other.hasUiRecordAvg()) {
          setUiRecordAvg(other.getUiRecordAvg());
        }
        if (other.hasShaderCompileCount()) {
          setShaderCompileCount(other.getShaderCompileCount());
        }
        if (other.hasShaderCompileTime()) {
          setShaderCompileTime(other.getShaderCompileTime());
        }
        if (other.hasShaderCompileAvg()) {
          setShaderCompileAvg(other.getShaderCompileAvg());
        }
        if (other.hasCacheHitCount()) {
          setCacheHitCount(other.getCacheHitCount());
        }
        if (other.hasCacheHitTime()) {
          setCacheHitTime(other.getCacheHitTime());
        }
        if (other.hasCacheHitAvg()) {
          setCacheHitAvg(other.getCacheHitAvg());
        }
        if (other.hasCacheMissCount()) {
          setCacheMissCount(other.getCacheMissCount());
        }
        if (other.hasCacheMissTime()) {
          setCacheMissTime(other.getCacheMissTime());
        }
        if (other.hasCacheMissAvg()) {
          setCacheMissAvg(other.getCacheMissAvg());
        }
        if (other.hasGraphicsCpuMemMax()) {
          setGraphicsCpuMemMax(other.getGraphicsCpuMemMax());
        }
        if (other.hasGraphicsCpuMemMin()) {
          setGraphicsCpuMemMin(other.getGraphicsCpuMemMin());
        }
        if (other.hasGraphicsCpuMemAvg()) {
          setGraphicsCpuMemAvg(other.getGraphicsCpuMemAvg());
        }
        if (other.hasGraphicsGpuMemMax()) {
          setGraphicsGpuMemMax(other.getGraphicsGpuMemMax());
        }
        if (other.hasGraphicsGpuMemMin()) {
          setGraphicsGpuMemMin(other.getGraphicsGpuMemMin());
        }
        if (other.hasGraphicsGpuMemAvg()) {
          setGraphicsGpuMemAvg(other.getGraphicsGpuMemAvg());
        }
        if (other.hasTextureMemMax()) {
          setTextureMemMax(other.getTextureMemMax());
        }
        if (other.hasTextureMemMin()) {
          setTextureMemMin(other.getTextureMemMin());
        }
        if (other.hasTextureMemAvg()) {
          setTextureMemAvg(other.getTextureMemAvg());
        }
        if (other.hasAllMemMax()) {
          setAllMemMax(other.getAllMemMax());
        }
        if (other.hasAllMemMin()) {
          setAllMemMin(other.getAllMemMin());
        }
        if (other.hasAllMemAvg()) {
          setAllMemAvg(other.getAllMemAvg());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        if (extensionRegistry == null) {
          throw new java.lang.NullPointerException();
        }
        try {
          boolean done = false;
          while (!done) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                done = true;
                break;
              case 10: {
                processName_ = input.readBytes();
                bitField0_ |= 0x00000001;
                break;
              } // case 10
              case 16: {
                rtCpuTimeMs_ = input.readInt64();
                bitField0_ |= 0x00000002;
                break;
              } // case 16
              case 24: {
                drawFrameCount_ = input.readUInt32();
                bitField0_ |= 0x00000004;
                break;
              } // case 24
              case 32: {
                drawFrameMax_ = input.readInt64();
                bitField0_ |= 0x00000008;
                break;
              } // case 32
              case 40: {
                drawFrameMin_ = input.readInt64();
                bitField0_ |= 0x00000010;
                break;
              } // case 40
              case 49: {
                drawFrameAvg_ = input.readDouble();
                bitField0_ |= 0x00000020;
                break;
              } // case 49
              case 56: {
                flushCount_ = input.readUInt32();
                bitField0_ |= 0x00000040;
                break;
              } // case 56
              case 64: {
                flushMax_ = input.readInt64();
                bitField0_ |= 0x00000080;
                break;
              } // case 64
              case 72: {
                flushMin_ = input.readInt64();
                bitField0_ |= 0x00000100;
                break;
              } // case 72
              case 81: {
                flushAvg_ = input.readDouble();
                bitField0_ |= 0x00000200;
                break;
              } // case 81
              case 88: {
                prepareTreeCount_ = input.readUInt32();
                bitField0_ |= 0x00000400;
                break;
              } // case 88
              case 96: {
                prepareTreeMax_ = input.readInt64();
                bitField0_ |= 0x00000800;
                break;
              } // case 96
              case 104: {
                prepareTreeMin_ = input.readInt64();
                bitField0_ |= 0x00001000;
                break;
              } // case 104
              case 113: {
                prepareTreeAvg_ = input.readDouble();
                bitField0_ |= 0x00002000;
                break;
              } // case 113
              case 120: {
                gpuCompletionCount_ = input.readUInt32();
                bitField0_ |= 0x00004000;
                break;
              } // case 120
              case 128: {
                gpuCompletionMax_ = input.readInt64();
                bitField0_ |= 0x00008000;
                break;
              } // case 128
              case 136: {
                gpuCompletionMin_ = input.readInt64();
                bitField0_ |= 0x00010000;
                break;
              } // case 136
              case 145: {
                gpuCompletionAvg_ = input.readDouble();
                bitField0_ |= 0x00020000;
                break;
              } // case 145
              case 152: {
                uiRecordCount_ = input.readUInt32();
                bitField0_ |= 0x00040000;
                break;
              } // case 152
              case 160: {
                uiRecordMax_ = input.readInt64();
                bitField0_ |= 0x00080000;
                break;
              } // case 160
              case 168: {
                uiRecordMin_ = input.readInt64();
                bitField0_ |= 0x00100000;
                break;
              } // case 168
              case 177: {
                uiRecordAvg_ = input.readDouble();
                bitField0_ |= 0x00200000;
                break;
              } // case 177
              case 184: {
                shaderCompileCount_ = input.readUInt32();
                bitField0_ |= 0x00400000;
                break;
              } // case 184
              case 192: {
                shaderCompileTime_ = input.readInt64();
                bitField0_ |= 0x00800000;
                break;
              } // case 192
              case 201: {
                shaderCompileAvg_ = input.readDouble();
                bitField0_ |= 0x01000000;
                break;
              } // case 201
              case 208: {
                cacheHitCount_ = input.readUInt32();
                bitField0_ |= 0x02000000;
                break;
              } // case 208
              case 216: {
                cacheHitTime_ = input.readInt64();
                bitField0_ |= 0x04000000;
                break;
              } // case 216
              case 225: {
                cacheHitAvg_ = input.readDouble();
                bitField0_ |= 0x08000000;
                break;
              } // case 225
              case 232: {
                cacheMissCount_ = input.readUInt32();
                bitField0_ |= 0x10000000;
                break;
              } // case 232
              case 240: {
                cacheMissTime_ = input.readInt64();
                bitField0_ |= 0x20000000;
                break;
              } // case 240
              case 249: {
                cacheMissAvg_ = input.readDouble();
                bitField0_ |= 0x40000000;
                break;
              } // case 249
              case 256: {
                graphicsCpuMemMax_ = input.readInt64();
                bitField0_ |= 0x80000000;
                break;
              } // case 256
              case 264: {
                graphicsCpuMemMin_ = input.readInt64();
                bitField1_ |= 0x00000001;
                break;
              } // case 264
              case 273: {
                graphicsCpuMemAvg_ = input.readDouble();
                bitField1_ |= 0x00000002;
                break;
              } // case 273
              case 280: {
                graphicsGpuMemMax_ = input.readInt64();
                bitField1_ |= 0x00000004;
                break;
              } // case 280
              case 288: {
                graphicsGpuMemMin_ = input.readInt64();
                bitField1_ |= 0x00000008;
                break;
              } // case 288
              case 297: {
                graphicsGpuMemAvg_ = input.readDouble();
                bitField1_ |= 0x00000010;
                break;
              } // case 297
              case 304: {
                textureMemMax_ = input.readInt64();
                bitField1_ |= 0x00000020;
                break;
              } // case 304
              case 312: {
                textureMemMin_ = input.readInt64();
                bitField1_ |= 0x00000040;
                break;
              } // case 312
              case 321: {
                textureMemAvg_ = input.readDouble();
                bitField1_ |= 0x00000080;
                break;
              } // case 321
              case 328: {
                allMemMax_ = input.readInt64();
                bitField1_ |= 0x00000100;
                break;
              } // case 328
              case 336: {
                allMemMin_ = input.readInt64();
                bitField1_ |= 0x00000200;
                break;
              } // case 336
              case 345: {
                allMemAvg_ = input.readDouble();
                bitField1_ |= 0x00000400;
                break;
              } // case 345
              default: {
                if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                  done = true; // was an endgroup tag
                }
                break;
              } // default:
            } // switch (tag)
          } // while (!done)
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.unwrapIOException();
        } finally {
          onChanged();
        } // finally
        return this;
      }
      private int bitField0_;
      private int bitField1_;

      private java.lang.Object processName_ = "";
      /**
       * <pre>
       * Name of the package launched
       * </pre>
       *
       * <code>optional string process_name = 1;</code>
       * @return Whether the processName field is set.
       */
      public boolean hasProcessName() {
        return ((bitField0_ & 0x00000001) != 0);
      }
      /**
       * <pre>
       * Name of the package launched
       * </pre>
       *
       * <code>optional string process_name = 1;</code>
       * @return The processName.
       */
      public java.lang.String getProcessName() {
        java.lang.Object ref = processName_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          if (bs.isValidUtf8()) {
            processName_ = s;
          }
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <pre>
       * Name of the package launched
       * </pre>
       *
       * <code>optional string process_name = 1;</code>
       * @return The bytes for processName.
       */
      public com.google.protobuf.ByteString
          getProcessNameBytes() {
        java.lang.Object ref = processName_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          processName_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <pre>
       * Name of the package launched
       * </pre>
       *
       * <code>optional string process_name = 1;</code>
       * @param value The processName to set.
       * @return This builder for chaining.
       */
      public Builder setProcessName(
          java.lang.String value) {
        if (value == null) { throw new NullPointerException(); }
        processName_ = value;
        bitField0_ |= 0x00000001;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Name of the package launched
       * </pre>
       *
       * <code>optional string process_name = 1;</code>
       * @return This builder for chaining.
       */
      public Builder clearProcessName() {
        processName_ = getDefaultInstance().getProcessName();
        bitField0_ = (bitField0_ & ~0x00000001);
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Name of the package launched
       * </pre>
       *
       * <code>optional string process_name = 1;</code>
       * @param value The bytes for processName to set.
       * @return This builder for chaining.
       */
      public Builder setProcessNameBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) { throw new NullPointerException(); }
        processName_ = value;
        bitField0_ |= 0x00000001;
        onChanged();
        return this;
      }

      private long rtCpuTimeMs_ ;
      /**
       * <pre>
       * CPU time spent on RenderThread in milliseconds.
       * </pre>
       *
       * <code>optional int64 rt_cpu_time_ms = 2;</code>
       * @return Whether the rtCpuTimeMs field is set.
       */
      @java.lang.Override
      public boolean hasRtCpuTimeMs() {
        return ((bitField0_ & 0x00000002) != 0);
      }
      /**
       * <pre>
       * CPU time spent on RenderThread in milliseconds.
       * </pre>
       *
       * <code>optional int64 rt_cpu_time_ms = 2;</code>
       * @return The rtCpuTimeMs.
       */
      @java.lang.Override
      public long getRtCpuTimeMs() {
        return rtCpuTimeMs_;
      }
      /**
       * <pre>
       * CPU time spent on RenderThread in milliseconds.
       * </pre>
       *
       * <code>optional int64 rt_cpu_time_ms = 2;</code>
       * @param value The rtCpuTimeMs to set.
       * @return This builder for chaining.
       */
      public Builder setRtCpuTimeMs(long value) {
        
        rtCpuTimeMs_ = value;
        bitField0_ |= 0x00000002;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * CPU time spent on RenderThread in milliseconds.
       * </pre>
       *
       * <code>optional int64 rt_cpu_time_ms = 2;</code>
       * @return This builder for chaining.
       */
      public Builder clearRtCpuTimeMs() {
        bitField0_ = (bitField0_ & ~0x00000002);
        rtCpuTimeMs_ = 0L;
        onChanged();
        return this;
      }

      private int drawFrameCount_ ;
      /**
       * <pre>
       * Number of frames drawn on RenderThread, followed by max/min/avg CPU time to draw a frame
       * in nanoseconds.
       * </pre>
       *
       * <code>optional uint32 draw_frame_count = 3;</code>
       * @return Whether the drawFrameCount field is set.
       */
      @java.lang.Override
      public boolean hasDrawFrameCount() {
        return ((bitField0_ & 0x00000004) != 0);
      }
      /**
       * <pre>
       * Number of frames drawn on RenderThread, followed by max/min/avg CPU time to draw a frame
       * in nanoseconds.
       * </pre>
       *
       * <code>optional uint32 draw_frame_count = 3;</code>
       * @return The drawFrameCount.
       */
      @java.lang.Override
      public int getDrawFrameCount() {
        return drawFrameCount_;
      }
      /**
       * <pre>
       * Number of frames drawn on RenderThread, followed by max/min/avg CPU time to draw a frame
       * in nanoseconds.
       * </pre>
       *
       * <code>optional uint32 draw_frame_count = 3;</code>
       * @param value The drawFrameCount to set.
       * @return This builder for chaining.
       */
      public Builder setDrawFrameCount(int value) {
        
        drawFrameCount_ = value;
        bitField0_ |= 0x00000004;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Number of frames drawn on RenderThread, followed by max/min/avg CPU time to draw a frame
       * in nanoseconds.
       * </pre>
       *
       * <code>optional uint32 draw_frame_count = 3;</code>
       * @return This builder for chaining.
       */
      public Builder clearDrawFrameCount() {
        bitField0_ = (bitField0_ & ~0x00000004);
        drawFrameCount_ = 0;
        onChanged();
        return this;
      }

      private long drawFrameMax_ ;
      /**
       * <code>optional int64 draw_frame_max = 4;</code>
       * @return Whether the drawFrameMax field is set.
       */
      @java.lang.Override
      public boolean hasDrawFrameMax() {
        return ((bitField0_ & 0x00000008) != 0);
      }
      /**
       * <code>optional int64 draw_frame_max = 4;</code>
       * @return The drawFrameMax.
       */
      @java.lang.Override
      public long getDrawFrameMax() {
        return drawFrameMax_;
      }
      /**
       * <code>optional int64 draw_frame_max = 4;</code>
       * @param value The drawFrameMax to set.
       * @return This builder for chaining.
       */
      public Builder setDrawFrameMax(long value) {
        
        drawFrameMax_ = value;
        bitField0_ |= 0x00000008;
        onChanged();
        return this;
      }
      /**
       * <code>optional int64 draw_frame_max = 4;</code>
       * @return This builder for chaining.
       */
      public Builder clearDrawFrameMax() {
        bitField0_ = (bitField0_ & ~0x00000008);
        drawFrameMax_ = 0L;
        onChanged();
        return this;
      }

      private long drawFrameMin_ ;
      /**
       * <code>optional int64 draw_frame_min = 5;</code>
       * @return Whether the drawFrameMin field is set.
       */
      @java.lang.Override
      public boolean hasDrawFrameMin() {
        return ((bitField0_ & 0x00000010) != 0);
      }
      /**
       * <code>optional int64 draw_frame_min = 5;</code>
       * @return The drawFrameMin.
       */
      @java.lang.Override
      public long getDrawFrameMin() {
        return drawFrameMin_;
      }
      /**
       * <code>optional int64 draw_frame_min = 5;</code>
       * @param value The drawFrameMin to set.
       * @return This builder for chaining.
       */
      public Builder setDrawFrameMin(long value) {
        
        drawFrameMin_ = value;
        bitField0_ |= 0x00000010;
        onChanged();
        return this;
      }
      /**
       * <code>optional int64 draw_frame_min = 5;</code>
       * @return This builder for chaining.
       */
      public Builder clearDrawFrameMin() {
        bitField0_ = (bitField0_ & ~0x00000010);
        drawFrameMin_ = 0L;
        onChanged();
        return this;
      }

      private double drawFrameAvg_ ;
      /**
       * <code>optional double draw_frame_avg = 6;</code>
       * @return Whether the drawFrameAvg field is set.
       */
      @java.lang.Override
      public boolean hasDrawFrameAvg() {
        return ((bitField0_ & 0x00000020) != 0);
      }
      /**
       * <code>optional double draw_frame_avg = 6;</code>
       * @return The drawFrameAvg.
       */
      @java.lang.Override
      public double getDrawFrameAvg() {
        return drawFrameAvg_;
      }
      /**
       * <code>optional double draw_frame_avg = 6;</code>
       * @param value The drawFrameAvg to set.
       * @return This builder for chaining.
       */
      public Builder setDrawFrameAvg(double value) {
        
        drawFrameAvg_ = value;
        bitField0_ |= 0x00000020;
        onChanged();
        return this;
      }
      /**
       * <code>optional double draw_frame_avg = 6;</code>
       * @return This builder for chaining.
       */
      public Builder clearDrawFrameAvg() {
        bitField0_ = (bitField0_ & ~0x00000020);
        drawFrameAvg_ = 0D;
        onChanged();
        return this;
      }

      private int flushCount_ ;
      /**
       * <pre>
       * Number of GPU commands flushes and max/min/avg time per flush in nanoseconds.
       * </pre>
       *
       * <code>optional uint32 flush_count = 7;</code>
       * @return Whether the flushCount field is set.
       */
      @java.lang.Override
      public boolean hasFlushCount() {
        return ((bitField0_ & 0x00000040) != 0);
      }
      /**
       * <pre>
       * Number of GPU commands flushes and max/min/avg time per flush in nanoseconds.
       * </pre>
       *
       * <code>optional uint32 flush_count = 7;</code>
       * @return The flushCount.
       */
      @java.lang.Override
      public int getFlushCount() {
        return flushCount_;
      }
      /**
       * <pre>
       * Number of GPU commands flushes and max/min/avg time per flush in nanoseconds.
       * </pre>
       *
       * <code>optional uint32 flush_count = 7;</code>
       * @param value The flushCount to set.
       * @return This builder for chaining.
       */
      public Builder setFlushCount(int value) {
        
        flushCount_ = value;
        bitField0_ |= 0x00000040;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Number of GPU commands flushes and max/min/avg time per flush in nanoseconds.
       * </pre>
       *
       * <code>optional uint32 flush_count = 7;</code>
       * @return This builder for chaining.
       */
      public Builder clearFlushCount() {
        bitField0_ = (bitField0_ & ~0x00000040);
        flushCount_ = 0;
        onChanged();
        return this;
      }

      private long flushMax_ ;
      /**
       * <code>optional int64 flush_max = 8;</code>
       * @return Whether the flushMax field is set.
       */
      @java.lang.Override
      public boolean hasFlushMax() {
        return ((bitField0_ & 0x00000080) != 0);
      }
      /**
       * <code>optional int64 flush_max = 8;</code>
       * @return The flushMax.
       */
      @java.lang.Override
      public long getFlushMax() {
        return flushMax_;
      }
      /**
       * <code>optional int64 flush_max = 8;</code>
       * @param value The flushMax to set.
       * @return This builder for chaining.
       */
      public Builder setFlushMax(long value) {
        
        flushMax_ = value;
        bitField0_ |= 0x00000080;
        onChanged();
        return this;
      }
      /**
       * <code>optional int64 flush_max = 8;</code>
       * @return This builder for chaining.
       */
      public Builder clearFlushMax() {
        bitField0_ = (bitField0_ & ~0x00000080);
        flushMax_ = 0L;
        onChanged();
        return this;
      }

      private long flushMin_ ;
      /**
       * <code>optional int64 flush_min = 9;</code>
       * @return Whether the flushMin field is set.
       */
      @java.lang.Override
      public boolean hasFlushMin() {
        return ((bitField0_ & 0x00000100) != 0);
      }
      /**
       * <code>optional int64 flush_min = 9;</code>
       * @return The flushMin.
       */
      @java.lang.Override
      public long getFlushMin() {
        return flushMin_;
      }
      /**
       * <code>optional int64 flush_min = 9;</code>
       * @param value The flushMin to set.
       * @return This builder for chaining.
       */
      public Builder setFlushMin(long value) {
        
        flushMin_ = value;
        bitField0_ |= 0x00000100;
        onChanged();
        return this;
      }
      /**
       * <code>optional int64 flush_min = 9;</code>
       * @return This builder for chaining.
       */
      public Builder clearFlushMin() {
        bitField0_ = (bitField0_ & ~0x00000100);
        flushMin_ = 0L;
        onChanged();
        return this;
      }

      private double flushAvg_ ;
      /**
       * <code>optional double flush_avg = 10;</code>
       * @return Whether the flushAvg field is set.
       */
      @java.lang.Override
      public boolean hasFlushAvg() {
        return ((bitField0_ & 0x00000200) != 0);
      }
      /**
       * <code>optional double flush_avg = 10;</code>
       * @return The flushAvg.
       */
      @java.lang.Override
      public double getFlushAvg() {
        return flushAvg_;
      }
      /**
       * <code>optional double flush_avg = 10;</code>
       * @param value The flushAvg to set.
       * @return This builder for chaining.
       */
      public Builder setFlushAvg(double value) {
        
        flushAvg_ = value;
        bitField0_ |= 0x00000200;
        onChanged();
        return this;
      }
      /**
       * <code>optional double flush_avg = 10;</code>
       * @return This builder for chaining.
       */
      public Builder clearFlushAvg() {
        bitField0_ = (bitField0_ & ~0x00000200);
        flushAvg_ = 0D;
        onChanged();
        return this;
      }

      private int prepareTreeCount_ ;
      /**
       * <pre>
       * Number of View tree preparation counts and max/min/avg time to traverse the tree in
       * nanoseconds.
       * </pre>
       *
       * <code>optional uint32 prepare_tree_count = 11;</code>
       * @return Whether the prepareTreeCount field is set.
       */
      @java.lang.Override
      public boolean hasPrepareTreeCount() {
        return ((bitField0_ & 0x00000400) != 0);
      }
      /**
       * <pre>
       * Number of View tree preparation counts and max/min/avg time to traverse the tree in
       * nanoseconds.
       * </pre>
       *
       * <code>optional uint32 prepare_tree_count = 11;</code>
       * @return The prepareTreeCount.
       */
      @java.lang.Override
      public int getPrepareTreeCount() {
        return prepareTreeCount_;
      }
      /**
       * <pre>
       * Number of View tree preparation counts and max/min/avg time to traverse the tree in
       * nanoseconds.
       * </pre>
       *
       * <code>optional uint32 prepare_tree_count = 11;</code>
       * @param value The prepareTreeCount to set.
       * @return This builder for chaining.
       */
      public Builder setPrepareTreeCount(int value) {
        
        prepareTreeCount_ = value;
        bitField0_ |= 0x00000400;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Number of View tree preparation counts and max/min/avg time to traverse the tree in
       * nanoseconds.
       * </pre>
       *
       * <code>optional uint32 prepare_tree_count = 11;</code>
       * @return This builder for chaining.
       */
      public Builder clearPrepareTreeCount() {
        bitField0_ = (bitField0_ & ~0x00000400);
        prepareTreeCount_ = 0;
        onChanged();
        return this;
      }

      private long prepareTreeMax_ ;
      /**
       * <code>optional int64 prepare_tree_max = 12;</code>
       * @return Whether the prepareTreeMax field is set.
       */
      @java.lang.Override
      public boolean hasPrepareTreeMax() {
        return ((bitField0_ & 0x00000800) != 0);
      }
      /**
       * <code>optional int64 prepare_tree_max = 12;</code>
       * @return The prepareTreeMax.
       */
      @java.lang.Override
      public long getPrepareTreeMax() {
        return prepareTreeMax_;
      }
      /**
       * <code>optional int64 prepare_tree_max = 12;</code>
       * @param value The prepareTreeMax to set.
       * @return This builder for chaining.
       */
      public Builder setPrepareTreeMax(long value) {
        
        prepareTreeMax_ = value;
        bitField0_ |= 0x00000800;
        onChanged();
        return this;
      }
      /**
       * <code>optional int64 prepare_tree_max = 12;</code>
       * @return This builder for chaining.
       */
      public Builder clearPrepareTreeMax() {
        bitField0_ = (bitField0_ & ~0x00000800);
        prepareTreeMax_ = 0L;
        onChanged();
        return this;
      }

      private long prepareTreeMin_ ;
      /**
       * <code>optional int64 prepare_tree_min = 13;</code>
       * @return Whether the prepareTreeMin field is set.
       */
      @java.lang.Override
      public boolean hasPrepareTreeMin() {
        return ((bitField0_ & 0x00001000) != 0);
      }
      /**
       * <code>optional int64 prepare_tree_min = 13;</code>
       * @return The prepareTreeMin.
       */
      @java.lang.Override
      public long getPrepareTreeMin() {
        return prepareTreeMin_;
      }
      /**
       * <code>optional int64 prepare_tree_min = 13;</code>
       * @param value The prepareTreeMin to set.
       * @return This builder for chaining.
       */
      public Builder setPrepareTreeMin(long value) {
        
        prepareTreeMin_ = value;
        bitField0_ |= 0x00001000;
        onChanged();
        return this;
      }
      /**
       * <code>optional int64 prepare_tree_min = 13;</code>
       * @return This builder for chaining.
       */
      public Builder clearPrepareTreeMin() {
        bitField0_ = (bitField0_ & ~0x00001000);
        prepareTreeMin_ = 0L;
        onChanged();
        return this;
      }

      private double prepareTreeAvg_ ;
      /**
       * <code>optional double prepare_tree_avg = 14;</code>
       * @return Whether the prepareTreeAvg field is set.
       */
      @java.lang.Override
      public boolean hasPrepareTreeAvg() {
        return ((bitField0_ & 0x00002000) != 0);
      }
      /**
       * <code>optional double prepare_tree_avg = 14;</code>
       * @return The prepareTreeAvg.
       */
      @java.lang.Override
      public double getPrepareTreeAvg() {
        return prepareTreeAvg_;
      }
      /**
       * <code>optional double prepare_tree_avg = 14;</code>
       * @param value The prepareTreeAvg to set.
       * @return This builder for chaining.
       */
      public Builder setPrepareTreeAvg(double value) {
        
        prepareTreeAvg_ = value;
        bitField0_ |= 0x00002000;
        onChanged();
        return this;
      }
      /**
       * <code>optional double prepare_tree_avg = 14;</code>
       * @return This builder for chaining.
       */
      public Builder clearPrepareTreeAvg() {
        bitField0_ = (bitField0_ & ~0x00002000);
        prepareTreeAvg_ = 0D;
        onChanged();
        return this;
      }

      private int gpuCompletionCount_ ;
      /**
       * <pre>
       * Number of times the GPU rendered a frame and max/min/avg time for GPU to finish rendering in
       * in nanoseconds.
       * </pre>
       *
       * <code>optional uint32 gpu_completion_count = 15;</code>
       * @return Whether the gpuCompletionCount field is set.
       */
      @java.lang.Override
      public boolean hasGpuCompletionCount() {
        return ((bitField0_ & 0x00004000) != 0);
      }
      /**
       * <pre>
       * Number of times the GPU rendered a frame and max/min/avg time for GPU to finish rendering in
       * in nanoseconds.
       * </pre>
       *
       * <code>optional uint32 gpu_completion_count = 15;</code>
       * @return The gpuCompletionCount.
       */
      @java.lang.Override
      public int getGpuCompletionCount() {
        return gpuCompletionCount_;
      }
      /**
       * <pre>
       * Number of times the GPU rendered a frame and max/min/avg time for GPU to finish rendering in
       * in nanoseconds.
       * </pre>
       *
       * <code>optional uint32 gpu_completion_count = 15;</code>
       * @param value The gpuCompletionCount to set.
       * @return This builder for chaining.
       */
      public Builder setGpuCompletionCount(int value) {
        
        gpuCompletionCount_ = value;
        bitField0_ |= 0x00004000;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Number of times the GPU rendered a frame and max/min/avg time for GPU to finish rendering in
       * in nanoseconds.
       * </pre>
       *
       * <code>optional uint32 gpu_completion_count = 15;</code>
       * @return This builder for chaining.
       */
      public Builder clearGpuCompletionCount() {
        bitField0_ = (bitField0_ & ~0x00004000);
        gpuCompletionCount_ = 0;
        onChanged();
        return this;
      }

      private long gpuCompletionMax_ ;
      /**
       * <code>optional int64 gpu_completion_max = 16;</code>
       * @return Whether the gpuCompletionMax field is set.
       */
      @java.lang.Override
      public boolean hasGpuCompletionMax() {
        return ((bitField0_ & 0x00008000) != 0);
      }
      /**
       * <code>optional int64 gpu_completion_max = 16;</code>
       * @return The gpuCompletionMax.
       */
      @java.lang.Override
      public long getGpuCompletionMax() {
        return gpuCompletionMax_;
      }
      /**
       * <code>optional int64 gpu_completion_max = 16;</code>
       * @param value The gpuCompletionMax to set.
       * @return This builder for chaining.
       */
      public Builder setGpuCompletionMax(long value) {
        
        gpuCompletionMax_ = value;
        bitField0_ |= 0x00008000;
        onChanged();
        return this;
      }
      /**
       * <code>optional int64 gpu_completion_max = 16;</code>
       * @return This builder for chaining.
       */
      public Builder clearGpuCompletionMax() {
        bitField0_ = (bitField0_ & ~0x00008000);
        gpuCompletionMax_ = 0L;
        onChanged();
        return this;
      }

      private long gpuCompletionMin_ ;
      /**
       * <code>optional int64 gpu_completion_min = 17;</code>
       * @return Whether the gpuCompletionMin field is set.
       */
      @java.lang.Override
      public boolean hasGpuCompletionMin() {
        return ((bitField0_ & 0x00010000) != 0);
      }
      /**
       * <code>optional int64 gpu_completion_min = 17;</code>
       * @return The gpuCompletionMin.
       */
      @java.lang.Override
      public long getGpuCompletionMin() {
        return gpuCompletionMin_;
      }
      /**
       * <code>optional int64 gpu_completion_min = 17;</code>
       * @param value The gpuCompletionMin to set.
       * @return This builder for chaining.
       */
      public Builder setGpuCompletionMin(long value) {
        
        gpuCompletionMin_ = value;
        bitField0_ |= 0x00010000;
        onChanged();
        return this;
      }
      /**
       * <code>optional int64 gpu_completion_min = 17;</code>
       * @return This builder for chaining.
       */
      public Builder clearGpuCompletionMin() {
        bitField0_ = (bitField0_ & ~0x00010000);
        gpuCompletionMin_ = 0L;
        onChanged();
        return this;
      }

      private double gpuCompletionAvg_ ;
      /**
       * <code>optional double gpu_completion_avg = 18;</code>
       * @return Whether the gpuCompletionAvg field is set.
       */
      @java.lang.Override
      public boolean hasGpuCompletionAvg() {
        return ((bitField0_ & 0x00020000) != 0);
      }
      /**
       * <code>optional double gpu_completion_avg = 18;</code>
       * @return The gpuCompletionAvg.
       */
      @java.lang.Override
      public double getGpuCompletionAvg() {
        return gpuCompletionAvg_;
      }
      /**
       * <code>optional double gpu_completion_avg = 18;</code>
       * @param value The gpuCompletionAvg to set.
       * @return This builder for chaining.
       */
      public Builder setGpuCompletionAvg(double value) {
        
        gpuCompletionAvg_ = value;
        bitField0_ |= 0x00020000;
        onChanged();
        return this;
      }
      /**
       * <code>optional double gpu_completion_avg = 18;</code>
       * @return This builder for chaining.
       */
      public Builder clearGpuCompletionAvg() {
        bitField0_ = (bitField0_ & ~0x00020000);
        gpuCompletionAvg_ = 0D;
        onChanged();
        return this;
      }

      private int uiRecordCount_ ;
      /**
       * <pre>
       * Number of times a frame was recorded/serialized in a display list on the UI thread with
       * max/min/avg time in nanoseconds.
       * </pre>
       *
       * <code>optional uint32 ui_record_count = 19;</code>
       * @return Whether the uiRecordCount field is set.
       */
      @java.lang.Override
      public boolean hasUiRecordCount() {
        return ((bitField0_ & 0x00040000) != 0);
      }
      /**
       * <pre>
       * Number of times a frame was recorded/serialized in a display list on the UI thread with
       * max/min/avg time in nanoseconds.
       * </pre>
       *
       * <code>optional uint32 ui_record_count = 19;</code>
       * @return The uiRecordCount.
       */
      @java.lang.Override
      public int getUiRecordCount() {
        return uiRecordCount_;
      }
      /**
       * <pre>
       * Number of times a frame was recorded/serialized in a display list on the UI thread with
       * max/min/avg time in nanoseconds.
       * </pre>
       *
       * <code>optional uint32 ui_record_count = 19;</code>
       * @param value The uiRecordCount to set.
       * @return This builder for chaining.
       */
      public Builder setUiRecordCount(int value) {
        
        uiRecordCount_ = value;
        bitField0_ |= 0x00040000;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Number of times a frame was recorded/serialized in a display list on the UI thread with
       * max/min/avg time in nanoseconds.
       * </pre>
       *
       * <code>optional uint32 ui_record_count = 19;</code>
       * @return This builder for chaining.
       */
      public Builder clearUiRecordCount() {
        bitField0_ = (bitField0_ & ~0x00040000);
        uiRecordCount_ = 0;
        onChanged();
        return this;
      }

      private long uiRecordMax_ ;
      /**
       * <code>optional int64 ui_record_max = 20;</code>
       * @return Whether the uiRecordMax field is set.
       */
      @java.lang.Override
      public boolean hasUiRecordMax() {
        return ((bitField0_ & 0x00080000) != 0);
      }
      /**
       * <code>optional int64 ui_record_max = 20;</code>
       * @return The uiRecordMax.
       */
      @java.lang.Override
      public long getUiRecordMax() {
        return uiRecordMax_;
      }
      /**
       * <code>optional int64 ui_record_max = 20;</code>
       * @param value The uiRecordMax to set.
       * @return This builder for chaining.
       */
      public Builder setUiRecordMax(long value) {
        
        uiRecordMax_ = value;
        bitField0_ |= 0x00080000;
        onChanged();
        return this;
      }
      /**
       * <code>optional int64 ui_record_max = 20;</code>
       * @return This builder for chaining.
       */
      public Builder clearUiRecordMax() {
        bitField0_ = (bitField0_ & ~0x00080000);
        uiRecordMax_ = 0L;
        onChanged();
        return this;
      }

      private long uiRecordMin_ ;
      /**
       * <code>optional int64 ui_record_min = 21;</code>
       * @return Whether the uiRecordMin field is set.
       */
      @java.lang.Override
      public boolean hasUiRecordMin() {
        return ((bitField0_ & 0x00100000) != 0);
      }
      /**
       * <code>optional int64 ui_record_min = 21;</code>
       * @return The uiRecordMin.
       */
      @java.lang.Override
      public long getUiRecordMin() {
        return uiRecordMin_;
      }
      /**
       * <code>optional int64 ui_record_min = 21;</code>
       * @param value The uiRecordMin to set.
       * @return This builder for chaining.
       */
      public Builder setUiRecordMin(long value) {
        
        uiRecordMin_ = value;
        bitField0_ |= 0x00100000;
        onChanged();
        return this;
      }
      /**
       * <code>optional int64 ui_record_min = 21;</code>
       * @return This builder for chaining.
       */
      public Builder clearUiRecordMin() {
        bitField0_ = (bitField0_ & ~0x00100000);
        uiRecordMin_ = 0L;
        onChanged();
        return this;
      }

      private double uiRecordAvg_ ;
      /**
       * <code>optional double ui_record_avg = 22;</code>
       * @return Whether the uiRecordAvg field is set.
       */
      @java.lang.Override
      public boolean hasUiRecordAvg() {
        return ((bitField0_ & 0x00200000) != 0);
      }
      /**
       * <code>optional double ui_record_avg = 22;</code>
       * @return The uiRecordAvg.
       */
      @java.lang.Override
      public double getUiRecordAvg() {
        return uiRecordAvg_;
      }
      /**
       * <code>optional double ui_record_avg = 22;</code>
       * @param value The uiRecordAvg to set.
       * @return This builder for chaining.
       */
      public Builder setUiRecordAvg(double value) {
        
        uiRecordAvg_ = value;
        bitField0_ |= 0x00200000;
        onChanged();
        return this;
      }
      /**
       * <code>optional double ui_record_avg = 22;</code>
       * @return This builder for chaining.
       */
      public Builder clearUiRecordAvg() {
        bitField0_ = (bitField0_ & ~0x00200000);
        uiRecordAvg_ = 0D;
        onChanged();
        return this;
      }

      private int shaderCompileCount_ ;
      /**
       * <pre>
       * number of unique shader programs that were used to render frames, followed by total and average
       * times to prepare a shader in nanoseconds.
       * </pre>
       *
       * <code>optional uint32 shader_compile_count = 23;</code>
       * @return Whether the shaderCompileCount field is set.
       */
      @java.lang.Override
      public boolean hasShaderCompileCount() {
        return ((bitField0_ & 0x00400000) != 0);
      }
      /**
       * <pre>
       * number of unique shader programs that were used to render frames, followed by total and average
       * times to prepare a shader in nanoseconds.
       * </pre>
       *
       * <code>optional uint32 shader_compile_count = 23;</code>
       * @return The shaderCompileCount.
       */
      @java.lang.Override
      public int getShaderCompileCount() {
        return shaderCompileCount_;
      }
      /**
       * <pre>
       * number of unique shader programs that were used to render frames, followed by total and average
       * times to prepare a shader in nanoseconds.
       * </pre>
       *
       * <code>optional uint32 shader_compile_count = 23;</code>
       * @param value The shaderCompileCount to set.
       * @return This builder for chaining.
       */
      public Builder setShaderCompileCount(int value) {
        
        shaderCompileCount_ = value;
        bitField0_ |= 0x00400000;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * number of unique shader programs that were used to render frames, followed by total and average
       * times to prepare a shader in nanoseconds.
       * </pre>
       *
       * <code>optional uint32 shader_compile_count = 23;</code>
       * @return This builder for chaining.
       */
      public Builder clearShaderCompileCount() {
        bitField0_ = (bitField0_ & ~0x00400000);
        shaderCompileCount_ = 0;
        onChanged();
        return this;
      }

      private long shaderCompileTime_ ;
      /**
       * <code>optional int64 shader_compile_time = 24;</code>
       * @return Whether the shaderCompileTime field is set.
       */
      @java.lang.Override
      public boolean hasShaderCompileTime() {
        return ((bitField0_ & 0x00800000) != 0);
      }
      /**
       * <code>optional int64 shader_compile_time = 24;</code>
       * @return The shaderCompileTime.
       */
      @java.lang.Override
      public long getShaderCompileTime() {
        return shaderCompileTime_;
      }
      /**
       * <code>optional int64 shader_compile_time = 24;</code>
       * @param value The shaderCompileTime to set.
       * @return This builder for chaining.
       */
      public Builder setShaderCompileTime(long value) {
        
        shaderCompileTime_ = value;
        bitField0_ |= 0x00800000;
        onChanged();
        return this;
      }
      /**
       * <code>optional int64 shader_compile_time = 24;</code>
       * @return This builder for chaining.
       */
      public Builder clearShaderCompileTime() {
        bitField0_ = (bitField0_ & ~0x00800000);
        shaderCompileTime_ = 0L;
        onChanged();
        return this;
      }

      private double shaderCompileAvg_ ;
      /**
       * <code>optional double shader_compile_avg = 25;</code>
       * @return Whether the shaderCompileAvg field is set.
       */
      @java.lang.Override
      public boolean hasShaderCompileAvg() {
        return ((bitField0_ & 0x01000000) != 0);
      }
      /**
       * <code>optional double shader_compile_avg = 25;</code>
       * @return The shaderCompileAvg.
       */
      @java.lang.Override
      public double getShaderCompileAvg() {
        return shaderCompileAvg_;
      }
      /**
       * <code>optional double shader_compile_avg = 25;</code>
       * @param value The shaderCompileAvg to set.
       * @return This builder for chaining.
       */
      public Builder setShaderCompileAvg(double value) {
        
        shaderCompileAvg_ = value;
        bitField0_ |= 0x01000000;
        onChanged();
        return this;
      }
      /**
       * <code>optional double shader_compile_avg = 25;</code>
       * @return This builder for chaining.
       */
      public Builder clearShaderCompileAvg() {
        bitField0_ = (bitField0_ & ~0x01000000);
        shaderCompileAvg_ = 0D;
        onChanged();
        return this;
      }

      private int cacheHitCount_ ;
      /**
       * <pre>
       * number of shader programs loaded from the disk cache, followed by total time and average time
       * to prepare a shader in nanoseconds.
       * </pre>
       *
       * <code>optional uint32 cache_hit_count = 26;</code>
       * @return Whether the cacheHitCount field is set.
       */
      @java.lang.Override
      public boolean hasCacheHitCount() {
        return ((bitField0_ & 0x02000000) != 0);
      }
      /**
       * <pre>
       * number of shader programs loaded from the disk cache, followed by total time and average time
       * to prepare a shader in nanoseconds.
       * </pre>
       *
       * <code>optional uint32 cache_hit_count = 26;</code>
       * @return The cacheHitCount.
       */
      @java.lang.Override
      public int getCacheHitCount() {
        return cacheHitCount_;
      }
      /**
       * <pre>
       * number of shader programs loaded from the disk cache, followed by total time and average time
       * to prepare a shader in nanoseconds.
       * </pre>
       *
       * <code>optional uint32 cache_hit_count = 26;</code>
       * @param value The cacheHitCount to set.
       * @return This builder for chaining.
       */
      public Builder setCacheHitCount(int value) {
        
        cacheHitCount_ = value;
        bitField0_ |= 0x02000000;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * number of shader programs loaded from the disk cache, followed by total time and average time
       * to prepare a shader in nanoseconds.
       * </pre>
       *
       * <code>optional uint32 cache_hit_count = 26;</code>
       * @return This builder for chaining.
       */
      public Builder clearCacheHitCount() {
        bitField0_ = (bitField0_ & ~0x02000000);
        cacheHitCount_ = 0;
        onChanged();
        return this;
      }

      private long cacheHitTime_ ;
      /**
       * <code>optional int64 cache_hit_time = 27;</code>
       * @return Whether the cacheHitTime field is set.
       */
      @java.lang.Override
      public boolean hasCacheHitTime() {
        return ((bitField0_ & 0x04000000) != 0);
      }
      /**
       * <code>optional int64 cache_hit_time = 27;</code>
       * @return The cacheHitTime.
       */
      @java.lang.Override
      public long getCacheHitTime() {
        return cacheHitTime_;
      }
      /**
       * <code>optional int64 cache_hit_time = 27;</code>
       * @param value The cacheHitTime to set.
       * @return This builder for chaining.
       */
      public Builder setCacheHitTime(long value) {
        
        cacheHitTime_ = value;
        bitField0_ |= 0x04000000;
        onChanged();
        return this;
      }
      /**
       * <code>optional int64 cache_hit_time = 27;</code>
       * @return This builder for chaining.
       */
      public Builder clearCacheHitTime() {
        bitField0_ = (bitField0_ & ~0x04000000);
        cacheHitTime_ = 0L;
        onChanged();
        return this;
      }

      private double cacheHitAvg_ ;
      /**
       * <code>optional double cache_hit_avg = 28;</code>
       * @return Whether the cacheHitAvg field is set.
       */
      @java.lang.Override
      public boolean hasCacheHitAvg() {
        return ((bitField0_ & 0x08000000) != 0);
      }
      /**
       * <code>optional double cache_hit_avg = 28;</code>
       * @return The cacheHitAvg.
       */
      @java.lang.Override
      public double getCacheHitAvg() {
        return cacheHitAvg_;
      }
      /**
       * <code>optional double cache_hit_avg = 28;</code>
       * @param value The cacheHitAvg to set.
       * @return This builder for chaining.
       */
      public Builder setCacheHitAvg(double value) {
        
        cacheHitAvg_ = value;
        bitField0_ |= 0x08000000;
        onChanged();
        return this;
      }
      /**
       * <code>optional double cache_hit_avg = 28;</code>
       * @return This builder for chaining.
       */
      public Builder clearCacheHitAvg() {
        bitField0_ = (bitField0_ & ~0x08000000);
        cacheHitAvg_ = 0D;
        onChanged();
        return this;
      }

      private int cacheMissCount_ ;
      /**
       * <pre>
       * number of shader programs compiled/linked, followed by total time and average time to prepare
       * a shader in nanoseconds.
       * </pre>
       *
       * <code>optional uint32 cache_miss_count = 29;</code>
       * @return Whether the cacheMissCount field is set.
       */
      @java.lang.Override
      public boolean hasCacheMissCount() {
        return ((bitField0_ & 0x10000000) != 0);
      }
      /**
       * <pre>
       * number of shader programs compiled/linked, followed by total time and average time to prepare
       * a shader in nanoseconds.
       * </pre>
       *
       * <code>optional uint32 cache_miss_count = 29;</code>
       * @return The cacheMissCount.
       */
      @java.lang.Override
      public int getCacheMissCount() {
        return cacheMissCount_;
      }
      /**
       * <pre>
       * number of shader programs compiled/linked, followed by total time and average time to prepare
       * a shader in nanoseconds.
       * </pre>
       *
       * <code>optional uint32 cache_miss_count = 29;</code>
       * @param value The cacheMissCount to set.
       * @return This builder for chaining.
       */
      public Builder setCacheMissCount(int value) {
        
        cacheMissCount_ = value;
        bitField0_ |= 0x10000000;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * number of shader programs compiled/linked, followed by total time and average time to prepare
       * a shader in nanoseconds.
       * </pre>
       *
       * <code>optional uint32 cache_miss_count = 29;</code>
       * @return This builder for chaining.
       */
      public Builder clearCacheMissCount() {
        bitField0_ = (bitField0_ & ~0x10000000);
        cacheMissCount_ = 0;
        onChanged();
        return this;
      }

      private long cacheMissTime_ ;
      /**
       * <code>optional int64 cache_miss_time = 30;</code>
       * @return Whether the cacheMissTime field is set.
       */
      @java.lang.Override
      public boolean hasCacheMissTime() {
        return ((bitField0_ & 0x20000000) != 0);
      }
      /**
       * <code>optional int64 cache_miss_time = 30;</code>
       * @return The cacheMissTime.
       */
      @java.lang.Override
      public long getCacheMissTime() {
        return cacheMissTime_;
      }
      /**
       * <code>optional int64 cache_miss_time = 30;</code>
       * @param value The cacheMissTime to set.
       * @return This builder for chaining.
       */
      public Builder setCacheMissTime(long value) {
        
        cacheMissTime_ = value;
        bitField0_ |= 0x20000000;
        onChanged();
        return this;
      }
      /**
       * <code>optional int64 cache_miss_time = 30;</code>
       * @return This builder for chaining.
       */
      public Builder clearCacheMissTime() {
        bitField0_ = (bitField0_ & ~0x20000000);
        cacheMissTime_ = 0L;
        onChanged();
        return this;
      }

      private double cacheMissAvg_ ;
      /**
       * <code>optional double cache_miss_avg = 31;</code>
       * @return Whether the cacheMissAvg field is set.
       */
      @java.lang.Override
      public boolean hasCacheMissAvg() {
        return ((bitField0_ & 0x40000000) != 0);
      }
      /**
       * <code>optional double cache_miss_avg = 31;</code>
       * @return The cacheMissAvg.
       */
      @java.lang.Override
      public double getCacheMissAvg() {
        return cacheMissAvg_;
      }
      /**
       * <code>optional double cache_miss_avg = 31;</code>
       * @param value The cacheMissAvg to set.
       * @return This builder for chaining.
       */
      public Builder setCacheMissAvg(double value) {
        
        cacheMissAvg_ = value;
        bitField0_ |= 0x40000000;
        onChanged();
        return this;
      }
      /**
       * <code>optional double cache_miss_avg = 31;</code>
       * @return This builder for chaining.
       */
      public Builder clearCacheMissAvg() {
        bitField0_ = (bitField0_ & ~0x40000000);
        cacheMissAvg_ = 0D;
        onChanged();
        return this;
      }

      private long graphicsCpuMemMax_ ;
      /**
       * <pre>
       * max/min/avg CPU memory used for graphics by HWUI at the end of a frame.
       * </pre>
       *
       * <code>optional int64 graphics_cpu_mem_max = 32;</code>
       * @return Whether the graphicsCpuMemMax field is set.
       */
      @java.lang.Override
      public boolean hasGraphicsCpuMemMax() {
        return ((bitField0_ & 0x80000000) != 0);
      }
      /**
       * <pre>
       * max/min/avg CPU memory used for graphics by HWUI at the end of a frame.
       * </pre>
       *
       * <code>optional int64 graphics_cpu_mem_max = 32;</code>
       * @return The graphicsCpuMemMax.
       */
      @java.lang.Override
      public long getGraphicsCpuMemMax() {
        return graphicsCpuMemMax_;
      }
      /**
       * <pre>
       * max/min/avg CPU memory used for graphics by HWUI at the end of a frame.
       * </pre>
       *
       * <code>optional int64 graphics_cpu_mem_max = 32;</code>
       * @param value The graphicsCpuMemMax to set.
       * @return This builder for chaining.
       */
      public Builder setGraphicsCpuMemMax(long value) {
        
        graphicsCpuMemMax_ = value;
        bitField0_ |= 0x80000000;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * max/min/avg CPU memory used for graphics by HWUI at the end of a frame.
       * </pre>
       *
       * <code>optional int64 graphics_cpu_mem_max = 32;</code>
       * @return This builder for chaining.
       */
      public Builder clearGraphicsCpuMemMax() {
        bitField0_ = (bitField0_ & ~0x80000000);
        graphicsCpuMemMax_ = 0L;
        onChanged();
        return this;
      }

      private long graphicsCpuMemMin_ ;
      /**
       * <code>optional int64 graphics_cpu_mem_min = 33;</code>
       * @return Whether the graphicsCpuMemMin field is set.
       */
      @java.lang.Override
      public boolean hasGraphicsCpuMemMin() {
        return ((bitField1_ & 0x00000001) != 0);
      }
      /**
       * <code>optional int64 graphics_cpu_mem_min = 33;</code>
       * @return The graphicsCpuMemMin.
       */
      @java.lang.Override
      public long getGraphicsCpuMemMin() {
        return graphicsCpuMemMin_;
      }
      /**
       * <code>optional int64 graphics_cpu_mem_min = 33;</code>
       * @param value The graphicsCpuMemMin to set.
       * @return This builder for chaining.
       */
      public Builder setGraphicsCpuMemMin(long value) {
        
        graphicsCpuMemMin_ = value;
        bitField1_ |= 0x00000001;
        onChanged();
        return this;
      }
      /**
       * <code>optional int64 graphics_cpu_mem_min = 33;</code>
       * @return This builder for chaining.
       */
      public Builder clearGraphicsCpuMemMin() {
        bitField1_ = (bitField1_ & ~0x00000001);
        graphicsCpuMemMin_ = 0L;
        onChanged();
        return this;
      }

      private double graphicsCpuMemAvg_ ;
      /**
       * <code>optional double graphics_cpu_mem_avg = 34;</code>
       * @return Whether the graphicsCpuMemAvg field is set.
       */
      @java.lang.Override
      public boolean hasGraphicsCpuMemAvg() {
        return ((bitField1_ & 0x00000002) != 0);
      }
      /**
       * <code>optional double graphics_cpu_mem_avg = 34;</code>
       * @return The graphicsCpuMemAvg.
       */
      @java.lang.Override
      public double getGraphicsCpuMemAvg() {
        return graphicsCpuMemAvg_;
      }
      /**
       * <code>optional double graphics_cpu_mem_avg = 34;</code>
       * @param value The graphicsCpuMemAvg to set.
       * @return This builder for chaining.
       */
      public Builder setGraphicsCpuMemAvg(double value) {
        
        graphicsCpuMemAvg_ = value;
        bitField1_ |= 0x00000002;
        onChanged();
        return this;
      }
      /**
       * <code>optional double graphics_cpu_mem_avg = 34;</code>
       * @return This builder for chaining.
       */
      public Builder clearGraphicsCpuMemAvg() {
        bitField1_ = (bitField1_ & ~0x00000002);
        graphicsCpuMemAvg_ = 0D;
        onChanged();
        return this;
      }

      private long graphicsGpuMemMax_ ;
      /**
       * <pre>
       * max/min/avg GPU memory used by HWUI at the end of a frame excluding textures.
       * </pre>
       *
       * <code>optional int64 graphics_gpu_mem_max = 35;</code>
       * @return Whether the graphicsGpuMemMax field is set.
       */
      @java.lang.Override
      public boolean hasGraphicsGpuMemMax() {
        return ((bitField1_ & 0x00000004) != 0);
      }
      /**
       * <pre>
       * max/min/avg GPU memory used by HWUI at the end of a frame excluding textures.
       * </pre>
       *
       * <code>optional int64 graphics_gpu_mem_max = 35;</code>
       * @return The graphicsGpuMemMax.
       */
      @java.lang.Override
      public long getGraphicsGpuMemMax() {
        return graphicsGpuMemMax_;
      }
      /**
       * <pre>
       * max/min/avg GPU memory used by HWUI at the end of a frame excluding textures.
       * </pre>
       *
       * <code>optional int64 graphics_gpu_mem_max = 35;</code>
       * @param value The graphicsGpuMemMax to set.
       * @return This builder for chaining.
       */
      public Builder setGraphicsGpuMemMax(long value) {
        
        graphicsGpuMemMax_ = value;
        bitField1_ |= 0x00000004;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * max/min/avg GPU memory used by HWUI at the end of a frame excluding textures.
       * </pre>
       *
       * <code>optional int64 graphics_gpu_mem_max = 35;</code>
       * @return This builder for chaining.
       */
      public Builder clearGraphicsGpuMemMax() {
        bitField1_ = (bitField1_ & ~0x00000004);
        graphicsGpuMemMax_ = 0L;
        onChanged();
        return this;
      }

      private long graphicsGpuMemMin_ ;
      /**
       * <code>optional int64 graphics_gpu_mem_min = 36;</code>
       * @return Whether the graphicsGpuMemMin field is set.
       */
      @java.lang.Override
      public boolean hasGraphicsGpuMemMin() {
        return ((bitField1_ & 0x00000008) != 0);
      }
      /**
       * <code>optional int64 graphics_gpu_mem_min = 36;</code>
       * @return The graphicsGpuMemMin.
       */
      @java.lang.Override
      public long getGraphicsGpuMemMin() {
        return graphicsGpuMemMin_;
      }
      /**
       * <code>optional int64 graphics_gpu_mem_min = 36;</code>
       * @param value The graphicsGpuMemMin to set.
       * @return This builder for chaining.
       */
      public Builder setGraphicsGpuMemMin(long value) {
        
        graphicsGpuMemMin_ = value;
        bitField1_ |= 0x00000008;
        onChanged();
        return this;
      }
      /**
       * <code>optional int64 graphics_gpu_mem_min = 36;</code>
       * @return This builder for chaining.
       */
      public Builder clearGraphicsGpuMemMin() {
        bitField1_ = (bitField1_ & ~0x00000008);
        graphicsGpuMemMin_ = 0L;
        onChanged();
        return this;
      }

      private double graphicsGpuMemAvg_ ;
      /**
       * <code>optional double graphics_gpu_mem_avg = 37;</code>
       * @return Whether the graphicsGpuMemAvg field is set.
       */
      @java.lang.Override
      public boolean hasGraphicsGpuMemAvg() {
        return ((bitField1_ & 0x00000010) != 0);
      }
      /**
       * <code>optional double graphics_gpu_mem_avg = 37;</code>
       * @return The graphicsGpuMemAvg.
       */
      @java.lang.Override
      public double getGraphicsGpuMemAvg() {
        return graphicsGpuMemAvg_;
      }
      /**
       * <code>optional double graphics_gpu_mem_avg = 37;</code>
       * @param value The graphicsGpuMemAvg to set.
       * @return This builder for chaining.
       */
      public Builder setGraphicsGpuMemAvg(double value) {
        
        graphicsGpuMemAvg_ = value;
        bitField1_ |= 0x00000010;
        onChanged();
        return this;
      }
      /**
       * <code>optional double graphics_gpu_mem_avg = 37;</code>
       * @return This builder for chaining.
       */
      public Builder clearGraphicsGpuMemAvg() {
        bitField1_ = (bitField1_ & ~0x00000010);
        graphicsGpuMemAvg_ = 0D;
        onChanged();
        return this;
      }

      private long textureMemMax_ ;
      /**
       * <pre>
       * max/min/avg memory used for GPU textures by HWUI at the end of a frame.
       * </pre>
       *
       * <code>optional int64 texture_mem_max = 38;</code>
       * @return Whether the textureMemMax field is set.
       */
      @java.lang.Override
      public boolean hasTextureMemMax() {
        return ((bitField1_ & 0x00000020) != 0);
      }
      /**
       * <pre>
       * max/min/avg memory used for GPU textures by HWUI at the end of a frame.
       * </pre>
       *
       * <code>optional int64 texture_mem_max = 38;</code>
       * @return The textureMemMax.
       */
      @java.lang.Override
      public long getTextureMemMax() {
        return textureMemMax_;
      }
      /**
       * <pre>
       * max/min/avg memory used for GPU textures by HWUI at the end of a frame.
       * </pre>
       *
       * <code>optional int64 texture_mem_max = 38;</code>
       * @param value The textureMemMax to set.
       * @return This builder for chaining.
       */
      public Builder setTextureMemMax(long value) {
        
        textureMemMax_ = value;
        bitField1_ |= 0x00000020;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * max/min/avg memory used for GPU textures by HWUI at the end of a frame.
       * </pre>
       *
       * <code>optional int64 texture_mem_max = 38;</code>
       * @return This builder for chaining.
       */
      public Builder clearTextureMemMax() {
        bitField1_ = (bitField1_ & ~0x00000020);
        textureMemMax_ = 0L;
        onChanged();
        return this;
      }

      private long textureMemMin_ ;
      /**
       * <code>optional int64 texture_mem_min = 39;</code>
       * @return Whether the textureMemMin field is set.
       */
      @java.lang.Override
      public boolean hasTextureMemMin() {
        return ((bitField1_ & 0x00000040) != 0);
      }
      /**
       * <code>optional int64 texture_mem_min = 39;</code>
       * @return The textureMemMin.
       */
      @java.lang.Override
      public long getTextureMemMin() {
        return textureMemMin_;
      }
      /**
       * <code>optional int64 texture_mem_min = 39;</code>
       * @param value The textureMemMin to set.
       * @return This builder for chaining.
       */
      public Builder setTextureMemMin(long value) {
        
        textureMemMin_ = value;
        bitField1_ |= 0x00000040;
        onChanged();
        return this;
      }
      /**
       * <code>optional int64 texture_mem_min = 39;</code>
       * @return This builder for chaining.
       */
      public Builder clearTextureMemMin() {
        bitField1_ = (bitField1_ & ~0x00000040);
        textureMemMin_ = 0L;
        onChanged();
        return this;
      }

      private double textureMemAvg_ ;
      /**
       * <code>optional double texture_mem_avg = 40;</code>
       * @return Whether the textureMemAvg field is set.
       */
      @java.lang.Override
      public boolean hasTextureMemAvg() {
        return ((bitField1_ & 0x00000080) != 0);
      }
      /**
       * <code>optional double texture_mem_avg = 40;</code>
       * @return The textureMemAvg.
       */
      @java.lang.Override
      public double getTextureMemAvg() {
        return textureMemAvg_;
      }
      /**
       * <code>optional double texture_mem_avg = 40;</code>
       * @param value The textureMemAvg to set.
       * @return This builder for chaining.
       */
      public Builder setTextureMemAvg(double value) {
        
        textureMemAvg_ = value;
        bitField1_ |= 0x00000080;
        onChanged();
        return this;
      }
      /**
       * <code>optional double texture_mem_avg = 40;</code>
       * @return This builder for chaining.
       */
      public Builder clearTextureMemAvg() {
        bitField1_ = (bitField1_ & ~0x00000080);
        textureMemAvg_ = 0D;
        onChanged();
        return this;
      }

      private long allMemMax_ ;
      /**
       * <pre>
       * max/min/avg memory used by HWUI at the end of a frame. This is a sum of previous 3 categories.
       * </pre>
       *
       * <code>optional int64 all_mem_max = 41;</code>
       * @return Whether the allMemMax field is set.
       */
      @java.lang.Override
      public boolean hasAllMemMax() {
        return ((bitField1_ & 0x00000100) != 0);
      }
      /**
       * <pre>
       * max/min/avg memory used by HWUI at the end of a frame. This is a sum of previous 3 categories.
       * </pre>
       *
       * <code>optional int64 all_mem_max = 41;</code>
       * @return The allMemMax.
       */
      @java.lang.Override
      public long getAllMemMax() {
        return allMemMax_;
      }
      /**
       * <pre>
       * max/min/avg memory used by HWUI at the end of a frame. This is a sum of previous 3 categories.
       * </pre>
       *
       * <code>optional int64 all_mem_max = 41;</code>
       * @param value The allMemMax to set.
       * @return This builder for chaining.
       */
      public Builder setAllMemMax(long value) {
        
        allMemMax_ = value;
        bitField1_ |= 0x00000100;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * max/min/avg memory used by HWUI at the end of a frame. This is a sum of previous 3 categories.
       * </pre>
       *
       * <code>optional int64 all_mem_max = 41;</code>
       * @return This builder for chaining.
       */
      public Builder clearAllMemMax() {
        bitField1_ = (bitField1_ & ~0x00000100);
        allMemMax_ = 0L;
        onChanged();
        return this;
      }

      private long allMemMin_ ;
      /**
       * <code>optional int64 all_mem_min = 42;</code>
       * @return Whether the allMemMin field is set.
       */
      @java.lang.Override
      public boolean hasAllMemMin() {
        return ((bitField1_ & 0x00000200) != 0);
      }
      /**
       * <code>optional int64 all_mem_min = 42;</code>
       * @return The allMemMin.
       */
      @java.lang.Override
      public long getAllMemMin() {
        return allMemMin_;
      }
      /**
       * <code>optional int64 all_mem_min = 42;</code>
       * @param value The allMemMin to set.
       * @return This builder for chaining.
       */
      public Builder setAllMemMin(long value) {
        
        allMemMin_ = value;
        bitField1_ |= 0x00000200;
        onChanged();
        return this;
      }
      /**
       * <code>optional int64 all_mem_min = 42;</code>
       * @return This builder for chaining.
       */
      public Builder clearAllMemMin() {
        bitField1_ = (bitField1_ & ~0x00000200);
        allMemMin_ = 0L;
        onChanged();
        return this;
      }

      private double allMemAvg_ ;
      /**
       * <code>optional double all_mem_avg = 43;</code>
       * @return Whether the allMemAvg field is set.
       */
      @java.lang.Override
      public boolean hasAllMemAvg() {
        return ((bitField1_ & 0x00000400) != 0);
      }
      /**
       * <code>optional double all_mem_avg = 43;</code>
       * @return The allMemAvg.
       */
      @java.lang.Override
      public double getAllMemAvg() {
        return allMemAvg_;
      }
      /**
       * <code>optional double all_mem_avg = 43;</code>
       * @param value The allMemAvg to set.
       * @return This builder for chaining.
       */
      public Builder setAllMemAvg(double value) {
        
        allMemAvg_ = value;
        bitField1_ |= 0x00000400;
        onChanged();
        return this;
      }
      /**
       * <code>optional double all_mem_avg = 43;</code>
       * @return This builder for chaining.
       */
      public Builder clearAllMemAvg() {
        bitField1_ = (bitField1_ & ~0x00000400);
        allMemAvg_ = 0D;
        onChanged();
        return this;
      }
      @java.lang.Override
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      @java.lang.Override
      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:perfetto.protos.ProcessRenderInfo)
    }

    // @@protoc_insertion_point(class_scope:perfetto.protos.ProcessRenderInfo)
    private static final perfetto.protos.HwuiMetric.ProcessRenderInfo DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new perfetto.protos.HwuiMetric.ProcessRenderInfo();
    }

    public static perfetto.protos.HwuiMetric.ProcessRenderInfo getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    @java.lang.Deprecated public static final com.google.protobuf.Parser<ProcessRenderInfo>
        PARSER = new com.google.protobuf.AbstractParser<ProcessRenderInfo>() {
      @java.lang.Override
      public ProcessRenderInfo parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        Builder builder = newBuilder();
        try {
          builder.mergeFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.setUnfinishedMessage(builder.buildPartial());
        } catch (com.google.protobuf.UninitializedMessageException e) {
          throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
        } catch (java.io.IOException e) {
          throw new com.google.protobuf.InvalidProtocolBufferException(e)
              .setUnfinishedMessage(builder.buildPartial());
        }
        return builder.buildPartial();
      }
    };

    public static com.google.protobuf.Parser<ProcessRenderInfo> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<ProcessRenderInfo> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public perfetto.protos.HwuiMetric.ProcessRenderInfo getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface AndroidHwuiMetricOrBuilder extends
      // @@protoc_insertion_point(interface_extends:perfetto.protos.AndroidHwuiMetric)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <pre>
     *  HWUI metrics for processes that have a RenderThread.
     * </pre>
     *
     * <code>repeated .perfetto.protos.ProcessRenderInfo process_info = 1;</code>
     */
    java.util.List<perfetto.protos.HwuiMetric.ProcessRenderInfo> 
        getProcessInfoList();
    /**
     * <pre>
     *  HWUI metrics for processes that have a RenderThread.
     * </pre>
     *
     * <code>repeated .perfetto.protos.ProcessRenderInfo process_info = 1;</code>
     */
    perfetto.protos.HwuiMetric.ProcessRenderInfo getProcessInfo(int index);
    /**
     * <pre>
     *  HWUI metrics for processes that have a RenderThread.
     * </pre>
     *
     * <code>repeated .perfetto.protos.ProcessRenderInfo process_info = 1;</code>
     */
    int getProcessInfoCount();
    /**
     * <pre>
     *  HWUI metrics for processes that have a RenderThread.
     * </pre>
     *
     * <code>repeated .perfetto.protos.ProcessRenderInfo process_info = 1;</code>
     */
    java.util.List<? extends perfetto.protos.HwuiMetric.ProcessRenderInfoOrBuilder> 
        getProcessInfoOrBuilderList();
    /**
     * <pre>
     *  HWUI metrics for processes that have a RenderThread.
     * </pre>
     *
     * <code>repeated .perfetto.protos.ProcessRenderInfo process_info = 1;</code>
     */
    perfetto.protos.HwuiMetric.ProcessRenderInfoOrBuilder getProcessInfoOrBuilder(
        int index);
  }
  /**
   * Protobuf type {@code perfetto.protos.AndroidHwuiMetric}
   */
  public static final class AndroidHwuiMetric extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:perfetto.protos.AndroidHwuiMetric)
      AndroidHwuiMetricOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use AndroidHwuiMetric.newBuilder() to construct.
    private AndroidHwuiMetric(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private AndroidHwuiMetric() {
      processInfo_ = java.util.Collections.emptyList();
    }

    @java.lang.Override
    @SuppressWarnings({"unused"})
    protected java.lang.Object newInstance(
        UnusedPrivateParameter unused) {
      return new AndroidHwuiMetric();
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return perfetto.protos.HwuiMetric.internal_static_perfetto_protos_AndroidHwuiMetric_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return perfetto.protos.HwuiMetric.internal_static_perfetto_protos_AndroidHwuiMetric_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              perfetto.protos.HwuiMetric.AndroidHwuiMetric.class, perfetto.protos.HwuiMetric.AndroidHwuiMetric.Builder.class);
    }

    public static final int PROCESS_INFO_FIELD_NUMBER = 1;
    @SuppressWarnings("serial")
    private java.util.List<perfetto.protos.HwuiMetric.ProcessRenderInfo> processInfo_;
    /**
     * <pre>
     *  HWUI metrics for processes that have a RenderThread.
     * </pre>
     *
     * <code>repeated .perfetto.protos.ProcessRenderInfo process_info = 1;</code>
     */
    @java.lang.Override
    public java.util.List<perfetto.protos.HwuiMetric.ProcessRenderInfo> getProcessInfoList() {
      return processInfo_;
    }
    /**
     * <pre>
     *  HWUI metrics for processes that have a RenderThread.
     * </pre>
     *
     * <code>repeated .perfetto.protos.ProcessRenderInfo process_info = 1;</code>
     */
    @java.lang.Override
    public java.util.List<? extends perfetto.protos.HwuiMetric.ProcessRenderInfoOrBuilder> 
        getProcessInfoOrBuilderList() {
      return processInfo_;
    }
    /**
     * <pre>
     *  HWUI metrics for processes that have a RenderThread.
     * </pre>
     *
     * <code>repeated .perfetto.protos.ProcessRenderInfo process_info = 1;</code>
     */
    @java.lang.Override
    public int getProcessInfoCount() {
      return processInfo_.size();
    }
    /**
     * <pre>
     *  HWUI metrics for processes that have a RenderThread.
     * </pre>
     *
     * <code>repeated .perfetto.protos.ProcessRenderInfo process_info = 1;</code>
     */
    @java.lang.Override
    public perfetto.protos.HwuiMetric.ProcessRenderInfo getProcessInfo(int index) {
      return processInfo_.get(index);
    }
    /**
     * <pre>
     *  HWUI metrics for processes that have a RenderThread.
     * </pre>
     *
     * <code>repeated .perfetto.protos.ProcessRenderInfo process_info = 1;</code>
     */
    @java.lang.Override
    public perfetto.protos.HwuiMetric.ProcessRenderInfoOrBuilder getProcessInfoOrBuilder(
        int index) {
      return processInfo_.get(index);
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      for (int i = 0; i < processInfo_.size(); i++) {
        output.writeMessage(1, processInfo_.get(i));
      }
      getUnknownFields().writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      for (int i = 0; i < processInfo_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(1, processInfo_.get(i));
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof perfetto.protos.HwuiMetric.AndroidHwuiMetric)) {
        return super.equals(obj);
      }
      perfetto.protos.HwuiMetric.AndroidHwuiMetric other = (perfetto.protos.HwuiMetric.AndroidHwuiMetric) obj;

      if (!getProcessInfoList()
          .equals(other.getProcessInfoList())) return false;
      if (!getUnknownFields().equals(other.getUnknownFields())) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      if (getProcessInfoCount() > 0) {
        hash = (37 * hash) + PROCESS_INFO_FIELD_NUMBER;
        hash = (53 * hash) + getProcessInfoList().hashCode();
      }
      hash = (29 * hash) + getUnknownFields().hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static perfetto.protos.HwuiMetric.AndroidHwuiMetric parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static perfetto.protos.HwuiMetric.AndroidHwuiMetric parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static perfetto.protos.HwuiMetric.AndroidHwuiMetric parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static perfetto.protos.HwuiMetric.AndroidHwuiMetric parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static perfetto.protos.HwuiMetric.AndroidHwuiMetric parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static perfetto.protos.HwuiMetric.AndroidHwuiMetric parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static perfetto.protos.HwuiMetric.AndroidHwuiMetric parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static perfetto.protos.HwuiMetric.AndroidHwuiMetric parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static perfetto.protos.HwuiMetric.AndroidHwuiMetric parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static perfetto.protos.HwuiMetric.AndroidHwuiMetric parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static perfetto.protos.HwuiMetric.AndroidHwuiMetric parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static perfetto.protos.HwuiMetric.AndroidHwuiMetric parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(perfetto.protos.HwuiMetric.AndroidHwuiMetric prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code perfetto.protos.AndroidHwuiMetric}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:perfetto.protos.AndroidHwuiMetric)
        perfetto.protos.HwuiMetric.AndroidHwuiMetricOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return perfetto.protos.HwuiMetric.internal_static_perfetto_protos_AndroidHwuiMetric_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return perfetto.protos.HwuiMetric.internal_static_perfetto_protos_AndroidHwuiMetric_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                perfetto.protos.HwuiMetric.AndroidHwuiMetric.class, perfetto.protos.HwuiMetric.AndroidHwuiMetric.Builder.class);
      }

      // Construct using perfetto.protos.HwuiMetric.AndroidHwuiMetric.newBuilder()
      private Builder() {

      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);

      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        bitField0_ = 0;
        if (processInfoBuilder_ == null) {
          processInfo_ = java.util.Collections.emptyList();
        } else {
          processInfo_ = null;
          processInfoBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000001);
        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return perfetto.protos.HwuiMetric.internal_static_perfetto_protos_AndroidHwuiMetric_descriptor;
      }

      @java.lang.Override
      public perfetto.protos.HwuiMetric.AndroidHwuiMetric getDefaultInstanceForType() {
        return perfetto.protos.HwuiMetric.AndroidHwuiMetric.getDefaultInstance();
      }

      @java.lang.Override
      public perfetto.protos.HwuiMetric.AndroidHwuiMetric build() {
        perfetto.protos.HwuiMetric.AndroidHwuiMetric result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public perfetto.protos.HwuiMetric.AndroidHwuiMetric buildPartial() {
        perfetto.protos.HwuiMetric.AndroidHwuiMetric result = new perfetto.protos.HwuiMetric.AndroidHwuiMetric(this);
        buildPartialRepeatedFields(result);
        if (bitField0_ != 0) { buildPartial0(result); }
        onBuilt();
        return result;
      }

      private void buildPartialRepeatedFields(perfetto.protos.HwuiMetric.AndroidHwuiMetric result) {
        if (processInfoBuilder_ == null) {
          if (((bitField0_ & 0x00000001) != 0)) {
            processInfo_ = java.util.Collections.unmodifiableList(processInfo_);
            bitField0_ = (bitField0_ & ~0x00000001);
          }
          result.processInfo_ = processInfo_;
        } else {
          result.processInfo_ = processInfoBuilder_.build();
        }
      }

      private void buildPartial0(perfetto.protos.HwuiMetric.AndroidHwuiMetric result) {
        int from_bitField0_ = bitField0_;
      }

      @java.lang.Override
      public Builder clone() {
        return super.clone();
      }
      @java.lang.Override
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.setField(field, value);
      }
      @java.lang.Override
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return super.clearField(field);
      }
      @java.lang.Override
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return super.clearOneof(oneof);
      }
      @java.lang.Override
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, java.lang.Object value) {
        return super.setRepeatedField(field, index, value);
      }
      @java.lang.Override
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.addRepeatedField(field, value);
      }
      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof perfetto.protos.HwuiMetric.AndroidHwuiMetric) {
          return mergeFrom((perfetto.protos.HwuiMetric.AndroidHwuiMetric)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(perfetto.protos.HwuiMetric.AndroidHwuiMetric other) {
        if (other == perfetto.protos.HwuiMetric.AndroidHwuiMetric.getDefaultInstance()) return this;
        if (processInfoBuilder_ == null) {
          if (!other.processInfo_.isEmpty()) {
            if (processInfo_.isEmpty()) {
              processInfo_ = other.processInfo_;
              bitField0_ = (bitField0_ & ~0x00000001);
            } else {
              ensureProcessInfoIsMutable();
              processInfo_.addAll(other.processInfo_);
            }
            onChanged();
          }
        } else {
          if (!other.processInfo_.isEmpty()) {
            if (processInfoBuilder_.isEmpty()) {
              processInfoBuilder_.dispose();
              processInfoBuilder_ = null;
              processInfo_ = other.processInfo_;
              bitField0_ = (bitField0_ & ~0x00000001);
              processInfoBuilder_ = 
                com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders ?
                   getProcessInfoFieldBuilder() : null;
            } else {
              processInfoBuilder_.addAllMessages(other.processInfo_);
            }
          }
        }
        this.mergeUnknownFields(other.getUnknownFields());
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        if (extensionRegistry == null) {
          throw new java.lang.NullPointerException();
        }
        try {
          boolean done = false;
          while (!done) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                done = true;
                break;
              case 10: {
                perfetto.protos.HwuiMetric.ProcessRenderInfo m =
                    input.readMessage(
                        perfetto.protos.HwuiMetric.ProcessRenderInfo.PARSER,
                        extensionRegistry);
                if (processInfoBuilder_ == null) {
                  ensureProcessInfoIsMutable();
                  processInfo_.add(m);
                } else {
                  processInfoBuilder_.addMessage(m);
                }
                break;
              } // case 10
              default: {
                if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                  done = true; // was an endgroup tag
                }
                break;
              } // default:
            } // switch (tag)
          } // while (!done)
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.unwrapIOException();
        } finally {
          onChanged();
        } // finally
        return this;
      }
      private int bitField0_;

      private java.util.List<perfetto.protos.HwuiMetric.ProcessRenderInfo> processInfo_ =
        java.util.Collections.emptyList();
      private void ensureProcessInfoIsMutable() {
        if (!((bitField0_ & 0x00000001) != 0)) {
          processInfo_ = new java.util.ArrayList<perfetto.protos.HwuiMetric.ProcessRenderInfo>(processInfo_);
          bitField0_ |= 0x00000001;
         }
      }

      private com.google.protobuf.RepeatedFieldBuilderV3<
          perfetto.protos.HwuiMetric.ProcessRenderInfo, perfetto.protos.HwuiMetric.ProcessRenderInfo.Builder, perfetto.protos.HwuiMetric.ProcessRenderInfoOrBuilder> processInfoBuilder_;

      /**
       * <pre>
       *  HWUI metrics for processes that have a RenderThread.
       * </pre>
       *
       * <code>repeated .perfetto.protos.ProcessRenderInfo process_info = 1;</code>
       */
      public java.util.List<perfetto.protos.HwuiMetric.ProcessRenderInfo> getProcessInfoList() {
        if (processInfoBuilder_ == null) {
          return java.util.Collections.unmodifiableList(processInfo_);
        } else {
          return processInfoBuilder_.getMessageList();
        }
      }
      /**
       * <pre>
       *  HWUI metrics for processes that have a RenderThread.
       * </pre>
       *
       * <code>repeated .perfetto.protos.ProcessRenderInfo process_info = 1;</code>
       */
      public int getProcessInfoCount() {
        if (processInfoBuilder_ == null) {
          return processInfo_.size();
        } else {
          return processInfoBuilder_.getCount();
        }
      }
      /**
       * <pre>
       *  HWUI metrics for processes that have a RenderThread.
       * </pre>
       *
       * <code>repeated .perfetto.protos.ProcessRenderInfo process_info = 1;</code>
       */
      public perfetto.protos.HwuiMetric.ProcessRenderInfo getProcessInfo(int index) {
        if (processInfoBuilder_ == null) {
          return processInfo_.get(index);
        } else {
          return processInfoBuilder_.getMessage(index);
        }
      }
      /**
       * <pre>
       *  HWUI metrics for processes that have a RenderThread.
       * </pre>
       *
       * <code>repeated .perfetto.protos.ProcessRenderInfo process_info = 1;</code>
       */
      public Builder setProcessInfo(
          int index, perfetto.protos.HwuiMetric.ProcessRenderInfo value) {
        if (processInfoBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureProcessInfoIsMutable();
          processInfo_.set(index, value);
          onChanged();
        } else {
          processInfoBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <pre>
       *  HWUI metrics for processes that have a RenderThread.
       * </pre>
       *
       * <code>repeated .perfetto.protos.ProcessRenderInfo process_info = 1;</code>
       */
      public Builder setProcessInfo(
          int index, perfetto.protos.HwuiMetric.ProcessRenderInfo.Builder builderForValue) {
        if (processInfoBuilder_ == null) {
          ensureProcessInfoIsMutable();
          processInfo_.set(index, builderForValue.build());
          onChanged();
        } else {
          processInfoBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       *  HWUI metrics for processes that have a RenderThread.
       * </pre>
       *
       * <code>repeated .perfetto.protos.ProcessRenderInfo process_info = 1;</code>
       */
      public Builder addProcessInfo(perfetto.protos.HwuiMetric.ProcessRenderInfo value) {
        if (processInfoBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureProcessInfoIsMutable();
          processInfo_.add(value);
          onChanged();
        } else {
          processInfoBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <pre>
       *  HWUI metrics for processes that have a RenderThread.
       * </pre>
       *
       * <code>repeated .perfetto.protos.ProcessRenderInfo process_info = 1;</code>
       */
      public Builder addProcessInfo(
          int index, perfetto.protos.HwuiMetric.ProcessRenderInfo value) {
        if (processInfoBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureProcessInfoIsMutable();
          processInfo_.add(index, value);
          onChanged();
        } else {
          processInfoBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <pre>
       *  HWUI metrics for processes that have a RenderThread.
       * </pre>
       *
       * <code>repeated .perfetto.protos.ProcessRenderInfo process_info = 1;</code>
       */
      public Builder addProcessInfo(
          perfetto.protos.HwuiMetric.ProcessRenderInfo.Builder builderForValue) {
        if (processInfoBuilder_ == null) {
          ensureProcessInfoIsMutable();
          processInfo_.add(builderForValue.build());
          onChanged();
        } else {
          processInfoBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       *  HWUI metrics for processes that have a RenderThread.
       * </pre>
       *
       * <code>repeated .perfetto.protos.ProcessRenderInfo process_info = 1;</code>
       */
      public Builder addProcessInfo(
          int index, perfetto.protos.HwuiMetric.ProcessRenderInfo.Builder builderForValue) {
        if (processInfoBuilder_ == null) {
          ensureProcessInfoIsMutable();
          processInfo_.add(index, builderForValue.build());
          onChanged();
        } else {
          processInfoBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       *  HWUI metrics for processes that have a RenderThread.
       * </pre>
       *
       * <code>repeated .perfetto.protos.ProcessRenderInfo process_info = 1;</code>
       */
      public Builder addAllProcessInfo(
          java.lang.Iterable<? extends perfetto.protos.HwuiMetric.ProcessRenderInfo> values) {
        if (processInfoBuilder_ == null) {
          ensureProcessInfoIsMutable();
          com.google.protobuf.AbstractMessageLite.Builder.addAll(
              values, processInfo_);
          onChanged();
        } else {
          processInfoBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <pre>
       *  HWUI metrics for processes that have a RenderThread.
       * </pre>
       *
       * <code>repeated .perfetto.protos.ProcessRenderInfo process_info = 1;</code>
       */
      public Builder clearProcessInfo() {
        if (processInfoBuilder_ == null) {
          processInfo_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000001);
          onChanged();
        } else {
          processInfoBuilder_.clear();
        }
        return this;
      }
      /**
       * <pre>
       *  HWUI metrics for processes that have a RenderThread.
       * </pre>
       *
       * <code>repeated .perfetto.protos.ProcessRenderInfo process_info = 1;</code>
       */
      public Builder removeProcessInfo(int index) {
        if (processInfoBuilder_ == null) {
          ensureProcessInfoIsMutable();
          processInfo_.remove(index);
          onChanged();
        } else {
          processInfoBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <pre>
       *  HWUI metrics for processes that have a RenderThread.
       * </pre>
       *
       * <code>repeated .perfetto.protos.ProcessRenderInfo process_info = 1;</code>
       */
      public perfetto.protos.HwuiMetric.ProcessRenderInfo.Builder getProcessInfoBuilder(
          int index) {
        return getProcessInfoFieldBuilder().getBuilder(index);
      }
      /**
       * <pre>
       *  HWUI metrics for processes that have a RenderThread.
       * </pre>
       *
       * <code>repeated .perfetto.protos.ProcessRenderInfo process_info = 1;</code>
       */
      public perfetto.protos.HwuiMetric.ProcessRenderInfoOrBuilder getProcessInfoOrBuilder(
          int index) {
        if (processInfoBuilder_ == null) {
          return processInfo_.get(index);  } else {
          return processInfoBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <pre>
       *  HWUI metrics for processes that have a RenderThread.
       * </pre>
       *
       * <code>repeated .perfetto.protos.ProcessRenderInfo process_info = 1;</code>
       */
      public java.util.List<? extends perfetto.protos.HwuiMetric.ProcessRenderInfoOrBuilder> 
           getProcessInfoOrBuilderList() {
        if (processInfoBuilder_ != null) {
          return processInfoBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(processInfo_);
        }
      }
      /**
       * <pre>
       *  HWUI metrics for processes that have a RenderThread.
       * </pre>
       *
       * <code>repeated .perfetto.protos.ProcessRenderInfo process_info = 1;</code>
       */
      public perfetto.protos.HwuiMetric.ProcessRenderInfo.Builder addProcessInfoBuilder() {
        return getProcessInfoFieldBuilder().addBuilder(
            perfetto.protos.HwuiMetric.ProcessRenderInfo.getDefaultInstance());
      }
      /**
       * <pre>
       *  HWUI metrics for processes that have a RenderThread.
       * </pre>
       *
       * <code>repeated .perfetto.protos.ProcessRenderInfo process_info = 1;</code>
       */
      public perfetto.protos.HwuiMetric.ProcessRenderInfo.Builder addProcessInfoBuilder(
          int index) {
        return getProcessInfoFieldBuilder().addBuilder(
            index, perfetto.protos.HwuiMetric.ProcessRenderInfo.getDefaultInstance());
      }
      /**
       * <pre>
       *  HWUI metrics for processes that have a RenderThread.
       * </pre>
       *
       * <code>repeated .perfetto.protos.ProcessRenderInfo process_info = 1;</code>
       */
      public java.util.List<perfetto.protos.HwuiMetric.ProcessRenderInfo.Builder> 
           getProcessInfoBuilderList() {
        return getProcessInfoFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilderV3<
          perfetto.protos.HwuiMetric.ProcessRenderInfo, perfetto.protos.HwuiMetric.ProcessRenderInfo.Builder, perfetto.protos.HwuiMetric.ProcessRenderInfoOrBuilder> 
          getProcessInfoFieldBuilder() {
        if (processInfoBuilder_ == null) {
          processInfoBuilder_ = new com.google.protobuf.RepeatedFieldBuilderV3<
              perfetto.protos.HwuiMetric.ProcessRenderInfo, perfetto.protos.HwuiMetric.ProcessRenderInfo.Builder, perfetto.protos.HwuiMetric.ProcessRenderInfoOrBuilder>(
                  processInfo_,
                  ((bitField0_ & 0x00000001) != 0),
                  getParentForChildren(),
                  isClean());
          processInfo_ = null;
        }
        return processInfoBuilder_;
      }
      @java.lang.Override
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      @java.lang.Override
      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:perfetto.protos.AndroidHwuiMetric)
    }

    // @@protoc_insertion_point(class_scope:perfetto.protos.AndroidHwuiMetric)
    private static final perfetto.protos.HwuiMetric.AndroidHwuiMetric DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new perfetto.protos.HwuiMetric.AndroidHwuiMetric();
    }

    public static perfetto.protos.HwuiMetric.AndroidHwuiMetric getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    @java.lang.Deprecated public static final com.google.protobuf.Parser<AndroidHwuiMetric>
        PARSER = new com.google.protobuf.AbstractParser<AndroidHwuiMetric>() {
      @java.lang.Override
      public AndroidHwuiMetric parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        Builder builder = newBuilder();
        try {
          builder.mergeFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.setUnfinishedMessage(builder.buildPartial());
        } catch (com.google.protobuf.UninitializedMessageException e) {
          throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
        } catch (java.io.IOException e) {
          throw new com.google.protobuf.InvalidProtocolBufferException(e)
              .setUnfinishedMessage(builder.buildPartial());
        }
        return builder.buildPartial();
      }
    };

    public static com.google.protobuf.Parser<AndroidHwuiMetric> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<AndroidHwuiMetric> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public perfetto.protos.HwuiMetric.AndroidHwuiMetric getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_perfetto_protos_ProcessRenderInfo_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_perfetto_protos_ProcessRenderInfo_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_perfetto_protos_AndroidHwuiMetric_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_perfetto_protos_AndroidHwuiMetric_fieldAccessorTable;

  public static com.google.protobuf.Descriptors.FileDescriptor
      getDescriptor() {
    return descriptor;
  }
  private static  com.google.protobuf.Descriptors.FileDescriptor
      descriptor;
  static {
    java.lang.String[] descriptorData = {
      "\n1protos/perfetto/metrics/android/hwui_m" +
      "etric.proto\022\017perfetto.protos\"\323\010\n\021Process" +
      "RenderInfo\022\024\n\014process_name\030\001 \001(\t\022\026\n\016rt_c" +
      "pu_time_ms\030\002 \001(\003\022\030\n\020draw_frame_count\030\003 \001" +
      "(\r\022\026\n\016draw_frame_max\030\004 \001(\003\022\026\n\016draw_frame" +
      "_min\030\005 \001(\003\022\026\n\016draw_frame_avg\030\006 \001(\001\022\023\n\013fl" +
      "ush_count\030\007 \001(\r\022\021\n\tflush_max\030\010 \001(\003\022\021\n\tfl" +
      "ush_min\030\t \001(\003\022\021\n\tflush_avg\030\n \001(\001\022\032\n\022prep" +
      "are_tree_count\030\013 \001(\r\022\030\n\020prepare_tree_max" +
      "\030\014 \001(\003\022\030\n\020prepare_tree_min\030\r \001(\003\022\030\n\020prep" +
      "are_tree_avg\030\016 \001(\001\022\034\n\024gpu_completion_cou" +
      "nt\030\017 \001(\r\022\032\n\022gpu_completion_max\030\020 \001(\003\022\032\n\022" +
      "gpu_completion_min\030\021 \001(\003\022\032\n\022gpu_completi" +
      "on_avg\030\022 \001(\001\022\027\n\017ui_record_count\030\023 \001(\r\022\025\n" +
      "\rui_record_max\030\024 \001(\003\022\025\n\rui_record_min\030\025 " +
      "\001(\003\022\025\n\rui_record_avg\030\026 \001(\001\022\034\n\024shader_com" +
      "pile_count\030\027 \001(\r\022\033\n\023shader_compile_time\030" +
      "\030 \001(\003\022\032\n\022shader_compile_avg\030\031 \001(\001\022\027\n\017cac" +
      "he_hit_count\030\032 \001(\r\022\026\n\016cache_hit_time\030\033 \001" +
      "(\003\022\025\n\rcache_hit_avg\030\034 \001(\001\022\030\n\020cache_miss_" +
      "count\030\035 \001(\r\022\027\n\017cache_miss_time\030\036 \001(\003\022\026\n\016" +
      "cache_miss_avg\030\037 \001(\001\022\034\n\024graphics_cpu_mem" +
      "_max\030  \001(\003\022\034\n\024graphics_cpu_mem_min\030! \001(\003" +
      "\022\034\n\024graphics_cpu_mem_avg\030\" \001(\001\022\034\n\024graphi" +
      "cs_gpu_mem_max\030# \001(\003\022\034\n\024graphics_gpu_mem" +
      "_min\030$ \001(\003\022\034\n\024graphics_gpu_mem_avg\030% \001(\001" +
      "\022\027\n\017texture_mem_max\030& \001(\003\022\027\n\017texture_mem" +
      "_min\030\' \001(\003\022\027\n\017texture_mem_avg\030( \001(\001\022\023\n\013a" +
      "ll_mem_max\030) \001(\003\022\023\n\013all_mem_min\030* \001(\003\022\023\n" +
      "\013all_mem_avg\030+ \001(\001\"M\n\021AndroidHwuiMetric\022" +
      "8\n\014process_info\030\001 \003(\0132\".perfetto.protos." +
      "ProcessRenderInfo"
    };
    descriptor = com.google.protobuf.Descriptors.FileDescriptor
      .internalBuildGeneratedFileFrom(descriptorData,
        new com.google.protobuf.Descriptors.FileDescriptor[] {
        });
    internal_static_perfetto_protos_ProcessRenderInfo_descriptor =
      getDescriptor().getMessageTypes().get(0);
    internal_static_perfetto_protos_ProcessRenderInfo_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_perfetto_protos_ProcessRenderInfo_descriptor,
        new java.lang.String[] { "ProcessName", "RtCpuTimeMs", "DrawFrameCount", "DrawFrameMax", "DrawFrameMin", "DrawFrameAvg", "FlushCount", "FlushMax", "FlushMin", "FlushAvg", "PrepareTreeCount", "PrepareTreeMax", "PrepareTreeMin", "PrepareTreeAvg", "GpuCompletionCount", "GpuCompletionMax", "GpuCompletionMin", "GpuCompletionAvg", "UiRecordCount", "UiRecordMax", "UiRecordMin", "UiRecordAvg", "ShaderCompileCount", "ShaderCompileTime", "ShaderCompileAvg", "CacheHitCount", "CacheHitTime", "CacheHitAvg", "CacheMissCount", "CacheMissTime", "CacheMissAvg", "GraphicsCpuMemMax", "GraphicsCpuMemMin", "GraphicsCpuMemAvg", "GraphicsGpuMemMax", "GraphicsGpuMemMin", "GraphicsGpuMemAvg", "TextureMemMax", "TextureMemMin", "TextureMemAvg", "AllMemMax", "AllMemMin", "AllMemAvg", });
    internal_static_perfetto_protos_AndroidHwuiMetric_descriptor =
      getDescriptor().getMessageTypes().get(1);
    internal_static_perfetto_protos_AndroidHwuiMetric_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_perfetto_protos_AndroidHwuiMetric_descriptor,
        new java.lang.String[] { "ProcessInfo", });
  }

  // @@protoc_insertion_point(outer_class_scope)
}
