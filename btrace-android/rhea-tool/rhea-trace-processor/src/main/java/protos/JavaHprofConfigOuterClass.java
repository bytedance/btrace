// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: protos/perfetto/config/profiling/java_hprof_config.proto

package perfetto.protos;

public final class JavaHprofConfigOuterClass {
  private JavaHprofConfigOuterClass() {}
  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistryLite registry) {
  }

  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistry registry) {
    registerAllExtensions(
        (com.google.protobuf.ExtensionRegistryLite) registry);
  }
  public interface JavaHprofConfigOrBuilder extends
      // @@protoc_insertion_point(interface_extends:perfetto.protos.JavaHprofConfig)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <pre>
     * Command line allowlist, matched against the /proc/&lt;pid&gt;/cmdline (not the
     * comm string). The semantics of this field were changed since its original
     * introduction.
     * On Android T+ (13+), this field can specify a single wildcard (*), and
     * the profiler will attempt to match it in two possible ways:
     * * if the pattern starts with a '/', then it is matched against the first
     *   segment of the cmdline (i.e. argv0). For example "/bin/e*" would match
     *   "/bin/echo".
     * * otherwise the pattern is matched against the part of argv0
     *   corresponding to the binary name (this is unrelated to /proc/pid/exe).
     *   For example "echo" would match "/bin/echo".
     * On Android S (12) and below, both this pattern and /proc/pid/cmdline get
     * normalized prior to an exact string comparison. Normalization is as
     * follows: (1) trim everything beyond the first null or "&#64;" byte; (2) if
     * the string contains forward slashes, trim everything up to and including
     * the last one.
     * Implementation note: in either case, at most 511 characters of cmdline
     * are considered.
     * </pre>
     *
     * <code>repeated string process_cmdline = 1;</code>
     * @return A list containing the processCmdline.
     */
    java.util.List<java.lang.String>
        getProcessCmdlineList();
    /**
     * <pre>
     * Command line allowlist, matched against the /proc/&lt;pid&gt;/cmdline (not the
     * comm string). The semantics of this field were changed since its original
     * introduction.
     * On Android T+ (13+), this field can specify a single wildcard (*), and
     * the profiler will attempt to match it in two possible ways:
     * * if the pattern starts with a '/', then it is matched against the first
     *   segment of the cmdline (i.e. argv0). For example "/bin/e*" would match
     *   "/bin/echo".
     * * otherwise the pattern is matched against the part of argv0
     *   corresponding to the binary name (this is unrelated to /proc/pid/exe).
     *   For example "echo" would match "/bin/echo".
     * On Android S (12) and below, both this pattern and /proc/pid/cmdline get
     * normalized prior to an exact string comparison. Normalization is as
     * follows: (1) trim everything beyond the first null or "&#64;" byte; (2) if
     * the string contains forward slashes, trim everything up to and including
     * the last one.
     * Implementation note: in either case, at most 511 characters of cmdline
     * are considered.
     * </pre>
     *
     * <code>repeated string process_cmdline = 1;</code>
     * @return The count of processCmdline.
     */
    int getProcessCmdlineCount();
    /**
     * <pre>
     * Command line allowlist, matched against the /proc/&lt;pid&gt;/cmdline (not the
     * comm string). The semantics of this field were changed since its original
     * introduction.
     * On Android T+ (13+), this field can specify a single wildcard (*), and
     * the profiler will attempt to match it in two possible ways:
     * * if the pattern starts with a '/', then it is matched against the first
     *   segment of the cmdline (i.e. argv0). For example "/bin/e*" would match
     *   "/bin/echo".
     * * otherwise the pattern is matched against the part of argv0
     *   corresponding to the binary name (this is unrelated to /proc/pid/exe).
     *   For example "echo" would match "/bin/echo".
     * On Android S (12) and below, both this pattern and /proc/pid/cmdline get
     * normalized prior to an exact string comparison. Normalization is as
     * follows: (1) trim everything beyond the first null or "&#64;" byte; (2) if
     * the string contains forward slashes, trim everything up to and including
     * the last one.
     * Implementation note: in either case, at most 511 characters of cmdline
     * are considered.
     * </pre>
     *
     * <code>repeated string process_cmdline = 1;</code>
     * @param index The index of the element to return.
     * @return The processCmdline at the given index.
     */
    java.lang.String getProcessCmdline(int index);
    /**
     * <pre>
     * Command line allowlist, matched against the /proc/&lt;pid&gt;/cmdline (not the
     * comm string). The semantics of this field were changed since its original
     * introduction.
     * On Android T+ (13+), this field can specify a single wildcard (*), and
     * the profiler will attempt to match it in two possible ways:
     * * if the pattern starts with a '/', then it is matched against the first
     *   segment of the cmdline (i.e. argv0). For example "/bin/e*" would match
     *   "/bin/echo".
     * * otherwise the pattern is matched against the part of argv0
     *   corresponding to the binary name (this is unrelated to /proc/pid/exe).
     *   For example "echo" would match "/bin/echo".
     * On Android S (12) and below, both this pattern and /proc/pid/cmdline get
     * normalized prior to an exact string comparison. Normalization is as
     * follows: (1) trim everything beyond the first null or "&#64;" byte; (2) if
     * the string contains forward slashes, trim everything up to and including
     * the last one.
     * Implementation note: in either case, at most 511 characters of cmdline
     * are considered.
     * </pre>
     *
     * <code>repeated string process_cmdline = 1;</code>
     * @param index The index of the value to return.
     * @return The bytes of the processCmdline at the given index.
     */
    com.google.protobuf.ByteString
        getProcessCmdlineBytes(int index);

    /**
     * <pre>
     * For watermark based triggering or local debugging.
     * </pre>
     *
     * <code>repeated uint64 pid = 2;</code>
     * @return A list containing the pid.
     */
    java.util.List<java.lang.Long> getPidList();
    /**
     * <pre>
     * For watermark based triggering or local debugging.
     * </pre>
     *
     * <code>repeated uint64 pid = 2;</code>
     * @return The count of pid.
     */
    int getPidCount();
    /**
     * <pre>
     * For watermark based triggering or local debugging.
     * </pre>
     *
     * <code>repeated uint64 pid = 2;</code>
     * @param index The index of the element to return.
     * @return The pid at the given index.
     */
    long getPid(int index);

    /**
     * <pre>
     * Only profile target if it was installed by one of the packages given.
     * Special values are:
     * * &#64;system: installed on the system partition
     * * &#64;product: installed on the product partition
     * * &#64;null: sideloaded
     * Supported on Android 12+.
     * </pre>
     *
     * <code>repeated string target_installed_by = 7;</code>
     * @return A list containing the targetInstalledBy.
     */
    java.util.List<java.lang.String>
        getTargetInstalledByList();
    /**
     * <pre>
     * Only profile target if it was installed by one of the packages given.
     * Special values are:
     * * &#64;system: installed on the system partition
     * * &#64;product: installed on the product partition
     * * &#64;null: sideloaded
     * Supported on Android 12+.
     * </pre>
     *
     * <code>repeated string target_installed_by = 7;</code>
     * @return The count of targetInstalledBy.
     */
    int getTargetInstalledByCount();
    /**
     * <pre>
     * Only profile target if it was installed by one of the packages given.
     * Special values are:
     * * &#64;system: installed on the system partition
     * * &#64;product: installed on the product partition
     * * &#64;null: sideloaded
     * Supported on Android 12+.
     * </pre>
     *
     * <code>repeated string target_installed_by = 7;</code>
     * @param index The index of the element to return.
     * @return The targetInstalledBy at the given index.
     */
    java.lang.String getTargetInstalledBy(int index);
    /**
     * <pre>
     * Only profile target if it was installed by one of the packages given.
     * Special values are:
     * * &#64;system: installed on the system partition
     * * &#64;product: installed on the product partition
     * * &#64;null: sideloaded
     * Supported on Android 12+.
     * </pre>
     *
     * <code>repeated string target_installed_by = 7;</code>
     * @param index The index of the value to return.
     * @return The bytes of the targetInstalledBy at the given index.
     */
    com.google.protobuf.ByteString
        getTargetInstalledByBytes(int index);

    /**
     * <pre>
     * Dump at a predefined interval.
     * </pre>
     *
     * <code>optional .perfetto.protos.JavaHprofConfig.ContinuousDumpConfig continuous_dump_config = 3;</code>
     * @return Whether the continuousDumpConfig field is set.
     */
    boolean hasContinuousDumpConfig();
    /**
     * <pre>
     * Dump at a predefined interval.
     * </pre>
     *
     * <code>optional .perfetto.protos.JavaHprofConfig.ContinuousDumpConfig continuous_dump_config = 3;</code>
     * @return The continuousDumpConfig.
     */
    perfetto.protos.JavaHprofConfigOuterClass.JavaHprofConfig.ContinuousDumpConfig getContinuousDumpConfig();
    /**
     * <pre>
     * Dump at a predefined interval.
     * </pre>
     *
     * <code>optional .perfetto.protos.JavaHprofConfig.ContinuousDumpConfig continuous_dump_config = 3;</code>
     */
    perfetto.protos.JavaHprofConfigOuterClass.JavaHprofConfig.ContinuousDumpConfigOrBuilder getContinuousDumpConfigOrBuilder();

    /**
     * <pre>
     * Do not profile processes whose anon RSS + swap &lt; given value.
     * </pre>
     *
     * <code>optional uint32 min_anonymous_memory_kb = 4;</code>
     * @return Whether the minAnonymousMemoryKb field is set.
     */
    boolean hasMinAnonymousMemoryKb();
    /**
     * <pre>
     * Do not profile processes whose anon RSS + swap &lt; given value.
     * </pre>
     *
     * <code>optional uint32 min_anonymous_memory_kb = 4;</code>
     * @return The minAnonymousMemoryKb.
     */
    int getMinAnonymousMemoryKb();

    /**
     * <pre>
     * Include the process' /proc/self/smaps.
     * This only shows maps that:
     * * start with /system
     * * start with /vendor
     * * start with /data/app
     * * contain "extracted in memory from Y", where Y matches any of the above
     * </pre>
     *
     * <code>optional bool dump_smaps = 5;</code>
     * @return Whether the dumpSmaps field is set.
     */
    boolean hasDumpSmaps();
    /**
     * <pre>
     * Include the process' /proc/self/smaps.
     * This only shows maps that:
     * * start with /system
     * * start with /vendor
     * * start with /data/app
     * * contain "extracted in memory from Y", where Y matches any of the above
     * </pre>
     *
     * <code>optional bool dump_smaps = 5;</code>
     * @return The dumpSmaps.
     */
    boolean getDumpSmaps();

    /**
     * <pre>
     * Exclude objects of the following types from the profile. This can be
     * useful if lots of uninteresting objects, e.g. "sun.misc.Cleaner".
     * </pre>
     *
     * <code>repeated string ignored_types = 6;</code>
     * @return A list containing the ignoredTypes.
     */
    java.util.List<java.lang.String>
        getIgnoredTypesList();
    /**
     * <pre>
     * Exclude objects of the following types from the profile. This can be
     * useful if lots of uninteresting objects, e.g. "sun.misc.Cleaner".
     * </pre>
     *
     * <code>repeated string ignored_types = 6;</code>
     * @return The count of ignoredTypes.
     */
    int getIgnoredTypesCount();
    /**
     * <pre>
     * Exclude objects of the following types from the profile. This can be
     * useful if lots of uninteresting objects, e.g. "sun.misc.Cleaner".
     * </pre>
     *
     * <code>repeated string ignored_types = 6;</code>
     * @param index The index of the element to return.
     * @return The ignoredTypes at the given index.
     */
    java.lang.String getIgnoredTypes(int index);
    /**
     * <pre>
     * Exclude objects of the following types from the profile. This can be
     * useful if lots of uninteresting objects, e.g. "sun.misc.Cleaner".
     * </pre>
     *
     * <code>repeated string ignored_types = 6;</code>
     * @param index The index of the value to return.
     * @return The bytes of the ignoredTypes at the given index.
     */
    com.google.protobuf.ByteString
        getIgnoredTypesBytes(int index);
  }
  /**
   * <pre>
   * Configuration for managed app heap graph snapshots.
   * </pre>
   *
   * Protobuf type {@code perfetto.protos.JavaHprofConfig}
   */
  public static final class JavaHprofConfig extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:perfetto.protos.JavaHprofConfig)
      JavaHprofConfigOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use JavaHprofConfig.newBuilder() to construct.
    private JavaHprofConfig(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private JavaHprofConfig() {
      processCmdline_ = com.google.protobuf.LazyStringArrayList.EMPTY;
      pid_ = emptyLongList();
      targetInstalledBy_ = com.google.protobuf.LazyStringArrayList.EMPTY;
      ignoredTypes_ = com.google.protobuf.LazyStringArrayList.EMPTY;
    }

    @java.lang.Override
    @SuppressWarnings({"unused"})
    protected java.lang.Object newInstance(
        UnusedPrivateParameter unused) {
      return new JavaHprofConfig();
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return perfetto.protos.JavaHprofConfigOuterClass.internal_static_perfetto_protos_JavaHprofConfig_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return perfetto.protos.JavaHprofConfigOuterClass.internal_static_perfetto_protos_JavaHprofConfig_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              perfetto.protos.JavaHprofConfigOuterClass.JavaHprofConfig.class, perfetto.protos.JavaHprofConfigOuterClass.JavaHprofConfig.Builder.class);
    }

    public interface ContinuousDumpConfigOrBuilder extends
        // @@protoc_insertion_point(interface_extends:perfetto.protos.JavaHprofConfig.ContinuousDumpConfig)
        com.google.protobuf.MessageOrBuilder {

      /**
       * <pre>
       * ms to wait before first continuous dump.
       * A dump is always created at the beginning of the trace.
       * </pre>
       *
       * <code>optional uint32 dump_phase_ms = 1;</code>
       * @return Whether the dumpPhaseMs field is set.
       */
      boolean hasDumpPhaseMs();
      /**
       * <pre>
       * ms to wait before first continuous dump.
       * A dump is always created at the beginning of the trace.
       * </pre>
       *
       * <code>optional uint32 dump_phase_ms = 1;</code>
       * @return The dumpPhaseMs.
       */
      int getDumpPhaseMs();

      /**
       * <pre>
       * ms to wait between following dumps.
       * </pre>
       *
       * <code>optional uint32 dump_interval_ms = 2;</code>
       * @return Whether the dumpIntervalMs field is set.
       */
      boolean hasDumpIntervalMs();
      /**
       * <pre>
       * ms to wait between following dumps.
       * </pre>
       *
       * <code>optional uint32 dump_interval_ms = 2;</code>
       * @return The dumpIntervalMs.
       */
      int getDumpIntervalMs();

      /**
       * <pre>
       * If true, scans all the processes to find `process_cmdline` and filter by
       * `min_anonymous_memory_kb` only at data source start. Default on Android
       * S-.
       * If false, rescans all the processes to find on every dump. Default on
       * Android T+.
       * </pre>
       *
       * <code>optional bool scan_pids_only_on_start = 3;</code>
       * @return Whether the scanPidsOnlyOnStart field is set.
       */
      boolean hasScanPidsOnlyOnStart();
      /**
       * <pre>
       * If true, scans all the processes to find `process_cmdline` and filter by
       * `min_anonymous_memory_kb` only at data source start. Default on Android
       * S-.
       * If false, rescans all the processes to find on every dump. Default on
       * Android T+.
       * </pre>
       *
       * <code>optional bool scan_pids_only_on_start = 3;</code>
       * @return The scanPidsOnlyOnStart.
       */
      boolean getScanPidsOnlyOnStart();
    }
    /**
     * <pre>
     * If dump_interval_ms != 0, the following configuration is used.
     * </pre>
     *
     * Protobuf type {@code perfetto.protos.JavaHprofConfig.ContinuousDumpConfig}
     */
    public static final class ContinuousDumpConfig extends
        com.google.protobuf.GeneratedMessageV3 implements
        // @@protoc_insertion_point(message_implements:perfetto.protos.JavaHprofConfig.ContinuousDumpConfig)
        ContinuousDumpConfigOrBuilder {
    private static final long serialVersionUID = 0L;
      // Use ContinuousDumpConfig.newBuilder() to construct.
      private ContinuousDumpConfig(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
        super(builder);
      }
      private ContinuousDumpConfig() {
      }

      @java.lang.Override
      @SuppressWarnings({"unused"})
      protected java.lang.Object newInstance(
          UnusedPrivateParameter unused) {
        return new ContinuousDumpConfig();
      }

      @java.lang.Override
      public final com.google.protobuf.UnknownFieldSet
      getUnknownFields() {
        return this.unknownFields;
      }
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return perfetto.protos.JavaHprofConfigOuterClass.internal_static_perfetto_protos_JavaHprofConfig_ContinuousDumpConfig_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return perfetto.protos.JavaHprofConfigOuterClass.internal_static_perfetto_protos_JavaHprofConfig_ContinuousDumpConfig_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                perfetto.protos.JavaHprofConfigOuterClass.JavaHprofConfig.ContinuousDumpConfig.class, perfetto.protos.JavaHprofConfigOuterClass.JavaHprofConfig.ContinuousDumpConfig.Builder.class);
      }

      private int bitField0_;
      public static final int DUMP_PHASE_MS_FIELD_NUMBER = 1;
      private int dumpPhaseMs_ = 0;
      /**
       * <pre>
       * ms to wait before first continuous dump.
       * A dump is always created at the beginning of the trace.
       * </pre>
       *
       * <code>optional uint32 dump_phase_ms = 1;</code>
       * @return Whether the dumpPhaseMs field is set.
       */
      @java.lang.Override
      public boolean hasDumpPhaseMs() {
        return ((bitField0_ & 0x00000001) != 0);
      }
      /**
       * <pre>
       * ms to wait before first continuous dump.
       * A dump is always created at the beginning of the trace.
       * </pre>
       *
       * <code>optional uint32 dump_phase_ms = 1;</code>
       * @return The dumpPhaseMs.
       */
      @java.lang.Override
      public int getDumpPhaseMs() {
        return dumpPhaseMs_;
      }

      public static final int DUMP_INTERVAL_MS_FIELD_NUMBER = 2;
      private int dumpIntervalMs_ = 0;
      /**
       * <pre>
       * ms to wait between following dumps.
       * </pre>
       *
       * <code>optional uint32 dump_interval_ms = 2;</code>
       * @return Whether the dumpIntervalMs field is set.
       */
      @java.lang.Override
      public boolean hasDumpIntervalMs() {
        return ((bitField0_ & 0x00000002) != 0);
      }
      /**
       * <pre>
       * ms to wait between following dumps.
       * </pre>
       *
       * <code>optional uint32 dump_interval_ms = 2;</code>
       * @return The dumpIntervalMs.
       */
      @java.lang.Override
      public int getDumpIntervalMs() {
        return dumpIntervalMs_;
      }

      public static final int SCAN_PIDS_ONLY_ON_START_FIELD_NUMBER = 3;
      private boolean scanPidsOnlyOnStart_ = false;
      /**
       * <pre>
       * If true, scans all the processes to find `process_cmdline` and filter by
       * `min_anonymous_memory_kb` only at data source start. Default on Android
       * S-.
       * If false, rescans all the processes to find on every dump. Default on
       * Android T+.
       * </pre>
       *
       * <code>optional bool scan_pids_only_on_start = 3;</code>
       * @return Whether the scanPidsOnlyOnStart field is set.
       */
      @java.lang.Override
      public boolean hasScanPidsOnlyOnStart() {
        return ((bitField0_ & 0x00000004) != 0);
      }
      /**
       * <pre>
       * If true, scans all the processes to find `process_cmdline` and filter by
       * `min_anonymous_memory_kb` only at data source start. Default on Android
       * S-.
       * If false, rescans all the processes to find on every dump. Default on
       * Android T+.
       * </pre>
       *
       * <code>optional bool scan_pids_only_on_start = 3;</code>
       * @return The scanPidsOnlyOnStart.
       */
      @java.lang.Override
      public boolean getScanPidsOnlyOnStart() {
        return scanPidsOnlyOnStart_;
      }

      private byte memoizedIsInitialized = -1;
      @java.lang.Override
      public final boolean isInitialized() {
        byte isInitialized = memoizedIsInitialized;
        if (isInitialized == 1) return true;
        if (isInitialized == 0) return false;

        memoizedIsInitialized = 1;
        return true;
      }

      @java.lang.Override
      public void writeTo(com.google.protobuf.CodedOutputStream output)
                          throws java.io.IOException {
        if (((bitField0_ & 0x00000001) != 0)) {
          output.writeUInt32(1, dumpPhaseMs_);
        }
        if (((bitField0_ & 0x00000002) != 0)) {
          output.writeUInt32(2, dumpIntervalMs_);
        }
        if (((bitField0_ & 0x00000004) != 0)) {
          output.writeBool(3, scanPidsOnlyOnStart_);
        }
        getUnknownFields().writeTo(output);
      }

      @java.lang.Override
      public int getSerializedSize() {
        int size = memoizedSize;
        if (size != -1) return size;

        size = 0;
        if (((bitField0_ & 0x00000001) != 0)) {
          size += com.google.protobuf.CodedOutputStream
            .computeUInt32Size(1, dumpPhaseMs_);
        }
        if (((bitField0_ & 0x00000002) != 0)) {
          size += com.google.protobuf.CodedOutputStream
            .computeUInt32Size(2, dumpIntervalMs_);
        }
        if (((bitField0_ & 0x00000004) != 0)) {
          size += com.google.protobuf.CodedOutputStream
            .computeBoolSize(3, scanPidsOnlyOnStart_);
        }
        size += getUnknownFields().getSerializedSize();
        memoizedSize = size;
        return size;
      }

      @java.lang.Override
      public boolean equals(final java.lang.Object obj) {
        if (obj == this) {
         return true;
        }
        if (!(obj instanceof perfetto.protos.JavaHprofConfigOuterClass.JavaHprofConfig.ContinuousDumpConfig)) {
          return super.equals(obj);
        }
        perfetto.protos.JavaHprofConfigOuterClass.JavaHprofConfig.ContinuousDumpConfig other = (perfetto.protos.JavaHprofConfigOuterClass.JavaHprofConfig.ContinuousDumpConfig) obj;

        if (hasDumpPhaseMs() != other.hasDumpPhaseMs()) return false;
        if (hasDumpPhaseMs()) {
          if (getDumpPhaseMs()
              != other.getDumpPhaseMs()) return false;
        }
        if (hasDumpIntervalMs() != other.hasDumpIntervalMs()) return false;
        if (hasDumpIntervalMs()) {
          if (getDumpIntervalMs()
              != other.getDumpIntervalMs()) return false;
        }
        if (hasScanPidsOnlyOnStart() != other.hasScanPidsOnlyOnStart()) return false;
        if (hasScanPidsOnlyOnStart()) {
          if (getScanPidsOnlyOnStart()
              != other.getScanPidsOnlyOnStart()) return false;
        }
        if (!getUnknownFields().equals(other.getUnknownFields())) return false;
        return true;
      }

      @java.lang.Override
      public int hashCode() {
        if (memoizedHashCode != 0) {
          return memoizedHashCode;
        }
        int hash = 41;
        hash = (19 * hash) + getDescriptor().hashCode();
        if (hasDumpPhaseMs()) {
          hash = (37 * hash) + DUMP_PHASE_MS_FIELD_NUMBER;
          hash = (53 * hash) + getDumpPhaseMs();
        }
        if (hasDumpIntervalMs()) {
          hash = (37 * hash) + DUMP_INTERVAL_MS_FIELD_NUMBER;
          hash = (53 * hash) + getDumpIntervalMs();
        }
        if (hasScanPidsOnlyOnStart()) {
          hash = (37 * hash) + SCAN_PIDS_ONLY_ON_START_FIELD_NUMBER;
          hash = (53 * hash) + com.google.protobuf.Internal.hashBoolean(
              getScanPidsOnlyOnStart());
        }
        hash = (29 * hash) + getUnknownFields().hashCode();
        memoizedHashCode = hash;
        return hash;
      }

      public static perfetto.protos.JavaHprofConfigOuterClass.JavaHprofConfig.ContinuousDumpConfig parseFrom(
          java.nio.ByteBuffer data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static perfetto.protos.JavaHprofConfigOuterClass.JavaHprofConfig.ContinuousDumpConfig parseFrom(
          java.nio.ByteBuffer data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static perfetto.protos.JavaHprofConfigOuterClass.JavaHprofConfig.ContinuousDumpConfig parseFrom(
          com.google.protobuf.ByteString data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static perfetto.protos.JavaHprofConfigOuterClass.JavaHprofConfig.ContinuousDumpConfig parseFrom(
          com.google.protobuf.ByteString data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static perfetto.protos.JavaHprofConfigOuterClass.JavaHprofConfig.ContinuousDumpConfig parseFrom(byte[] data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static perfetto.protos.JavaHprofConfigOuterClass.JavaHprofConfig.ContinuousDumpConfig parseFrom(
          byte[] data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static perfetto.protos.JavaHprofConfigOuterClass.JavaHprofConfig.ContinuousDumpConfig parseFrom(java.io.InputStream input)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseWithIOException(PARSER, input);
      }
      public static perfetto.protos.JavaHprofConfigOuterClass.JavaHprofConfig.ContinuousDumpConfig parseFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseWithIOException(PARSER, input, extensionRegistry);
      }
      public static perfetto.protos.JavaHprofConfigOuterClass.JavaHprofConfig.ContinuousDumpConfig parseDelimitedFrom(java.io.InputStream input)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseDelimitedWithIOException(PARSER, input);
      }
      public static perfetto.protos.JavaHprofConfigOuterClass.JavaHprofConfig.ContinuousDumpConfig parseDelimitedFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
      }
      public static perfetto.protos.JavaHprofConfigOuterClass.JavaHprofConfig.ContinuousDumpConfig parseFrom(
          com.google.protobuf.CodedInputStream input)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseWithIOException(PARSER, input);
      }
      public static perfetto.protos.JavaHprofConfigOuterClass.JavaHprofConfig.ContinuousDumpConfig parseFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseWithIOException(PARSER, input, extensionRegistry);
      }

      @java.lang.Override
      public Builder newBuilderForType() { return newBuilder(); }
      public static Builder newBuilder() {
        return DEFAULT_INSTANCE.toBuilder();
      }
      public static Builder newBuilder(perfetto.protos.JavaHprofConfigOuterClass.JavaHprofConfig.ContinuousDumpConfig prototype) {
        return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
      }
      @java.lang.Override
      public Builder toBuilder() {
        return this == DEFAULT_INSTANCE
            ? new Builder() : new Builder().mergeFrom(this);
      }

      @java.lang.Override
      protected Builder newBuilderForType(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        Builder builder = new Builder(parent);
        return builder;
      }
      /**
       * <pre>
       * If dump_interval_ms != 0, the following configuration is used.
       * </pre>
       *
       * Protobuf type {@code perfetto.protos.JavaHprofConfig.ContinuousDumpConfig}
       */
      public static final class Builder extends
          com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
          // @@protoc_insertion_point(builder_implements:perfetto.protos.JavaHprofConfig.ContinuousDumpConfig)
          perfetto.protos.JavaHprofConfigOuterClass.JavaHprofConfig.ContinuousDumpConfigOrBuilder {
        public static final com.google.protobuf.Descriptors.Descriptor
            getDescriptor() {
          return perfetto.protos.JavaHprofConfigOuterClass.internal_static_perfetto_protos_JavaHprofConfig_ContinuousDumpConfig_descriptor;
        }

        @java.lang.Override
        protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
            internalGetFieldAccessorTable() {
          return perfetto.protos.JavaHprofConfigOuterClass.internal_static_perfetto_protos_JavaHprofConfig_ContinuousDumpConfig_fieldAccessorTable
              .ensureFieldAccessorsInitialized(
                  perfetto.protos.JavaHprofConfigOuterClass.JavaHprofConfig.ContinuousDumpConfig.class, perfetto.protos.JavaHprofConfigOuterClass.JavaHprofConfig.ContinuousDumpConfig.Builder.class);
        }

        // Construct using perfetto.protos.JavaHprofConfigOuterClass.JavaHprofConfig.ContinuousDumpConfig.newBuilder()
        private Builder() {

        }

        private Builder(
            com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
          super(parent);

        }
        @java.lang.Override
        public Builder clear() {
          super.clear();
          bitField0_ = 0;
          dumpPhaseMs_ = 0;
          dumpIntervalMs_ = 0;
          scanPidsOnlyOnStart_ = false;
          return this;
        }

        @java.lang.Override
        public com.google.protobuf.Descriptors.Descriptor
            getDescriptorForType() {
          return perfetto.protos.JavaHprofConfigOuterClass.internal_static_perfetto_protos_JavaHprofConfig_ContinuousDumpConfig_descriptor;
        }

        @java.lang.Override
        public perfetto.protos.JavaHprofConfigOuterClass.JavaHprofConfig.ContinuousDumpConfig getDefaultInstanceForType() {
          return perfetto.protos.JavaHprofConfigOuterClass.JavaHprofConfig.ContinuousDumpConfig.getDefaultInstance();
        }

        @java.lang.Override
        public perfetto.protos.JavaHprofConfigOuterClass.JavaHprofConfig.ContinuousDumpConfig build() {
          perfetto.protos.JavaHprofConfigOuterClass.JavaHprofConfig.ContinuousDumpConfig result = buildPartial();
          if (!result.isInitialized()) {
            throw newUninitializedMessageException(result);
          }
          return result;
        }

        @java.lang.Override
        public perfetto.protos.JavaHprofConfigOuterClass.JavaHprofConfig.ContinuousDumpConfig buildPartial() {
          perfetto.protos.JavaHprofConfigOuterClass.JavaHprofConfig.ContinuousDumpConfig result = new perfetto.protos.JavaHprofConfigOuterClass.JavaHprofConfig.ContinuousDumpConfig(this);
          if (bitField0_ != 0) { buildPartial0(result); }
          onBuilt();
          return result;
        }

        private void buildPartial0(perfetto.protos.JavaHprofConfigOuterClass.JavaHprofConfig.ContinuousDumpConfig result) {
          int from_bitField0_ = bitField0_;
          int to_bitField0_ = 0;
          if (((from_bitField0_ & 0x00000001) != 0)) {
            result.dumpPhaseMs_ = dumpPhaseMs_;
            to_bitField0_ |= 0x00000001;
          }
          if (((from_bitField0_ & 0x00000002) != 0)) {
            result.dumpIntervalMs_ = dumpIntervalMs_;
            to_bitField0_ |= 0x00000002;
          }
          if (((from_bitField0_ & 0x00000004) != 0)) {
            result.scanPidsOnlyOnStart_ = scanPidsOnlyOnStart_;
            to_bitField0_ |= 0x00000004;
          }
          result.bitField0_ |= to_bitField0_;
        }

        @java.lang.Override
        public Builder clone() {
          return super.clone();
        }
        @java.lang.Override
        public Builder setField(
            com.google.protobuf.Descriptors.FieldDescriptor field,
            java.lang.Object value) {
          return super.setField(field, value);
        }
        @java.lang.Override
        public Builder clearField(
            com.google.protobuf.Descriptors.FieldDescriptor field) {
          return super.clearField(field);
        }
        @java.lang.Override
        public Builder clearOneof(
            com.google.protobuf.Descriptors.OneofDescriptor oneof) {
          return super.clearOneof(oneof);
        }
        @java.lang.Override
        public Builder setRepeatedField(
            com.google.protobuf.Descriptors.FieldDescriptor field,
            int index, java.lang.Object value) {
          return super.setRepeatedField(field, index, value);
        }
        @java.lang.Override
        public Builder addRepeatedField(
            com.google.protobuf.Descriptors.FieldDescriptor field,
            java.lang.Object value) {
          return super.addRepeatedField(field, value);
        }
        @java.lang.Override
        public Builder mergeFrom(com.google.protobuf.Message other) {
          if (other instanceof perfetto.protos.JavaHprofConfigOuterClass.JavaHprofConfig.ContinuousDumpConfig) {
            return mergeFrom((perfetto.protos.JavaHprofConfigOuterClass.JavaHprofConfig.ContinuousDumpConfig)other);
          } else {
            super.mergeFrom(other);
            return this;
          }
        }

        public Builder mergeFrom(perfetto.protos.JavaHprofConfigOuterClass.JavaHprofConfig.ContinuousDumpConfig other) {
          if (other == perfetto.protos.JavaHprofConfigOuterClass.JavaHprofConfig.ContinuousDumpConfig.getDefaultInstance()) return this;
          if (other.hasDumpPhaseMs()) {
            setDumpPhaseMs(other.getDumpPhaseMs());
          }
          if (other.hasDumpIntervalMs()) {
            setDumpIntervalMs(other.getDumpIntervalMs());
          }
          if (other.hasScanPidsOnlyOnStart()) {
            setScanPidsOnlyOnStart(other.getScanPidsOnlyOnStart());
          }
          this.mergeUnknownFields(other.getUnknownFields());
          onChanged();
          return this;
        }

        @java.lang.Override
        public final boolean isInitialized() {
          return true;
        }

        @java.lang.Override
        public Builder mergeFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws java.io.IOException {
          if (extensionRegistry == null) {
            throw new java.lang.NullPointerException();
          }
          try {
            boolean done = false;
            while (!done) {
              int tag = input.readTag();
              switch (tag) {
                case 0:
                  done = true;
                  break;
                case 8: {
                  dumpPhaseMs_ = input.readUInt32();
                  bitField0_ |= 0x00000001;
                  break;
                } // case 8
                case 16: {
                  dumpIntervalMs_ = input.readUInt32();
                  bitField0_ |= 0x00000002;
                  break;
                } // case 16
                case 24: {
                  scanPidsOnlyOnStart_ = input.readBool();
                  bitField0_ |= 0x00000004;
                  break;
                } // case 24
                default: {
                  if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                    done = true; // was an endgroup tag
                  }
                  break;
                } // default:
              } // switch (tag)
            } // while (!done)
          } catch (com.google.protobuf.InvalidProtocolBufferException e) {
            throw e.unwrapIOException();
          } finally {
            onChanged();
          } // finally
          return this;
        }
        private int bitField0_;

        private int dumpPhaseMs_ ;
        /**
         * <pre>
         * ms to wait before first continuous dump.
         * A dump is always created at the beginning of the trace.
         * </pre>
         *
         * <code>optional uint32 dump_phase_ms = 1;</code>
         * @return Whether the dumpPhaseMs field is set.
         */
        @java.lang.Override
        public boolean hasDumpPhaseMs() {
          return ((bitField0_ & 0x00000001) != 0);
        }
        /**
         * <pre>
         * ms to wait before first continuous dump.
         * A dump is always created at the beginning of the trace.
         * </pre>
         *
         * <code>optional uint32 dump_phase_ms = 1;</code>
         * @return The dumpPhaseMs.
         */
        @java.lang.Override
        public int getDumpPhaseMs() {
          return dumpPhaseMs_;
        }
        /**
         * <pre>
         * ms to wait before first continuous dump.
         * A dump is always created at the beginning of the trace.
         * </pre>
         *
         * <code>optional uint32 dump_phase_ms = 1;</code>
         * @param value The dumpPhaseMs to set.
         * @return This builder for chaining.
         */
        public Builder setDumpPhaseMs(int value) {
          
          dumpPhaseMs_ = value;
          bitField0_ |= 0x00000001;
          onChanged();
          return this;
        }
        /**
         * <pre>
         * ms to wait before first continuous dump.
         * A dump is always created at the beginning of the trace.
         * </pre>
         *
         * <code>optional uint32 dump_phase_ms = 1;</code>
         * @return This builder for chaining.
         */
        public Builder clearDumpPhaseMs() {
          bitField0_ = (bitField0_ & ~0x00000001);
          dumpPhaseMs_ = 0;
          onChanged();
          return this;
        }

        private int dumpIntervalMs_ ;
        /**
         * <pre>
         * ms to wait between following dumps.
         * </pre>
         *
         * <code>optional uint32 dump_interval_ms = 2;</code>
         * @return Whether the dumpIntervalMs field is set.
         */
        @java.lang.Override
        public boolean hasDumpIntervalMs() {
          return ((bitField0_ & 0x00000002) != 0);
        }
        /**
         * <pre>
         * ms to wait between following dumps.
         * </pre>
         *
         * <code>optional uint32 dump_interval_ms = 2;</code>
         * @return The dumpIntervalMs.
         */
        @java.lang.Override
        public int getDumpIntervalMs() {
          return dumpIntervalMs_;
        }
        /**
         * <pre>
         * ms to wait between following dumps.
         * </pre>
         *
         * <code>optional uint32 dump_interval_ms = 2;</code>
         * @param value The dumpIntervalMs to set.
         * @return This builder for chaining.
         */
        public Builder setDumpIntervalMs(int value) {
          
          dumpIntervalMs_ = value;
          bitField0_ |= 0x00000002;
          onChanged();
          return this;
        }
        /**
         * <pre>
         * ms to wait between following dumps.
         * </pre>
         *
         * <code>optional uint32 dump_interval_ms = 2;</code>
         * @return This builder for chaining.
         */
        public Builder clearDumpIntervalMs() {
          bitField0_ = (bitField0_ & ~0x00000002);
          dumpIntervalMs_ = 0;
          onChanged();
          return this;
        }

        private boolean scanPidsOnlyOnStart_ ;
        /**
         * <pre>
         * If true, scans all the processes to find `process_cmdline` and filter by
         * `min_anonymous_memory_kb` only at data source start. Default on Android
         * S-.
         * If false, rescans all the processes to find on every dump. Default on
         * Android T+.
         * </pre>
         *
         * <code>optional bool scan_pids_only_on_start = 3;</code>
         * @return Whether the scanPidsOnlyOnStart field is set.
         */
        @java.lang.Override
        public boolean hasScanPidsOnlyOnStart() {
          return ((bitField0_ & 0x00000004) != 0);
        }
        /**
         * <pre>
         * If true, scans all the processes to find `process_cmdline` and filter by
         * `min_anonymous_memory_kb` only at data source start. Default on Android
         * S-.
         * If false, rescans all the processes to find on every dump. Default on
         * Android T+.
         * </pre>
         *
         * <code>optional bool scan_pids_only_on_start = 3;</code>
         * @return The scanPidsOnlyOnStart.
         */
        @java.lang.Override
        public boolean getScanPidsOnlyOnStart() {
          return scanPidsOnlyOnStart_;
        }
        /**
         * <pre>
         * If true, scans all the processes to find `process_cmdline` and filter by
         * `min_anonymous_memory_kb` only at data source start. Default on Android
         * S-.
         * If false, rescans all the processes to find on every dump. Default on
         * Android T+.
         * </pre>
         *
         * <code>optional bool scan_pids_only_on_start = 3;</code>
         * @param value The scanPidsOnlyOnStart to set.
         * @return This builder for chaining.
         */
        public Builder setScanPidsOnlyOnStart(boolean value) {
          
          scanPidsOnlyOnStart_ = value;
          bitField0_ |= 0x00000004;
          onChanged();
          return this;
        }
        /**
         * <pre>
         * If true, scans all the processes to find `process_cmdline` and filter by
         * `min_anonymous_memory_kb` only at data source start. Default on Android
         * S-.
         * If false, rescans all the processes to find on every dump. Default on
         * Android T+.
         * </pre>
         *
         * <code>optional bool scan_pids_only_on_start = 3;</code>
         * @return This builder for chaining.
         */
        public Builder clearScanPidsOnlyOnStart() {
          bitField0_ = (bitField0_ & ~0x00000004);
          scanPidsOnlyOnStart_ = false;
          onChanged();
          return this;
        }
        @java.lang.Override
        public final Builder setUnknownFields(
            final com.google.protobuf.UnknownFieldSet unknownFields) {
          return super.setUnknownFields(unknownFields);
        }

        @java.lang.Override
        public final Builder mergeUnknownFields(
            final com.google.protobuf.UnknownFieldSet unknownFields) {
          return super.mergeUnknownFields(unknownFields);
        }


        // @@protoc_insertion_point(builder_scope:perfetto.protos.JavaHprofConfig.ContinuousDumpConfig)
      }

      // @@protoc_insertion_point(class_scope:perfetto.protos.JavaHprofConfig.ContinuousDumpConfig)
      private static final perfetto.protos.JavaHprofConfigOuterClass.JavaHprofConfig.ContinuousDumpConfig DEFAULT_INSTANCE;
      static {
        DEFAULT_INSTANCE = new perfetto.protos.JavaHprofConfigOuterClass.JavaHprofConfig.ContinuousDumpConfig();
      }

      public static perfetto.protos.JavaHprofConfigOuterClass.JavaHprofConfig.ContinuousDumpConfig getDefaultInstance() {
        return DEFAULT_INSTANCE;
      }

      @java.lang.Deprecated public static final com.google.protobuf.Parser<ContinuousDumpConfig>
          PARSER = new com.google.protobuf.AbstractParser<ContinuousDumpConfig>() {
        @java.lang.Override
        public ContinuousDumpConfig parsePartialFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws com.google.protobuf.InvalidProtocolBufferException {
          Builder builder = newBuilder();
          try {
            builder.mergeFrom(input, extensionRegistry);
          } catch (com.google.protobuf.InvalidProtocolBufferException e) {
            throw e.setUnfinishedMessage(builder.buildPartial());
          } catch (com.google.protobuf.UninitializedMessageException e) {
            throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
          } catch (java.io.IOException e) {
            throw new com.google.protobuf.InvalidProtocolBufferException(e)
                .setUnfinishedMessage(builder.buildPartial());
          }
          return builder.buildPartial();
        }
      };

      public static com.google.protobuf.Parser<ContinuousDumpConfig> parser() {
        return PARSER;
      }

      @java.lang.Override
      public com.google.protobuf.Parser<ContinuousDumpConfig> getParserForType() {
        return PARSER;
      }

      @java.lang.Override
      public perfetto.protos.JavaHprofConfigOuterClass.JavaHprofConfig.ContinuousDumpConfig getDefaultInstanceForType() {
        return DEFAULT_INSTANCE;
      }

    }

    private int bitField0_;
    public static final int PROCESS_CMDLINE_FIELD_NUMBER = 1;
    @SuppressWarnings("serial")
    private com.google.protobuf.LazyStringList processCmdline_;
    /**
     * <pre>
     * Command line allowlist, matched against the /proc/&lt;pid&gt;/cmdline (not the
     * comm string). The semantics of this field were changed since its original
     * introduction.
     * On Android T+ (13+), this field can specify a single wildcard (*), and
     * the profiler will attempt to match it in two possible ways:
     * * if the pattern starts with a '/', then it is matched against the first
     *   segment of the cmdline (i.e. argv0). For example "/bin/e*" would match
     *   "/bin/echo".
     * * otherwise the pattern is matched against the part of argv0
     *   corresponding to the binary name (this is unrelated to /proc/pid/exe).
     *   For example "echo" would match "/bin/echo".
     * On Android S (12) and below, both this pattern and /proc/pid/cmdline get
     * normalized prior to an exact string comparison. Normalization is as
     * follows: (1) trim everything beyond the first null or "&#64;" byte; (2) if
     * the string contains forward slashes, trim everything up to and including
     * the last one.
     * Implementation note: in either case, at most 511 characters of cmdline
     * are considered.
     * </pre>
     *
     * <code>repeated string process_cmdline = 1;</code>
     * @return A list containing the processCmdline.
     */
    public com.google.protobuf.ProtocolStringList
        getProcessCmdlineList() {
      return processCmdline_;
    }
    /**
     * <pre>
     * Command line allowlist, matched against the /proc/&lt;pid&gt;/cmdline (not the
     * comm string). The semantics of this field were changed since its original
     * introduction.
     * On Android T+ (13+), this field can specify a single wildcard (*), and
     * the profiler will attempt to match it in two possible ways:
     * * if the pattern starts with a '/', then it is matched against the first
     *   segment of the cmdline (i.e. argv0). For example "/bin/e*" would match
     *   "/bin/echo".
     * * otherwise the pattern is matched against the part of argv0
     *   corresponding to the binary name (this is unrelated to /proc/pid/exe).
     *   For example "echo" would match "/bin/echo".
     * On Android S (12) and below, both this pattern and /proc/pid/cmdline get
     * normalized prior to an exact string comparison. Normalization is as
     * follows: (1) trim everything beyond the first null or "&#64;" byte; (2) if
     * the string contains forward slashes, trim everything up to and including
     * the last one.
     * Implementation note: in either case, at most 511 characters of cmdline
     * are considered.
     * </pre>
     *
     * <code>repeated string process_cmdline = 1;</code>
     * @return The count of processCmdline.
     */
    public int getProcessCmdlineCount() {
      return processCmdline_.size();
    }
    /**
     * <pre>
     * Command line allowlist, matched against the /proc/&lt;pid&gt;/cmdline (not the
     * comm string). The semantics of this field were changed since its original
     * introduction.
     * On Android T+ (13+), this field can specify a single wildcard (*), and
     * the profiler will attempt to match it in two possible ways:
     * * if the pattern starts with a '/', then it is matched against the first
     *   segment of the cmdline (i.e. argv0). For example "/bin/e*" would match
     *   "/bin/echo".
     * * otherwise the pattern is matched against the part of argv0
     *   corresponding to the binary name (this is unrelated to /proc/pid/exe).
     *   For example "echo" would match "/bin/echo".
     * On Android S (12) and below, both this pattern and /proc/pid/cmdline get
     * normalized prior to an exact string comparison. Normalization is as
     * follows: (1) trim everything beyond the first null or "&#64;" byte; (2) if
     * the string contains forward slashes, trim everything up to and including
     * the last one.
     * Implementation note: in either case, at most 511 characters of cmdline
     * are considered.
     * </pre>
     *
     * <code>repeated string process_cmdline = 1;</code>
     * @param index The index of the element to return.
     * @return The processCmdline at the given index.
     */
    public java.lang.String getProcessCmdline(int index) {
      return processCmdline_.get(index);
    }
    /**
     * <pre>
     * Command line allowlist, matched against the /proc/&lt;pid&gt;/cmdline (not the
     * comm string). The semantics of this field were changed since its original
     * introduction.
     * On Android T+ (13+), this field can specify a single wildcard (*), and
     * the profiler will attempt to match it in two possible ways:
     * * if the pattern starts with a '/', then it is matched against the first
     *   segment of the cmdline (i.e. argv0). For example "/bin/e*" would match
     *   "/bin/echo".
     * * otherwise the pattern is matched against the part of argv0
     *   corresponding to the binary name (this is unrelated to /proc/pid/exe).
     *   For example "echo" would match "/bin/echo".
     * On Android S (12) and below, both this pattern and /proc/pid/cmdline get
     * normalized prior to an exact string comparison. Normalization is as
     * follows: (1) trim everything beyond the first null or "&#64;" byte; (2) if
     * the string contains forward slashes, trim everything up to and including
     * the last one.
     * Implementation note: in either case, at most 511 characters of cmdline
     * are considered.
     * </pre>
     *
     * <code>repeated string process_cmdline = 1;</code>
     * @param index The index of the value to return.
     * @return The bytes of the processCmdline at the given index.
     */
    public com.google.protobuf.ByteString
        getProcessCmdlineBytes(int index) {
      return processCmdline_.getByteString(index);
    }

    public static final int PID_FIELD_NUMBER = 2;
    @SuppressWarnings("serial")
    private com.google.protobuf.Internal.LongList pid_;
    /**
     * <pre>
     * For watermark based triggering or local debugging.
     * </pre>
     *
     * <code>repeated uint64 pid = 2;</code>
     * @return A list containing the pid.
     */
    @java.lang.Override
    public java.util.List<java.lang.Long>
        getPidList() {
      return pid_;
    }
    /**
     * <pre>
     * For watermark based triggering or local debugging.
     * </pre>
     *
     * <code>repeated uint64 pid = 2;</code>
     * @return The count of pid.
     */
    public int getPidCount() {
      return pid_.size();
    }
    /**
     * <pre>
     * For watermark based triggering or local debugging.
     * </pre>
     *
     * <code>repeated uint64 pid = 2;</code>
     * @param index The index of the element to return.
     * @return The pid at the given index.
     */
    public long getPid(int index) {
      return pid_.getLong(index);
    }

    public static final int TARGET_INSTALLED_BY_FIELD_NUMBER = 7;
    @SuppressWarnings("serial")
    private com.google.protobuf.LazyStringList targetInstalledBy_;
    /**
     * <pre>
     * Only profile target if it was installed by one of the packages given.
     * Special values are:
     * * &#64;system: installed on the system partition
     * * &#64;product: installed on the product partition
     * * &#64;null: sideloaded
     * Supported on Android 12+.
     * </pre>
     *
     * <code>repeated string target_installed_by = 7;</code>
     * @return A list containing the targetInstalledBy.
     */
    public com.google.protobuf.ProtocolStringList
        getTargetInstalledByList() {
      return targetInstalledBy_;
    }
    /**
     * <pre>
     * Only profile target if it was installed by one of the packages given.
     * Special values are:
     * * &#64;system: installed on the system partition
     * * &#64;product: installed on the product partition
     * * &#64;null: sideloaded
     * Supported on Android 12+.
     * </pre>
     *
     * <code>repeated string target_installed_by = 7;</code>
     * @return The count of targetInstalledBy.
     */
    public int getTargetInstalledByCount() {
      return targetInstalledBy_.size();
    }
    /**
     * <pre>
     * Only profile target if it was installed by one of the packages given.
     * Special values are:
     * * &#64;system: installed on the system partition
     * * &#64;product: installed on the product partition
     * * &#64;null: sideloaded
     * Supported on Android 12+.
     * </pre>
     *
     * <code>repeated string target_installed_by = 7;</code>
     * @param index The index of the element to return.
     * @return The targetInstalledBy at the given index.
     */
    public java.lang.String getTargetInstalledBy(int index) {
      return targetInstalledBy_.get(index);
    }
    /**
     * <pre>
     * Only profile target if it was installed by one of the packages given.
     * Special values are:
     * * &#64;system: installed on the system partition
     * * &#64;product: installed on the product partition
     * * &#64;null: sideloaded
     * Supported on Android 12+.
     * </pre>
     *
     * <code>repeated string target_installed_by = 7;</code>
     * @param index The index of the value to return.
     * @return The bytes of the targetInstalledBy at the given index.
     */
    public com.google.protobuf.ByteString
        getTargetInstalledByBytes(int index) {
      return targetInstalledBy_.getByteString(index);
    }

    public static final int CONTINUOUS_DUMP_CONFIG_FIELD_NUMBER = 3;
    private perfetto.protos.JavaHprofConfigOuterClass.JavaHprofConfig.ContinuousDumpConfig continuousDumpConfig_;
    /**
     * <pre>
     * Dump at a predefined interval.
     * </pre>
     *
     * <code>optional .perfetto.protos.JavaHprofConfig.ContinuousDumpConfig continuous_dump_config = 3;</code>
     * @return Whether the continuousDumpConfig field is set.
     */
    @java.lang.Override
    public boolean hasContinuousDumpConfig() {
      return ((bitField0_ & 0x00000001) != 0);
    }
    /**
     * <pre>
     * Dump at a predefined interval.
     * </pre>
     *
     * <code>optional .perfetto.protos.JavaHprofConfig.ContinuousDumpConfig continuous_dump_config = 3;</code>
     * @return The continuousDumpConfig.
     */
    @java.lang.Override
    public perfetto.protos.JavaHprofConfigOuterClass.JavaHprofConfig.ContinuousDumpConfig getContinuousDumpConfig() {
      return continuousDumpConfig_ == null ? perfetto.protos.JavaHprofConfigOuterClass.JavaHprofConfig.ContinuousDumpConfig.getDefaultInstance() : continuousDumpConfig_;
    }
    /**
     * <pre>
     * Dump at a predefined interval.
     * </pre>
     *
     * <code>optional .perfetto.protos.JavaHprofConfig.ContinuousDumpConfig continuous_dump_config = 3;</code>
     */
    @java.lang.Override
    public perfetto.protos.JavaHprofConfigOuterClass.JavaHprofConfig.ContinuousDumpConfigOrBuilder getContinuousDumpConfigOrBuilder() {
      return continuousDumpConfig_ == null ? perfetto.protos.JavaHprofConfigOuterClass.JavaHprofConfig.ContinuousDumpConfig.getDefaultInstance() : continuousDumpConfig_;
    }

    public static final int MIN_ANONYMOUS_MEMORY_KB_FIELD_NUMBER = 4;
    private int minAnonymousMemoryKb_ = 0;
    /**
     * <pre>
     * Do not profile processes whose anon RSS + swap &lt; given value.
     * </pre>
     *
     * <code>optional uint32 min_anonymous_memory_kb = 4;</code>
     * @return Whether the minAnonymousMemoryKb field is set.
     */
    @java.lang.Override
    public boolean hasMinAnonymousMemoryKb() {
      return ((bitField0_ & 0x00000002) != 0);
    }
    /**
     * <pre>
     * Do not profile processes whose anon RSS + swap &lt; given value.
     * </pre>
     *
     * <code>optional uint32 min_anonymous_memory_kb = 4;</code>
     * @return The minAnonymousMemoryKb.
     */
    @java.lang.Override
    public int getMinAnonymousMemoryKb() {
      return minAnonymousMemoryKb_;
    }

    public static final int DUMP_SMAPS_FIELD_NUMBER = 5;
    private boolean dumpSmaps_ = false;
    /**
     * <pre>
     * Include the process' /proc/self/smaps.
     * This only shows maps that:
     * * start with /system
     * * start with /vendor
     * * start with /data/app
     * * contain "extracted in memory from Y", where Y matches any of the above
     * </pre>
     *
     * <code>optional bool dump_smaps = 5;</code>
     * @return Whether the dumpSmaps field is set.
     */
    @java.lang.Override
    public boolean hasDumpSmaps() {
      return ((bitField0_ & 0x00000004) != 0);
    }
    /**
     * <pre>
     * Include the process' /proc/self/smaps.
     * This only shows maps that:
     * * start with /system
     * * start with /vendor
     * * start with /data/app
     * * contain "extracted in memory from Y", where Y matches any of the above
     * </pre>
     *
     * <code>optional bool dump_smaps = 5;</code>
     * @return The dumpSmaps.
     */
    @java.lang.Override
    public boolean getDumpSmaps() {
      return dumpSmaps_;
    }

    public static final int IGNORED_TYPES_FIELD_NUMBER = 6;
    @SuppressWarnings("serial")
    private com.google.protobuf.LazyStringList ignoredTypes_;
    /**
     * <pre>
     * Exclude objects of the following types from the profile. This can be
     * useful if lots of uninteresting objects, e.g. "sun.misc.Cleaner".
     * </pre>
     *
     * <code>repeated string ignored_types = 6;</code>
     * @return A list containing the ignoredTypes.
     */
    public com.google.protobuf.ProtocolStringList
        getIgnoredTypesList() {
      return ignoredTypes_;
    }
    /**
     * <pre>
     * Exclude objects of the following types from the profile. This can be
     * useful if lots of uninteresting objects, e.g. "sun.misc.Cleaner".
     * </pre>
     *
     * <code>repeated string ignored_types = 6;</code>
     * @return The count of ignoredTypes.
     */
    public int getIgnoredTypesCount() {
      return ignoredTypes_.size();
    }
    /**
     * <pre>
     * Exclude objects of the following types from the profile. This can be
     * useful if lots of uninteresting objects, e.g. "sun.misc.Cleaner".
     * </pre>
     *
     * <code>repeated string ignored_types = 6;</code>
     * @param index The index of the element to return.
     * @return The ignoredTypes at the given index.
     */
    public java.lang.String getIgnoredTypes(int index) {
      return ignoredTypes_.get(index);
    }
    /**
     * <pre>
     * Exclude objects of the following types from the profile. This can be
     * useful if lots of uninteresting objects, e.g. "sun.misc.Cleaner".
     * </pre>
     *
     * <code>repeated string ignored_types = 6;</code>
     * @param index The index of the value to return.
     * @return The bytes of the ignoredTypes at the given index.
     */
    public com.google.protobuf.ByteString
        getIgnoredTypesBytes(int index) {
      return ignoredTypes_.getByteString(index);
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      for (int i = 0; i < processCmdline_.size(); i++) {
        com.google.protobuf.GeneratedMessageV3.writeString(output, 1, processCmdline_.getRaw(i));
      }
      for (int i = 0; i < pid_.size(); i++) {
        output.writeUInt64(2, pid_.getLong(i));
      }
      if (((bitField0_ & 0x00000001) != 0)) {
        output.writeMessage(3, getContinuousDumpConfig());
      }
      if (((bitField0_ & 0x00000002) != 0)) {
        output.writeUInt32(4, minAnonymousMemoryKb_);
      }
      if (((bitField0_ & 0x00000004) != 0)) {
        output.writeBool(5, dumpSmaps_);
      }
      for (int i = 0; i < ignoredTypes_.size(); i++) {
        com.google.protobuf.GeneratedMessageV3.writeString(output, 6, ignoredTypes_.getRaw(i));
      }
      for (int i = 0; i < targetInstalledBy_.size(); i++) {
        com.google.protobuf.GeneratedMessageV3.writeString(output, 7, targetInstalledBy_.getRaw(i));
      }
      getUnknownFields().writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      {
        int dataSize = 0;
        for (int i = 0; i < processCmdline_.size(); i++) {
          dataSize += computeStringSizeNoTag(processCmdline_.getRaw(i));
        }
        size += dataSize;
        size += 1 * getProcessCmdlineList().size();
      }
      {
        int dataSize = 0;
        for (int i = 0; i < pid_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeUInt64SizeNoTag(pid_.getLong(i));
        }
        size += dataSize;
        size += 1 * getPidList().size();
      }
      if (((bitField0_ & 0x00000001) != 0)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(3, getContinuousDumpConfig());
      }
      if (((bitField0_ & 0x00000002) != 0)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(4, minAnonymousMemoryKb_);
      }
      if (((bitField0_ & 0x00000004) != 0)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(5, dumpSmaps_);
      }
      {
        int dataSize = 0;
        for (int i = 0; i < ignoredTypes_.size(); i++) {
          dataSize += computeStringSizeNoTag(ignoredTypes_.getRaw(i));
        }
        size += dataSize;
        size += 1 * getIgnoredTypesList().size();
      }
      {
        int dataSize = 0;
        for (int i = 0; i < targetInstalledBy_.size(); i++) {
          dataSize += computeStringSizeNoTag(targetInstalledBy_.getRaw(i));
        }
        size += dataSize;
        size += 1 * getTargetInstalledByList().size();
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof perfetto.protos.JavaHprofConfigOuterClass.JavaHprofConfig)) {
        return super.equals(obj);
      }
      perfetto.protos.JavaHprofConfigOuterClass.JavaHprofConfig other = (perfetto.protos.JavaHprofConfigOuterClass.JavaHprofConfig) obj;

      if (!getProcessCmdlineList()
          .equals(other.getProcessCmdlineList())) return false;
      if (!getPidList()
          .equals(other.getPidList())) return false;
      if (!getTargetInstalledByList()
          .equals(other.getTargetInstalledByList())) return false;
      if (hasContinuousDumpConfig() != other.hasContinuousDumpConfig()) return false;
      if (hasContinuousDumpConfig()) {
        if (!getContinuousDumpConfig()
            .equals(other.getContinuousDumpConfig())) return false;
      }
      if (hasMinAnonymousMemoryKb() != other.hasMinAnonymousMemoryKb()) return false;
      if (hasMinAnonymousMemoryKb()) {
        if (getMinAnonymousMemoryKb()
            != other.getMinAnonymousMemoryKb()) return false;
      }
      if (hasDumpSmaps() != other.hasDumpSmaps()) return false;
      if (hasDumpSmaps()) {
        if (getDumpSmaps()
            != other.getDumpSmaps()) return false;
      }
      if (!getIgnoredTypesList()
          .equals(other.getIgnoredTypesList())) return false;
      if (!getUnknownFields().equals(other.getUnknownFields())) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      if (getProcessCmdlineCount() > 0) {
        hash = (37 * hash) + PROCESS_CMDLINE_FIELD_NUMBER;
        hash = (53 * hash) + getProcessCmdlineList().hashCode();
      }
      if (getPidCount() > 0) {
        hash = (37 * hash) + PID_FIELD_NUMBER;
        hash = (53 * hash) + getPidList().hashCode();
      }
      if (getTargetInstalledByCount() > 0) {
        hash = (37 * hash) + TARGET_INSTALLED_BY_FIELD_NUMBER;
        hash = (53 * hash) + getTargetInstalledByList().hashCode();
      }
      if (hasContinuousDumpConfig()) {
        hash = (37 * hash) + CONTINUOUS_DUMP_CONFIG_FIELD_NUMBER;
        hash = (53 * hash) + getContinuousDumpConfig().hashCode();
      }
      if (hasMinAnonymousMemoryKb()) {
        hash = (37 * hash) + MIN_ANONYMOUS_MEMORY_KB_FIELD_NUMBER;
        hash = (53 * hash) + getMinAnonymousMemoryKb();
      }
      if (hasDumpSmaps()) {
        hash = (37 * hash) + DUMP_SMAPS_FIELD_NUMBER;
        hash = (53 * hash) + com.google.protobuf.Internal.hashBoolean(
            getDumpSmaps());
      }
      if (getIgnoredTypesCount() > 0) {
        hash = (37 * hash) + IGNORED_TYPES_FIELD_NUMBER;
        hash = (53 * hash) + getIgnoredTypesList().hashCode();
      }
      hash = (29 * hash) + getUnknownFields().hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static perfetto.protos.JavaHprofConfigOuterClass.JavaHprofConfig parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static perfetto.protos.JavaHprofConfigOuterClass.JavaHprofConfig parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static perfetto.protos.JavaHprofConfigOuterClass.JavaHprofConfig parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static perfetto.protos.JavaHprofConfigOuterClass.JavaHprofConfig parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static perfetto.protos.JavaHprofConfigOuterClass.JavaHprofConfig parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static perfetto.protos.JavaHprofConfigOuterClass.JavaHprofConfig parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static perfetto.protos.JavaHprofConfigOuterClass.JavaHprofConfig parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static perfetto.protos.JavaHprofConfigOuterClass.JavaHprofConfig parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static perfetto.protos.JavaHprofConfigOuterClass.JavaHprofConfig parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static perfetto.protos.JavaHprofConfigOuterClass.JavaHprofConfig parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static perfetto.protos.JavaHprofConfigOuterClass.JavaHprofConfig parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static perfetto.protos.JavaHprofConfigOuterClass.JavaHprofConfig parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(perfetto.protos.JavaHprofConfigOuterClass.JavaHprofConfig prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * <pre>
     * Configuration for managed app heap graph snapshots.
     * </pre>
     *
     * Protobuf type {@code perfetto.protos.JavaHprofConfig}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:perfetto.protos.JavaHprofConfig)
        perfetto.protos.JavaHprofConfigOuterClass.JavaHprofConfigOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return perfetto.protos.JavaHprofConfigOuterClass.internal_static_perfetto_protos_JavaHprofConfig_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return perfetto.protos.JavaHprofConfigOuterClass.internal_static_perfetto_protos_JavaHprofConfig_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                perfetto.protos.JavaHprofConfigOuterClass.JavaHprofConfig.class, perfetto.protos.JavaHprofConfigOuterClass.JavaHprofConfig.Builder.class);
      }

      // Construct using perfetto.protos.JavaHprofConfigOuterClass.JavaHprofConfig.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
          getContinuousDumpConfigFieldBuilder();
        }
      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        bitField0_ = 0;
        processCmdline_ = com.google.protobuf.LazyStringArrayList.EMPTY;
        bitField0_ = (bitField0_ & ~0x00000001);
        pid_ = emptyLongList();
        targetInstalledBy_ = com.google.protobuf.LazyStringArrayList.EMPTY;
        bitField0_ = (bitField0_ & ~0x00000004);
        continuousDumpConfig_ = null;
        if (continuousDumpConfigBuilder_ != null) {
          continuousDumpConfigBuilder_.dispose();
          continuousDumpConfigBuilder_ = null;
        }
        minAnonymousMemoryKb_ = 0;
        dumpSmaps_ = false;
        ignoredTypes_ = com.google.protobuf.LazyStringArrayList.EMPTY;
        bitField0_ = (bitField0_ & ~0x00000040);
        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return perfetto.protos.JavaHprofConfigOuterClass.internal_static_perfetto_protos_JavaHprofConfig_descriptor;
      }

      @java.lang.Override
      public perfetto.protos.JavaHprofConfigOuterClass.JavaHprofConfig getDefaultInstanceForType() {
        return perfetto.protos.JavaHprofConfigOuterClass.JavaHprofConfig.getDefaultInstance();
      }

      @java.lang.Override
      public perfetto.protos.JavaHprofConfigOuterClass.JavaHprofConfig build() {
        perfetto.protos.JavaHprofConfigOuterClass.JavaHprofConfig result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public perfetto.protos.JavaHprofConfigOuterClass.JavaHprofConfig buildPartial() {
        perfetto.protos.JavaHprofConfigOuterClass.JavaHprofConfig result = new perfetto.protos.JavaHprofConfigOuterClass.JavaHprofConfig(this);
        buildPartialRepeatedFields(result);
        if (bitField0_ != 0) { buildPartial0(result); }
        onBuilt();
        return result;
      }

      private void buildPartialRepeatedFields(perfetto.protos.JavaHprofConfigOuterClass.JavaHprofConfig result) {
        if (((bitField0_ & 0x00000001) != 0)) {
          processCmdline_ = processCmdline_.getUnmodifiableView();
          bitField0_ = (bitField0_ & ~0x00000001);
        }
        result.processCmdline_ = processCmdline_;
        if (((bitField0_ & 0x00000002) != 0)) {
          pid_.makeImmutable();
          bitField0_ = (bitField0_ & ~0x00000002);
        }
        result.pid_ = pid_;
        if (((bitField0_ & 0x00000004) != 0)) {
          targetInstalledBy_ = targetInstalledBy_.getUnmodifiableView();
          bitField0_ = (bitField0_ & ~0x00000004);
        }
        result.targetInstalledBy_ = targetInstalledBy_;
        if (((bitField0_ & 0x00000040) != 0)) {
          ignoredTypes_ = ignoredTypes_.getUnmodifiableView();
          bitField0_ = (bitField0_ & ~0x00000040);
        }
        result.ignoredTypes_ = ignoredTypes_;
      }

      private void buildPartial0(perfetto.protos.JavaHprofConfigOuterClass.JavaHprofConfig result) {
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000008) != 0)) {
          result.continuousDumpConfig_ = continuousDumpConfigBuilder_ == null
              ? continuousDumpConfig_
              : continuousDumpConfigBuilder_.build();
          to_bitField0_ |= 0x00000001;
        }
        if (((from_bitField0_ & 0x00000010) != 0)) {
          result.minAnonymousMemoryKb_ = minAnonymousMemoryKb_;
          to_bitField0_ |= 0x00000002;
        }
        if (((from_bitField0_ & 0x00000020) != 0)) {
          result.dumpSmaps_ = dumpSmaps_;
          to_bitField0_ |= 0x00000004;
        }
        result.bitField0_ |= to_bitField0_;
      }

      @java.lang.Override
      public Builder clone() {
        return super.clone();
      }
      @java.lang.Override
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.setField(field, value);
      }
      @java.lang.Override
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return super.clearField(field);
      }
      @java.lang.Override
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return super.clearOneof(oneof);
      }
      @java.lang.Override
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, java.lang.Object value) {
        return super.setRepeatedField(field, index, value);
      }
      @java.lang.Override
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.addRepeatedField(field, value);
      }
      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof perfetto.protos.JavaHprofConfigOuterClass.JavaHprofConfig) {
          return mergeFrom((perfetto.protos.JavaHprofConfigOuterClass.JavaHprofConfig)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(perfetto.protos.JavaHprofConfigOuterClass.JavaHprofConfig other) {
        if (other == perfetto.protos.JavaHprofConfigOuterClass.JavaHprofConfig.getDefaultInstance()) return this;
        if (!other.processCmdline_.isEmpty()) {
          if (processCmdline_.isEmpty()) {
            processCmdline_ = other.processCmdline_;
            bitField0_ = (bitField0_ & ~0x00000001);
          } else {
            ensureProcessCmdlineIsMutable();
            processCmdline_.addAll(other.processCmdline_);
          }
          onChanged();
        }
        if (!other.pid_.isEmpty()) {
          if (pid_.isEmpty()) {
            pid_ = other.pid_;
            bitField0_ = (bitField0_ & ~0x00000002);
          } else {
            ensurePidIsMutable();
            pid_.addAll(other.pid_);
          }
          onChanged();
        }
        if (!other.targetInstalledBy_.isEmpty()) {
          if (targetInstalledBy_.isEmpty()) {
            targetInstalledBy_ = other.targetInstalledBy_;
            bitField0_ = (bitField0_ & ~0x00000004);
          } else {
            ensureTargetInstalledByIsMutable();
            targetInstalledBy_.addAll(other.targetInstalledBy_);
          }
          onChanged();
        }
        if (other.hasContinuousDumpConfig()) {
          mergeContinuousDumpConfig(other.getContinuousDumpConfig());
        }
        if (other.hasMinAnonymousMemoryKb()) {
          setMinAnonymousMemoryKb(other.getMinAnonymousMemoryKb());
        }
        if (other.hasDumpSmaps()) {
          setDumpSmaps(other.getDumpSmaps());
        }
        if (!other.ignoredTypes_.isEmpty()) {
          if (ignoredTypes_.isEmpty()) {
            ignoredTypes_ = other.ignoredTypes_;
            bitField0_ = (bitField0_ & ~0x00000040);
          } else {
            ensureIgnoredTypesIsMutable();
            ignoredTypes_.addAll(other.ignoredTypes_);
          }
          onChanged();
        }
        this.mergeUnknownFields(other.getUnknownFields());
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        if (extensionRegistry == null) {
          throw new java.lang.NullPointerException();
        }
        try {
          boolean done = false;
          while (!done) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                done = true;
                break;
              case 10: {
                com.google.protobuf.ByteString bs = input.readBytes();
                ensureProcessCmdlineIsMutable();
                processCmdline_.add(bs);
                break;
              } // case 10
              case 16: {
                long v = input.readUInt64();
                ensurePidIsMutable();
                pid_.addLong(v);
                break;
              } // case 16
              case 18: {
                int length = input.readRawVarint32();
                int limit = input.pushLimit(length);
                ensurePidIsMutable();
                while (input.getBytesUntilLimit() > 0) {
                  pid_.addLong(input.readUInt64());
                }
                input.popLimit(limit);
                break;
              } // case 18
              case 26: {
                input.readMessage(
                    getContinuousDumpConfigFieldBuilder().getBuilder(),
                    extensionRegistry);
                bitField0_ |= 0x00000008;
                break;
              } // case 26
              case 32: {
                minAnonymousMemoryKb_ = input.readUInt32();
                bitField0_ |= 0x00000010;
                break;
              } // case 32
              case 40: {
                dumpSmaps_ = input.readBool();
                bitField0_ |= 0x00000020;
                break;
              } // case 40
              case 50: {
                com.google.protobuf.ByteString bs = input.readBytes();
                ensureIgnoredTypesIsMutable();
                ignoredTypes_.add(bs);
                break;
              } // case 50
              case 58: {
                com.google.protobuf.ByteString bs = input.readBytes();
                ensureTargetInstalledByIsMutable();
                targetInstalledBy_.add(bs);
                break;
              } // case 58
              default: {
                if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                  done = true; // was an endgroup tag
                }
                break;
              } // default:
            } // switch (tag)
          } // while (!done)
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.unwrapIOException();
        } finally {
          onChanged();
        } // finally
        return this;
      }
      private int bitField0_;

      private com.google.protobuf.LazyStringList processCmdline_ = com.google.protobuf.LazyStringArrayList.EMPTY;
      private void ensureProcessCmdlineIsMutable() {
        if (!((bitField0_ & 0x00000001) != 0)) {
          processCmdline_ = new com.google.protobuf.LazyStringArrayList(processCmdline_);
          bitField0_ |= 0x00000001;
         }
      }
      /**
       * <pre>
       * Command line allowlist, matched against the /proc/&lt;pid&gt;/cmdline (not the
       * comm string). The semantics of this field were changed since its original
       * introduction.
       * On Android T+ (13+), this field can specify a single wildcard (*), and
       * the profiler will attempt to match it in two possible ways:
       * * if the pattern starts with a '/', then it is matched against the first
       *   segment of the cmdline (i.e. argv0). For example "/bin/e*" would match
       *   "/bin/echo".
       * * otherwise the pattern is matched against the part of argv0
       *   corresponding to the binary name (this is unrelated to /proc/pid/exe).
       *   For example "echo" would match "/bin/echo".
       * On Android S (12) and below, both this pattern and /proc/pid/cmdline get
       * normalized prior to an exact string comparison. Normalization is as
       * follows: (1) trim everything beyond the first null or "&#64;" byte; (2) if
       * the string contains forward slashes, trim everything up to and including
       * the last one.
       * Implementation note: in either case, at most 511 characters of cmdline
       * are considered.
       * </pre>
       *
       * <code>repeated string process_cmdline = 1;</code>
       * @return A list containing the processCmdline.
       */
      public com.google.protobuf.ProtocolStringList
          getProcessCmdlineList() {
        return processCmdline_.getUnmodifiableView();
      }
      /**
       * <pre>
       * Command line allowlist, matched against the /proc/&lt;pid&gt;/cmdline (not the
       * comm string). The semantics of this field were changed since its original
       * introduction.
       * On Android T+ (13+), this field can specify a single wildcard (*), and
       * the profiler will attempt to match it in two possible ways:
       * * if the pattern starts with a '/', then it is matched against the first
       *   segment of the cmdline (i.e. argv0). For example "/bin/e*" would match
       *   "/bin/echo".
       * * otherwise the pattern is matched against the part of argv0
       *   corresponding to the binary name (this is unrelated to /proc/pid/exe).
       *   For example "echo" would match "/bin/echo".
       * On Android S (12) and below, both this pattern and /proc/pid/cmdline get
       * normalized prior to an exact string comparison. Normalization is as
       * follows: (1) trim everything beyond the first null or "&#64;" byte; (2) if
       * the string contains forward slashes, trim everything up to and including
       * the last one.
       * Implementation note: in either case, at most 511 characters of cmdline
       * are considered.
       * </pre>
       *
       * <code>repeated string process_cmdline = 1;</code>
       * @return The count of processCmdline.
       */
      public int getProcessCmdlineCount() {
        return processCmdline_.size();
      }
      /**
       * <pre>
       * Command line allowlist, matched against the /proc/&lt;pid&gt;/cmdline (not the
       * comm string). The semantics of this field were changed since its original
       * introduction.
       * On Android T+ (13+), this field can specify a single wildcard (*), and
       * the profiler will attempt to match it in two possible ways:
       * * if the pattern starts with a '/', then it is matched against the first
       *   segment of the cmdline (i.e. argv0). For example "/bin/e*" would match
       *   "/bin/echo".
       * * otherwise the pattern is matched against the part of argv0
       *   corresponding to the binary name (this is unrelated to /proc/pid/exe).
       *   For example "echo" would match "/bin/echo".
       * On Android S (12) and below, both this pattern and /proc/pid/cmdline get
       * normalized prior to an exact string comparison. Normalization is as
       * follows: (1) trim everything beyond the first null or "&#64;" byte; (2) if
       * the string contains forward slashes, trim everything up to and including
       * the last one.
       * Implementation note: in either case, at most 511 characters of cmdline
       * are considered.
       * </pre>
       *
       * <code>repeated string process_cmdline = 1;</code>
       * @param index The index of the element to return.
       * @return The processCmdline at the given index.
       */
      public java.lang.String getProcessCmdline(int index) {
        return processCmdline_.get(index);
      }
      /**
       * <pre>
       * Command line allowlist, matched against the /proc/&lt;pid&gt;/cmdline (not the
       * comm string). The semantics of this field were changed since its original
       * introduction.
       * On Android T+ (13+), this field can specify a single wildcard (*), and
       * the profiler will attempt to match it in two possible ways:
       * * if the pattern starts with a '/', then it is matched against the first
       *   segment of the cmdline (i.e. argv0). For example "/bin/e*" would match
       *   "/bin/echo".
       * * otherwise the pattern is matched against the part of argv0
       *   corresponding to the binary name (this is unrelated to /proc/pid/exe).
       *   For example "echo" would match "/bin/echo".
       * On Android S (12) and below, both this pattern and /proc/pid/cmdline get
       * normalized prior to an exact string comparison. Normalization is as
       * follows: (1) trim everything beyond the first null or "&#64;" byte; (2) if
       * the string contains forward slashes, trim everything up to and including
       * the last one.
       * Implementation note: in either case, at most 511 characters of cmdline
       * are considered.
       * </pre>
       *
       * <code>repeated string process_cmdline = 1;</code>
       * @param index The index of the value to return.
       * @return The bytes of the processCmdline at the given index.
       */
      public com.google.protobuf.ByteString
          getProcessCmdlineBytes(int index) {
        return processCmdline_.getByteString(index);
      }
      /**
       * <pre>
       * Command line allowlist, matched against the /proc/&lt;pid&gt;/cmdline (not the
       * comm string). The semantics of this field were changed since its original
       * introduction.
       * On Android T+ (13+), this field can specify a single wildcard (*), and
       * the profiler will attempt to match it in two possible ways:
       * * if the pattern starts with a '/', then it is matched against the first
       *   segment of the cmdline (i.e. argv0). For example "/bin/e*" would match
       *   "/bin/echo".
       * * otherwise the pattern is matched against the part of argv0
       *   corresponding to the binary name (this is unrelated to /proc/pid/exe).
       *   For example "echo" would match "/bin/echo".
       * On Android S (12) and below, both this pattern and /proc/pid/cmdline get
       * normalized prior to an exact string comparison. Normalization is as
       * follows: (1) trim everything beyond the first null or "&#64;" byte; (2) if
       * the string contains forward slashes, trim everything up to and including
       * the last one.
       * Implementation note: in either case, at most 511 characters of cmdline
       * are considered.
       * </pre>
       *
       * <code>repeated string process_cmdline = 1;</code>
       * @param index The index to set the value at.
       * @param value The processCmdline to set.
       * @return This builder for chaining.
       */
      public Builder setProcessCmdline(
          int index, java.lang.String value) {
        if (value == null) { throw new NullPointerException(); }
        ensureProcessCmdlineIsMutable();
        processCmdline_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Command line allowlist, matched against the /proc/&lt;pid&gt;/cmdline (not the
       * comm string). The semantics of this field were changed since its original
       * introduction.
       * On Android T+ (13+), this field can specify a single wildcard (*), and
       * the profiler will attempt to match it in two possible ways:
       * * if the pattern starts with a '/', then it is matched against the first
       *   segment of the cmdline (i.e. argv0). For example "/bin/e*" would match
       *   "/bin/echo".
       * * otherwise the pattern is matched against the part of argv0
       *   corresponding to the binary name (this is unrelated to /proc/pid/exe).
       *   For example "echo" would match "/bin/echo".
       * On Android S (12) and below, both this pattern and /proc/pid/cmdline get
       * normalized prior to an exact string comparison. Normalization is as
       * follows: (1) trim everything beyond the first null or "&#64;" byte; (2) if
       * the string contains forward slashes, trim everything up to and including
       * the last one.
       * Implementation note: in either case, at most 511 characters of cmdline
       * are considered.
       * </pre>
       *
       * <code>repeated string process_cmdline = 1;</code>
       * @param value The processCmdline to add.
       * @return This builder for chaining.
       */
      public Builder addProcessCmdline(
          java.lang.String value) {
        if (value == null) { throw new NullPointerException(); }
        ensureProcessCmdlineIsMutable();
        processCmdline_.add(value);
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Command line allowlist, matched against the /proc/&lt;pid&gt;/cmdline (not the
       * comm string). The semantics of this field were changed since its original
       * introduction.
       * On Android T+ (13+), this field can specify a single wildcard (*), and
       * the profiler will attempt to match it in two possible ways:
       * * if the pattern starts with a '/', then it is matched against the first
       *   segment of the cmdline (i.e. argv0). For example "/bin/e*" would match
       *   "/bin/echo".
       * * otherwise the pattern is matched against the part of argv0
       *   corresponding to the binary name (this is unrelated to /proc/pid/exe).
       *   For example "echo" would match "/bin/echo".
       * On Android S (12) and below, both this pattern and /proc/pid/cmdline get
       * normalized prior to an exact string comparison. Normalization is as
       * follows: (1) trim everything beyond the first null or "&#64;" byte; (2) if
       * the string contains forward slashes, trim everything up to and including
       * the last one.
       * Implementation note: in either case, at most 511 characters of cmdline
       * are considered.
       * </pre>
       *
       * <code>repeated string process_cmdline = 1;</code>
       * @param values The processCmdline to add.
       * @return This builder for chaining.
       */
      public Builder addAllProcessCmdline(
          java.lang.Iterable<java.lang.String> values) {
        ensureProcessCmdlineIsMutable();
        com.google.protobuf.AbstractMessageLite.Builder.addAll(
            values, processCmdline_);
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Command line allowlist, matched against the /proc/&lt;pid&gt;/cmdline (not the
       * comm string). The semantics of this field were changed since its original
       * introduction.
       * On Android T+ (13+), this field can specify a single wildcard (*), and
       * the profiler will attempt to match it in two possible ways:
       * * if the pattern starts with a '/', then it is matched against the first
       *   segment of the cmdline (i.e. argv0). For example "/bin/e*" would match
       *   "/bin/echo".
       * * otherwise the pattern is matched against the part of argv0
       *   corresponding to the binary name (this is unrelated to /proc/pid/exe).
       *   For example "echo" would match "/bin/echo".
       * On Android S (12) and below, both this pattern and /proc/pid/cmdline get
       * normalized prior to an exact string comparison. Normalization is as
       * follows: (1) trim everything beyond the first null or "&#64;" byte; (2) if
       * the string contains forward slashes, trim everything up to and including
       * the last one.
       * Implementation note: in either case, at most 511 characters of cmdline
       * are considered.
       * </pre>
       *
       * <code>repeated string process_cmdline = 1;</code>
       * @return This builder for chaining.
       */
      public Builder clearProcessCmdline() {
        processCmdline_ = com.google.protobuf.LazyStringArrayList.EMPTY;
        bitField0_ = (bitField0_ & ~0x00000001);
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Command line allowlist, matched against the /proc/&lt;pid&gt;/cmdline (not the
       * comm string). The semantics of this field were changed since its original
       * introduction.
       * On Android T+ (13+), this field can specify a single wildcard (*), and
       * the profiler will attempt to match it in two possible ways:
       * * if the pattern starts with a '/', then it is matched against the first
       *   segment of the cmdline (i.e. argv0). For example "/bin/e*" would match
       *   "/bin/echo".
       * * otherwise the pattern is matched against the part of argv0
       *   corresponding to the binary name (this is unrelated to /proc/pid/exe).
       *   For example "echo" would match "/bin/echo".
       * On Android S (12) and below, both this pattern and /proc/pid/cmdline get
       * normalized prior to an exact string comparison. Normalization is as
       * follows: (1) trim everything beyond the first null or "&#64;" byte; (2) if
       * the string contains forward slashes, trim everything up to and including
       * the last one.
       * Implementation note: in either case, at most 511 characters of cmdline
       * are considered.
       * </pre>
       *
       * <code>repeated string process_cmdline = 1;</code>
       * @param value The bytes of the processCmdline to add.
       * @return This builder for chaining.
       */
      public Builder addProcessCmdlineBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) { throw new NullPointerException(); }
        ensureProcessCmdlineIsMutable();
        processCmdline_.add(value);
        onChanged();
        return this;
      }

      private com.google.protobuf.Internal.LongList pid_ = emptyLongList();
      private void ensurePidIsMutable() {
        if (!((bitField0_ & 0x00000002) != 0)) {
          pid_ = mutableCopy(pid_);
          bitField0_ |= 0x00000002;
        }
      }
      /**
       * <pre>
       * For watermark based triggering or local debugging.
       * </pre>
       *
       * <code>repeated uint64 pid = 2;</code>
       * @return A list containing the pid.
       */
      public java.util.List<java.lang.Long>
          getPidList() {
        return ((bitField0_ & 0x00000002) != 0) ?
                 java.util.Collections.unmodifiableList(pid_) : pid_;
      }
      /**
       * <pre>
       * For watermark based triggering or local debugging.
       * </pre>
       *
       * <code>repeated uint64 pid = 2;</code>
       * @return The count of pid.
       */
      public int getPidCount() {
        return pid_.size();
      }
      /**
       * <pre>
       * For watermark based triggering or local debugging.
       * </pre>
       *
       * <code>repeated uint64 pid = 2;</code>
       * @param index The index of the element to return.
       * @return The pid at the given index.
       */
      public long getPid(int index) {
        return pid_.getLong(index);
      }
      /**
       * <pre>
       * For watermark based triggering or local debugging.
       * </pre>
       *
       * <code>repeated uint64 pid = 2;</code>
       * @param index The index to set the value at.
       * @param value The pid to set.
       * @return This builder for chaining.
       */
      public Builder setPid(
          int index, long value) {
        
        ensurePidIsMutable();
        pid_.setLong(index, value);
        onChanged();
        return this;
      }
      /**
       * <pre>
       * For watermark based triggering or local debugging.
       * </pre>
       *
       * <code>repeated uint64 pid = 2;</code>
       * @param value The pid to add.
       * @return This builder for chaining.
       */
      public Builder addPid(long value) {
        
        ensurePidIsMutable();
        pid_.addLong(value);
        onChanged();
        return this;
      }
      /**
       * <pre>
       * For watermark based triggering or local debugging.
       * </pre>
       *
       * <code>repeated uint64 pid = 2;</code>
       * @param values The pid to add.
       * @return This builder for chaining.
       */
      public Builder addAllPid(
          java.lang.Iterable<? extends java.lang.Long> values) {
        ensurePidIsMutable();
        com.google.protobuf.AbstractMessageLite.Builder.addAll(
            values, pid_);
        onChanged();
        return this;
      }
      /**
       * <pre>
       * For watermark based triggering or local debugging.
       * </pre>
       *
       * <code>repeated uint64 pid = 2;</code>
       * @return This builder for chaining.
       */
      public Builder clearPid() {
        pid_ = emptyLongList();
        bitField0_ = (bitField0_ & ~0x00000002);
        onChanged();
        return this;
      }

      private com.google.protobuf.LazyStringList targetInstalledBy_ = com.google.protobuf.LazyStringArrayList.EMPTY;
      private void ensureTargetInstalledByIsMutable() {
        if (!((bitField0_ & 0x00000004) != 0)) {
          targetInstalledBy_ = new com.google.protobuf.LazyStringArrayList(targetInstalledBy_);
          bitField0_ |= 0x00000004;
         }
      }
      /**
       * <pre>
       * Only profile target if it was installed by one of the packages given.
       * Special values are:
       * * &#64;system: installed on the system partition
       * * &#64;product: installed on the product partition
       * * &#64;null: sideloaded
       * Supported on Android 12+.
       * </pre>
       *
       * <code>repeated string target_installed_by = 7;</code>
       * @return A list containing the targetInstalledBy.
       */
      public com.google.protobuf.ProtocolStringList
          getTargetInstalledByList() {
        return targetInstalledBy_.getUnmodifiableView();
      }
      /**
       * <pre>
       * Only profile target if it was installed by one of the packages given.
       * Special values are:
       * * &#64;system: installed on the system partition
       * * &#64;product: installed on the product partition
       * * &#64;null: sideloaded
       * Supported on Android 12+.
       * </pre>
       *
       * <code>repeated string target_installed_by = 7;</code>
       * @return The count of targetInstalledBy.
       */
      public int getTargetInstalledByCount() {
        return targetInstalledBy_.size();
      }
      /**
       * <pre>
       * Only profile target if it was installed by one of the packages given.
       * Special values are:
       * * &#64;system: installed on the system partition
       * * &#64;product: installed on the product partition
       * * &#64;null: sideloaded
       * Supported on Android 12+.
       * </pre>
       *
       * <code>repeated string target_installed_by = 7;</code>
       * @param index The index of the element to return.
       * @return The targetInstalledBy at the given index.
       */
      public java.lang.String getTargetInstalledBy(int index) {
        return targetInstalledBy_.get(index);
      }
      /**
       * <pre>
       * Only profile target if it was installed by one of the packages given.
       * Special values are:
       * * &#64;system: installed on the system partition
       * * &#64;product: installed on the product partition
       * * &#64;null: sideloaded
       * Supported on Android 12+.
       * </pre>
       *
       * <code>repeated string target_installed_by = 7;</code>
       * @param index The index of the value to return.
       * @return The bytes of the targetInstalledBy at the given index.
       */
      public com.google.protobuf.ByteString
          getTargetInstalledByBytes(int index) {
        return targetInstalledBy_.getByteString(index);
      }
      /**
       * <pre>
       * Only profile target if it was installed by one of the packages given.
       * Special values are:
       * * &#64;system: installed on the system partition
       * * &#64;product: installed on the product partition
       * * &#64;null: sideloaded
       * Supported on Android 12+.
       * </pre>
       *
       * <code>repeated string target_installed_by = 7;</code>
       * @param index The index to set the value at.
       * @param value The targetInstalledBy to set.
       * @return This builder for chaining.
       */
      public Builder setTargetInstalledBy(
          int index, java.lang.String value) {
        if (value == null) { throw new NullPointerException(); }
        ensureTargetInstalledByIsMutable();
        targetInstalledBy_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Only profile target if it was installed by one of the packages given.
       * Special values are:
       * * &#64;system: installed on the system partition
       * * &#64;product: installed on the product partition
       * * &#64;null: sideloaded
       * Supported on Android 12+.
       * </pre>
       *
       * <code>repeated string target_installed_by = 7;</code>
       * @param value The targetInstalledBy to add.
       * @return This builder for chaining.
       */
      public Builder addTargetInstalledBy(
          java.lang.String value) {
        if (value == null) { throw new NullPointerException(); }
        ensureTargetInstalledByIsMutable();
        targetInstalledBy_.add(value);
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Only profile target if it was installed by one of the packages given.
       * Special values are:
       * * &#64;system: installed on the system partition
       * * &#64;product: installed on the product partition
       * * &#64;null: sideloaded
       * Supported on Android 12+.
       * </pre>
       *
       * <code>repeated string target_installed_by = 7;</code>
       * @param values The targetInstalledBy to add.
       * @return This builder for chaining.
       */
      public Builder addAllTargetInstalledBy(
          java.lang.Iterable<java.lang.String> values) {
        ensureTargetInstalledByIsMutable();
        com.google.protobuf.AbstractMessageLite.Builder.addAll(
            values, targetInstalledBy_);
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Only profile target if it was installed by one of the packages given.
       * Special values are:
       * * &#64;system: installed on the system partition
       * * &#64;product: installed on the product partition
       * * &#64;null: sideloaded
       * Supported on Android 12+.
       * </pre>
       *
       * <code>repeated string target_installed_by = 7;</code>
       * @return This builder for chaining.
       */
      public Builder clearTargetInstalledBy() {
        targetInstalledBy_ = com.google.protobuf.LazyStringArrayList.EMPTY;
        bitField0_ = (bitField0_ & ~0x00000004);
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Only profile target if it was installed by one of the packages given.
       * Special values are:
       * * &#64;system: installed on the system partition
       * * &#64;product: installed on the product partition
       * * &#64;null: sideloaded
       * Supported on Android 12+.
       * </pre>
       *
       * <code>repeated string target_installed_by = 7;</code>
       * @param value The bytes of the targetInstalledBy to add.
       * @return This builder for chaining.
       */
      public Builder addTargetInstalledByBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) { throw new NullPointerException(); }
        ensureTargetInstalledByIsMutable();
        targetInstalledBy_.add(value);
        onChanged();
        return this;
      }

      private perfetto.protos.JavaHprofConfigOuterClass.JavaHprofConfig.ContinuousDumpConfig continuousDumpConfig_;
      private com.google.protobuf.SingleFieldBuilderV3<
          perfetto.protos.JavaHprofConfigOuterClass.JavaHprofConfig.ContinuousDumpConfig, perfetto.protos.JavaHprofConfigOuterClass.JavaHprofConfig.ContinuousDumpConfig.Builder, perfetto.protos.JavaHprofConfigOuterClass.JavaHprofConfig.ContinuousDumpConfigOrBuilder> continuousDumpConfigBuilder_;
      /**
       * <pre>
       * Dump at a predefined interval.
       * </pre>
       *
       * <code>optional .perfetto.protos.JavaHprofConfig.ContinuousDumpConfig continuous_dump_config = 3;</code>
       * @return Whether the continuousDumpConfig field is set.
       */
      public boolean hasContinuousDumpConfig() {
        return ((bitField0_ & 0x00000008) != 0);
      }
      /**
       * <pre>
       * Dump at a predefined interval.
       * </pre>
       *
       * <code>optional .perfetto.protos.JavaHprofConfig.ContinuousDumpConfig continuous_dump_config = 3;</code>
       * @return The continuousDumpConfig.
       */
      public perfetto.protos.JavaHprofConfigOuterClass.JavaHprofConfig.ContinuousDumpConfig getContinuousDumpConfig() {
        if (continuousDumpConfigBuilder_ == null) {
          return continuousDumpConfig_ == null ? perfetto.protos.JavaHprofConfigOuterClass.JavaHprofConfig.ContinuousDumpConfig.getDefaultInstance() : continuousDumpConfig_;
        } else {
          return continuousDumpConfigBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       * Dump at a predefined interval.
       * </pre>
       *
       * <code>optional .perfetto.protos.JavaHprofConfig.ContinuousDumpConfig continuous_dump_config = 3;</code>
       */
      public Builder setContinuousDumpConfig(perfetto.protos.JavaHprofConfigOuterClass.JavaHprofConfig.ContinuousDumpConfig value) {
        if (continuousDumpConfigBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          continuousDumpConfig_ = value;
        } else {
          continuousDumpConfigBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000008;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Dump at a predefined interval.
       * </pre>
       *
       * <code>optional .perfetto.protos.JavaHprofConfig.ContinuousDumpConfig continuous_dump_config = 3;</code>
       */
      public Builder setContinuousDumpConfig(
          perfetto.protos.JavaHprofConfigOuterClass.JavaHprofConfig.ContinuousDumpConfig.Builder builderForValue) {
        if (continuousDumpConfigBuilder_ == null) {
          continuousDumpConfig_ = builderForValue.build();
        } else {
          continuousDumpConfigBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000008;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Dump at a predefined interval.
       * </pre>
       *
       * <code>optional .perfetto.protos.JavaHprofConfig.ContinuousDumpConfig continuous_dump_config = 3;</code>
       */
      public Builder mergeContinuousDumpConfig(perfetto.protos.JavaHprofConfigOuterClass.JavaHprofConfig.ContinuousDumpConfig value) {
        if (continuousDumpConfigBuilder_ == null) {
          if (((bitField0_ & 0x00000008) != 0) &&
            continuousDumpConfig_ != null &&
            continuousDumpConfig_ != perfetto.protos.JavaHprofConfigOuterClass.JavaHprofConfig.ContinuousDumpConfig.getDefaultInstance()) {
            getContinuousDumpConfigBuilder().mergeFrom(value);
          } else {
            continuousDumpConfig_ = value;
          }
        } else {
          continuousDumpConfigBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00000008;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Dump at a predefined interval.
       * </pre>
       *
       * <code>optional .perfetto.protos.JavaHprofConfig.ContinuousDumpConfig continuous_dump_config = 3;</code>
       */
      public Builder clearContinuousDumpConfig() {
        bitField0_ = (bitField0_ & ~0x00000008);
        continuousDumpConfig_ = null;
        if (continuousDumpConfigBuilder_ != null) {
          continuousDumpConfigBuilder_.dispose();
          continuousDumpConfigBuilder_ = null;
        }
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Dump at a predefined interval.
       * </pre>
       *
       * <code>optional .perfetto.protos.JavaHprofConfig.ContinuousDumpConfig continuous_dump_config = 3;</code>
       */
      public perfetto.protos.JavaHprofConfigOuterClass.JavaHprofConfig.ContinuousDumpConfig.Builder getContinuousDumpConfigBuilder() {
        bitField0_ |= 0x00000008;
        onChanged();
        return getContinuousDumpConfigFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       * Dump at a predefined interval.
       * </pre>
       *
       * <code>optional .perfetto.protos.JavaHprofConfig.ContinuousDumpConfig continuous_dump_config = 3;</code>
       */
      public perfetto.protos.JavaHprofConfigOuterClass.JavaHprofConfig.ContinuousDumpConfigOrBuilder getContinuousDumpConfigOrBuilder() {
        if (continuousDumpConfigBuilder_ != null) {
          return continuousDumpConfigBuilder_.getMessageOrBuilder();
        } else {
          return continuousDumpConfig_ == null ?
              perfetto.protos.JavaHprofConfigOuterClass.JavaHprofConfig.ContinuousDumpConfig.getDefaultInstance() : continuousDumpConfig_;
        }
      }
      /**
       * <pre>
       * Dump at a predefined interval.
       * </pre>
       *
       * <code>optional .perfetto.protos.JavaHprofConfig.ContinuousDumpConfig continuous_dump_config = 3;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          perfetto.protos.JavaHprofConfigOuterClass.JavaHprofConfig.ContinuousDumpConfig, perfetto.protos.JavaHprofConfigOuterClass.JavaHprofConfig.ContinuousDumpConfig.Builder, perfetto.protos.JavaHprofConfigOuterClass.JavaHprofConfig.ContinuousDumpConfigOrBuilder> 
          getContinuousDumpConfigFieldBuilder() {
        if (continuousDumpConfigBuilder_ == null) {
          continuousDumpConfigBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              perfetto.protos.JavaHprofConfigOuterClass.JavaHprofConfig.ContinuousDumpConfig, perfetto.protos.JavaHprofConfigOuterClass.JavaHprofConfig.ContinuousDumpConfig.Builder, perfetto.protos.JavaHprofConfigOuterClass.JavaHprofConfig.ContinuousDumpConfigOrBuilder>(
                  getContinuousDumpConfig(),
                  getParentForChildren(),
                  isClean());
          continuousDumpConfig_ = null;
        }
        return continuousDumpConfigBuilder_;
      }

      private int minAnonymousMemoryKb_ ;
      /**
       * <pre>
       * Do not profile processes whose anon RSS + swap &lt; given value.
       * </pre>
       *
       * <code>optional uint32 min_anonymous_memory_kb = 4;</code>
       * @return Whether the minAnonymousMemoryKb field is set.
       */
      @java.lang.Override
      public boolean hasMinAnonymousMemoryKb() {
        return ((bitField0_ & 0x00000010) != 0);
      }
      /**
       * <pre>
       * Do not profile processes whose anon RSS + swap &lt; given value.
       * </pre>
       *
       * <code>optional uint32 min_anonymous_memory_kb = 4;</code>
       * @return The minAnonymousMemoryKb.
       */
      @java.lang.Override
      public int getMinAnonymousMemoryKb() {
        return minAnonymousMemoryKb_;
      }
      /**
       * <pre>
       * Do not profile processes whose anon RSS + swap &lt; given value.
       * </pre>
       *
       * <code>optional uint32 min_anonymous_memory_kb = 4;</code>
       * @param value The minAnonymousMemoryKb to set.
       * @return This builder for chaining.
       */
      public Builder setMinAnonymousMemoryKb(int value) {
        
        minAnonymousMemoryKb_ = value;
        bitField0_ |= 0x00000010;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Do not profile processes whose anon RSS + swap &lt; given value.
       * </pre>
       *
       * <code>optional uint32 min_anonymous_memory_kb = 4;</code>
       * @return This builder for chaining.
       */
      public Builder clearMinAnonymousMemoryKb() {
        bitField0_ = (bitField0_ & ~0x00000010);
        minAnonymousMemoryKb_ = 0;
        onChanged();
        return this;
      }

      private boolean dumpSmaps_ ;
      /**
       * <pre>
       * Include the process' /proc/self/smaps.
       * This only shows maps that:
       * * start with /system
       * * start with /vendor
       * * start with /data/app
       * * contain "extracted in memory from Y", where Y matches any of the above
       * </pre>
       *
       * <code>optional bool dump_smaps = 5;</code>
       * @return Whether the dumpSmaps field is set.
       */
      @java.lang.Override
      public boolean hasDumpSmaps() {
        return ((bitField0_ & 0x00000020) != 0);
      }
      /**
       * <pre>
       * Include the process' /proc/self/smaps.
       * This only shows maps that:
       * * start with /system
       * * start with /vendor
       * * start with /data/app
       * * contain "extracted in memory from Y", where Y matches any of the above
       * </pre>
       *
       * <code>optional bool dump_smaps = 5;</code>
       * @return The dumpSmaps.
       */
      @java.lang.Override
      public boolean getDumpSmaps() {
        return dumpSmaps_;
      }
      /**
       * <pre>
       * Include the process' /proc/self/smaps.
       * This only shows maps that:
       * * start with /system
       * * start with /vendor
       * * start with /data/app
       * * contain "extracted in memory from Y", where Y matches any of the above
       * </pre>
       *
       * <code>optional bool dump_smaps = 5;</code>
       * @param value The dumpSmaps to set.
       * @return This builder for chaining.
       */
      public Builder setDumpSmaps(boolean value) {
        
        dumpSmaps_ = value;
        bitField0_ |= 0x00000020;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Include the process' /proc/self/smaps.
       * This only shows maps that:
       * * start with /system
       * * start with /vendor
       * * start with /data/app
       * * contain "extracted in memory from Y", where Y matches any of the above
       * </pre>
       *
       * <code>optional bool dump_smaps = 5;</code>
       * @return This builder for chaining.
       */
      public Builder clearDumpSmaps() {
        bitField0_ = (bitField0_ & ~0x00000020);
        dumpSmaps_ = false;
        onChanged();
        return this;
      }

      private com.google.protobuf.LazyStringList ignoredTypes_ = com.google.protobuf.LazyStringArrayList.EMPTY;
      private void ensureIgnoredTypesIsMutable() {
        if (!((bitField0_ & 0x00000040) != 0)) {
          ignoredTypes_ = new com.google.protobuf.LazyStringArrayList(ignoredTypes_);
          bitField0_ |= 0x00000040;
         }
      }
      /**
       * <pre>
       * Exclude objects of the following types from the profile. This can be
       * useful if lots of uninteresting objects, e.g. "sun.misc.Cleaner".
       * </pre>
       *
       * <code>repeated string ignored_types = 6;</code>
       * @return A list containing the ignoredTypes.
       */
      public com.google.protobuf.ProtocolStringList
          getIgnoredTypesList() {
        return ignoredTypes_.getUnmodifiableView();
      }
      /**
       * <pre>
       * Exclude objects of the following types from the profile. This can be
       * useful if lots of uninteresting objects, e.g. "sun.misc.Cleaner".
       * </pre>
       *
       * <code>repeated string ignored_types = 6;</code>
       * @return The count of ignoredTypes.
       */
      public int getIgnoredTypesCount() {
        return ignoredTypes_.size();
      }
      /**
       * <pre>
       * Exclude objects of the following types from the profile. This can be
       * useful if lots of uninteresting objects, e.g. "sun.misc.Cleaner".
       * </pre>
       *
       * <code>repeated string ignored_types = 6;</code>
       * @param index The index of the element to return.
       * @return The ignoredTypes at the given index.
       */
      public java.lang.String getIgnoredTypes(int index) {
        return ignoredTypes_.get(index);
      }
      /**
       * <pre>
       * Exclude objects of the following types from the profile. This can be
       * useful if lots of uninteresting objects, e.g. "sun.misc.Cleaner".
       * </pre>
       *
       * <code>repeated string ignored_types = 6;</code>
       * @param index The index of the value to return.
       * @return The bytes of the ignoredTypes at the given index.
       */
      public com.google.protobuf.ByteString
          getIgnoredTypesBytes(int index) {
        return ignoredTypes_.getByteString(index);
      }
      /**
       * <pre>
       * Exclude objects of the following types from the profile. This can be
       * useful if lots of uninteresting objects, e.g. "sun.misc.Cleaner".
       * </pre>
       *
       * <code>repeated string ignored_types = 6;</code>
       * @param index The index to set the value at.
       * @param value The ignoredTypes to set.
       * @return This builder for chaining.
       */
      public Builder setIgnoredTypes(
          int index, java.lang.String value) {
        if (value == null) { throw new NullPointerException(); }
        ensureIgnoredTypesIsMutable();
        ignoredTypes_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Exclude objects of the following types from the profile. This can be
       * useful if lots of uninteresting objects, e.g. "sun.misc.Cleaner".
       * </pre>
       *
       * <code>repeated string ignored_types = 6;</code>
       * @param value The ignoredTypes to add.
       * @return This builder for chaining.
       */
      public Builder addIgnoredTypes(
          java.lang.String value) {
        if (value == null) { throw new NullPointerException(); }
        ensureIgnoredTypesIsMutable();
        ignoredTypes_.add(value);
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Exclude objects of the following types from the profile. This can be
       * useful if lots of uninteresting objects, e.g. "sun.misc.Cleaner".
       * </pre>
       *
       * <code>repeated string ignored_types = 6;</code>
       * @param values The ignoredTypes to add.
       * @return This builder for chaining.
       */
      public Builder addAllIgnoredTypes(
          java.lang.Iterable<java.lang.String> values) {
        ensureIgnoredTypesIsMutable();
        com.google.protobuf.AbstractMessageLite.Builder.addAll(
            values, ignoredTypes_);
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Exclude objects of the following types from the profile. This can be
       * useful if lots of uninteresting objects, e.g. "sun.misc.Cleaner".
       * </pre>
       *
       * <code>repeated string ignored_types = 6;</code>
       * @return This builder for chaining.
       */
      public Builder clearIgnoredTypes() {
        ignoredTypes_ = com.google.protobuf.LazyStringArrayList.EMPTY;
        bitField0_ = (bitField0_ & ~0x00000040);
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Exclude objects of the following types from the profile. This can be
       * useful if lots of uninteresting objects, e.g. "sun.misc.Cleaner".
       * </pre>
       *
       * <code>repeated string ignored_types = 6;</code>
       * @param value The bytes of the ignoredTypes to add.
       * @return This builder for chaining.
       */
      public Builder addIgnoredTypesBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) { throw new NullPointerException(); }
        ensureIgnoredTypesIsMutable();
        ignoredTypes_.add(value);
        onChanged();
        return this;
      }
      @java.lang.Override
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      @java.lang.Override
      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:perfetto.protos.JavaHprofConfig)
    }

    // @@protoc_insertion_point(class_scope:perfetto.protos.JavaHprofConfig)
    private static final perfetto.protos.JavaHprofConfigOuterClass.JavaHprofConfig DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new perfetto.protos.JavaHprofConfigOuterClass.JavaHprofConfig();
    }

    public static perfetto.protos.JavaHprofConfigOuterClass.JavaHprofConfig getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    @java.lang.Deprecated public static final com.google.protobuf.Parser<JavaHprofConfig>
        PARSER = new com.google.protobuf.AbstractParser<JavaHprofConfig>() {
      @java.lang.Override
      public JavaHprofConfig parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        Builder builder = newBuilder();
        try {
          builder.mergeFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.setUnfinishedMessage(builder.buildPartial());
        } catch (com.google.protobuf.UninitializedMessageException e) {
          throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
        } catch (java.io.IOException e) {
          throw new com.google.protobuf.InvalidProtocolBufferException(e)
              .setUnfinishedMessage(builder.buildPartial());
        }
        return builder.buildPartial();
      }
    };

    public static com.google.protobuf.Parser<JavaHprofConfig> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<JavaHprofConfig> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public perfetto.protos.JavaHprofConfigOuterClass.JavaHprofConfig getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_perfetto_protos_JavaHprofConfig_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_perfetto_protos_JavaHprofConfig_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_perfetto_protos_JavaHprofConfig_ContinuousDumpConfig_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_perfetto_protos_JavaHprofConfig_ContinuousDumpConfig_fieldAccessorTable;

  public static com.google.protobuf.Descriptors.FileDescriptor
      getDescriptor() {
    return descriptor;
  }
  private static  com.google.protobuf.Descriptors.FileDescriptor
      descriptor;
  static {
    java.lang.String[] descriptorData = {
      "\n8protos/perfetto/config/profiling/java_" +
      "hprof_config.proto\022\017perfetto.protos\"\341\002\n\017" +
      "JavaHprofConfig\022\027\n\017process_cmdline\030\001 \003(\t" +
      "\022\013\n\003pid\030\002 \003(\004\022\033\n\023target_installed_by\030\007 \003" +
      "(\t\022U\n\026continuous_dump_config\030\003 \001(\01325.per" +
      "fetto.protos.JavaHprofConfig.ContinuousD" +
      "umpConfig\022\037\n\027min_anonymous_memory_kb\030\004 \001" +
      "(\r\022\022\n\ndump_smaps\030\005 \001(\010\022\025\n\rignored_types\030" +
      "\006 \003(\t\032h\n\024ContinuousDumpConfig\022\025\n\rdump_ph" +
      "ase_ms\030\001 \001(\r\022\030\n\020dump_interval_ms\030\002 \001(\r\022\037" +
      "\n\027scan_pids_only_on_start\030\003 \001(\010"
    };
    descriptor = com.google.protobuf.Descriptors.FileDescriptor
      .internalBuildGeneratedFileFrom(descriptorData,
        new com.google.protobuf.Descriptors.FileDescriptor[] {
        });
    internal_static_perfetto_protos_JavaHprofConfig_descriptor =
      getDescriptor().getMessageTypes().get(0);
    internal_static_perfetto_protos_JavaHprofConfig_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_perfetto_protos_JavaHprofConfig_descriptor,
        new java.lang.String[] { "ProcessCmdline", "Pid", "TargetInstalledBy", "ContinuousDumpConfig", "MinAnonymousMemoryKb", "DumpSmaps", "IgnoredTypes", });
    internal_static_perfetto_protos_JavaHprofConfig_ContinuousDumpConfig_descriptor =
      internal_static_perfetto_protos_JavaHprofConfig_descriptor.getNestedTypes().get(0);
    internal_static_perfetto_protos_JavaHprofConfig_ContinuousDumpConfig_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_perfetto_protos_JavaHprofConfig_ContinuousDumpConfig_descriptor,
        new java.lang.String[] { "DumpPhaseMs", "DumpIntervalMs", "ScanPidsOnlyOnStart", });
  }

  // @@protoc_insertion_point(outer_class_scope)
}
