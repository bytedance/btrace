// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: protos/perfetto/config/profiling/heapprofd_config.proto

package perfetto.protos;

public final class HeapprofdConfigOuterClass {
  private HeapprofdConfigOuterClass() {}
  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistryLite registry) {
  }

  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistry registry) {
    registerAllExtensions(
        (com.google.protobuf.ExtensionRegistryLite) registry);
  }
  public interface HeapprofdConfigOrBuilder extends
      // @@protoc_insertion_point(interface_extends:perfetto.protos.HeapprofdConfig)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <pre>
     * Sampling rate for all heaps not specified via heap_sampling_intervals.
     * These are:
     * * All heaps if heap_sampling_intervals is empty.
     * * Those profiled due to all_heaps and not named in heaps if
     *   heap_sampling_intervals is not empty.
     * * The implicit libc.malloc heap if heaps is empty.
     * Set to 1 for perfect accuracy.
     * Otherwise, sample every sample_interval_bytes on average.
     * See
     * https://perfetto.dev/docs/data-sources/native-heap-profiler#sampling-interval
     * for more details.
     * BUGS
     * Before Android 12, setting this to 0 would crash the target process.
     * N.B. This must be explicitly set to a non-zero value for all heaps (with
     * this field or with heap_sampling_intervals), otherwise the producer will
     * not start.
     * </pre>
     *
     * <code>optional uint64 sampling_interval_bytes = 1;</code>
     * @return Whether the samplingIntervalBytes field is set.
     */
    boolean hasSamplingIntervalBytes();
    /**
     * <pre>
     * Sampling rate for all heaps not specified via heap_sampling_intervals.
     * These are:
     * * All heaps if heap_sampling_intervals is empty.
     * * Those profiled due to all_heaps and not named in heaps if
     *   heap_sampling_intervals is not empty.
     * * The implicit libc.malloc heap if heaps is empty.
     * Set to 1 for perfect accuracy.
     * Otherwise, sample every sample_interval_bytes on average.
     * See
     * https://perfetto.dev/docs/data-sources/native-heap-profiler#sampling-interval
     * for more details.
     * BUGS
     * Before Android 12, setting this to 0 would crash the target process.
     * N.B. This must be explicitly set to a non-zero value for all heaps (with
     * this field or with heap_sampling_intervals), otherwise the producer will
     * not start.
     * </pre>
     *
     * <code>optional uint64 sampling_interval_bytes = 1;</code>
     * @return The samplingIntervalBytes.
     */
    long getSamplingIntervalBytes();

    /**
     * <pre>
     * If less than the given numbers of bytes are left free in the shared
     * memory buffer, increase sampling interval by a factor of two.
     * Adaptive sampling is disabled when set to 0.
     * </pre>
     *
     * <code>optional uint64 adaptive_sampling_shmem_threshold = 24;</code>
     * @return Whether the adaptiveSamplingShmemThreshold field is set.
     */
    boolean hasAdaptiveSamplingShmemThreshold();
    /**
     * <pre>
     * If less than the given numbers of bytes are left free in the shared
     * memory buffer, increase sampling interval by a factor of two.
     * Adaptive sampling is disabled when set to 0.
     * </pre>
     *
     * <code>optional uint64 adaptive_sampling_shmem_threshold = 24;</code>
     * @return The adaptiveSamplingShmemThreshold.
     */
    long getAdaptiveSamplingShmemThreshold();

    /**
     * <pre>
     * Stop doubling the sampling_interval once the sampling interval has reached
     * this value.
     * </pre>
     *
     * <code>optional uint64 adaptive_sampling_max_sampling_interval_bytes = 25;</code>
     * @return Whether the adaptiveSamplingMaxSamplingIntervalBytes field is set.
     */
    boolean hasAdaptiveSamplingMaxSamplingIntervalBytes();
    /**
     * <pre>
     * Stop doubling the sampling_interval once the sampling interval has reached
     * this value.
     * </pre>
     *
     * <code>optional uint64 adaptive_sampling_max_sampling_interval_bytes = 25;</code>
     * @return The adaptiveSamplingMaxSamplingIntervalBytes.
     */
    long getAdaptiveSamplingMaxSamplingIntervalBytes();

    /**
     * <pre>
     * E.g. surfaceflinger, com.android.phone
     * This input is normalized in the following way: if it contains slashes,
     * everything up to the last slash is discarded. If it contains "&#64;",
     * everything after the first &#64; is discared.
     * E.g. /system/bin/surfaceflinger&#64;1.0 normalizes to surfaceflinger.
     * This transformation is also applied to the processes' command lines when
     * matching.
     * </pre>
     *
     * <code>repeated string process_cmdline = 2;</code>
     * @return A list containing the processCmdline.
     */
    java.util.List<java.lang.String>
        getProcessCmdlineList();
    /**
     * <pre>
     * E.g. surfaceflinger, com.android.phone
     * This input is normalized in the following way: if it contains slashes,
     * everything up to the last slash is discarded. If it contains "&#64;",
     * everything after the first &#64; is discared.
     * E.g. /system/bin/surfaceflinger&#64;1.0 normalizes to surfaceflinger.
     * This transformation is also applied to the processes' command lines when
     * matching.
     * </pre>
     *
     * <code>repeated string process_cmdline = 2;</code>
     * @return The count of processCmdline.
     */
    int getProcessCmdlineCount();
    /**
     * <pre>
     * E.g. surfaceflinger, com.android.phone
     * This input is normalized in the following way: if it contains slashes,
     * everything up to the last slash is discarded. If it contains "&#64;",
     * everything after the first &#64; is discared.
     * E.g. /system/bin/surfaceflinger&#64;1.0 normalizes to surfaceflinger.
     * This transformation is also applied to the processes' command lines when
     * matching.
     * </pre>
     *
     * <code>repeated string process_cmdline = 2;</code>
     * @param index The index of the element to return.
     * @return The processCmdline at the given index.
     */
    java.lang.String getProcessCmdline(int index);
    /**
     * <pre>
     * E.g. surfaceflinger, com.android.phone
     * This input is normalized in the following way: if it contains slashes,
     * everything up to the last slash is discarded. If it contains "&#64;",
     * everything after the first &#64; is discared.
     * E.g. /system/bin/surfaceflinger&#64;1.0 normalizes to surfaceflinger.
     * This transformation is also applied to the processes' command lines when
     * matching.
     * </pre>
     *
     * <code>repeated string process_cmdline = 2;</code>
     * @param index The index of the value to return.
     * @return The bytes of the processCmdline at the given index.
     */
    com.google.protobuf.ByteString
        getProcessCmdlineBytes(int index);

    /**
     * <pre>
     * For watermark based triggering or local debugging.
     * </pre>
     *
     * <code>repeated uint64 pid = 4;</code>
     * @return A list containing the pid.
     */
    java.util.List<java.lang.Long> getPidList();
    /**
     * <pre>
     * For watermark based triggering or local debugging.
     * </pre>
     *
     * <code>repeated uint64 pid = 4;</code>
     * @return The count of pid.
     */
    int getPidCount();
    /**
     * <pre>
     * For watermark based triggering or local debugging.
     * </pre>
     *
     * <code>repeated uint64 pid = 4;</code>
     * @param index The index of the element to return.
     * @return The pid at the given index.
     */
    long getPid(int index);

    /**
     * <pre>
     * Only profile target if it was installed by one of the packages given.
     * Special values are:
     * * &#64;system: installed on the system partition
     * * &#64;product: installed on the product partition
     * * &#64;null: sideloaded
     * Supported on Android 12+.
     * </pre>
     *
     * <code>repeated string target_installed_by = 26;</code>
     * @return A list containing the targetInstalledBy.
     */
    java.util.List<java.lang.String>
        getTargetInstalledByList();
    /**
     * <pre>
     * Only profile target if it was installed by one of the packages given.
     * Special values are:
     * * &#64;system: installed on the system partition
     * * &#64;product: installed on the product partition
     * * &#64;null: sideloaded
     * Supported on Android 12+.
     * </pre>
     *
     * <code>repeated string target_installed_by = 26;</code>
     * @return The count of targetInstalledBy.
     */
    int getTargetInstalledByCount();
    /**
     * <pre>
     * Only profile target if it was installed by one of the packages given.
     * Special values are:
     * * &#64;system: installed on the system partition
     * * &#64;product: installed on the product partition
     * * &#64;null: sideloaded
     * Supported on Android 12+.
     * </pre>
     *
     * <code>repeated string target_installed_by = 26;</code>
     * @param index The index of the element to return.
     * @return The targetInstalledBy at the given index.
     */
    java.lang.String getTargetInstalledBy(int index);
    /**
     * <pre>
     * Only profile target if it was installed by one of the packages given.
     * Special values are:
     * * &#64;system: installed on the system partition
     * * &#64;product: installed on the product partition
     * * &#64;null: sideloaded
     * Supported on Android 12+.
     * </pre>
     *
     * <code>repeated string target_installed_by = 26;</code>
     * @param index The index of the value to return.
     * @return The bytes of the targetInstalledBy at the given index.
     */
    com.google.protobuf.ByteString
        getTargetInstalledByBytes(int index);

    /**
     * <pre>
     * Which heaps to sample, e.g. "libc.malloc". If left empty, only samples
     * "malloc".
     * Introduced in Android 12.
     * </pre>
     *
     * <code>repeated string heaps = 20;</code>
     * @return A list containing the heaps.
     */
    java.util.List<java.lang.String>
        getHeapsList();
    /**
     * <pre>
     * Which heaps to sample, e.g. "libc.malloc". If left empty, only samples
     * "malloc".
     * Introduced in Android 12.
     * </pre>
     *
     * <code>repeated string heaps = 20;</code>
     * @return The count of heaps.
     */
    int getHeapsCount();
    /**
     * <pre>
     * Which heaps to sample, e.g. "libc.malloc". If left empty, only samples
     * "malloc".
     * Introduced in Android 12.
     * </pre>
     *
     * <code>repeated string heaps = 20;</code>
     * @param index The index of the element to return.
     * @return The heaps at the given index.
     */
    java.lang.String getHeaps(int index);
    /**
     * <pre>
     * Which heaps to sample, e.g. "libc.malloc". If left empty, only samples
     * "malloc".
     * Introduced in Android 12.
     * </pre>
     *
     * <code>repeated string heaps = 20;</code>
     * @param index The index of the value to return.
     * @return The bytes of the heaps at the given index.
     */
    com.google.protobuf.ByteString
        getHeapsBytes(int index);

    /**
     * <pre>
     * Which heaps not to sample, e.g. "libc.malloc". This is useful when used in
     * combination with all_heaps;
     * Introduced in Android 12.
     * </pre>
     *
     * <code>repeated string exclude_heaps = 27;</code>
     * @return A list containing the excludeHeaps.
     */
    java.util.List<java.lang.String>
        getExcludeHeapsList();
    /**
     * <pre>
     * Which heaps not to sample, e.g. "libc.malloc". This is useful when used in
     * combination with all_heaps;
     * Introduced in Android 12.
     * </pre>
     *
     * <code>repeated string exclude_heaps = 27;</code>
     * @return The count of excludeHeaps.
     */
    int getExcludeHeapsCount();
    /**
     * <pre>
     * Which heaps not to sample, e.g. "libc.malloc". This is useful when used in
     * combination with all_heaps;
     * Introduced in Android 12.
     * </pre>
     *
     * <code>repeated string exclude_heaps = 27;</code>
     * @param index The index of the element to return.
     * @return The excludeHeaps at the given index.
     */
    java.lang.String getExcludeHeaps(int index);
    /**
     * <pre>
     * Which heaps not to sample, e.g. "libc.malloc". This is useful when used in
     * combination with all_heaps;
     * Introduced in Android 12.
     * </pre>
     *
     * <code>repeated string exclude_heaps = 27;</code>
     * @param index The index of the value to return.
     * @return The bytes of the excludeHeaps at the given index.
     */
    com.google.protobuf.ByteString
        getExcludeHeapsBytes(int index);

    /**
     * <code>optional bool stream_allocations = 23;</code>
     * @return Whether the streamAllocations field is set.
     */
    boolean hasStreamAllocations();
    /**
     * <code>optional bool stream_allocations = 23;</code>
     * @return The streamAllocations.
     */
    boolean getStreamAllocations();

    /**
     * <pre>
     * If given, needs to be the same length as heaps and gives the sampling
     * interval for the respective entry in heaps.
     * Otherwise, sampling_interval_bytes is used.
     * It is recommended to set sampling_interval_bytes to a reasonable default
     * value when using this, as a value of 0 for sampling_interval_bytes will
     * crash the target process before Android 12.
     * Introduced in Android 12.
     * All values must be non-zero or the producer will not start.
     * </pre>
     *
     * <code>repeated uint64 heap_sampling_intervals = 22;</code>
     * @return A list containing the heapSamplingIntervals.
     */
    java.util.List<java.lang.Long> getHeapSamplingIntervalsList();
    /**
     * <pre>
     * If given, needs to be the same length as heaps and gives the sampling
     * interval for the respective entry in heaps.
     * Otherwise, sampling_interval_bytes is used.
     * It is recommended to set sampling_interval_bytes to a reasonable default
     * value when using this, as a value of 0 for sampling_interval_bytes will
     * crash the target process before Android 12.
     * Introduced in Android 12.
     * All values must be non-zero or the producer will not start.
     * </pre>
     *
     * <code>repeated uint64 heap_sampling_intervals = 22;</code>
     * @return The count of heapSamplingIntervals.
     */
    int getHeapSamplingIntervalsCount();
    /**
     * <pre>
     * If given, needs to be the same length as heaps and gives the sampling
     * interval for the respective entry in heaps.
     * Otherwise, sampling_interval_bytes is used.
     * It is recommended to set sampling_interval_bytes to a reasonable default
     * value when using this, as a value of 0 for sampling_interval_bytes will
     * crash the target process before Android 12.
     * Introduced in Android 12.
     * All values must be non-zero or the producer will not start.
     * </pre>
     *
     * <code>repeated uint64 heap_sampling_intervals = 22;</code>
     * @param index The index of the element to return.
     * @return The heapSamplingIntervals at the given index.
     */
    long getHeapSamplingIntervals(int index);

    /**
     * <pre>
     * Sample all heaps registered by target process. Introduced in Android 12.
     * </pre>
     *
     * <code>optional bool all_heaps = 21;</code>
     * @return Whether the allHeaps field is set.
     */
    boolean hasAllHeaps();
    /**
     * <pre>
     * Sample all heaps registered by target process. Introduced in Android 12.
     * </pre>
     *
     * <code>optional bool all_heaps = 21;</code>
     * @return The allHeaps.
     */
    boolean getAllHeaps();

    /**
     * <pre>
     * Profile all processes eligible for profiling on the system.
     * See
     * https://perfetto.dev/docs/data-sources/native-heap-profiler#heapprofd-targets
     * for which processes are eligible.
     * On unmodified userdebug builds, this will lead to system crashes. Zygote
     * will crash when trying to launch a new process as it will have an
     * unexpected open socket to heapprofd.
     * heapprofd will likely be overloaded by the amount of data for low
     * sampling intervals.
     * </pre>
     *
     * <code>optional bool all = 5;</code>
     * @return Whether the all field is set.
     */
    boolean hasAll();
    /**
     * <pre>
     * Profile all processes eligible for profiling on the system.
     * See
     * https://perfetto.dev/docs/data-sources/native-heap-profiler#heapprofd-targets
     * for which processes are eligible.
     * On unmodified userdebug builds, this will lead to system crashes. Zygote
     * will crash when trying to launch a new process as it will have an
     * unexpected open socket to heapprofd.
     * heapprofd will likely be overloaded by the amount of data for low
     * sampling intervals.
     * </pre>
     *
     * <code>optional bool all = 5;</code>
     * @return The all.
     */
    boolean getAll();

    /**
     * <pre>
     * Do not profile processes whose anon RSS + swap &lt; given value.
     * Introduced in Android 11.
     * </pre>
     *
     * <code>optional uint32 min_anonymous_memory_kb = 15;</code>
     * @return Whether the minAnonymousMemoryKb field is set.
     */
    boolean hasMinAnonymousMemoryKb();
    /**
     * <pre>
     * Do not profile processes whose anon RSS + swap &lt; given value.
     * Introduced in Android 11.
     * </pre>
     *
     * <code>optional uint32 min_anonymous_memory_kb = 15;</code>
     * @return The minAnonymousMemoryKb.
     */
    int getMinAnonymousMemoryKb();

    /**
     * <pre>
     * Stop profile if heapprofd memory usage goes beyond the given value.
     * Introduced in Android 11.
     * </pre>
     *
     * <code>optional uint32 max_heapprofd_memory_kb = 16;</code>
     * @return Whether the maxHeapprofdMemoryKb field is set.
     */
    boolean hasMaxHeapprofdMemoryKb();
    /**
     * <pre>
     * Stop profile if heapprofd memory usage goes beyond the given value.
     * Introduced in Android 11.
     * </pre>
     *
     * <code>optional uint32 max_heapprofd_memory_kb = 16;</code>
     * @return The maxHeapprofdMemoryKb.
     */
    int getMaxHeapprofdMemoryKb();

    /**
     * <pre>
     * Stop profile if heapprofd CPU time since start of this data-source
     * goes beyond given value.
     * Introduced in Android 11.
     * </pre>
     *
     * <code>optional uint64 max_heapprofd_cpu_secs = 17;</code>
     * @return Whether the maxHeapprofdCpuSecs field is set.
     */
    boolean hasMaxHeapprofdCpuSecs();
    /**
     * <pre>
     * Stop profile if heapprofd CPU time since start of this data-source
     * goes beyond given value.
     * Introduced in Android 11.
     * </pre>
     *
     * <code>optional uint64 max_heapprofd_cpu_secs = 17;</code>
     * @return The maxHeapprofdCpuSecs.
     */
    long getMaxHeapprofdCpuSecs();

    /**
     * <pre>
     * Do not emit function names for mappings starting with this prefix.
     * E.g. /system to not emit symbols for any system libraries.
     * </pre>
     *
     * <code>repeated string skip_symbol_prefix = 7;</code>
     * @return A list containing the skipSymbolPrefix.
     */
    java.util.List<java.lang.String>
        getSkipSymbolPrefixList();
    /**
     * <pre>
     * Do not emit function names for mappings starting with this prefix.
     * E.g. /system to not emit symbols for any system libraries.
     * </pre>
     *
     * <code>repeated string skip_symbol_prefix = 7;</code>
     * @return The count of skipSymbolPrefix.
     */
    int getSkipSymbolPrefixCount();
    /**
     * <pre>
     * Do not emit function names for mappings starting with this prefix.
     * E.g. /system to not emit symbols for any system libraries.
     * </pre>
     *
     * <code>repeated string skip_symbol_prefix = 7;</code>
     * @param index The index of the element to return.
     * @return The skipSymbolPrefix at the given index.
     */
    java.lang.String getSkipSymbolPrefix(int index);
    /**
     * <pre>
     * Do not emit function names for mappings starting with this prefix.
     * E.g. /system to not emit symbols for any system libraries.
     * </pre>
     *
     * <code>repeated string skip_symbol_prefix = 7;</code>
     * @param index The index of the value to return.
     * @return The bytes of the skipSymbolPrefix at the given index.
     */
    com.google.protobuf.ByteString
        getSkipSymbolPrefixBytes(int index);

    /**
     * <pre>
     * Dump at a predefined interval.
     * </pre>
     *
     * <code>optional .perfetto.protos.HeapprofdConfig.ContinuousDumpConfig continuous_dump_config = 6;</code>
     * @return Whether the continuousDumpConfig field is set.
     */
    boolean hasContinuousDumpConfig();
    /**
     * <pre>
     * Dump at a predefined interval.
     * </pre>
     *
     * <code>optional .perfetto.protos.HeapprofdConfig.ContinuousDumpConfig continuous_dump_config = 6;</code>
     * @return The continuousDumpConfig.
     */
    perfetto.protos.HeapprofdConfigOuterClass.HeapprofdConfig.ContinuousDumpConfig getContinuousDumpConfig();
    /**
     * <pre>
     * Dump at a predefined interval.
     * </pre>
     *
     * <code>optional .perfetto.protos.HeapprofdConfig.ContinuousDumpConfig continuous_dump_config = 6;</code>
     */
    perfetto.protos.HeapprofdConfigOuterClass.HeapprofdConfig.ContinuousDumpConfigOrBuilder getContinuousDumpConfigOrBuilder();

    /**
     * <pre>
     * Size of the shared memory buffer between the profiled processes and
     * heapprofd. Defaults to 8 MiB. If larger than 500 MiB, truncated to 500
     * MiB.
     * Needs to be:
     * * at least 8192,
     * * a power of two,
     * * a multiple of 4096.
     * </pre>
     *
     * <code>optional uint64 shmem_size_bytes = 8;</code>
     * @return Whether the shmemSizeBytes field is set.
     */
    boolean hasShmemSizeBytes();
    /**
     * <pre>
     * Size of the shared memory buffer between the profiled processes and
     * heapprofd. Defaults to 8 MiB. If larger than 500 MiB, truncated to 500
     * MiB.
     * Needs to be:
     * * at least 8192,
     * * a power of two,
     * * a multiple of 4096.
     * </pre>
     *
     * <code>optional uint64 shmem_size_bytes = 8;</code>
     * @return The shmemSizeBytes.
     */
    long getShmemSizeBytes();

    /**
     * <pre>
     * When the shmem buffer is full, block the client instead of ending the
     * trace. Use with caution as this will significantly slow down the target
     * process.
     * </pre>
     *
     * <code>optional bool block_client = 9;</code>
     * @return Whether the blockClient field is set.
     */
    boolean hasBlockClient();
    /**
     * <pre>
     * When the shmem buffer is full, block the client instead of ending the
     * trace. Use with caution as this will significantly slow down the target
     * process.
     * </pre>
     *
     * <code>optional bool block_client = 9;</code>
     * @return The blockClient.
     */
    boolean getBlockClient();

    /**
     * <pre>
     * If set, stop the trace session after blocking the client for this
     * timeout. Needs to be larger than 100 us, otherwise no retries are done.
     * Introduced in Android 11.
     * </pre>
     *
     * <code>optional uint32 block_client_timeout_us = 14;</code>
     * @return Whether the blockClientTimeoutUs field is set.
     */
    boolean hasBlockClientTimeoutUs();
    /**
     * <pre>
     * If set, stop the trace session after blocking the client for this
     * timeout. Needs to be larger than 100 us, otherwise no retries are done.
     * Introduced in Android 11.
     * </pre>
     *
     * <code>optional uint32 block_client_timeout_us = 14;</code>
     * @return The blockClientTimeoutUs.
     */
    int getBlockClientTimeoutUs();

    /**
     * <pre>
     * Do not profile processes from startup, only match already running
     * processes.
     * Can not be set at the same time as no_running.
     * Introduced in Android 11.
     * </pre>
     *
     * <code>optional bool no_startup = 10;</code>
     * @return Whether the noStartup field is set.
     */
    boolean hasNoStartup();
    /**
     * <pre>
     * Do not profile processes from startup, only match already running
     * processes.
     * Can not be set at the same time as no_running.
     * Introduced in Android 11.
     * </pre>
     *
     * <code>optional bool no_startup = 10;</code>
     * @return The noStartup.
     */
    boolean getNoStartup();

    /**
     * <pre>
     * Do not profile running processes. Only match processes on startup.
     * Can not be set at the same time as no_startup.
     * Introduced in Android 11.
     * </pre>
     *
     * <code>optional bool no_running = 11;</code>
     * @return Whether the noRunning field is set.
     */
    boolean hasNoRunning();
    /**
     * <pre>
     * Do not profile running processes. Only match processes on startup.
     * Can not be set at the same time as no_startup.
     * Introduced in Android 11.
     * </pre>
     *
     * <code>optional bool no_running = 11;</code>
     * @return The noRunning.
     */
    boolean getNoRunning();

    /**
     * <pre>
     * Cause heapprofd to emit a single dump at the end, showing the memory usage
     * at the point in time when the sampled heap usage of the process was at its
     * maximum. This causes ProfilePacket.HeapSample.self_max to be set, and
     * self_allocated and self_freed to not be set.
     * Introduced in Android 11.
     * </pre>
     *
     * <code>optional bool dump_at_max = 13;</code>
     * @return Whether the dumpAtMax field is set.
     */
    boolean hasDumpAtMax();
    /**
     * <pre>
     * Cause heapprofd to emit a single dump at the end, showing the memory usage
     * at the point in time when the sampled heap usage of the process was at its
     * maximum. This causes ProfilePacket.HeapSample.self_max to be set, and
     * self_allocated and self_freed to not be set.
     * Introduced in Android 11.
     * </pre>
     *
     * <code>optional bool dump_at_max = 13;</code>
     * @return The dumpAtMax.
     */
    boolean getDumpAtMax();

    /**
     * <pre>
     * Escape hatch if the session is being torn down because of a forked child
     * that shares memory space, but is not correctly identified as a vforked
     * child.
     * Introduced in Android 11.
     * </pre>
     *
     * <code>optional bool disable_fork_teardown = 18;</code>
     * @return Whether the disableForkTeardown field is set.
     */
    boolean hasDisableForkTeardown();
    /**
     * <pre>
     * Escape hatch if the session is being torn down because of a forked child
     * that shares memory space, but is not correctly identified as a vforked
     * child.
     * Introduced in Android 11.
     * </pre>
     *
     * <code>optional bool disable_fork_teardown = 18;</code>
     * @return The disableForkTeardown.
     */
    boolean getDisableForkTeardown();

    /**
     * <pre>
     * We try to automatically detect when a target applicatation vforks but then
     * does a memory allocation (or free). This auto-detection can be disabled
     * with this.
     * Introduced in Android 11.
     * </pre>
     *
     * <code>optional bool disable_vfork_detection = 19;</code>
     * @return Whether the disableVforkDetection field is set.
     */
    boolean hasDisableVforkDetection();
    /**
     * <pre>
     * We try to automatically detect when a target applicatation vforks but then
     * does a memory allocation (or free). This auto-detection can be disabled
     * with this.
     * Introduced in Android 11.
     * </pre>
     *
     * <code>optional bool disable_vfork_detection = 19;</code>
     * @return The disableVforkDetection.
     */
    boolean getDisableVforkDetection();
  }
  /**
   * <pre>
   * Configuration for go/heapprofd.
   * Next id: 27
   * </pre>
   *
   * Protobuf type {@code perfetto.protos.HeapprofdConfig}
   */
  public static final class HeapprofdConfig extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:perfetto.protos.HeapprofdConfig)
      HeapprofdConfigOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use HeapprofdConfig.newBuilder() to construct.
    private HeapprofdConfig(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private HeapprofdConfig() {
      processCmdline_ = com.google.protobuf.LazyStringArrayList.EMPTY;
      pid_ = emptyLongList();
      targetInstalledBy_ = com.google.protobuf.LazyStringArrayList.EMPTY;
      heaps_ = com.google.protobuf.LazyStringArrayList.EMPTY;
      excludeHeaps_ = com.google.protobuf.LazyStringArrayList.EMPTY;
      heapSamplingIntervals_ = emptyLongList();
      skipSymbolPrefix_ = com.google.protobuf.LazyStringArrayList.EMPTY;
    }

    @java.lang.Override
    @SuppressWarnings({"unused"})
    protected java.lang.Object newInstance(
        UnusedPrivateParameter unused) {
      return new HeapprofdConfig();
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return perfetto.protos.HeapprofdConfigOuterClass.internal_static_perfetto_protos_HeapprofdConfig_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return perfetto.protos.HeapprofdConfigOuterClass.internal_static_perfetto_protos_HeapprofdConfig_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              perfetto.protos.HeapprofdConfigOuterClass.HeapprofdConfig.class, perfetto.protos.HeapprofdConfigOuterClass.HeapprofdConfig.Builder.class);
    }

    public interface ContinuousDumpConfigOrBuilder extends
        // @@protoc_insertion_point(interface_extends:perfetto.protos.HeapprofdConfig.ContinuousDumpConfig)
        com.google.protobuf.MessageOrBuilder {

      /**
       * <pre>
       * ms to wait before first dump.
       * </pre>
       *
       * <code>optional uint32 dump_phase_ms = 5;</code>
       * @return Whether the dumpPhaseMs field is set.
       */
      boolean hasDumpPhaseMs();
      /**
       * <pre>
       * ms to wait before first dump.
       * </pre>
       *
       * <code>optional uint32 dump_phase_ms = 5;</code>
       * @return The dumpPhaseMs.
       */
      int getDumpPhaseMs();

      /**
       * <pre>
       * ms to wait between following dumps.
       * </pre>
       *
       * <code>optional uint32 dump_interval_ms = 6;</code>
       * @return Whether the dumpIntervalMs field is set.
       */
      boolean hasDumpIntervalMs();
      /**
       * <pre>
       * ms to wait between following dumps.
       * </pre>
       *
       * <code>optional uint32 dump_interval_ms = 6;</code>
       * @return The dumpIntervalMs.
       */
      int getDumpIntervalMs();
    }
    /**
     * Protobuf type {@code perfetto.protos.HeapprofdConfig.ContinuousDumpConfig}
     */
    public static final class ContinuousDumpConfig extends
        com.google.protobuf.GeneratedMessageV3 implements
        // @@protoc_insertion_point(message_implements:perfetto.protos.HeapprofdConfig.ContinuousDumpConfig)
        ContinuousDumpConfigOrBuilder {
    private static final long serialVersionUID = 0L;
      // Use ContinuousDumpConfig.newBuilder() to construct.
      private ContinuousDumpConfig(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
        super(builder);
      }
      private ContinuousDumpConfig() {
      }

      @java.lang.Override
      @SuppressWarnings({"unused"})
      protected java.lang.Object newInstance(
          UnusedPrivateParameter unused) {
        return new ContinuousDumpConfig();
      }

      @java.lang.Override
      public final com.google.protobuf.UnknownFieldSet
      getUnknownFields() {
        return this.unknownFields;
      }
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return perfetto.protos.HeapprofdConfigOuterClass.internal_static_perfetto_protos_HeapprofdConfig_ContinuousDumpConfig_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return perfetto.protos.HeapprofdConfigOuterClass.internal_static_perfetto_protos_HeapprofdConfig_ContinuousDumpConfig_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                perfetto.protos.HeapprofdConfigOuterClass.HeapprofdConfig.ContinuousDumpConfig.class, perfetto.protos.HeapprofdConfigOuterClass.HeapprofdConfig.ContinuousDumpConfig.Builder.class);
      }

      private int bitField0_;
      public static final int DUMP_PHASE_MS_FIELD_NUMBER = 5;
      private int dumpPhaseMs_ = 0;
      /**
       * <pre>
       * ms to wait before first dump.
       * </pre>
       *
       * <code>optional uint32 dump_phase_ms = 5;</code>
       * @return Whether the dumpPhaseMs field is set.
       */
      @java.lang.Override
      public boolean hasDumpPhaseMs() {
        return ((bitField0_ & 0x00000001) != 0);
      }
      /**
       * <pre>
       * ms to wait before first dump.
       * </pre>
       *
       * <code>optional uint32 dump_phase_ms = 5;</code>
       * @return The dumpPhaseMs.
       */
      @java.lang.Override
      public int getDumpPhaseMs() {
        return dumpPhaseMs_;
      }

      public static final int DUMP_INTERVAL_MS_FIELD_NUMBER = 6;
      private int dumpIntervalMs_ = 0;
      /**
       * <pre>
       * ms to wait between following dumps.
       * </pre>
       *
       * <code>optional uint32 dump_interval_ms = 6;</code>
       * @return Whether the dumpIntervalMs field is set.
       */
      @java.lang.Override
      public boolean hasDumpIntervalMs() {
        return ((bitField0_ & 0x00000002) != 0);
      }
      /**
       * <pre>
       * ms to wait between following dumps.
       * </pre>
       *
       * <code>optional uint32 dump_interval_ms = 6;</code>
       * @return The dumpIntervalMs.
       */
      @java.lang.Override
      public int getDumpIntervalMs() {
        return dumpIntervalMs_;
      }

      private byte memoizedIsInitialized = -1;
      @java.lang.Override
      public final boolean isInitialized() {
        byte isInitialized = memoizedIsInitialized;
        if (isInitialized == 1) return true;
        if (isInitialized == 0) return false;

        memoizedIsInitialized = 1;
        return true;
      }

      @java.lang.Override
      public void writeTo(com.google.protobuf.CodedOutputStream output)
                          throws java.io.IOException {
        if (((bitField0_ & 0x00000001) != 0)) {
          output.writeUInt32(5, dumpPhaseMs_);
        }
        if (((bitField0_ & 0x00000002) != 0)) {
          output.writeUInt32(6, dumpIntervalMs_);
        }
        getUnknownFields().writeTo(output);
      }

      @java.lang.Override
      public int getSerializedSize() {
        int size = memoizedSize;
        if (size != -1) return size;

        size = 0;
        if (((bitField0_ & 0x00000001) != 0)) {
          size += com.google.protobuf.CodedOutputStream
            .computeUInt32Size(5, dumpPhaseMs_);
        }
        if (((bitField0_ & 0x00000002) != 0)) {
          size += com.google.protobuf.CodedOutputStream
            .computeUInt32Size(6, dumpIntervalMs_);
        }
        size += getUnknownFields().getSerializedSize();
        memoizedSize = size;
        return size;
      }

      @java.lang.Override
      public boolean equals(final java.lang.Object obj) {
        if (obj == this) {
         return true;
        }
        if (!(obj instanceof perfetto.protos.HeapprofdConfigOuterClass.HeapprofdConfig.ContinuousDumpConfig)) {
          return super.equals(obj);
        }
        perfetto.protos.HeapprofdConfigOuterClass.HeapprofdConfig.ContinuousDumpConfig other = (perfetto.protos.HeapprofdConfigOuterClass.HeapprofdConfig.ContinuousDumpConfig) obj;

        if (hasDumpPhaseMs() != other.hasDumpPhaseMs()) return false;
        if (hasDumpPhaseMs()) {
          if (getDumpPhaseMs()
              != other.getDumpPhaseMs()) return false;
        }
        if (hasDumpIntervalMs() != other.hasDumpIntervalMs()) return false;
        if (hasDumpIntervalMs()) {
          if (getDumpIntervalMs()
              != other.getDumpIntervalMs()) return false;
        }
        if (!getUnknownFields().equals(other.getUnknownFields())) return false;
        return true;
      }

      @java.lang.Override
      public int hashCode() {
        if (memoizedHashCode != 0) {
          return memoizedHashCode;
        }
        int hash = 41;
        hash = (19 * hash) + getDescriptor().hashCode();
        if (hasDumpPhaseMs()) {
          hash = (37 * hash) + DUMP_PHASE_MS_FIELD_NUMBER;
          hash = (53 * hash) + getDumpPhaseMs();
        }
        if (hasDumpIntervalMs()) {
          hash = (37 * hash) + DUMP_INTERVAL_MS_FIELD_NUMBER;
          hash = (53 * hash) + getDumpIntervalMs();
        }
        hash = (29 * hash) + getUnknownFields().hashCode();
        memoizedHashCode = hash;
        return hash;
      }

      public static perfetto.protos.HeapprofdConfigOuterClass.HeapprofdConfig.ContinuousDumpConfig parseFrom(
          java.nio.ByteBuffer data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static perfetto.protos.HeapprofdConfigOuterClass.HeapprofdConfig.ContinuousDumpConfig parseFrom(
          java.nio.ByteBuffer data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static perfetto.protos.HeapprofdConfigOuterClass.HeapprofdConfig.ContinuousDumpConfig parseFrom(
          com.google.protobuf.ByteString data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static perfetto.protos.HeapprofdConfigOuterClass.HeapprofdConfig.ContinuousDumpConfig parseFrom(
          com.google.protobuf.ByteString data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static perfetto.protos.HeapprofdConfigOuterClass.HeapprofdConfig.ContinuousDumpConfig parseFrom(byte[] data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static perfetto.protos.HeapprofdConfigOuterClass.HeapprofdConfig.ContinuousDumpConfig parseFrom(
          byte[] data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static perfetto.protos.HeapprofdConfigOuterClass.HeapprofdConfig.ContinuousDumpConfig parseFrom(java.io.InputStream input)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseWithIOException(PARSER, input);
      }
      public static perfetto.protos.HeapprofdConfigOuterClass.HeapprofdConfig.ContinuousDumpConfig parseFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseWithIOException(PARSER, input, extensionRegistry);
      }
      public static perfetto.protos.HeapprofdConfigOuterClass.HeapprofdConfig.ContinuousDumpConfig parseDelimitedFrom(java.io.InputStream input)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseDelimitedWithIOException(PARSER, input);
      }
      public static perfetto.protos.HeapprofdConfigOuterClass.HeapprofdConfig.ContinuousDumpConfig parseDelimitedFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
      }
      public static perfetto.protos.HeapprofdConfigOuterClass.HeapprofdConfig.ContinuousDumpConfig parseFrom(
          com.google.protobuf.CodedInputStream input)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseWithIOException(PARSER, input);
      }
      public static perfetto.protos.HeapprofdConfigOuterClass.HeapprofdConfig.ContinuousDumpConfig parseFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseWithIOException(PARSER, input, extensionRegistry);
      }

      @java.lang.Override
      public Builder newBuilderForType() { return newBuilder(); }
      public static Builder newBuilder() {
        return DEFAULT_INSTANCE.toBuilder();
      }
      public static Builder newBuilder(perfetto.protos.HeapprofdConfigOuterClass.HeapprofdConfig.ContinuousDumpConfig prototype) {
        return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
      }
      @java.lang.Override
      public Builder toBuilder() {
        return this == DEFAULT_INSTANCE
            ? new Builder() : new Builder().mergeFrom(this);
      }

      @java.lang.Override
      protected Builder newBuilderForType(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        Builder builder = new Builder(parent);
        return builder;
      }
      /**
       * Protobuf type {@code perfetto.protos.HeapprofdConfig.ContinuousDumpConfig}
       */
      public static final class Builder extends
          com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
          // @@protoc_insertion_point(builder_implements:perfetto.protos.HeapprofdConfig.ContinuousDumpConfig)
          perfetto.protos.HeapprofdConfigOuterClass.HeapprofdConfig.ContinuousDumpConfigOrBuilder {
        public static final com.google.protobuf.Descriptors.Descriptor
            getDescriptor() {
          return perfetto.protos.HeapprofdConfigOuterClass.internal_static_perfetto_protos_HeapprofdConfig_ContinuousDumpConfig_descriptor;
        }

        @java.lang.Override
        protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
            internalGetFieldAccessorTable() {
          return perfetto.protos.HeapprofdConfigOuterClass.internal_static_perfetto_protos_HeapprofdConfig_ContinuousDumpConfig_fieldAccessorTable
              .ensureFieldAccessorsInitialized(
                  perfetto.protos.HeapprofdConfigOuterClass.HeapprofdConfig.ContinuousDumpConfig.class, perfetto.protos.HeapprofdConfigOuterClass.HeapprofdConfig.ContinuousDumpConfig.Builder.class);
        }

        // Construct using perfetto.protos.HeapprofdConfigOuterClass.HeapprofdConfig.ContinuousDumpConfig.newBuilder()
        private Builder() {

        }

        private Builder(
            com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
          super(parent);

        }
        @java.lang.Override
        public Builder clear() {
          super.clear();
          bitField0_ = 0;
          dumpPhaseMs_ = 0;
          dumpIntervalMs_ = 0;
          return this;
        }

        @java.lang.Override
        public com.google.protobuf.Descriptors.Descriptor
            getDescriptorForType() {
          return perfetto.protos.HeapprofdConfigOuterClass.internal_static_perfetto_protos_HeapprofdConfig_ContinuousDumpConfig_descriptor;
        }

        @java.lang.Override
        public perfetto.protos.HeapprofdConfigOuterClass.HeapprofdConfig.ContinuousDumpConfig getDefaultInstanceForType() {
          return perfetto.protos.HeapprofdConfigOuterClass.HeapprofdConfig.ContinuousDumpConfig.getDefaultInstance();
        }

        @java.lang.Override
        public perfetto.protos.HeapprofdConfigOuterClass.HeapprofdConfig.ContinuousDumpConfig build() {
          perfetto.protos.HeapprofdConfigOuterClass.HeapprofdConfig.ContinuousDumpConfig result = buildPartial();
          if (!result.isInitialized()) {
            throw newUninitializedMessageException(result);
          }
          return result;
        }

        @java.lang.Override
        public perfetto.protos.HeapprofdConfigOuterClass.HeapprofdConfig.ContinuousDumpConfig buildPartial() {
          perfetto.protos.HeapprofdConfigOuterClass.HeapprofdConfig.ContinuousDumpConfig result = new perfetto.protos.HeapprofdConfigOuterClass.HeapprofdConfig.ContinuousDumpConfig(this);
          if (bitField0_ != 0) { buildPartial0(result); }
          onBuilt();
          return result;
        }

        private void buildPartial0(perfetto.protos.HeapprofdConfigOuterClass.HeapprofdConfig.ContinuousDumpConfig result) {
          int from_bitField0_ = bitField0_;
          int to_bitField0_ = 0;
          if (((from_bitField0_ & 0x00000001) != 0)) {
            result.dumpPhaseMs_ = dumpPhaseMs_;
            to_bitField0_ |= 0x00000001;
          }
          if (((from_bitField0_ & 0x00000002) != 0)) {
            result.dumpIntervalMs_ = dumpIntervalMs_;
            to_bitField0_ |= 0x00000002;
          }
          result.bitField0_ |= to_bitField0_;
        }

        @java.lang.Override
        public Builder clone() {
          return super.clone();
        }
        @java.lang.Override
        public Builder setField(
            com.google.protobuf.Descriptors.FieldDescriptor field,
            java.lang.Object value) {
          return super.setField(field, value);
        }
        @java.lang.Override
        public Builder clearField(
            com.google.protobuf.Descriptors.FieldDescriptor field) {
          return super.clearField(field);
        }
        @java.lang.Override
        public Builder clearOneof(
            com.google.protobuf.Descriptors.OneofDescriptor oneof) {
          return super.clearOneof(oneof);
        }
        @java.lang.Override
        public Builder setRepeatedField(
            com.google.protobuf.Descriptors.FieldDescriptor field,
            int index, java.lang.Object value) {
          return super.setRepeatedField(field, index, value);
        }
        @java.lang.Override
        public Builder addRepeatedField(
            com.google.protobuf.Descriptors.FieldDescriptor field,
            java.lang.Object value) {
          return super.addRepeatedField(field, value);
        }
        @java.lang.Override
        public Builder mergeFrom(com.google.protobuf.Message other) {
          if (other instanceof perfetto.protos.HeapprofdConfigOuterClass.HeapprofdConfig.ContinuousDumpConfig) {
            return mergeFrom((perfetto.protos.HeapprofdConfigOuterClass.HeapprofdConfig.ContinuousDumpConfig)other);
          } else {
            super.mergeFrom(other);
            return this;
          }
        }

        public Builder mergeFrom(perfetto.protos.HeapprofdConfigOuterClass.HeapprofdConfig.ContinuousDumpConfig other) {
          if (other == perfetto.protos.HeapprofdConfigOuterClass.HeapprofdConfig.ContinuousDumpConfig.getDefaultInstance()) return this;
          if (other.hasDumpPhaseMs()) {
            setDumpPhaseMs(other.getDumpPhaseMs());
          }
          if (other.hasDumpIntervalMs()) {
            setDumpIntervalMs(other.getDumpIntervalMs());
          }
          this.mergeUnknownFields(other.getUnknownFields());
          onChanged();
          return this;
        }

        @java.lang.Override
        public final boolean isInitialized() {
          return true;
        }

        @java.lang.Override
        public Builder mergeFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws java.io.IOException {
          if (extensionRegistry == null) {
            throw new java.lang.NullPointerException();
          }
          try {
            boolean done = false;
            while (!done) {
              int tag = input.readTag();
              switch (tag) {
                case 0:
                  done = true;
                  break;
                case 40: {
                  dumpPhaseMs_ = input.readUInt32();
                  bitField0_ |= 0x00000001;
                  break;
                } // case 40
                case 48: {
                  dumpIntervalMs_ = input.readUInt32();
                  bitField0_ |= 0x00000002;
                  break;
                } // case 48
                default: {
                  if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                    done = true; // was an endgroup tag
                  }
                  break;
                } // default:
              } // switch (tag)
            } // while (!done)
          } catch (com.google.protobuf.InvalidProtocolBufferException e) {
            throw e.unwrapIOException();
          } finally {
            onChanged();
          } // finally
          return this;
        }
        private int bitField0_;

        private int dumpPhaseMs_ ;
        /**
         * <pre>
         * ms to wait before first dump.
         * </pre>
         *
         * <code>optional uint32 dump_phase_ms = 5;</code>
         * @return Whether the dumpPhaseMs field is set.
         */
        @java.lang.Override
        public boolean hasDumpPhaseMs() {
          return ((bitField0_ & 0x00000001) != 0);
        }
        /**
         * <pre>
         * ms to wait before first dump.
         * </pre>
         *
         * <code>optional uint32 dump_phase_ms = 5;</code>
         * @return The dumpPhaseMs.
         */
        @java.lang.Override
        public int getDumpPhaseMs() {
          return dumpPhaseMs_;
        }
        /**
         * <pre>
         * ms to wait before first dump.
         * </pre>
         *
         * <code>optional uint32 dump_phase_ms = 5;</code>
         * @param value The dumpPhaseMs to set.
         * @return This builder for chaining.
         */
        public Builder setDumpPhaseMs(int value) {
          
          dumpPhaseMs_ = value;
          bitField0_ |= 0x00000001;
          onChanged();
          return this;
        }
        /**
         * <pre>
         * ms to wait before first dump.
         * </pre>
         *
         * <code>optional uint32 dump_phase_ms = 5;</code>
         * @return This builder for chaining.
         */
        public Builder clearDumpPhaseMs() {
          bitField0_ = (bitField0_ & ~0x00000001);
          dumpPhaseMs_ = 0;
          onChanged();
          return this;
        }

        private int dumpIntervalMs_ ;
        /**
         * <pre>
         * ms to wait between following dumps.
         * </pre>
         *
         * <code>optional uint32 dump_interval_ms = 6;</code>
         * @return Whether the dumpIntervalMs field is set.
         */
        @java.lang.Override
        public boolean hasDumpIntervalMs() {
          return ((bitField0_ & 0x00000002) != 0);
        }
        /**
         * <pre>
         * ms to wait between following dumps.
         * </pre>
         *
         * <code>optional uint32 dump_interval_ms = 6;</code>
         * @return The dumpIntervalMs.
         */
        @java.lang.Override
        public int getDumpIntervalMs() {
          return dumpIntervalMs_;
        }
        /**
         * <pre>
         * ms to wait between following dumps.
         * </pre>
         *
         * <code>optional uint32 dump_interval_ms = 6;</code>
         * @param value The dumpIntervalMs to set.
         * @return This builder for chaining.
         */
        public Builder setDumpIntervalMs(int value) {
          
          dumpIntervalMs_ = value;
          bitField0_ |= 0x00000002;
          onChanged();
          return this;
        }
        /**
         * <pre>
         * ms to wait between following dumps.
         * </pre>
         *
         * <code>optional uint32 dump_interval_ms = 6;</code>
         * @return This builder for chaining.
         */
        public Builder clearDumpIntervalMs() {
          bitField0_ = (bitField0_ & ~0x00000002);
          dumpIntervalMs_ = 0;
          onChanged();
          return this;
        }
        @java.lang.Override
        public final Builder setUnknownFields(
            final com.google.protobuf.UnknownFieldSet unknownFields) {
          return super.setUnknownFields(unknownFields);
        }

        @java.lang.Override
        public final Builder mergeUnknownFields(
            final com.google.protobuf.UnknownFieldSet unknownFields) {
          return super.mergeUnknownFields(unknownFields);
        }


        // @@protoc_insertion_point(builder_scope:perfetto.protos.HeapprofdConfig.ContinuousDumpConfig)
      }

      // @@protoc_insertion_point(class_scope:perfetto.protos.HeapprofdConfig.ContinuousDumpConfig)
      private static final perfetto.protos.HeapprofdConfigOuterClass.HeapprofdConfig.ContinuousDumpConfig DEFAULT_INSTANCE;
      static {
        DEFAULT_INSTANCE = new perfetto.protos.HeapprofdConfigOuterClass.HeapprofdConfig.ContinuousDumpConfig();
      }

      public static perfetto.protos.HeapprofdConfigOuterClass.HeapprofdConfig.ContinuousDumpConfig getDefaultInstance() {
        return DEFAULT_INSTANCE;
      }

      @java.lang.Deprecated public static final com.google.protobuf.Parser<ContinuousDumpConfig>
          PARSER = new com.google.protobuf.AbstractParser<ContinuousDumpConfig>() {
        @java.lang.Override
        public ContinuousDumpConfig parsePartialFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws com.google.protobuf.InvalidProtocolBufferException {
          Builder builder = newBuilder();
          try {
            builder.mergeFrom(input, extensionRegistry);
          } catch (com.google.protobuf.InvalidProtocolBufferException e) {
            throw e.setUnfinishedMessage(builder.buildPartial());
          } catch (com.google.protobuf.UninitializedMessageException e) {
            throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
          } catch (java.io.IOException e) {
            throw new com.google.protobuf.InvalidProtocolBufferException(e)
                .setUnfinishedMessage(builder.buildPartial());
          }
          return builder.buildPartial();
        }
      };

      public static com.google.protobuf.Parser<ContinuousDumpConfig> parser() {
        return PARSER;
      }

      @java.lang.Override
      public com.google.protobuf.Parser<ContinuousDumpConfig> getParserForType() {
        return PARSER;
      }

      @java.lang.Override
      public perfetto.protos.HeapprofdConfigOuterClass.HeapprofdConfig.ContinuousDumpConfig getDefaultInstanceForType() {
        return DEFAULT_INSTANCE;
      }

    }

    private int bitField0_;
    public static final int SAMPLING_INTERVAL_BYTES_FIELD_NUMBER = 1;
    private long samplingIntervalBytes_ = 0L;
    /**
     * <pre>
     * Sampling rate for all heaps not specified via heap_sampling_intervals.
     * These are:
     * * All heaps if heap_sampling_intervals is empty.
     * * Those profiled due to all_heaps and not named in heaps if
     *   heap_sampling_intervals is not empty.
     * * The implicit libc.malloc heap if heaps is empty.
     * Set to 1 for perfect accuracy.
     * Otherwise, sample every sample_interval_bytes on average.
     * See
     * https://perfetto.dev/docs/data-sources/native-heap-profiler#sampling-interval
     * for more details.
     * BUGS
     * Before Android 12, setting this to 0 would crash the target process.
     * N.B. This must be explicitly set to a non-zero value for all heaps (with
     * this field or with heap_sampling_intervals), otherwise the producer will
     * not start.
     * </pre>
     *
     * <code>optional uint64 sampling_interval_bytes = 1;</code>
     * @return Whether the samplingIntervalBytes field is set.
     */
    @java.lang.Override
    public boolean hasSamplingIntervalBytes() {
      return ((bitField0_ & 0x00000001) != 0);
    }
    /**
     * <pre>
     * Sampling rate for all heaps not specified via heap_sampling_intervals.
     * These are:
     * * All heaps if heap_sampling_intervals is empty.
     * * Those profiled due to all_heaps and not named in heaps if
     *   heap_sampling_intervals is not empty.
     * * The implicit libc.malloc heap if heaps is empty.
     * Set to 1 for perfect accuracy.
     * Otherwise, sample every sample_interval_bytes on average.
     * See
     * https://perfetto.dev/docs/data-sources/native-heap-profiler#sampling-interval
     * for more details.
     * BUGS
     * Before Android 12, setting this to 0 would crash the target process.
     * N.B. This must be explicitly set to a non-zero value for all heaps (with
     * this field or with heap_sampling_intervals), otherwise the producer will
     * not start.
     * </pre>
     *
     * <code>optional uint64 sampling_interval_bytes = 1;</code>
     * @return The samplingIntervalBytes.
     */
    @java.lang.Override
    public long getSamplingIntervalBytes() {
      return samplingIntervalBytes_;
    }

    public static final int ADAPTIVE_SAMPLING_SHMEM_THRESHOLD_FIELD_NUMBER = 24;
    private long adaptiveSamplingShmemThreshold_ = 0L;
    /**
     * <pre>
     * If less than the given numbers of bytes are left free in the shared
     * memory buffer, increase sampling interval by a factor of two.
     * Adaptive sampling is disabled when set to 0.
     * </pre>
     *
     * <code>optional uint64 adaptive_sampling_shmem_threshold = 24;</code>
     * @return Whether the adaptiveSamplingShmemThreshold field is set.
     */
    @java.lang.Override
    public boolean hasAdaptiveSamplingShmemThreshold() {
      return ((bitField0_ & 0x00000002) != 0);
    }
    /**
     * <pre>
     * If less than the given numbers of bytes are left free in the shared
     * memory buffer, increase sampling interval by a factor of two.
     * Adaptive sampling is disabled when set to 0.
     * </pre>
     *
     * <code>optional uint64 adaptive_sampling_shmem_threshold = 24;</code>
     * @return The adaptiveSamplingShmemThreshold.
     */
    @java.lang.Override
    public long getAdaptiveSamplingShmemThreshold() {
      return adaptiveSamplingShmemThreshold_;
    }

    public static final int ADAPTIVE_SAMPLING_MAX_SAMPLING_INTERVAL_BYTES_FIELD_NUMBER = 25;
    private long adaptiveSamplingMaxSamplingIntervalBytes_ = 0L;
    /**
     * <pre>
     * Stop doubling the sampling_interval once the sampling interval has reached
     * this value.
     * </pre>
     *
     * <code>optional uint64 adaptive_sampling_max_sampling_interval_bytes = 25;</code>
     * @return Whether the adaptiveSamplingMaxSamplingIntervalBytes field is set.
     */
    @java.lang.Override
    public boolean hasAdaptiveSamplingMaxSamplingIntervalBytes() {
      return ((bitField0_ & 0x00000004) != 0);
    }
    /**
     * <pre>
     * Stop doubling the sampling_interval once the sampling interval has reached
     * this value.
     * </pre>
     *
     * <code>optional uint64 adaptive_sampling_max_sampling_interval_bytes = 25;</code>
     * @return The adaptiveSamplingMaxSamplingIntervalBytes.
     */
    @java.lang.Override
    public long getAdaptiveSamplingMaxSamplingIntervalBytes() {
      return adaptiveSamplingMaxSamplingIntervalBytes_;
    }

    public static final int PROCESS_CMDLINE_FIELD_NUMBER = 2;
    @SuppressWarnings("serial")
    private com.google.protobuf.LazyStringList processCmdline_;
    /**
     * <pre>
     * E.g. surfaceflinger, com.android.phone
     * This input is normalized in the following way: if it contains slashes,
     * everything up to the last slash is discarded. If it contains "&#64;",
     * everything after the first &#64; is discared.
     * E.g. /system/bin/surfaceflinger&#64;1.0 normalizes to surfaceflinger.
     * This transformation is also applied to the processes' command lines when
     * matching.
     * </pre>
     *
     * <code>repeated string process_cmdline = 2;</code>
     * @return A list containing the processCmdline.
     */
    public com.google.protobuf.ProtocolStringList
        getProcessCmdlineList() {
      return processCmdline_;
    }
    /**
     * <pre>
     * E.g. surfaceflinger, com.android.phone
     * This input is normalized in the following way: if it contains slashes,
     * everything up to the last slash is discarded. If it contains "&#64;",
     * everything after the first &#64; is discared.
     * E.g. /system/bin/surfaceflinger&#64;1.0 normalizes to surfaceflinger.
     * This transformation is also applied to the processes' command lines when
     * matching.
     * </pre>
     *
     * <code>repeated string process_cmdline = 2;</code>
     * @return The count of processCmdline.
     */
    public int getProcessCmdlineCount() {
      return processCmdline_.size();
    }
    /**
     * <pre>
     * E.g. surfaceflinger, com.android.phone
     * This input is normalized in the following way: if it contains slashes,
     * everything up to the last slash is discarded. If it contains "&#64;",
     * everything after the first &#64; is discared.
     * E.g. /system/bin/surfaceflinger&#64;1.0 normalizes to surfaceflinger.
     * This transformation is also applied to the processes' command lines when
     * matching.
     * </pre>
     *
     * <code>repeated string process_cmdline = 2;</code>
     * @param index The index of the element to return.
     * @return The processCmdline at the given index.
     */
    public java.lang.String getProcessCmdline(int index) {
      return processCmdline_.get(index);
    }
    /**
     * <pre>
     * E.g. surfaceflinger, com.android.phone
     * This input is normalized in the following way: if it contains slashes,
     * everything up to the last slash is discarded. If it contains "&#64;",
     * everything after the first &#64; is discared.
     * E.g. /system/bin/surfaceflinger&#64;1.0 normalizes to surfaceflinger.
     * This transformation is also applied to the processes' command lines when
     * matching.
     * </pre>
     *
     * <code>repeated string process_cmdline = 2;</code>
     * @param index The index of the value to return.
     * @return The bytes of the processCmdline at the given index.
     */
    public com.google.protobuf.ByteString
        getProcessCmdlineBytes(int index) {
      return processCmdline_.getByteString(index);
    }

    public static final int PID_FIELD_NUMBER = 4;
    @SuppressWarnings("serial")
    private com.google.protobuf.Internal.LongList pid_;
    /**
     * <pre>
     * For watermark based triggering or local debugging.
     * </pre>
     *
     * <code>repeated uint64 pid = 4;</code>
     * @return A list containing the pid.
     */
    @java.lang.Override
    public java.util.List<java.lang.Long>
        getPidList() {
      return pid_;
    }
    /**
     * <pre>
     * For watermark based triggering or local debugging.
     * </pre>
     *
     * <code>repeated uint64 pid = 4;</code>
     * @return The count of pid.
     */
    public int getPidCount() {
      return pid_.size();
    }
    /**
     * <pre>
     * For watermark based triggering or local debugging.
     * </pre>
     *
     * <code>repeated uint64 pid = 4;</code>
     * @param index The index of the element to return.
     * @return The pid at the given index.
     */
    public long getPid(int index) {
      return pid_.getLong(index);
    }

    public static final int TARGET_INSTALLED_BY_FIELD_NUMBER = 26;
    @SuppressWarnings("serial")
    private com.google.protobuf.LazyStringList targetInstalledBy_;
    /**
     * <pre>
     * Only profile target if it was installed by one of the packages given.
     * Special values are:
     * * &#64;system: installed on the system partition
     * * &#64;product: installed on the product partition
     * * &#64;null: sideloaded
     * Supported on Android 12+.
     * </pre>
     *
     * <code>repeated string target_installed_by = 26;</code>
     * @return A list containing the targetInstalledBy.
     */
    public com.google.protobuf.ProtocolStringList
        getTargetInstalledByList() {
      return targetInstalledBy_;
    }
    /**
     * <pre>
     * Only profile target if it was installed by one of the packages given.
     * Special values are:
     * * &#64;system: installed on the system partition
     * * &#64;product: installed on the product partition
     * * &#64;null: sideloaded
     * Supported on Android 12+.
     * </pre>
     *
     * <code>repeated string target_installed_by = 26;</code>
     * @return The count of targetInstalledBy.
     */
    public int getTargetInstalledByCount() {
      return targetInstalledBy_.size();
    }
    /**
     * <pre>
     * Only profile target if it was installed by one of the packages given.
     * Special values are:
     * * &#64;system: installed on the system partition
     * * &#64;product: installed on the product partition
     * * &#64;null: sideloaded
     * Supported on Android 12+.
     * </pre>
     *
     * <code>repeated string target_installed_by = 26;</code>
     * @param index The index of the element to return.
     * @return The targetInstalledBy at the given index.
     */
    public java.lang.String getTargetInstalledBy(int index) {
      return targetInstalledBy_.get(index);
    }
    /**
     * <pre>
     * Only profile target if it was installed by one of the packages given.
     * Special values are:
     * * &#64;system: installed on the system partition
     * * &#64;product: installed on the product partition
     * * &#64;null: sideloaded
     * Supported on Android 12+.
     * </pre>
     *
     * <code>repeated string target_installed_by = 26;</code>
     * @param index The index of the value to return.
     * @return The bytes of the targetInstalledBy at the given index.
     */
    public com.google.protobuf.ByteString
        getTargetInstalledByBytes(int index) {
      return targetInstalledBy_.getByteString(index);
    }

    public static final int HEAPS_FIELD_NUMBER = 20;
    @SuppressWarnings("serial")
    private com.google.protobuf.LazyStringList heaps_;
    /**
     * <pre>
     * Which heaps to sample, e.g. "libc.malloc". If left empty, only samples
     * "malloc".
     * Introduced in Android 12.
     * </pre>
     *
     * <code>repeated string heaps = 20;</code>
     * @return A list containing the heaps.
     */
    public com.google.protobuf.ProtocolStringList
        getHeapsList() {
      return heaps_;
    }
    /**
     * <pre>
     * Which heaps to sample, e.g. "libc.malloc". If left empty, only samples
     * "malloc".
     * Introduced in Android 12.
     * </pre>
     *
     * <code>repeated string heaps = 20;</code>
     * @return The count of heaps.
     */
    public int getHeapsCount() {
      return heaps_.size();
    }
    /**
     * <pre>
     * Which heaps to sample, e.g. "libc.malloc". If left empty, only samples
     * "malloc".
     * Introduced in Android 12.
     * </pre>
     *
     * <code>repeated string heaps = 20;</code>
     * @param index The index of the element to return.
     * @return The heaps at the given index.
     */
    public java.lang.String getHeaps(int index) {
      return heaps_.get(index);
    }
    /**
     * <pre>
     * Which heaps to sample, e.g. "libc.malloc". If left empty, only samples
     * "malloc".
     * Introduced in Android 12.
     * </pre>
     *
     * <code>repeated string heaps = 20;</code>
     * @param index The index of the value to return.
     * @return The bytes of the heaps at the given index.
     */
    public com.google.protobuf.ByteString
        getHeapsBytes(int index) {
      return heaps_.getByteString(index);
    }

    public static final int EXCLUDE_HEAPS_FIELD_NUMBER = 27;
    @SuppressWarnings("serial")
    private com.google.protobuf.LazyStringList excludeHeaps_;
    /**
     * <pre>
     * Which heaps not to sample, e.g. "libc.malloc". This is useful when used in
     * combination with all_heaps;
     * Introduced in Android 12.
     * </pre>
     *
     * <code>repeated string exclude_heaps = 27;</code>
     * @return A list containing the excludeHeaps.
     */
    public com.google.protobuf.ProtocolStringList
        getExcludeHeapsList() {
      return excludeHeaps_;
    }
    /**
     * <pre>
     * Which heaps not to sample, e.g. "libc.malloc". This is useful when used in
     * combination with all_heaps;
     * Introduced in Android 12.
     * </pre>
     *
     * <code>repeated string exclude_heaps = 27;</code>
     * @return The count of excludeHeaps.
     */
    public int getExcludeHeapsCount() {
      return excludeHeaps_.size();
    }
    /**
     * <pre>
     * Which heaps not to sample, e.g. "libc.malloc". This is useful when used in
     * combination with all_heaps;
     * Introduced in Android 12.
     * </pre>
     *
     * <code>repeated string exclude_heaps = 27;</code>
     * @param index The index of the element to return.
     * @return The excludeHeaps at the given index.
     */
    public java.lang.String getExcludeHeaps(int index) {
      return excludeHeaps_.get(index);
    }
    /**
     * <pre>
     * Which heaps not to sample, e.g. "libc.malloc". This is useful when used in
     * combination with all_heaps;
     * Introduced in Android 12.
     * </pre>
     *
     * <code>repeated string exclude_heaps = 27;</code>
     * @param index The index of the value to return.
     * @return The bytes of the excludeHeaps at the given index.
     */
    public com.google.protobuf.ByteString
        getExcludeHeapsBytes(int index) {
      return excludeHeaps_.getByteString(index);
    }

    public static final int STREAM_ALLOCATIONS_FIELD_NUMBER = 23;
    private boolean streamAllocations_ = false;
    /**
     * <code>optional bool stream_allocations = 23;</code>
     * @return Whether the streamAllocations field is set.
     */
    @java.lang.Override
    public boolean hasStreamAllocations() {
      return ((bitField0_ & 0x00000008) != 0);
    }
    /**
     * <code>optional bool stream_allocations = 23;</code>
     * @return The streamAllocations.
     */
    @java.lang.Override
    public boolean getStreamAllocations() {
      return streamAllocations_;
    }

    public static final int HEAP_SAMPLING_INTERVALS_FIELD_NUMBER = 22;
    @SuppressWarnings("serial")
    private com.google.protobuf.Internal.LongList heapSamplingIntervals_;
    /**
     * <pre>
     * If given, needs to be the same length as heaps and gives the sampling
     * interval for the respective entry in heaps.
     * Otherwise, sampling_interval_bytes is used.
     * It is recommended to set sampling_interval_bytes to a reasonable default
     * value when using this, as a value of 0 for sampling_interval_bytes will
     * crash the target process before Android 12.
     * Introduced in Android 12.
     * All values must be non-zero or the producer will not start.
     * </pre>
     *
     * <code>repeated uint64 heap_sampling_intervals = 22;</code>
     * @return A list containing the heapSamplingIntervals.
     */
    @java.lang.Override
    public java.util.List<java.lang.Long>
        getHeapSamplingIntervalsList() {
      return heapSamplingIntervals_;
    }
    /**
     * <pre>
     * If given, needs to be the same length as heaps and gives the sampling
     * interval for the respective entry in heaps.
     * Otherwise, sampling_interval_bytes is used.
     * It is recommended to set sampling_interval_bytes to a reasonable default
     * value when using this, as a value of 0 for sampling_interval_bytes will
     * crash the target process before Android 12.
     * Introduced in Android 12.
     * All values must be non-zero or the producer will not start.
     * </pre>
     *
     * <code>repeated uint64 heap_sampling_intervals = 22;</code>
     * @return The count of heapSamplingIntervals.
     */
    public int getHeapSamplingIntervalsCount() {
      return heapSamplingIntervals_.size();
    }
    /**
     * <pre>
     * If given, needs to be the same length as heaps and gives the sampling
     * interval for the respective entry in heaps.
     * Otherwise, sampling_interval_bytes is used.
     * It is recommended to set sampling_interval_bytes to a reasonable default
     * value when using this, as a value of 0 for sampling_interval_bytes will
     * crash the target process before Android 12.
     * Introduced in Android 12.
     * All values must be non-zero or the producer will not start.
     * </pre>
     *
     * <code>repeated uint64 heap_sampling_intervals = 22;</code>
     * @param index The index of the element to return.
     * @return The heapSamplingIntervals at the given index.
     */
    public long getHeapSamplingIntervals(int index) {
      return heapSamplingIntervals_.getLong(index);
    }

    public static final int ALL_HEAPS_FIELD_NUMBER = 21;
    private boolean allHeaps_ = false;
    /**
     * <pre>
     * Sample all heaps registered by target process. Introduced in Android 12.
     * </pre>
     *
     * <code>optional bool all_heaps = 21;</code>
     * @return Whether the allHeaps field is set.
     */
    @java.lang.Override
    public boolean hasAllHeaps() {
      return ((bitField0_ & 0x00000010) != 0);
    }
    /**
     * <pre>
     * Sample all heaps registered by target process. Introduced in Android 12.
     * </pre>
     *
     * <code>optional bool all_heaps = 21;</code>
     * @return The allHeaps.
     */
    @java.lang.Override
    public boolean getAllHeaps() {
      return allHeaps_;
    }

    public static final int ALL_FIELD_NUMBER = 5;
    private boolean all_ = false;
    /**
     * <pre>
     * Profile all processes eligible for profiling on the system.
     * See
     * https://perfetto.dev/docs/data-sources/native-heap-profiler#heapprofd-targets
     * for which processes are eligible.
     * On unmodified userdebug builds, this will lead to system crashes. Zygote
     * will crash when trying to launch a new process as it will have an
     * unexpected open socket to heapprofd.
     * heapprofd will likely be overloaded by the amount of data for low
     * sampling intervals.
     * </pre>
     *
     * <code>optional bool all = 5;</code>
     * @return Whether the all field is set.
     */
    @java.lang.Override
    public boolean hasAll() {
      return ((bitField0_ & 0x00000020) != 0);
    }
    /**
     * <pre>
     * Profile all processes eligible for profiling on the system.
     * See
     * https://perfetto.dev/docs/data-sources/native-heap-profiler#heapprofd-targets
     * for which processes are eligible.
     * On unmodified userdebug builds, this will lead to system crashes. Zygote
     * will crash when trying to launch a new process as it will have an
     * unexpected open socket to heapprofd.
     * heapprofd will likely be overloaded by the amount of data for low
     * sampling intervals.
     * </pre>
     *
     * <code>optional bool all = 5;</code>
     * @return The all.
     */
    @java.lang.Override
    public boolean getAll() {
      return all_;
    }

    public static final int MIN_ANONYMOUS_MEMORY_KB_FIELD_NUMBER = 15;
    private int minAnonymousMemoryKb_ = 0;
    /**
     * <pre>
     * Do not profile processes whose anon RSS + swap &lt; given value.
     * Introduced in Android 11.
     * </pre>
     *
     * <code>optional uint32 min_anonymous_memory_kb = 15;</code>
     * @return Whether the minAnonymousMemoryKb field is set.
     */
    @java.lang.Override
    public boolean hasMinAnonymousMemoryKb() {
      return ((bitField0_ & 0x00000040) != 0);
    }
    /**
     * <pre>
     * Do not profile processes whose anon RSS + swap &lt; given value.
     * Introduced in Android 11.
     * </pre>
     *
     * <code>optional uint32 min_anonymous_memory_kb = 15;</code>
     * @return The minAnonymousMemoryKb.
     */
    @java.lang.Override
    public int getMinAnonymousMemoryKb() {
      return minAnonymousMemoryKb_;
    }

    public static final int MAX_HEAPPROFD_MEMORY_KB_FIELD_NUMBER = 16;
    private int maxHeapprofdMemoryKb_ = 0;
    /**
     * <pre>
     * Stop profile if heapprofd memory usage goes beyond the given value.
     * Introduced in Android 11.
     * </pre>
     *
     * <code>optional uint32 max_heapprofd_memory_kb = 16;</code>
     * @return Whether the maxHeapprofdMemoryKb field is set.
     */
    @java.lang.Override
    public boolean hasMaxHeapprofdMemoryKb() {
      return ((bitField0_ & 0x00000080) != 0);
    }
    /**
     * <pre>
     * Stop profile if heapprofd memory usage goes beyond the given value.
     * Introduced in Android 11.
     * </pre>
     *
     * <code>optional uint32 max_heapprofd_memory_kb = 16;</code>
     * @return The maxHeapprofdMemoryKb.
     */
    @java.lang.Override
    public int getMaxHeapprofdMemoryKb() {
      return maxHeapprofdMemoryKb_;
    }

    public static final int MAX_HEAPPROFD_CPU_SECS_FIELD_NUMBER = 17;
    private long maxHeapprofdCpuSecs_ = 0L;
    /**
     * <pre>
     * Stop profile if heapprofd CPU time since start of this data-source
     * goes beyond given value.
     * Introduced in Android 11.
     * </pre>
     *
     * <code>optional uint64 max_heapprofd_cpu_secs = 17;</code>
     * @return Whether the maxHeapprofdCpuSecs field is set.
     */
    @java.lang.Override
    public boolean hasMaxHeapprofdCpuSecs() {
      return ((bitField0_ & 0x00000100) != 0);
    }
    /**
     * <pre>
     * Stop profile if heapprofd CPU time since start of this data-source
     * goes beyond given value.
     * Introduced in Android 11.
     * </pre>
     *
     * <code>optional uint64 max_heapprofd_cpu_secs = 17;</code>
     * @return The maxHeapprofdCpuSecs.
     */
    @java.lang.Override
    public long getMaxHeapprofdCpuSecs() {
      return maxHeapprofdCpuSecs_;
    }

    public static final int SKIP_SYMBOL_PREFIX_FIELD_NUMBER = 7;
    @SuppressWarnings("serial")
    private com.google.protobuf.LazyStringList skipSymbolPrefix_;
    /**
     * <pre>
     * Do not emit function names for mappings starting with this prefix.
     * E.g. /system to not emit symbols for any system libraries.
     * </pre>
     *
     * <code>repeated string skip_symbol_prefix = 7;</code>
     * @return A list containing the skipSymbolPrefix.
     */
    public com.google.protobuf.ProtocolStringList
        getSkipSymbolPrefixList() {
      return skipSymbolPrefix_;
    }
    /**
     * <pre>
     * Do not emit function names for mappings starting with this prefix.
     * E.g. /system to not emit symbols for any system libraries.
     * </pre>
     *
     * <code>repeated string skip_symbol_prefix = 7;</code>
     * @return The count of skipSymbolPrefix.
     */
    public int getSkipSymbolPrefixCount() {
      return skipSymbolPrefix_.size();
    }
    /**
     * <pre>
     * Do not emit function names for mappings starting with this prefix.
     * E.g. /system to not emit symbols for any system libraries.
     * </pre>
     *
     * <code>repeated string skip_symbol_prefix = 7;</code>
     * @param index The index of the element to return.
     * @return The skipSymbolPrefix at the given index.
     */
    public java.lang.String getSkipSymbolPrefix(int index) {
      return skipSymbolPrefix_.get(index);
    }
    /**
     * <pre>
     * Do not emit function names for mappings starting with this prefix.
     * E.g. /system to not emit symbols for any system libraries.
     * </pre>
     *
     * <code>repeated string skip_symbol_prefix = 7;</code>
     * @param index The index of the value to return.
     * @return The bytes of the skipSymbolPrefix at the given index.
     */
    public com.google.protobuf.ByteString
        getSkipSymbolPrefixBytes(int index) {
      return skipSymbolPrefix_.getByteString(index);
    }

    public static final int CONTINUOUS_DUMP_CONFIG_FIELD_NUMBER = 6;
    private perfetto.protos.HeapprofdConfigOuterClass.HeapprofdConfig.ContinuousDumpConfig continuousDumpConfig_;
    /**
     * <pre>
     * Dump at a predefined interval.
     * </pre>
     *
     * <code>optional .perfetto.protos.HeapprofdConfig.ContinuousDumpConfig continuous_dump_config = 6;</code>
     * @return Whether the continuousDumpConfig field is set.
     */
    @java.lang.Override
    public boolean hasContinuousDumpConfig() {
      return ((bitField0_ & 0x00000200) != 0);
    }
    /**
     * <pre>
     * Dump at a predefined interval.
     * </pre>
     *
     * <code>optional .perfetto.protos.HeapprofdConfig.ContinuousDumpConfig continuous_dump_config = 6;</code>
     * @return The continuousDumpConfig.
     */
    @java.lang.Override
    public perfetto.protos.HeapprofdConfigOuterClass.HeapprofdConfig.ContinuousDumpConfig getContinuousDumpConfig() {
      return continuousDumpConfig_ == null ? perfetto.protos.HeapprofdConfigOuterClass.HeapprofdConfig.ContinuousDumpConfig.getDefaultInstance() : continuousDumpConfig_;
    }
    /**
     * <pre>
     * Dump at a predefined interval.
     * </pre>
     *
     * <code>optional .perfetto.protos.HeapprofdConfig.ContinuousDumpConfig continuous_dump_config = 6;</code>
     */
    @java.lang.Override
    public perfetto.protos.HeapprofdConfigOuterClass.HeapprofdConfig.ContinuousDumpConfigOrBuilder getContinuousDumpConfigOrBuilder() {
      return continuousDumpConfig_ == null ? perfetto.protos.HeapprofdConfigOuterClass.HeapprofdConfig.ContinuousDumpConfig.getDefaultInstance() : continuousDumpConfig_;
    }

    public static final int SHMEM_SIZE_BYTES_FIELD_NUMBER = 8;
    private long shmemSizeBytes_ = 0L;
    /**
     * <pre>
     * Size of the shared memory buffer between the profiled processes and
     * heapprofd. Defaults to 8 MiB. If larger than 500 MiB, truncated to 500
     * MiB.
     * Needs to be:
     * * at least 8192,
     * * a power of two,
     * * a multiple of 4096.
     * </pre>
     *
     * <code>optional uint64 shmem_size_bytes = 8;</code>
     * @return Whether the shmemSizeBytes field is set.
     */
    @java.lang.Override
    public boolean hasShmemSizeBytes() {
      return ((bitField0_ & 0x00000400) != 0);
    }
    /**
     * <pre>
     * Size of the shared memory buffer between the profiled processes and
     * heapprofd. Defaults to 8 MiB. If larger than 500 MiB, truncated to 500
     * MiB.
     * Needs to be:
     * * at least 8192,
     * * a power of two,
     * * a multiple of 4096.
     * </pre>
     *
     * <code>optional uint64 shmem_size_bytes = 8;</code>
     * @return The shmemSizeBytes.
     */
    @java.lang.Override
    public long getShmemSizeBytes() {
      return shmemSizeBytes_;
    }

    public static final int BLOCK_CLIENT_FIELD_NUMBER = 9;
    private boolean blockClient_ = false;
    /**
     * <pre>
     * When the shmem buffer is full, block the client instead of ending the
     * trace. Use with caution as this will significantly slow down the target
     * process.
     * </pre>
     *
     * <code>optional bool block_client = 9;</code>
     * @return Whether the blockClient field is set.
     */
    @java.lang.Override
    public boolean hasBlockClient() {
      return ((bitField0_ & 0x00000800) != 0);
    }
    /**
     * <pre>
     * When the shmem buffer is full, block the client instead of ending the
     * trace. Use with caution as this will significantly slow down the target
     * process.
     * </pre>
     *
     * <code>optional bool block_client = 9;</code>
     * @return The blockClient.
     */
    @java.lang.Override
    public boolean getBlockClient() {
      return blockClient_;
    }

    public static final int BLOCK_CLIENT_TIMEOUT_US_FIELD_NUMBER = 14;
    private int blockClientTimeoutUs_ = 0;
    /**
     * <pre>
     * If set, stop the trace session after blocking the client for this
     * timeout. Needs to be larger than 100 us, otherwise no retries are done.
     * Introduced in Android 11.
     * </pre>
     *
     * <code>optional uint32 block_client_timeout_us = 14;</code>
     * @return Whether the blockClientTimeoutUs field is set.
     */
    @java.lang.Override
    public boolean hasBlockClientTimeoutUs() {
      return ((bitField0_ & 0x00001000) != 0);
    }
    /**
     * <pre>
     * If set, stop the trace session after blocking the client for this
     * timeout. Needs to be larger than 100 us, otherwise no retries are done.
     * Introduced in Android 11.
     * </pre>
     *
     * <code>optional uint32 block_client_timeout_us = 14;</code>
     * @return The blockClientTimeoutUs.
     */
    @java.lang.Override
    public int getBlockClientTimeoutUs() {
      return blockClientTimeoutUs_;
    }

    public static final int NO_STARTUP_FIELD_NUMBER = 10;
    private boolean noStartup_ = false;
    /**
     * <pre>
     * Do not profile processes from startup, only match already running
     * processes.
     * Can not be set at the same time as no_running.
     * Introduced in Android 11.
     * </pre>
     *
     * <code>optional bool no_startup = 10;</code>
     * @return Whether the noStartup field is set.
     */
    @java.lang.Override
    public boolean hasNoStartup() {
      return ((bitField0_ & 0x00002000) != 0);
    }
    /**
     * <pre>
     * Do not profile processes from startup, only match already running
     * processes.
     * Can not be set at the same time as no_running.
     * Introduced in Android 11.
     * </pre>
     *
     * <code>optional bool no_startup = 10;</code>
     * @return The noStartup.
     */
    @java.lang.Override
    public boolean getNoStartup() {
      return noStartup_;
    }

    public static final int NO_RUNNING_FIELD_NUMBER = 11;
    private boolean noRunning_ = false;
    /**
     * <pre>
     * Do not profile running processes. Only match processes on startup.
     * Can not be set at the same time as no_startup.
     * Introduced in Android 11.
     * </pre>
     *
     * <code>optional bool no_running = 11;</code>
     * @return Whether the noRunning field is set.
     */
    @java.lang.Override
    public boolean hasNoRunning() {
      return ((bitField0_ & 0x00004000) != 0);
    }
    /**
     * <pre>
     * Do not profile running processes. Only match processes on startup.
     * Can not be set at the same time as no_startup.
     * Introduced in Android 11.
     * </pre>
     *
     * <code>optional bool no_running = 11;</code>
     * @return The noRunning.
     */
    @java.lang.Override
    public boolean getNoRunning() {
      return noRunning_;
    }

    public static final int DUMP_AT_MAX_FIELD_NUMBER = 13;
    private boolean dumpAtMax_ = false;
    /**
     * <pre>
     * Cause heapprofd to emit a single dump at the end, showing the memory usage
     * at the point in time when the sampled heap usage of the process was at its
     * maximum. This causes ProfilePacket.HeapSample.self_max to be set, and
     * self_allocated and self_freed to not be set.
     * Introduced in Android 11.
     * </pre>
     *
     * <code>optional bool dump_at_max = 13;</code>
     * @return Whether the dumpAtMax field is set.
     */
    @java.lang.Override
    public boolean hasDumpAtMax() {
      return ((bitField0_ & 0x00008000) != 0);
    }
    /**
     * <pre>
     * Cause heapprofd to emit a single dump at the end, showing the memory usage
     * at the point in time when the sampled heap usage of the process was at its
     * maximum. This causes ProfilePacket.HeapSample.self_max to be set, and
     * self_allocated and self_freed to not be set.
     * Introduced in Android 11.
     * </pre>
     *
     * <code>optional bool dump_at_max = 13;</code>
     * @return The dumpAtMax.
     */
    @java.lang.Override
    public boolean getDumpAtMax() {
      return dumpAtMax_;
    }

    public static final int DISABLE_FORK_TEARDOWN_FIELD_NUMBER = 18;
    private boolean disableForkTeardown_ = false;
    /**
     * <pre>
     * Escape hatch if the session is being torn down because of a forked child
     * that shares memory space, but is not correctly identified as a vforked
     * child.
     * Introduced in Android 11.
     * </pre>
     *
     * <code>optional bool disable_fork_teardown = 18;</code>
     * @return Whether the disableForkTeardown field is set.
     */
    @java.lang.Override
    public boolean hasDisableForkTeardown() {
      return ((bitField0_ & 0x00010000) != 0);
    }
    /**
     * <pre>
     * Escape hatch if the session is being torn down because of a forked child
     * that shares memory space, but is not correctly identified as a vforked
     * child.
     * Introduced in Android 11.
     * </pre>
     *
     * <code>optional bool disable_fork_teardown = 18;</code>
     * @return The disableForkTeardown.
     */
    @java.lang.Override
    public boolean getDisableForkTeardown() {
      return disableForkTeardown_;
    }

    public static final int DISABLE_VFORK_DETECTION_FIELD_NUMBER = 19;
    private boolean disableVforkDetection_ = false;
    /**
     * <pre>
     * We try to automatically detect when a target applicatation vforks but then
     * does a memory allocation (or free). This auto-detection can be disabled
     * with this.
     * Introduced in Android 11.
     * </pre>
     *
     * <code>optional bool disable_vfork_detection = 19;</code>
     * @return Whether the disableVforkDetection field is set.
     */
    @java.lang.Override
    public boolean hasDisableVforkDetection() {
      return ((bitField0_ & 0x00020000) != 0);
    }
    /**
     * <pre>
     * We try to automatically detect when a target applicatation vforks but then
     * does a memory allocation (or free). This auto-detection can be disabled
     * with this.
     * Introduced in Android 11.
     * </pre>
     *
     * <code>optional bool disable_vfork_detection = 19;</code>
     * @return The disableVforkDetection.
     */
    @java.lang.Override
    public boolean getDisableVforkDetection() {
      return disableVforkDetection_;
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (((bitField0_ & 0x00000001) != 0)) {
        output.writeUInt64(1, samplingIntervalBytes_);
      }
      for (int i = 0; i < processCmdline_.size(); i++) {
        com.google.protobuf.GeneratedMessageV3.writeString(output, 2, processCmdline_.getRaw(i));
      }
      for (int i = 0; i < pid_.size(); i++) {
        output.writeUInt64(4, pid_.getLong(i));
      }
      if (((bitField0_ & 0x00000020) != 0)) {
        output.writeBool(5, all_);
      }
      if (((bitField0_ & 0x00000200) != 0)) {
        output.writeMessage(6, getContinuousDumpConfig());
      }
      for (int i = 0; i < skipSymbolPrefix_.size(); i++) {
        com.google.protobuf.GeneratedMessageV3.writeString(output, 7, skipSymbolPrefix_.getRaw(i));
      }
      if (((bitField0_ & 0x00000400) != 0)) {
        output.writeUInt64(8, shmemSizeBytes_);
      }
      if (((bitField0_ & 0x00000800) != 0)) {
        output.writeBool(9, blockClient_);
      }
      if (((bitField0_ & 0x00002000) != 0)) {
        output.writeBool(10, noStartup_);
      }
      if (((bitField0_ & 0x00004000) != 0)) {
        output.writeBool(11, noRunning_);
      }
      if (((bitField0_ & 0x00008000) != 0)) {
        output.writeBool(13, dumpAtMax_);
      }
      if (((bitField0_ & 0x00001000) != 0)) {
        output.writeUInt32(14, blockClientTimeoutUs_);
      }
      if (((bitField0_ & 0x00000040) != 0)) {
        output.writeUInt32(15, minAnonymousMemoryKb_);
      }
      if (((bitField0_ & 0x00000080) != 0)) {
        output.writeUInt32(16, maxHeapprofdMemoryKb_);
      }
      if (((bitField0_ & 0x00000100) != 0)) {
        output.writeUInt64(17, maxHeapprofdCpuSecs_);
      }
      if (((bitField0_ & 0x00010000) != 0)) {
        output.writeBool(18, disableForkTeardown_);
      }
      if (((bitField0_ & 0x00020000) != 0)) {
        output.writeBool(19, disableVforkDetection_);
      }
      for (int i = 0; i < heaps_.size(); i++) {
        com.google.protobuf.GeneratedMessageV3.writeString(output, 20, heaps_.getRaw(i));
      }
      if (((bitField0_ & 0x00000010) != 0)) {
        output.writeBool(21, allHeaps_);
      }
      for (int i = 0; i < heapSamplingIntervals_.size(); i++) {
        output.writeUInt64(22, heapSamplingIntervals_.getLong(i));
      }
      if (((bitField0_ & 0x00000008) != 0)) {
        output.writeBool(23, streamAllocations_);
      }
      if (((bitField0_ & 0x00000002) != 0)) {
        output.writeUInt64(24, adaptiveSamplingShmemThreshold_);
      }
      if (((bitField0_ & 0x00000004) != 0)) {
        output.writeUInt64(25, adaptiveSamplingMaxSamplingIntervalBytes_);
      }
      for (int i = 0; i < targetInstalledBy_.size(); i++) {
        com.google.protobuf.GeneratedMessageV3.writeString(output, 26, targetInstalledBy_.getRaw(i));
      }
      for (int i = 0; i < excludeHeaps_.size(); i++) {
        com.google.protobuf.GeneratedMessageV3.writeString(output, 27, excludeHeaps_.getRaw(i));
      }
      getUnknownFields().writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) != 0)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt64Size(1, samplingIntervalBytes_);
      }
      {
        int dataSize = 0;
        for (int i = 0; i < processCmdline_.size(); i++) {
          dataSize += computeStringSizeNoTag(processCmdline_.getRaw(i));
        }
        size += dataSize;
        size += 1 * getProcessCmdlineList().size();
      }
      {
        int dataSize = 0;
        for (int i = 0; i < pid_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeUInt64SizeNoTag(pid_.getLong(i));
        }
        size += dataSize;
        size += 1 * getPidList().size();
      }
      if (((bitField0_ & 0x00000020) != 0)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(5, all_);
      }
      if (((bitField0_ & 0x00000200) != 0)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(6, getContinuousDumpConfig());
      }
      {
        int dataSize = 0;
        for (int i = 0; i < skipSymbolPrefix_.size(); i++) {
          dataSize += computeStringSizeNoTag(skipSymbolPrefix_.getRaw(i));
        }
        size += dataSize;
        size += 1 * getSkipSymbolPrefixList().size();
      }
      if (((bitField0_ & 0x00000400) != 0)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt64Size(8, shmemSizeBytes_);
      }
      if (((bitField0_ & 0x00000800) != 0)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(9, blockClient_);
      }
      if (((bitField0_ & 0x00002000) != 0)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(10, noStartup_);
      }
      if (((bitField0_ & 0x00004000) != 0)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(11, noRunning_);
      }
      if (((bitField0_ & 0x00008000) != 0)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(13, dumpAtMax_);
      }
      if (((bitField0_ & 0x00001000) != 0)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(14, blockClientTimeoutUs_);
      }
      if (((bitField0_ & 0x00000040) != 0)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(15, minAnonymousMemoryKb_);
      }
      if (((bitField0_ & 0x00000080) != 0)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(16, maxHeapprofdMemoryKb_);
      }
      if (((bitField0_ & 0x00000100) != 0)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt64Size(17, maxHeapprofdCpuSecs_);
      }
      if (((bitField0_ & 0x00010000) != 0)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(18, disableForkTeardown_);
      }
      if (((bitField0_ & 0x00020000) != 0)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(19, disableVforkDetection_);
      }
      {
        int dataSize = 0;
        for (int i = 0; i < heaps_.size(); i++) {
          dataSize += computeStringSizeNoTag(heaps_.getRaw(i));
        }
        size += dataSize;
        size += 2 * getHeapsList().size();
      }
      if (((bitField0_ & 0x00000010) != 0)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(21, allHeaps_);
      }
      {
        int dataSize = 0;
        for (int i = 0; i < heapSamplingIntervals_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeUInt64SizeNoTag(heapSamplingIntervals_.getLong(i));
        }
        size += dataSize;
        size += 2 * getHeapSamplingIntervalsList().size();
      }
      if (((bitField0_ & 0x00000008) != 0)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(23, streamAllocations_);
      }
      if (((bitField0_ & 0x00000002) != 0)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt64Size(24, adaptiveSamplingShmemThreshold_);
      }
      if (((bitField0_ & 0x00000004) != 0)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt64Size(25, adaptiveSamplingMaxSamplingIntervalBytes_);
      }
      {
        int dataSize = 0;
        for (int i = 0; i < targetInstalledBy_.size(); i++) {
          dataSize += computeStringSizeNoTag(targetInstalledBy_.getRaw(i));
        }
        size += dataSize;
        size += 2 * getTargetInstalledByList().size();
      }
      {
        int dataSize = 0;
        for (int i = 0; i < excludeHeaps_.size(); i++) {
          dataSize += computeStringSizeNoTag(excludeHeaps_.getRaw(i));
        }
        size += dataSize;
        size += 2 * getExcludeHeapsList().size();
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof perfetto.protos.HeapprofdConfigOuterClass.HeapprofdConfig)) {
        return super.equals(obj);
      }
      perfetto.protos.HeapprofdConfigOuterClass.HeapprofdConfig other = (perfetto.protos.HeapprofdConfigOuterClass.HeapprofdConfig) obj;

      if (hasSamplingIntervalBytes() != other.hasSamplingIntervalBytes()) return false;
      if (hasSamplingIntervalBytes()) {
        if (getSamplingIntervalBytes()
            != other.getSamplingIntervalBytes()) return false;
      }
      if (hasAdaptiveSamplingShmemThreshold() != other.hasAdaptiveSamplingShmemThreshold()) return false;
      if (hasAdaptiveSamplingShmemThreshold()) {
        if (getAdaptiveSamplingShmemThreshold()
            != other.getAdaptiveSamplingShmemThreshold()) return false;
      }
      if (hasAdaptiveSamplingMaxSamplingIntervalBytes() != other.hasAdaptiveSamplingMaxSamplingIntervalBytes()) return false;
      if (hasAdaptiveSamplingMaxSamplingIntervalBytes()) {
        if (getAdaptiveSamplingMaxSamplingIntervalBytes()
            != other.getAdaptiveSamplingMaxSamplingIntervalBytes()) return false;
      }
      if (!getProcessCmdlineList()
          .equals(other.getProcessCmdlineList())) return false;
      if (!getPidList()
          .equals(other.getPidList())) return false;
      if (!getTargetInstalledByList()
          .equals(other.getTargetInstalledByList())) return false;
      if (!getHeapsList()
          .equals(other.getHeapsList())) return false;
      if (!getExcludeHeapsList()
          .equals(other.getExcludeHeapsList())) return false;
      if (hasStreamAllocations() != other.hasStreamAllocations()) return false;
      if (hasStreamAllocations()) {
        if (getStreamAllocations()
            != other.getStreamAllocations()) return false;
      }
      if (!getHeapSamplingIntervalsList()
          .equals(other.getHeapSamplingIntervalsList())) return false;
      if (hasAllHeaps() != other.hasAllHeaps()) return false;
      if (hasAllHeaps()) {
        if (getAllHeaps()
            != other.getAllHeaps()) return false;
      }
      if (hasAll() != other.hasAll()) return false;
      if (hasAll()) {
        if (getAll()
            != other.getAll()) return false;
      }
      if (hasMinAnonymousMemoryKb() != other.hasMinAnonymousMemoryKb()) return false;
      if (hasMinAnonymousMemoryKb()) {
        if (getMinAnonymousMemoryKb()
            != other.getMinAnonymousMemoryKb()) return false;
      }
      if (hasMaxHeapprofdMemoryKb() != other.hasMaxHeapprofdMemoryKb()) return false;
      if (hasMaxHeapprofdMemoryKb()) {
        if (getMaxHeapprofdMemoryKb()
            != other.getMaxHeapprofdMemoryKb()) return false;
      }
      if (hasMaxHeapprofdCpuSecs() != other.hasMaxHeapprofdCpuSecs()) return false;
      if (hasMaxHeapprofdCpuSecs()) {
        if (getMaxHeapprofdCpuSecs()
            != other.getMaxHeapprofdCpuSecs()) return false;
      }
      if (!getSkipSymbolPrefixList()
          .equals(other.getSkipSymbolPrefixList())) return false;
      if (hasContinuousDumpConfig() != other.hasContinuousDumpConfig()) return false;
      if (hasContinuousDumpConfig()) {
        if (!getContinuousDumpConfig()
            .equals(other.getContinuousDumpConfig())) return false;
      }
      if (hasShmemSizeBytes() != other.hasShmemSizeBytes()) return false;
      if (hasShmemSizeBytes()) {
        if (getShmemSizeBytes()
            != other.getShmemSizeBytes()) return false;
      }
      if (hasBlockClient() != other.hasBlockClient()) return false;
      if (hasBlockClient()) {
        if (getBlockClient()
            != other.getBlockClient()) return false;
      }
      if (hasBlockClientTimeoutUs() != other.hasBlockClientTimeoutUs()) return false;
      if (hasBlockClientTimeoutUs()) {
        if (getBlockClientTimeoutUs()
            != other.getBlockClientTimeoutUs()) return false;
      }
      if (hasNoStartup() != other.hasNoStartup()) return false;
      if (hasNoStartup()) {
        if (getNoStartup()
            != other.getNoStartup()) return false;
      }
      if (hasNoRunning() != other.hasNoRunning()) return false;
      if (hasNoRunning()) {
        if (getNoRunning()
            != other.getNoRunning()) return false;
      }
      if (hasDumpAtMax() != other.hasDumpAtMax()) return false;
      if (hasDumpAtMax()) {
        if (getDumpAtMax()
            != other.getDumpAtMax()) return false;
      }
      if (hasDisableForkTeardown() != other.hasDisableForkTeardown()) return false;
      if (hasDisableForkTeardown()) {
        if (getDisableForkTeardown()
            != other.getDisableForkTeardown()) return false;
      }
      if (hasDisableVforkDetection() != other.hasDisableVforkDetection()) return false;
      if (hasDisableVforkDetection()) {
        if (getDisableVforkDetection()
            != other.getDisableVforkDetection()) return false;
      }
      if (!getUnknownFields().equals(other.getUnknownFields())) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      if (hasSamplingIntervalBytes()) {
        hash = (37 * hash) + SAMPLING_INTERVAL_BYTES_FIELD_NUMBER;
        hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
            getSamplingIntervalBytes());
      }
      if (hasAdaptiveSamplingShmemThreshold()) {
        hash = (37 * hash) + ADAPTIVE_SAMPLING_SHMEM_THRESHOLD_FIELD_NUMBER;
        hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
            getAdaptiveSamplingShmemThreshold());
      }
      if (hasAdaptiveSamplingMaxSamplingIntervalBytes()) {
        hash = (37 * hash) + ADAPTIVE_SAMPLING_MAX_SAMPLING_INTERVAL_BYTES_FIELD_NUMBER;
        hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
            getAdaptiveSamplingMaxSamplingIntervalBytes());
      }
      if (getProcessCmdlineCount() > 0) {
        hash = (37 * hash) + PROCESS_CMDLINE_FIELD_NUMBER;
        hash = (53 * hash) + getProcessCmdlineList().hashCode();
      }
      if (getPidCount() > 0) {
        hash = (37 * hash) + PID_FIELD_NUMBER;
        hash = (53 * hash) + getPidList().hashCode();
      }
      if (getTargetInstalledByCount() > 0) {
        hash = (37 * hash) + TARGET_INSTALLED_BY_FIELD_NUMBER;
        hash = (53 * hash) + getTargetInstalledByList().hashCode();
      }
      if (getHeapsCount() > 0) {
        hash = (37 * hash) + HEAPS_FIELD_NUMBER;
        hash = (53 * hash) + getHeapsList().hashCode();
      }
      if (getExcludeHeapsCount() > 0) {
        hash = (37 * hash) + EXCLUDE_HEAPS_FIELD_NUMBER;
        hash = (53 * hash) + getExcludeHeapsList().hashCode();
      }
      if (hasStreamAllocations()) {
        hash = (37 * hash) + STREAM_ALLOCATIONS_FIELD_NUMBER;
        hash = (53 * hash) + com.google.protobuf.Internal.hashBoolean(
            getStreamAllocations());
      }
      if (getHeapSamplingIntervalsCount() > 0) {
        hash = (37 * hash) + HEAP_SAMPLING_INTERVALS_FIELD_NUMBER;
        hash = (53 * hash) + getHeapSamplingIntervalsList().hashCode();
      }
      if (hasAllHeaps()) {
        hash = (37 * hash) + ALL_HEAPS_FIELD_NUMBER;
        hash = (53 * hash) + com.google.protobuf.Internal.hashBoolean(
            getAllHeaps());
      }
      if (hasAll()) {
        hash = (37 * hash) + ALL_FIELD_NUMBER;
        hash = (53 * hash) + com.google.protobuf.Internal.hashBoolean(
            getAll());
      }
      if (hasMinAnonymousMemoryKb()) {
        hash = (37 * hash) + MIN_ANONYMOUS_MEMORY_KB_FIELD_NUMBER;
        hash = (53 * hash) + getMinAnonymousMemoryKb();
      }
      if (hasMaxHeapprofdMemoryKb()) {
        hash = (37 * hash) + MAX_HEAPPROFD_MEMORY_KB_FIELD_NUMBER;
        hash = (53 * hash) + getMaxHeapprofdMemoryKb();
      }
      if (hasMaxHeapprofdCpuSecs()) {
        hash = (37 * hash) + MAX_HEAPPROFD_CPU_SECS_FIELD_NUMBER;
        hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
            getMaxHeapprofdCpuSecs());
      }
      if (getSkipSymbolPrefixCount() > 0) {
        hash = (37 * hash) + SKIP_SYMBOL_PREFIX_FIELD_NUMBER;
        hash = (53 * hash) + getSkipSymbolPrefixList().hashCode();
      }
      if (hasContinuousDumpConfig()) {
        hash = (37 * hash) + CONTINUOUS_DUMP_CONFIG_FIELD_NUMBER;
        hash = (53 * hash) + getContinuousDumpConfig().hashCode();
      }
      if (hasShmemSizeBytes()) {
        hash = (37 * hash) + SHMEM_SIZE_BYTES_FIELD_NUMBER;
        hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
            getShmemSizeBytes());
      }
      if (hasBlockClient()) {
        hash = (37 * hash) + BLOCK_CLIENT_FIELD_NUMBER;
        hash = (53 * hash) + com.google.protobuf.Internal.hashBoolean(
            getBlockClient());
      }
      if (hasBlockClientTimeoutUs()) {
        hash = (37 * hash) + BLOCK_CLIENT_TIMEOUT_US_FIELD_NUMBER;
        hash = (53 * hash) + getBlockClientTimeoutUs();
      }
      if (hasNoStartup()) {
        hash = (37 * hash) + NO_STARTUP_FIELD_NUMBER;
        hash = (53 * hash) + com.google.protobuf.Internal.hashBoolean(
            getNoStartup());
      }
      if (hasNoRunning()) {
        hash = (37 * hash) + NO_RUNNING_FIELD_NUMBER;
        hash = (53 * hash) + com.google.protobuf.Internal.hashBoolean(
            getNoRunning());
      }
      if (hasDumpAtMax()) {
        hash = (37 * hash) + DUMP_AT_MAX_FIELD_NUMBER;
        hash = (53 * hash) + com.google.protobuf.Internal.hashBoolean(
            getDumpAtMax());
      }
      if (hasDisableForkTeardown()) {
        hash = (37 * hash) + DISABLE_FORK_TEARDOWN_FIELD_NUMBER;
        hash = (53 * hash) + com.google.protobuf.Internal.hashBoolean(
            getDisableForkTeardown());
      }
      if (hasDisableVforkDetection()) {
        hash = (37 * hash) + DISABLE_VFORK_DETECTION_FIELD_NUMBER;
        hash = (53 * hash) + com.google.protobuf.Internal.hashBoolean(
            getDisableVforkDetection());
      }
      hash = (29 * hash) + getUnknownFields().hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static perfetto.protos.HeapprofdConfigOuterClass.HeapprofdConfig parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static perfetto.protos.HeapprofdConfigOuterClass.HeapprofdConfig parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static perfetto.protos.HeapprofdConfigOuterClass.HeapprofdConfig parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static perfetto.protos.HeapprofdConfigOuterClass.HeapprofdConfig parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static perfetto.protos.HeapprofdConfigOuterClass.HeapprofdConfig parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static perfetto.protos.HeapprofdConfigOuterClass.HeapprofdConfig parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static perfetto.protos.HeapprofdConfigOuterClass.HeapprofdConfig parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static perfetto.protos.HeapprofdConfigOuterClass.HeapprofdConfig parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static perfetto.protos.HeapprofdConfigOuterClass.HeapprofdConfig parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static perfetto.protos.HeapprofdConfigOuterClass.HeapprofdConfig parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static perfetto.protos.HeapprofdConfigOuterClass.HeapprofdConfig parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static perfetto.protos.HeapprofdConfigOuterClass.HeapprofdConfig parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(perfetto.protos.HeapprofdConfigOuterClass.HeapprofdConfig prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * <pre>
     * Configuration for go/heapprofd.
     * Next id: 27
     * </pre>
     *
     * Protobuf type {@code perfetto.protos.HeapprofdConfig}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:perfetto.protos.HeapprofdConfig)
        perfetto.protos.HeapprofdConfigOuterClass.HeapprofdConfigOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return perfetto.protos.HeapprofdConfigOuterClass.internal_static_perfetto_protos_HeapprofdConfig_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return perfetto.protos.HeapprofdConfigOuterClass.internal_static_perfetto_protos_HeapprofdConfig_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                perfetto.protos.HeapprofdConfigOuterClass.HeapprofdConfig.class, perfetto.protos.HeapprofdConfigOuterClass.HeapprofdConfig.Builder.class);
      }

      // Construct using perfetto.protos.HeapprofdConfigOuterClass.HeapprofdConfig.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
          getContinuousDumpConfigFieldBuilder();
        }
      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        bitField0_ = 0;
        samplingIntervalBytes_ = 0L;
        adaptiveSamplingShmemThreshold_ = 0L;
        adaptiveSamplingMaxSamplingIntervalBytes_ = 0L;
        processCmdline_ = com.google.protobuf.LazyStringArrayList.EMPTY;
        bitField0_ = (bitField0_ & ~0x00000008);
        pid_ = emptyLongList();
        targetInstalledBy_ = com.google.protobuf.LazyStringArrayList.EMPTY;
        bitField0_ = (bitField0_ & ~0x00000020);
        heaps_ = com.google.protobuf.LazyStringArrayList.EMPTY;
        bitField0_ = (bitField0_ & ~0x00000040);
        excludeHeaps_ = com.google.protobuf.LazyStringArrayList.EMPTY;
        bitField0_ = (bitField0_ & ~0x00000080);
        streamAllocations_ = false;
        heapSamplingIntervals_ = emptyLongList();
        allHeaps_ = false;
        all_ = false;
        minAnonymousMemoryKb_ = 0;
        maxHeapprofdMemoryKb_ = 0;
        maxHeapprofdCpuSecs_ = 0L;
        skipSymbolPrefix_ = com.google.protobuf.LazyStringArrayList.EMPTY;
        bitField0_ = (bitField0_ & ~0x00008000);
        continuousDumpConfig_ = null;
        if (continuousDumpConfigBuilder_ != null) {
          continuousDumpConfigBuilder_.dispose();
          continuousDumpConfigBuilder_ = null;
        }
        shmemSizeBytes_ = 0L;
        blockClient_ = false;
        blockClientTimeoutUs_ = 0;
        noStartup_ = false;
        noRunning_ = false;
        dumpAtMax_ = false;
        disableForkTeardown_ = false;
        disableVforkDetection_ = false;
        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return perfetto.protos.HeapprofdConfigOuterClass.internal_static_perfetto_protos_HeapprofdConfig_descriptor;
      }

      @java.lang.Override
      public perfetto.protos.HeapprofdConfigOuterClass.HeapprofdConfig getDefaultInstanceForType() {
        return perfetto.protos.HeapprofdConfigOuterClass.HeapprofdConfig.getDefaultInstance();
      }

      @java.lang.Override
      public perfetto.protos.HeapprofdConfigOuterClass.HeapprofdConfig build() {
        perfetto.protos.HeapprofdConfigOuterClass.HeapprofdConfig result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public perfetto.protos.HeapprofdConfigOuterClass.HeapprofdConfig buildPartial() {
        perfetto.protos.HeapprofdConfigOuterClass.HeapprofdConfig result = new perfetto.protos.HeapprofdConfigOuterClass.HeapprofdConfig(this);
        buildPartialRepeatedFields(result);
        if (bitField0_ != 0) { buildPartial0(result); }
        onBuilt();
        return result;
      }

      private void buildPartialRepeatedFields(perfetto.protos.HeapprofdConfigOuterClass.HeapprofdConfig result) {
        if (((bitField0_ & 0x00000008) != 0)) {
          processCmdline_ = processCmdline_.getUnmodifiableView();
          bitField0_ = (bitField0_ & ~0x00000008);
        }
        result.processCmdline_ = processCmdline_;
        if (((bitField0_ & 0x00000010) != 0)) {
          pid_.makeImmutable();
          bitField0_ = (bitField0_ & ~0x00000010);
        }
        result.pid_ = pid_;
        if (((bitField0_ & 0x00000020) != 0)) {
          targetInstalledBy_ = targetInstalledBy_.getUnmodifiableView();
          bitField0_ = (bitField0_ & ~0x00000020);
        }
        result.targetInstalledBy_ = targetInstalledBy_;
        if (((bitField0_ & 0x00000040) != 0)) {
          heaps_ = heaps_.getUnmodifiableView();
          bitField0_ = (bitField0_ & ~0x00000040);
        }
        result.heaps_ = heaps_;
        if (((bitField0_ & 0x00000080) != 0)) {
          excludeHeaps_ = excludeHeaps_.getUnmodifiableView();
          bitField0_ = (bitField0_ & ~0x00000080);
        }
        result.excludeHeaps_ = excludeHeaps_;
        if (((bitField0_ & 0x00000200) != 0)) {
          heapSamplingIntervals_.makeImmutable();
          bitField0_ = (bitField0_ & ~0x00000200);
        }
        result.heapSamplingIntervals_ = heapSamplingIntervals_;
        if (((bitField0_ & 0x00008000) != 0)) {
          skipSymbolPrefix_ = skipSymbolPrefix_.getUnmodifiableView();
          bitField0_ = (bitField0_ & ~0x00008000);
        }
        result.skipSymbolPrefix_ = skipSymbolPrefix_;
      }

      private void buildPartial0(perfetto.protos.HeapprofdConfigOuterClass.HeapprofdConfig result) {
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) != 0)) {
          result.samplingIntervalBytes_ = samplingIntervalBytes_;
          to_bitField0_ |= 0x00000001;
        }
        if (((from_bitField0_ & 0x00000002) != 0)) {
          result.adaptiveSamplingShmemThreshold_ = adaptiveSamplingShmemThreshold_;
          to_bitField0_ |= 0x00000002;
        }
        if (((from_bitField0_ & 0x00000004) != 0)) {
          result.adaptiveSamplingMaxSamplingIntervalBytes_ = adaptiveSamplingMaxSamplingIntervalBytes_;
          to_bitField0_ |= 0x00000004;
        }
        if (((from_bitField0_ & 0x00000100) != 0)) {
          result.streamAllocations_ = streamAllocations_;
          to_bitField0_ |= 0x00000008;
        }
        if (((from_bitField0_ & 0x00000400) != 0)) {
          result.allHeaps_ = allHeaps_;
          to_bitField0_ |= 0x00000010;
        }
        if (((from_bitField0_ & 0x00000800) != 0)) {
          result.all_ = all_;
          to_bitField0_ |= 0x00000020;
        }
        if (((from_bitField0_ & 0x00001000) != 0)) {
          result.minAnonymousMemoryKb_ = minAnonymousMemoryKb_;
          to_bitField0_ |= 0x00000040;
        }
        if (((from_bitField0_ & 0x00002000) != 0)) {
          result.maxHeapprofdMemoryKb_ = maxHeapprofdMemoryKb_;
          to_bitField0_ |= 0x00000080;
        }
        if (((from_bitField0_ & 0x00004000) != 0)) {
          result.maxHeapprofdCpuSecs_ = maxHeapprofdCpuSecs_;
          to_bitField0_ |= 0x00000100;
        }
        if (((from_bitField0_ & 0x00010000) != 0)) {
          result.continuousDumpConfig_ = continuousDumpConfigBuilder_ == null
              ? continuousDumpConfig_
              : continuousDumpConfigBuilder_.build();
          to_bitField0_ |= 0x00000200;
        }
        if (((from_bitField0_ & 0x00020000) != 0)) {
          result.shmemSizeBytes_ = shmemSizeBytes_;
          to_bitField0_ |= 0x00000400;
        }
        if (((from_bitField0_ & 0x00040000) != 0)) {
          result.blockClient_ = blockClient_;
          to_bitField0_ |= 0x00000800;
        }
        if (((from_bitField0_ & 0x00080000) != 0)) {
          result.blockClientTimeoutUs_ = blockClientTimeoutUs_;
          to_bitField0_ |= 0x00001000;
        }
        if (((from_bitField0_ & 0x00100000) != 0)) {
          result.noStartup_ = noStartup_;
          to_bitField0_ |= 0x00002000;
        }
        if (((from_bitField0_ & 0x00200000) != 0)) {
          result.noRunning_ = noRunning_;
          to_bitField0_ |= 0x00004000;
        }
        if (((from_bitField0_ & 0x00400000) != 0)) {
          result.dumpAtMax_ = dumpAtMax_;
          to_bitField0_ |= 0x00008000;
        }
        if (((from_bitField0_ & 0x00800000) != 0)) {
          result.disableForkTeardown_ = disableForkTeardown_;
          to_bitField0_ |= 0x00010000;
        }
        if (((from_bitField0_ & 0x01000000) != 0)) {
          result.disableVforkDetection_ = disableVforkDetection_;
          to_bitField0_ |= 0x00020000;
        }
        result.bitField0_ |= to_bitField0_;
      }

      @java.lang.Override
      public Builder clone() {
        return super.clone();
      }
      @java.lang.Override
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.setField(field, value);
      }
      @java.lang.Override
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return super.clearField(field);
      }
      @java.lang.Override
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return super.clearOneof(oneof);
      }
      @java.lang.Override
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, java.lang.Object value) {
        return super.setRepeatedField(field, index, value);
      }
      @java.lang.Override
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.addRepeatedField(field, value);
      }
      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof perfetto.protos.HeapprofdConfigOuterClass.HeapprofdConfig) {
          return mergeFrom((perfetto.protos.HeapprofdConfigOuterClass.HeapprofdConfig)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(perfetto.protos.HeapprofdConfigOuterClass.HeapprofdConfig other) {
        if (other == perfetto.protos.HeapprofdConfigOuterClass.HeapprofdConfig.getDefaultInstance()) return this;
        if (other.hasSamplingIntervalBytes()) {
          setSamplingIntervalBytes(other.getSamplingIntervalBytes());
        }
        if (other.hasAdaptiveSamplingShmemThreshold()) {
          setAdaptiveSamplingShmemThreshold(other.getAdaptiveSamplingShmemThreshold());
        }
        if (other.hasAdaptiveSamplingMaxSamplingIntervalBytes()) {
          setAdaptiveSamplingMaxSamplingIntervalBytes(other.getAdaptiveSamplingMaxSamplingIntervalBytes());
        }
        if (!other.processCmdline_.isEmpty()) {
          if (processCmdline_.isEmpty()) {
            processCmdline_ = other.processCmdline_;
            bitField0_ = (bitField0_ & ~0x00000008);
          } else {
            ensureProcessCmdlineIsMutable();
            processCmdline_.addAll(other.processCmdline_);
          }
          onChanged();
        }
        if (!other.pid_.isEmpty()) {
          if (pid_.isEmpty()) {
            pid_ = other.pid_;
            bitField0_ = (bitField0_ & ~0x00000010);
          } else {
            ensurePidIsMutable();
            pid_.addAll(other.pid_);
          }
          onChanged();
        }
        if (!other.targetInstalledBy_.isEmpty()) {
          if (targetInstalledBy_.isEmpty()) {
            targetInstalledBy_ = other.targetInstalledBy_;
            bitField0_ = (bitField0_ & ~0x00000020);
          } else {
            ensureTargetInstalledByIsMutable();
            targetInstalledBy_.addAll(other.targetInstalledBy_);
          }
          onChanged();
        }
        if (!other.heaps_.isEmpty()) {
          if (heaps_.isEmpty()) {
            heaps_ = other.heaps_;
            bitField0_ = (bitField0_ & ~0x00000040);
          } else {
            ensureHeapsIsMutable();
            heaps_.addAll(other.heaps_);
          }
          onChanged();
        }
        if (!other.excludeHeaps_.isEmpty()) {
          if (excludeHeaps_.isEmpty()) {
            excludeHeaps_ = other.excludeHeaps_;
            bitField0_ = (bitField0_ & ~0x00000080);
          } else {
            ensureExcludeHeapsIsMutable();
            excludeHeaps_.addAll(other.excludeHeaps_);
          }
          onChanged();
        }
        if (other.hasStreamAllocations()) {
          setStreamAllocations(other.getStreamAllocations());
        }
        if (!other.heapSamplingIntervals_.isEmpty()) {
          if (heapSamplingIntervals_.isEmpty()) {
            heapSamplingIntervals_ = other.heapSamplingIntervals_;
            bitField0_ = (bitField0_ & ~0x00000200);
          } else {
            ensureHeapSamplingIntervalsIsMutable();
            heapSamplingIntervals_.addAll(other.heapSamplingIntervals_);
          }
          onChanged();
        }
        if (other.hasAllHeaps()) {
          setAllHeaps(other.getAllHeaps());
        }
        if (other.hasAll()) {
          setAll(other.getAll());
        }
        if (other.hasMinAnonymousMemoryKb()) {
          setMinAnonymousMemoryKb(other.getMinAnonymousMemoryKb());
        }
        if (other.hasMaxHeapprofdMemoryKb()) {
          setMaxHeapprofdMemoryKb(other.getMaxHeapprofdMemoryKb());
        }
        if (other.hasMaxHeapprofdCpuSecs()) {
          setMaxHeapprofdCpuSecs(other.getMaxHeapprofdCpuSecs());
        }
        if (!other.skipSymbolPrefix_.isEmpty()) {
          if (skipSymbolPrefix_.isEmpty()) {
            skipSymbolPrefix_ = other.skipSymbolPrefix_;
            bitField0_ = (bitField0_ & ~0x00008000);
          } else {
            ensureSkipSymbolPrefixIsMutable();
            skipSymbolPrefix_.addAll(other.skipSymbolPrefix_);
          }
          onChanged();
        }
        if (other.hasContinuousDumpConfig()) {
          mergeContinuousDumpConfig(other.getContinuousDumpConfig());
        }
        if (other.hasShmemSizeBytes()) {
          setShmemSizeBytes(other.getShmemSizeBytes());
        }
        if (other.hasBlockClient()) {
          setBlockClient(other.getBlockClient());
        }
        if (other.hasBlockClientTimeoutUs()) {
          setBlockClientTimeoutUs(other.getBlockClientTimeoutUs());
        }
        if (other.hasNoStartup()) {
          setNoStartup(other.getNoStartup());
        }
        if (other.hasNoRunning()) {
          setNoRunning(other.getNoRunning());
        }
        if (other.hasDumpAtMax()) {
          setDumpAtMax(other.getDumpAtMax());
        }
        if (other.hasDisableForkTeardown()) {
          setDisableForkTeardown(other.getDisableForkTeardown());
        }
        if (other.hasDisableVforkDetection()) {
          setDisableVforkDetection(other.getDisableVforkDetection());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        if (extensionRegistry == null) {
          throw new java.lang.NullPointerException();
        }
        try {
          boolean done = false;
          while (!done) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                done = true;
                break;
              case 8: {
                samplingIntervalBytes_ = input.readUInt64();
                bitField0_ |= 0x00000001;
                break;
              } // case 8
              case 18: {
                com.google.protobuf.ByteString bs = input.readBytes();
                ensureProcessCmdlineIsMutable();
                processCmdline_.add(bs);
                break;
              } // case 18
              case 32: {
                long v = input.readUInt64();
                ensurePidIsMutable();
                pid_.addLong(v);
                break;
              } // case 32
              case 34: {
                int length = input.readRawVarint32();
                int limit = input.pushLimit(length);
                ensurePidIsMutable();
                while (input.getBytesUntilLimit() > 0) {
                  pid_.addLong(input.readUInt64());
                }
                input.popLimit(limit);
                break;
              } // case 34
              case 40: {
                all_ = input.readBool();
                bitField0_ |= 0x00000800;
                break;
              } // case 40
              case 50: {
                input.readMessage(
                    getContinuousDumpConfigFieldBuilder().getBuilder(),
                    extensionRegistry);
                bitField0_ |= 0x00010000;
                break;
              } // case 50
              case 58: {
                com.google.protobuf.ByteString bs = input.readBytes();
                ensureSkipSymbolPrefixIsMutable();
                skipSymbolPrefix_.add(bs);
                break;
              } // case 58
              case 64: {
                shmemSizeBytes_ = input.readUInt64();
                bitField0_ |= 0x00020000;
                break;
              } // case 64
              case 72: {
                blockClient_ = input.readBool();
                bitField0_ |= 0x00040000;
                break;
              } // case 72
              case 80: {
                noStartup_ = input.readBool();
                bitField0_ |= 0x00100000;
                break;
              } // case 80
              case 88: {
                noRunning_ = input.readBool();
                bitField0_ |= 0x00200000;
                break;
              } // case 88
              case 104: {
                dumpAtMax_ = input.readBool();
                bitField0_ |= 0x00400000;
                break;
              } // case 104
              case 112: {
                blockClientTimeoutUs_ = input.readUInt32();
                bitField0_ |= 0x00080000;
                break;
              } // case 112
              case 120: {
                minAnonymousMemoryKb_ = input.readUInt32();
                bitField0_ |= 0x00001000;
                break;
              } // case 120
              case 128: {
                maxHeapprofdMemoryKb_ = input.readUInt32();
                bitField0_ |= 0x00002000;
                break;
              } // case 128
              case 136: {
                maxHeapprofdCpuSecs_ = input.readUInt64();
                bitField0_ |= 0x00004000;
                break;
              } // case 136
              case 144: {
                disableForkTeardown_ = input.readBool();
                bitField0_ |= 0x00800000;
                break;
              } // case 144
              case 152: {
                disableVforkDetection_ = input.readBool();
                bitField0_ |= 0x01000000;
                break;
              } // case 152
              case 162: {
                com.google.protobuf.ByteString bs = input.readBytes();
                ensureHeapsIsMutable();
                heaps_.add(bs);
                break;
              } // case 162
              case 168: {
                allHeaps_ = input.readBool();
                bitField0_ |= 0x00000400;
                break;
              } // case 168
              case 176: {
                long v = input.readUInt64();
                ensureHeapSamplingIntervalsIsMutable();
                heapSamplingIntervals_.addLong(v);
                break;
              } // case 176
              case 178: {
                int length = input.readRawVarint32();
                int limit = input.pushLimit(length);
                ensureHeapSamplingIntervalsIsMutable();
                while (input.getBytesUntilLimit() > 0) {
                  heapSamplingIntervals_.addLong(input.readUInt64());
                }
                input.popLimit(limit);
                break;
              } // case 178
              case 184: {
                streamAllocations_ = input.readBool();
                bitField0_ |= 0x00000100;
                break;
              } // case 184
              case 192: {
                adaptiveSamplingShmemThreshold_ = input.readUInt64();
                bitField0_ |= 0x00000002;
                break;
              } // case 192
              case 200: {
                adaptiveSamplingMaxSamplingIntervalBytes_ = input.readUInt64();
                bitField0_ |= 0x00000004;
                break;
              } // case 200
              case 210: {
                com.google.protobuf.ByteString bs = input.readBytes();
                ensureTargetInstalledByIsMutable();
                targetInstalledBy_.add(bs);
                break;
              } // case 210
              case 218: {
                com.google.protobuf.ByteString bs = input.readBytes();
                ensureExcludeHeapsIsMutable();
                excludeHeaps_.add(bs);
                break;
              } // case 218
              default: {
                if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                  done = true; // was an endgroup tag
                }
                break;
              } // default:
            } // switch (tag)
          } // while (!done)
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.unwrapIOException();
        } finally {
          onChanged();
        } // finally
        return this;
      }
      private int bitField0_;

      private long samplingIntervalBytes_ ;
      /**
       * <pre>
       * Sampling rate for all heaps not specified via heap_sampling_intervals.
       * These are:
       * * All heaps if heap_sampling_intervals is empty.
       * * Those profiled due to all_heaps and not named in heaps if
       *   heap_sampling_intervals is not empty.
       * * The implicit libc.malloc heap if heaps is empty.
       * Set to 1 for perfect accuracy.
       * Otherwise, sample every sample_interval_bytes on average.
       * See
       * https://perfetto.dev/docs/data-sources/native-heap-profiler#sampling-interval
       * for more details.
       * BUGS
       * Before Android 12, setting this to 0 would crash the target process.
       * N.B. This must be explicitly set to a non-zero value for all heaps (with
       * this field or with heap_sampling_intervals), otherwise the producer will
       * not start.
       * </pre>
       *
       * <code>optional uint64 sampling_interval_bytes = 1;</code>
       * @return Whether the samplingIntervalBytes field is set.
       */
      @java.lang.Override
      public boolean hasSamplingIntervalBytes() {
        return ((bitField0_ & 0x00000001) != 0);
      }
      /**
       * <pre>
       * Sampling rate for all heaps not specified via heap_sampling_intervals.
       * These are:
       * * All heaps if heap_sampling_intervals is empty.
       * * Those profiled due to all_heaps and not named in heaps if
       *   heap_sampling_intervals is not empty.
       * * The implicit libc.malloc heap if heaps is empty.
       * Set to 1 for perfect accuracy.
       * Otherwise, sample every sample_interval_bytes on average.
       * See
       * https://perfetto.dev/docs/data-sources/native-heap-profiler#sampling-interval
       * for more details.
       * BUGS
       * Before Android 12, setting this to 0 would crash the target process.
       * N.B. This must be explicitly set to a non-zero value for all heaps (with
       * this field or with heap_sampling_intervals), otherwise the producer will
       * not start.
       * </pre>
       *
       * <code>optional uint64 sampling_interval_bytes = 1;</code>
       * @return The samplingIntervalBytes.
       */
      @java.lang.Override
      public long getSamplingIntervalBytes() {
        return samplingIntervalBytes_;
      }
      /**
       * <pre>
       * Sampling rate for all heaps not specified via heap_sampling_intervals.
       * These are:
       * * All heaps if heap_sampling_intervals is empty.
       * * Those profiled due to all_heaps and not named in heaps if
       *   heap_sampling_intervals is not empty.
       * * The implicit libc.malloc heap if heaps is empty.
       * Set to 1 for perfect accuracy.
       * Otherwise, sample every sample_interval_bytes on average.
       * See
       * https://perfetto.dev/docs/data-sources/native-heap-profiler#sampling-interval
       * for more details.
       * BUGS
       * Before Android 12, setting this to 0 would crash the target process.
       * N.B. This must be explicitly set to a non-zero value for all heaps (with
       * this field or with heap_sampling_intervals), otherwise the producer will
       * not start.
       * </pre>
       *
       * <code>optional uint64 sampling_interval_bytes = 1;</code>
       * @param value The samplingIntervalBytes to set.
       * @return This builder for chaining.
       */
      public Builder setSamplingIntervalBytes(long value) {
        
        samplingIntervalBytes_ = value;
        bitField0_ |= 0x00000001;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Sampling rate for all heaps not specified via heap_sampling_intervals.
       * These are:
       * * All heaps if heap_sampling_intervals is empty.
       * * Those profiled due to all_heaps and not named in heaps if
       *   heap_sampling_intervals is not empty.
       * * The implicit libc.malloc heap if heaps is empty.
       * Set to 1 for perfect accuracy.
       * Otherwise, sample every sample_interval_bytes on average.
       * See
       * https://perfetto.dev/docs/data-sources/native-heap-profiler#sampling-interval
       * for more details.
       * BUGS
       * Before Android 12, setting this to 0 would crash the target process.
       * N.B. This must be explicitly set to a non-zero value for all heaps (with
       * this field or with heap_sampling_intervals), otherwise the producer will
       * not start.
       * </pre>
       *
       * <code>optional uint64 sampling_interval_bytes = 1;</code>
       * @return This builder for chaining.
       */
      public Builder clearSamplingIntervalBytes() {
        bitField0_ = (bitField0_ & ~0x00000001);
        samplingIntervalBytes_ = 0L;
        onChanged();
        return this;
      }

      private long adaptiveSamplingShmemThreshold_ ;
      /**
       * <pre>
       * If less than the given numbers of bytes are left free in the shared
       * memory buffer, increase sampling interval by a factor of two.
       * Adaptive sampling is disabled when set to 0.
       * </pre>
       *
       * <code>optional uint64 adaptive_sampling_shmem_threshold = 24;</code>
       * @return Whether the adaptiveSamplingShmemThreshold field is set.
       */
      @java.lang.Override
      public boolean hasAdaptiveSamplingShmemThreshold() {
        return ((bitField0_ & 0x00000002) != 0);
      }
      /**
       * <pre>
       * If less than the given numbers of bytes are left free in the shared
       * memory buffer, increase sampling interval by a factor of two.
       * Adaptive sampling is disabled when set to 0.
       * </pre>
       *
       * <code>optional uint64 adaptive_sampling_shmem_threshold = 24;</code>
       * @return The adaptiveSamplingShmemThreshold.
       */
      @java.lang.Override
      public long getAdaptiveSamplingShmemThreshold() {
        return adaptiveSamplingShmemThreshold_;
      }
      /**
       * <pre>
       * If less than the given numbers of bytes are left free in the shared
       * memory buffer, increase sampling interval by a factor of two.
       * Adaptive sampling is disabled when set to 0.
       * </pre>
       *
       * <code>optional uint64 adaptive_sampling_shmem_threshold = 24;</code>
       * @param value The adaptiveSamplingShmemThreshold to set.
       * @return This builder for chaining.
       */
      public Builder setAdaptiveSamplingShmemThreshold(long value) {
        
        adaptiveSamplingShmemThreshold_ = value;
        bitField0_ |= 0x00000002;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * If less than the given numbers of bytes are left free in the shared
       * memory buffer, increase sampling interval by a factor of two.
       * Adaptive sampling is disabled when set to 0.
       * </pre>
       *
       * <code>optional uint64 adaptive_sampling_shmem_threshold = 24;</code>
       * @return This builder for chaining.
       */
      public Builder clearAdaptiveSamplingShmemThreshold() {
        bitField0_ = (bitField0_ & ~0x00000002);
        adaptiveSamplingShmemThreshold_ = 0L;
        onChanged();
        return this;
      }

      private long adaptiveSamplingMaxSamplingIntervalBytes_ ;
      /**
       * <pre>
       * Stop doubling the sampling_interval once the sampling interval has reached
       * this value.
       * </pre>
       *
       * <code>optional uint64 adaptive_sampling_max_sampling_interval_bytes = 25;</code>
       * @return Whether the adaptiveSamplingMaxSamplingIntervalBytes field is set.
       */
      @java.lang.Override
      public boolean hasAdaptiveSamplingMaxSamplingIntervalBytes() {
        return ((bitField0_ & 0x00000004) != 0);
      }
      /**
       * <pre>
       * Stop doubling the sampling_interval once the sampling interval has reached
       * this value.
       * </pre>
       *
       * <code>optional uint64 adaptive_sampling_max_sampling_interval_bytes = 25;</code>
       * @return The adaptiveSamplingMaxSamplingIntervalBytes.
       */
      @java.lang.Override
      public long getAdaptiveSamplingMaxSamplingIntervalBytes() {
        return adaptiveSamplingMaxSamplingIntervalBytes_;
      }
      /**
       * <pre>
       * Stop doubling the sampling_interval once the sampling interval has reached
       * this value.
       * </pre>
       *
       * <code>optional uint64 adaptive_sampling_max_sampling_interval_bytes = 25;</code>
       * @param value The adaptiveSamplingMaxSamplingIntervalBytes to set.
       * @return This builder for chaining.
       */
      public Builder setAdaptiveSamplingMaxSamplingIntervalBytes(long value) {
        
        adaptiveSamplingMaxSamplingIntervalBytes_ = value;
        bitField0_ |= 0x00000004;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Stop doubling the sampling_interval once the sampling interval has reached
       * this value.
       * </pre>
       *
       * <code>optional uint64 adaptive_sampling_max_sampling_interval_bytes = 25;</code>
       * @return This builder for chaining.
       */
      public Builder clearAdaptiveSamplingMaxSamplingIntervalBytes() {
        bitField0_ = (bitField0_ & ~0x00000004);
        adaptiveSamplingMaxSamplingIntervalBytes_ = 0L;
        onChanged();
        return this;
      }

      private com.google.protobuf.LazyStringList processCmdline_ = com.google.protobuf.LazyStringArrayList.EMPTY;
      private void ensureProcessCmdlineIsMutable() {
        if (!((bitField0_ & 0x00000008) != 0)) {
          processCmdline_ = new com.google.protobuf.LazyStringArrayList(processCmdline_);
          bitField0_ |= 0x00000008;
         }
      }
      /**
       * <pre>
       * E.g. surfaceflinger, com.android.phone
       * This input is normalized in the following way: if it contains slashes,
       * everything up to the last slash is discarded. If it contains "&#64;",
       * everything after the first &#64; is discared.
       * E.g. /system/bin/surfaceflinger&#64;1.0 normalizes to surfaceflinger.
       * This transformation is also applied to the processes' command lines when
       * matching.
       * </pre>
       *
       * <code>repeated string process_cmdline = 2;</code>
       * @return A list containing the processCmdline.
       */
      public com.google.protobuf.ProtocolStringList
          getProcessCmdlineList() {
        return processCmdline_.getUnmodifiableView();
      }
      /**
       * <pre>
       * E.g. surfaceflinger, com.android.phone
       * This input is normalized in the following way: if it contains slashes,
       * everything up to the last slash is discarded. If it contains "&#64;",
       * everything after the first &#64; is discared.
       * E.g. /system/bin/surfaceflinger&#64;1.0 normalizes to surfaceflinger.
       * This transformation is also applied to the processes' command lines when
       * matching.
       * </pre>
       *
       * <code>repeated string process_cmdline = 2;</code>
       * @return The count of processCmdline.
       */
      public int getProcessCmdlineCount() {
        return processCmdline_.size();
      }
      /**
       * <pre>
       * E.g. surfaceflinger, com.android.phone
       * This input is normalized in the following way: if it contains slashes,
       * everything up to the last slash is discarded. If it contains "&#64;",
       * everything after the first &#64; is discared.
       * E.g. /system/bin/surfaceflinger&#64;1.0 normalizes to surfaceflinger.
       * This transformation is also applied to the processes' command lines when
       * matching.
       * </pre>
       *
       * <code>repeated string process_cmdline = 2;</code>
       * @param index The index of the element to return.
       * @return The processCmdline at the given index.
       */
      public java.lang.String getProcessCmdline(int index) {
        return processCmdline_.get(index);
      }
      /**
       * <pre>
       * E.g. surfaceflinger, com.android.phone
       * This input is normalized in the following way: if it contains slashes,
       * everything up to the last slash is discarded. If it contains "&#64;",
       * everything after the first &#64; is discared.
       * E.g. /system/bin/surfaceflinger&#64;1.0 normalizes to surfaceflinger.
       * This transformation is also applied to the processes' command lines when
       * matching.
       * </pre>
       *
       * <code>repeated string process_cmdline = 2;</code>
       * @param index The index of the value to return.
       * @return The bytes of the processCmdline at the given index.
       */
      public com.google.protobuf.ByteString
          getProcessCmdlineBytes(int index) {
        return processCmdline_.getByteString(index);
      }
      /**
       * <pre>
       * E.g. surfaceflinger, com.android.phone
       * This input is normalized in the following way: if it contains slashes,
       * everything up to the last slash is discarded. If it contains "&#64;",
       * everything after the first &#64; is discared.
       * E.g. /system/bin/surfaceflinger&#64;1.0 normalizes to surfaceflinger.
       * This transformation is also applied to the processes' command lines when
       * matching.
       * </pre>
       *
       * <code>repeated string process_cmdline = 2;</code>
       * @param index The index to set the value at.
       * @param value The processCmdline to set.
       * @return This builder for chaining.
       */
      public Builder setProcessCmdline(
          int index, java.lang.String value) {
        if (value == null) { throw new NullPointerException(); }
        ensureProcessCmdlineIsMutable();
        processCmdline_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <pre>
       * E.g. surfaceflinger, com.android.phone
       * This input is normalized in the following way: if it contains slashes,
       * everything up to the last slash is discarded. If it contains "&#64;",
       * everything after the first &#64; is discared.
       * E.g. /system/bin/surfaceflinger&#64;1.0 normalizes to surfaceflinger.
       * This transformation is also applied to the processes' command lines when
       * matching.
       * </pre>
       *
       * <code>repeated string process_cmdline = 2;</code>
       * @param value The processCmdline to add.
       * @return This builder for chaining.
       */
      public Builder addProcessCmdline(
          java.lang.String value) {
        if (value == null) { throw new NullPointerException(); }
        ensureProcessCmdlineIsMutable();
        processCmdline_.add(value);
        onChanged();
        return this;
      }
      /**
       * <pre>
       * E.g. surfaceflinger, com.android.phone
       * This input is normalized in the following way: if it contains slashes,
       * everything up to the last slash is discarded. If it contains "&#64;",
       * everything after the first &#64; is discared.
       * E.g. /system/bin/surfaceflinger&#64;1.0 normalizes to surfaceflinger.
       * This transformation is also applied to the processes' command lines when
       * matching.
       * </pre>
       *
       * <code>repeated string process_cmdline = 2;</code>
       * @param values The processCmdline to add.
       * @return This builder for chaining.
       */
      public Builder addAllProcessCmdline(
          java.lang.Iterable<java.lang.String> values) {
        ensureProcessCmdlineIsMutable();
        com.google.protobuf.AbstractMessageLite.Builder.addAll(
            values, processCmdline_);
        onChanged();
        return this;
      }
      /**
       * <pre>
       * E.g. surfaceflinger, com.android.phone
       * This input is normalized in the following way: if it contains slashes,
       * everything up to the last slash is discarded. If it contains "&#64;",
       * everything after the first &#64; is discared.
       * E.g. /system/bin/surfaceflinger&#64;1.0 normalizes to surfaceflinger.
       * This transformation is also applied to the processes' command lines when
       * matching.
       * </pre>
       *
       * <code>repeated string process_cmdline = 2;</code>
       * @return This builder for chaining.
       */
      public Builder clearProcessCmdline() {
        processCmdline_ = com.google.protobuf.LazyStringArrayList.EMPTY;
        bitField0_ = (bitField0_ & ~0x00000008);
        onChanged();
        return this;
      }
      /**
       * <pre>
       * E.g. surfaceflinger, com.android.phone
       * This input is normalized in the following way: if it contains slashes,
       * everything up to the last slash is discarded. If it contains "&#64;",
       * everything after the first &#64; is discared.
       * E.g. /system/bin/surfaceflinger&#64;1.0 normalizes to surfaceflinger.
       * This transformation is also applied to the processes' command lines when
       * matching.
       * </pre>
       *
       * <code>repeated string process_cmdline = 2;</code>
       * @param value The bytes of the processCmdline to add.
       * @return This builder for chaining.
       */
      public Builder addProcessCmdlineBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) { throw new NullPointerException(); }
        ensureProcessCmdlineIsMutable();
        processCmdline_.add(value);
        onChanged();
        return this;
      }

      private com.google.protobuf.Internal.LongList pid_ = emptyLongList();
      private void ensurePidIsMutable() {
        if (!((bitField0_ & 0x00000010) != 0)) {
          pid_ = mutableCopy(pid_);
          bitField0_ |= 0x00000010;
        }
      }
      /**
       * <pre>
       * For watermark based triggering or local debugging.
       * </pre>
       *
       * <code>repeated uint64 pid = 4;</code>
       * @return A list containing the pid.
       */
      public java.util.List<java.lang.Long>
          getPidList() {
        return ((bitField0_ & 0x00000010) != 0) ?
                 java.util.Collections.unmodifiableList(pid_) : pid_;
      }
      /**
       * <pre>
       * For watermark based triggering or local debugging.
       * </pre>
       *
       * <code>repeated uint64 pid = 4;</code>
       * @return The count of pid.
       */
      public int getPidCount() {
        return pid_.size();
      }
      /**
       * <pre>
       * For watermark based triggering or local debugging.
       * </pre>
       *
       * <code>repeated uint64 pid = 4;</code>
       * @param index The index of the element to return.
       * @return The pid at the given index.
       */
      public long getPid(int index) {
        return pid_.getLong(index);
      }
      /**
       * <pre>
       * For watermark based triggering or local debugging.
       * </pre>
       *
       * <code>repeated uint64 pid = 4;</code>
       * @param index The index to set the value at.
       * @param value The pid to set.
       * @return This builder for chaining.
       */
      public Builder setPid(
          int index, long value) {
        
        ensurePidIsMutable();
        pid_.setLong(index, value);
        onChanged();
        return this;
      }
      /**
       * <pre>
       * For watermark based triggering or local debugging.
       * </pre>
       *
       * <code>repeated uint64 pid = 4;</code>
       * @param value The pid to add.
       * @return This builder for chaining.
       */
      public Builder addPid(long value) {
        
        ensurePidIsMutable();
        pid_.addLong(value);
        onChanged();
        return this;
      }
      /**
       * <pre>
       * For watermark based triggering or local debugging.
       * </pre>
       *
       * <code>repeated uint64 pid = 4;</code>
       * @param values The pid to add.
       * @return This builder for chaining.
       */
      public Builder addAllPid(
          java.lang.Iterable<? extends java.lang.Long> values) {
        ensurePidIsMutable();
        com.google.protobuf.AbstractMessageLite.Builder.addAll(
            values, pid_);
        onChanged();
        return this;
      }
      /**
       * <pre>
       * For watermark based triggering or local debugging.
       * </pre>
       *
       * <code>repeated uint64 pid = 4;</code>
       * @return This builder for chaining.
       */
      public Builder clearPid() {
        pid_ = emptyLongList();
        bitField0_ = (bitField0_ & ~0x00000010);
        onChanged();
        return this;
      }

      private com.google.protobuf.LazyStringList targetInstalledBy_ = com.google.protobuf.LazyStringArrayList.EMPTY;
      private void ensureTargetInstalledByIsMutable() {
        if (!((bitField0_ & 0x00000020) != 0)) {
          targetInstalledBy_ = new com.google.protobuf.LazyStringArrayList(targetInstalledBy_);
          bitField0_ |= 0x00000020;
         }
      }
      /**
       * <pre>
       * Only profile target if it was installed by one of the packages given.
       * Special values are:
       * * &#64;system: installed on the system partition
       * * &#64;product: installed on the product partition
       * * &#64;null: sideloaded
       * Supported on Android 12+.
       * </pre>
       *
       * <code>repeated string target_installed_by = 26;</code>
       * @return A list containing the targetInstalledBy.
       */
      public com.google.protobuf.ProtocolStringList
          getTargetInstalledByList() {
        return targetInstalledBy_.getUnmodifiableView();
      }
      /**
       * <pre>
       * Only profile target if it was installed by one of the packages given.
       * Special values are:
       * * &#64;system: installed on the system partition
       * * &#64;product: installed on the product partition
       * * &#64;null: sideloaded
       * Supported on Android 12+.
       * </pre>
       *
       * <code>repeated string target_installed_by = 26;</code>
       * @return The count of targetInstalledBy.
       */
      public int getTargetInstalledByCount() {
        return targetInstalledBy_.size();
      }
      /**
       * <pre>
       * Only profile target if it was installed by one of the packages given.
       * Special values are:
       * * &#64;system: installed on the system partition
       * * &#64;product: installed on the product partition
       * * &#64;null: sideloaded
       * Supported on Android 12+.
       * </pre>
       *
       * <code>repeated string target_installed_by = 26;</code>
       * @param index The index of the element to return.
       * @return The targetInstalledBy at the given index.
       */
      public java.lang.String getTargetInstalledBy(int index) {
        return targetInstalledBy_.get(index);
      }
      /**
       * <pre>
       * Only profile target if it was installed by one of the packages given.
       * Special values are:
       * * &#64;system: installed on the system partition
       * * &#64;product: installed on the product partition
       * * &#64;null: sideloaded
       * Supported on Android 12+.
       * </pre>
       *
       * <code>repeated string target_installed_by = 26;</code>
       * @param index The index of the value to return.
       * @return The bytes of the targetInstalledBy at the given index.
       */
      public com.google.protobuf.ByteString
          getTargetInstalledByBytes(int index) {
        return targetInstalledBy_.getByteString(index);
      }
      /**
       * <pre>
       * Only profile target if it was installed by one of the packages given.
       * Special values are:
       * * &#64;system: installed on the system partition
       * * &#64;product: installed on the product partition
       * * &#64;null: sideloaded
       * Supported on Android 12+.
       * </pre>
       *
       * <code>repeated string target_installed_by = 26;</code>
       * @param index The index to set the value at.
       * @param value The targetInstalledBy to set.
       * @return This builder for chaining.
       */
      public Builder setTargetInstalledBy(
          int index, java.lang.String value) {
        if (value == null) { throw new NullPointerException(); }
        ensureTargetInstalledByIsMutable();
        targetInstalledBy_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Only profile target if it was installed by one of the packages given.
       * Special values are:
       * * &#64;system: installed on the system partition
       * * &#64;product: installed on the product partition
       * * &#64;null: sideloaded
       * Supported on Android 12+.
       * </pre>
       *
       * <code>repeated string target_installed_by = 26;</code>
       * @param value The targetInstalledBy to add.
       * @return This builder for chaining.
       */
      public Builder addTargetInstalledBy(
          java.lang.String value) {
        if (value == null) { throw new NullPointerException(); }
        ensureTargetInstalledByIsMutable();
        targetInstalledBy_.add(value);
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Only profile target if it was installed by one of the packages given.
       * Special values are:
       * * &#64;system: installed on the system partition
       * * &#64;product: installed on the product partition
       * * &#64;null: sideloaded
       * Supported on Android 12+.
       * </pre>
       *
       * <code>repeated string target_installed_by = 26;</code>
       * @param values The targetInstalledBy to add.
       * @return This builder for chaining.
       */
      public Builder addAllTargetInstalledBy(
          java.lang.Iterable<java.lang.String> values) {
        ensureTargetInstalledByIsMutable();
        com.google.protobuf.AbstractMessageLite.Builder.addAll(
            values, targetInstalledBy_);
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Only profile target if it was installed by one of the packages given.
       * Special values are:
       * * &#64;system: installed on the system partition
       * * &#64;product: installed on the product partition
       * * &#64;null: sideloaded
       * Supported on Android 12+.
       * </pre>
       *
       * <code>repeated string target_installed_by = 26;</code>
       * @return This builder for chaining.
       */
      public Builder clearTargetInstalledBy() {
        targetInstalledBy_ = com.google.protobuf.LazyStringArrayList.EMPTY;
        bitField0_ = (bitField0_ & ~0x00000020);
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Only profile target if it was installed by one of the packages given.
       * Special values are:
       * * &#64;system: installed on the system partition
       * * &#64;product: installed on the product partition
       * * &#64;null: sideloaded
       * Supported on Android 12+.
       * </pre>
       *
       * <code>repeated string target_installed_by = 26;</code>
       * @param value The bytes of the targetInstalledBy to add.
       * @return This builder for chaining.
       */
      public Builder addTargetInstalledByBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) { throw new NullPointerException(); }
        ensureTargetInstalledByIsMutable();
        targetInstalledBy_.add(value);
        onChanged();
        return this;
      }

      private com.google.protobuf.LazyStringList heaps_ = com.google.protobuf.LazyStringArrayList.EMPTY;
      private void ensureHeapsIsMutable() {
        if (!((bitField0_ & 0x00000040) != 0)) {
          heaps_ = new com.google.protobuf.LazyStringArrayList(heaps_);
          bitField0_ |= 0x00000040;
         }
      }
      /**
       * <pre>
       * Which heaps to sample, e.g. "libc.malloc". If left empty, only samples
       * "malloc".
       * Introduced in Android 12.
       * </pre>
       *
       * <code>repeated string heaps = 20;</code>
       * @return A list containing the heaps.
       */
      public com.google.protobuf.ProtocolStringList
          getHeapsList() {
        return heaps_.getUnmodifiableView();
      }
      /**
       * <pre>
       * Which heaps to sample, e.g. "libc.malloc". If left empty, only samples
       * "malloc".
       * Introduced in Android 12.
       * </pre>
       *
       * <code>repeated string heaps = 20;</code>
       * @return The count of heaps.
       */
      public int getHeapsCount() {
        return heaps_.size();
      }
      /**
       * <pre>
       * Which heaps to sample, e.g. "libc.malloc". If left empty, only samples
       * "malloc".
       * Introduced in Android 12.
       * </pre>
       *
       * <code>repeated string heaps = 20;</code>
       * @param index The index of the element to return.
       * @return The heaps at the given index.
       */
      public java.lang.String getHeaps(int index) {
        return heaps_.get(index);
      }
      /**
       * <pre>
       * Which heaps to sample, e.g. "libc.malloc". If left empty, only samples
       * "malloc".
       * Introduced in Android 12.
       * </pre>
       *
       * <code>repeated string heaps = 20;</code>
       * @param index The index of the value to return.
       * @return The bytes of the heaps at the given index.
       */
      public com.google.protobuf.ByteString
          getHeapsBytes(int index) {
        return heaps_.getByteString(index);
      }
      /**
       * <pre>
       * Which heaps to sample, e.g. "libc.malloc". If left empty, only samples
       * "malloc".
       * Introduced in Android 12.
       * </pre>
       *
       * <code>repeated string heaps = 20;</code>
       * @param index The index to set the value at.
       * @param value The heaps to set.
       * @return This builder for chaining.
       */
      public Builder setHeaps(
          int index, java.lang.String value) {
        if (value == null) { throw new NullPointerException(); }
        ensureHeapsIsMutable();
        heaps_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Which heaps to sample, e.g. "libc.malloc". If left empty, only samples
       * "malloc".
       * Introduced in Android 12.
       * </pre>
       *
       * <code>repeated string heaps = 20;</code>
       * @param value The heaps to add.
       * @return This builder for chaining.
       */
      public Builder addHeaps(
          java.lang.String value) {
        if (value == null) { throw new NullPointerException(); }
        ensureHeapsIsMutable();
        heaps_.add(value);
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Which heaps to sample, e.g. "libc.malloc". If left empty, only samples
       * "malloc".
       * Introduced in Android 12.
       * </pre>
       *
       * <code>repeated string heaps = 20;</code>
       * @param values The heaps to add.
       * @return This builder for chaining.
       */
      public Builder addAllHeaps(
          java.lang.Iterable<java.lang.String> values) {
        ensureHeapsIsMutable();
        com.google.protobuf.AbstractMessageLite.Builder.addAll(
            values, heaps_);
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Which heaps to sample, e.g. "libc.malloc". If left empty, only samples
       * "malloc".
       * Introduced in Android 12.
       * </pre>
       *
       * <code>repeated string heaps = 20;</code>
       * @return This builder for chaining.
       */
      public Builder clearHeaps() {
        heaps_ = com.google.protobuf.LazyStringArrayList.EMPTY;
        bitField0_ = (bitField0_ & ~0x00000040);
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Which heaps to sample, e.g. "libc.malloc". If left empty, only samples
       * "malloc".
       * Introduced in Android 12.
       * </pre>
       *
       * <code>repeated string heaps = 20;</code>
       * @param value The bytes of the heaps to add.
       * @return This builder for chaining.
       */
      public Builder addHeapsBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) { throw new NullPointerException(); }
        ensureHeapsIsMutable();
        heaps_.add(value);
        onChanged();
        return this;
      }

      private com.google.protobuf.LazyStringList excludeHeaps_ = com.google.protobuf.LazyStringArrayList.EMPTY;
      private void ensureExcludeHeapsIsMutable() {
        if (!((bitField0_ & 0x00000080) != 0)) {
          excludeHeaps_ = new com.google.protobuf.LazyStringArrayList(excludeHeaps_);
          bitField0_ |= 0x00000080;
         }
      }
      /**
       * <pre>
       * Which heaps not to sample, e.g. "libc.malloc". This is useful when used in
       * combination with all_heaps;
       * Introduced in Android 12.
       * </pre>
       *
       * <code>repeated string exclude_heaps = 27;</code>
       * @return A list containing the excludeHeaps.
       */
      public com.google.protobuf.ProtocolStringList
          getExcludeHeapsList() {
        return excludeHeaps_.getUnmodifiableView();
      }
      /**
       * <pre>
       * Which heaps not to sample, e.g. "libc.malloc". This is useful when used in
       * combination with all_heaps;
       * Introduced in Android 12.
       * </pre>
       *
       * <code>repeated string exclude_heaps = 27;</code>
       * @return The count of excludeHeaps.
       */
      public int getExcludeHeapsCount() {
        return excludeHeaps_.size();
      }
      /**
       * <pre>
       * Which heaps not to sample, e.g. "libc.malloc". This is useful when used in
       * combination with all_heaps;
       * Introduced in Android 12.
       * </pre>
       *
       * <code>repeated string exclude_heaps = 27;</code>
       * @param index The index of the element to return.
       * @return The excludeHeaps at the given index.
       */
      public java.lang.String getExcludeHeaps(int index) {
        return excludeHeaps_.get(index);
      }
      /**
       * <pre>
       * Which heaps not to sample, e.g. "libc.malloc". This is useful when used in
       * combination with all_heaps;
       * Introduced in Android 12.
       * </pre>
       *
       * <code>repeated string exclude_heaps = 27;</code>
       * @param index The index of the value to return.
       * @return The bytes of the excludeHeaps at the given index.
       */
      public com.google.protobuf.ByteString
          getExcludeHeapsBytes(int index) {
        return excludeHeaps_.getByteString(index);
      }
      /**
       * <pre>
       * Which heaps not to sample, e.g. "libc.malloc". This is useful when used in
       * combination with all_heaps;
       * Introduced in Android 12.
       * </pre>
       *
       * <code>repeated string exclude_heaps = 27;</code>
       * @param index The index to set the value at.
       * @param value The excludeHeaps to set.
       * @return This builder for chaining.
       */
      public Builder setExcludeHeaps(
          int index, java.lang.String value) {
        if (value == null) { throw new NullPointerException(); }
        ensureExcludeHeapsIsMutable();
        excludeHeaps_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Which heaps not to sample, e.g. "libc.malloc". This is useful when used in
       * combination with all_heaps;
       * Introduced in Android 12.
       * </pre>
       *
       * <code>repeated string exclude_heaps = 27;</code>
       * @param value The excludeHeaps to add.
       * @return This builder for chaining.
       */
      public Builder addExcludeHeaps(
          java.lang.String value) {
        if (value == null) { throw new NullPointerException(); }
        ensureExcludeHeapsIsMutable();
        excludeHeaps_.add(value);
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Which heaps not to sample, e.g. "libc.malloc". This is useful when used in
       * combination with all_heaps;
       * Introduced in Android 12.
       * </pre>
       *
       * <code>repeated string exclude_heaps = 27;</code>
       * @param values The excludeHeaps to add.
       * @return This builder for chaining.
       */
      public Builder addAllExcludeHeaps(
          java.lang.Iterable<java.lang.String> values) {
        ensureExcludeHeapsIsMutable();
        com.google.protobuf.AbstractMessageLite.Builder.addAll(
            values, excludeHeaps_);
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Which heaps not to sample, e.g. "libc.malloc". This is useful when used in
       * combination with all_heaps;
       * Introduced in Android 12.
       * </pre>
       *
       * <code>repeated string exclude_heaps = 27;</code>
       * @return This builder for chaining.
       */
      public Builder clearExcludeHeaps() {
        excludeHeaps_ = com.google.protobuf.LazyStringArrayList.EMPTY;
        bitField0_ = (bitField0_ & ~0x00000080);
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Which heaps not to sample, e.g. "libc.malloc". This is useful when used in
       * combination with all_heaps;
       * Introduced in Android 12.
       * </pre>
       *
       * <code>repeated string exclude_heaps = 27;</code>
       * @param value The bytes of the excludeHeaps to add.
       * @return This builder for chaining.
       */
      public Builder addExcludeHeapsBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) { throw new NullPointerException(); }
        ensureExcludeHeapsIsMutable();
        excludeHeaps_.add(value);
        onChanged();
        return this;
      }

      private boolean streamAllocations_ ;
      /**
       * <code>optional bool stream_allocations = 23;</code>
       * @return Whether the streamAllocations field is set.
       */
      @java.lang.Override
      public boolean hasStreamAllocations() {
        return ((bitField0_ & 0x00000100) != 0);
      }
      /**
       * <code>optional bool stream_allocations = 23;</code>
       * @return The streamAllocations.
       */
      @java.lang.Override
      public boolean getStreamAllocations() {
        return streamAllocations_;
      }
      /**
       * <code>optional bool stream_allocations = 23;</code>
       * @param value The streamAllocations to set.
       * @return This builder for chaining.
       */
      public Builder setStreamAllocations(boolean value) {
        
        streamAllocations_ = value;
        bitField0_ |= 0x00000100;
        onChanged();
        return this;
      }
      /**
       * <code>optional bool stream_allocations = 23;</code>
       * @return This builder for chaining.
       */
      public Builder clearStreamAllocations() {
        bitField0_ = (bitField0_ & ~0x00000100);
        streamAllocations_ = false;
        onChanged();
        return this;
      }

      private com.google.protobuf.Internal.LongList heapSamplingIntervals_ = emptyLongList();
      private void ensureHeapSamplingIntervalsIsMutable() {
        if (!((bitField0_ & 0x00000200) != 0)) {
          heapSamplingIntervals_ = mutableCopy(heapSamplingIntervals_);
          bitField0_ |= 0x00000200;
        }
      }
      /**
       * <pre>
       * If given, needs to be the same length as heaps and gives the sampling
       * interval for the respective entry in heaps.
       * Otherwise, sampling_interval_bytes is used.
       * It is recommended to set sampling_interval_bytes to a reasonable default
       * value when using this, as a value of 0 for sampling_interval_bytes will
       * crash the target process before Android 12.
       * Introduced in Android 12.
       * All values must be non-zero or the producer will not start.
       * </pre>
       *
       * <code>repeated uint64 heap_sampling_intervals = 22;</code>
       * @return A list containing the heapSamplingIntervals.
       */
      public java.util.List<java.lang.Long>
          getHeapSamplingIntervalsList() {
        return ((bitField0_ & 0x00000200) != 0) ?
                 java.util.Collections.unmodifiableList(heapSamplingIntervals_) : heapSamplingIntervals_;
      }
      /**
       * <pre>
       * If given, needs to be the same length as heaps and gives the sampling
       * interval for the respective entry in heaps.
       * Otherwise, sampling_interval_bytes is used.
       * It is recommended to set sampling_interval_bytes to a reasonable default
       * value when using this, as a value of 0 for sampling_interval_bytes will
       * crash the target process before Android 12.
       * Introduced in Android 12.
       * All values must be non-zero or the producer will not start.
       * </pre>
       *
       * <code>repeated uint64 heap_sampling_intervals = 22;</code>
       * @return The count of heapSamplingIntervals.
       */
      public int getHeapSamplingIntervalsCount() {
        return heapSamplingIntervals_.size();
      }
      /**
       * <pre>
       * If given, needs to be the same length as heaps and gives the sampling
       * interval for the respective entry in heaps.
       * Otherwise, sampling_interval_bytes is used.
       * It is recommended to set sampling_interval_bytes to a reasonable default
       * value when using this, as a value of 0 for sampling_interval_bytes will
       * crash the target process before Android 12.
       * Introduced in Android 12.
       * All values must be non-zero or the producer will not start.
       * </pre>
       *
       * <code>repeated uint64 heap_sampling_intervals = 22;</code>
       * @param index The index of the element to return.
       * @return The heapSamplingIntervals at the given index.
       */
      public long getHeapSamplingIntervals(int index) {
        return heapSamplingIntervals_.getLong(index);
      }
      /**
       * <pre>
       * If given, needs to be the same length as heaps and gives the sampling
       * interval for the respective entry in heaps.
       * Otherwise, sampling_interval_bytes is used.
       * It is recommended to set sampling_interval_bytes to a reasonable default
       * value when using this, as a value of 0 for sampling_interval_bytes will
       * crash the target process before Android 12.
       * Introduced in Android 12.
       * All values must be non-zero or the producer will not start.
       * </pre>
       *
       * <code>repeated uint64 heap_sampling_intervals = 22;</code>
       * @param index The index to set the value at.
       * @param value The heapSamplingIntervals to set.
       * @return This builder for chaining.
       */
      public Builder setHeapSamplingIntervals(
          int index, long value) {
        
        ensureHeapSamplingIntervalsIsMutable();
        heapSamplingIntervals_.setLong(index, value);
        onChanged();
        return this;
      }
      /**
       * <pre>
       * If given, needs to be the same length as heaps and gives the sampling
       * interval for the respective entry in heaps.
       * Otherwise, sampling_interval_bytes is used.
       * It is recommended to set sampling_interval_bytes to a reasonable default
       * value when using this, as a value of 0 for sampling_interval_bytes will
       * crash the target process before Android 12.
       * Introduced in Android 12.
       * All values must be non-zero or the producer will not start.
       * </pre>
       *
       * <code>repeated uint64 heap_sampling_intervals = 22;</code>
       * @param value The heapSamplingIntervals to add.
       * @return This builder for chaining.
       */
      public Builder addHeapSamplingIntervals(long value) {
        
        ensureHeapSamplingIntervalsIsMutable();
        heapSamplingIntervals_.addLong(value);
        onChanged();
        return this;
      }
      /**
       * <pre>
       * If given, needs to be the same length as heaps and gives the sampling
       * interval for the respective entry in heaps.
       * Otherwise, sampling_interval_bytes is used.
       * It is recommended to set sampling_interval_bytes to a reasonable default
       * value when using this, as a value of 0 for sampling_interval_bytes will
       * crash the target process before Android 12.
       * Introduced in Android 12.
       * All values must be non-zero or the producer will not start.
       * </pre>
       *
       * <code>repeated uint64 heap_sampling_intervals = 22;</code>
       * @param values The heapSamplingIntervals to add.
       * @return This builder for chaining.
       */
      public Builder addAllHeapSamplingIntervals(
          java.lang.Iterable<? extends java.lang.Long> values) {
        ensureHeapSamplingIntervalsIsMutable();
        com.google.protobuf.AbstractMessageLite.Builder.addAll(
            values, heapSamplingIntervals_);
        onChanged();
        return this;
      }
      /**
       * <pre>
       * If given, needs to be the same length as heaps and gives the sampling
       * interval for the respective entry in heaps.
       * Otherwise, sampling_interval_bytes is used.
       * It is recommended to set sampling_interval_bytes to a reasonable default
       * value when using this, as a value of 0 for sampling_interval_bytes will
       * crash the target process before Android 12.
       * Introduced in Android 12.
       * All values must be non-zero or the producer will not start.
       * </pre>
       *
       * <code>repeated uint64 heap_sampling_intervals = 22;</code>
       * @return This builder for chaining.
       */
      public Builder clearHeapSamplingIntervals() {
        heapSamplingIntervals_ = emptyLongList();
        bitField0_ = (bitField0_ & ~0x00000200);
        onChanged();
        return this;
      }

      private boolean allHeaps_ ;
      /**
       * <pre>
       * Sample all heaps registered by target process. Introduced in Android 12.
       * </pre>
       *
       * <code>optional bool all_heaps = 21;</code>
       * @return Whether the allHeaps field is set.
       */
      @java.lang.Override
      public boolean hasAllHeaps() {
        return ((bitField0_ & 0x00000400) != 0);
      }
      /**
       * <pre>
       * Sample all heaps registered by target process. Introduced in Android 12.
       * </pre>
       *
       * <code>optional bool all_heaps = 21;</code>
       * @return The allHeaps.
       */
      @java.lang.Override
      public boolean getAllHeaps() {
        return allHeaps_;
      }
      /**
       * <pre>
       * Sample all heaps registered by target process. Introduced in Android 12.
       * </pre>
       *
       * <code>optional bool all_heaps = 21;</code>
       * @param value The allHeaps to set.
       * @return This builder for chaining.
       */
      public Builder setAllHeaps(boolean value) {
        
        allHeaps_ = value;
        bitField0_ |= 0x00000400;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Sample all heaps registered by target process. Introduced in Android 12.
       * </pre>
       *
       * <code>optional bool all_heaps = 21;</code>
       * @return This builder for chaining.
       */
      public Builder clearAllHeaps() {
        bitField0_ = (bitField0_ & ~0x00000400);
        allHeaps_ = false;
        onChanged();
        return this;
      }

      private boolean all_ ;
      /**
       * <pre>
       * Profile all processes eligible for profiling on the system.
       * See
       * https://perfetto.dev/docs/data-sources/native-heap-profiler#heapprofd-targets
       * for which processes are eligible.
       * On unmodified userdebug builds, this will lead to system crashes. Zygote
       * will crash when trying to launch a new process as it will have an
       * unexpected open socket to heapprofd.
       * heapprofd will likely be overloaded by the amount of data for low
       * sampling intervals.
       * </pre>
       *
       * <code>optional bool all = 5;</code>
       * @return Whether the all field is set.
       */
      @java.lang.Override
      public boolean hasAll() {
        return ((bitField0_ & 0x00000800) != 0);
      }
      /**
       * <pre>
       * Profile all processes eligible for profiling on the system.
       * See
       * https://perfetto.dev/docs/data-sources/native-heap-profiler#heapprofd-targets
       * for which processes are eligible.
       * On unmodified userdebug builds, this will lead to system crashes. Zygote
       * will crash when trying to launch a new process as it will have an
       * unexpected open socket to heapprofd.
       * heapprofd will likely be overloaded by the amount of data for low
       * sampling intervals.
       * </pre>
       *
       * <code>optional bool all = 5;</code>
       * @return The all.
       */
      @java.lang.Override
      public boolean getAll() {
        return all_;
      }
      /**
       * <pre>
       * Profile all processes eligible for profiling on the system.
       * See
       * https://perfetto.dev/docs/data-sources/native-heap-profiler#heapprofd-targets
       * for which processes are eligible.
       * On unmodified userdebug builds, this will lead to system crashes. Zygote
       * will crash when trying to launch a new process as it will have an
       * unexpected open socket to heapprofd.
       * heapprofd will likely be overloaded by the amount of data for low
       * sampling intervals.
       * </pre>
       *
       * <code>optional bool all = 5;</code>
       * @param value The all to set.
       * @return This builder for chaining.
       */
      public Builder setAll(boolean value) {
        
        all_ = value;
        bitField0_ |= 0x00000800;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Profile all processes eligible for profiling on the system.
       * See
       * https://perfetto.dev/docs/data-sources/native-heap-profiler#heapprofd-targets
       * for which processes are eligible.
       * On unmodified userdebug builds, this will lead to system crashes. Zygote
       * will crash when trying to launch a new process as it will have an
       * unexpected open socket to heapprofd.
       * heapprofd will likely be overloaded by the amount of data for low
       * sampling intervals.
       * </pre>
       *
       * <code>optional bool all = 5;</code>
       * @return This builder for chaining.
       */
      public Builder clearAll() {
        bitField0_ = (bitField0_ & ~0x00000800);
        all_ = false;
        onChanged();
        return this;
      }

      private int minAnonymousMemoryKb_ ;
      /**
       * <pre>
       * Do not profile processes whose anon RSS + swap &lt; given value.
       * Introduced in Android 11.
       * </pre>
       *
       * <code>optional uint32 min_anonymous_memory_kb = 15;</code>
       * @return Whether the minAnonymousMemoryKb field is set.
       */
      @java.lang.Override
      public boolean hasMinAnonymousMemoryKb() {
        return ((bitField0_ & 0x00001000) != 0);
      }
      /**
       * <pre>
       * Do not profile processes whose anon RSS + swap &lt; given value.
       * Introduced in Android 11.
       * </pre>
       *
       * <code>optional uint32 min_anonymous_memory_kb = 15;</code>
       * @return The minAnonymousMemoryKb.
       */
      @java.lang.Override
      public int getMinAnonymousMemoryKb() {
        return minAnonymousMemoryKb_;
      }
      /**
       * <pre>
       * Do not profile processes whose anon RSS + swap &lt; given value.
       * Introduced in Android 11.
       * </pre>
       *
       * <code>optional uint32 min_anonymous_memory_kb = 15;</code>
       * @param value The minAnonymousMemoryKb to set.
       * @return This builder for chaining.
       */
      public Builder setMinAnonymousMemoryKb(int value) {
        
        minAnonymousMemoryKb_ = value;
        bitField0_ |= 0x00001000;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Do not profile processes whose anon RSS + swap &lt; given value.
       * Introduced in Android 11.
       * </pre>
       *
       * <code>optional uint32 min_anonymous_memory_kb = 15;</code>
       * @return This builder for chaining.
       */
      public Builder clearMinAnonymousMemoryKb() {
        bitField0_ = (bitField0_ & ~0x00001000);
        minAnonymousMemoryKb_ = 0;
        onChanged();
        return this;
      }

      private int maxHeapprofdMemoryKb_ ;
      /**
       * <pre>
       * Stop profile if heapprofd memory usage goes beyond the given value.
       * Introduced in Android 11.
       * </pre>
       *
       * <code>optional uint32 max_heapprofd_memory_kb = 16;</code>
       * @return Whether the maxHeapprofdMemoryKb field is set.
       */
      @java.lang.Override
      public boolean hasMaxHeapprofdMemoryKb() {
        return ((bitField0_ & 0x00002000) != 0);
      }
      /**
       * <pre>
       * Stop profile if heapprofd memory usage goes beyond the given value.
       * Introduced in Android 11.
       * </pre>
       *
       * <code>optional uint32 max_heapprofd_memory_kb = 16;</code>
       * @return The maxHeapprofdMemoryKb.
       */
      @java.lang.Override
      public int getMaxHeapprofdMemoryKb() {
        return maxHeapprofdMemoryKb_;
      }
      /**
       * <pre>
       * Stop profile if heapprofd memory usage goes beyond the given value.
       * Introduced in Android 11.
       * </pre>
       *
       * <code>optional uint32 max_heapprofd_memory_kb = 16;</code>
       * @param value The maxHeapprofdMemoryKb to set.
       * @return This builder for chaining.
       */
      public Builder setMaxHeapprofdMemoryKb(int value) {
        
        maxHeapprofdMemoryKb_ = value;
        bitField0_ |= 0x00002000;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Stop profile if heapprofd memory usage goes beyond the given value.
       * Introduced in Android 11.
       * </pre>
       *
       * <code>optional uint32 max_heapprofd_memory_kb = 16;</code>
       * @return This builder for chaining.
       */
      public Builder clearMaxHeapprofdMemoryKb() {
        bitField0_ = (bitField0_ & ~0x00002000);
        maxHeapprofdMemoryKb_ = 0;
        onChanged();
        return this;
      }

      private long maxHeapprofdCpuSecs_ ;
      /**
       * <pre>
       * Stop profile if heapprofd CPU time since start of this data-source
       * goes beyond given value.
       * Introduced in Android 11.
       * </pre>
       *
       * <code>optional uint64 max_heapprofd_cpu_secs = 17;</code>
       * @return Whether the maxHeapprofdCpuSecs field is set.
       */
      @java.lang.Override
      public boolean hasMaxHeapprofdCpuSecs() {
        return ((bitField0_ & 0x00004000) != 0);
      }
      /**
       * <pre>
       * Stop profile if heapprofd CPU time since start of this data-source
       * goes beyond given value.
       * Introduced in Android 11.
       * </pre>
       *
       * <code>optional uint64 max_heapprofd_cpu_secs = 17;</code>
       * @return The maxHeapprofdCpuSecs.
       */
      @java.lang.Override
      public long getMaxHeapprofdCpuSecs() {
        return maxHeapprofdCpuSecs_;
      }
      /**
       * <pre>
       * Stop profile if heapprofd CPU time since start of this data-source
       * goes beyond given value.
       * Introduced in Android 11.
       * </pre>
       *
       * <code>optional uint64 max_heapprofd_cpu_secs = 17;</code>
       * @param value The maxHeapprofdCpuSecs to set.
       * @return This builder for chaining.
       */
      public Builder setMaxHeapprofdCpuSecs(long value) {
        
        maxHeapprofdCpuSecs_ = value;
        bitField0_ |= 0x00004000;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Stop profile if heapprofd CPU time since start of this data-source
       * goes beyond given value.
       * Introduced in Android 11.
       * </pre>
       *
       * <code>optional uint64 max_heapprofd_cpu_secs = 17;</code>
       * @return This builder for chaining.
       */
      public Builder clearMaxHeapprofdCpuSecs() {
        bitField0_ = (bitField0_ & ~0x00004000);
        maxHeapprofdCpuSecs_ = 0L;
        onChanged();
        return this;
      }

      private com.google.protobuf.LazyStringList skipSymbolPrefix_ = com.google.protobuf.LazyStringArrayList.EMPTY;
      private void ensureSkipSymbolPrefixIsMutable() {
        if (!((bitField0_ & 0x00008000) != 0)) {
          skipSymbolPrefix_ = new com.google.protobuf.LazyStringArrayList(skipSymbolPrefix_);
          bitField0_ |= 0x00008000;
         }
      }
      /**
       * <pre>
       * Do not emit function names for mappings starting with this prefix.
       * E.g. /system to not emit symbols for any system libraries.
       * </pre>
       *
       * <code>repeated string skip_symbol_prefix = 7;</code>
       * @return A list containing the skipSymbolPrefix.
       */
      public com.google.protobuf.ProtocolStringList
          getSkipSymbolPrefixList() {
        return skipSymbolPrefix_.getUnmodifiableView();
      }
      /**
       * <pre>
       * Do not emit function names for mappings starting with this prefix.
       * E.g. /system to not emit symbols for any system libraries.
       * </pre>
       *
       * <code>repeated string skip_symbol_prefix = 7;</code>
       * @return The count of skipSymbolPrefix.
       */
      public int getSkipSymbolPrefixCount() {
        return skipSymbolPrefix_.size();
      }
      /**
       * <pre>
       * Do not emit function names for mappings starting with this prefix.
       * E.g. /system to not emit symbols for any system libraries.
       * </pre>
       *
       * <code>repeated string skip_symbol_prefix = 7;</code>
       * @param index The index of the element to return.
       * @return The skipSymbolPrefix at the given index.
       */
      public java.lang.String getSkipSymbolPrefix(int index) {
        return skipSymbolPrefix_.get(index);
      }
      /**
       * <pre>
       * Do not emit function names for mappings starting with this prefix.
       * E.g. /system to not emit symbols for any system libraries.
       * </pre>
       *
       * <code>repeated string skip_symbol_prefix = 7;</code>
       * @param index The index of the value to return.
       * @return The bytes of the skipSymbolPrefix at the given index.
       */
      public com.google.protobuf.ByteString
          getSkipSymbolPrefixBytes(int index) {
        return skipSymbolPrefix_.getByteString(index);
      }
      /**
       * <pre>
       * Do not emit function names for mappings starting with this prefix.
       * E.g. /system to not emit symbols for any system libraries.
       * </pre>
       *
       * <code>repeated string skip_symbol_prefix = 7;</code>
       * @param index The index to set the value at.
       * @param value The skipSymbolPrefix to set.
       * @return This builder for chaining.
       */
      public Builder setSkipSymbolPrefix(
          int index, java.lang.String value) {
        if (value == null) { throw new NullPointerException(); }
        ensureSkipSymbolPrefixIsMutable();
        skipSymbolPrefix_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Do not emit function names for mappings starting with this prefix.
       * E.g. /system to not emit symbols for any system libraries.
       * </pre>
       *
       * <code>repeated string skip_symbol_prefix = 7;</code>
       * @param value The skipSymbolPrefix to add.
       * @return This builder for chaining.
       */
      public Builder addSkipSymbolPrefix(
          java.lang.String value) {
        if (value == null) { throw new NullPointerException(); }
        ensureSkipSymbolPrefixIsMutable();
        skipSymbolPrefix_.add(value);
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Do not emit function names for mappings starting with this prefix.
       * E.g. /system to not emit symbols for any system libraries.
       * </pre>
       *
       * <code>repeated string skip_symbol_prefix = 7;</code>
       * @param values The skipSymbolPrefix to add.
       * @return This builder for chaining.
       */
      public Builder addAllSkipSymbolPrefix(
          java.lang.Iterable<java.lang.String> values) {
        ensureSkipSymbolPrefixIsMutable();
        com.google.protobuf.AbstractMessageLite.Builder.addAll(
            values, skipSymbolPrefix_);
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Do not emit function names for mappings starting with this prefix.
       * E.g. /system to not emit symbols for any system libraries.
       * </pre>
       *
       * <code>repeated string skip_symbol_prefix = 7;</code>
       * @return This builder for chaining.
       */
      public Builder clearSkipSymbolPrefix() {
        skipSymbolPrefix_ = com.google.protobuf.LazyStringArrayList.EMPTY;
        bitField0_ = (bitField0_ & ~0x00008000);
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Do not emit function names for mappings starting with this prefix.
       * E.g. /system to not emit symbols for any system libraries.
       * </pre>
       *
       * <code>repeated string skip_symbol_prefix = 7;</code>
       * @param value The bytes of the skipSymbolPrefix to add.
       * @return This builder for chaining.
       */
      public Builder addSkipSymbolPrefixBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) { throw new NullPointerException(); }
        ensureSkipSymbolPrefixIsMutable();
        skipSymbolPrefix_.add(value);
        onChanged();
        return this;
      }

      private perfetto.protos.HeapprofdConfigOuterClass.HeapprofdConfig.ContinuousDumpConfig continuousDumpConfig_;
      private com.google.protobuf.SingleFieldBuilderV3<
          perfetto.protos.HeapprofdConfigOuterClass.HeapprofdConfig.ContinuousDumpConfig, perfetto.protos.HeapprofdConfigOuterClass.HeapprofdConfig.ContinuousDumpConfig.Builder, perfetto.protos.HeapprofdConfigOuterClass.HeapprofdConfig.ContinuousDumpConfigOrBuilder> continuousDumpConfigBuilder_;
      /**
       * <pre>
       * Dump at a predefined interval.
       * </pre>
       *
       * <code>optional .perfetto.protos.HeapprofdConfig.ContinuousDumpConfig continuous_dump_config = 6;</code>
       * @return Whether the continuousDumpConfig field is set.
       */
      public boolean hasContinuousDumpConfig() {
        return ((bitField0_ & 0x00010000) != 0);
      }
      /**
       * <pre>
       * Dump at a predefined interval.
       * </pre>
       *
       * <code>optional .perfetto.protos.HeapprofdConfig.ContinuousDumpConfig continuous_dump_config = 6;</code>
       * @return The continuousDumpConfig.
       */
      public perfetto.protos.HeapprofdConfigOuterClass.HeapprofdConfig.ContinuousDumpConfig getContinuousDumpConfig() {
        if (continuousDumpConfigBuilder_ == null) {
          return continuousDumpConfig_ == null ? perfetto.protos.HeapprofdConfigOuterClass.HeapprofdConfig.ContinuousDumpConfig.getDefaultInstance() : continuousDumpConfig_;
        } else {
          return continuousDumpConfigBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       * Dump at a predefined interval.
       * </pre>
       *
       * <code>optional .perfetto.protos.HeapprofdConfig.ContinuousDumpConfig continuous_dump_config = 6;</code>
       */
      public Builder setContinuousDumpConfig(perfetto.protos.HeapprofdConfigOuterClass.HeapprofdConfig.ContinuousDumpConfig value) {
        if (continuousDumpConfigBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          continuousDumpConfig_ = value;
        } else {
          continuousDumpConfigBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00010000;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Dump at a predefined interval.
       * </pre>
       *
       * <code>optional .perfetto.protos.HeapprofdConfig.ContinuousDumpConfig continuous_dump_config = 6;</code>
       */
      public Builder setContinuousDumpConfig(
          perfetto.protos.HeapprofdConfigOuterClass.HeapprofdConfig.ContinuousDumpConfig.Builder builderForValue) {
        if (continuousDumpConfigBuilder_ == null) {
          continuousDumpConfig_ = builderForValue.build();
        } else {
          continuousDumpConfigBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00010000;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Dump at a predefined interval.
       * </pre>
       *
       * <code>optional .perfetto.protos.HeapprofdConfig.ContinuousDumpConfig continuous_dump_config = 6;</code>
       */
      public Builder mergeContinuousDumpConfig(perfetto.protos.HeapprofdConfigOuterClass.HeapprofdConfig.ContinuousDumpConfig value) {
        if (continuousDumpConfigBuilder_ == null) {
          if (((bitField0_ & 0x00010000) != 0) &&
            continuousDumpConfig_ != null &&
            continuousDumpConfig_ != perfetto.protos.HeapprofdConfigOuterClass.HeapprofdConfig.ContinuousDumpConfig.getDefaultInstance()) {
            getContinuousDumpConfigBuilder().mergeFrom(value);
          } else {
            continuousDumpConfig_ = value;
          }
        } else {
          continuousDumpConfigBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00010000;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Dump at a predefined interval.
       * </pre>
       *
       * <code>optional .perfetto.protos.HeapprofdConfig.ContinuousDumpConfig continuous_dump_config = 6;</code>
       */
      public Builder clearContinuousDumpConfig() {
        bitField0_ = (bitField0_ & ~0x00010000);
        continuousDumpConfig_ = null;
        if (continuousDumpConfigBuilder_ != null) {
          continuousDumpConfigBuilder_.dispose();
          continuousDumpConfigBuilder_ = null;
        }
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Dump at a predefined interval.
       * </pre>
       *
       * <code>optional .perfetto.protos.HeapprofdConfig.ContinuousDumpConfig continuous_dump_config = 6;</code>
       */
      public perfetto.protos.HeapprofdConfigOuterClass.HeapprofdConfig.ContinuousDumpConfig.Builder getContinuousDumpConfigBuilder() {
        bitField0_ |= 0x00010000;
        onChanged();
        return getContinuousDumpConfigFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       * Dump at a predefined interval.
       * </pre>
       *
       * <code>optional .perfetto.protos.HeapprofdConfig.ContinuousDumpConfig continuous_dump_config = 6;</code>
       */
      public perfetto.protos.HeapprofdConfigOuterClass.HeapprofdConfig.ContinuousDumpConfigOrBuilder getContinuousDumpConfigOrBuilder() {
        if (continuousDumpConfigBuilder_ != null) {
          return continuousDumpConfigBuilder_.getMessageOrBuilder();
        } else {
          return continuousDumpConfig_ == null ?
              perfetto.protos.HeapprofdConfigOuterClass.HeapprofdConfig.ContinuousDumpConfig.getDefaultInstance() : continuousDumpConfig_;
        }
      }
      /**
       * <pre>
       * Dump at a predefined interval.
       * </pre>
       *
       * <code>optional .perfetto.protos.HeapprofdConfig.ContinuousDumpConfig continuous_dump_config = 6;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          perfetto.protos.HeapprofdConfigOuterClass.HeapprofdConfig.ContinuousDumpConfig, perfetto.protos.HeapprofdConfigOuterClass.HeapprofdConfig.ContinuousDumpConfig.Builder, perfetto.protos.HeapprofdConfigOuterClass.HeapprofdConfig.ContinuousDumpConfigOrBuilder> 
          getContinuousDumpConfigFieldBuilder() {
        if (continuousDumpConfigBuilder_ == null) {
          continuousDumpConfigBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              perfetto.protos.HeapprofdConfigOuterClass.HeapprofdConfig.ContinuousDumpConfig, perfetto.protos.HeapprofdConfigOuterClass.HeapprofdConfig.ContinuousDumpConfig.Builder, perfetto.protos.HeapprofdConfigOuterClass.HeapprofdConfig.ContinuousDumpConfigOrBuilder>(
                  getContinuousDumpConfig(),
                  getParentForChildren(),
                  isClean());
          continuousDumpConfig_ = null;
        }
        return continuousDumpConfigBuilder_;
      }

      private long shmemSizeBytes_ ;
      /**
       * <pre>
       * Size of the shared memory buffer between the profiled processes and
       * heapprofd. Defaults to 8 MiB. If larger than 500 MiB, truncated to 500
       * MiB.
       * Needs to be:
       * * at least 8192,
       * * a power of two,
       * * a multiple of 4096.
       * </pre>
       *
       * <code>optional uint64 shmem_size_bytes = 8;</code>
       * @return Whether the shmemSizeBytes field is set.
       */
      @java.lang.Override
      public boolean hasShmemSizeBytes() {
        return ((bitField0_ & 0x00020000) != 0);
      }
      /**
       * <pre>
       * Size of the shared memory buffer between the profiled processes and
       * heapprofd. Defaults to 8 MiB. If larger than 500 MiB, truncated to 500
       * MiB.
       * Needs to be:
       * * at least 8192,
       * * a power of two,
       * * a multiple of 4096.
       * </pre>
       *
       * <code>optional uint64 shmem_size_bytes = 8;</code>
       * @return The shmemSizeBytes.
       */
      @java.lang.Override
      public long getShmemSizeBytes() {
        return shmemSizeBytes_;
      }
      /**
       * <pre>
       * Size of the shared memory buffer between the profiled processes and
       * heapprofd. Defaults to 8 MiB. If larger than 500 MiB, truncated to 500
       * MiB.
       * Needs to be:
       * * at least 8192,
       * * a power of two,
       * * a multiple of 4096.
       * </pre>
       *
       * <code>optional uint64 shmem_size_bytes = 8;</code>
       * @param value The shmemSizeBytes to set.
       * @return This builder for chaining.
       */
      public Builder setShmemSizeBytes(long value) {
        
        shmemSizeBytes_ = value;
        bitField0_ |= 0x00020000;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Size of the shared memory buffer between the profiled processes and
       * heapprofd. Defaults to 8 MiB. If larger than 500 MiB, truncated to 500
       * MiB.
       * Needs to be:
       * * at least 8192,
       * * a power of two,
       * * a multiple of 4096.
       * </pre>
       *
       * <code>optional uint64 shmem_size_bytes = 8;</code>
       * @return This builder for chaining.
       */
      public Builder clearShmemSizeBytes() {
        bitField0_ = (bitField0_ & ~0x00020000);
        shmemSizeBytes_ = 0L;
        onChanged();
        return this;
      }

      private boolean blockClient_ ;
      /**
       * <pre>
       * When the shmem buffer is full, block the client instead of ending the
       * trace. Use with caution as this will significantly slow down the target
       * process.
       * </pre>
       *
       * <code>optional bool block_client = 9;</code>
       * @return Whether the blockClient field is set.
       */
      @java.lang.Override
      public boolean hasBlockClient() {
        return ((bitField0_ & 0x00040000) != 0);
      }
      /**
       * <pre>
       * When the shmem buffer is full, block the client instead of ending the
       * trace. Use with caution as this will significantly slow down the target
       * process.
       * </pre>
       *
       * <code>optional bool block_client = 9;</code>
       * @return The blockClient.
       */
      @java.lang.Override
      public boolean getBlockClient() {
        return blockClient_;
      }
      /**
       * <pre>
       * When the shmem buffer is full, block the client instead of ending the
       * trace. Use with caution as this will significantly slow down the target
       * process.
       * </pre>
       *
       * <code>optional bool block_client = 9;</code>
       * @param value The blockClient to set.
       * @return This builder for chaining.
       */
      public Builder setBlockClient(boolean value) {
        
        blockClient_ = value;
        bitField0_ |= 0x00040000;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * When the shmem buffer is full, block the client instead of ending the
       * trace. Use with caution as this will significantly slow down the target
       * process.
       * </pre>
       *
       * <code>optional bool block_client = 9;</code>
       * @return This builder for chaining.
       */
      public Builder clearBlockClient() {
        bitField0_ = (bitField0_ & ~0x00040000);
        blockClient_ = false;
        onChanged();
        return this;
      }

      private int blockClientTimeoutUs_ ;
      /**
       * <pre>
       * If set, stop the trace session after blocking the client for this
       * timeout. Needs to be larger than 100 us, otherwise no retries are done.
       * Introduced in Android 11.
       * </pre>
       *
       * <code>optional uint32 block_client_timeout_us = 14;</code>
       * @return Whether the blockClientTimeoutUs field is set.
       */
      @java.lang.Override
      public boolean hasBlockClientTimeoutUs() {
        return ((bitField0_ & 0x00080000) != 0);
      }
      /**
       * <pre>
       * If set, stop the trace session after blocking the client for this
       * timeout. Needs to be larger than 100 us, otherwise no retries are done.
       * Introduced in Android 11.
       * </pre>
       *
       * <code>optional uint32 block_client_timeout_us = 14;</code>
       * @return The blockClientTimeoutUs.
       */
      @java.lang.Override
      public int getBlockClientTimeoutUs() {
        return blockClientTimeoutUs_;
      }
      /**
       * <pre>
       * If set, stop the trace session after blocking the client for this
       * timeout. Needs to be larger than 100 us, otherwise no retries are done.
       * Introduced in Android 11.
       * </pre>
       *
       * <code>optional uint32 block_client_timeout_us = 14;</code>
       * @param value The blockClientTimeoutUs to set.
       * @return This builder for chaining.
       */
      public Builder setBlockClientTimeoutUs(int value) {
        
        blockClientTimeoutUs_ = value;
        bitField0_ |= 0x00080000;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * If set, stop the trace session after blocking the client for this
       * timeout. Needs to be larger than 100 us, otherwise no retries are done.
       * Introduced in Android 11.
       * </pre>
       *
       * <code>optional uint32 block_client_timeout_us = 14;</code>
       * @return This builder for chaining.
       */
      public Builder clearBlockClientTimeoutUs() {
        bitField0_ = (bitField0_ & ~0x00080000);
        blockClientTimeoutUs_ = 0;
        onChanged();
        return this;
      }

      private boolean noStartup_ ;
      /**
       * <pre>
       * Do not profile processes from startup, only match already running
       * processes.
       * Can not be set at the same time as no_running.
       * Introduced in Android 11.
       * </pre>
       *
       * <code>optional bool no_startup = 10;</code>
       * @return Whether the noStartup field is set.
       */
      @java.lang.Override
      public boolean hasNoStartup() {
        return ((bitField0_ & 0x00100000) != 0);
      }
      /**
       * <pre>
       * Do not profile processes from startup, only match already running
       * processes.
       * Can not be set at the same time as no_running.
       * Introduced in Android 11.
       * </pre>
       *
       * <code>optional bool no_startup = 10;</code>
       * @return The noStartup.
       */
      @java.lang.Override
      public boolean getNoStartup() {
        return noStartup_;
      }
      /**
       * <pre>
       * Do not profile processes from startup, only match already running
       * processes.
       * Can not be set at the same time as no_running.
       * Introduced in Android 11.
       * </pre>
       *
       * <code>optional bool no_startup = 10;</code>
       * @param value The noStartup to set.
       * @return This builder for chaining.
       */
      public Builder setNoStartup(boolean value) {
        
        noStartup_ = value;
        bitField0_ |= 0x00100000;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Do not profile processes from startup, only match already running
       * processes.
       * Can not be set at the same time as no_running.
       * Introduced in Android 11.
       * </pre>
       *
       * <code>optional bool no_startup = 10;</code>
       * @return This builder for chaining.
       */
      public Builder clearNoStartup() {
        bitField0_ = (bitField0_ & ~0x00100000);
        noStartup_ = false;
        onChanged();
        return this;
      }

      private boolean noRunning_ ;
      /**
       * <pre>
       * Do not profile running processes. Only match processes on startup.
       * Can not be set at the same time as no_startup.
       * Introduced in Android 11.
       * </pre>
       *
       * <code>optional bool no_running = 11;</code>
       * @return Whether the noRunning field is set.
       */
      @java.lang.Override
      public boolean hasNoRunning() {
        return ((bitField0_ & 0x00200000) != 0);
      }
      /**
       * <pre>
       * Do not profile running processes. Only match processes on startup.
       * Can not be set at the same time as no_startup.
       * Introduced in Android 11.
       * </pre>
       *
       * <code>optional bool no_running = 11;</code>
       * @return The noRunning.
       */
      @java.lang.Override
      public boolean getNoRunning() {
        return noRunning_;
      }
      /**
       * <pre>
       * Do not profile running processes. Only match processes on startup.
       * Can not be set at the same time as no_startup.
       * Introduced in Android 11.
       * </pre>
       *
       * <code>optional bool no_running = 11;</code>
       * @param value The noRunning to set.
       * @return This builder for chaining.
       */
      public Builder setNoRunning(boolean value) {
        
        noRunning_ = value;
        bitField0_ |= 0x00200000;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Do not profile running processes. Only match processes on startup.
       * Can not be set at the same time as no_startup.
       * Introduced in Android 11.
       * </pre>
       *
       * <code>optional bool no_running = 11;</code>
       * @return This builder for chaining.
       */
      public Builder clearNoRunning() {
        bitField0_ = (bitField0_ & ~0x00200000);
        noRunning_ = false;
        onChanged();
        return this;
      }

      private boolean dumpAtMax_ ;
      /**
       * <pre>
       * Cause heapprofd to emit a single dump at the end, showing the memory usage
       * at the point in time when the sampled heap usage of the process was at its
       * maximum. This causes ProfilePacket.HeapSample.self_max to be set, and
       * self_allocated and self_freed to not be set.
       * Introduced in Android 11.
       * </pre>
       *
       * <code>optional bool dump_at_max = 13;</code>
       * @return Whether the dumpAtMax field is set.
       */
      @java.lang.Override
      public boolean hasDumpAtMax() {
        return ((bitField0_ & 0x00400000) != 0);
      }
      /**
       * <pre>
       * Cause heapprofd to emit a single dump at the end, showing the memory usage
       * at the point in time when the sampled heap usage of the process was at its
       * maximum. This causes ProfilePacket.HeapSample.self_max to be set, and
       * self_allocated and self_freed to not be set.
       * Introduced in Android 11.
       * </pre>
       *
       * <code>optional bool dump_at_max = 13;</code>
       * @return The dumpAtMax.
       */
      @java.lang.Override
      public boolean getDumpAtMax() {
        return dumpAtMax_;
      }
      /**
       * <pre>
       * Cause heapprofd to emit a single dump at the end, showing the memory usage
       * at the point in time when the sampled heap usage of the process was at its
       * maximum. This causes ProfilePacket.HeapSample.self_max to be set, and
       * self_allocated and self_freed to not be set.
       * Introduced in Android 11.
       * </pre>
       *
       * <code>optional bool dump_at_max = 13;</code>
       * @param value The dumpAtMax to set.
       * @return This builder for chaining.
       */
      public Builder setDumpAtMax(boolean value) {
        
        dumpAtMax_ = value;
        bitField0_ |= 0x00400000;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Cause heapprofd to emit a single dump at the end, showing the memory usage
       * at the point in time when the sampled heap usage of the process was at its
       * maximum. This causes ProfilePacket.HeapSample.self_max to be set, and
       * self_allocated and self_freed to not be set.
       * Introduced in Android 11.
       * </pre>
       *
       * <code>optional bool dump_at_max = 13;</code>
       * @return This builder for chaining.
       */
      public Builder clearDumpAtMax() {
        bitField0_ = (bitField0_ & ~0x00400000);
        dumpAtMax_ = false;
        onChanged();
        return this;
      }

      private boolean disableForkTeardown_ ;
      /**
       * <pre>
       * Escape hatch if the session is being torn down because of a forked child
       * that shares memory space, but is not correctly identified as a vforked
       * child.
       * Introduced in Android 11.
       * </pre>
       *
       * <code>optional bool disable_fork_teardown = 18;</code>
       * @return Whether the disableForkTeardown field is set.
       */
      @java.lang.Override
      public boolean hasDisableForkTeardown() {
        return ((bitField0_ & 0x00800000) != 0);
      }
      /**
       * <pre>
       * Escape hatch if the session is being torn down because of a forked child
       * that shares memory space, but is not correctly identified as a vforked
       * child.
       * Introduced in Android 11.
       * </pre>
       *
       * <code>optional bool disable_fork_teardown = 18;</code>
       * @return The disableForkTeardown.
       */
      @java.lang.Override
      public boolean getDisableForkTeardown() {
        return disableForkTeardown_;
      }
      /**
       * <pre>
       * Escape hatch if the session is being torn down because of a forked child
       * that shares memory space, but is not correctly identified as a vforked
       * child.
       * Introduced in Android 11.
       * </pre>
       *
       * <code>optional bool disable_fork_teardown = 18;</code>
       * @param value The disableForkTeardown to set.
       * @return This builder for chaining.
       */
      public Builder setDisableForkTeardown(boolean value) {
        
        disableForkTeardown_ = value;
        bitField0_ |= 0x00800000;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Escape hatch if the session is being torn down because of a forked child
       * that shares memory space, but is not correctly identified as a vforked
       * child.
       * Introduced in Android 11.
       * </pre>
       *
       * <code>optional bool disable_fork_teardown = 18;</code>
       * @return This builder for chaining.
       */
      public Builder clearDisableForkTeardown() {
        bitField0_ = (bitField0_ & ~0x00800000);
        disableForkTeardown_ = false;
        onChanged();
        return this;
      }

      private boolean disableVforkDetection_ ;
      /**
       * <pre>
       * We try to automatically detect when a target applicatation vforks but then
       * does a memory allocation (or free). This auto-detection can be disabled
       * with this.
       * Introduced in Android 11.
       * </pre>
       *
       * <code>optional bool disable_vfork_detection = 19;</code>
       * @return Whether the disableVforkDetection field is set.
       */
      @java.lang.Override
      public boolean hasDisableVforkDetection() {
        return ((bitField0_ & 0x01000000) != 0);
      }
      /**
       * <pre>
       * We try to automatically detect when a target applicatation vforks but then
       * does a memory allocation (or free). This auto-detection can be disabled
       * with this.
       * Introduced in Android 11.
       * </pre>
       *
       * <code>optional bool disable_vfork_detection = 19;</code>
       * @return The disableVforkDetection.
       */
      @java.lang.Override
      public boolean getDisableVforkDetection() {
        return disableVforkDetection_;
      }
      /**
       * <pre>
       * We try to automatically detect when a target applicatation vforks but then
       * does a memory allocation (or free). This auto-detection can be disabled
       * with this.
       * Introduced in Android 11.
       * </pre>
       *
       * <code>optional bool disable_vfork_detection = 19;</code>
       * @param value The disableVforkDetection to set.
       * @return This builder for chaining.
       */
      public Builder setDisableVforkDetection(boolean value) {
        
        disableVforkDetection_ = value;
        bitField0_ |= 0x01000000;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * We try to automatically detect when a target applicatation vforks but then
       * does a memory allocation (or free). This auto-detection can be disabled
       * with this.
       * Introduced in Android 11.
       * </pre>
       *
       * <code>optional bool disable_vfork_detection = 19;</code>
       * @return This builder for chaining.
       */
      public Builder clearDisableVforkDetection() {
        bitField0_ = (bitField0_ & ~0x01000000);
        disableVforkDetection_ = false;
        onChanged();
        return this;
      }
      @java.lang.Override
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      @java.lang.Override
      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:perfetto.protos.HeapprofdConfig)
    }

    // @@protoc_insertion_point(class_scope:perfetto.protos.HeapprofdConfig)
    private static final perfetto.protos.HeapprofdConfigOuterClass.HeapprofdConfig DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new perfetto.protos.HeapprofdConfigOuterClass.HeapprofdConfig();
    }

    public static perfetto.protos.HeapprofdConfigOuterClass.HeapprofdConfig getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    @java.lang.Deprecated public static final com.google.protobuf.Parser<HeapprofdConfig>
        PARSER = new com.google.protobuf.AbstractParser<HeapprofdConfig>() {
      @java.lang.Override
      public HeapprofdConfig parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        Builder builder = newBuilder();
        try {
          builder.mergeFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.setUnfinishedMessage(builder.buildPartial());
        } catch (com.google.protobuf.UninitializedMessageException e) {
          throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
        } catch (java.io.IOException e) {
          throw new com.google.protobuf.InvalidProtocolBufferException(e)
              .setUnfinishedMessage(builder.buildPartial());
        }
        return builder.buildPartial();
      }
    };

    public static com.google.protobuf.Parser<HeapprofdConfig> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<HeapprofdConfig> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public perfetto.protos.HeapprofdConfigOuterClass.HeapprofdConfig getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_perfetto_protos_HeapprofdConfig_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_perfetto_protos_HeapprofdConfig_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_perfetto_protos_HeapprofdConfig_ContinuousDumpConfig_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_perfetto_protos_HeapprofdConfig_ContinuousDumpConfig_fieldAccessorTable;

  public static com.google.protobuf.Descriptors.FileDescriptor
      getDescriptor() {
    return descriptor;
  }
  private static  com.google.protobuf.Descriptors.FileDescriptor
      descriptor;
  static {
    java.lang.String[] descriptorData = {
      "\n7protos/perfetto/config/profiling/heapp" +
      "rofd_config.proto\022\017perfetto.protos\"\314\006\n\017H" +
      "eapprofdConfig\022\037\n\027sampling_interval_byte" +
      "s\030\001 \001(\004\022)\n!adaptive_sampling_shmem_thres" +
      "hold\030\030 \001(\004\0225\n-adaptive_sampling_max_samp" +
      "ling_interval_bytes\030\031 \001(\004\022\027\n\017process_cmd" +
      "line\030\002 \003(\t\022\013\n\003pid\030\004 \003(\004\022\033\n\023target_instal" +
      "led_by\030\032 \003(\t\022\r\n\005heaps\030\024 \003(\t\022\025\n\rexclude_h" +
      "eaps\030\033 \003(\t\022\032\n\022stream_allocations\030\027 \001(\010\022\037" +
      "\n\027heap_sampling_intervals\030\026 \003(\004\022\021\n\tall_h" +
      "eaps\030\025 \001(\010\022\013\n\003all\030\005 \001(\010\022\037\n\027min_anonymous" +
      "_memory_kb\030\017 \001(\r\022\037\n\027max_heapprofd_memory" +
      "_kb\030\020 \001(\r\022\036\n\026max_heapprofd_cpu_secs\030\021 \001(" +
      "\004\022\032\n\022skip_symbol_prefix\030\007 \003(\t\022U\n\026continu" +
      "ous_dump_config\030\006 \001(\01325.perfetto.protos." +
      "HeapprofdConfig.ContinuousDumpConfig\022\030\n\020" +
      "shmem_size_bytes\030\010 \001(\004\022\024\n\014block_client\030\t" +
      " \001(\010\022\037\n\027block_client_timeout_us\030\016 \001(\r\022\022\n" +
      "\nno_startup\030\n \001(\010\022\022\n\nno_running\030\013 \001(\010\022\023\n" +
      "\013dump_at_max\030\r \001(\010\022\035\n\025disable_fork_teard" +
      "own\030\022 \001(\010\022\037\n\027disable_vfork_detection\030\023 \001" +
      "(\010\032G\n\024ContinuousDumpConfig\022\025\n\rdump_phase" +
      "_ms\030\005 \001(\r\022\030\n\020dump_interval_ms\030\006 \001(\rJ\004\010\014\020" +
      "\r"
    };
    descriptor = com.google.protobuf.Descriptors.FileDescriptor
      .internalBuildGeneratedFileFrom(descriptorData,
        new com.google.protobuf.Descriptors.FileDescriptor[] {
        });
    internal_static_perfetto_protos_HeapprofdConfig_descriptor =
      getDescriptor().getMessageTypes().get(0);
    internal_static_perfetto_protos_HeapprofdConfig_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_perfetto_protos_HeapprofdConfig_descriptor,
        new java.lang.String[] { "SamplingIntervalBytes", "AdaptiveSamplingShmemThreshold", "AdaptiveSamplingMaxSamplingIntervalBytes", "ProcessCmdline", "Pid", "TargetInstalledBy", "Heaps", "ExcludeHeaps", "StreamAllocations", "HeapSamplingIntervals", "AllHeaps", "All", "MinAnonymousMemoryKb", "MaxHeapprofdMemoryKb", "MaxHeapprofdCpuSecs", "SkipSymbolPrefix", "ContinuousDumpConfig", "ShmemSizeBytes", "BlockClient", "BlockClientTimeoutUs", "NoStartup", "NoRunning", "DumpAtMax", "DisableForkTeardown", "DisableVforkDetection", });
    internal_static_perfetto_protos_HeapprofdConfig_ContinuousDumpConfig_descriptor =
      internal_static_perfetto_protos_HeapprofdConfig_descriptor.getNestedTypes().get(0);
    internal_static_perfetto_protos_HeapprofdConfig_ContinuousDumpConfig_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_perfetto_protos_HeapprofdConfig_ContinuousDumpConfig_descriptor,
        new java.lang.String[] { "DumpPhaseMs", "DumpIntervalMs", });
  }

  // @@protoc_insertion_point(outer_class_scope)
}
