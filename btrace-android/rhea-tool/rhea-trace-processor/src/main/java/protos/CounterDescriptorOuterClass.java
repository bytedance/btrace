// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: protos/perfetto/trace/track_event/counter_descriptor.proto

package perfetto.protos;

public final class CounterDescriptorOuterClass {
  private CounterDescriptorOuterClass() {}
  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistryLite registry) {
  }

  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistry registry) {
    registerAllExtensions(
        (com.google.protobuf.ExtensionRegistryLite) registry);
  }
  public interface CounterDescriptorOrBuilder extends
      // @@protoc_insertion_point(interface_extends:perfetto.protos.CounterDescriptor)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <pre>
     * For built-in counters (e.g. thread time). Custom user-specified counters
     * (e.g. those emitted by TRACE_COUNTER macros of the client library)
     * shouldn't set this, and instead provide a counter name via TrackDescriptor.
     * </pre>
     *
     * <code>optional .perfetto.protos.CounterDescriptor.BuiltinCounterType type = 1;</code>
     * @return Whether the type field is set.
     */
    boolean hasType();
    /**
     * <pre>
     * For built-in counters (e.g. thread time). Custom user-specified counters
     * (e.g. those emitted by TRACE_COUNTER macros of the client library)
     * shouldn't set this, and instead provide a counter name via TrackDescriptor.
     * </pre>
     *
     * <code>optional .perfetto.protos.CounterDescriptor.BuiltinCounterType type = 1;</code>
     * @return The type.
     */
    perfetto.protos.CounterDescriptorOuterClass.CounterDescriptor.BuiltinCounterType getType();

    /**
     * <pre>
     * Names of categories of the counter (usually for user-specified counters).
     * In the client library, categories are a way to turn groups of individual
     * counters (or events) on or off.
     * </pre>
     *
     * <code>repeated string categories = 2;</code>
     * @return A list containing the categories.
     */
    java.util.List<java.lang.String>
        getCategoriesList();
    /**
     * <pre>
     * Names of categories of the counter (usually for user-specified counters).
     * In the client library, categories are a way to turn groups of individual
     * counters (or events) on or off.
     * </pre>
     *
     * <code>repeated string categories = 2;</code>
     * @return The count of categories.
     */
    int getCategoriesCount();
    /**
     * <pre>
     * Names of categories of the counter (usually for user-specified counters).
     * In the client library, categories are a way to turn groups of individual
     * counters (or events) on or off.
     * </pre>
     *
     * <code>repeated string categories = 2;</code>
     * @param index The index of the element to return.
     * @return The categories at the given index.
     */
    java.lang.String getCategories(int index);
    /**
     * <pre>
     * Names of categories of the counter (usually for user-specified counters).
     * In the client library, categories are a way to turn groups of individual
     * counters (or events) on or off.
     * </pre>
     *
     * <code>repeated string categories = 2;</code>
     * @param index The index of the value to return.
     * @return The bytes of the categories at the given index.
     */
    com.google.protobuf.ByteString
        getCategoriesBytes(int index);

    /**
     * <pre>
     * Type of the counter's values. Built-in counters imply a value for this
     * field.
     * </pre>
     *
     * <code>optional .perfetto.protos.CounterDescriptor.Unit unit = 3;</code>
     * @return Whether the unit field is set.
     */
    boolean hasUnit();
    /**
     * <pre>
     * Type of the counter's values. Built-in counters imply a value for this
     * field.
     * </pre>
     *
     * <code>optional .perfetto.protos.CounterDescriptor.Unit unit = 3;</code>
     * @return The unit.
     */
    perfetto.protos.CounterDescriptorOuterClass.CounterDescriptor.Unit getUnit();

    /**
     * <pre>
     * In order to use a unit not defined as a part of |Unit|, a free-form unit
     * name can be used instead.
     * </pre>
     *
     * <code>optional string unit_name = 6;</code>
     * @return Whether the unitName field is set.
     */
    boolean hasUnitName();
    /**
     * <pre>
     * In order to use a unit not defined as a part of |Unit|, a free-form unit
     * name can be used instead.
     * </pre>
     *
     * <code>optional string unit_name = 6;</code>
     * @return The unitName.
     */
    java.lang.String getUnitName();
    /**
     * <pre>
     * In order to use a unit not defined as a part of |Unit|, a free-form unit
     * name can be used instead.
     * </pre>
     *
     * <code>optional string unit_name = 6;</code>
     * @return The bytes for unitName.
     */
    com.google.protobuf.ByteString
        getUnitNameBytes();

    /**
     * <pre>
     * Multiplication factor of this counter's values, e.g. to supply
     * COUNTER_THREAD_TIME_NS timestamps in microseconds instead.
     * </pre>
     *
     * <code>optional int64 unit_multiplier = 4;</code>
     * @return Whether the unitMultiplier field is set.
     */
    boolean hasUnitMultiplier();
    /**
     * <pre>
     * Multiplication factor of this counter's values, e.g. to supply
     * COUNTER_THREAD_TIME_NS timestamps in microseconds instead.
     * </pre>
     *
     * <code>optional int64 unit_multiplier = 4;</code>
     * @return The unitMultiplier.
     */
    long getUnitMultiplier();

    /**
     * <pre>
     * Whether values for this counter are provided as delta values. Only
     * supported for counters that are emitted on a single packet-sequence (e.g.
     * thread time). Counter values in subsequent packets on the current packet
     * sequence will be interpreted as delta values from the sequence's most
     * recent value for the counter. When incremental state is cleared, the
     * counter value is considered to be reset to 0. Thus, the first value after
     * incremental state is cleared is effectively an absolute value.
     * </pre>
     *
     * <code>optional bool is_incremental = 5;</code>
     * @return Whether the isIncremental field is set.
     */
    boolean hasIsIncremental();
    /**
     * <pre>
     * Whether values for this counter are provided as delta values. Only
     * supported for counters that are emitted on a single packet-sequence (e.g.
     * thread time). Counter values in subsequent packets on the current packet
     * sequence will be interpreted as delta values from the sequence's most
     * recent value for the counter. When incremental state is cleared, the
     * counter value is considered to be reset to 0. Thus, the first value after
     * incremental state is cleared is effectively an absolute value.
     * </pre>
     *
     * <code>optional bool is_incremental = 5;</code>
     * @return The isIncremental.
     */
    boolean getIsIncremental();
  }
  /**
   * <pre>
   * Defines properties of a counter track, e.g. for built-in counters (thread
   * time, instruction count, ..) or user-specified counters (e.g. memory usage of
   * a specific app component).
   * Counter tracks only support TYPE_COUNTER track events, which specify new
   * values for the counter. For counters that require per-slice values, counter
   * values can instead be provided in a more efficient encoding via TrackEvent's
   * |extra_counter_track_uuids| and |extra_counter_values| fields. However,
   * slice-type events cannot be emitted onto a counter track.
   * Values for counters that are only emitted on a single packet sequence can
   * optionally be delta-encoded, see |is_incremental|.
   * Next id: 7.
   * </pre>
   *
   * Protobuf type {@code perfetto.protos.CounterDescriptor}
   */
  public static final class CounterDescriptor extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:perfetto.protos.CounterDescriptor)
      CounterDescriptorOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use CounterDescriptor.newBuilder() to construct.
    private CounterDescriptor(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private CounterDescriptor() {
      type_ = 0;
      categories_ = com.google.protobuf.LazyStringArrayList.EMPTY;
      unit_ = 0;
      unitName_ = "";
    }

    @java.lang.Override
    @SuppressWarnings({"unused"})
    protected java.lang.Object newInstance(
        UnusedPrivateParameter unused) {
      return new CounterDescriptor();
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return perfetto.protos.CounterDescriptorOuterClass.internal_static_perfetto_protos_CounterDescriptor_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return perfetto.protos.CounterDescriptorOuterClass.internal_static_perfetto_protos_CounterDescriptor_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              perfetto.protos.CounterDescriptorOuterClass.CounterDescriptor.class, perfetto.protos.CounterDescriptorOuterClass.CounterDescriptor.Builder.class);
    }

    /**
     * <pre>
     * Built-in counters, usually with special meaning in the client library,
     * trace processor, legacy JSON format, or UI. Trace processor will infer a
     * track name from the enum value if none is provided in TrackDescriptor.
     * </pre>
     *
     * Protobuf enum {@code perfetto.protos.CounterDescriptor.BuiltinCounterType}
     */
    public enum BuiltinCounterType
        implements com.google.protobuf.ProtocolMessageEnum {
      /**
       * <code>COUNTER_UNSPECIFIED = 0;</code>
       */
      COUNTER_UNSPECIFIED(0),
      /**
       * <pre>
       * implies UNIT_TIME_NS.
       * </pre>
       *
       * <code>COUNTER_THREAD_TIME_NS = 1;</code>
       */
      COUNTER_THREAD_TIME_NS(1),
      /**
       * <pre>
       * implies UNIT_COUNT.
       * </pre>
       *
       * <code>COUNTER_THREAD_INSTRUCTION_COUNT = 2;</code>
       */
      COUNTER_THREAD_INSTRUCTION_COUNT(2),
      ;

      /**
       * <code>COUNTER_UNSPECIFIED = 0;</code>
       */
      public static final int COUNTER_UNSPECIFIED_VALUE = 0;
      /**
       * <pre>
       * implies UNIT_TIME_NS.
       * </pre>
       *
       * <code>COUNTER_THREAD_TIME_NS = 1;</code>
       */
      public static final int COUNTER_THREAD_TIME_NS_VALUE = 1;
      /**
       * <pre>
       * implies UNIT_COUNT.
       * </pre>
       *
       * <code>COUNTER_THREAD_INSTRUCTION_COUNT = 2;</code>
       */
      public static final int COUNTER_THREAD_INSTRUCTION_COUNT_VALUE = 2;


      public final int getNumber() {
        return value;
      }

      /**
       * @param value The numeric wire value of the corresponding enum entry.
       * @return The enum associated with the given numeric wire value.
       * @deprecated Use {@link #forNumber(int)} instead.
       */
      @java.lang.Deprecated
      public static BuiltinCounterType valueOf(int value) {
        return forNumber(value);
      }

      /**
       * @param value The numeric wire value of the corresponding enum entry.
       * @return The enum associated with the given numeric wire value.
       */
      public static BuiltinCounterType forNumber(int value) {
        switch (value) {
          case 0: return COUNTER_UNSPECIFIED;
          case 1: return COUNTER_THREAD_TIME_NS;
          case 2: return COUNTER_THREAD_INSTRUCTION_COUNT;
          default: return null;
        }
      }

      public static com.google.protobuf.Internal.EnumLiteMap<BuiltinCounterType>
          internalGetValueMap() {
        return internalValueMap;
      }
      private static final com.google.protobuf.Internal.EnumLiteMap<
          BuiltinCounterType> internalValueMap =
            new com.google.protobuf.Internal.EnumLiteMap<BuiltinCounterType>() {
              public BuiltinCounterType findValueByNumber(int number) {
                return BuiltinCounterType.forNumber(number);
              }
            };

      public final com.google.protobuf.Descriptors.EnumValueDescriptor
          getValueDescriptor() {
        return getDescriptor().getValues().get(ordinal());
      }
      public final com.google.protobuf.Descriptors.EnumDescriptor
          getDescriptorForType() {
        return getDescriptor();
      }
      public static final com.google.protobuf.Descriptors.EnumDescriptor
          getDescriptor() {
        return perfetto.protos.CounterDescriptorOuterClass.CounterDescriptor.getDescriptor().getEnumTypes().get(0);
      }

      private static final BuiltinCounterType[] VALUES = values();

      public static BuiltinCounterType valueOf(
          com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
        if (desc.getType() != getDescriptor()) {
          throw new java.lang.IllegalArgumentException(
            "EnumValueDescriptor is not for this type.");
        }
        return VALUES[desc.getIndex()];
      }

      private final int value;

      private BuiltinCounterType(int value) {
        this.value = value;
      }

      // @@protoc_insertion_point(enum_scope:perfetto.protos.CounterDescriptor.BuiltinCounterType)
    }

    /**
     * <pre>
     * Type of the values for the counters - to supply lower granularity units,
     * see also |unit_multiplier|.
     * </pre>
     *
     * Protobuf enum {@code perfetto.protos.CounterDescriptor.Unit}
     */
    public enum Unit
        implements com.google.protobuf.ProtocolMessageEnum {
      /**
       * <code>UNIT_UNSPECIFIED = 0;</code>
       */
      UNIT_UNSPECIFIED(0),
      /**
       * <code>UNIT_TIME_NS = 1;</code>
       */
      UNIT_TIME_NS(1),
      /**
       * <code>UNIT_COUNT = 2;</code>
       */
      UNIT_COUNT(2),
      /**
       * <pre>
       * TODO(eseckler): Support more units as necessary.
       * </pre>
       *
       * <code>UNIT_SIZE_BYTES = 3;</code>
       */
      UNIT_SIZE_BYTES(3),
      ;

      /**
       * <code>UNIT_UNSPECIFIED = 0;</code>
       */
      public static final int UNIT_UNSPECIFIED_VALUE = 0;
      /**
       * <code>UNIT_TIME_NS = 1;</code>
       */
      public static final int UNIT_TIME_NS_VALUE = 1;
      /**
       * <code>UNIT_COUNT = 2;</code>
       */
      public static final int UNIT_COUNT_VALUE = 2;
      /**
       * <pre>
       * TODO(eseckler): Support more units as necessary.
       * </pre>
       *
       * <code>UNIT_SIZE_BYTES = 3;</code>
       */
      public static final int UNIT_SIZE_BYTES_VALUE = 3;


      public final int getNumber() {
        return value;
      }

      /**
       * @param value The numeric wire value of the corresponding enum entry.
       * @return The enum associated with the given numeric wire value.
       * @deprecated Use {@link #forNumber(int)} instead.
       */
      @java.lang.Deprecated
      public static Unit valueOf(int value) {
        return forNumber(value);
      }

      /**
       * @param value The numeric wire value of the corresponding enum entry.
       * @return The enum associated with the given numeric wire value.
       */
      public static Unit forNumber(int value) {
        switch (value) {
          case 0: return UNIT_UNSPECIFIED;
          case 1: return UNIT_TIME_NS;
          case 2: return UNIT_COUNT;
          case 3: return UNIT_SIZE_BYTES;
          default: return null;
        }
      }

      public static com.google.protobuf.Internal.EnumLiteMap<Unit>
          internalGetValueMap() {
        return internalValueMap;
      }
      private static final com.google.protobuf.Internal.EnumLiteMap<
          Unit> internalValueMap =
            new com.google.protobuf.Internal.EnumLiteMap<Unit>() {
              public Unit findValueByNumber(int number) {
                return Unit.forNumber(number);
              }
            };

      public final com.google.protobuf.Descriptors.EnumValueDescriptor
          getValueDescriptor() {
        return getDescriptor().getValues().get(ordinal());
      }
      public final com.google.protobuf.Descriptors.EnumDescriptor
          getDescriptorForType() {
        return getDescriptor();
      }
      public static final com.google.protobuf.Descriptors.EnumDescriptor
          getDescriptor() {
        return perfetto.protos.CounterDescriptorOuterClass.CounterDescriptor.getDescriptor().getEnumTypes().get(1);
      }

      private static final Unit[] VALUES = values();

      public static Unit valueOf(
          com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
        if (desc.getType() != getDescriptor()) {
          throw new java.lang.IllegalArgumentException(
            "EnumValueDescriptor is not for this type.");
        }
        return VALUES[desc.getIndex()];
      }

      private final int value;

      private Unit(int value) {
        this.value = value;
      }

      // @@protoc_insertion_point(enum_scope:perfetto.protos.CounterDescriptor.Unit)
    }

    private int bitField0_;
    public static final int TYPE_FIELD_NUMBER = 1;
    private int type_ = 0;
    /**
     * <pre>
     * For built-in counters (e.g. thread time). Custom user-specified counters
     * (e.g. those emitted by TRACE_COUNTER macros of the client library)
     * shouldn't set this, and instead provide a counter name via TrackDescriptor.
     * </pre>
     *
     * <code>optional .perfetto.protos.CounterDescriptor.BuiltinCounterType type = 1;</code>
     * @return Whether the type field is set.
     */
    @java.lang.Override public boolean hasType() {
      return ((bitField0_ & 0x00000001) != 0);
    }
    /**
     * <pre>
     * For built-in counters (e.g. thread time). Custom user-specified counters
     * (e.g. those emitted by TRACE_COUNTER macros of the client library)
     * shouldn't set this, and instead provide a counter name via TrackDescriptor.
     * </pre>
     *
     * <code>optional .perfetto.protos.CounterDescriptor.BuiltinCounterType type = 1;</code>
     * @return The type.
     */
    @java.lang.Override public perfetto.protos.CounterDescriptorOuterClass.CounterDescriptor.BuiltinCounterType getType() {
      perfetto.protos.CounterDescriptorOuterClass.CounterDescriptor.BuiltinCounterType result = perfetto.protos.CounterDescriptorOuterClass.CounterDescriptor.BuiltinCounterType.forNumber(type_);
      return result == null ? perfetto.protos.CounterDescriptorOuterClass.CounterDescriptor.BuiltinCounterType.COUNTER_UNSPECIFIED : result;
    }

    public static final int CATEGORIES_FIELD_NUMBER = 2;
    @SuppressWarnings("serial")
    private com.google.protobuf.LazyStringList categories_;
    /**
     * <pre>
     * Names of categories of the counter (usually for user-specified counters).
     * In the client library, categories are a way to turn groups of individual
     * counters (or events) on or off.
     * </pre>
     *
     * <code>repeated string categories = 2;</code>
     * @return A list containing the categories.
     */
    public com.google.protobuf.ProtocolStringList
        getCategoriesList() {
      return categories_;
    }
    /**
     * <pre>
     * Names of categories of the counter (usually for user-specified counters).
     * In the client library, categories are a way to turn groups of individual
     * counters (or events) on or off.
     * </pre>
     *
     * <code>repeated string categories = 2;</code>
     * @return The count of categories.
     */
    public int getCategoriesCount() {
      return categories_.size();
    }
    /**
     * <pre>
     * Names of categories of the counter (usually for user-specified counters).
     * In the client library, categories are a way to turn groups of individual
     * counters (or events) on or off.
     * </pre>
     *
     * <code>repeated string categories = 2;</code>
     * @param index The index of the element to return.
     * @return The categories at the given index.
     */
    public java.lang.String getCategories(int index) {
      return categories_.get(index);
    }
    /**
     * <pre>
     * Names of categories of the counter (usually for user-specified counters).
     * In the client library, categories are a way to turn groups of individual
     * counters (or events) on or off.
     * </pre>
     *
     * <code>repeated string categories = 2;</code>
     * @param index The index of the value to return.
     * @return The bytes of the categories at the given index.
     */
    public com.google.protobuf.ByteString
        getCategoriesBytes(int index) {
      return categories_.getByteString(index);
    }

    public static final int UNIT_FIELD_NUMBER = 3;
    private int unit_ = 0;
    /**
     * <pre>
     * Type of the counter's values. Built-in counters imply a value for this
     * field.
     * </pre>
     *
     * <code>optional .perfetto.protos.CounterDescriptor.Unit unit = 3;</code>
     * @return Whether the unit field is set.
     */
    @java.lang.Override public boolean hasUnit() {
      return ((bitField0_ & 0x00000002) != 0);
    }
    /**
     * <pre>
     * Type of the counter's values. Built-in counters imply a value for this
     * field.
     * </pre>
     *
     * <code>optional .perfetto.protos.CounterDescriptor.Unit unit = 3;</code>
     * @return The unit.
     */
    @java.lang.Override public perfetto.protos.CounterDescriptorOuterClass.CounterDescriptor.Unit getUnit() {
      perfetto.protos.CounterDescriptorOuterClass.CounterDescriptor.Unit result = perfetto.protos.CounterDescriptorOuterClass.CounterDescriptor.Unit.forNumber(unit_);
      return result == null ? perfetto.protos.CounterDescriptorOuterClass.CounterDescriptor.Unit.UNIT_UNSPECIFIED : result;
    }

    public static final int UNIT_NAME_FIELD_NUMBER = 6;
    @SuppressWarnings("serial")
    private volatile java.lang.Object unitName_ = "";
    /**
     * <pre>
     * In order to use a unit not defined as a part of |Unit|, a free-form unit
     * name can be used instead.
     * </pre>
     *
     * <code>optional string unit_name = 6;</code>
     * @return Whether the unitName field is set.
     */
    @java.lang.Override
    public boolean hasUnitName() {
      return ((bitField0_ & 0x00000004) != 0);
    }
    /**
     * <pre>
     * In order to use a unit not defined as a part of |Unit|, a free-form unit
     * name can be used instead.
     * </pre>
     *
     * <code>optional string unit_name = 6;</code>
     * @return The unitName.
     */
    @java.lang.Override
    public java.lang.String getUnitName() {
      java.lang.Object ref = unitName_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        if (bs.isValidUtf8()) {
          unitName_ = s;
        }
        return s;
      }
    }
    /**
     * <pre>
     * In order to use a unit not defined as a part of |Unit|, a free-form unit
     * name can be used instead.
     * </pre>
     *
     * <code>optional string unit_name = 6;</code>
     * @return The bytes for unitName.
     */
    @java.lang.Override
    public com.google.protobuf.ByteString
        getUnitNameBytes() {
      java.lang.Object ref = unitName_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        unitName_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    public static final int UNIT_MULTIPLIER_FIELD_NUMBER = 4;
    private long unitMultiplier_ = 0L;
    /**
     * <pre>
     * Multiplication factor of this counter's values, e.g. to supply
     * COUNTER_THREAD_TIME_NS timestamps in microseconds instead.
     * </pre>
     *
     * <code>optional int64 unit_multiplier = 4;</code>
     * @return Whether the unitMultiplier field is set.
     */
    @java.lang.Override
    public boolean hasUnitMultiplier() {
      return ((bitField0_ & 0x00000008) != 0);
    }
    /**
     * <pre>
     * Multiplication factor of this counter's values, e.g. to supply
     * COUNTER_THREAD_TIME_NS timestamps in microseconds instead.
     * </pre>
     *
     * <code>optional int64 unit_multiplier = 4;</code>
     * @return The unitMultiplier.
     */
    @java.lang.Override
    public long getUnitMultiplier() {
      return unitMultiplier_;
    }

    public static final int IS_INCREMENTAL_FIELD_NUMBER = 5;
    private boolean isIncremental_ = false;
    /**
     * <pre>
     * Whether values for this counter are provided as delta values. Only
     * supported for counters that are emitted on a single packet-sequence (e.g.
     * thread time). Counter values in subsequent packets on the current packet
     * sequence will be interpreted as delta values from the sequence's most
     * recent value for the counter. When incremental state is cleared, the
     * counter value is considered to be reset to 0. Thus, the first value after
     * incremental state is cleared is effectively an absolute value.
     * </pre>
     *
     * <code>optional bool is_incremental = 5;</code>
     * @return Whether the isIncremental field is set.
     */
    @java.lang.Override
    public boolean hasIsIncremental() {
      return ((bitField0_ & 0x00000010) != 0);
    }
    /**
     * <pre>
     * Whether values for this counter are provided as delta values. Only
     * supported for counters that are emitted on a single packet-sequence (e.g.
     * thread time). Counter values in subsequent packets on the current packet
     * sequence will be interpreted as delta values from the sequence's most
     * recent value for the counter. When incremental state is cleared, the
     * counter value is considered to be reset to 0. Thus, the first value after
     * incremental state is cleared is effectively an absolute value.
     * </pre>
     *
     * <code>optional bool is_incremental = 5;</code>
     * @return The isIncremental.
     */
    @java.lang.Override
    public boolean getIsIncremental() {
      return isIncremental_;
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (((bitField0_ & 0x00000001) != 0)) {
        output.writeEnum(1, type_);
      }
      for (int i = 0; i < categories_.size(); i++) {
        com.google.protobuf.GeneratedMessageV3.writeString(output, 2, categories_.getRaw(i));
      }
      if (((bitField0_ & 0x00000002) != 0)) {
        output.writeEnum(3, unit_);
      }
      if (((bitField0_ & 0x00000008) != 0)) {
        output.writeInt64(4, unitMultiplier_);
      }
      if (((bitField0_ & 0x00000010) != 0)) {
        output.writeBool(5, isIncremental_);
      }
      if (((bitField0_ & 0x00000004) != 0)) {
        com.google.protobuf.GeneratedMessageV3.writeString(output, 6, unitName_);
      }
      getUnknownFields().writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) != 0)) {
        size += com.google.protobuf.CodedOutputStream
          .computeEnumSize(1, type_);
      }
      {
        int dataSize = 0;
        for (int i = 0; i < categories_.size(); i++) {
          dataSize += computeStringSizeNoTag(categories_.getRaw(i));
        }
        size += dataSize;
        size += 1 * getCategoriesList().size();
      }
      if (((bitField0_ & 0x00000002) != 0)) {
        size += com.google.protobuf.CodedOutputStream
          .computeEnumSize(3, unit_);
      }
      if (((bitField0_ & 0x00000008) != 0)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt64Size(4, unitMultiplier_);
      }
      if (((bitField0_ & 0x00000010) != 0)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(5, isIncremental_);
      }
      if (((bitField0_ & 0x00000004) != 0)) {
        size += com.google.protobuf.GeneratedMessageV3.computeStringSize(6, unitName_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof perfetto.protos.CounterDescriptorOuterClass.CounterDescriptor)) {
        return super.equals(obj);
      }
      perfetto.protos.CounterDescriptorOuterClass.CounterDescriptor other = (perfetto.protos.CounterDescriptorOuterClass.CounterDescriptor) obj;

      if (hasType() != other.hasType()) return false;
      if (hasType()) {
        if (type_ != other.type_) return false;
      }
      if (!getCategoriesList()
          .equals(other.getCategoriesList())) return false;
      if (hasUnit() != other.hasUnit()) return false;
      if (hasUnit()) {
        if (unit_ != other.unit_) return false;
      }
      if (hasUnitName() != other.hasUnitName()) return false;
      if (hasUnitName()) {
        if (!getUnitName()
            .equals(other.getUnitName())) return false;
      }
      if (hasUnitMultiplier() != other.hasUnitMultiplier()) return false;
      if (hasUnitMultiplier()) {
        if (getUnitMultiplier()
            != other.getUnitMultiplier()) return false;
      }
      if (hasIsIncremental() != other.hasIsIncremental()) return false;
      if (hasIsIncremental()) {
        if (getIsIncremental()
            != other.getIsIncremental()) return false;
      }
      if (!getUnknownFields().equals(other.getUnknownFields())) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      if (hasType()) {
        hash = (37 * hash) + TYPE_FIELD_NUMBER;
        hash = (53 * hash) + type_;
      }
      if (getCategoriesCount() > 0) {
        hash = (37 * hash) + CATEGORIES_FIELD_NUMBER;
        hash = (53 * hash) + getCategoriesList().hashCode();
      }
      if (hasUnit()) {
        hash = (37 * hash) + UNIT_FIELD_NUMBER;
        hash = (53 * hash) + unit_;
      }
      if (hasUnitName()) {
        hash = (37 * hash) + UNIT_NAME_FIELD_NUMBER;
        hash = (53 * hash) + getUnitName().hashCode();
      }
      if (hasUnitMultiplier()) {
        hash = (37 * hash) + UNIT_MULTIPLIER_FIELD_NUMBER;
        hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
            getUnitMultiplier());
      }
      if (hasIsIncremental()) {
        hash = (37 * hash) + IS_INCREMENTAL_FIELD_NUMBER;
        hash = (53 * hash) + com.google.protobuf.Internal.hashBoolean(
            getIsIncremental());
      }
      hash = (29 * hash) + getUnknownFields().hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static perfetto.protos.CounterDescriptorOuterClass.CounterDescriptor parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static perfetto.protos.CounterDescriptorOuterClass.CounterDescriptor parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static perfetto.protos.CounterDescriptorOuterClass.CounterDescriptor parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static perfetto.protos.CounterDescriptorOuterClass.CounterDescriptor parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static perfetto.protos.CounterDescriptorOuterClass.CounterDescriptor parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static perfetto.protos.CounterDescriptorOuterClass.CounterDescriptor parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static perfetto.protos.CounterDescriptorOuterClass.CounterDescriptor parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static perfetto.protos.CounterDescriptorOuterClass.CounterDescriptor parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static perfetto.protos.CounterDescriptorOuterClass.CounterDescriptor parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static perfetto.protos.CounterDescriptorOuterClass.CounterDescriptor parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static perfetto.protos.CounterDescriptorOuterClass.CounterDescriptor parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static perfetto.protos.CounterDescriptorOuterClass.CounterDescriptor parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(perfetto.protos.CounterDescriptorOuterClass.CounterDescriptor prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * <pre>
     * Defines properties of a counter track, e.g. for built-in counters (thread
     * time, instruction count, ..) or user-specified counters (e.g. memory usage of
     * a specific app component).
     * Counter tracks only support TYPE_COUNTER track events, which specify new
     * values for the counter. For counters that require per-slice values, counter
     * values can instead be provided in a more efficient encoding via TrackEvent's
     * |extra_counter_track_uuids| and |extra_counter_values| fields. However,
     * slice-type events cannot be emitted onto a counter track.
     * Values for counters that are only emitted on a single packet sequence can
     * optionally be delta-encoded, see |is_incremental|.
     * Next id: 7.
     * </pre>
     *
     * Protobuf type {@code perfetto.protos.CounterDescriptor}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:perfetto.protos.CounterDescriptor)
        perfetto.protos.CounterDescriptorOuterClass.CounterDescriptorOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return perfetto.protos.CounterDescriptorOuterClass.internal_static_perfetto_protos_CounterDescriptor_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return perfetto.protos.CounterDescriptorOuterClass.internal_static_perfetto_protos_CounterDescriptor_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                perfetto.protos.CounterDescriptorOuterClass.CounterDescriptor.class, perfetto.protos.CounterDescriptorOuterClass.CounterDescriptor.Builder.class);
      }

      // Construct using perfetto.protos.CounterDescriptorOuterClass.CounterDescriptor.newBuilder()
      private Builder() {

      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);

      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        bitField0_ = 0;
        type_ = 0;
        categories_ = com.google.protobuf.LazyStringArrayList.EMPTY;
        bitField0_ = (bitField0_ & ~0x00000002);
        unit_ = 0;
        unitName_ = "";
        unitMultiplier_ = 0L;
        isIncremental_ = false;
        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return perfetto.protos.CounterDescriptorOuterClass.internal_static_perfetto_protos_CounterDescriptor_descriptor;
      }

      @java.lang.Override
      public perfetto.protos.CounterDescriptorOuterClass.CounterDescriptor getDefaultInstanceForType() {
        return perfetto.protos.CounterDescriptorOuterClass.CounterDescriptor.getDefaultInstance();
      }

      @java.lang.Override
      public perfetto.protos.CounterDescriptorOuterClass.CounterDescriptor build() {
        perfetto.protos.CounterDescriptorOuterClass.CounterDescriptor result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public perfetto.protos.CounterDescriptorOuterClass.CounterDescriptor buildPartial() {
        perfetto.protos.CounterDescriptorOuterClass.CounterDescriptor result = new perfetto.protos.CounterDescriptorOuterClass.CounterDescriptor(this);
        buildPartialRepeatedFields(result);
        if (bitField0_ != 0) { buildPartial0(result); }
        onBuilt();
        return result;
      }

      private void buildPartialRepeatedFields(perfetto.protos.CounterDescriptorOuterClass.CounterDescriptor result) {
        if (((bitField0_ & 0x00000002) != 0)) {
          categories_ = categories_.getUnmodifiableView();
          bitField0_ = (bitField0_ & ~0x00000002);
        }
        result.categories_ = categories_;
      }

      private void buildPartial0(perfetto.protos.CounterDescriptorOuterClass.CounterDescriptor result) {
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) != 0)) {
          result.type_ = type_;
          to_bitField0_ |= 0x00000001;
        }
        if (((from_bitField0_ & 0x00000004) != 0)) {
          result.unit_ = unit_;
          to_bitField0_ |= 0x00000002;
        }
        if (((from_bitField0_ & 0x00000008) != 0)) {
          result.unitName_ = unitName_;
          to_bitField0_ |= 0x00000004;
        }
        if (((from_bitField0_ & 0x00000010) != 0)) {
          result.unitMultiplier_ = unitMultiplier_;
          to_bitField0_ |= 0x00000008;
        }
        if (((from_bitField0_ & 0x00000020) != 0)) {
          result.isIncremental_ = isIncremental_;
          to_bitField0_ |= 0x00000010;
        }
        result.bitField0_ |= to_bitField0_;
      }

      @java.lang.Override
      public Builder clone() {
        return super.clone();
      }
      @java.lang.Override
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.setField(field, value);
      }
      @java.lang.Override
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return super.clearField(field);
      }
      @java.lang.Override
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return super.clearOneof(oneof);
      }
      @java.lang.Override
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, java.lang.Object value) {
        return super.setRepeatedField(field, index, value);
      }
      @java.lang.Override
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.addRepeatedField(field, value);
      }
      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof perfetto.protos.CounterDescriptorOuterClass.CounterDescriptor) {
          return mergeFrom((perfetto.protos.CounterDescriptorOuterClass.CounterDescriptor)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(perfetto.protos.CounterDescriptorOuterClass.CounterDescriptor other) {
        if (other == perfetto.protos.CounterDescriptorOuterClass.CounterDescriptor.getDefaultInstance()) return this;
        if (other.hasType()) {
          setType(other.getType());
        }
        if (!other.categories_.isEmpty()) {
          if (categories_.isEmpty()) {
            categories_ = other.categories_;
            bitField0_ = (bitField0_ & ~0x00000002);
          } else {
            ensureCategoriesIsMutable();
            categories_.addAll(other.categories_);
          }
          onChanged();
        }
        if (other.hasUnit()) {
          setUnit(other.getUnit());
        }
        if (other.hasUnitName()) {
          unitName_ = other.unitName_;
          bitField0_ |= 0x00000008;
          onChanged();
        }
        if (other.hasUnitMultiplier()) {
          setUnitMultiplier(other.getUnitMultiplier());
        }
        if (other.hasIsIncremental()) {
          setIsIncremental(other.getIsIncremental());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        if (extensionRegistry == null) {
          throw new java.lang.NullPointerException();
        }
        try {
          boolean done = false;
          while (!done) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                done = true;
                break;
              case 8: {
                int tmpRaw = input.readEnum();
                perfetto.protos.CounterDescriptorOuterClass.CounterDescriptor.BuiltinCounterType tmpValue =
                    perfetto.protos.CounterDescriptorOuterClass.CounterDescriptor.BuiltinCounterType.forNumber(tmpRaw);
                if (tmpValue == null) {
                  mergeUnknownVarintField(1, tmpRaw);
                } else {
                  type_ = tmpRaw;
                  bitField0_ |= 0x00000001;
                }
                break;
              } // case 8
              case 18: {
                com.google.protobuf.ByteString bs = input.readBytes();
                ensureCategoriesIsMutable();
                categories_.add(bs);
                break;
              } // case 18
              case 24: {
                int tmpRaw = input.readEnum();
                perfetto.protos.CounterDescriptorOuterClass.CounterDescriptor.Unit tmpValue =
                    perfetto.protos.CounterDescriptorOuterClass.CounterDescriptor.Unit.forNumber(tmpRaw);
                if (tmpValue == null) {
                  mergeUnknownVarintField(3, tmpRaw);
                } else {
                  unit_ = tmpRaw;
                  bitField0_ |= 0x00000004;
                }
                break;
              } // case 24
              case 32: {
                unitMultiplier_ = input.readInt64();
                bitField0_ |= 0x00000010;
                break;
              } // case 32
              case 40: {
                isIncremental_ = input.readBool();
                bitField0_ |= 0x00000020;
                break;
              } // case 40
              case 50: {
                unitName_ = input.readBytes();
                bitField0_ |= 0x00000008;
                break;
              } // case 50
              default: {
                if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                  done = true; // was an endgroup tag
                }
                break;
              } // default:
            } // switch (tag)
          } // while (!done)
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.unwrapIOException();
        } finally {
          onChanged();
        } // finally
        return this;
      }
      private int bitField0_;

      private int type_ = 0;
      /**
       * <pre>
       * For built-in counters (e.g. thread time). Custom user-specified counters
       * (e.g. those emitted by TRACE_COUNTER macros of the client library)
       * shouldn't set this, and instead provide a counter name via TrackDescriptor.
       * </pre>
       *
       * <code>optional .perfetto.protos.CounterDescriptor.BuiltinCounterType type = 1;</code>
       * @return Whether the type field is set.
       */
      @java.lang.Override public boolean hasType() {
        return ((bitField0_ & 0x00000001) != 0);
      }
      /**
       * <pre>
       * For built-in counters (e.g. thread time). Custom user-specified counters
       * (e.g. those emitted by TRACE_COUNTER macros of the client library)
       * shouldn't set this, and instead provide a counter name via TrackDescriptor.
       * </pre>
       *
       * <code>optional .perfetto.protos.CounterDescriptor.BuiltinCounterType type = 1;</code>
       * @return The type.
       */
      @java.lang.Override
      public perfetto.protos.CounterDescriptorOuterClass.CounterDescriptor.BuiltinCounterType getType() {
        perfetto.protos.CounterDescriptorOuterClass.CounterDescriptor.BuiltinCounterType result = perfetto.protos.CounterDescriptorOuterClass.CounterDescriptor.BuiltinCounterType.forNumber(type_);
        return result == null ? perfetto.protos.CounterDescriptorOuterClass.CounterDescriptor.BuiltinCounterType.COUNTER_UNSPECIFIED : result;
      }
      /**
       * <pre>
       * For built-in counters (e.g. thread time). Custom user-specified counters
       * (e.g. those emitted by TRACE_COUNTER macros of the client library)
       * shouldn't set this, and instead provide a counter name via TrackDescriptor.
       * </pre>
       *
       * <code>optional .perfetto.protos.CounterDescriptor.BuiltinCounterType type = 1;</code>
       * @param value The type to set.
       * @return This builder for chaining.
       */
      public Builder setType(perfetto.protos.CounterDescriptorOuterClass.CounterDescriptor.BuiltinCounterType value) {
        if (value == null) {
          throw new NullPointerException();
        }
        bitField0_ |= 0x00000001;
        type_ = value.getNumber();
        onChanged();
        return this;
      }
      /**
       * <pre>
       * For built-in counters (e.g. thread time). Custom user-specified counters
       * (e.g. those emitted by TRACE_COUNTER macros of the client library)
       * shouldn't set this, and instead provide a counter name via TrackDescriptor.
       * </pre>
       *
       * <code>optional .perfetto.protos.CounterDescriptor.BuiltinCounterType type = 1;</code>
       * @return This builder for chaining.
       */
      public Builder clearType() {
        bitField0_ = (bitField0_ & ~0x00000001);
        type_ = 0;
        onChanged();
        return this;
      }

      private com.google.protobuf.LazyStringList categories_ = com.google.protobuf.LazyStringArrayList.EMPTY;
      private void ensureCategoriesIsMutable() {
        if (!((bitField0_ & 0x00000002) != 0)) {
          categories_ = new com.google.protobuf.LazyStringArrayList(categories_);
          bitField0_ |= 0x00000002;
         }
      }
      /**
       * <pre>
       * Names of categories of the counter (usually for user-specified counters).
       * In the client library, categories are a way to turn groups of individual
       * counters (or events) on or off.
       * </pre>
       *
       * <code>repeated string categories = 2;</code>
       * @return A list containing the categories.
       */
      public com.google.protobuf.ProtocolStringList
          getCategoriesList() {
        return categories_.getUnmodifiableView();
      }
      /**
       * <pre>
       * Names of categories of the counter (usually for user-specified counters).
       * In the client library, categories are a way to turn groups of individual
       * counters (or events) on or off.
       * </pre>
       *
       * <code>repeated string categories = 2;</code>
       * @return The count of categories.
       */
      public int getCategoriesCount() {
        return categories_.size();
      }
      /**
       * <pre>
       * Names of categories of the counter (usually for user-specified counters).
       * In the client library, categories are a way to turn groups of individual
       * counters (or events) on or off.
       * </pre>
       *
       * <code>repeated string categories = 2;</code>
       * @param index The index of the element to return.
       * @return The categories at the given index.
       */
      public java.lang.String getCategories(int index) {
        return categories_.get(index);
      }
      /**
       * <pre>
       * Names of categories of the counter (usually for user-specified counters).
       * In the client library, categories are a way to turn groups of individual
       * counters (or events) on or off.
       * </pre>
       *
       * <code>repeated string categories = 2;</code>
       * @param index The index of the value to return.
       * @return The bytes of the categories at the given index.
       */
      public com.google.protobuf.ByteString
          getCategoriesBytes(int index) {
        return categories_.getByteString(index);
      }
      /**
       * <pre>
       * Names of categories of the counter (usually for user-specified counters).
       * In the client library, categories are a way to turn groups of individual
       * counters (or events) on or off.
       * </pre>
       *
       * <code>repeated string categories = 2;</code>
       * @param index The index to set the value at.
       * @param value The categories to set.
       * @return This builder for chaining.
       */
      public Builder setCategories(
          int index, java.lang.String value) {
        if (value == null) { throw new NullPointerException(); }
        ensureCategoriesIsMutable();
        categories_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Names of categories of the counter (usually for user-specified counters).
       * In the client library, categories are a way to turn groups of individual
       * counters (or events) on or off.
       * </pre>
       *
       * <code>repeated string categories = 2;</code>
       * @param value The categories to add.
       * @return This builder for chaining.
       */
      public Builder addCategories(
          java.lang.String value) {
        if (value == null) { throw new NullPointerException(); }
        ensureCategoriesIsMutable();
        categories_.add(value);
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Names of categories of the counter (usually for user-specified counters).
       * In the client library, categories are a way to turn groups of individual
       * counters (or events) on or off.
       * </pre>
       *
       * <code>repeated string categories = 2;</code>
       * @param values The categories to add.
       * @return This builder for chaining.
       */
      public Builder addAllCategories(
          java.lang.Iterable<java.lang.String> values) {
        ensureCategoriesIsMutable();
        com.google.protobuf.AbstractMessageLite.Builder.addAll(
            values, categories_);
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Names of categories of the counter (usually for user-specified counters).
       * In the client library, categories are a way to turn groups of individual
       * counters (or events) on or off.
       * </pre>
       *
       * <code>repeated string categories = 2;</code>
       * @return This builder for chaining.
       */
      public Builder clearCategories() {
        categories_ = com.google.protobuf.LazyStringArrayList.EMPTY;
        bitField0_ = (bitField0_ & ~0x00000002);
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Names of categories of the counter (usually for user-specified counters).
       * In the client library, categories are a way to turn groups of individual
       * counters (or events) on or off.
       * </pre>
       *
       * <code>repeated string categories = 2;</code>
       * @param value The bytes of the categories to add.
       * @return This builder for chaining.
       */
      public Builder addCategoriesBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) { throw new NullPointerException(); }
        ensureCategoriesIsMutable();
        categories_.add(value);
        onChanged();
        return this;
      }

      private int unit_ = 0;
      /**
       * <pre>
       * Type of the counter's values. Built-in counters imply a value for this
       * field.
       * </pre>
       *
       * <code>optional .perfetto.protos.CounterDescriptor.Unit unit = 3;</code>
       * @return Whether the unit field is set.
       */
      @java.lang.Override public boolean hasUnit() {
        return ((bitField0_ & 0x00000004) != 0);
      }
      /**
       * <pre>
       * Type of the counter's values. Built-in counters imply a value for this
       * field.
       * </pre>
       *
       * <code>optional .perfetto.protos.CounterDescriptor.Unit unit = 3;</code>
       * @return The unit.
       */
      @java.lang.Override
      public perfetto.protos.CounterDescriptorOuterClass.CounterDescriptor.Unit getUnit() {
        perfetto.protos.CounterDescriptorOuterClass.CounterDescriptor.Unit result = perfetto.protos.CounterDescriptorOuterClass.CounterDescriptor.Unit.forNumber(unit_);
        return result == null ? perfetto.protos.CounterDescriptorOuterClass.CounterDescriptor.Unit.UNIT_UNSPECIFIED : result;
      }
      /**
       * <pre>
       * Type of the counter's values. Built-in counters imply a value for this
       * field.
       * </pre>
       *
       * <code>optional .perfetto.protos.CounterDescriptor.Unit unit = 3;</code>
       * @param value The unit to set.
       * @return This builder for chaining.
       */
      public Builder setUnit(perfetto.protos.CounterDescriptorOuterClass.CounterDescriptor.Unit value) {
        if (value == null) {
          throw new NullPointerException();
        }
        bitField0_ |= 0x00000004;
        unit_ = value.getNumber();
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Type of the counter's values. Built-in counters imply a value for this
       * field.
       * </pre>
       *
       * <code>optional .perfetto.protos.CounterDescriptor.Unit unit = 3;</code>
       * @return This builder for chaining.
       */
      public Builder clearUnit() {
        bitField0_ = (bitField0_ & ~0x00000004);
        unit_ = 0;
        onChanged();
        return this;
      }

      private java.lang.Object unitName_ = "";
      /**
       * <pre>
       * In order to use a unit not defined as a part of |Unit|, a free-form unit
       * name can be used instead.
       * </pre>
       *
       * <code>optional string unit_name = 6;</code>
       * @return Whether the unitName field is set.
       */
      public boolean hasUnitName() {
        return ((bitField0_ & 0x00000008) != 0);
      }
      /**
       * <pre>
       * In order to use a unit not defined as a part of |Unit|, a free-form unit
       * name can be used instead.
       * </pre>
       *
       * <code>optional string unit_name = 6;</code>
       * @return The unitName.
       */
      public java.lang.String getUnitName() {
        java.lang.Object ref = unitName_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          if (bs.isValidUtf8()) {
            unitName_ = s;
          }
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <pre>
       * In order to use a unit not defined as a part of |Unit|, a free-form unit
       * name can be used instead.
       * </pre>
       *
       * <code>optional string unit_name = 6;</code>
       * @return The bytes for unitName.
       */
      public com.google.protobuf.ByteString
          getUnitNameBytes() {
        java.lang.Object ref = unitName_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          unitName_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <pre>
       * In order to use a unit not defined as a part of |Unit|, a free-form unit
       * name can be used instead.
       * </pre>
       *
       * <code>optional string unit_name = 6;</code>
       * @param value The unitName to set.
       * @return This builder for chaining.
       */
      public Builder setUnitName(
          java.lang.String value) {
        if (value == null) { throw new NullPointerException(); }
        unitName_ = value;
        bitField0_ |= 0x00000008;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * In order to use a unit not defined as a part of |Unit|, a free-form unit
       * name can be used instead.
       * </pre>
       *
       * <code>optional string unit_name = 6;</code>
       * @return This builder for chaining.
       */
      public Builder clearUnitName() {
        unitName_ = getDefaultInstance().getUnitName();
        bitField0_ = (bitField0_ & ~0x00000008);
        onChanged();
        return this;
      }
      /**
       * <pre>
       * In order to use a unit not defined as a part of |Unit|, a free-form unit
       * name can be used instead.
       * </pre>
       *
       * <code>optional string unit_name = 6;</code>
       * @param value The bytes for unitName to set.
       * @return This builder for chaining.
       */
      public Builder setUnitNameBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) { throw new NullPointerException(); }
        unitName_ = value;
        bitField0_ |= 0x00000008;
        onChanged();
        return this;
      }

      private long unitMultiplier_ ;
      /**
       * <pre>
       * Multiplication factor of this counter's values, e.g. to supply
       * COUNTER_THREAD_TIME_NS timestamps in microseconds instead.
       * </pre>
       *
       * <code>optional int64 unit_multiplier = 4;</code>
       * @return Whether the unitMultiplier field is set.
       */
      @java.lang.Override
      public boolean hasUnitMultiplier() {
        return ((bitField0_ & 0x00000010) != 0);
      }
      /**
       * <pre>
       * Multiplication factor of this counter's values, e.g. to supply
       * COUNTER_THREAD_TIME_NS timestamps in microseconds instead.
       * </pre>
       *
       * <code>optional int64 unit_multiplier = 4;</code>
       * @return The unitMultiplier.
       */
      @java.lang.Override
      public long getUnitMultiplier() {
        return unitMultiplier_;
      }
      /**
       * <pre>
       * Multiplication factor of this counter's values, e.g. to supply
       * COUNTER_THREAD_TIME_NS timestamps in microseconds instead.
       * </pre>
       *
       * <code>optional int64 unit_multiplier = 4;</code>
       * @param value The unitMultiplier to set.
       * @return This builder for chaining.
       */
      public Builder setUnitMultiplier(long value) {
        
        unitMultiplier_ = value;
        bitField0_ |= 0x00000010;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Multiplication factor of this counter's values, e.g. to supply
       * COUNTER_THREAD_TIME_NS timestamps in microseconds instead.
       * </pre>
       *
       * <code>optional int64 unit_multiplier = 4;</code>
       * @return This builder for chaining.
       */
      public Builder clearUnitMultiplier() {
        bitField0_ = (bitField0_ & ~0x00000010);
        unitMultiplier_ = 0L;
        onChanged();
        return this;
      }

      private boolean isIncremental_ ;
      /**
       * <pre>
       * Whether values for this counter are provided as delta values. Only
       * supported for counters that are emitted on a single packet-sequence (e.g.
       * thread time). Counter values in subsequent packets on the current packet
       * sequence will be interpreted as delta values from the sequence's most
       * recent value for the counter. When incremental state is cleared, the
       * counter value is considered to be reset to 0. Thus, the first value after
       * incremental state is cleared is effectively an absolute value.
       * </pre>
       *
       * <code>optional bool is_incremental = 5;</code>
       * @return Whether the isIncremental field is set.
       */
      @java.lang.Override
      public boolean hasIsIncremental() {
        return ((bitField0_ & 0x00000020) != 0);
      }
      /**
       * <pre>
       * Whether values for this counter are provided as delta values. Only
       * supported for counters that are emitted on a single packet-sequence (e.g.
       * thread time). Counter values in subsequent packets on the current packet
       * sequence will be interpreted as delta values from the sequence's most
       * recent value for the counter. When incremental state is cleared, the
       * counter value is considered to be reset to 0. Thus, the first value after
       * incremental state is cleared is effectively an absolute value.
       * </pre>
       *
       * <code>optional bool is_incremental = 5;</code>
       * @return The isIncremental.
       */
      @java.lang.Override
      public boolean getIsIncremental() {
        return isIncremental_;
      }
      /**
       * <pre>
       * Whether values for this counter are provided as delta values. Only
       * supported for counters that are emitted on a single packet-sequence (e.g.
       * thread time). Counter values in subsequent packets on the current packet
       * sequence will be interpreted as delta values from the sequence's most
       * recent value for the counter. When incremental state is cleared, the
       * counter value is considered to be reset to 0. Thus, the first value after
       * incremental state is cleared is effectively an absolute value.
       * </pre>
       *
       * <code>optional bool is_incremental = 5;</code>
       * @param value The isIncremental to set.
       * @return This builder for chaining.
       */
      public Builder setIsIncremental(boolean value) {
        
        isIncremental_ = value;
        bitField0_ |= 0x00000020;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Whether values for this counter are provided as delta values. Only
       * supported for counters that are emitted on a single packet-sequence (e.g.
       * thread time). Counter values in subsequent packets on the current packet
       * sequence will be interpreted as delta values from the sequence's most
       * recent value for the counter. When incremental state is cleared, the
       * counter value is considered to be reset to 0. Thus, the first value after
       * incremental state is cleared is effectively an absolute value.
       * </pre>
       *
       * <code>optional bool is_incremental = 5;</code>
       * @return This builder for chaining.
       */
      public Builder clearIsIncremental() {
        bitField0_ = (bitField0_ & ~0x00000020);
        isIncremental_ = false;
        onChanged();
        return this;
      }
      @java.lang.Override
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      @java.lang.Override
      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:perfetto.protos.CounterDescriptor)
    }

    // @@protoc_insertion_point(class_scope:perfetto.protos.CounterDescriptor)
    private static final perfetto.protos.CounterDescriptorOuterClass.CounterDescriptor DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new perfetto.protos.CounterDescriptorOuterClass.CounterDescriptor();
    }

    public static perfetto.protos.CounterDescriptorOuterClass.CounterDescriptor getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    @java.lang.Deprecated public static final com.google.protobuf.Parser<CounterDescriptor>
        PARSER = new com.google.protobuf.AbstractParser<CounterDescriptor>() {
      @java.lang.Override
      public CounterDescriptor parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        Builder builder = newBuilder();
        try {
          builder.mergeFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.setUnfinishedMessage(builder.buildPartial());
        } catch (com.google.protobuf.UninitializedMessageException e) {
          throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
        } catch (java.io.IOException e) {
          throw new com.google.protobuf.InvalidProtocolBufferException(e)
              .setUnfinishedMessage(builder.buildPartial());
        }
        return builder.buildPartial();
      }
    };

    public static com.google.protobuf.Parser<CounterDescriptor> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<CounterDescriptor> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public perfetto.protos.CounterDescriptorOuterClass.CounterDescriptor getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_perfetto_protos_CounterDescriptor_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_perfetto_protos_CounterDescriptor_fieldAccessorTable;

  public static com.google.protobuf.Descriptors.FileDescriptor
      getDescriptor() {
    return descriptor;
  }
  private static  com.google.protobuf.Descriptors.FileDescriptor
      descriptor;
  static {
    java.lang.String[] descriptorData = {
      "\n:protos/perfetto/trace/track_event/coun" +
      "ter_descriptor.proto\022\017perfetto.protos\"\255\003" +
      "\n\021CounterDescriptor\022C\n\004type\030\001 \001(\01625.perf" +
      "etto.protos.CounterDescriptor.BuiltinCou" +
      "nterType\022\022\n\ncategories\030\002 \003(\t\0225\n\004unit\030\003 \001" +
      "(\0162\'.perfetto.protos.CounterDescriptor.U" +
      "nit\022\021\n\tunit_name\030\006 \001(\t\022\027\n\017unit_multiplie" +
      "r\030\004 \001(\003\022\026\n\016is_incremental\030\005 \001(\010\"o\n\022Built" +
      "inCounterType\022\027\n\023COUNTER_UNSPECIFIED\020\000\022\032" +
      "\n\026COUNTER_THREAD_TIME_NS\020\001\022$\n COUNTER_TH" +
      "READ_INSTRUCTION_COUNT\020\002\"S\n\004Unit\022\024\n\020UNIT" +
      "_UNSPECIFIED\020\000\022\020\n\014UNIT_TIME_NS\020\001\022\016\n\nUNIT" +
      "_COUNT\020\002\022\023\n\017UNIT_SIZE_BYTES\020\003"
    };
    descriptor = com.google.protobuf.Descriptors.FileDescriptor
      .internalBuildGeneratedFileFrom(descriptorData,
        new com.google.protobuf.Descriptors.FileDescriptor[] {
        });
    internal_static_perfetto_protos_CounterDescriptor_descriptor =
      getDescriptor().getMessageTypes().get(0);
    internal_static_perfetto_protos_CounterDescriptor_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_perfetto_protos_CounterDescriptor_descriptor,
        new java.lang.String[] { "Type", "Categories", "Unit", "UnitName", "UnitMultiplier", "IsIncremental", });
  }

  // @@protoc_insertion_point(outer_class_scope)
}
