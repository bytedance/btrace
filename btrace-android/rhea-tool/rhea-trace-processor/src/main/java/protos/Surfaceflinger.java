// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: protos/perfetto/metrics/android/surfaceflinger.proto

package perfetto.protos;

public final class Surfaceflinger {
  private Surfaceflinger() {}
  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistryLite registry) {
  }

  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistry registry) {
    registerAllExtensions(
        (com.google.protobuf.ExtensionRegistryLite) registry);
  }
  public interface AndroidSurfaceflingerMetricOrBuilder extends
      // @@protoc_insertion_point(interface_extends:perfetto.protos.AndroidSurfaceflingerMetric)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <pre>
     * Counts the number of missed frames in the trace.
     * </pre>
     *
     * <code>optional uint32 missed_frames = 1;</code>
     * @return Whether the missedFrames field is set.
     */
    boolean hasMissedFrames();
    /**
     * <pre>
     * Counts the number of missed frames in the trace.
     * </pre>
     *
     * <code>optional uint32 missed_frames = 1;</code>
     * @return The missedFrames.
     */
    int getMissedFrames();

    /**
     * <pre>
     * Counts the number of missed HWC frames in the trace.
     * </pre>
     *
     * <code>optional uint32 missed_hwc_frames = 2;</code>
     * @return Whether the missedHwcFrames field is set.
     */
    boolean hasMissedHwcFrames();
    /**
     * <pre>
     * Counts the number of missed HWC frames in the trace.
     * </pre>
     *
     * <code>optional uint32 missed_hwc_frames = 2;</code>
     * @return The missedHwcFrames.
     */
    int getMissedHwcFrames();

    /**
     * <pre>
     * Counts the number of missed GPU frames in the trace.
     * </pre>
     *
     * <code>optional uint32 missed_gpu_frames = 3;</code>
     * @return Whether the missedGpuFrames field is set.
     */
    boolean hasMissedGpuFrames();
    /**
     * <pre>
     * Counts the number of missed GPU frames in the trace.
     * </pre>
     *
     * <code>optional uint32 missed_gpu_frames = 3;</code>
     * @return The missedGpuFrames.
     */
    int getMissedGpuFrames();

    /**
     * <pre>
     * Calculate the number of missed frames divided by
     * total frames
     * </pre>
     *
     * <code>optional double missed_frame_rate = 4;</code>
     * @return Whether the missedFrameRate field is set.
     */
    boolean hasMissedFrameRate();
    /**
     * <pre>
     * Calculate the number of missed frames divided by
     * total frames
     * </pre>
     *
     * <code>optional double missed_frame_rate = 4;</code>
     * @return The missedFrameRate.
     */
    double getMissedFrameRate();

    /**
     * <pre>
     * Calculate the number of missed HWC frames divided by
     * total HWC frames
     * </pre>
     *
     * <code>optional double missed_hwc_frame_rate = 5;</code>
     * @return Whether the missedHwcFrameRate field is set.
     */
    boolean hasMissedHwcFrameRate();
    /**
     * <pre>
     * Calculate the number of missed HWC frames divided by
     * total HWC frames
     * </pre>
     *
     * <code>optional double missed_hwc_frame_rate = 5;</code>
     * @return The missedHwcFrameRate.
     */
    double getMissedHwcFrameRate();

    /**
     * <pre>
     * Calculate the number of missed GPU frames divided by
     * total GPU frames
     * </pre>
     *
     * <code>optional double missed_gpu_frame_rate = 6;</code>
     * @return Whether the missedGpuFrameRate field is set.
     */
    boolean hasMissedGpuFrameRate();
    /**
     * <pre>
     * Calculate the number of missed GPU frames divided by
     * total GPU frames
     * </pre>
     *
     * <code>optional double missed_gpu_frame_rate = 6;</code>
     * @return The missedGpuFrameRate.
     */
    double getMissedGpuFrameRate();

    /**
     * <pre>
     * Count the number of times SurfaceFlinger needs to invoke GPU
     * for rendering some layers
     * </pre>
     *
     * <code>optional uint32 gpu_invocations = 7;</code>
     * @return Whether the gpuInvocations field is set.
     */
    boolean hasGpuInvocations();
    /**
     * <pre>
     * Count the number of times SurfaceFlinger needs to invoke GPU
     * for rendering some layers
     * </pre>
     *
     * <code>optional uint32 gpu_invocations = 7;</code>
     * @return The gpuInvocations.
     */
    int getGpuInvocations();

    /**
     * <pre>
     * Calculate the average duration of GPU request by SurfaceFlinger
     * since it enters the FenceMonitor's queue until it gets completed
     * </pre>
     *
     * <code>optional double avg_gpu_waiting_dur_ms = 8;</code>
     * @return Whether the avgGpuWaitingDurMs field is set.
     */
    boolean hasAvgGpuWaitingDurMs();
    /**
     * <pre>
     * Calculate the average duration of GPU request by SurfaceFlinger
     * since it enters the FenceMonitor's queue until it gets completed
     * </pre>
     *
     * <code>optional double avg_gpu_waiting_dur_ms = 8;</code>
     * @return The avgGpuWaitingDurMs.
     */
    double getAvgGpuWaitingDurMs();

    /**
     * <pre>
     * Calculate the total duration when there is at least one GPU request
     * by SurfaceFlinger that is still waiting for GPU to complete the
     * request.
     * This also equals to the total duration of
     * "waiting for GPU completion &lt;fence_num&gt;" in SurfaceFlinger.
     * </pre>
     *
     * <code>optional double total_non_empty_gpu_waiting_dur_ms = 9;</code>
     * @return Whether the totalNonEmptyGpuWaitingDurMs field is set.
     */
    boolean hasTotalNonEmptyGpuWaitingDurMs();
    /**
     * <pre>
     * Calculate the total duration when there is at least one GPU request
     * by SurfaceFlinger that is still waiting for GPU to complete the
     * request.
     * This also equals to the total duration of
     * "waiting for GPU completion &lt;fence_num&gt;" in SurfaceFlinger.
     * </pre>
     *
     * <code>optional double total_non_empty_gpu_waiting_dur_ms = 9;</code>
     * @return The totalNonEmptyGpuWaitingDurMs.
     */
    double getTotalNonEmptyGpuWaitingDurMs();
  }
  /**
   * Protobuf type {@code perfetto.protos.AndroidSurfaceflingerMetric}
   */
  public static final class AndroidSurfaceflingerMetric extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:perfetto.protos.AndroidSurfaceflingerMetric)
      AndroidSurfaceflingerMetricOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use AndroidSurfaceflingerMetric.newBuilder() to construct.
    private AndroidSurfaceflingerMetric(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private AndroidSurfaceflingerMetric() {
    }

    @java.lang.Override
    @SuppressWarnings({"unused"})
    protected java.lang.Object newInstance(
        UnusedPrivateParameter unused) {
      return new AndroidSurfaceflingerMetric();
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return perfetto.protos.Surfaceflinger.internal_static_perfetto_protos_AndroidSurfaceflingerMetric_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return perfetto.protos.Surfaceflinger.internal_static_perfetto_protos_AndroidSurfaceflingerMetric_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              perfetto.protos.Surfaceflinger.AndroidSurfaceflingerMetric.class, perfetto.protos.Surfaceflinger.AndroidSurfaceflingerMetric.Builder.class);
    }

    private int bitField0_;
    public static final int MISSED_FRAMES_FIELD_NUMBER = 1;
    private int missedFrames_ = 0;
    /**
     * <pre>
     * Counts the number of missed frames in the trace.
     * </pre>
     *
     * <code>optional uint32 missed_frames = 1;</code>
     * @return Whether the missedFrames field is set.
     */
    @java.lang.Override
    public boolean hasMissedFrames() {
      return ((bitField0_ & 0x00000001) != 0);
    }
    /**
     * <pre>
     * Counts the number of missed frames in the trace.
     * </pre>
     *
     * <code>optional uint32 missed_frames = 1;</code>
     * @return The missedFrames.
     */
    @java.lang.Override
    public int getMissedFrames() {
      return missedFrames_;
    }

    public static final int MISSED_HWC_FRAMES_FIELD_NUMBER = 2;
    private int missedHwcFrames_ = 0;
    /**
     * <pre>
     * Counts the number of missed HWC frames in the trace.
     * </pre>
     *
     * <code>optional uint32 missed_hwc_frames = 2;</code>
     * @return Whether the missedHwcFrames field is set.
     */
    @java.lang.Override
    public boolean hasMissedHwcFrames() {
      return ((bitField0_ & 0x00000002) != 0);
    }
    /**
     * <pre>
     * Counts the number of missed HWC frames in the trace.
     * </pre>
     *
     * <code>optional uint32 missed_hwc_frames = 2;</code>
     * @return The missedHwcFrames.
     */
    @java.lang.Override
    public int getMissedHwcFrames() {
      return missedHwcFrames_;
    }

    public static final int MISSED_GPU_FRAMES_FIELD_NUMBER = 3;
    private int missedGpuFrames_ = 0;
    /**
     * <pre>
     * Counts the number of missed GPU frames in the trace.
     * </pre>
     *
     * <code>optional uint32 missed_gpu_frames = 3;</code>
     * @return Whether the missedGpuFrames field is set.
     */
    @java.lang.Override
    public boolean hasMissedGpuFrames() {
      return ((bitField0_ & 0x00000004) != 0);
    }
    /**
     * <pre>
     * Counts the number of missed GPU frames in the trace.
     * </pre>
     *
     * <code>optional uint32 missed_gpu_frames = 3;</code>
     * @return The missedGpuFrames.
     */
    @java.lang.Override
    public int getMissedGpuFrames() {
      return missedGpuFrames_;
    }

    public static final int MISSED_FRAME_RATE_FIELD_NUMBER = 4;
    private double missedFrameRate_ = 0D;
    /**
     * <pre>
     * Calculate the number of missed frames divided by
     * total frames
     * </pre>
     *
     * <code>optional double missed_frame_rate = 4;</code>
     * @return Whether the missedFrameRate field is set.
     */
    @java.lang.Override
    public boolean hasMissedFrameRate() {
      return ((bitField0_ & 0x00000008) != 0);
    }
    /**
     * <pre>
     * Calculate the number of missed frames divided by
     * total frames
     * </pre>
     *
     * <code>optional double missed_frame_rate = 4;</code>
     * @return The missedFrameRate.
     */
    @java.lang.Override
    public double getMissedFrameRate() {
      return missedFrameRate_;
    }

    public static final int MISSED_HWC_FRAME_RATE_FIELD_NUMBER = 5;
    private double missedHwcFrameRate_ = 0D;
    /**
     * <pre>
     * Calculate the number of missed HWC frames divided by
     * total HWC frames
     * </pre>
     *
     * <code>optional double missed_hwc_frame_rate = 5;</code>
     * @return Whether the missedHwcFrameRate field is set.
     */
    @java.lang.Override
    public boolean hasMissedHwcFrameRate() {
      return ((bitField0_ & 0x00000010) != 0);
    }
    /**
     * <pre>
     * Calculate the number of missed HWC frames divided by
     * total HWC frames
     * </pre>
     *
     * <code>optional double missed_hwc_frame_rate = 5;</code>
     * @return The missedHwcFrameRate.
     */
    @java.lang.Override
    public double getMissedHwcFrameRate() {
      return missedHwcFrameRate_;
    }

    public static final int MISSED_GPU_FRAME_RATE_FIELD_NUMBER = 6;
    private double missedGpuFrameRate_ = 0D;
    /**
     * <pre>
     * Calculate the number of missed GPU frames divided by
     * total GPU frames
     * </pre>
     *
     * <code>optional double missed_gpu_frame_rate = 6;</code>
     * @return Whether the missedGpuFrameRate field is set.
     */
    @java.lang.Override
    public boolean hasMissedGpuFrameRate() {
      return ((bitField0_ & 0x00000020) != 0);
    }
    /**
     * <pre>
     * Calculate the number of missed GPU frames divided by
     * total GPU frames
     * </pre>
     *
     * <code>optional double missed_gpu_frame_rate = 6;</code>
     * @return The missedGpuFrameRate.
     */
    @java.lang.Override
    public double getMissedGpuFrameRate() {
      return missedGpuFrameRate_;
    }

    public static final int GPU_INVOCATIONS_FIELD_NUMBER = 7;
    private int gpuInvocations_ = 0;
    /**
     * <pre>
     * Count the number of times SurfaceFlinger needs to invoke GPU
     * for rendering some layers
     * </pre>
     *
     * <code>optional uint32 gpu_invocations = 7;</code>
     * @return Whether the gpuInvocations field is set.
     */
    @java.lang.Override
    public boolean hasGpuInvocations() {
      return ((bitField0_ & 0x00000040) != 0);
    }
    /**
     * <pre>
     * Count the number of times SurfaceFlinger needs to invoke GPU
     * for rendering some layers
     * </pre>
     *
     * <code>optional uint32 gpu_invocations = 7;</code>
     * @return The gpuInvocations.
     */
    @java.lang.Override
    public int getGpuInvocations() {
      return gpuInvocations_;
    }

    public static final int AVG_GPU_WAITING_DUR_MS_FIELD_NUMBER = 8;
    private double avgGpuWaitingDurMs_ = 0D;
    /**
     * <pre>
     * Calculate the average duration of GPU request by SurfaceFlinger
     * since it enters the FenceMonitor's queue until it gets completed
     * </pre>
     *
     * <code>optional double avg_gpu_waiting_dur_ms = 8;</code>
     * @return Whether the avgGpuWaitingDurMs field is set.
     */
    @java.lang.Override
    public boolean hasAvgGpuWaitingDurMs() {
      return ((bitField0_ & 0x00000080) != 0);
    }
    /**
     * <pre>
     * Calculate the average duration of GPU request by SurfaceFlinger
     * since it enters the FenceMonitor's queue until it gets completed
     * </pre>
     *
     * <code>optional double avg_gpu_waiting_dur_ms = 8;</code>
     * @return The avgGpuWaitingDurMs.
     */
    @java.lang.Override
    public double getAvgGpuWaitingDurMs() {
      return avgGpuWaitingDurMs_;
    }

    public static final int TOTAL_NON_EMPTY_GPU_WAITING_DUR_MS_FIELD_NUMBER = 9;
    private double totalNonEmptyGpuWaitingDurMs_ = 0D;
    /**
     * <pre>
     * Calculate the total duration when there is at least one GPU request
     * by SurfaceFlinger that is still waiting for GPU to complete the
     * request.
     * This also equals to the total duration of
     * "waiting for GPU completion &lt;fence_num&gt;" in SurfaceFlinger.
     * </pre>
     *
     * <code>optional double total_non_empty_gpu_waiting_dur_ms = 9;</code>
     * @return Whether the totalNonEmptyGpuWaitingDurMs field is set.
     */
    @java.lang.Override
    public boolean hasTotalNonEmptyGpuWaitingDurMs() {
      return ((bitField0_ & 0x00000100) != 0);
    }
    /**
     * <pre>
     * Calculate the total duration when there is at least one GPU request
     * by SurfaceFlinger that is still waiting for GPU to complete the
     * request.
     * This also equals to the total duration of
     * "waiting for GPU completion &lt;fence_num&gt;" in SurfaceFlinger.
     * </pre>
     *
     * <code>optional double total_non_empty_gpu_waiting_dur_ms = 9;</code>
     * @return The totalNonEmptyGpuWaitingDurMs.
     */
    @java.lang.Override
    public double getTotalNonEmptyGpuWaitingDurMs() {
      return totalNonEmptyGpuWaitingDurMs_;
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (((bitField0_ & 0x00000001) != 0)) {
        output.writeUInt32(1, missedFrames_);
      }
      if (((bitField0_ & 0x00000002) != 0)) {
        output.writeUInt32(2, missedHwcFrames_);
      }
      if (((bitField0_ & 0x00000004) != 0)) {
        output.writeUInt32(3, missedGpuFrames_);
      }
      if (((bitField0_ & 0x00000008) != 0)) {
        output.writeDouble(4, missedFrameRate_);
      }
      if (((bitField0_ & 0x00000010) != 0)) {
        output.writeDouble(5, missedHwcFrameRate_);
      }
      if (((bitField0_ & 0x00000020) != 0)) {
        output.writeDouble(6, missedGpuFrameRate_);
      }
      if (((bitField0_ & 0x00000040) != 0)) {
        output.writeUInt32(7, gpuInvocations_);
      }
      if (((bitField0_ & 0x00000080) != 0)) {
        output.writeDouble(8, avgGpuWaitingDurMs_);
      }
      if (((bitField0_ & 0x00000100) != 0)) {
        output.writeDouble(9, totalNonEmptyGpuWaitingDurMs_);
      }
      getUnknownFields().writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) != 0)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(1, missedFrames_);
      }
      if (((bitField0_ & 0x00000002) != 0)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(2, missedHwcFrames_);
      }
      if (((bitField0_ & 0x00000004) != 0)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(3, missedGpuFrames_);
      }
      if (((bitField0_ & 0x00000008) != 0)) {
        size += com.google.protobuf.CodedOutputStream
          .computeDoubleSize(4, missedFrameRate_);
      }
      if (((bitField0_ & 0x00000010) != 0)) {
        size += com.google.protobuf.CodedOutputStream
          .computeDoubleSize(5, missedHwcFrameRate_);
      }
      if (((bitField0_ & 0x00000020) != 0)) {
        size += com.google.protobuf.CodedOutputStream
          .computeDoubleSize(6, missedGpuFrameRate_);
      }
      if (((bitField0_ & 0x00000040) != 0)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(7, gpuInvocations_);
      }
      if (((bitField0_ & 0x00000080) != 0)) {
        size += com.google.protobuf.CodedOutputStream
          .computeDoubleSize(8, avgGpuWaitingDurMs_);
      }
      if (((bitField0_ & 0x00000100) != 0)) {
        size += com.google.protobuf.CodedOutputStream
          .computeDoubleSize(9, totalNonEmptyGpuWaitingDurMs_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof perfetto.protos.Surfaceflinger.AndroidSurfaceflingerMetric)) {
        return super.equals(obj);
      }
      perfetto.protos.Surfaceflinger.AndroidSurfaceflingerMetric other = (perfetto.protos.Surfaceflinger.AndroidSurfaceflingerMetric) obj;

      if (hasMissedFrames() != other.hasMissedFrames()) return false;
      if (hasMissedFrames()) {
        if (getMissedFrames()
            != other.getMissedFrames()) return false;
      }
      if (hasMissedHwcFrames() != other.hasMissedHwcFrames()) return false;
      if (hasMissedHwcFrames()) {
        if (getMissedHwcFrames()
            != other.getMissedHwcFrames()) return false;
      }
      if (hasMissedGpuFrames() != other.hasMissedGpuFrames()) return false;
      if (hasMissedGpuFrames()) {
        if (getMissedGpuFrames()
            != other.getMissedGpuFrames()) return false;
      }
      if (hasMissedFrameRate() != other.hasMissedFrameRate()) return false;
      if (hasMissedFrameRate()) {
        if (java.lang.Double.doubleToLongBits(getMissedFrameRate())
            != java.lang.Double.doubleToLongBits(
                other.getMissedFrameRate())) return false;
      }
      if (hasMissedHwcFrameRate() != other.hasMissedHwcFrameRate()) return false;
      if (hasMissedHwcFrameRate()) {
        if (java.lang.Double.doubleToLongBits(getMissedHwcFrameRate())
            != java.lang.Double.doubleToLongBits(
                other.getMissedHwcFrameRate())) return false;
      }
      if (hasMissedGpuFrameRate() != other.hasMissedGpuFrameRate()) return false;
      if (hasMissedGpuFrameRate()) {
        if (java.lang.Double.doubleToLongBits(getMissedGpuFrameRate())
            != java.lang.Double.doubleToLongBits(
                other.getMissedGpuFrameRate())) return false;
      }
      if (hasGpuInvocations() != other.hasGpuInvocations()) return false;
      if (hasGpuInvocations()) {
        if (getGpuInvocations()
            != other.getGpuInvocations()) return false;
      }
      if (hasAvgGpuWaitingDurMs() != other.hasAvgGpuWaitingDurMs()) return false;
      if (hasAvgGpuWaitingDurMs()) {
        if (java.lang.Double.doubleToLongBits(getAvgGpuWaitingDurMs())
            != java.lang.Double.doubleToLongBits(
                other.getAvgGpuWaitingDurMs())) return false;
      }
      if (hasTotalNonEmptyGpuWaitingDurMs() != other.hasTotalNonEmptyGpuWaitingDurMs()) return false;
      if (hasTotalNonEmptyGpuWaitingDurMs()) {
        if (java.lang.Double.doubleToLongBits(getTotalNonEmptyGpuWaitingDurMs())
            != java.lang.Double.doubleToLongBits(
                other.getTotalNonEmptyGpuWaitingDurMs())) return false;
      }
      if (!getUnknownFields().equals(other.getUnknownFields())) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      if (hasMissedFrames()) {
        hash = (37 * hash) + MISSED_FRAMES_FIELD_NUMBER;
        hash = (53 * hash) + getMissedFrames();
      }
      if (hasMissedHwcFrames()) {
        hash = (37 * hash) + MISSED_HWC_FRAMES_FIELD_NUMBER;
        hash = (53 * hash) + getMissedHwcFrames();
      }
      if (hasMissedGpuFrames()) {
        hash = (37 * hash) + MISSED_GPU_FRAMES_FIELD_NUMBER;
        hash = (53 * hash) + getMissedGpuFrames();
      }
      if (hasMissedFrameRate()) {
        hash = (37 * hash) + MISSED_FRAME_RATE_FIELD_NUMBER;
        hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
            java.lang.Double.doubleToLongBits(getMissedFrameRate()));
      }
      if (hasMissedHwcFrameRate()) {
        hash = (37 * hash) + MISSED_HWC_FRAME_RATE_FIELD_NUMBER;
        hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
            java.lang.Double.doubleToLongBits(getMissedHwcFrameRate()));
      }
      if (hasMissedGpuFrameRate()) {
        hash = (37 * hash) + MISSED_GPU_FRAME_RATE_FIELD_NUMBER;
        hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
            java.lang.Double.doubleToLongBits(getMissedGpuFrameRate()));
      }
      if (hasGpuInvocations()) {
        hash = (37 * hash) + GPU_INVOCATIONS_FIELD_NUMBER;
        hash = (53 * hash) + getGpuInvocations();
      }
      if (hasAvgGpuWaitingDurMs()) {
        hash = (37 * hash) + AVG_GPU_WAITING_DUR_MS_FIELD_NUMBER;
        hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
            java.lang.Double.doubleToLongBits(getAvgGpuWaitingDurMs()));
      }
      if (hasTotalNonEmptyGpuWaitingDurMs()) {
        hash = (37 * hash) + TOTAL_NON_EMPTY_GPU_WAITING_DUR_MS_FIELD_NUMBER;
        hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
            java.lang.Double.doubleToLongBits(getTotalNonEmptyGpuWaitingDurMs()));
      }
      hash = (29 * hash) + getUnknownFields().hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static perfetto.protos.Surfaceflinger.AndroidSurfaceflingerMetric parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static perfetto.protos.Surfaceflinger.AndroidSurfaceflingerMetric parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static perfetto.protos.Surfaceflinger.AndroidSurfaceflingerMetric parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static perfetto.protos.Surfaceflinger.AndroidSurfaceflingerMetric parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static perfetto.protos.Surfaceflinger.AndroidSurfaceflingerMetric parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static perfetto.protos.Surfaceflinger.AndroidSurfaceflingerMetric parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static perfetto.protos.Surfaceflinger.AndroidSurfaceflingerMetric parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static perfetto.protos.Surfaceflinger.AndroidSurfaceflingerMetric parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static perfetto.protos.Surfaceflinger.AndroidSurfaceflingerMetric parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static perfetto.protos.Surfaceflinger.AndroidSurfaceflingerMetric parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static perfetto.protos.Surfaceflinger.AndroidSurfaceflingerMetric parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static perfetto.protos.Surfaceflinger.AndroidSurfaceflingerMetric parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(perfetto.protos.Surfaceflinger.AndroidSurfaceflingerMetric prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code perfetto.protos.AndroidSurfaceflingerMetric}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:perfetto.protos.AndroidSurfaceflingerMetric)
        perfetto.protos.Surfaceflinger.AndroidSurfaceflingerMetricOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return perfetto.protos.Surfaceflinger.internal_static_perfetto_protos_AndroidSurfaceflingerMetric_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return perfetto.protos.Surfaceflinger.internal_static_perfetto_protos_AndroidSurfaceflingerMetric_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                perfetto.protos.Surfaceflinger.AndroidSurfaceflingerMetric.class, perfetto.protos.Surfaceflinger.AndroidSurfaceflingerMetric.Builder.class);
      }

      // Construct using perfetto.protos.Surfaceflinger.AndroidSurfaceflingerMetric.newBuilder()
      private Builder() {

      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);

      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        bitField0_ = 0;
        missedFrames_ = 0;
        missedHwcFrames_ = 0;
        missedGpuFrames_ = 0;
        missedFrameRate_ = 0D;
        missedHwcFrameRate_ = 0D;
        missedGpuFrameRate_ = 0D;
        gpuInvocations_ = 0;
        avgGpuWaitingDurMs_ = 0D;
        totalNonEmptyGpuWaitingDurMs_ = 0D;
        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return perfetto.protos.Surfaceflinger.internal_static_perfetto_protos_AndroidSurfaceflingerMetric_descriptor;
      }

      @java.lang.Override
      public perfetto.protos.Surfaceflinger.AndroidSurfaceflingerMetric getDefaultInstanceForType() {
        return perfetto.protos.Surfaceflinger.AndroidSurfaceflingerMetric.getDefaultInstance();
      }

      @java.lang.Override
      public perfetto.protos.Surfaceflinger.AndroidSurfaceflingerMetric build() {
        perfetto.protos.Surfaceflinger.AndroidSurfaceflingerMetric result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public perfetto.protos.Surfaceflinger.AndroidSurfaceflingerMetric buildPartial() {
        perfetto.protos.Surfaceflinger.AndroidSurfaceflingerMetric result = new perfetto.protos.Surfaceflinger.AndroidSurfaceflingerMetric(this);
        if (bitField0_ != 0) { buildPartial0(result); }
        onBuilt();
        return result;
      }

      private void buildPartial0(perfetto.protos.Surfaceflinger.AndroidSurfaceflingerMetric result) {
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) != 0)) {
          result.missedFrames_ = missedFrames_;
          to_bitField0_ |= 0x00000001;
        }
        if (((from_bitField0_ & 0x00000002) != 0)) {
          result.missedHwcFrames_ = missedHwcFrames_;
          to_bitField0_ |= 0x00000002;
        }
        if (((from_bitField0_ & 0x00000004) != 0)) {
          result.missedGpuFrames_ = missedGpuFrames_;
          to_bitField0_ |= 0x00000004;
        }
        if (((from_bitField0_ & 0x00000008) != 0)) {
          result.missedFrameRate_ = missedFrameRate_;
          to_bitField0_ |= 0x00000008;
        }
        if (((from_bitField0_ & 0x00000010) != 0)) {
          result.missedHwcFrameRate_ = missedHwcFrameRate_;
          to_bitField0_ |= 0x00000010;
        }
        if (((from_bitField0_ & 0x00000020) != 0)) {
          result.missedGpuFrameRate_ = missedGpuFrameRate_;
          to_bitField0_ |= 0x00000020;
        }
        if (((from_bitField0_ & 0x00000040) != 0)) {
          result.gpuInvocations_ = gpuInvocations_;
          to_bitField0_ |= 0x00000040;
        }
        if (((from_bitField0_ & 0x00000080) != 0)) {
          result.avgGpuWaitingDurMs_ = avgGpuWaitingDurMs_;
          to_bitField0_ |= 0x00000080;
        }
        if (((from_bitField0_ & 0x00000100) != 0)) {
          result.totalNonEmptyGpuWaitingDurMs_ = totalNonEmptyGpuWaitingDurMs_;
          to_bitField0_ |= 0x00000100;
        }
        result.bitField0_ |= to_bitField0_;
      }

      @java.lang.Override
      public Builder clone() {
        return super.clone();
      }
      @java.lang.Override
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.setField(field, value);
      }
      @java.lang.Override
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return super.clearField(field);
      }
      @java.lang.Override
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return super.clearOneof(oneof);
      }
      @java.lang.Override
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, java.lang.Object value) {
        return super.setRepeatedField(field, index, value);
      }
      @java.lang.Override
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.addRepeatedField(field, value);
      }
      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof perfetto.protos.Surfaceflinger.AndroidSurfaceflingerMetric) {
          return mergeFrom((perfetto.protos.Surfaceflinger.AndroidSurfaceflingerMetric)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(perfetto.protos.Surfaceflinger.AndroidSurfaceflingerMetric other) {
        if (other == perfetto.protos.Surfaceflinger.AndroidSurfaceflingerMetric.getDefaultInstance()) return this;
        if (other.hasMissedFrames()) {
          setMissedFrames(other.getMissedFrames());
        }
        if (other.hasMissedHwcFrames()) {
          setMissedHwcFrames(other.getMissedHwcFrames());
        }
        if (other.hasMissedGpuFrames()) {
          setMissedGpuFrames(other.getMissedGpuFrames());
        }
        if (other.hasMissedFrameRate()) {
          setMissedFrameRate(other.getMissedFrameRate());
        }
        if (other.hasMissedHwcFrameRate()) {
          setMissedHwcFrameRate(other.getMissedHwcFrameRate());
        }
        if (other.hasMissedGpuFrameRate()) {
          setMissedGpuFrameRate(other.getMissedGpuFrameRate());
        }
        if (other.hasGpuInvocations()) {
          setGpuInvocations(other.getGpuInvocations());
        }
        if (other.hasAvgGpuWaitingDurMs()) {
          setAvgGpuWaitingDurMs(other.getAvgGpuWaitingDurMs());
        }
        if (other.hasTotalNonEmptyGpuWaitingDurMs()) {
          setTotalNonEmptyGpuWaitingDurMs(other.getTotalNonEmptyGpuWaitingDurMs());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        if (extensionRegistry == null) {
          throw new java.lang.NullPointerException();
        }
        try {
          boolean done = false;
          while (!done) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                done = true;
                break;
              case 8: {
                missedFrames_ = input.readUInt32();
                bitField0_ |= 0x00000001;
                break;
              } // case 8
              case 16: {
                missedHwcFrames_ = input.readUInt32();
                bitField0_ |= 0x00000002;
                break;
              } // case 16
              case 24: {
                missedGpuFrames_ = input.readUInt32();
                bitField0_ |= 0x00000004;
                break;
              } // case 24
              case 33: {
                missedFrameRate_ = input.readDouble();
                bitField0_ |= 0x00000008;
                break;
              } // case 33
              case 41: {
                missedHwcFrameRate_ = input.readDouble();
                bitField0_ |= 0x00000010;
                break;
              } // case 41
              case 49: {
                missedGpuFrameRate_ = input.readDouble();
                bitField0_ |= 0x00000020;
                break;
              } // case 49
              case 56: {
                gpuInvocations_ = input.readUInt32();
                bitField0_ |= 0x00000040;
                break;
              } // case 56
              case 65: {
                avgGpuWaitingDurMs_ = input.readDouble();
                bitField0_ |= 0x00000080;
                break;
              } // case 65
              case 73: {
                totalNonEmptyGpuWaitingDurMs_ = input.readDouble();
                bitField0_ |= 0x00000100;
                break;
              } // case 73
              default: {
                if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                  done = true; // was an endgroup tag
                }
                break;
              } // default:
            } // switch (tag)
          } // while (!done)
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.unwrapIOException();
        } finally {
          onChanged();
        } // finally
        return this;
      }
      private int bitField0_;

      private int missedFrames_ ;
      /**
       * <pre>
       * Counts the number of missed frames in the trace.
       * </pre>
       *
       * <code>optional uint32 missed_frames = 1;</code>
       * @return Whether the missedFrames field is set.
       */
      @java.lang.Override
      public boolean hasMissedFrames() {
        return ((bitField0_ & 0x00000001) != 0);
      }
      /**
       * <pre>
       * Counts the number of missed frames in the trace.
       * </pre>
       *
       * <code>optional uint32 missed_frames = 1;</code>
       * @return The missedFrames.
       */
      @java.lang.Override
      public int getMissedFrames() {
        return missedFrames_;
      }
      /**
       * <pre>
       * Counts the number of missed frames in the trace.
       * </pre>
       *
       * <code>optional uint32 missed_frames = 1;</code>
       * @param value The missedFrames to set.
       * @return This builder for chaining.
       */
      public Builder setMissedFrames(int value) {
        
        missedFrames_ = value;
        bitField0_ |= 0x00000001;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Counts the number of missed frames in the trace.
       * </pre>
       *
       * <code>optional uint32 missed_frames = 1;</code>
       * @return This builder for chaining.
       */
      public Builder clearMissedFrames() {
        bitField0_ = (bitField0_ & ~0x00000001);
        missedFrames_ = 0;
        onChanged();
        return this;
      }

      private int missedHwcFrames_ ;
      /**
       * <pre>
       * Counts the number of missed HWC frames in the trace.
       * </pre>
       *
       * <code>optional uint32 missed_hwc_frames = 2;</code>
       * @return Whether the missedHwcFrames field is set.
       */
      @java.lang.Override
      public boolean hasMissedHwcFrames() {
        return ((bitField0_ & 0x00000002) != 0);
      }
      /**
       * <pre>
       * Counts the number of missed HWC frames in the trace.
       * </pre>
       *
       * <code>optional uint32 missed_hwc_frames = 2;</code>
       * @return The missedHwcFrames.
       */
      @java.lang.Override
      public int getMissedHwcFrames() {
        return missedHwcFrames_;
      }
      /**
       * <pre>
       * Counts the number of missed HWC frames in the trace.
       * </pre>
       *
       * <code>optional uint32 missed_hwc_frames = 2;</code>
       * @param value The missedHwcFrames to set.
       * @return This builder for chaining.
       */
      public Builder setMissedHwcFrames(int value) {
        
        missedHwcFrames_ = value;
        bitField0_ |= 0x00000002;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Counts the number of missed HWC frames in the trace.
       * </pre>
       *
       * <code>optional uint32 missed_hwc_frames = 2;</code>
       * @return This builder for chaining.
       */
      public Builder clearMissedHwcFrames() {
        bitField0_ = (bitField0_ & ~0x00000002);
        missedHwcFrames_ = 0;
        onChanged();
        return this;
      }

      private int missedGpuFrames_ ;
      /**
       * <pre>
       * Counts the number of missed GPU frames in the trace.
       * </pre>
       *
       * <code>optional uint32 missed_gpu_frames = 3;</code>
       * @return Whether the missedGpuFrames field is set.
       */
      @java.lang.Override
      public boolean hasMissedGpuFrames() {
        return ((bitField0_ & 0x00000004) != 0);
      }
      /**
       * <pre>
       * Counts the number of missed GPU frames in the trace.
       * </pre>
       *
       * <code>optional uint32 missed_gpu_frames = 3;</code>
       * @return The missedGpuFrames.
       */
      @java.lang.Override
      public int getMissedGpuFrames() {
        return missedGpuFrames_;
      }
      /**
       * <pre>
       * Counts the number of missed GPU frames in the trace.
       * </pre>
       *
       * <code>optional uint32 missed_gpu_frames = 3;</code>
       * @param value The missedGpuFrames to set.
       * @return This builder for chaining.
       */
      public Builder setMissedGpuFrames(int value) {
        
        missedGpuFrames_ = value;
        bitField0_ |= 0x00000004;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Counts the number of missed GPU frames in the trace.
       * </pre>
       *
       * <code>optional uint32 missed_gpu_frames = 3;</code>
       * @return This builder for chaining.
       */
      public Builder clearMissedGpuFrames() {
        bitField0_ = (bitField0_ & ~0x00000004);
        missedGpuFrames_ = 0;
        onChanged();
        return this;
      }

      private double missedFrameRate_ ;
      /**
       * <pre>
       * Calculate the number of missed frames divided by
       * total frames
       * </pre>
       *
       * <code>optional double missed_frame_rate = 4;</code>
       * @return Whether the missedFrameRate field is set.
       */
      @java.lang.Override
      public boolean hasMissedFrameRate() {
        return ((bitField0_ & 0x00000008) != 0);
      }
      /**
       * <pre>
       * Calculate the number of missed frames divided by
       * total frames
       * </pre>
       *
       * <code>optional double missed_frame_rate = 4;</code>
       * @return The missedFrameRate.
       */
      @java.lang.Override
      public double getMissedFrameRate() {
        return missedFrameRate_;
      }
      /**
       * <pre>
       * Calculate the number of missed frames divided by
       * total frames
       * </pre>
       *
       * <code>optional double missed_frame_rate = 4;</code>
       * @param value The missedFrameRate to set.
       * @return This builder for chaining.
       */
      public Builder setMissedFrameRate(double value) {
        
        missedFrameRate_ = value;
        bitField0_ |= 0x00000008;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Calculate the number of missed frames divided by
       * total frames
       * </pre>
       *
       * <code>optional double missed_frame_rate = 4;</code>
       * @return This builder for chaining.
       */
      public Builder clearMissedFrameRate() {
        bitField0_ = (bitField0_ & ~0x00000008);
        missedFrameRate_ = 0D;
        onChanged();
        return this;
      }

      private double missedHwcFrameRate_ ;
      /**
       * <pre>
       * Calculate the number of missed HWC frames divided by
       * total HWC frames
       * </pre>
       *
       * <code>optional double missed_hwc_frame_rate = 5;</code>
       * @return Whether the missedHwcFrameRate field is set.
       */
      @java.lang.Override
      public boolean hasMissedHwcFrameRate() {
        return ((bitField0_ & 0x00000010) != 0);
      }
      /**
       * <pre>
       * Calculate the number of missed HWC frames divided by
       * total HWC frames
       * </pre>
       *
       * <code>optional double missed_hwc_frame_rate = 5;</code>
       * @return The missedHwcFrameRate.
       */
      @java.lang.Override
      public double getMissedHwcFrameRate() {
        return missedHwcFrameRate_;
      }
      /**
       * <pre>
       * Calculate the number of missed HWC frames divided by
       * total HWC frames
       * </pre>
       *
       * <code>optional double missed_hwc_frame_rate = 5;</code>
       * @param value The missedHwcFrameRate to set.
       * @return This builder for chaining.
       */
      public Builder setMissedHwcFrameRate(double value) {
        
        missedHwcFrameRate_ = value;
        bitField0_ |= 0x00000010;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Calculate the number of missed HWC frames divided by
       * total HWC frames
       * </pre>
       *
       * <code>optional double missed_hwc_frame_rate = 5;</code>
       * @return This builder for chaining.
       */
      public Builder clearMissedHwcFrameRate() {
        bitField0_ = (bitField0_ & ~0x00000010);
        missedHwcFrameRate_ = 0D;
        onChanged();
        return this;
      }

      private double missedGpuFrameRate_ ;
      /**
       * <pre>
       * Calculate the number of missed GPU frames divided by
       * total GPU frames
       * </pre>
       *
       * <code>optional double missed_gpu_frame_rate = 6;</code>
       * @return Whether the missedGpuFrameRate field is set.
       */
      @java.lang.Override
      public boolean hasMissedGpuFrameRate() {
        return ((bitField0_ & 0x00000020) != 0);
      }
      /**
       * <pre>
       * Calculate the number of missed GPU frames divided by
       * total GPU frames
       * </pre>
       *
       * <code>optional double missed_gpu_frame_rate = 6;</code>
       * @return The missedGpuFrameRate.
       */
      @java.lang.Override
      public double getMissedGpuFrameRate() {
        return missedGpuFrameRate_;
      }
      /**
       * <pre>
       * Calculate the number of missed GPU frames divided by
       * total GPU frames
       * </pre>
       *
       * <code>optional double missed_gpu_frame_rate = 6;</code>
       * @param value The missedGpuFrameRate to set.
       * @return This builder for chaining.
       */
      public Builder setMissedGpuFrameRate(double value) {
        
        missedGpuFrameRate_ = value;
        bitField0_ |= 0x00000020;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Calculate the number of missed GPU frames divided by
       * total GPU frames
       * </pre>
       *
       * <code>optional double missed_gpu_frame_rate = 6;</code>
       * @return This builder for chaining.
       */
      public Builder clearMissedGpuFrameRate() {
        bitField0_ = (bitField0_ & ~0x00000020);
        missedGpuFrameRate_ = 0D;
        onChanged();
        return this;
      }

      private int gpuInvocations_ ;
      /**
       * <pre>
       * Count the number of times SurfaceFlinger needs to invoke GPU
       * for rendering some layers
       * </pre>
       *
       * <code>optional uint32 gpu_invocations = 7;</code>
       * @return Whether the gpuInvocations field is set.
       */
      @java.lang.Override
      public boolean hasGpuInvocations() {
        return ((bitField0_ & 0x00000040) != 0);
      }
      /**
       * <pre>
       * Count the number of times SurfaceFlinger needs to invoke GPU
       * for rendering some layers
       * </pre>
       *
       * <code>optional uint32 gpu_invocations = 7;</code>
       * @return The gpuInvocations.
       */
      @java.lang.Override
      public int getGpuInvocations() {
        return gpuInvocations_;
      }
      /**
       * <pre>
       * Count the number of times SurfaceFlinger needs to invoke GPU
       * for rendering some layers
       * </pre>
       *
       * <code>optional uint32 gpu_invocations = 7;</code>
       * @param value The gpuInvocations to set.
       * @return This builder for chaining.
       */
      public Builder setGpuInvocations(int value) {
        
        gpuInvocations_ = value;
        bitField0_ |= 0x00000040;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Count the number of times SurfaceFlinger needs to invoke GPU
       * for rendering some layers
       * </pre>
       *
       * <code>optional uint32 gpu_invocations = 7;</code>
       * @return This builder for chaining.
       */
      public Builder clearGpuInvocations() {
        bitField0_ = (bitField0_ & ~0x00000040);
        gpuInvocations_ = 0;
        onChanged();
        return this;
      }

      private double avgGpuWaitingDurMs_ ;
      /**
       * <pre>
       * Calculate the average duration of GPU request by SurfaceFlinger
       * since it enters the FenceMonitor's queue until it gets completed
       * </pre>
       *
       * <code>optional double avg_gpu_waiting_dur_ms = 8;</code>
       * @return Whether the avgGpuWaitingDurMs field is set.
       */
      @java.lang.Override
      public boolean hasAvgGpuWaitingDurMs() {
        return ((bitField0_ & 0x00000080) != 0);
      }
      /**
       * <pre>
       * Calculate the average duration of GPU request by SurfaceFlinger
       * since it enters the FenceMonitor's queue until it gets completed
       * </pre>
       *
       * <code>optional double avg_gpu_waiting_dur_ms = 8;</code>
       * @return The avgGpuWaitingDurMs.
       */
      @java.lang.Override
      public double getAvgGpuWaitingDurMs() {
        return avgGpuWaitingDurMs_;
      }
      /**
       * <pre>
       * Calculate the average duration of GPU request by SurfaceFlinger
       * since it enters the FenceMonitor's queue until it gets completed
       * </pre>
       *
       * <code>optional double avg_gpu_waiting_dur_ms = 8;</code>
       * @param value The avgGpuWaitingDurMs to set.
       * @return This builder for chaining.
       */
      public Builder setAvgGpuWaitingDurMs(double value) {
        
        avgGpuWaitingDurMs_ = value;
        bitField0_ |= 0x00000080;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Calculate the average duration of GPU request by SurfaceFlinger
       * since it enters the FenceMonitor's queue until it gets completed
       * </pre>
       *
       * <code>optional double avg_gpu_waiting_dur_ms = 8;</code>
       * @return This builder for chaining.
       */
      public Builder clearAvgGpuWaitingDurMs() {
        bitField0_ = (bitField0_ & ~0x00000080);
        avgGpuWaitingDurMs_ = 0D;
        onChanged();
        return this;
      }

      private double totalNonEmptyGpuWaitingDurMs_ ;
      /**
       * <pre>
       * Calculate the total duration when there is at least one GPU request
       * by SurfaceFlinger that is still waiting for GPU to complete the
       * request.
       * This also equals to the total duration of
       * "waiting for GPU completion &lt;fence_num&gt;" in SurfaceFlinger.
       * </pre>
       *
       * <code>optional double total_non_empty_gpu_waiting_dur_ms = 9;</code>
       * @return Whether the totalNonEmptyGpuWaitingDurMs field is set.
       */
      @java.lang.Override
      public boolean hasTotalNonEmptyGpuWaitingDurMs() {
        return ((bitField0_ & 0x00000100) != 0);
      }
      /**
       * <pre>
       * Calculate the total duration when there is at least one GPU request
       * by SurfaceFlinger that is still waiting for GPU to complete the
       * request.
       * This also equals to the total duration of
       * "waiting for GPU completion &lt;fence_num&gt;" in SurfaceFlinger.
       * </pre>
       *
       * <code>optional double total_non_empty_gpu_waiting_dur_ms = 9;</code>
       * @return The totalNonEmptyGpuWaitingDurMs.
       */
      @java.lang.Override
      public double getTotalNonEmptyGpuWaitingDurMs() {
        return totalNonEmptyGpuWaitingDurMs_;
      }
      /**
       * <pre>
       * Calculate the total duration when there is at least one GPU request
       * by SurfaceFlinger that is still waiting for GPU to complete the
       * request.
       * This also equals to the total duration of
       * "waiting for GPU completion &lt;fence_num&gt;" in SurfaceFlinger.
       * </pre>
       *
       * <code>optional double total_non_empty_gpu_waiting_dur_ms = 9;</code>
       * @param value The totalNonEmptyGpuWaitingDurMs to set.
       * @return This builder for chaining.
       */
      public Builder setTotalNonEmptyGpuWaitingDurMs(double value) {
        
        totalNonEmptyGpuWaitingDurMs_ = value;
        bitField0_ |= 0x00000100;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Calculate the total duration when there is at least one GPU request
       * by SurfaceFlinger that is still waiting for GPU to complete the
       * request.
       * This also equals to the total duration of
       * "waiting for GPU completion &lt;fence_num&gt;" in SurfaceFlinger.
       * </pre>
       *
       * <code>optional double total_non_empty_gpu_waiting_dur_ms = 9;</code>
       * @return This builder for chaining.
       */
      public Builder clearTotalNonEmptyGpuWaitingDurMs() {
        bitField0_ = (bitField0_ & ~0x00000100);
        totalNonEmptyGpuWaitingDurMs_ = 0D;
        onChanged();
        return this;
      }
      @java.lang.Override
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      @java.lang.Override
      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:perfetto.protos.AndroidSurfaceflingerMetric)
    }

    // @@protoc_insertion_point(class_scope:perfetto.protos.AndroidSurfaceflingerMetric)
    private static final perfetto.protos.Surfaceflinger.AndroidSurfaceflingerMetric DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new perfetto.protos.Surfaceflinger.AndroidSurfaceflingerMetric();
    }

    public static perfetto.protos.Surfaceflinger.AndroidSurfaceflingerMetric getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    @java.lang.Deprecated public static final com.google.protobuf.Parser<AndroidSurfaceflingerMetric>
        PARSER = new com.google.protobuf.AbstractParser<AndroidSurfaceflingerMetric>() {
      @java.lang.Override
      public AndroidSurfaceflingerMetric parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        Builder builder = newBuilder();
        try {
          builder.mergeFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.setUnfinishedMessage(builder.buildPartial());
        } catch (com.google.protobuf.UninitializedMessageException e) {
          throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
        } catch (java.io.IOException e) {
          throw new com.google.protobuf.InvalidProtocolBufferException(e)
              .setUnfinishedMessage(builder.buildPartial());
        }
        return builder.buildPartial();
      }
    };

    public static com.google.protobuf.Parser<AndroidSurfaceflingerMetric> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<AndroidSurfaceflingerMetric> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public perfetto.protos.Surfaceflinger.AndroidSurfaceflingerMetric getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_perfetto_protos_AndroidSurfaceflingerMetric_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_perfetto_protos_AndroidSurfaceflingerMetric_fieldAccessorTable;

  public static com.google.protobuf.Descriptors.FileDescriptor
      getDescriptor() {
    return descriptor;
  }
  private static  com.google.protobuf.Descriptors.FileDescriptor
      descriptor;
  static {
    java.lang.String[] descriptorData = {
      "\n4protos/perfetto/metrics/android/surfac" +
      "eflinger.proto\022\017perfetto.protos\"\250\002\n\033Andr" +
      "oidSurfaceflingerMetric\022\025\n\rmissed_frames" +
      "\030\001 \001(\r\022\031\n\021missed_hwc_frames\030\002 \001(\r\022\031\n\021mis" +
      "sed_gpu_frames\030\003 \001(\r\022\031\n\021missed_frame_rat" +
      "e\030\004 \001(\001\022\035\n\025missed_hwc_frame_rate\030\005 \001(\001\022\035" +
      "\n\025missed_gpu_frame_rate\030\006 \001(\001\022\027\n\017gpu_inv" +
      "ocations\030\007 \001(\r\022\036\n\026avg_gpu_waiting_dur_ms" +
      "\030\010 \001(\001\022*\n\"total_non_empty_gpu_waiting_du" +
      "r_ms\030\t \001(\001"
    };
    descriptor = com.google.protobuf.Descriptors.FileDescriptor
      .internalBuildGeneratedFileFrom(descriptorData,
        new com.google.protobuf.Descriptors.FileDescriptor[] {
        });
    internal_static_perfetto_protos_AndroidSurfaceflingerMetric_descriptor =
      getDescriptor().getMessageTypes().get(0);
    internal_static_perfetto_protos_AndroidSurfaceflingerMetric_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_perfetto_protos_AndroidSurfaceflingerMetric_descriptor,
        new java.lang.String[] { "MissedFrames", "MissedHwcFrames", "MissedGpuFrames", "MissedFrameRate", "MissedHwcFrameRate", "MissedGpuFrameRate", "GpuInvocations", "AvgGpuWaitingDurMs", "TotalNonEmptyGpuWaitingDurMs", });
  }

  // @@protoc_insertion_point(outer_class_scope)
}
